// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: TSTStylePropertyArchiving.proto

package kpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Deprecated_TableStrokeArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stroke *StrokeArchive `protobuf:"bytes,1,opt,name=stroke" json:"stroke,omitempty"`
	// Deprecated: Do not use.
	Background *bool `protobuf:"varint,2,opt,name=background" json:"background,omitempty"`
	// Deprecated: Do not use.
	Opacity *float32 `protobuf:"fixed32,3,opt,name=opacity" json:"opacity,omitempty"`
	// Deprecated: Do not use.
	Empty *bool `protobuf:"varint,4,opt,name=empty" json:"empty,omitempty"`
}

func (x *Deprecated_TableStrokeArchive) Reset() {
	*x = Deprecated_TableStrokeArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTStylePropertyArchiving_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Deprecated_TableStrokeArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deprecated_TableStrokeArchive) ProtoMessage() {}

func (x *Deprecated_TableStrokeArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTStylePropertyArchiving_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deprecated_TableStrokeArchive.ProtoReflect.Descriptor instead.
func (*Deprecated_TableStrokeArchive) Descriptor() ([]byte, []int) {
	return file_TSTStylePropertyArchiving_proto_rawDescGZIP(), []int{0}
}

func (x *Deprecated_TableStrokeArchive) GetStroke() *StrokeArchive {
	if x != nil {
		return x.Stroke
	}
	return nil
}

// Deprecated: Do not use.
func (x *Deprecated_TableStrokeArchive) GetBackground() bool {
	if x != nil && x.Background != nil {
		return *x.Background
	}
	return false
}

// Deprecated: Do not use.
func (x *Deprecated_TableStrokeArchive) GetOpacity() float32 {
	if x != nil && x.Opacity != nil {
		return *x.Opacity
	}
	return 0
}

// Deprecated: Do not use.
func (x *Deprecated_TableStrokeArchive) GetEmpty() bool {
	if x != nil && x.Empty != nil {
		return *x.Empty
	}
	return false
}

type CellStylePropertiesArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellFill               *FillArchive                   `protobuf:"bytes,1,opt,name=cell_fill,json=cellFill" json:"cell_fill,omitempty"`
	TextWrap               *bool                          `protobuf:"varint,3,opt,name=text_wrap,json=textWrap" json:"text_wrap,omitempty"`
	DeprecatedTopStroke    *Deprecated_TableStrokeArchive `protobuf:"bytes,4,opt,name=deprecated_top_stroke,json=deprecatedTopStroke" json:"deprecated_top_stroke,omitempty"`
	DeprecatedRightStroke  *Deprecated_TableStrokeArchive `protobuf:"bytes,5,opt,name=deprecated_right_stroke,json=deprecatedRightStroke" json:"deprecated_right_stroke,omitempty"`
	DeprecatedBottomStroke *Deprecated_TableStrokeArchive `protobuf:"bytes,6,opt,name=deprecated_bottom_stroke,json=deprecatedBottomStroke" json:"deprecated_bottom_stroke,omitempty"`
	DeprecatedLeftStroke   *Deprecated_TableStrokeArchive `protobuf:"bytes,7,opt,name=deprecated_left_stroke,json=deprecatedLeftStroke" json:"deprecated_left_stroke,omitempty"`
	VerticalAlignment      *int32                         `protobuf:"varint,8,opt,name=vertical_alignment,json=verticalAlignment" json:"vertical_alignment,omitempty"`
	Padding                *PaddingArchive                `protobuf:"bytes,9,opt,name=padding" json:"padding,omitempty"`
	TopStroke              *StrokeArchive                 `protobuf:"bytes,10,opt,name=top_stroke,json=topStroke" json:"top_stroke,omitempty"`
	RightStroke            *StrokeArchive                 `protobuf:"bytes,11,opt,name=right_stroke,json=rightStroke" json:"right_stroke,omitempty"`
	BottomStroke           *StrokeArchive                 `protobuf:"bytes,12,opt,name=bottom_stroke,json=bottomStroke" json:"bottom_stroke,omitempty"`
	LeftStroke             *StrokeArchive                 `protobuf:"bytes,13,opt,name=left_stroke,json=leftStroke" json:"left_stroke,omitempty"`
}

func (x *CellStylePropertiesArchive) Reset() {
	*x = CellStylePropertiesArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTStylePropertyArchiving_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellStylePropertiesArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellStylePropertiesArchive) ProtoMessage() {}

func (x *CellStylePropertiesArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTStylePropertyArchiving_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellStylePropertiesArchive.ProtoReflect.Descriptor instead.
func (*CellStylePropertiesArchive) Descriptor() ([]byte, []int) {
	return file_TSTStylePropertyArchiving_proto_rawDescGZIP(), []int{1}
}

func (x *CellStylePropertiesArchive) GetCellFill() *FillArchive {
	if x != nil {
		return x.CellFill
	}
	return nil
}

func (x *CellStylePropertiesArchive) GetTextWrap() bool {
	if x != nil && x.TextWrap != nil {
		return *x.TextWrap
	}
	return false
}

func (x *CellStylePropertiesArchive) GetDeprecatedTopStroke() *Deprecated_TableStrokeArchive {
	if x != nil {
		return x.DeprecatedTopStroke
	}
	return nil
}

func (x *CellStylePropertiesArchive) GetDeprecatedRightStroke() *Deprecated_TableStrokeArchive {
	if x != nil {
		return x.DeprecatedRightStroke
	}
	return nil
}

func (x *CellStylePropertiesArchive) GetDeprecatedBottomStroke() *Deprecated_TableStrokeArchive {
	if x != nil {
		return x.DeprecatedBottomStroke
	}
	return nil
}

func (x *CellStylePropertiesArchive) GetDeprecatedLeftStroke() *Deprecated_TableStrokeArchive {
	if x != nil {
		return x.DeprecatedLeftStroke
	}
	return nil
}

func (x *CellStylePropertiesArchive) GetVerticalAlignment() int32 {
	if x != nil && x.VerticalAlignment != nil {
		return *x.VerticalAlignment
	}
	return 0
}

func (x *CellStylePropertiesArchive) GetPadding() *PaddingArchive {
	if x != nil {
		return x.Padding
	}
	return nil
}

func (x *CellStylePropertiesArchive) GetTopStroke() *StrokeArchive {
	if x != nil {
		return x.TopStroke
	}
	return nil
}

func (x *CellStylePropertiesArchive) GetRightStroke() *StrokeArchive {
	if x != nil {
		return x.RightStroke
	}
	return nil
}

func (x *CellStylePropertiesArchive) GetBottomStroke() *StrokeArchive {
	if x != nil {
		return x.BottomStroke
	}
	return nil
}

func (x *CellStylePropertiesArchive) GetLeftStroke() *StrokeArchive {
	if x != nil {
		return x.LeftStroke
	}
	return nil
}

type Deprecated_StrokePresetDataArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeprecatedHorizontalStroke *Deprecated_TableStrokeArchive `protobuf:"bytes,2,req,name=deprecated_horizontal_stroke,json=deprecatedHorizontalStroke" json:"deprecated_horizontal_stroke,omitempty"`
	DeprecatedVerticalStroke   *Deprecated_TableStrokeArchive `protobuf:"bytes,1,req,name=deprecated_vertical_stroke,json=deprecatedVerticalStroke" json:"deprecated_vertical_stroke,omitempty"`
	DeprecatedExteriorStroke   *Deprecated_TableStrokeArchive `protobuf:"bytes,3,req,name=deprecated_exterior_stroke,json=deprecatedExteriorStroke" json:"deprecated_exterior_stroke,omitempty"`
	DeprecatedVisibleMask      *int32                         `protobuf:"varint,5,req,name=deprecated_visible_mask,json=deprecatedVisibleMask" json:"deprecated_visible_mask,omitempty"`
}

func (x *Deprecated_StrokePresetDataArchive) Reset() {
	*x = Deprecated_StrokePresetDataArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTStylePropertyArchiving_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Deprecated_StrokePresetDataArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deprecated_StrokePresetDataArchive) ProtoMessage() {}

func (x *Deprecated_StrokePresetDataArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTStylePropertyArchiving_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deprecated_StrokePresetDataArchive.ProtoReflect.Descriptor instead.
func (*Deprecated_StrokePresetDataArchive) Descriptor() ([]byte, []int) {
	return file_TSTStylePropertyArchiving_proto_rawDescGZIP(), []int{2}
}

func (x *Deprecated_StrokePresetDataArchive) GetDeprecatedHorizontalStroke() *Deprecated_TableStrokeArchive {
	if x != nil {
		return x.DeprecatedHorizontalStroke
	}
	return nil
}

func (x *Deprecated_StrokePresetDataArchive) GetDeprecatedVerticalStroke() *Deprecated_TableStrokeArchive {
	if x != nil {
		return x.DeprecatedVerticalStroke
	}
	return nil
}

func (x *Deprecated_StrokePresetDataArchive) GetDeprecatedExteriorStroke() *Deprecated_TableStrokeArchive {
	if x != nil {
		return x.DeprecatedExteriorStroke
	}
	return nil
}

func (x *Deprecated_StrokePresetDataArchive) GetDeprecatedVisibleMask() int32 {
	if x != nil && x.DeprecatedVisibleMask != nil {
		return *x.DeprecatedVisibleMask
	}
	return 0
}

type StrokePresetDataArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HorizontalStroke *StrokeArchive `protobuf:"bytes,1,opt,name=horizontal_stroke,json=horizontalStroke" json:"horizontal_stroke,omitempty"`
	VerticalStroke   *StrokeArchive `protobuf:"bytes,2,opt,name=vertical_stroke,json=verticalStroke" json:"vertical_stroke,omitempty"`
	ExteriorStroke   *StrokeArchive `protobuf:"bytes,3,opt,name=exterior_stroke,json=exteriorStroke" json:"exterior_stroke,omitempty"`
	VisibleMask      *int32         `protobuf:"varint,4,opt,name=visible_mask,json=visibleMask" json:"visible_mask,omitempty"`
}

func (x *StrokePresetDataArchive) Reset() {
	*x = StrokePresetDataArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTStylePropertyArchiving_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StrokePresetDataArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrokePresetDataArchive) ProtoMessage() {}

func (x *StrokePresetDataArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTStylePropertyArchiving_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrokePresetDataArchive.ProtoReflect.Descriptor instead.
func (*StrokePresetDataArchive) Descriptor() ([]byte, []int) {
	return file_TSTStylePropertyArchiving_proto_rawDescGZIP(), []int{3}
}

func (x *StrokePresetDataArchive) GetHorizontalStroke() *StrokeArchive {
	if x != nil {
		return x.HorizontalStroke
	}
	return nil
}

func (x *StrokePresetDataArchive) GetVerticalStroke() *StrokeArchive {
	if x != nil {
		return x.VerticalStroke
	}
	return nil
}

func (x *StrokePresetDataArchive) GetExteriorStroke() *StrokeArchive {
	if x != nil {
		return x.ExteriorStroke
	}
	return nil
}

func (x *StrokePresetDataArchive) GetVisibleMask() int32 {
	if x != nil && x.VisibleMask != nil {
		return *x.VisibleMask
	}
	return 0
}

type StrokePresetListArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count            *int32                                `protobuf:"varint,1,req,name=count" json:"count,omitempty"`
	DeprecatedPreset []*Deprecated_StrokePresetDataArchive `protobuf:"bytes,2,rep,name=deprecated_preset,json=deprecatedPreset" json:"deprecated_preset,omitempty"`
	Preset           []*StrokePresetDataArchive            `protobuf:"bytes,3,rep,name=preset" json:"preset,omitempty"`
}

func (x *StrokePresetListArchive) Reset() {
	*x = StrokePresetListArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTStylePropertyArchiving_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StrokePresetListArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrokePresetListArchive) ProtoMessage() {}

func (x *StrokePresetListArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTStylePropertyArchiving_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrokePresetListArchive.ProtoReflect.Descriptor instead.
func (*StrokePresetListArchive) Descriptor() ([]byte, []int) {
	return file_TSTStylePropertyArchiving_proto_rawDescGZIP(), []int{4}
}

func (x *StrokePresetListArchive) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *StrokePresetListArchive) GetDeprecatedPreset() []*Deprecated_StrokePresetDataArchive {
	if x != nil {
		return x.DeprecatedPreset
	}
	return nil
}

func (x *StrokePresetListArchive) GetPreset() []*StrokePresetDataArchive {
	if x != nil {
		return x.Preset
	}
	return nil
}

type TableStylePropertiesArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BandedRows                                *bool                          `protobuf:"varint,1,opt,name=banded_rows,json=bandedRows" json:"banded_rows,omitempty"`
	BandedFill                                *FillArchive                   `protobuf:"bytes,2,opt,name=banded_fill,json=bandedFill" json:"banded_fill,omitempty"`
	BehavesLikeSpreadsheet                    *bool                          `protobuf:"varint,21,opt,name=behaves_like_spreadsheet,json=behavesLikeSpreadsheet" json:"behaves_like_spreadsheet,omitempty"`
	AutoResize                                *bool                          `protobuf:"varint,22,opt,name=auto_resize,json=autoResize" json:"auto_resize,omitempty"`
	DeprecatedHeaderRowSeparatorStroke        *Deprecated_TableStrokeArchive `protobuf:"bytes,4,opt,name=deprecated_header_row_separator_stroke,json=deprecatedHeaderRowSeparatorStroke" json:"deprecated_header_row_separator_stroke,omitempty"`
	DeprecatedHeaderRowBorderStroke           *Deprecated_TableStrokeArchive `protobuf:"bytes,5,opt,name=deprecated_header_row_border_stroke,json=deprecatedHeaderRowBorderStroke" json:"deprecated_header_row_border_stroke,omitempty"`
	DeprecatedHeaderRowHorizontalStroke       *Deprecated_TableStrokeArchive `protobuf:"bytes,23,opt,name=deprecated_header_row_horizontal_stroke,json=deprecatedHeaderRowHorizontalStroke" json:"deprecated_header_row_horizontal_stroke,omitempty"`
	DeprecatedHeaderRowVerticalStroke         *Deprecated_TableStrokeArchive `protobuf:"bytes,24,opt,name=deprecated_header_row_vertical_stroke,json=deprecatedHeaderRowVerticalStroke" json:"deprecated_header_row_vertical_stroke,omitempty"`
	DeprecatedHeaderColumnBorderStroke        *Deprecated_TableStrokeArchive `protobuf:"bytes,7,opt,name=deprecated_header_column_border_stroke,json=deprecatedHeaderColumnBorderStroke" json:"deprecated_header_column_border_stroke,omitempty"`
	DeprecatedHeaderColumnSeparatorStroke     *Deprecated_TableStrokeArchive `protobuf:"bytes,8,opt,name=deprecated_header_column_separator_stroke,json=deprecatedHeaderColumnSeparatorStroke" json:"deprecated_header_column_separator_stroke,omitempty"`
	DeprecatedHeaderColumnHorizontalStroke    *Deprecated_TableStrokeArchive `protobuf:"bytes,25,opt,name=deprecated_header_column_horizontal_stroke,json=deprecatedHeaderColumnHorizontalStroke" json:"deprecated_header_column_horizontal_stroke,omitempty"`
	DeprecatedHeaderColumnVerticalStroke      *Deprecated_TableStrokeArchive `protobuf:"bytes,26,opt,name=deprecated_header_column_vertical_stroke,json=deprecatedHeaderColumnVerticalStroke" json:"deprecated_header_column_vertical_stroke,omitempty"`
	DeprecatedFooterRowSeparatorStroke        *Deprecated_TableStrokeArchive `protobuf:"bytes,10,opt,name=deprecated_footer_row_separator_stroke,json=deprecatedFooterRowSeparatorStroke" json:"deprecated_footer_row_separator_stroke,omitempty"`
	DeprecatedFooterRowBorderStroke           *Deprecated_TableStrokeArchive `protobuf:"bytes,11,opt,name=deprecated_footer_row_border_stroke,json=deprecatedFooterRowBorderStroke" json:"deprecated_footer_row_border_stroke,omitempty"`
	DeprecatedFooterRowHorizontalStroke       *Deprecated_TableStrokeArchive `protobuf:"bytes,27,opt,name=deprecated_footer_row_horizontal_stroke,json=deprecatedFooterRowHorizontalStroke" json:"deprecated_footer_row_horizontal_stroke,omitempty"`
	DeprecatedFooterRowVerticalStroke         *Deprecated_TableStrokeArchive `protobuf:"bytes,28,opt,name=deprecated_footer_row_vertical_stroke,json=deprecatedFooterRowVerticalStroke" json:"deprecated_footer_row_vertical_stroke,omitempty"`
	DeprecatedTableBodyHorizontalBorderStroke *Deprecated_TableStrokeArchive `protobuf:"bytes,12,opt,name=deprecated_table_body_horizontal_border_stroke,json=deprecatedTableBodyHorizontalBorderStroke" json:"deprecated_table_body_horizontal_border_stroke,omitempty"`
	DeprecatedTableBodyVerticalBorderStroke   *Deprecated_TableStrokeArchive `protobuf:"bytes,29,opt,name=deprecated_table_body_vertical_border_stroke,json=deprecatedTableBodyVerticalBorderStroke" json:"deprecated_table_body_vertical_border_stroke,omitempty"`
	DeprecatedTableBodyHorizontalStroke       *Deprecated_TableStrokeArchive `protobuf:"bytes,30,opt,name=deprecated_table_body_horizontal_stroke,json=deprecatedTableBodyHorizontalStroke" json:"deprecated_table_body_horizontal_stroke,omitempty"`
	DeprecatedTableBodyVerticalStroke         *Deprecated_TableStrokeArchive `protobuf:"bytes,31,opt,name=deprecated_table_body_vertical_stroke,json=deprecatedTableBodyVerticalStroke" json:"deprecated_table_body_vertical_stroke,omitempty"`
	StrokePresetList                          *StrokePresetListArchive       `protobuf:"bytes,32,opt,name=stroke_preset_list,json=strokePresetList" json:"stroke_preset_list,omitempty"`
	VStrokesVisible                           *bool                          `protobuf:"varint,33,opt,name=v_strokes_visible,json=vStrokesVisible" json:"v_strokes_visible,omitempty"`
	HStrokesVisible                           *bool                          `protobuf:"varint,34,opt,name=h_strokes_visible,json=hStrokesVisible" json:"h_strokes_visible,omitempty"`
	HrSeparatorVisible                        *bool                          `protobuf:"varint,35,opt,name=hr_separator_visible,json=hrSeparatorVisible" json:"hr_separator_visible,omitempty"`
	HcSeparatorVisible                        *bool                          `protobuf:"varint,36,opt,name=hc_separator_visible,json=hcSeparatorVisible" json:"hc_separator_visible,omitempty"`
	FooterSeparatorVisible                    *bool                          `protobuf:"varint,37,opt,name=footer_separator_visible,json=footerSeparatorVisible" json:"footer_separator_visible,omitempty"`
	TableBorderVisible                        *bool                          `protobuf:"varint,38,opt,name=table_border_visible,json=tableBorderVisible" json:"table_border_visible,omitempty"`
	TableHeaderBorderVisible                  *bool                          `protobuf:"varint,39,opt,name=table_header_border_visible,json=tableHeaderBorderVisible" json:"table_header_border_visible,omitempty"`
	TableHcDividerVisible                     *bool                          `protobuf:"varint,42,opt,name=table_hc_divider_visible,json=tableHcDividerVisible" json:"table_hc_divider_visible,omitempty"`
	TableHrDividerVisible                     *bool                          `protobuf:"varint,43,opt,name=table_hr_divider_visible,json=tableHrDividerVisible" json:"table_hr_divider_visible,omitempty"`
	TableFooterDividerVisible                 *bool                          `protobuf:"varint,44,opt,name=table_footer_divider_visible,json=tableFooterDividerVisible" json:"table_footer_divider_visible,omitempty"`
	OBSOLETEMasterFontSize                    *int32                         `protobuf:"varint,40,opt,name=OBSOLETE_master_font_size,json=OBSOLETEMasterFontSize" json:"OBSOLETE_master_font_size,omitempty"`
	MasterFontFamily                          *string                        `protobuf:"bytes,41,opt,name=master_font_family,json=masterFontFamily" json:"master_font_family,omitempty"`
	WritingDirection                          *WritingDirectionType          `protobuf:"varint,45,opt,name=writing_direction,json=writingDirection,enum=TSWP.WritingDirectionType" json:"writing_direction,omitempty"`
	HeaderRowSeparatorStroke                  *StrokeArchive                 `protobuf:"bytes,46,opt,name=header_row_separator_stroke,json=headerRowSeparatorStroke" json:"header_row_separator_stroke,omitempty"`
	HeaderRowBorderStroke                     *StrokeArchive                 `protobuf:"bytes,47,opt,name=header_row_border_stroke,json=headerRowBorderStroke" json:"header_row_border_stroke,omitempty"`
	HeaderRowHorizontalStroke                 *StrokeArchive                 `protobuf:"bytes,48,opt,name=header_row_horizontal_stroke,json=headerRowHorizontalStroke" json:"header_row_horizontal_stroke,omitempty"`
	HeaderRowVerticalStroke                   *StrokeArchive                 `protobuf:"bytes,49,opt,name=header_row_vertical_stroke,json=headerRowVerticalStroke" json:"header_row_vertical_stroke,omitempty"`
	HeaderColumnBorderStroke                  *StrokeArchive                 `protobuf:"bytes,50,opt,name=header_column_border_stroke,json=headerColumnBorderStroke" json:"header_column_border_stroke,omitempty"`
	HeaderColumnSeparatorStroke               *StrokeArchive                 `protobuf:"bytes,51,opt,name=header_column_separator_stroke,json=headerColumnSeparatorStroke" json:"header_column_separator_stroke,omitempty"`
	HeaderColumnHorizontalStroke              *StrokeArchive                 `protobuf:"bytes,52,opt,name=header_column_horizontal_stroke,json=headerColumnHorizontalStroke" json:"header_column_horizontal_stroke,omitempty"`
	HeaderColumnVerticalStroke                *StrokeArchive                 `protobuf:"bytes,53,opt,name=header_column_vertical_stroke,json=headerColumnVerticalStroke" json:"header_column_vertical_stroke,omitempty"`
	FooterRowSeparatorStroke                  *StrokeArchive                 `protobuf:"bytes,54,opt,name=footer_row_separator_stroke,json=footerRowSeparatorStroke" json:"footer_row_separator_stroke,omitempty"`
	FooterRowBorderStroke                     *StrokeArchive                 `protobuf:"bytes,55,opt,name=footer_row_border_stroke,json=footerRowBorderStroke" json:"footer_row_border_stroke,omitempty"`
	FooterRowHorizontalStroke                 *StrokeArchive                 `protobuf:"bytes,56,opt,name=footer_row_horizontal_stroke,json=footerRowHorizontalStroke" json:"footer_row_horizontal_stroke,omitempty"`
	FooterRowVerticalStroke                   *StrokeArchive                 `protobuf:"bytes,57,opt,name=footer_row_vertical_stroke,json=footerRowVerticalStroke" json:"footer_row_vertical_stroke,omitempty"`
	TableBodyHorizontalBorderStroke           *StrokeArchive                 `protobuf:"bytes,58,opt,name=table_body_horizontal_border_stroke,json=tableBodyHorizontalBorderStroke" json:"table_body_horizontal_border_stroke,omitempty"`
	TableBodyVerticalBorderStroke             *StrokeArchive                 `protobuf:"bytes,59,opt,name=table_body_vertical_border_stroke,json=tableBodyVerticalBorderStroke" json:"table_body_vertical_border_stroke,omitempty"`
	TableBodyHorizontalStroke                 *StrokeArchive                 `protobuf:"bytes,60,opt,name=table_body_horizontal_stroke,json=tableBodyHorizontalStroke" json:"table_body_horizontal_stroke,omitempty"`
	TableBodyVerticalStroke                   *StrokeArchive                 `protobuf:"bytes,61,opt,name=table_body_vertical_stroke,json=tableBodyVerticalStroke" json:"table_body_vertical_stroke,omitempty"`
	CategoryLevel1TopStroke                   *StrokeArchive                 `protobuf:"bytes,62,opt,name=category_level1_top_stroke,json=categoryLevel1TopStroke" json:"category_level1_top_stroke,omitempty"`
	CategoryLevel2TopStroke                   *StrokeArchive                 `protobuf:"bytes,63,opt,name=category_level2_top_stroke,json=categoryLevel2TopStroke" json:"category_level2_top_stroke,omitempty"`
	CategoryLevel3TopStroke                   *StrokeArchive                 `protobuf:"bytes,64,opt,name=category_level3_top_stroke,json=categoryLevel3TopStroke" json:"category_level3_top_stroke,omitempty"`
	CategoryLevel4TopStroke                   *StrokeArchive                 `protobuf:"bytes,65,opt,name=category_level4_top_stroke,json=categoryLevel4TopStroke" json:"category_level4_top_stroke,omitempty"`
	CategoryLevel5TopStroke                   *StrokeArchive                 `protobuf:"bytes,66,opt,name=category_level5_top_stroke,json=categoryLevel5TopStroke" json:"category_level5_top_stroke,omitempty"`
	CategoryLevel1BottomStroke                *StrokeArchive                 `protobuf:"bytes,67,opt,name=category_level1_bottom_stroke,json=categoryLevel1BottomStroke" json:"category_level1_bottom_stroke,omitempty"`
	CategoryLevel2BottomStroke                *StrokeArchive                 `protobuf:"bytes,68,opt,name=category_level2_bottom_stroke,json=categoryLevel2BottomStroke" json:"category_level2_bottom_stroke,omitempty"`
	CategoryLevel3BottomStroke                *StrokeArchive                 `protobuf:"bytes,69,opt,name=category_level3_bottom_stroke,json=categoryLevel3BottomStroke" json:"category_level3_bottom_stroke,omitempty"`
	CategoryLevel4BottomStroke                *StrokeArchive                 `protobuf:"bytes,70,opt,name=category_level4_bottom_stroke,json=categoryLevel4BottomStroke" json:"category_level4_bottom_stroke,omitempty"`
	CategoryLevel5BottomStroke                *StrokeArchive                 `protobuf:"bytes,71,opt,name=category_level5_bottom_stroke,json=categoryLevel5BottomStroke" json:"category_level5_bottom_stroke,omitempty"`
	CategoryLevel1InteriorStroke              *StrokeArchive                 `protobuf:"bytes,72,opt,name=category_level1_interior_stroke,json=categoryLevel1InteriorStroke" json:"category_level1_interior_stroke,omitempty"`
	CategoryLevel2InteriorStroke              *StrokeArchive                 `protobuf:"bytes,73,opt,name=category_level2_interior_stroke,json=categoryLevel2InteriorStroke" json:"category_level2_interior_stroke,omitempty"`
	CategoryLevel3InteriorStroke              *StrokeArchive                 `protobuf:"bytes,74,opt,name=category_level3_interior_stroke,json=categoryLevel3InteriorStroke" json:"category_level3_interior_stroke,omitempty"`
	CategoryLevel4InteriorStroke              *StrokeArchive                 `protobuf:"bytes,75,opt,name=category_level4_interior_stroke,json=categoryLevel4InteriorStroke" json:"category_level4_interior_stroke,omitempty"`
	CategoryLevel5InteriorStroke              *StrokeArchive                 `protobuf:"bytes,76,opt,name=category_level5_interior_stroke,json=categoryLevel5InteriorStroke" json:"category_level5_interior_stroke,omitempty"`
	CategoryLevel1LabelSeparatorStroke        *StrokeArchive                 `protobuf:"bytes,77,opt,name=category_level1_label_separator_stroke,json=categoryLevel1LabelSeparatorStroke" json:"category_level1_label_separator_stroke,omitempty"`
	CategoryLevel2LabelSeparatorStroke        *StrokeArchive                 `protobuf:"bytes,78,opt,name=category_level2_label_separator_stroke,json=categoryLevel2LabelSeparatorStroke" json:"category_level2_label_separator_stroke,omitempty"`
	CategoryLevel3LabelSeparatorStroke        *StrokeArchive                 `protobuf:"bytes,79,opt,name=category_level3_label_separator_stroke,json=categoryLevel3LabelSeparatorStroke" json:"category_level3_label_separator_stroke,omitempty"`
	CategoryLevel4LabelSeparatorStroke        *StrokeArchive                 `protobuf:"bytes,80,opt,name=category_level4_label_separator_stroke,json=categoryLevel4LabelSeparatorStroke" json:"category_level4_label_separator_stroke,omitempty"`
	CategoryLevel5LabelSeparatorStroke        *StrokeArchive                 `protobuf:"bytes,81,opt,name=category_level5_label_separator_stroke,json=categoryLevel5LabelSeparatorStroke" json:"category_level5_label_separator_stroke,omitempty"`
	TableBodyPivotGroupHorizontalStroke       *StrokeArchive                 `protobuf:"bytes,82,opt,name=table_body_pivot_group_horizontal_stroke,json=tableBodyPivotGroupHorizontalStroke" json:"table_body_pivot_group_horizontal_stroke,omitempty"`
	TableBodyPivotGroupVerticalStroke         *StrokeArchive                 `protobuf:"bytes,83,opt,name=table_body_pivot_group_vertical_stroke,json=tableBodyPivotGroupVerticalStroke" json:"table_body_pivot_group_vertical_stroke,omitempty"`
	TableBodyPivotDeemphasisHorizontalStroke  *StrokeArchive                 `protobuf:"bytes,84,opt,name=table_body_pivot_deemphasis_horizontal_stroke,json=tableBodyPivotDeemphasisHorizontalStroke" json:"table_body_pivot_deemphasis_horizontal_stroke,omitempty"`
	TableBodyPivotEmphasisVerticalStroke      *StrokeArchive                 `protobuf:"bytes,85,opt,name=table_body_pivot_emphasis_vertical_stroke,json=tableBodyPivotEmphasisVerticalStroke" json:"table_body_pivot_emphasis_vertical_stroke,omitempty"`
	HeaderColumnPivotGroupHorizontalStroke    *StrokeArchive                 `protobuf:"bytes,86,opt,name=header_column_pivot_group_horizontal_stroke,json=headerColumnPivotGroupHorizontalStroke" json:"header_column_pivot_group_horizontal_stroke,omitempty"`
	HeaderColumnPivotGroupDeemphasisStroke    *StrokeArchive                 `protobuf:"bytes,87,opt,name=header_column_pivot_group_deemphasis_stroke,json=headerColumnPivotGroupDeemphasisStroke" json:"header_column_pivot_group_deemphasis_stroke,omitempty"`
	HeaderColumnPivotSeparatorStroke          *StrokeArchive                 `protobuf:"bytes,88,opt,name=header_column_pivot_separator_stroke,json=headerColumnPivotSeparatorStroke" json:"header_column_pivot_separator_stroke,omitempty"`
	HeaderRowPivotGroupVerticalStroke         *StrokeArchive                 `protobuf:"bytes,89,opt,name=header_row_pivot_group_vertical_stroke,json=headerRowPivotGroupVerticalStroke" json:"header_row_pivot_group_vertical_stroke,omitempty"`
	HeaderRowPivotGroupDeemphasisStroke       *StrokeArchive                 `protobuf:"bytes,90,opt,name=header_row_pivot_group_deemphasis_stroke,json=headerRowPivotGroupDeemphasisStroke" json:"header_row_pivot_group_deemphasis_stroke,omitempty"`
	HeaderRowPivotTitleStroke                 *StrokeArchive                 `protobuf:"bytes,91,opt,name=header_row_pivot_title_stroke,json=headerRowPivotTitleStroke" json:"header_row_pivot_title_stroke,omitempty"`
	FooterRowPivotGroupVerticalStroke         *StrokeArchive                 `protobuf:"bytes,92,opt,name=footer_row_pivot_group_vertical_stroke,json=footerRowPivotGroupVerticalStroke" json:"footer_row_pivot_group_vertical_stroke,omitempty"`
}

func (x *TableStylePropertiesArchive) Reset() {
	*x = TableStylePropertiesArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTStylePropertyArchiving_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableStylePropertiesArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableStylePropertiesArchive) ProtoMessage() {}

func (x *TableStylePropertiesArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTStylePropertyArchiving_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableStylePropertiesArchive.ProtoReflect.Descriptor instead.
func (*TableStylePropertiesArchive) Descriptor() ([]byte, []int) {
	return file_TSTStylePropertyArchiving_proto_rawDescGZIP(), []int{5}
}

func (x *TableStylePropertiesArchive) GetBandedRows() bool {
	if x != nil && x.BandedRows != nil {
		return *x.BandedRows
	}
	return false
}

func (x *TableStylePropertiesArchive) GetBandedFill() *FillArchive {
	if x != nil {
		return x.BandedFill
	}
	return nil
}

func (x *TableStylePropertiesArchive) GetBehavesLikeSpreadsheet() bool {
	if x != nil && x.BehavesLikeSpreadsheet != nil {
		return *x.BehavesLikeSpreadsheet
	}
	return false
}

func (x *TableStylePropertiesArchive) GetAutoResize() bool {
	if x != nil && x.AutoResize != nil {
		return *x.AutoResize
	}
	return false
}

func (x *TableStylePropertiesArchive) GetDeprecatedHeaderRowSeparatorStroke() *Deprecated_TableStrokeArchive {
	if x != nil {
		return x.DeprecatedHeaderRowSeparatorStroke
	}
	return nil
}

func (x *TableStylePropertiesArchive) GetDeprecatedHeaderRowBorderStroke() *Deprecated_TableStrokeArchive {
	if x != nil {
		return x.DeprecatedHeaderRowBorderStroke
	}
	return nil
}

func (x *TableStylePropertiesArchive) GetDeprecatedHeaderRowHorizontalStroke() *Deprecated_TableStrokeArchive {
	if x != nil {
		return x.DeprecatedHeaderRowHorizontalStroke
	}
	return nil
}

func (x *TableStylePropertiesArchive) GetDeprecatedHeaderRowVerticalStroke() *Deprecated_TableStrokeArchive {
	if x != nil {
		return x.DeprecatedHeaderRowVerticalStroke
	}
	return nil
}

func (x *TableStylePropertiesArchive) GetDeprecatedHeaderColumnBorderStroke() *Deprecated_TableStrokeArchive {
	if x != nil {
		return x.DeprecatedHeaderColumnBorderStroke
	}
	return nil
}

func (x *TableStylePropertiesArchive) GetDeprecatedHeaderColumnSeparatorStroke() *Deprecated_TableStrokeArchive {
	if x != nil {
		return x.DeprecatedHeaderColumnSeparatorStroke
	}
	return nil
}

func (x *TableStylePropertiesArchive) GetDeprecatedHeaderColumnHorizontalStroke() *Deprecated_TableStrokeArchive {
	if x != nil {
		return x.DeprecatedHeaderColumnHorizontalStroke
	}
	return nil
}

func (x *TableStylePropertiesArchive) GetDeprecatedHeaderColumnVerticalStroke() *Deprecated_TableStrokeArchive {
	if x != nil {
		return x.DeprecatedHeaderColumnVerticalStroke
	}
	return nil
}

func (x *TableStylePropertiesArchive) GetDeprecatedFooterRowSeparatorStroke() *Deprecated_TableStrokeArchive {
	if x != nil {
		return x.DeprecatedFooterRowSeparatorStroke
	}
	return nil
}

func (x *TableStylePropertiesArchive) GetDeprecatedFooterRowBorderStroke() *Deprecated_TableStrokeArchive {
	if x != nil {
		return x.DeprecatedFooterRowBorderStroke
	}
	return nil
}

func (x *TableStylePropertiesArchive) GetDeprecatedFooterRowHorizontalStroke() *Deprecated_TableStrokeArchive {
	if x != nil {
		return x.DeprecatedFooterRowHorizontalStroke
	}
	return nil
}

func (x *TableStylePropertiesArchive) GetDeprecatedFooterRowVerticalStroke() *Deprecated_TableStrokeArchive {
	if x != nil {
		return x.DeprecatedFooterRowVerticalStroke
	}
	return nil
}

func (x *TableStylePropertiesArchive) GetDeprecatedTableBodyHorizontalBorderStroke() *Deprecated_TableStrokeArchive {
	if x != nil {
		return x.DeprecatedTableBodyHorizontalBorderStroke
	}
	return nil
}

func (x *TableStylePropertiesArchive) GetDeprecatedTableBodyVerticalBorderStroke() *Deprecated_TableStrokeArchive {
	if x != nil {
		return x.DeprecatedTableBodyVerticalBorderStroke
	}
	return nil
}

func (x *TableStylePropertiesArchive) GetDeprecatedTableBodyHorizontalStroke() *Deprecated_TableStrokeArchive {
	if x != nil {
		return x.DeprecatedTableBodyHorizontalStroke
	}
	return nil
}

func (x *TableStylePropertiesArchive) GetDeprecatedTableBodyVerticalStroke() *Deprecated_TableStrokeArchive {
	if x != nil {
		return x.DeprecatedTableBodyVerticalStroke
	}
	return nil
}

func (x *TableStylePropertiesArchive) GetStrokePresetList() *StrokePresetListArchive {
	if x != nil {
		return x.StrokePresetList
	}
	return nil
}

func (x *TableStylePropertiesArchive) GetVStrokesVisible() bool {
	if x != nil && x.VStrokesVisible != nil {
		return *x.VStrokesVisible
	}
	return false
}

func (x *TableStylePropertiesArchive) GetHStrokesVisible() bool {
	if x != nil && x.HStrokesVisible != nil {
		return *x.HStrokesVisible
	}
	return false
}

func (x *TableStylePropertiesArchive) GetHrSeparatorVisible() bool {
	if x != nil && x.HrSeparatorVisible != nil {
		return *x.HrSeparatorVisible
	}
	return false
}

func (x *TableStylePropertiesArchive) GetHcSeparatorVisible() bool {
	if x != nil && x.HcSeparatorVisible != nil {
		return *x.HcSeparatorVisible
	}
	return false
}

func (x *TableStylePropertiesArchive) GetFooterSeparatorVisible() bool {
	if x != nil && x.FooterSeparatorVisible != nil {
		return *x.FooterSeparatorVisible
	}
	return false
}

func (x *TableStylePropertiesArchive) GetTableBorderVisible() bool {
	if x != nil && x.TableBorderVisible != nil {
		return *x.TableBorderVisible
	}
	return false
}

func (x *TableStylePropertiesArchive) GetTableHeaderBorderVisible() bool {
	if x != nil && x.TableHeaderBorderVisible != nil {
		return *x.TableHeaderBorderVisible
	}
	return false
}

func (x *TableStylePropertiesArchive) GetTableHcDividerVisible() bool {
	if x != nil && x.TableHcDividerVisible != nil {
		return *x.TableHcDividerVisible
	}
	return false
}

func (x *TableStylePropertiesArchive) GetTableHrDividerVisible() bool {
	if x != nil && x.TableHrDividerVisible != nil {
		return *x.TableHrDividerVisible
	}
	return false
}

func (x *TableStylePropertiesArchive) GetTableFooterDividerVisible() bool {
	if x != nil && x.TableFooterDividerVisible != nil {
		return *x.TableFooterDividerVisible
	}
	return false
}

func (x *TableStylePropertiesArchive) GetOBSOLETEMasterFontSize() int32 {
	if x != nil && x.OBSOLETEMasterFontSize != nil {
		return *x.OBSOLETEMasterFontSize
	}
	return 0
}

func (x *TableStylePropertiesArchive) GetMasterFontFamily() string {
	if x != nil && x.MasterFontFamily != nil {
		return *x.MasterFontFamily
	}
	return ""
}

func (x *TableStylePropertiesArchive) GetWritingDirection() WritingDirectionType {
	if x != nil && x.WritingDirection != nil {
		return *x.WritingDirection
	}
	return WritingDirectionType_kWritingDirectionNatural
}

func (x *TableStylePropertiesArchive) GetHeaderRowSeparatorStroke() *StrokeArchive {
	if x != nil {
		return x.HeaderRowSeparatorStroke
	}
	return nil
}

func (x *TableStylePropertiesArchive) GetHeaderRowBorderStroke() *StrokeArchive {
	if x != nil {
		return x.HeaderRowBorderStroke
	}
	return nil
}

func (x *TableStylePropertiesArchive) GetHeaderRowHorizontalStroke() *StrokeArchive {
	if x != nil {
		return x.HeaderRowHorizontalStroke
	}
	return nil
}

func (x *TableStylePropertiesArchive) GetHeaderRowVerticalStroke() *StrokeArchive {
	if x != nil {
		return x.HeaderRowVerticalStroke
	}
	return nil
}

func (x *TableStylePropertiesArchive) GetHeaderColumnBorderStroke() *StrokeArchive {
	if x != nil {
		return x.HeaderColumnBorderStroke
	}
	return nil
}

func (x *TableStylePropertiesArchive) GetHeaderColumnSeparatorStroke() *StrokeArchive {
	if x != nil {
		return x.HeaderColumnSeparatorStroke
	}
	return nil
}

func (x *TableStylePropertiesArchive) GetHeaderColumnHorizontalStroke() *StrokeArchive {
	if x != nil {
		return x.HeaderColumnHorizontalStroke
	}
	return nil
}

func (x *TableStylePropertiesArchive) GetHeaderColumnVerticalStroke() *StrokeArchive {
	if x != nil {
		return x.HeaderColumnVerticalStroke
	}
	return nil
}

func (x *TableStylePropertiesArchive) GetFooterRowSeparatorStroke() *StrokeArchive {
	if x != nil {
		return x.FooterRowSeparatorStroke
	}
	return nil
}

func (x *TableStylePropertiesArchive) GetFooterRowBorderStroke() *StrokeArchive {
	if x != nil {
		return x.FooterRowBorderStroke
	}
	return nil
}

func (x *TableStylePropertiesArchive) GetFooterRowHorizontalStroke() *StrokeArchive {
	if x != nil {
		return x.FooterRowHorizontalStroke
	}
	return nil
}

func (x *TableStylePropertiesArchive) GetFooterRowVerticalStroke() *StrokeArchive {
	if x != nil {
		return x.FooterRowVerticalStroke
	}
	return nil
}

func (x *TableStylePropertiesArchive) GetTableBodyHorizontalBorderStroke() *StrokeArchive {
	if x != nil {
		return x.TableBodyHorizontalBorderStroke
	}
	return nil
}

func (x *TableStylePropertiesArchive) GetTableBodyVerticalBorderStroke() *StrokeArchive {
	if x != nil {
		return x.TableBodyVerticalBorderStroke
	}
	return nil
}

func (x *TableStylePropertiesArchive) GetTableBodyHorizontalStroke() *StrokeArchive {
	if x != nil {
		return x.TableBodyHorizontalStroke
	}
	return nil
}

func (x *TableStylePropertiesArchive) GetTableBodyVerticalStroke() *StrokeArchive {
	if x != nil {
		return x.TableBodyVerticalStroke
	}
	return nil
}

func (x *TableStylePropertiesArchive) GetCategoryLevel1TopStroke() *StrokeArchive {
	if x != nil {
		return x.CategoryLevel1TopStroke
	}
	return nil
}

func (x *TableStylePropertiesArchive) GetCategoryLevel2TopStroke() *StrokeArchive {
	if x != nil {
		return x.CategoryLevel2TopStroke
	}
	return nil
}

func (x *TableStylePropertiesArchive) GetCategoryLevel3TopStroke() *StrokeArchive {
	if x != nil {
		return x.CategoryLevel3TopStroke
	}
	return nil
}

func (x *TableStylePropertiesArchive) GetCategoryLevel4TopStroke() *StrokeArchive {
	if x != nil {
		return x.CategoryLevel4TopStroke
	}
	return nil
}

func (x *TableStylePropertiesArchive) GetCategoryLevel5TopStroke() *StrokeArchive {
	if x != nil {
		return x.CategoryLevel5TopStroke
	}
	return nil
}

func (x *TableStylePropertiesArchive) GetCategoryLevel1BottomStroke() *StrokeArchive {
	if x != nil {
		return x.CategoryLevel1BottomStroke
	}
	return nil
}

func (x *TableStylePropertiesArchive) GetCategoryLevel2BottomStroke() *StrokeArchive {
	if x != nil {
		return x.CategoryLevel2BottomStroke
	}
	return nil
}

func (x *TableStylePropertiesArchive) GetCategoryLevel3BottomStroke() *StrokeArchive {
	if x != nil {
		return x.CategoryLevel3BottomStroke
	}
	return nil
}

func (x *TableStylePropertiesArchive) GetCategoryLevel4BottomStroke() *StrokeArchive {
	if x != nil {
		return x.CategoryLevel4BottomStroke
	}
	return nil
}

func (x *TableStylePropertiesArchive) GetCategoryLevel5BottomStroke() *StrokeArchive {
	if x != nil {
		return x.CategoryLevel5BottomStroke
	}
	return nil
}

func (x *TableStylePropertiesArchive) GetCategoryLevel1InteriorStroke() *StrokeArchive {
	if x != nil {
		return x.CategoryLevel1InteriorStroke
	}
	return nil
}

func (x *TableStylePropertiesArchive) GetCategoryLevel2InteriorStroke() *StrokeArchive {
	if x != nil {
		return x.CategoryLevel2InteriorStroke
	}
	return nil
}

func (x *TableStylePropertiesArchive) GetCategoryLevel3InteriorStroke() *StrokeArchive {
	if x != nil {
		return x.CategoryLevel3InteriorStroke
	}
	return nil
}

func (x *TableStylePropertiesArchive) GetCategoryLevel4InteriorStroke() *StrokeArchive {
	if x != nil {
		return x.CategoryLevel4InteriorStroke
	}
	return nil
}

func (x *TableStylePropertiesArchive) GetCategoryLevel5InteriorStroke() *StrokeArchive {
	if x != nil {
		return x.CategoryLevel5InteriorStroke
	}
	return nil
}

func (x *TableStylePropertiesArchive) GetCategoryLevel1LabelSeparatorStroke() *StrokeArchive {
	if x != nil {
		return x.CategoryLevel1LabelSeparatorStroke
	}
	return nil
}

func (x *TableStylePropertiesArchive) GetCategoryLevel2LabelSeparatorStroke() *StrokeArchive {
	if x != nil {
		return x.CategoryLevel2LabelSeparatorStroke
	}
	return nil
}

func (x *TableStylePropertiesArchive) GetCategoryLevel3LabelSeparatorStroke() *StrokeArchive {
	if x != nil {
		return x.CategoryLevel3LabelSeparatorStroke
	}
	return nil
}

func (x *TableStylePropertiesArchive) GetCategoryLevel4LabelSeparatorStroke() *StrokeArchive {
	if x != nil {
		return x.CategoryLevel4LabelSeparatorStroke
	}
	return nil
}

func (x *TableStylePropertiesArchive) GetCategoryLevel5LabelSeparatorStroke() *StrokeArchive {
	if x != nil {
		return x.CategoryLevel5LabelSeparatorStroke
	}
	return nil
}

func (x *TableStylePropertiesArchive) GetTableBodyPivotGroupHorizontalStroke() *StrokeArchive {
	if x != nil {
		return x.TableBodyPivotGroupHorizontalStroke
	}
	return nil
}

func (x *TableStylePropertiesArchive) GetTableBodyPivotGroupVerticalStroke() *StrokeArchive {
	if x != nil {
		return x.TableBodyPivotGroupVerticalStroke
	}
	return nil
}

func (x *TableStylePropertiesArchive) GetTableBodyPivotDeemphasisHorizontalStroke() *StrokeArchive {
	if x != nil {
		return x.TableBodyPivotDeemphasisHorizontalStroke
	}
	return nil
}

func (x *TableStylePropertiesArchive) GetTableBodyPivotEmphasisVerticalStroke() *StrokeArchive {
	if x != nil {
		return x.TableBodyPivotEmphasisVerticalStroke
	}
	return nil
}

func (x *TableStylePropertiesArchive) GetHeaderColumnPivotGroupHorizontalStroke() *StrokeArchive {
	if x != nil {
		return x.HeaderColumnPivotGroupHorizontalStroke
	}
	return nil
}

func (x *TableStylePropertiesArchive) GetHeaderColumnPivotGroupDeemphasisStroke() *StrokeArchive {
	if x != nil {
		return x.HeaderColumnPivotGroupDeemphasisStroke
	}
	return nil
}

func (x *TableStylePropertiesArchive) GetHeaderColumnPivotSeparatorStroke() *StrokeArchive {
	if x != nil {
		return x.HeaderColumnPivotSeparatorStroke
	}
	return nil
}

func (x *TableStylePropertiesArchive) GetHeaderRowPivotGroupVerticalStroke() *StrokeArchive {
	if x != nil {
		return x.HeaderRowPivotGroupVerticalStroke
	}
	return nil
}

func (x *TableStylePropertiesArchive) GetHeaderRowPivotGroupDeemphasisStroke() *StrokeArchive {
	if x != nil {
		return x.HeaderRowPivotGroupDeemphasisStroke
	}
	return nil
}

func (x *TableStylePropertiesArchive) GetHeaderRowPivotTitleStroke() *StrokeArchive {
	if x != nil {
		return x.HeaderRowPivotTitleStroke
	}
	return nil
}

func (x *TableStylePropertiesArchive) GetFooterRowPivotGroupVerticalStroke() *StrokeArchive {
	if x != nil {
		return x.FooterRowPivotGroupVerticalStroke
	}
	return nil
}

type TableStylePresetArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index        *int32     `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	Image        *Reference `protobuf:"bytes,2,opt,name=image" json:"image,omitempty"`
	StyleNetwork *Reference `protobuf:"bytes,3,opt,name=style_network,json=styleNetwork" json:"style_network,omitempty"`
}

func (x *TableStylePresetArchive) Reset() {
	*x = TableStylePresetArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTStylePropertyArchiving_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableStylePresetArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableStylePresetArchive) ProtoMessage() {}

func (x *TableStylePresetArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTStylePropertyArchiving_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableStylePresetArchive.ProtoReflect.Descriptor instead.
func (*TableStylePresetArchive) Descriptor() ([]byte, []int) {
	return file_TSTStylePropertyArchiving_proto_rawDescGZIP(), []int{6}
}

func (x *TableStylePresetArchive) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *TableStylePresetArchive) GetImage() *Reference {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *TableStylePresetArchive) GetStyleNetwork() *Reference {
	if x != nil {
		return x.StyleNetwork
	}
	return nil
}

type TableStrokePresetArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index *int32 `protobuf:"varint,1,req,name=index" json:"index,omitempty"`
}

func (x *TableStrokePresetArchive) Reset() {
	*x = TableStrokePresetArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTStylePropertyArchiving_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableStrokePresetArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableStrokePresetArchive) ProtoMessage() {}

func (x *TableStrokePresetArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTStylePropertyArchiving_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableStrokePresetArchive.ProtoReflect.Descriptor instead.
func (*TableStrokePresetArchive) Descriptor() ([]byte, []int) {
	return file_TSTStylePropertyArchiving_proto_rawDescGZIP(), []int{7}
}

func (x *TableStrokePresetArchive) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

type TSTThemePresetsArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableStylePresets      []*Reference `protobuf:"bytes,1,rep,name=table_style_presets,json=tableStylePresets" json:"table_style_presets,omitempty"`
	TableCellStrokePresets []*Reference `protobuf:"bytes,2,rep,name=table_cell_stroke_presets,json=tableCellStrokePresets" json:"table_cell_stroke_presets,omitempty"`
}

func (x *TSTThemePresetsArchive) Reset() {
	*x = TSTThemePresetsArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTStylePropertyArchiving_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSTThemePresetsArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSTThemePresetsArchive) ProtoMessage() {}

func (x *TSTThemePresetsArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTStylePropertyArchiving_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSTThemePresetsArchive.ProtoReflect.Descriptor instead.
func (*TSTThemePresetsArchive) Descriptor() ([]byte, []int) {
	return file_TSTStylePropertyArchiving_proto_rawDescGZIP(), []int{8}
}

func (x *TSTThemePresetsArchive) GetTableStylePresets() []*Reference {
	if x != nil {
		return x.TableStylePresets
	}
	return nil
}

func (x *TSTThemePresetsArchive) GetTableCellStrokePresets() []*Reference {
	if x != nil {
		return x.TableCellStrokePresets
	}
	return nil
}

var file_TSTStylePropertyArchiving_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*TSSThemeArchive)(nil),
		ExtensionType: (*TSTThemePresetsArchive)(nil),
		Field:         200,
		Name:          "TST.TSTThemePresetsArchive.extension",
		Tag:           "bytes,200,opt,name=extension",
		Filename:      "TSTStylePropertyArchiving.proto",
	},
}

// Extension fields to TSSThemeArchive.
var (
	// optional TST.TSTThemePresetsArchive extension = 200;
	E_TSTThemePresetsArchive_Extension = &file_TSTStylePropertyArchiving_proto_extTypes[0]
)

var File_TSTStylePropertyArchiving_proto protoreflect.FileDescriptor

var file_TSTStylePropertyArchiving_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x54, 0x53, 0x54, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x03, 0x54, 0x53, 0x54, 0x1a, 0x11, 0x54, 0x53, 0x50, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x54, 0x53, 0x44, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x54, 0x53,
	0x53, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x12, 0x54, 0x53, 0x57, 0x50, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xa7, 0x01, 0x0a, 0x1d, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f,
	0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x06, 0x73, 0x74, 0x72, 0x6f, 0x6b,
	0x65, 0x12, 0x22, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x07, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x42, 0x02, 0x18, 0x01, 0x52, 0x07, 0x6f, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x8b, 0x06,
	0x0a, 0x1a, 0x43, 0x65, 0x6c, 0x6c, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2d, 0x0a, 0x09,
	0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x08, 0x63, 0x65, 0x6c, 0x6c, 0x46, 0x69, 0x6c, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x65, 0x78, 0x74, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x74, 0x65, 0x78, 0x74, 0x57, 0x72, 0x61, 0x70, 0x12, 0x56, 0x0a, 0x15, 0x64, 0x65, 0x70, 0x72,
	0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x44, 0x65,
	0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74,
	0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x13, 0x64, 0x65, 0x70,
	0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x70, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65,
	0x12, 0x5a, 0x0a, 0x17, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x15, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x5c, 0x0a, 0x18,
	0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x6f, 0x74, 0x74, 0x6f,
	0x6d, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x54, 0x53, 0x54, 0x2e, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x16, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x42, 0x6f,
	0x74, 0x74, 0x6f, 0x6d, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x58, 0x0a, 0x16, 0x64, 0x65,
	0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x73, 0x74,
	0x72, 0x6f, 0x6b, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x54, 0x53, 0x54,
	0x2e, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x14,
	0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x65, 0x66, 0x74, 0x53, 0x74,
	0x72, 0x6f, 0x6b, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x5f, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x11, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x07, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x50, 0x61, 0x64, 0x64,
	0x69, 0x6e, 0x67, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x07, 0x70, 0x61, 0x64, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x31, 0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74,
	0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x09, 0x74, 0x6f, 0x70,
	0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x35, 0x0a, 0x0c, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f,
	0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54,
	0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x0b, 0x72, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x37, 0x0a,
	0x0d, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b,
	0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0c, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d,
	0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x73,
	0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53,
	0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x0a, 0x6c, 0x65, 0x66, 0x74, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x22, 0x86, 0x03, 0x0a, 0x22,
	0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x53, 0x74, 0x72, 0x6f, 0x6b,
	0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x12, 0x64, 0x0a, 0x1c, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x6f,
	0x6b, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x44,
	0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1a, 0x64, 0x65,
	0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74,
	0x61, 0x6c, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x60, 0x0a, 0x1a, 0x64, 0x65, 0x70, 0x72,
	0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f,
	0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x54,
	0x53, 0x54, 0x2e, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x18, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x56, 0x65, 0x72, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x60, 0x0a, 0x1a, 0x64, 0x65,
	0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x69, 0x6f,
	0x72, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x54, 0x53, 0x54, 0x2e, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x18, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x36, 0x0a, 0x17,
	0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x02, 0x28, 0x05, 0x52, 0x15, 0x64,
	0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65,
	0x4d, 0x61, 0x73, 0x6b, 0x22, 0xf7, 0x01, 0x0a, 0x17, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x12, 0x3f, 0x0a, 0x11, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x73,
	0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53,
	0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x10, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x6f, 0x6b,
	0x65, 0x12, 0x3b, 0x0a, 0x0f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x74,
	0x72, 0x6f, 0x6b, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44,
	0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0e,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x3b,
	0x0a, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74,
	0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0e, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x69, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x76,
	0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0xbb,
	0x01, 0x0a, 0x17, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x54, 0x0a, 0x11, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x54, 0x53,
	0x54, 0x2e, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x53, 0x74, 0x72,
	0x6f, 0x6b, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x10, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x53, 0x74, 0x72,
	0x6f, 0x6b, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x06, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x22, 0xf6, 0x38, 0x0a,
	0x1b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x62, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x62, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x31, 0x0a,
	0x0b, 0x62, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x62, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x6c,
	0x12, 0x38, 0x0a, 0x18, 0x62, 0x65, 0x68, 0x61, 0x76, 0x65, 0x73, 0x5f, 0x6c, 0x69, 0x6b, 0x65,
	0x5f, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x73, 0x68, 0x65, 0x65, 0x74, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x16, 0x62, 0x65, 0x68, 0x61, 0x76, 0x65, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x53,
	0x70, 0x72, 0x65, 0x61, 0x64, 0x73, 0x68, 0x65, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x75,
	0x74, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x76, 0x0a, 0x26, 0x64,
	0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73,
	0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x54, 0x53,
	0x54, 0x2e, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x22, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x6f, 0x77, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x72,
	0x6f, 0x6b, 0x65, 0x12, 0x70, 0x0a, 0x23, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x62, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x1f, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x6f, 0x77, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x78, 0x0a, 0x27, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x44, 0x65, 0x70,
	0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x72,
	0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x23, 0x64, 0x65, 0x70, 0x72,
	0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x6f, 0x77, 0x48,
	0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12,
	0x74, 0x0a, 0x25, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x54, 0x53, 0x54, 0x2e, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x21, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x53,
	0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x76, 0x0a, 0x26, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x5f, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x44, 0x65, 0x70, 0x72,
	0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x6f,
	0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x22, 0x64, 0x65, 0x70, 0x72, 0x65,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x7c, 0x0a,
	0x29, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x25, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x65, 0x70, 0x61,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x7e, 0x0a, 0x2a, 0x64,
	0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74,
	0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x26, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x48, 0x6f, 0x72, 0x69, 0x7a,
	0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x7a, 0x0a, 0x28, 0x64,
	0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x54, 0x53, 0x54, 0x2e, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x24, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x76, 0x0a, 0x26, 0x64, 0x65, 0x70, 0x72, 0x65,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x77,
	0x5f, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x44, 0x65,
	0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74,
	0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x22, 0x64, 0x65, 0x70,
	0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x46, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x77,
	0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12,
	0x70, 0x0a, 0x23, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x6f,
	0x6f, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x54,
	0x53, 0x54, 0x2e, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x1f, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x46, 0x6f, 0x6f, 0x74,
	0x65, 0x72, 0x52, 0x6f, 0x77, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x72, 0x6f, 0x6b,
	0x65, 0x12, 0x78, 0x0a, 0x27, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x23, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x46, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x77, 0x48, 0x6f, 0x72, 0x69, 0x7a,
	0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x74, 0x0a, 0x25, 0x64,
	0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72,
	0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x74,
	0x72, 0x6f, 0x6b, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x54, 0x53, 0x54,
	0x2e, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x21,
	0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x46, 0x6f, 0x6f, 0x74, 0x65, 0x72,
	0x52, 0x6f, 0x77, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x6f, 0x6b,
	0x65, 0x12, 0x85, 0x01, 0x0a, 0x2e, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74,
	0x72, 0x6f, 0x6b, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x54, 0x53, 0x54,
	0x2e, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x29,
	0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42,
	0x6f, 0x64, 0x79, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x42, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x2c, 0x64, 0x65,
	0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62,
	0x6f, 0x64, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x27, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x78, 0x0a,
	0x27, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61,
	0x6c, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x54, 0x53, 0x54, 0x2e, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x23, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61,
	0x6c, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x74, 0x0a, 0x25, 0x64, 0x65, 0x70, 0x72, 0x65,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79,
	0x5f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x44, 0x65, 0x70,
	0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x72,
	0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x21, 0x64, 0x65, 0x70, 0x72,
	0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x56,
	0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x4a, 0x0a,
	0x12, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x54, 0x53, 0x54, 0x2e,
	0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x10, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x76, 0x5f, 0x73,
	0x74, 0x72, 0x6f, 0x6b, 0x65, 0x73, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x76, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x73, 0x56, 0x69,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b,
	0x65, 0x73, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x68, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x73, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x12, 0x30, 0x0a, 0x14, 0x68, 0x72, 0x5f, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x68, 0x72, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x56, 0x69, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x68, 0x63, 0x5f, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x12, 0x68, 0x63, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x56, 0x69,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x53,
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12,
	0x30, 0x0a, 0x14, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x5f, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65,
	0x18, 0x27, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65,
	0x12, 0x37, 0x0a, 0x18, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x68, 0x63, 0x5f, 0x64, 0x69, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x2a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x15, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x63, 0x44, 0x69, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x68, 0x72, 0x5f, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x76, 0x69,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x48, 0x72, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x72, 0x56, 0x69, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x6f, 0x74,
	0x65, 0x72, 0x5f, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x46,
	0x6f, 0x6f, 0x74, 0x65, 0x72, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x72, 0x56, 0x69, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x4f, 0x42, 0x53, 0x4f, 0x4c, 0x45, 0x54, 0x45, 0x5f,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x4f, 0x42, 0x53, 0x4f, 0x4c, 0x45, 0x54, 0x45,
	0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x46, 0x6f, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x66, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x46, 0x6f, 0x6e, 0x74, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x47, 0x0a, 0x11,
	0x77, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x57,
	0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x10, 0x77, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x1b, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f,
	0x72, 0x6f, 0x77, 0x5f, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x74,
	0x72, 0x6f, 0x6b, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44,
	0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x18,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x6f, 0x77, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x4b, 0x0a, 0x18, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74,
	0x72, 0x6f, 0x6b, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44,
	0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x15,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x6f, 0x77, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x53, 0x0a, 0x1c, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f,
	0x72, 0x6f, 0x77, 0x5f, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x73,
	0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53,
	0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x19, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x6f, 0x77, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f,
	0x6e, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x4f, 0x0a, 0x1a, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x17, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x6f, 0x77, 0x56, 0x65, 0x72,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x51, 0x0a, 0x1b, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x62, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x18, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x57,
	0x0a, 0x1e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f,
	0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65,
	0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72,
	0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1b, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x59, 0x0a, 0x1f, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e,
	0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x1c, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x6f,
	0x6b, 0x65, 0x12, 0x55, 0x0a, 0x1d, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72,
	0x6f, 0x6b, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e,
	0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1a, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x56, 0x65, 0x72, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x51, 0x0a, 0x1b, 0x66, 0x6f, 0x6f,
	0x74, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x18, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x77, 0x53, 0x65, 0x70,
	0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x4b, 0x0a, 0x18,
	0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x62, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x15, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x77, 0x42, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x53, 0x0a, 0x1c, 0x66, 0x6f, 0x6f,
	0x74, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74,
	0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x19, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x77, 0x48, 0x6f,
	0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x4f,
	0x0a, 0x1a, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x39, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x17, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x52, 0x6f,
	0x77, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12,
	0x60, 0x0a, 0x23, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54,
	0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x1f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x6f, 0x72, 0x69, 0x7a,
	0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x72, 0x6f, 0x6b,
	0x65, 0x12, 0x5c, 0x0a, 0x21, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x5f,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54,
	0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x1d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x56, 0x65, 0x72, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12,
	0x53, 0x0a, 0x1c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18,
	0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f,
	0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x19, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x42, 0x6f, 0x64, 0x79, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x74,
	0x72, 0x6f, 0x6b, 0x65, 0x12, 0x4f, 0x0a, 0x1a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x6f,
	0x64, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x6f,
	0x6b, 0x65, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53,
	0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x17, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x53,
	0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x4f, 0x0a, 0x1a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x73, 0x74, 0x72,
	0x6f, 0x6b, 0x65, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e,
	0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x17, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x54, 0x6f, 0x70,
	0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x4f, 0x0a, 0x1a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x73, 0x74,
	0x72, 0x6f, 0x6b, 0x65, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44,
	0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x17,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x54, 0x6f,
	0x70, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x4f, 0x0a, 0x1a, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x33, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x73,
	0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53,
	0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x17, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x33, 0x54,
	0x6f, 0x70, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x4f, 0x0a, 0x1a, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x34, 0x5f, 0x74, 0x6f, 0x70, 0x5f,
	0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54,
	0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x17, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x34,
	0x54, 0x6f, 0x70, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x4f, 0x0a, 0x1a, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x35, 0x5f, 0x74, 0x6f, 0x70,
	0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x42, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x17, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x35, 0x54, 0x6f, 0x70, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x55, 0x0a, 0x1d, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x5f, 0x62, 0x6f,
	0x74, 0x74, 0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x43, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x31, 0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x53, 0x74, 0x72, 0x6f, 0x6b,
	0x65, 0x12, 0x55, 0x0a, 0x1d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x32, 0x5f, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x72, 0x6f,
	0x6b, 0x65, 0x18, 0x44, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53,
	0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1a, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x42, 0x6f, 0x74, 0x74,
	0x6f, 0x6d, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x55, 0x0a, 0x1d, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x33, 0x5f, 0x62, 0x6f, 0x74, 0x74,
	0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x45, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x1a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x33, 0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12,
	0x55, 0x0a, 0x1d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x34, 0x5f, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65,
	0x18, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72,
	0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1a, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x34, 0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d,
	0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x55, 0x0a, 0x1d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x35, 0x5f, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d,
	0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x47, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x1a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x35, 0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x59, 0x0a,
	0x1f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x31,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65,
	0x18, 0x48, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72,
	0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1c, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x69,
	0x6f, 0x72, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x59, 0x0a, 0x1f, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x69, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x49, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x32, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x53, 0x74, 0x72,
	0x6f, 0x6b, 0x65, 0x12, 0x59, 0x0a, 0x1f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x33, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x5f,
	0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54,
	0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x1c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x33,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x59,
	0x0a, 0x1f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x34, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b,
	0x65, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74,
	0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1c, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x34, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x69, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x59, 0x0a, 0x1f, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x35, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x69, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x4c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x35, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x53, 0x74,
	0x72, 0x6f, 0x6b, 0x65, 0x12, 0x66, 0x0a, 0x26, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x73, 0x65,
	0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x4d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b,
	0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x22, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x70,
	0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x66, 0x0a, 0x26,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x5f,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54,
	0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x22, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x32,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74,
	0x72, 0x6f, 0x6b, 0x65, 0x12, 0x66, 0x0a, 0x26, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x33, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x73, 0x65,
	0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x4f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b,
	0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x22, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x33, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x70,
	0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x66, 0x0a, 0x26,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x34, 0x5f,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54,
	0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x22, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x34,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74,
	0x72, 0x6f, 0x6b, 0x65, 0x12, 0x66, 0x0a, 0x26, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x35, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x73, 0x65,
	0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x51,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b,
	0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x22, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x35, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x70,
	0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x69, 0x0a, 0x28,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x70, 0x69, 0x76, 0x6f, 0x74,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61,
	0x6c, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x52, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x23, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x50, 0x69, 0x76,
	0x6f, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61,
	0x6c, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x65, 0x0a, 0x26, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b,
	0x65, 0x18, 0x53, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74,
	0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x21, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x50, 0x69, 0x76, 0x6f, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x73,
	0x0a, 0x2d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x70, 0x69, 0x76,
	0x6f, 0x74, 0x5f, 0x64, 0x65, 0x65, 0x6d, 0x70, 0x68, 0x61, 0x73, 0x69, 0x73, 0x5f, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18,
	0x54, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f,
	0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x28, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x42, 0x6f, 0x64, 0x79, 0x50, 0x69, 0x76, 0x6f, 0x74, 0x44, 0x65, 0x65, 0x6d, 0x70, 0x68, 0x61,
	0x73, 0x69, 0x73, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x72,
	0x6f, 0x6b, 0x65, 0x12, 0x6b, 0x0a, 0x29, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x6f, 0x64,
	0x79, 0x5f, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x5f, 0x65, 0x6d, 0x70, 0x68, 0x61, 0x73, 0x69, 0x73,
	0x5f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65,
	0x18, 0x55, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72,
	0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x24, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x42, 0x6f, 0x64, 0x79, 0x50, 0x69, 0x76, 0x6f, 0x74, 0x45, 0x6d, 0x70, 0x68, 0x61, 0x73,
	0x69, 0x73, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65,
	0x12, 0x6f, 0x0a, 0x2b, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x5f, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18,
	0x56, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f,
	0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x26, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x50, 0x69, 0x76, 0x6f, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x6f, 0x6b,
	0x65, 0x12, 0x6f, 0x0a, 0x2b, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x5f, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x64,
	0x65, 0x65, 0x6d, 0x70, 0x68, 0x61, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65,
	0x18, 0x57, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72,
	0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x26, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x50, 0x69, 0x76, 0x6f, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x44, 0x65, 0x65, 0x6d, 0x70, 0x68, 0x61, 0x73, 0x69, 0x73, 0x53, 0x74, 0x72, 0x6f,
	0x6b, 0x65, 0x12, 0x62, 0x0a, 0x24, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x5f, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x5f, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x58, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x20, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x50, 0x69, 0x76, 0x6f, 0x74, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x65, 0x0a, 0x26, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65,
	0x18, 0x59, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72,
	0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x21, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x6f, 0x77, 0x50, 0x69, 0x76, 0x6f, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56,
	0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x69, 0x0a,
	0x28, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x70, 0x69, 0x76, 0x6f,
	0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x64, 0x65, 0x65, 0x6d, 0x70, 0x68, 0x61, 0x73,
	0x69, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x23, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x6f, 0x77, 0x50, 0x69,
	0x76, 0x6f, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x65, 0x6d, 0x70, 0x68, 0x61, 0x73,
	0x69, 0x73, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x54, 0x0a, 0x1d, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x5f, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x19, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x6f, 0x77, 0x50, 0x69,
	0x76, 0x6f, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x65,
	0x0a, 0x26, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x70, 0x69, 0x76,
	0x6f, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x21, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x77, 0x50, 0x69, 0x76,
	0x6f, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x53,
	0x74, 0x72, 0x6f, 0x6b, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x17, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x24, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x33, 0x0a,
	0x0d, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x22, 0x30, 0x0a, 0x18, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x6f, 0x6b,
	0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x22, 0xf5, 0x01, 0x0a, 0x16, 0x54, 0x53, 0x54, 0x54, 0x68, 0x65, 0x6d,
	0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12,
	0x3e, 0x0a, 0x13, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x11, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x12,
	0x49, 0x0a, 0x19, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x73, 0x74,
	0x72, 0x6f, 0x6b, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x16, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x53, 0x74, 0x72,
	0x6f, 0x6b, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x32, 0x50, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x2e, 0x54, 0x53, 0x53, 0x2e, 0x54, 0x53,
	0x53, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x18, 0xc8, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x53, 0x54, 0x54, 0x68,
	0x65, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x07, 0x5a, 0x05,
	0x2e, 0x2f, 0x6b, 0x70, 0x62,
}

var (
	file_TSTStylePropertyArchiving_proto_rawDescOnce sync.Once
	file_TSTStylePropertyArchiving_proto_rawDescData = file_TSTStylePropertyArchiving_proto_rawDesc
)

func file_TSTStylePropertyArchiving_proto_rawDescGZIP() []byte {
	file_TSTStylePropertyArchiving_proto_rawDescOnce.Do(func() {
		file_TSTStylePropertyArchiving_proto_rawDescData = protoimpl.X.CompressGZIP(file_TSTStylePropertyArchiving_proto_rawDescData)
	})
	return file_TSTStylePropertyArchiving_proto_rawDescData
}

var file_TSTStylePropertyArchiving_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_TSTStylePropertyArchiving_proto_goTypes = []interface{}{
	(*Deprecated_TableStrokeArchive)(nil),      // 0: TST.Deprecated_TableStrokeArchive
	(*CellStylePropertiesArchive)(nil),         // 1: TST.CellStylePropertiesArchive
	(*Deprecated_StrokePresetDataArchive)(nil), // 2: TST.Deprecated_StrokePresetDataArchive
	(*StrokePresetDataArchive)(nil),            // 3: TST.StrokePresetDataArchive
	(*StrokePresetListArchive)(nil),            // 4: TST.StrokePresetListArchive
	(*TableStylePropertiesArchive)(nil),        // 5: TST.TableStylePropertiesArchive
	(*TableStylePresetArchive)(nil),            // 6: TST.TableStylePresetArchive
	(*TableStrokePresetArchive)(nil),           // 7: TST.TableStrokePresetArchive
	(*TSTThemePresetsArchive)(nil),             // 8: TST.TSTThemePresetsArchive
	(*StrokeArchive)(nil),                      // 9: TSD.StrokeArchive
	(*FillArchive)(nil),                        // 10: TSD.FillArchive
	(*PaddingArchive)(nil),                     // 11: TSWP.PaddingArchive
	(WritingDirectionType)(0),                  // 12: TSWP.WritingDirectionType
	(*Reference)(nil),                          // 13: TSP.Reference
	(*TSSThemeArchive)(nil),                    // 14: TSS.TSSThemeArchive
}
var file_TSTStylePropertyArchiving_proto_depIdxs = []int32{
	9,  // 0: TST.Deprecated_TableStrokeArchive.stroke:type_name -> TSD.StrokeArchive
	10, // 1: TST.CellStylePropertiesArchive.cell_fill:type_name -> TSD.FillArchive
	0,  // 2: TST.CellStylePropertiesArchive.deprecated_top_stroke:type_name -> TST.Deprecated_TableStrokeArchive
	0,  // 3: TST.CellStylePropertiesArchive.deprecated_right_stroke:type_name -> TST.Deprecated_TableStrokeArchive
	0,  // 4: TST.CellStylePropertiesArchive.deprecated_bottom_stroke:type_name -> TST.Deprecated_TableStrokeArchive
	0,  // 5: TST.CellStylePropertiesArchive.deprecated_left_stroke:type_name -> TST.Deprecated_TableStrokeArchive
	11, // 6: TST.CellStylePropertiesArchive.padding:type_name -> TSWP.PaddingArchive
	9,  // 7: TST.CellStylePropertiesArchive.top_stroke:type_name -> TSD.StrokeArchive
	9,  // 8: TST.CellStylePropertiesArchive.right_stroke:type_name -> TSD.StrokeArchive
	9,  // 9: TST.CellStylePropertiesArchive.bottom_stroke:type_name -> TSD.StrokeArchive
	9,  // 10: TST.CellStylePropertiesArchive.left_stroke:type_name -> TSD.StrokeArchive
	0,  // 11: TST.Deprecated_StrokePresetDataArchive.deprecated_horizontal_stroke:type_name -> TST.Deprecated_TableStrokeArchive
	0,  // 12: TST.Deprecated_StrokePresetDataArchive.deprecated_vertical_stroke:type_name -> TST.Deprecated_TableStrokeArchive
	0,  // 13: TST.Deprecated_StrokePresetDataArchive.deprecated_exterior_stroke:type_name -> TST.Deprecated_TableStrokeArchive
	9,  // 14: TST.StrokePresetDataArchive.horizontal_stroke:type_name -> TSD.StrokeArchive
	9,  // 15: TST.StrokePresetDataArchive.vertical_stroke:type_name -> TSD.StrokeArchive
	9,  // 16: TST.StrokePresetDataArchive.exterior_stroke:type_name -> TSD.StrokeArchive
	2,  // 17: TST.StrokePresetListArchive.deprecated_preset:type_name -> TST.Deprecated_StrokePresetDataArchive
	3,  // 18: TST.StrokePresetListArchive.preset:type_name -> TST.StrokePresetDataArchive
	10, // 19: TST.TableStylePropertiesArchive.banded_fill:type_name -> TSD.FillArchive
	0,  // 20: TST.TableStylePropertiesArchive.deprecated_header_row_separator_stroke:type_name -> TST.Deprecated_TableStrokeArchive
	0,  // 21: TST.TableStylePropertiesArchive.deprecated_header_row_border_stroke:type_name -> TST.Deprecated_TableStrokeArchive
	0,  // 22: TST.TableStylePropertiesArchive.deprecated_header_row_horizontal_stroke:type_name -> TST.Deprecated_TableStrokeArchive
	0,  // 23: TST.TableStylePropertiesArchive.deprecated_header_row_vertical_stroke:type_name -> TST.Deprecated_TableStrokeArchive
	0,  // 24: TST.TableStylePropertiesArchive.deprecated_header_column_border_stroke:type_name -> TST.Deprecated_TableStrokeArchive
	0,  // 25: TST.TableStylePropertiesArchive.deprecated_header_column_separator_stroke:type_name -> TST.Deprecated_TableStrokeArchive
	0,  // 26: TST.TableStylePropertiesArchive.deprecated_header_column_horizontal_stroke:type_name -> TST.Deprecated_TableStrokeArchive
	0,  // 27: TST.TableStylePropertiesArchive.deprecated_header_column_vertical_stroke:type_name -> TST.Deprecated_TableStrokeArchive
	0,  // 28: TST.TableStylePropertiesArchive.deprecated_footer_row_separator_stroke:type_name -> TST.Deprecated_TableStrokeArchive
	0,  // 29: TST.TableStylePropertiesArchive.deprecated_footer_row_border_stroke:type_name -> TST.Deprecated_TableStrokeArchive
	0,  // 30: TST.TableStylePropertiesArchive.deprecated_footer_row_horizontal_stroke:type_name -> TST.Deprecated_TableStrokeArchive
	0,  // 31: TST.TableStylePropertiesArchive.deprecated_footer_row_vertical_stroke:type_name -> TST.Deprecated_TableStrokeArchive
	0,  // 32: TST.TableStylePropertiesArchive.deprecated_table_body_horizontal_border_stroke:type_name -> TST.Deprecated_TableStrokeArchive
	0,  // 33: TST.TableStylePropertiesArchive.deprecated_table_body_vertical_border_stroke:type_name -> TST.Deprecated_TableStrokeArchive
	0,  // 34: TST.TableStylePropertiesArchive.deprecated_table_body_horizontal_stroke:type_name -> TST.Deprecated_TableStrokeArchive
	0,  // 35: TST.TableStylePropertiesArchive.deprecated_table_body_vertical_stroke:type_name -> TST.Deprecated_TableStrokeArchive
	4,  // 36: TST.TableStylePropertiesArchive.stroke_preset_list:type_name -> TST.StrokePresetListArchive
	12, // 37: TST.TableStylePropertiesArchive.writing_direction:type_name -> TSWP.WritingDirectionType
	9,  // 38: TST.TableStylePropertiesArchive.header_row_separator_stroke:type_name -> TSD.StrokeArchive
	9,  // 39: TST.TableStylePropertiesArchive.header_row_border_stroke:type_name -> TSD.StrokeArchive
	9,  // 40: TST.TableStylePropertiesArchive.header_row_horizontal_stroke:type_name -> TSD.StrokeArchive
	9,  // 41: TST.TableStylePropertiesArchive.header_row_vertical_stroke:type_name -> TSD.StrokeArchive
	9,  // 42: TST.TableStylePropertiesArchive.header_column_border_stroke:type_name -> TSD.StrokeArchive
	9,  // 43: TST.TableStylePropertiesArchive.header_column_separator_stroke:type_name -> TSD.StrokeArchive
	9,  // 44: TST.TableStylePropertiesArchive.header_column_horizontal_stroke:type_name -> TSD.StrokeArchive
	9,  // 45: TST.TableStylePropertiesArchive.header_column_vertical_stroke:type_name -> TSD.StrokeArchive
	9,  // 46: TST.TableStylePropertiesArchive.footer_row_separator_stroke:type_name -> TSD.StrokeArchive
	9,  // 47: TST.TableStylePropertiesArchive.footer_row_border_stroke:type_name -> TSD.StrokeArchive
	9,  // 48: TST.TableStylePropertiesArchive.footer_row_horizontal_stroke:type_name -> TSD.StrokeArchive
	9,  // 49: TST.TableStylePropertiesArchive.footer_row_vertical_stroke:type_name -> TSD.StrokeArchive
	9,  // 50: TST.TableStylePropertiesArchive.table_body_horizontal_border_stroke:type_name -> TSD.StrokeArchive
	9,  // 51: TST.TableStylePropertiesArchive.table_body_vertical_border_stroke:type_name -> TSD.StrokeArchive
	9,  // 52: TST.TableStylePropertiesArchive.table_body_horizontal_stroke:type_name -> TSD.StrokeArchive
	9,  // 53: TST.TableStylePropertiesArchive.table_body_vertical_stroke:type_name -> TSD.StrokeArchive
	9,  // 54: TST.TableStylePropertiesArchive.category_level1_top_stroke:type_name -> TSD.StrokeArchive
	9,  // 55: TST.TableStylePropertiesArchive.category_level2_top_stroke:type_name -> TSD.StrokeArchive
	9,  // 56: TST.TableStylePropertiesArchive.category_level3_top_stroke:type_name -> TSD.StrokeArchive
	9,  // 57: TST.TableStylePropertiesArchive.category_level4_top_stroke:type_name -> TSD.StrokeArchive
	9,  // 58: TST.TableStylePropertiesArchive.category_level5_top_stroke:type_name -> TSD.StrokeArchive
	9,  // 59: TST.TableStylePropertiesArchive.category_level1_bottom_stroke:type_name -> TSD.StrokeArchive
	9,  // 60: TST.TableStylePropertiesArchive.category_level2_bottom_stroke:type_name -> TSD.StrokeArchive
	9,  // 61: TST.TableStylePropertiesArchive.category_level3_bottom_stroke:type_name -> TSD.StrokeArchive
	9,  // 62: TST.TableStylePropertiesArchive.category_level4_bottom_stroke:type_name -> TSD.StrokeArchive
	9,  // 63: TST.TableStylePropertiesArchive.category_level5_bottom_stroke:type_name -> TSD.StrokeArchive
	9,  // 64: TST.TableStylePropertiesArchive.category_level1_interior_stroke:type_name -> TSD.StrokeArchive
	9,  // 65: TST.TableStylePropertiesArchive.category_level2_interior_stroke:type_name -> TSD.StrokeArchive
	9,  // 66: TST.TableStylePropertiesArchive.category_level3_interior_stroke:type_name -> TSD.StrokeArchive
	9,  // 67: TST.TableStylePropertiesArchive.category_level4_interior_stroke:type_name -> TSD.StrokeArchive
	9,  // 68: TST.TableStylePropertiesArchive.category_level5_interior_stroke:type_name -> TSD.StrokeArchive
	9,  // 69: TST.TableStylePropertiesArchive.category_level1_label_separator_stroke:type_name -> TSD.StrokeArchive
	9,  // 70: TST.TableStylePropertiesArchive.category_level2_label_separator_stroke:type_name -> TSD.StrokeArchive
	9,  // 71: TST.TableStylePropertiesArchive.category_level3_label_separator_stroke:type_name -> TSD.StrokeArchive
	9,  // 72: TST.TableStylePropertiesArchive.category_level4_label_separator_stroke:type_name -> TSD.StrokeArchive
	9,  // 73: TST.TableStylePropertiesArchive.category_level5_label_separator_stroke:type_name -> TSD.StrokeArchive
	9,  // 74: TST.TableStylePropertiesArchive.table_body_pivot_group_horizontal_stroke:type_name -> TSD.StrokeArchive
	9,  // 75: TST.TableStylePropertiesArchive.table_body_pivot_group_vertical_stroke:type_name -> TSD.StrokeArchive
	9,  // 76: TST.TableStylePropertiesArchive.table_body_pivot_deemphasis_horizontal_stroke:type_name -> TSD.StrokeArchive
	9,  // 77: TST.TableStylePropertiesArchive.table_body_pivot_emphasis_vertical_stroke:type_name -> TSD.StrokeArchive
	9,  // 78: TST.TableStylePropertiesArchive.header_column_pivot_group_horizontal_stroke:type_name -> TSD.StrokeArchive
	9,  // 79: TST.TableStylePropertiesArchive.header_column_pivot_group_deemphasis_stroke:type_name -> TSD.StrokeArchive
	9,  // 80: TST.TableStylePropertiesArchive.header_column_pivot_separator_stroke:type_name -> TSD.StrokeArchive
	9,  // 81: TST.TableStylePropertiesArchive.header_row_pivot_group_vertical_stroke:type_name -> TSD.StrokeArchive
	9,  // 82: TST.TableStylePropertiesArchive.header_row_pivot_group_deemphasis_stroke:type_name -> TSD.StrokeArchive
	9,  // 83: TST.TableStylePropertiesArchive.header_row_pivot_title_stroke:type_name -> TSD.StrokeArchive
	9,  // 84: TST.TableStylePropertiesArchive.footer_row_pivot_group_vertical_stroke:type_name -> TSD.StrokeArchive
	13, // 85: TST.TableStylePresetArchive.image:type_name -> TSP.Reference
	13, // 86: TST.TableStylePresetArchive.style_network:type_name -> TSP.Reference
	13, // 87: TST.TSTThemePresetsArchive.table_style_presets:type_name -> TSP.Reference
	13, // 88: TST.TSTThemePresetsArchive.table_cell_stroke_presets:type_name -> TSP.Reference
	14, // 89: TST.TSTThemePresetsArchive.extension:extendee -> TSS.TSSThemeArchive
	8,  // 90: TST.TSTThemePresetsArchive.extension:type_name -> TST.TSTThemePresetsArchive
	91, // [91:91] is the sub-list for method output_type
	91, // [91:91] is the sub-list for method input_type
	90, // [90:91] is the sub-list for extension type_name
	89, // [89:90] is the sub-list for extension extendee
	0,  // [0:89] is the sub-list for field type_name
}

func init() { file_TSTStylePropertyArchiving_proto_init() }
func file_TSTStylePropertyArchiving_proto_init() {
	if File_TSTStylePropertyArchiving_proto != nil {
		return
	}
	file_TSPMessages_proto_init()
	file_TSDArchives_proto_init()
	file_TSSArchives_proto_init()
	file_TSWPArchives_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_TSTStylePropertyArchiving_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deprecated_TableStrokeArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTStylePropertyArchiving_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellStylePropertiesArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTStylePropertyArchiving_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deprecated_StrokePresetDataArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTStylePropertyArchiving_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StrokePresetDataArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTStylePropertyArchiving_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StrokePresetListArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTStylePropertyArchiving_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableStylePropertiesArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTStylePropertyArchiving_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableStylePresetArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTStylePropertyArchiving_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableStrokePresetArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTStylePropertyArchiving_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSTThemePresetsArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_TSTStylePropertyArchiving_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_TSTStylePropertyArchiving_proto_goTypes,
		DependencyIndexes: file_TSTStylePropertyArchiving_proto_depIdxs,
		MessageInfos:      file_TSTStylePropertyArchiving_proto_msgTypes,
		ExtensionInfos:    file_TSTStylePropertyArchiving_proto_extTypes,
	}.Build()
	File_TSTStylePropertyArchiving_proto = out.File
	file_TSTStylePropertyArchiving_proto_rawDesc = nil
	file_TSTStylePropertyArchiving_proto_goTypes = nil
	file_TSTStylePropertyArchiving_proto_depIdxs = nil
}
