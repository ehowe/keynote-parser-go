// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: TSCHCommandArchives.proto

package kpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StyleOwnerType int32

const (
	StyleOwnerType_chart_info     StyleOwnerType = 1
	StyleOwnerType_legend_model   StyleOwnerType = 2
	StyleOwnerType_chart_axis     StyleOwnerType = 3
	StyleOwnerType_chart_series   StyleOwnerType = 4
	StyleOwnerType_reference_line StyleOwnerType = 5
)

// Enum value maps for StyleOwnerType.
var (
	StyleOwnerType_name = map[int32]string{
		1: "chart_info",
		2: "legend_model",
		3: "chart_axis",
		4: "chart_series",
		5: "reference_line",
	}
	StyleOwnerType_value = map[string]int32{
		"chart_info":     1,
		"legend_model":   2,
		"chart_axis":     3,
		"chart_series":   4,
		"reference_line": 5,
	}
)

func (x StyleOwnerType) Enum() *StyleOwnerType {
	p := new(StyleOwnerType)
	*p = x
	return p
}

func (x StyleOwnerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StyleOwnerType) Descriptor() protoreflect.EnumDescriptor {
	return file_TSCHCommandArchives_proto_enumTypes[0].Descriptor()
}

func (StyleOwnerType) Type() protoreflect.EnumType {
	return &file_TSCHCommandArchives_proto_enumTypes[0]
}

func (x StyleOwnerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *StyleOwnerType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = StyleOwnerType(num)
	return nil
}

// Deprecated: Use StyleOwnerType.Descriptor instead.
func (StyleOwnerType) EnumDescriptor() ([]byte, []int) {
	return file_TSCHCommandArchives_proto_rawDescGZIP(), []int{0}
}

type StyleSwapType int32

const (
	StyleSwapType_chart_style                StyleSwapType = 1
	StyleSwapType_chart_non_style            StyleSwapType = 2
	StyleSwapType_legend_style               StyleSwapType = 3
	StyleSwapType_legend_non_style           StyleSwapType = 4
	StyleSwapType_value_axis_style           StyleSwapType = 5
	StyleSwapType_value_axis_non_style       StyleSwapType = 6
	StyleSwapType_category_axis_style        StyleSwapType = 7
	StyleSwapType_category_axis_non_style    StyleSwapType = 8
	StyleSwapType_series_theme_style         StyleSwapType = 9
	StyleSwapType_series_private_style       StyleSwapType = 10
	StyleSwapType_series_non_style           StyleSwapType = 11
	StyleSwapType_paragraph_style            StyleSwapType = 12
	StyleSwapType_reference_line_style       StyleSwapType = 13
	StyleSwapType_reference_line_non_style   StyleSwapType = 14
	StyleSwapType_reference_line_theme_style StyleSwapType = 15
)

// Enum value maps for StyleSwapType.
var (
	StyleSwapType_name = map[int32]string{
		1:  "chart_style",
		2:  "chart_non_style",
		3:  "legend_style",
		4:  "legend_non_style",
		5:  "value_axis_style",
		6:  "value_axis_non_style",
		7:  "category_axis_style",
		8:  "category_axis_non_style",
		9:  "series_theme_style",
		10: "series_private_style",
		11: "series_non_style",
		12: "paragraph_style",
		13: "reference_line_style",
		14: "reference_line_non_style",
		15: "reference_line_theme_style",
	}
	StyleSwapType_value = map[string]int32{
		"chart_style":                1,
		"chart_non_style":            2,
		"legend_style":               3,
		"legend_non_style":           4,
		"value_axis_style":           5,
		"value_axis_non_style":       6,
		"category_axis_style":        7,
		"category_axis_non_style":    8,
		"series_theme_style":         9,
		"series_private_style":       10,
		"series_non_style":           11,
		"paragraph_style":            12,
		"reference_line_style":       13,
		"reference_line_non_style":   14,
		"reference_line_theme_style": 15,
	}
)

func (x StyleSwapType) Enum() *StyleSwapType {
	p := new(StyleSwapType)
	*p = x
	return p
}

func (x StyleSwapType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StyleSwapType) Descriptor() protoreflect.EnumDescriptor {
	return file_TSCHCommandArchives_proto_enumTypes[1].Descriptor()
}

func (StyleSwapType) Type() protoreflect.EnumType {
	return &file_TSCHCommandArchives_proto_enumTypes[1]
}

func (x StyleSwapType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *StyleSwapType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = StyleSwapType(num)
	return nil
}

// Deprecated: Use StyleSwapType.Descriptor instead.
func (StyleSwapType) EnumDescriptor() ([]byte, []int) {
	return file_TSCHCommandArchives_proto_rawDescGZIP(), []int{1}
}

type ApplyPresetBehavior int32

const (
	ApplyPresetBehavior_remove_overrides    ApplyPresetBehavior = 1
	ApplyPresetBehavior_preserve_overrides  ApplyPresetBehavior = 2
	ApplyPresetBehavior_preserve_appearance ApplyPresetBehavior = 3
)

// Enum value maps for ApplyPresetBehavior.
var (
	ApplyPresetBehavior_name = map[int32]string{
		1: "remove_overrides",
		2: "preserve_overrides",
		3: "preserve_appearance",
	}
	ApplyPresetBehavior_value = map[string]int32{
		"remove_overrides":    1,
		"preserve_overrides":  2,
		"preserve_appearance": 3,
	}
)

func (x ApplyPresetBehavior) Enum() *ApplyPresetBehavior {
	p := new(ApplyPresetBehavior)
	*p = x
	return p
}

func (x ApplyPresetBehavior) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ApplyPresetBehavior) Descriptor() protoreflect.EnumDescriptor {
	return file_TSCHCommandArchives_proto_enumTypes[2].Descriptor()
}

func (ApplyPresetBehavior) Type() protoreflect.EnumType {
	return &file_TSCHCommandArchives_proto_enumTypes[2]
}

func (x ApplyPresetBehavior) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ApplyPresetBehavior) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ApplyPresetBehavior(num)
	return nil
}

// Deprecated: Use ApplyPresetBehavior.Descriptor instead.
func (ApplyPresetBehavior) EnumDescriptor() ([]byte, []int) {
	return file_TSCHCommandArchives_proto_rawDescGZIP(), []int{2}
}

type StyleOwnerPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuids []*UUID `protobuf:"bytes,1,rep,name=uuids" json:"uuids,omitempty"`
}

func (x *StyleOwnerPath) Reset() {
	*x = StyleOwnerPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHCommandArchives_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StyleOwnerPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StyleOwnerPath) ProtoMessage() {}

func (x *StyleOwnerPath) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHCommandArchives_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StyleOwnerPath.ProtoReflect.Descriptor instead.
func (*StyleOwnerPath) Descriptor() ([]byte, []int) {
	return file_TSCHCommandArchives_proto_rawDescGZIP(), []int{0}
}

func (x *StyleOwnerPath) GetUuids() []*UUID {
	if x != nil {
		return x.Uuids
	}
	return nil
}

type CommandSetChartTypeArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super             *ChartCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	NewChartType      *ChartType           `protobuf:"varint,2,opt,name=new_chart_type,json=newChartType,enum=TSCH.ChartType" json:"new_chart_type,omitempty"`
	OldChartType      *ChartType           `protobuf:"varint,3,opt,name=old_chart_type,json=oldChartType,enum=TSCH.ChartType" json:"old_chart_type,omitempty"`
	RollbackChartType *ChartType           `protobuf:"varint,4,opt,name=rollback_chart_type,json=rollbackChartType,enum=TSCH.ChartType" json:"rollback_chart_type,omitempty"`
	RowIds            []*UUID              `protobuf:"bytes,5,rep,name=row_ids,json=rowIds" json:"row_ids,omitempty"`
	ColumnIds         []*UUID              `protobuf:"bytes,6,rep,name=column_ids,json=columnIds" json:"column_ids,omitempty"`
	OldRowIds         []*UUID              `protobuf:"bytes,7,rep,name=old_row_ids,json=oldRowIds" json:"old_row_ids,omitempty"`
	OldColumnIds      []*UUID              `protobuf:"bytes,8,rep,name=old_column_ids,json=oldColumnIds" json:"old_column_ids,omitempty"`
	RollbackRowIds    []*UUID              `protobuf:"bytes,9,rep,name=rollback_row_ids,json=rollbackRowIds" json:"rollback_row_ids,omitempty"`
	RollbackColumnIds []*UUID              `protobuf:"bytes,10,rep,name=rollback_column_ids,json=rollbackColumnIds" json:"rollback_column_ids,omitempty"`
	UsesCapturedData  *bool                `protobuf:"varint,11,opt,name=uses_captured_data,json=usesCapturedData" json:"uses_captured_data,omitempty"`
	UseDefaultData    *bool                `protobuf:"varint,12,opt,name=use_default_data,json=useDefaultData" json:"use_default_data,omitempty"`
}

func (x *CommandSetChartTypeArchive) Reset() {
	*x = CommandSetChartTypeArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHCommandArchives_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSetChartTypeArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSetChartTypeArchive) ProtoMessage() {}

func (x *CommandSetChartTypeArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHCommandArchives_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSetChartTypeArchive.ProtoReflect.Descriptor instead.
func (*CommandSetChartTypeArchive) Descriptor() ([]byte, []int) {
	return file_TSCHCommandArchives_proto_rawDescGZIP(), []int{1}
}

func (x *CommandSetChartTypeArchive) GetSuper() *ChartCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandSetChartTypeArchive) GetNewChartType() ChartType {
	if x != nil && x.NewChartType != nil {
		return *x.NewChartType
	}
	return ChartType_undefinedChartType
}

func (x *CommandSetChartTypeArchive) GetOldChartType() ChartType {
	if x != nil && x.OldChartType != nil {
		return *x.OldChartType
	}
	return ChartType_undefinedChartType
}

func (x *CommandSetChartTypeArchive) GetRollbackChartType() ChartType {
	if x != nil && x.RollbackChartType != nil {
		return *x.RollbackChartType
	}
	return ChartType_undefinedChartType
}

func (x *CommandSetChartTypeArchive) GetRowIds() []*UUID {
	if x != nil {
		return x.RowIds
	}
	return nil
}

func (x *CommandSetChartTypeArchive) GetColumnIds() []*UUID {
	if x != nil {
		return x.ColumnIds
	}
	return nil
}

func (x *CommandSetChartTypeArchive) GetOldRowIds() []*UUID {
	if x != nil {
		return x.OldRowIds
	}
	return nil
}

func (x *CommandSetChartTypeArchive) GetOldColumnIds() []*UUID {
	if x != nil {
		return x.OldColumnIds
	}
	return nil
}

func (x *CommandSetChartTypeArchive) GetRollbackRowIds() []*UUID {
	if x != nil {
		return x.RollbackRowIds
	}
	return nil
}

func (x *CommandSetChartTypeArchive) GetRollbackColumnIds() []*UUID {
	if x != nil {
		return x.RollbackColumnIds
	}
	return nil
}

func (x *CommandSetChartTypeArchive) GetUsesCapturedData() bool {
	if x != nil && x.UsesCapturedData != nil {
		return *x.UsesCapturedData
	}
	return false
}

func (x *CommandSetChartTypeArchive) GetUseDefaultData() bool {
	if x != nil && x.UseDefaultData != nil {
		return *x.UseDefaultData
	}
	return false
}

type StyleSwapUndoTupleArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChartInfo   *Reference     `protobuf:"bytes,1,opt,name=chart_info,json=chartInfo" json:"chart_info,omitempty"`
	SwapType    *StyleSwapType `protobuf:"varint,2,opt,name=swap_type,json=swapType,enum=TSCH.StyleSwapType" json:"swap_type,omitempty"`
	Index       *uint32        `protobuf:"varint,3,opt,name=index" json:"index,omitempty"`
	OldValue    *Reference     `protobuf:"bytes,4,opt,name=old_value,json=oldValue" json:"old_value,omitempty"`
	NewValue    *Reference     `protobuf:"bytes,5,opt,name=new_value,json=newValue" json:"new_value,omitempty"`
	RefLineUuid *UUID          `protobuf:"bytes,6,opt,name=ref_line_uuid,json=refLineUuid" json:"ref_line_uuid,omitempty"`
}

func (x *StyleSwapUndoTupleArchive) Reset() {
	*x = StyleSwapUndoTupleArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHCommandArchives_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StyleSwapUndoTupleArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StyleSwapUndoTupleArchive) ProtoMessage() {}

func (x *StyleSwapUndoTupleArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHCommandArchives_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StyleSwapUndoTupleArchive.ProtoReflect.Descriptor instead.
func (*StyleSwapUndoTupleArchive) Descriptor() ([]byte, []int) {
	return file_TSCHCommandArchives_proto_rawDescGZIP(), []int{2}
}

func (x *StyleSwapUndoTupleArchive) GetChartInfo() *Reference {
	if x != nil {
		return x.ChartInfo
	}
	return nil
}

func (x *StyleSwapUndoTupleArchive) GetSwapType() StyleSwapType {
	if x != nil && x.SwapType != nil {
		return *x.SwapType
	}
	return StyleSwapType_chart_style
}

func (x *StyleSwapUndoTupleArchive) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *StyleSwapUndoTupleArchive) GetOldValue() *Reference {
	if x != nil {
		return x.OldValue
	}
	return nil
}

func (x *StyleSwapUndoTupleArchive) GetNewValue() *Reference {
	if x != nil {
		return x.NewValue
	}
	return nil
}

func (x *StyleSwapUndoTupleArchive) GetRefLineUuid() *UUID {
	if x != nil {
		return x.RefLineUuid
	}
	return nil
}

type StyleSwapUndoTuplesArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwapTuples []*StyleSwapUndoTupleArchive `protobuf:"bytes,1,rep,name=swap_tuples,json=swapTuples" json:"swap_tuples,omitempty"`
}

func (x *StyleSwapUndoTuplesArchive) Reset() {
	*x = StyleSwapUndoTuplesArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHCommandArchives_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StyleSwapUndoTuplesArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StyleSwapUndoTuplesArchive) ProtoMessage() {}

func (x *StyleSwapUndoTuplesArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHCommandArchives_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StyleSwapUndoTuplesArchive.ProtoReflect.Descriptor instead.
func (*StyleSwapUndoTuplesArchive) Descriptor() ([]byte, []int) {
	return file_TSCHCommandArchives_proto_rawDescGZIP(), []int{3}
}

func (x *StyleSwapUndoTuplesArchive) GetSwapTuples() []*StyleSwapUndoTupleArchive {
	if x != nil {
		return x.SwapTuples
	}
	return nil
}

type CommandStyleSwapArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super      *ChartCommandArchive         `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	UndoTuples []*StyleSwapUndoTupleArchive `protobuf:"bytes,2,rep,name=undo_tuples,json=undoTuples" json:"undo_tuples,omitempty"`
}

func (x *CommandStyleSwapArchive) Reset() {
	*x = CommandStyleSwapArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHCommandArchives_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandStyleSwapArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandStyleSwapArchive) ProtoMessage() {}

func (x *CommandStyleSwapArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHCommandArchives_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandStyleSwapArchive.ProtoReflect.Descriptor instead.
func (*CommandStyleSwapArchive) Descriptor() ([]byte, []int) {
	return file_TSCHCommandArchives_proto_rawDescGZIP(), []int{4}
}

func (x *CommandStyleSwapArchive) GetSuper() *ChartCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandStyleSwapArchive) GetUndoTuples() []*StyleSwapUndoTupleArchive {
	if x != nil {
		return x.UndoTuples
	}
	return nil
}

type CommandMutatePropertiesArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                    *ChartCommandArchive                                      `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	RollbackCmd              *Reference                                                `protobuf:"bytes,2,opt,name=rollback_cmd,json=rollbackCmd" json:"rollback_cmd,omitempty"`
	GenericPropertyDeltaMaps []*CommandMutatePropertiesArchive_GenericPropertyDeltaMap `protobuf:"bytes,3,rep,name=generic_property_delta_maps,json=genericPropertyDeltaMaps" json:"generic_property_delta_maps,omitempty"`
	ParagraphStyleDeltaMaps  []*CommandMutatePropertiesArchive_ParagraphStyleDeltaMap  `protobuf:"bytes,4,rep,name=paragraph_style_delta_maps,json=paragraphStyleDeltaMaps" json:"paragraph_style_delta_maps,omitempty"`
	InitiatedOnWeb           *bool                                                     `protobuf:"varint,5,opt,name=initiatedOnWeb" json:"initiatedOnWeb,omitempty"`
}

func (x *CommandMutatePropertiesArchive) Reset() {
	*x = CommandMutatePropertiesArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHCommandArchives_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandMutatePropertiesArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandMutatePropertiesArchive) ProtoMessage() {}

func (x *CommandMutatePropertiesArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHCommandArchives_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandMutatePropertiesArchive.ProtoReflect.Descriptor instead.
func (*CommandMutatePropertiesArchive) Descriptor() ([]byte, []int) {
	return file_TSCHCommandArchives_proto_rawDescGZIP(), []int{5}
}

func (x *CommandMutatePropertiesArchive) GetSuper() *ChartCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandMutatePropertiesArchive) GetRollbackCmd() *Reference {
	if x != nil {
		return x.RollbackCmd
	}
	return nil
}

func (x *CommandMutatePropertiesArchive) GetGenericPropertyDeltaMaps() []*CommandMutatePropertiesArchive_GenericPropertyDeltaMap {
	if x != nil {
		return x.GenericPropertyDeltaMaps
	}
	return nil
}

func (x *CommandMutatePropertiesArchive) GetParagraphStyleDeltaMaps() []*CommandMutatePropertiesArchive_ParagraphStyleDeltaMap {
	if x != nil {
		return x.ParagraphStyleDeltaMaps
	}
	return nil
}

func (x *CommandMutatePropertiesArchive) GetInitiatedOnWeb() bool {
	if x != nil && x.InitiatedOnWeb != nil {
		return *x.InitiatedOnWeb
	}
	return false
}

type CommandScaleAllTextArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super       *ChartCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	RollbackCmd *Reference           `protobuf:"bytes,2,opt,name=rollback_cmd,json=rollbackCmd" json:"rollback_cmd,omitempty"`
	ScaleFactor *float64             `protobuf:"fixed64,3,opt,name=scale_factor,json=scaleFactor" json:"scale_factor,omitempty"`
}

func (x *CommandScaleAllTextArchive) Reset() {
	*x = CommandScaleAllTextArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHCommandArchives_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandScaleAllTextArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandScaleAllTextArchive) ProtoMessage() {}

func (x *CommandScaleAllTextArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHCommandArchives_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandScaleAllTextArchive.ProtoReflect.Descriptor instead.
func (*CommandScaleAllTextArchive) Descriptor() ([]byte, []int) {
	return file_TSCHCommandArchives_proto_rawDescGZIP(), []int{6}
}

func (x *CommandScaleAllTextArchive) GetSuper() *ChartCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandScaleAllTextArchive) GetRollbackCmd() *Reference {
	if x != nil {
		return x.RollbackCmd
	}
	return nil
}

func (x *CommandScaleAllTextArchive) GetScaleFactor() float64 {
	if x != nil && x.ScaleFactor != nil {
		return *x.ScaleFactor
	}
	return 0
}

type CommandSetFontFamilyArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                   *ChartCommandArchive                                             `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	RollbackCmd             *Reference                                                       `protobuf:"bytes,2,opt,name=rollback_cmd,json=rollbackCmd" json:"rollback_cmd,omitempty"`
	NewFontFamily           *string                                                          `protobuf:"bytes,3,opt,name=new_font_family,json=newFontFamily" json:"new_font_family,omitempty"`
	OldFontFamily           *string                                                          `protobuf:"bytes,4,opt,name=old_font_family,json=oldFontFamily" json:"old_font_family,omitempty"`
	ParagraphStyleDeltaMaps []*CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap `protobuf:"bytes,5,rep,name=paragraph_style_delta_maps,json=paragraphStyleDeltaMaps" json:"paragraph_style_delta_maps,omitempty"`
	IsBold                  *bool                                                            `protobuf:"varint,6,req,name=is_bold,json=isBold" json:"is_bold,omitempty"`
	IsItalic                *bool                                                            `protobuf:"varint,7,req,name=is_italic,json=isItalic" json:"is_italic,omitempty"`
}

func (x *CommandSetFontFamilyArchive) Reset() {
	*x = CommandSetFontFamilyArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHCommandArchives_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSetFontFamilyArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSetFontFamilyArchive) ProtoMessage() {}

func (x *CommandSetFontFamilyArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHCommandArchives_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSetFontFamilyArchive.ProtoReflect.Descriptor instead.
func (*CommandSetFontFamilyArchive) Descriptor() ([]byte, []int) {
	return file_TSCHCommandArchives_proto_rawDescGZIP(), []int{7}
}

func (x *CommandSetFontFamilyArchive) GetSuper() *ChartCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandSetFontFamilyArchive) GetRollbackCmd() *Reference {
	if x != nil {
		return x.RollbackCmd
	}
	return nil
}

func (x *CommandSetFontFamilyArchive) GetNewFontFamily() string {
	if x != nil && x.NewFontFamily != nil {
		return *x.NewFontFamily
	}
	return ""
}

func (x *CommandSetFontFamilyArchive) GetOldFontFamily() string {
	if x != nil && x.OldFontFamily != nil {
		return *x.OldFontFamily
	}
	return ""
}

func (x *CommandSetFontFamilyArchive) GetParagraphStyleDeltaMaps() []*CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap {
	if x != nil {
		return x.ParagraphStyleDeltaMaps
	}
	return nil
}

func (x *CommandSetFontFamilyArchive) GetIsBold() bool {
	if x != nil && x.IsBold != nil {
		return *x.IsBold
	}
	return false
}

func (x *CommandSetFontFamilyArchive) GetIsItalic() bool {
	if x != nil && x.IsItalic != nil {
		return *x.IsItalic
	}
	return false
}

type CommandApplyFillSetArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                               *ChartCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	ChartType                           *ChartType           `protobuf:"varint,2,req,name=chart_type,json=chartType,enum=TSCH.ChartType" json:"chart_type,omitempty"`
	FillSet                             *ChartFillSetArchive `protobuf:"bytes,3,req,name=fill_set,json=fillSet" json:"fill_set,omitempty"`
	OldFillSet                          *ChartFillSetArchive `protobuf:"bytes,4,opt,name=old_fill_set,json=oldFillSet" json:"old_fill_set,omitempty"`
	PriorLastAppliedFillSetLookupString *string              `protobuf:"bytes,5,opt,name=prior_last_applied_fill_set_lookup_string,json=priorLastAppliedFillSetLookupString" json:"prior_last_applied_fill_set_lookup_string,omitempty"`
	RollbackCmd                         *Reference           `protobuf:"bytes,6,opt,name=rollback_cmd,json=rollbackCmd" json:"rollback_cmd,omitempty"`
}

func (x *CommandApplyFillSetArchive) Reset() {
	*x = CommandApplyFillSetArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHCommandArchives_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandApplyFillSetArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandApplyFillSetArchive) ProtoMessage() {}

func (x *CommandApplyFillSetArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHCommandArchives_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandApplyFillSetArchive.ProtoReflect.Descriptor instead.
func (*CommandApplyFillSetArchive) Descriptor() ([]byte, []int) {
	return file_TSCHCommandArchives_proto_rawDescGZIP(), []int{8}
}

func (x *CommandApplyFillSetArchive) GetSuper() *ChartCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandApplyFillSetArchive) GetChartType() ChartType {
	if x != nil && x.ChartType != nil {
		return *x.ChartType
	}
	return ChartType_undefinedChartType
}

func (x *CommandApplyFillSetArchive) GetFillSet() *ChartFillSetArchive {
	if x != nil {
		return x.FillSet
	}
	return nil
}

func (x *CommandApplyFillSetArchive) GetOldFillSet() *ChartFillSetArchive {
	if x != nil {
		return x.OldFillSet
	}
	return nil
}

func (x *CommandApplyFillSetArchive) GetPriorLastAppliedFillSetLookupString() string {
	if x != nil && x.PriorLastAppliedFillSetLookupString != nil {
		return *x.PriorLastAppliedFillSetLookupString
	}
	return ""
}

func (x *CommandApplyFillSetArchive) GetRollbackCmd() *Reference {
	if x != nil {
		return x.RollbackCmd
	}
	return nil
}

type CommandSetSeriesNameArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super       *ChartCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	SeriesIndex *uint32              `protobuf:"varint,2,req,name=seriesIndex" json:"seriesIndex,omitempty"`
	OldName     *string              `protobuf:"bytes,3,opt,name=oldName" json:"oldName,omitempty"`
	NewName     *string              `protobuf:"bytes,4,req,name=newName" json:"newName,omitempty"`
}

func (x *CommandSetSeriesNameArchive) Reset() {
	*x = CommandSetSeriesNameArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHCommandArchives_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSetSeriesNameArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSetSeriesNameArchive) ProtoMessage() {}

func (x *CommandSetSeriesNameArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHCommandArchives_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSetSeriesNameArchive.ProtoReflect.Descriptor instead.
func (*CommandSetSeriesNameArchive) Descriptor() ([]byte, []int) {
	return file_TSCHCommandArchives_proto_rawDescGZIP(), []int{9}
}

func (x *CommandSetSeriesNameArchive) GetSuper() *ChartCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandSetSeriesNameArchive) GetSeriesIndex() uint32 {
	if x != nil && x.SeriesIndex != nil {
		return *x.SeriesIndex
	}
	return 0
}

func (x *CommandSetSeriesNameArchive) GetOldName() string {
	if x != nil && x.OldName != nil {
		return *x.OldName
	}
	return ""
}

func (x *CommandSetSeriesNameArchive) GetNewName() string {
	if x != nil && x.NewName != nil {
		return *x.NewName
	}
	return ""
}

type CommandSetCategoryNameArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super            *ChartCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	CategoryIndex    *uint32              `protobuf:"varint,2,req,name=categoryIndex" json:"categoryIndex,omitempty"`
	OldName          *string              `protobuf:"bytes,3,opt,name=oldName" json:"oldName,omitempty"`
	NewName          *string              `protobuf:"bytes,4,req,name=newName" json:"newName,omitempty"`
	IsMultiDataIndex *bool                `protobuf:"varint,5,opt,name=isMultiDataIndex" json:"isMultiDataIndex,omitempty"`
}

func (x *CommandSetCategoryNameArchive) Reset() {
	*x = CommandSetCategoryNameArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHCommandArchives_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSetCategoryNameArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSetCategoryNameArchive) ProtoMessage() {}

func (x *CommandSetCategoryNameArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHCommandArchives_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSetCategoryNameArchive.ProtoReflect.Descriptor instead.
func (*CommandSetCategoryNameArchive) Descriptor() ([]byte, []int) {
	return file_TSCHCommandArchives_proto_rawDescGZIP(), []int{10}
}

func (x *CommandSetCategoryNameArchive) GetSuper() *ChartCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandSetCategoryNameArchive) GetCategoryIndex() uint32 {
	if x != nil && x.CategoryIndex != nil {
		return *x.CategoryIndex
	}
	return 0
}

func (x *CommandSetCategoryNameArchive) GetOldName() string {
	if x != nil && x.OldName != nil {
		return *x.OldName
	}
	return ""
}

func (x *CommandSetCategoryNameArchive) GetNewName() string {
	if x != nil && x.NewName != nil {
		return *x.NewName
	}
	return ""
}

func (x *CommandSetCategoryNameArchive) GetIsMultiDataIndex() bool {
	if x != nil && x.IsMultiDataIndex != nil {
		return *x.IsMultiDataIndex
	}
	return false
}

type CommandAddGridRowsArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super               *ChartCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	RowId               *UUID                `protobuf:"bytes,2,opt,name=row_id,json=rowId" json:"row_id,omitempty"`
	RowIdList           []*UUID              `protobuf:"bytes,3,rep,name=row_id_list,json=rowIdList" json:"row_id_list,omitempty"`
	RowNameList         []string             `protobuf:"bytes,4,rep,name=row_name_list,json=rowNameList" json:"row_name_list,omitempty"`
	UndoDeletionStartId *UUID                `protobuf:"bytes,5,opt,name=undo_deletion_start_id,json=undoDeletionStartId" json:"undo_deletion_start_id,omitempty"`
	UndoDeletionEndId   *UUID                `protobuf:"bytes,6,opt,name=undo_deletion_end_id,json=undoDeletionEndId" json:"undo_deletion_end_id,omitempty"`
}

func (x *CommandAddGridRowsArchive) Reset() {
	*x = CommandAddGridRowsArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHCommandArchives_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandAddGridRowsArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandAddGridRowsArchive) ProtoMessage() {}

func (x *CommandAddGridRowsArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHCommandArchives_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandAddGridRowsArchive.ProtoReflect.Descriptor instead.
func (*CommandAddGridRowsArchive) Descriptor() ([]byte, []int) {
	return file_TSCHCommandArchives_proto_rawDescGZIP(), []int{11}
}

func (x *CommandAddGridRowsArchive) GetSuper() *ChartCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandAddGridRowsArchive) GetRowId() *UUID {
	if x != nil {
		return x.RowId
	}
	return nil
}

func (x *CommandAddGridRowsArchive) GetRowIdList() []*UUID {
	if x != nil {
		return x.RowIdList
	}
	return nil
}

func (x *CommandAddGridRowsArchive) GetRowNameList() []string {
	if x != nil {
		return x.RowNameList
	}
	return nil
}

func (x *CommandAddGridRowsArchive) GetUndoDeletionStartId() *UUID {
	if x != nil {
		return x.UndoDeletionStartId
	}
	return nil
}

func (x *CommandAddGridRowsArchive) GetUndoDeletionEndId() *UUID {
	if x != nil {
		return x.UndoDeletionEndId
	}
	return nil
}

type CommandAddGridColumnsArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super               *ChartCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	ColumnId            *UUID                `protobuf:"bytes,2,opt,name=column_id,json=columnId" json:"column_id,omitempty"`
	ColumnIdList        []*UUID              `protobuf:"bytes,3,rep,name=column_id_list,json=columnIdList" json:"column_id_list,omitempty"`
	ColumnNameList      []string             `protobuf:"bytes,4,rep,name=column_name_list,json=columnNameList" json:"column_name_list,omitempty"`
	UndoDeletionStartId *UUID                `protobuf:"bytes,5,opt,name=undo_deletion_start_id,json=undoDeletionStartId" json:"undo_deletion_start_id,omitempty"`
	UndoDeletionEndId   *UUID                `protobuf:"bytes,6,opt,name=undo_deletion_end_id,json=undoDeletionEndId" json:"undo_deletion_end_id,omitempty"`
}

func (x *CommandAddGridColumnsArchive) Reset() {
	*x = CommandAddGridColumnsArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHCommandArchives_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandAddGridColumnsArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandAddGridColumnsArchive) ProtoMessage() {}

func (x *CommandAddGridColumnsArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHCommandArchives_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandAddGridColumnsArchive.ProtoReflect.Descriptor instead.
func (*CommandAddGridColumnsArchive) Descriptor() ([]byte, []int) {
	return file_TSCHCommandArchives_proto_rawDescGZIP(), []int{12}
}

func (x *CommandAddGridColumnsArchive) GetSuper() *ChartCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandAddGridColumnsArchive) GetColumnId() *UUID {
	if x != nil {
		return x.ColumnId
	}
	return nil
}

func (x *CommandAddGridColumnsArchive) GetColumnIdList() []*UUID {
	if x != nil {
		return x.ColumnIdList
	}
	return nil
}

func (x *CommandAddGridColumnsArchive) GetColumnNameList() []string {
	if x != nil {
		return x.ColumnNameList
	}
	return nil
}

func (x *CommandAddGridColumnsArchive) GetUndoDeletionStartId() *UUID {
	if x != nil {
		return x.UndoDeletionStartId
	}
	return nil
}

func (x *CommandAddGridColumnsArchive) GetUndoDeletionEndId() *UUID {
	if x != nil {
		return x.UndoDeletionEndId
	}
	return nil
}

type CommandMoveGridRowsArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super          *ChartCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	StartRowId     *UUID                `protobuf:"bytes,2,req,name=start_row_id,json=startRowId" json:"start_row_id,omitempty"`
	EndRowId       *UUID                `protobuf:"bytes,3,req,name=end_row_id,json=endRowId" json:"end_row_id,omitempty"`
	AfterRowId     *UUID                `protobuf:"bytes,4,opt,name=after_row_id,json=afterRowId" json:"after_row_id,omitempty"`
	UndoAfterRowId *UUID                `protobuf:"bytes,5,opt,name=undo_after_row_id,json=undoAfterRowId" json:"undo_after_row_id,omitempty"`
}

func (x *CommandMoveGridRowsArchive) Reset() {
	*x = CommandMoveGridRowsArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHCommandArchives_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandMoveGridRowsArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandMoveGridRowsArchive) ProtoMessage() {}

func (x *CommandMoveGridRowsArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHCommandArchives_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandMoveGridRowsArchive.ProtoReflect.Descriptor instead.
func (*CommandMoveGridRowsArchive) Descriptor() ([]byte, []int) {
	return file_TSCHCommandArchives_proto_rawDescGZIP(), []int{13}
}

func (x *CommandMoveGridRowsArchive) GetSuper() *ChartCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandMoveGridRowsArchive) GetStartRowId() *UUID {
	if x != nil {
		return x.StartRowId
	}
	return nil
}

func (x *CommandMoveGridRowsArchive) GetEndRowId() *UUID {
	if x != nil {
		return x.EndRowId
	}
	return nil
}

func (x *CommandMoveGridRowsArchive) GetAfterRowId() *UUID {
	if x != nil {
		return x.AfterRowId
	}
	return nil
}

func (x *CommandMoveGridRowsArchive) GetUndoAfterRowId() *UUID {
	if x != nil {
		return x.UndoAfterRowId
	}
	return nil
}

type CommandMoveGridColumnsArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super             *ChartCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	StartColumnId     *UUID                `protobuf:"bytes,2,req,name=start_column_id,json=startColumnId" json:"start_column_id,omitempty"`
	EndColumnId       *UUID                `protobuf:"bytes,3,req,name=end_column_id,json=endColumnId" json:"end_column_id,omitempty"`
	AfterColumnId     *UUID                `protobuf:"bytes,4,opt,name=after_column_id,json=afterColumnId" json:"after_column_id,omitempty"`
	UndoAfterColumnId *UUID                `protobuf:"bytes,5,opt,name=undo_after_column_id,json=undoAfterColumnId" json:"undo_after_column_id,omitempty"`
}

func (x *CommandMoveGridColumnsArchive) Reset() {
	*x = CommandMoveGridColumnsArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHCommandArchives_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandMoveGridColumnsArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandMoveGridColumnsArchive) ProtoMessage() {}

func (x *CommandMoveGridColumnsArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHCommandArchives_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandMoveGridColumnsArchive.ProtoReflect.Descriptor instead.
func (*CommandMoveGridColumnsArchive) Descriptor() ([]byte, []int) {
	return file_TSCHCommandArchives_proto_rawDescGZIP(), []int{14}
}

func (x *CommandMoveGridColumnsArchive) GetSuper() *ChartCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandMoveGridColumnsArchive) GetStartColumnId() *UUID {
	if x != nil {
		return x.StartColumnId
	}
	return nil
}

func (x *CommandMoveGridColumnsArchive) GetEndColumnId() *UUID {
	if x != nil {
		return x.EndColumnId
	}
	return nil
}

func (x *CommandMoveGridColumnsArchive) GetAfterColumnId() *UUID {
	if x != nil {
		return x.AfterColumnId
	}
	return nil
}

func (x *CommandMoveGridColumnsArchive) GetUndoAfterColumnId() *UUID {
	if x != nil {
		return x.UndoAfterColumnId
	}
	return nil
}

type CommandDeleteGridRowsArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                 *ChartCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	StartRowId            *UUID                `protobuf:"bytes,2,req,name=start_row_id,json=startRowId" json:"start_row_id,omitempty"`
	EndRowId              *UUID                `protobuf:"bytes,3,req,name=end_row_id,json=endRowId" json:"end_row_id,omitempty"`
	CutRowNames           []string             `protobuf:"bytes,4,rep,name=cut_row_names,json=cutRowNames" json:"cut_row_names,omitempty"`
	CutValues             []*GridRow           `protobuf:"bytes,5,rep,name=cut_values,json=cutValues" json:"cut_values,omitempty"`
	UndoDiscardsValues    *bool                `protobuf:"varint,6,opt,name=undo_discards_values,json=undoDiscardsValues" json:"undo_discards_values,omitempty"`
	UndoColumnInsertionId *UUID                `protobuf:"bytes,7,opt,name=undo_column_insertion_id,json=undoColumnInsertionId" json:"undo_column_insertion_id,omitempty"`
	UndoRowInsertionId    *UUID                `protobuf:"bytes,8,opt,name=undo_row_insertion_id,json=undoRowInsertionId" json:"undo_row_insertion_id,omitempty"`
	UndoRowIdList         []*UUID              `protobuf:"bytes,9,rep,name=undo_row_id_list,json=undoRowIdList" json:"undo_row_id_list,omitempty"`
	CutColumnNames        []string             `protobuf:"bytes,11,rep,name=cut_column_names,json=cutColumnNames" json:"cut_column_names,omitempty"`
	UndoColumnIdList      []*UUID              `protobuf:"bytes,12,rep,name=undo_column_id_list,json=undoColumnIdList" json:"undo_column_id_list,omitempty"`
}

func (x *CommandDeleteGridRowsArchive) Reset() {
	*x = CommandDeleteGridRowsArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHCommandArchives_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandDeleteGridRowsArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandDeleteGridRowsArchive) ProtoMessage() {}

func (x *CommandDeleteGridRowsArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHCommandArchives_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandDeleteGridRowsArchive.ProtoReflect.Descriptor instead.
func (*CommandDeleteGridRowsArchive) Descriptor() ([]byte, []int) {
	return file_TSCHCommandArchives_proto_rawDescGZIP(), []int{15}
}

func (x *CommandDeleteGridRowsArchive) GetSuper() *ChartCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandDeleteGridRowsArchive) GetStartRowId() *UUID {
	if x != nil {
		return x.StartRowId
	}
	return nil
}

func (x *CommandDeleteGridRowsArchive) GetEndRowId() *UUID {
	if x != nil {
		return x.EndRowId
	}
	return nil
}

func (x *CommandDeleteGridRowsArchive) GetCutRowNames() []string {
	if x != nil {
		return x.CutRowNames
	}
	return nil
}

func (x *CommandDeleteGridRowsArchive) GetCutValues() []*GridRow {
	if x != nil {
		return x.CutValues
	}
	return nil
}

func (x *CommandDeleteGridRowsArchive) GetUndoDiscardsValues() bool {
	if x != nil && x.UndoDiscardsValues != nil {
		return *x.UndoDiscardsValues
	}
	return false
}

func (x *CommandDeleteGridRowsArchive) GetUndoColumnInsertionId() *UUID {
	if x != nil {
		return x.UndoColumnInsertionId
	}
	return nil
}

func (x *CommandDeleteGridRowsArchive) GetUndoRowInsertionId() *UUID {
	if x != nil {
		return x.UndoRowInsertionId
	}
	return nil
}

func (x *CommandDeleteGridRowsArchive) GetUndoRowIdList() []*UUID {
	if x != nil {
		return x.UndoRowIdList
	}
	return nil
}

func (x *CommandDeleteGridRowsArchive) GetCutColumnNames() []string {
	if x != nil {
		return x.CutColumnNames
	}
	return nil
}

func (x *CommandDeleteGridRowsArchive) GetUndoColumnIdList() []*UUID {
	if x != nil {
		return x.UndoColumnIdList
	}
	return nil
}

type CommandDeleteGridColumnsArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                 *ChartCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	StartColumnId         *UUID                `protobuf:"bytes,2,req,name=start_column_id,json=startColumnId" json:"start_column_id,omitempty"`
	EndColumnId           *UUID                `protobuf:"bytes,3,req,name=end_column_id,json=endColumnId" json:"end_column_id,omitempty"`
	CutNames              []string             `protobuf:"bytes,4,rep,name=cut_names,json=cutNames" json:"cut_names,omitempty"`
	CutValues             []*GridRow           `protobuf:"bytes,5,rep,name=cut_values,json=cutValues" json:"cut_values,omitempty"`
	UndoDiscardsValues    *bool                `protobuf:"varint,6,opt,name=undo_discards_values,json=undoDiscardsValues" json:"undo_discards_values,omitempty"`
	UndoColumnInsertionId *UUID                `protobuf:"bytes,7,opt,name=undo_column_insertion_id,json=undoColumnInsertionId" json:"undo_column_insertion_id,omitempty"`
	UndoRowInsertionId    *UUID                `protobuf:"bytes,8,opt,name=undo_row_insertion_id,json=undoRowInsertionId" json:"undo_row_insertion_id,omitempty"`
	UndoColumnIdList      []*UUID              `protobuf:"bytes,9,rep,name=undo_column_id_list,json=undoColumnIdList" json:"undo_column_id_list,omitempty"`
	CutRowNames           []string             `protobuf:"bytes,11,rep,name=cut_row_names,json=cutRowNames" json:"cut_row_names,omitempty"`
	UndoRowIdList         []*UUID              `protobuf:"bytes,12,rep,name=undo_row_id_list,json=undoRowIdList" json:"undo_row_id_list,omitempty"`
}

func (x *CommandDeleteGridColumnsArchive) Reset() {
	*x = CommandDeleteGridColumnsArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHCommandArchives_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandDeleteGridColumnsArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandDeleteGridColumnsArchive) ProtoMessage() {}

func (x *CommandDeleteGridColumnsArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHCommandArchives_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandDeleteGridColumnsArchive.ProtoReflect.Descriptor instead.
func (*CommandDeleteGridColumnsArchive) Descriptor() ([]byte, []int) {
	return file_TSCHCommandArchives_proto_rawDescGZIP(), []int{16}
}

func (x *CommandDeleteGridColumnsArchive) GetSuper() *ChartCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandDeleteGridColumnsArchive) GetStartColumnId() *UUID {
	if x != nil {
		return x.StartColumnId
	}
	return nil
}

func (x *CommandDeleteGridColumnsArchive) GetEndColumnId() *UUID {
	if x != nil {
		return x.EndColumnId
	}
	return nil
}

func (x *CommandDeleteGridColumnsArchive) GetCutNames() []string {
	if x != nil {
		return x.CutNames
	}
	return nil
}

func (x *CommandDeleteGridColumnsArchive) GetCutValues() []*GridRow {
	if x != nil {
		return x.CutValues
	}
	return nil
}

func (x *CommandDeleteGridColumnsArchive) GetUndoDiscardsValues() bool {
	if x != nil && x.UndoDiscardsValues != nil {
		return *x.UndoDiscardsValues
	}
	return false
}

func (x *CommandDeleteGridColumnsArchive) GetUndoColumnInsertionId() *UUID {
	if x != nil {
		return x.UndoColumnInsertionId
	}
	return nil
}

func (x *CommandDeleteGridColumnsArchive) GetUndoRowInsertionId() *UUID {
	if x != nil {
		return x.UndoRowInsertionId
	}
	return nil
}

func (x *CommandDeleteGridColumnsArchive) GetUndoColumnIdList() []*UUID {
	if x != nil {
		return x.UndoColumnIdList
	}
	return nil
}

func (x *CommandDeleteGridColumnsArchive) GetCutRowNames() []string {
	if x != nil {
		return x.CutRowNames
	}
	return nil
}

func (x *CommandDeleteGridColumnsArchive) GetUndoRowIdList() []*UUID {
	if x != nil {
		return x.UndoRowIdList
	}
	return nil
}

type CommandSetGridValueArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super       *ChartCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Rowindex    *uint32              `protobuf:"varint,2,req,name=rowindex" json:"rowindex,omitempty"`
	Columnindex *uint32              `protobuf:"varint,3,req,name=columnindex" json:"columnindex,omitempty"`
	Oldvalue    *float64             `protobuf:"fixed64,4,req,name=oldvalue" json:"oldvalue,omitempty"`
	Newvalue    *float64             `protobuf:"fixed64,5,req,name=newvalue" json:"newvalue,omitempty"`
}

func (x *CommandSetGridValueArchive) Reset() {
	*x = CommandSetGridValueArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHCommandArchives_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSetGridValueArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSetGridValueArchive) ProtoMessage() {}

func (x *CommandSetGridValueArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHCommandArchives_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSetGridValueArchive.ProtoReflect.Descriptor instead.
func (*CommandSetGridValueArchive) Descriptor() ([]byte, []int) {
	return file_TSCHCommandArchives_proto_rawDescGZIP(), []int{17}
}

func (x *CommandSetGridValueArchive) GetSuper() *ChartCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandSetGridValueArchive) GetRowindex() uint32 {
	if x != nil && x.Rowindex != nil {
		return *x.Rowindex
	}
	return 0
}

func (x *CommandSetGridValueArchive) GetColumnindex() uint32 {
	if x != nil && x.Columnindex != nil {
		return *x.Columnindex
	}
	return 0
}

func (x *CommandSetGridValueArchive) GetOldvalue() float64 {
	if x != nil && x.Oldvalue != nil {
		return *x.Oldvalue
	}
	return 0
}

func (x *CommandSetGridValueArchive) GetNewvalue() float64 {
	if x != nil && x.Newvalue != nil {
		return *x.Newvalue
	}
	return 0
}

type CommandSetGridDirectionArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super        *ChartCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	OldDirection *uint32              `protobuf:"varint,2,req,name=old_direction,json=oldDirection" json:"old_direction,omitempty"`
	NewDirection *uint32              `protobuf:"varint,3,req,name=new_direction,json=newDirection" json:"new_direction,omitempty"`
}

func (x *CommandSetGridDirectionArchive) Reset() {
	*x = CommandSetGridDirectionArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHCommandArchives_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSetGridDirectionArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSetGridDirectionArchive) ProtoMessage() {}

func (x *CommandSetGridDirectionArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHCommandArchives_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSetGridDirectionArchive.ProtoReflect.Descriptor instead.
func (*CommandSetGridDirectionArchive) Descriptor() ([]byte, []int) {
	return file_TSCHCommandArchives_proto_rawDescGZIP(), []int{18}
}

func (x *CommandSetGridDirectionArchive) GetSuper() *ChartCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandSetGridDirectionArchive) GetOldDirection() uint32 {
	if x != nil && x.OldDirection != nil {
		return *x.OldDirection
	}
	return 0
}

func (x *CommandSetGridDirectionArchive) GetNewDirection() uint32 {
	if x != nil && x.NewDirection != nil {
		return *x.NewDirection
	}
	return 0
}

type CommandSetSeriesTypeArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super       *ChartCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Seriesindex *uint32              `protobuf:"varint,2,req,name=seriesindex" json:"seriesindex,omitempty"`
	Oldtype     *uint32              `protobuf:"varint,3,req,name=oldtype" json:"oldtype,omitempty"`
	Newtype     *uint32              `protobuf:"varint,4,req,name=newtype" json:"newtype,omitempty"`
}

func (x *CommandSetSeriesTypeArchive) Reset() {
	*x = CommandSetSeriesTypeArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHCommandArchives_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSetSeriesTypeArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSetSeriesTypeArchive) ProtoMessage() {}

func (x *CommandSetSeriesTypeArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHCommandArchives_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSetSeriesTypeArchive.ProtoReflect.Descriptor instead.
func (*CommandSetSeriesTypeArchive) Descriptor() ([]byte, []int) {
	return file_TSCHCommandArchives_proto_rawDescGZIP(), []int{19}
}

func (x *CommandSetSeriesTypeArchive) GetSuper() *ChartCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandSetSeriesTypeArchive) GetSeriesindex() uint32 {
	if x != nil && x.Seriesindex != nil {
		return *x.Seriesindex
	}
	return 0
}

func (x *CommandSetSeriesTypeArchive) GetOldtype() uint32 {
	if x != nil && x.Oldtype != nil {
		return *x.Oldtype
	}
	return 0
}

func (x *CommandSetSeriesTypeArchive) GetNewtype() uint32 {
	if x != nil && x.Newtype != nil {
		return *x.Newtype
	}
	return 0
}

type CommandSetScatterFormatArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super     *ChartCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Oldformat *uint32              `protobuf:"varint,3,req,name=oldformat" json:"oldformat,omitempty"`
	Newformat *uint32              `protobuf:"varint,4,req,name=newformat" json:"newformat,omitempty"`
}

func (x *CommandSetScatterFormatArchive) Reset() {
	*x = CommandSetScatterFormatArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHCommandArchives_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSetScatterFormatArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSetScatterFormatArchive) ProtoMessage() {}

func (x *CommandSetScatterFormatArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHCommandArchives_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSetScatterFormatArchive.ProtoReflect.Descriptor instead.
func (*CommandSetScatterFormatArchive) Descriptor() ([]byte, []int) {
	return file_TSCHCommandArchives_proto_rawDescGZIP(), []int{20}
}

func (x *CommandSetScatterFormatArchive) GetSuper() *ChartCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandSetScatterFormatArchive) GetOldformat() uint32 {
	if x != nil && x.Oldformat != nil {
		return *x.Oldformat
	}
	return 0
}

func (x *CommandSetScatterFormatArchive) GetNewformat() uint32 {
	if x != nil && x.Newformat != nil {
		return *x.Newformat
	}
	return 0
}

type CommandSetMultiDataSetIndexArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super    *ChartCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Oldindex *uint32              `protobuf:"varint,2,req,name=oldindex" json:"oldindex,omitempty"`
	Newindex *uint32              `protobuf:"varint,3,req,name=newindex" json:"newindex,omitempty"`
}

func (x *CommandSetMultiDataSetIndexArchive) Reset() {
	*x = CommandSetMultiDataSetIndexArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHCommandArchives_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSetMultiDataSetIndexArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSetMultiDataSetIndexArchive) ProtoMessage() {}

func (x *CommandSetMultiDataSetIndexArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHCommandArchives_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSetMultiDataSetIndexArchive.ProtoReflect.Descriptor instead.
func (*CommandSetMultiDataSetIndexArchive) Descriptor() ([]byte, []int) {
	return file_TSCHCommandArchives_proto_rawDescGZIP(), []int{21}
}

func (x *CommandSetMultiDataSetIndexArchive) GetSuper() *ChartCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandSetMultiDataSetIndexArchive) GetOldindex() uint32 {
	if x != nil && x.Oldindex != nil {
		return *x.Oldindex
	}
	return 0
}

func (x *CommandSetMultiDataSetIndexArchive) GetNewindex() uint32 {
	if x != nil && x.Newindex != nil {
		return *x.Newindex
	}
	return 0
}

type CommandSetLegendFrameArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super          *ChartCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	OldLegendFrame *RectArchive         `protobuf:"bytes,2,req,name=old_legend_frame,json=oldLegendFrame" json:"old_legend_frame,omitempty"`
	NewLegendFrame *RectArchive         `protobuf:"bytes,3,req,name=new_legend_frame,json=newLegendFrame" json:"new_legend_frame,omitempty"`
}

func (x *CommandSetLegendFrameArchive) Reset() {
	*x = CommandSetLegendFrameArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHCommandArchives_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSetLegendFrameArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSetLegendFrameArchive) ProtoMessage() {}

func (x *CommandSetLegendFrameArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHCommandArchives_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSetLegendFrameArchive.ProtoReflect.Descriptor instead.
func (*CommandSetLegendFrameArchive) Descriptor() ([]byte, []int) {
	return file_TSCHCommandArchives_proto_rawDescGZIP(), []int{22}
}

func (x *CommandSetLegendFrameArchive) GetSuper() *ChartCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandSetLegendFrameArchive) GetOldLegendFrame() *RectArchive {
	if x != nil {
		return x.OldLegendFrame
	}
	return nil
}

func (x *CommandSetLegendFrameArchive) GetNewLegendFrame() *RectArchive {
	if x != nil {
		return x.NewLegendFrame
	}
	return nil
}

type CommandSetPieWedgeExplosion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super              *ChartCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	SeriesIndices      []uint32             `protobuf:"varint,2,rep,name=series_indices,json=seriesIndices" json:"series_indices,omitempty"`
	WedgeExplosions    []float64            `protobuf:"fixed64,3,rep,name=wedge_explosions,json=wedgeExplosions" json:"wedge_explosions,omitempty"`
	OldSeriesIndices   []uint32             `protobuf:"varint,5,rep,name=old_series_indices,json=oldSeriesIndices" json:"old_series_indices,omitempty"`
	OldWedgeExplosions []float64            `protobuf:"fixed64,6,rep,name=old_wedge_explosions,json=oldWedgeExplosions" json:"old_wedge_explosions,omitempty"`
	RollbackCmd        *Reference           `protobuf:"bytes,7,opt,name=rollback_cmd,json=rollbackCmd" json:"rollback_cmd,omitempty"`
}

func (x *CommandSetPieWedgeExplosion) Reset() {
	*x = CommandSetPieWedgeExplosion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHCommandArchives_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSetPieWedgeExplosion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSetPieWedgeExplosion) ProtoMessage() {}

func (x *CommandSetPieWedgeExplosion) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHCommandArchives_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSetPieWedgeExplosion.ProtoReflect.Descriptor instead.
func (*CommandSetPieWedgeExplosion) Descriptor() ([]byte, []int) {
	return file_TSCHCommandArchives_proto_rawDescGZIP(), []int{23}
}

func (x *CommandSetPieWedgeExplosion) GetSuper() *ChartCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandSetPieWedgeExplosion) GetSeriesIndices() []uint32 {
	if x != nil {
		return x.SeriesIndices
	}
	return nil
}

func (x *CommandSetPieWedgeExplosion) GetWedgeExplosions() []float64 {
	if x != nil {
		return x.WedgeExplosions
	}
	return nil
}

func (x *CommandSetPieWedgeExplosion) GetOldSeriesIndices() []uint32 {
	if x != nil {
		return x.OldSeriesIndices
	}
	return nil
}

func (x *CommandSetPieWedgeExplosion) GetOldWedgeExplosions() []float64 {
	if x != nil {
		return x.OldWedgeExplosions
	}
	return nil
}

func (x *CommandSetPieWedgeExplosion) GetRollbackCmd() *Reference {
	if x != nil {
		return x.RollbackCmd
	}
	return nil
}

type CommandChartApplyTheme struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super       *ApplyThemeChildCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Info        *Reference                     `protobuf:"bytes,2,req,name=info" json:"info,omitempty"`
	SwapCommand *Reference                     `protobuf:"bytes,3,opt,name=swap_command,json=swapCommand" json:"swap_command,omitempty"`
	Preset      *Reference                     `protobuf:"bytes,4,opt,name=preset" json:"preset,omitempty"`
}

func (x *CommandChartApplyTheme) Reset() {
	*x = CommandChartApplyTheme{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHCommandArchives_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandChartApplyTheme) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandChartApplyTheme) ProtoMessage() {}

func (x *CommandChartApplyTheme) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHCommandArchives_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandChartApplyTheme.ProtoReflect.Descriptor instead.
func (*CommandChartApplyTheme) Descriptor() ([]byte, []int) {
	return file_TSCHCommandArchives_proto_rawDescGZIP(), []int{24}
}

func (x *CommandChartApplyTheme) GetSuper() *ApplyThemeChildCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandChartApplyTheme) GetInfo() *Reference {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *CommandChartApplyTheme) GetSwapCommand() *Reference {
	if x != nil {
		return x.SwapCommand
	}
	return nil
}

func (x *CommandChartApplyTheme) GetPreset() *Reference {
	if x != nil {
		return x.Preset
	}
	return nil
}

type CommandChartApplyPreset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                 *ChartCommandArchive         `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Behavior              *ApplyPresetBehavior         `protobuf:"varint,2,opt,name=behavior,enum=TSCH.ApplyPresetBehavior,def=1" json:"behavior,omitempty"`
	Preset                *Reference                   `protobuf:"bytes,3,opt,name=preset" json:"preset,omitempty"`
	OldPreset             *Reference                   `protobuf:"bytes,4,opt,name=old_preset,json=oldPreset" json:"old_preset,omitempty"`
	ShouldApplySwapTuples *bool                        `protobuf:"varint,5,opt,name=should_apply_swap_tuples,json=shouldApplySwapTuples" json:"should_apply_swap_tuples,omitempty"`
	AreSwapTuplesValid    *bool                        `protobuf:"varint,6,opt,name=are_swap_tuples_valid,json=areSwapTuplesValid" json:"are_swap_tuples_valid,omitempty"`
	SwapTuples            []*StyleSwapUndoTupleArchive `protobuf:"bytes,7,rep,name=swap_tuples,json=swapTuples" json:"swap_tuples,omitempty"`
	InverseSwapTuples     []*StyleSwapUndoTupleArchive `protobuf:"bytes,8,rep,name=inverse_swap_tuples,json=inverseSwapTuples" json:"inverse_swap_tuples,omitempty"`
	RollbackPreset        *Reference                   `protobuf:"bytes,9,opt,name=rollback_preset,json=rollbackPreset" json:"rollback_preset,omitempty"`
	RollbackSwapTuples    []*StyleSwapUndoTupleArchive `protobuf:"bytes,10,rep,name=rollback_swap_tuples,json=rollbackSwapTuples" json:"rollback_swap_tuples,omitempty"`
}

// Default values for CommandChartApplyPreset fields.
const (
	Default_CommandChartApplyPreset_Behavior = ApplyPresetBehavior_remove_overrides
)

func (x *CommandChartApplyPreset) Reset() {
	*x = CommandChartApplyPreset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHCommandArchives_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandChartApplyPreset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandChartApplyPreset) ProtoMessage() {}

func (x *CommandChartApplyPreset) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHCommandArchives_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandChartApplyPreset.ProtoReflect.Descriptor instead.
func (*CommandChartApplyPreset) Descriptor() ([]byte, []int) {
	return file_TSCHCommandArchives_proto_rawDescGZIP(), []int{25}
}

func (x *CommandChartApplyPreset) GetSuper() *ChartCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandChartApplyPreset) GetBehavior() ApplyPresetBehavior {
	if x != nil && x.Behavior != nil {
		return *x.Behavior
	}
	return Default_CommandChartApplyPreset_Behavior
}

func (x *CommandChartApplyPreset) GetPreset() *Reference {
	if x != nil {
		return x.Preset
	}
	return nil
}

func (x *CommandChartApplyPreset) GetOldPreset() *Reference {
	if x != nil {
		return x.OldPreset
	}
	return nil
}

func (x *CommandChartApplyPreset) GetShouldApplySwapTuples() bool {
	if x != nil && x.ShouldApplySwapTuples != nil {
		return *x.ShouldApplySwapTuples
	}
	return false
}

func (x *CommandChartApplyPreset) GetAreSwapTuplesValid() bool {
	if x != nil && x.AreSwapTuplesValid != nil {
		return *x.AreSwapTuplesValid
	}
	return false
}

func (x *CommandChartApplyPreset) GetSwapTuples() []*StyleSwapUndoTupleArchive {
	if x != nil {
		return x.SwapTuples
	}
	return nil
}

func (x *CommandChartApplyPreset) GetInverseSwapTuples() []*StyleSwapUndoTupleArchive {
	if x != nil {
		return x.InverseSwapTuples
	}
	return nil
}

func (x *CommandChartApplyPreset) GetRollbackPreset() *Reference {
	if x != nil {
		return x.RollbackPreset
	}
	return nil
}

func (x *CommandChartApplyPreset) GetRollbackSwapTuples() []*StyleSwapUndoTupleArchive {
	if x != nil {
		return x.RollbackSwapTuples
	}
	return nil
}

type CommandCleanupGeometryArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                   *ChartCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	InfoGeometryCommand     *Reference           `protobuf:"bytes,2,opt,name=info_geometry_command,json=infoGeometryCommand" json:"info_geometry_command,omitempty"`
	AnchorAttachmentCommand *Reference           `protobuf:"bytes,3,opt,name=anchor_attachment_command,json=anchorAttachmentCommand" json:"anchor_attachment_command,omitempty"`
	OriginalLegendRect      *RectArchive         `protobuf:"bytes,4,opt,name=original_legend_rect,json=originalLegendRect" json:"original_legend_rect,omitempty"`
}

func (x *CommandCleanupGeometryArchive) Reset() {
	*x = CommandCleanupGeometryArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHCommandArchives_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandCleanupGeometryArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandCleanupGeometryArchive) ProtoMessage() {}

func (x *CommandCleanupGeometryArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHCommandArchives_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandCleanupGeometryArchive.ProtoReflect.Descriptor instead.
func (*CommandCleanupGeometryArchive) Descriptor() ([]byte, []int) {
	return file_TSCHCommandArchives_proto_rawDescGZIP(), []int{26}
}

func (x *CommandCleanupGeometryArchive) GetSuper() *ChartCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandCleanupGeometryArchive) GetInfoGeometryCommand() *Reference {
	if x != nil {
		return x.InfoGeometryCommand
	}
	return nil
}

func (x *CommandCleanupGeometryArchive) GetAnchorAttachmentCommand() *Reference {
	if x != nil {
		return x.AnchorAttachmentCommand
	}
	return nil
}

func (x *CommandCleanupGeometryArchive) GetOriginalLegendRect() *RectArchive {
	if x != nil {
		return x.OriginalLegendRect
	}
	return nil
}

type ChartCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                *CommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	ChartInfo            *Reference      `protobuf:"bytes,2,opt,name=chart_info,json=chartInfo" json:"chart_info,omitempty"`
	OriginalDirtyState   *bool           `protobuf:"varint,3,opt,name=original_dirty_state,json=originalDirtyState" json:"original_dirty_state,omitempty"`
	ChartInfoIdPath      *UUIDPath       `protobuf:"bytes,4,opt,name=chart_info_id_path,json=chartInfoIdPath" json:"chart_info_id_path,omitempty"`
	IsForForwardUndoRedo *bool           `protobuf:"varint,5,opt,name=is_for_forward_undo_redo,json=isForForwardUndoRedo" json:"is_for_forward_undo_redo,omitempty"`
}

func (x *ChartCommandArchive) Reset() {
	*x = ChartCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHCommandArchives_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartCommandArchive) ProtoMessage() {}

func (x *ChartCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHCommandArchives_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartCommandArchive.ProtoReflect.Descriptor instead.
func (*ChartCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSCHCommandArchives_proto_rawDescGZIP(), []int{27}
}

func (x *ChartCommandArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *ChartCommandArchive) GetChartInfo() *Reference {
	if x != nil {
		return x.ChartInfo
	}
	return nil
}

func (x *ChartCommandArchive) GetOriginalDirtyState() bool {
	if x != nil && x.OriginalDirtyState != nil {
		return *x.OriginalDirtyState
	}
	return false
}

func (x *ChartCommandArchive) GetChartInfoIdPath() *UUIDPath {
	if x != nil {
		return x.ChartInfoIdPath
	}
	return nil
}

func (x *ChartCommandArchive) GetIsForForwardUndoRedo() bool {
	if x != nil && x.IsForForwardUndoRedo != nil {
		return *x.IsForForwardUndoRedo
	}
	return false
}

type CommandReplaceGridValuesArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super              *ChartCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	OldDataRows        []*GridRow           `protobuf:"bytes,4,rep,name=old_data_rows,json=oldDataRows" json:"old_data_rows,omitempty"`
	NewDataRows        []*GridRow           `protobuf:"bytes,5,rep,name=new_data_rows,json=newDataRows" json:"new_data_rows,omitempty"`
	OldRowNames        []string             `protobuf:"bytes,6,rep,name=old_row_names,json=oldRowNames" json:"old_row_names,omitempty"`
	NewRowNames        []string             `protobuf:"bytes,7,rep,name=new_row_names,json=newRowNames" json:"new_row_names,omitempty"`
	OldColNames        []string             `protobuf:"bytes,8,rep,name=old_col_names,json=oldColNames" json:"old_col_names,omitempty"`
	NewColNames        []string             `protobuf:"bytes,9,rep,name=new_col_names,json=newColNames" json:"new_col_names,omitempty"`
	UpdateRowUuids     []*UUID              `protobuf:"bytes,10,rep,name=update_row_uuids,json=updateRowUuids" json:"update_row_uuids,omitempty"`
	UpdateColumnUuids  []*UUID              `protobuf:"bytes,11,rep,name=update_column_uuids,json=updateColumnUuids" json:"update_column_uuids,omitempty"`
	AddRowUuids        []*UUID              `protobuf:"bytes,12,rep,name=add_row_uuids,json=addRowUuids" json:"add_row_uuids,omitempty"`
	AddColumnUuids     []*UUID              `protobuf:"bytes,13,rep,name=add_column_uuids,json=addColumnUuids" json:"add_column_uuids,omitempty"`
	DeleteRowUuids     []*UUID              `protobuf:"bytes,14,rep,name=delete_row_uuids,json=deleteRowUuids" json:"delete_row_uuids,omitempty"`
	DeleteColumnUuids  []*UUID              `protobuf:"bytes,15,rep,name=delete_column_uuids,json=deleteColumnUuids" json:"delete_column_uuids,omitempty"`
	SetSeriesDirection *bool                `protobuf:"varint,16,opt,name=set_series_direction,json=setSeriesDirection" json:"set_series_direction,omitempty"`
	NewSeriesDirection *uint32              `protobuf:"varint,17,opt,name=new_series_direction,json=newSeriesDirection" json:"new_series_direction,omitempty"`
}

func (x *CommandReplaceGridValuesArchive) Reset() {
	*x = CommandReplaceGridValuesArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHCommandArchives_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandReplaceGridValuesArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandReplaceGridValuesArchive) ProtoMessage() {}

func (x *CommandReplaceGridValuesArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHCommandArchives_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandReplaceGridValuesArchive.ProtoReflect.Descriptor instead.
func (*CommandReplaceGridValuesArchive) Descriptor() ([]byte, []int) {
	return file_TSCHCommandArchives_proto_rawDescGZIP(), []int{28}
}

func (x *CommandReplaceGridValuesArchive) GetSuper() *ChartCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandReplaceGridValuesArchive) GetOldDataRows() []*GridRow {
	if x != nil {
		return x.OldDataRows
	}
	return nil
}

func (x *CommandReplaceGridValuesArchive) GetNewDataRows() []*GridRow {
	if x != nil {
		return x.NewDataRows
	}
	return nil
}

func (x *CommandReplaceGridValuesArchive) GetOldRowNames() []string {
	if x != nil {
		return x.OldRowNames
	}
	return nil
}

func (x *CommandReplaceGridValuesArchive) GetNewRowNames() []string {
	if x != nil {
		return x.NewRowNames
	}
	return nil
}

func (x *CommandReplaceGridValuesArchive) GetOldColNames() []string {
	if x != nil {
		return x.OldColNames
	}
	return nil
}

func (x *CommandReplaceGridValuesArchive) GetNewColNames() []string {
	if x != nil {
		return x.NewColNames
	}
	return nil
}

func (x *CommandReplaceGridValuesArchive) GetUpdateRowUuids() []*UUID {
	if x != nil {
		return x.UpdateRowUuids
	}
	return nil
}

func (x *CommandReplaceGridValuesArchive) GetUpdateColumnUuids() []*UUID {
	if x != nil {
		return x.UpdateColumnUuids
	}
	return nil
}

func (x *CommandReplaceGridValuesArchive) GetAddRowUuids() []*UUID {
	if x != nil {
		return x.AddRowUuids
	}
	return nil
}

func (x *CommandReplaceGridValuesArchive) GetAddColumnUuids() []*UUID {
	if x != nil {
		return x.AddColumnUuids
	}
	return nil
}

func (x *CommandReplaceGridValuesArchive) GetDeleteRowUuids() []*UUID {
	if x != nil {
		return x.DeleteRowUuids
	}
	return nil
}

func (x *CommandReplaceGridValuesArchive) GetDeleteColumnUuids() []*UUID {
	if x != nil {
		return x.DeleteColumnUuids
	}
	return nil
}

func (x *CommandReplaceGridValuesArchive) GetSetSeriesDirection() bool {
	if x != nil && x.SetSeriesDirection != nil {
		return *x.SetSeriesDirection
	}
	return false
}

func (x *CommandReplaceGridValuesArchive) GetNewSeriesDirection() uint32 {
	if x != nil && x.NewSeriesDirection != nil {
		return *x.NewSeriesDirection
	}
	return 0
}

type CommandReplaceThemePresetArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super          *CommandArchive                                            `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Theme          *Reference                                                 `protobuf:"bytes,2,req,name=theme" json:"theme,omitempty"`
	OldPreset      *Reference                                                 `protobuf:"bytes,3,opt,name=old_preset,json=oldPreset" json:"old_preset,omitempty"`
	NewPreset      *Reference                                                 `protobuf:"bytes,4,opt,name=new_preset,json=newPreset" json:"new_preset,omitempty"`
	Identifiers    []*CommandReplaceThemePresetArchive_StyleAndIdentifierPair `protobuf:"bytes,5,rep,name=identifiers" json:"identifiers,omitempty"`
	OldPresetIndex *uint64                                                    `protobuf:"varint,6,opt,name=old_preset_index,json=oldPresetIndex" json:"old_preset_index,omitempty"`
}

func (x *CommandReplaceThemePresetArchive) Reset() {
	*x = CommandReplaceThemePresetArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHCommandArchives_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandReplaceThemePresetArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandReplaceThemePresetArchive) ProtoMessage() {}

func (x *CommandReplaceThemePresetArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHCommandArchives_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandReplaceThemePresetArchive.ProtoReflect.Descriptor instead.
func (*CommandReplaceThemePresetArchive) Descriptor() ([]byte, []int) {
	return file_TSCHCommandArchives_proto_rawDescGZIP(), []int{29}
}

func (x *CommandReplaceThemePresetArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandReplaceThemePresetArchive) GetTheme() *Reference {
	if x != nil {
		return x.Theme
	}
	return nil
}

func (x *CommandReplaceThemePresetArchive) GetOldPreset() *Reference {
	if x != nil {
		return x.OldPreset
	}
	return nil
}

func (x *CommandReplaceThemePresetArchive) GetNewPreset() *Reference {
	if x != nil {
		return x.NewPreset
	}
	return nil
}

func (x *CommandReplaceThemePresetArchive) GetIdentifiers() []*CommandReplaceThemePresetArchive_StyleAndIdentifierPair {
	if x != nil {
		return x.Identifiers
	}
	return nil
}

func (x *CommandReplaceThemePresetArchive) GetOldPresetIndex() uint64 {
	if x != nil && x.OldPresetIndex != nil {
		return *x.OldPresetIndex
	}
	return 0
}

type CommandInvalidateWPCaches struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *CommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
}

func (x *CommandInvalidateWPCaches) Reset() {
	*x = CommandInvalidateWPCaches{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHCommandArchives_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandInvalidateWPCaches) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandInvalidateWPCaches) ProtoMessage() {}

func (x *CommandInvalidateWPCaches) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHCommandArchives_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandInvalidateWPCaches.ProtoReflect.Descriptor instead.
func (*CommandInvalidateWPCaches) Descriptor() ([]byte, []int) {
	return file_TSCHCommandArchives_proto_rawDescGZIP(), []int{30}
}

func (x *CommandInvalidateWPCaches) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

type CommandReplaceCustomFormatArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super            *ChartCommandArchive                                      `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	RollbackCmd      *Reference                                                `protobuf:"bytes,2,opt,name=rollback_cmd,json=rollbackCmd" json:"rollback_cmd,omitempty"`
	OldFormatObject  *TSKFormatStructArchive                                   `protobuf:"bytes,3,opt,name=old_format_object,json=oldFormatObject" json:"old_format_object,omitempty"`
	NewFormatObject  *TSKFormatStructArchive                                   `protobuf:"bytes,4,opt,name=new_format_object,json=newFormatObject" json:"new_format_object,omitempty"`
	ForwardMutations []*CommandReplaceCustomFormatArchive_FormatObjectMutation `protobuf:"bytes,5,rep,name=forward_mutations,json=forwardMutations" json:"forward_mutations,omitempty"`
	ReverseMutations []*CommandReplaceCustomFormatArchive_FormatObjectMutation `protobuf:"bytes,6,rep,name=reverse_mutations,json=reverseMutations" json:"reverse_mutations,omitempty"`
}

func (x *CommandReplaceCustomFormatArchive) Reset() {
	*x = CommandReplaceCustomFormatArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHCommandArchives_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandReplaceCustomFormatArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandReplaceCustomFormatArchive) ProtoMessage() {}

func (x *CommandReplaceCustomFormatArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHCommandArchives_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandReplaceCustomFormatArchive.ProtoReflect.Descriptor instead.
func (*CommandReplaceCustomFormatArchive) Descriptor() ([]byte, []int) {
	return file_TSCHCommandArchives_proto_rawDescGZIP(), []int{31}
}

func (x *CommandReplaceCustomFormatArchive) GetSuper() *ChartCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandReplaceCustomFormatArchive) GetRollbackCmd() *Reference {
	if x != nil {
		return x.RollbackCmd
	}
	return nil
}

func (x *CommandReplaceCustomFormatArchive) GetOldFormatObject() *TSKFormatStructArchive {
	if x != nil {
		return x.OldFormatObject
	}
	return nil
}

func (x *CommandReplaceCustomFormatArchive) GetNewFormatObject() *TSKFormatStructArchive {
	if x != nil {
		return x.NewFormatObject
	}
	return nil
}

func (x *CommandReplaceCustomFormatArchive) GetForwardMutations() []*CommandReplaceCustomFormatArchive_FormatObjectMutation {
	if x != nil {
		return x.ForwardMutations
	}
	return nil
}

func (x *CommandReplaceCustomFormatArchive) GetReverseMutations() []*CommandReplaceCustomFormatArchive_FormatObjectMutation {
	if x != nil {
		return x.ReverseMutations
	}
	return nil
}

type CommandAddReferenceLineArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super            *ChartCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	AxisId           *ChartAxisIDArchive  `protobuf:"bytes,2,req,name=axis_id,json=axisId" json:"axis_id,omitempty"`
	Uuid             *UUID                `protobuf:"bytes,3,opt,name=uuid" json:"uuid,omitempty"`
	NonStyle         *Reference           `protobuf:"bytes,4,req,name=non_style,json=nonStyle" json:"non_style,omitempty"`
	Style            *Reference           `protobuf:"bytes,5,opt,name=style" json:"style,omitempty"`
	ParagraphStyles  []*Reference         `protobuf:"bytes,6,rep,name=paragraph_styles,json=paragraphStyles" json:"paragraph_styles,omitempty"`
	RollbackCommands []*Reference         `protobuf:"bytes,7,rep,name=rollback_commands,json=rollbackCommands" json:"rollback_commands,omitempty"`
}

func (x *CommandAddReferenceLineArchive) Reset() {
	*x = CommandAddReferenceLineArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHCommandArchives_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandAddReferenceLineArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandAddReferenceLineArchive) ProtoMessage() {}

func (x *CommandAddReferenceLineArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHCommandArchives_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandAddReferenceLineArchive.ProtoReflect.Descriptor instead.
func (*CommandAddReferenceLineArchive) Descriptor() ([]byte, []int) {
	return file_TSCHCommandArchives_proto_rawDescGZIP(), []int{32}
}

func (x *CommandAddReferenceLineArchive) GetSuper() *ChartCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandAddReferenceLineArchive) GetAxisId() *ChartAxisIDArchive {
	if x != nil {
		return x.AxisId
	}
	return nil
}

func (x *CommandAddReferenceLineArchive) GetUuid() *UUID {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *CommandAddReferenceLineArchive) GetNonStyle() *Reference {
	if x != nil {
		return x.NonStyle
	}
	return nil
}

func (x *CommandAddReferenceLineArchive) GetStyle() *Reference {
	if x != nil {
		return x.Style
	}
	return nil
}

func (x *CommandAddReferenceLineArchive) GetParagraphStyles() []*Reference {
	if x != nil {
		return x.ParagraphStyles
	}
	return nil
}

func (x *CommandAddReferenceLineArchive) GetRollbackCommands() []*Reference {
	if x != nil {
		return x.RollbackCommands
	}
	return nil
}

type CommandDeleteReferenceLineArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super            *ChartCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	AxisId           *ChartAxisIDArchive  `protobuf:"bytes,2,req,name=axis_id,json=axisId" json:"axis_id,omitempty"`
	Uuid             *UUID                `protobuf:"bytes,3,req,name=uuid" json:"uuid,omitempty"`
	NonStyle         *Reference           `protobuf:"bytes,4,opt,name=non_style,json=nonStyle" json:"non_style,omitempty"`
	Style            *Reference           `protobuf:"bytes,5,opt,name=style" json:"style,omitempty"`
	ParagraphStyles  []*Reference         `protobuf:"bytes,6,rep,name=paragraph_styles,json=paragraphStyles" json:"paragraph_styles,omitempty"`
	StyleSwapCommand *Reference           `protobuf:"bytes,7,opt,name=style_swap_command,json=styleSwapCommand" json:"style_swap_command,omitempty"`
}

func (x *CommandDeleteReferenceLineArchive) Reset() {
	*x = CommandDeleteReferenceLineArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHCommandArchives_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandDeleteReferenceLineArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandDeleteReferenceLineArchive) ProtoMessage() {}

func (x *CommandDeleteReferenceLineArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHCommandArchives_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandDeleteReferenceLineArchive.ProtoReflect.Descriptor instead.
func (*CommandDeleteReferenceLineArchive) Descriptor() ([]byte, []int) {
	return file_TSCHCommandArchives_proto_rawDescGZIP(), []int{33}
}

func (x *CommandDeleteReferenceLineArchive) GetSuper() *ChartCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandDeleteReferenceLineArchive) GetAxisId() *ChartAxisIDArchive {
	if x != nil {
		return x.AxisId
	}
	return nil
}

func (x *CommandDeleteReferenceLineArchive) GetUuid() *UUID {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *CommandDeleteReferenceLineArchive) GetNonStyle() *Reference {
	if x != nil {
		return x.NonStyle
	}
	return nil
}

func (x *CommandDeleteReferenceLineArchive) GetStyle() *Reference {
	if x != nil {
		return x.Style
	}
	return nil
}

func (x *CommandDeleteReferenceLineArchive) GetParagraphStyles() []*Reference {
	if x != nil {
		return x.ParagraphStyles
	}
	return nil
}

func (x *CommandDeleteReferenceLineArchive) GetStyleSwapCommand() *Reference {
	if x != nil {
		return x.StyleSwapCommand
	}
	return nil
}

type CommandPasteStyleArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                  *ChartCommandArchive                  `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	StyleSwapCommand       *Reference                            `protobuf:"bytes,2,opt,name=style_swap_command,json=styleSwapCommand" json:"style_swap_command,omitempty"`
	InverseChartStyleState *PropertyValueStorageContainerArchive `protobuf:"bytes,3,opt,name=inverse_chart_style_state,json=inverseChartStyleState" json:"inverse_chart_style_state,omitempty"`
	ChartStyleState        *PropertyValueStorageContainerArchive `protobuf:"bytes,4,opt,name=chart_style_state,json=chartStyleState" json:"chart_style_state,omitempty"`
	ShapeStyle             *Reference                            `protobuf:"bytes,5,opt,name=shape_style,json=shapeStyle" json:"shape_style,omitempty"`
	Subselection           []*ChartSelectionPathArchive          `protobuf:"bytes,6,rep,name=subselection" json:"subselection,omitempty"`
}

func (x *CommandPasteStyleArchive) Reset() {
	*x = CommandPasteStyleArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHCommandArchives_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandPasteStyleArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandPasteStyleArchive) ProtoMessage() {}

func (x *CommandPasteStyleArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHCommandArchives_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandPasteStyleArchive.ProtoReflect.Descriptor instead.
func (*CommandPasteStyleArchive) Descriptor() ([]byte, []int) {
	return file_TSCHCommandArchives_proto_rawDescGZIP(), []int{34}
}

func (x *CommandPasteStyleArchive) GetSuper() *ChartCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandPasteStyleArchive) GetStyleSwapCommand() *Reference {
	if x != nil {
		return x.StyleSwapCommand
	}
	return nil
}

func (x *CommandPasteStyleArchive) GetInverseChartStyleState() *PropertyValueStorageContainerArchive {
	if x != nil {
		return x.InverseChartStyleState
	}
	return nil
}

func (x *CommandPasteStyleArchive) GetChartStyleState() *PropertyValueStorageContainerArchive {
	if x != nil {
		return x.ChartStyleState
	}
	return nil
}

func (x *CommandPasteStyleArchive) GetShapeStyle() *Reference {
	if x != nil {
		return x.ShapeStyle
	}
	return nil
}

func (x *CommandPasteStyleArchive) GetSubselection() []*ChartSelectionPathArchive {
	if x != nil {
		return x.Subselection
	}
	return nil
}

type CommandReplaceImageDataArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                  *ChartCommandArchive                  `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	StyleSwapCommand       *Reference                            `protobuf:"bytes,2,opt,name=style_swap_command,json=styleSwapCommand" json:"style_swap_command,omitempty"`
	InverseChartStyleState *PropertyValueStorageContainerArchive `protobuf:"bytes,3,opt,name=inverse_chart_style_state,json=inverseChartStyleState" json:"inverse_chart_style_state,omitempty"`
	ChartStyleState        *PropertyValueStorageContainerArchive `protobuf:"bytes,4,opt,name=chart_style_state,json=chartStyleState" json:"chart_style_state,omitempty"`
}

func (x *CommandReplaceImageDataArchive) Reset() {
	*x = CommandReplaceImageDataArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHCommandArchives_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandReplaceImageDataArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandReplaceImageDataArchive) ProtoMessage() {}

func (x *CommandReplaceImageDataArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHCommandArchives_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandReplaceImageDataArchive.ProtoReflect.Descriptor instead.
func (*CommandReplaceImageDataArchive) Descriptor() ([]byte, []int) {
	return file_TSCHCommandArchives_proto_rawDescGZIP(), []int{35}
}

func (x *CommandReplaceImageDataArchive) GetSuper() *ChartCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandReplaceImageDataArchive) GetStyleSwapCommand() *Reference {
	if x != nil {
		return x.StyleSwapCommand
	}
	return nil
}

func (x *CommandReplaceImageDataArchive) GetInverseChartStyleState() *PropertyValueStorageContainerArchive {
	if x != nil {
		return x.InverseChartStyleState
	}
	return nil
}

func (x *CommandReplaceImageDataArchive) GetChartStyleState() *PropertyValueStorageContainerArchive {
	if x != nil {
		return x.ChartStyleState
	}
	return nil
}

type CommandInducedReplaceChartGrid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *CommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
}

func (x *CommandInducedReplaceChartGrid) Reset() {
	*x = CommandInducedReplaceChartGrid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHCommandArchives_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandInducedReplaceChartGrid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandInducedReplaceChartGrid) ProtoMessage() {}

func (x *CommandInducedReplaceChartGrid) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHCommandArchives_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandInducedReplaceChartGrid.ProtoReflect.Descriptor instead.
func (*CommandInducedReplaceChartGrid) Descriptor() ([]byte, []int) {
	return file_TSCHCommandArchives_proto_rawDescGZIP(), []int{36}
}

func (x *CommandInducedReplaceChartGrid) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

type CommandInduced3DChartGeometry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *CommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
}

func (x *CommandInduced3DChartGeometry) Reset() {
	*x = CommandInduced3DChartGeometry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHCommandArchives_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandInduced3DChartGeometry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandInduced3DChartGeometry) ProtoMessage() {}

func (x *CommandInduced3DChartGeometry) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHCommandArchives_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandInduced3DChartGeometry.ProtoReflect.Descriptor instead.
func (*CommandInduced3DChartGeometry) Descriptor() ([]byte, []int) {
	return file_TSCHCommandArchives_proto_rawDescGZIP(), []int{37}
}

func (x *CommandInduced3DChartGeometry) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

type ChartTextSelectionTransformerArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Selection *Reference `protobuf:"bytes,1,opt,name=selection" json:"selection,omitempty"`
}

func (x *ChartTextSelectionTransformerArchive) Reset() {
	*x = ChartTextSelectionTransformerArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHCommandArchives_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartTextSelectionTransformerArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartTextSelectionTransformerArchive) ProtoMessage() {}

func (x *ChartTextSelectionTransformerArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHCommandArchives_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartTextSelectionTransformerArchive.ProtoReflect.Descriptor instead.
func (*ChartTextSelectionTransformerArchive) Descriptor() ([]byte, []int) {
	return file_TSCHCommandArchives_proto_rawDescGZIP(), []int{38}
}

func (x *ChartTextSelectionTransformerArchive) GetSelection() *Reference {
	if x != nil {
		return x.Selection
	}
	return nil
}

type ChartDrawableSelectionTransformerArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *DrawableSelectionTransformerArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
}

func (x *ChartDrawableSelectionTransformerArchive) Reset() {
	*x = ChartDrawableSelectionTransformerArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHCommandArchives_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartDrawableSelectionTransformerArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartDrawableSelectionTransformerArchive) ProtoMessage() {}

func (x *ChartDrawableSelectionTransformerArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHCommandArchives_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartDrawableSelectionTransformerArchive.ProtoReflect.Descriptor instead.
func (*ChartDrawableSelectionTransformerArchive) Descriptor() ([]byte, []int) {
	return file_TSCHCommandArchives_proto_rawDescGZIP(), []int{39}
}

func (x *ChartDrawableSelectionTransformerArchive) GetSuper() *DrawableSelectionTransformerArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

type ChartSubselectionTransformerHelperArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Selection *Reference `protobuf:"bytes,1,opt,name=selection" json:"selection,omitempty"`
}

func (x *ChartSubselectionTransformerHelperArchive) Reset() {
	*x = ChartSubselectionTransformerHelperArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHCommandArchives_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartSubselectionTransformerHelperArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartSubselectionTransformerHelperArchive) ProtoMessage() {}

func (x *ChartSubselectionTransformerHelperArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHCommandArchives_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartSubselectionTransformerHelperArchive.ProtoReflect.Descriptor instead.
func (*ChartSubselectionTransformerHelperArchive) Descriptor() ([]byte, []int) {
	return file_TSCHCommandArchives_proto_rawDescGZIP(), []int{40}
}

func (x *ChartSubselectionTransformerHelperArchive) GetSelection() *Reference {
	if x != nil {
		return x.Selection
	}
	return nil
}

type ChartRefLineSubselectionTransformerHelperArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                      *ChartSubselectionTransformerHelperArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	SelectedReferenceLineUuids []*UUID                                    `protobuf:"bytes,2,rep,name=selected_reference_line_uuids,json=selectedReferenceLineUuids" json:"selected_reference_line_uuids,omitempty"`
}

func (x *ChartRefLineSubselectionTransformerHelperArchive) Reset() {
	*x = ChartRefLineSubselectionTransformerHelperArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHCommandArchives_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartRefLineSubselectionTransformerHelperArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartRefLineSubselectionTransformerHelperArchive) ProtoMessage() {}

func (x *ChartRefLineSubselectionTransformerHelperArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHCommandArchives_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartRefLineSubselectionTransformerHelperArchive.ProtoReflect.Descriptor instead.
func (*ChartRefLineSubselectionTransformerHelperArchive) Descriptor() ([]byte, []int) {
	return file_TSCHCommandArchives_proto_rawDescGZIP(), []int{41}
}

func (x *ChartRefLineSubselectionTransformerHelperArchive) GetSuper() *ChartSubselectionTransformerHelperArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *ChartRefLineSubselectionTransformerHelperArchive) GetSelectedReferenceLineUuids() []*UUID {
	if x != nil {
		return x.SelectedReferenceLineUuids
	}
	return nil
}

type ChartSubselectionIdentityTransformerHelperArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *ChartSubselectionTransformerHelperArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
}

func (x *ChartSubselectionIdentityTransformerHelperArchive) Reset() {
	*x = ChartSubselectionIdentityTransformerHelperArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHCommandArchives_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartSubselectionIdentityTransformerHelperArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartSubselectionIdentityTransformerHelperArchive) ProtoMessage() {}

func (x *ChartSubselectionIdentityTransformerHelperArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHCommandArchives_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartSubselectionIdentityTransformerHelperArchive.ProtoReflect.Descriptor instead.
func (*ChartSubselectionIdentityTransformerHelperArchive) Descriptor() ([]byte, []int) {
	return file_TSCHCommandArchives_proto_rawDescGZIP(), []int{42}
}

func (x *ChartSubselectionIdentityTransformerHelperArchive) GetSuper() *ChartSubselectionTransformerHelperArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

type ChartSubselectionTransformerArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Selection *Reference `protobuf:"bytes,1,opt,name=selection" json:"selection,omitempty"`
	Helper    *Reference `protobuf:"bytes,2,opt,name=helper" json:"helper,omitempty"`
}

func (x *ChartSubselectionTransformerArchive) Reset() {
	*x = ChartSubselectionTransformerArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHCommandArchives_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartSubselectionTransformerArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartSubselectionTransformerArchive) ProtoMessage() {}

func (x *ChartSubselectionTransformerArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHCommandArchives_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartSubselectionTransformerArchive.ProtoReflect.Descriptor instead.
func (*ChartSubselectionTransformerArchive) Descriptor() ([]byte, []int) {
	return file_TSCHCommandArchives_proto_rawDescGZIP(), []int{43}
}

func (x *ChartSubselectionTransformerArchive) GetSelection() *Reference {
	if x != nil {
		return x.Selection
	}
	return nil
}

func (x *ChartSubselectionTransformerArchive) GetHelper() *Reference {
	if x != nil {
		return x.Helper
	}
	return nil
}

type CDESelectionTransformerArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CdeSelection *Reference `protobuf:"bytes,1,opt,name=cde_selection,json=cdeSelection" json:"cde_selection,omitempty"`
}

func (x *CDESelectionTransformerArchive) Reset() {
	*x = CDESelectionTransformerArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHCommandArchives_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDESelectionTransformerArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDESelectionTransformerArchive) ProtoMessage() {}

func (x *CDESelectionTransformerArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHCommandArchives_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDESelectionTransformerArchive.ProtoReflect.Descriptor instead.
func (*CDESelectionTransformerArchive) Descriptor() ([]byte, []int) {
	return file_TSCHCommandArchives_proto_rawDescGZIP(), []int{44}
}

func (x *CDESelectionTransformerArchive) GetCdeSelection() *Reference {
	if x != nil {
		return x.CdeSelection
	}
	return nil
}

type CommandMutatePropertiesArchive_GenericPropertyDeltaMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StyleOwnerPath *StyleOwnerPath                                                         `protobuf:"bytes,1,opt,name=style_owner_path,json=styleOwnerPath" json:"style_owner_path,omitempty"`
	ForwardMap     *CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion `protobuf:"bytes,2,opt,name=forward_map,json=forwardMap" json:"forward_map,omitempty"`
	ReverseMap     *CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion `protobuf:"bytes,3,opt,name=reverse_map,json=reverseMap" json:"reverse_map,omitempty"`
}

func (x *CommandMutatePropertiesArchive_GenericPropertyDeltaMap) Reset() {
	*x = CommandMutatePropertiesArchive_GenericPropertyDeltaMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHCommandArchives_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandMutatePropertiesArchive_GenericPropertyDeltaMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandMutatePropertiesArchive_GenericPropertyDeltaMap) ProtoMessage() {}

func (x *CommandMutatePropertiesArchive_GenericPropertyDeltaMap) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHCommandArchives_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandMutatePropertiesArchive_GenericPropertyDeltaMap.ProtoReflect.Descriptor instead.
func (*CommandMutatePropertiesArchive_GenericPropertyDeltaMap) Descriptor() ([]byte, []int) {
	return file_TSCHCommandArchives_proto_rawDescGZIP(), []int{5, 0}
}

func (x *CommandMutatePropertiesArchive_GenericPropertyDeltaMap) GetStyleOwnerPath() *StyleOwnerPath {
	if x != nil {
		return x.StyleOwnerPath
	}
	return nil
}

func (x *CommandMutatePropertiesArchive_GenericPropertyDeltaMap) GetForwardMap() *CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion {
	if x != nil {
		return x.ForwardMap
	}
	return nil
}

func (x *CommandMutatePropertiesArchive_GenericPropertyDeltaMap) GetReverseMap() *CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion {
	if x != nil {
		return x.ReverseMap
	}
	return nil
}

type CommandMutatePropertiesArchive_ParagraphStyleDeltaMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StyleOwnerPath              *StyleOwnerPath                                                                         `protobuf:"bytes,1,opt,name=style_owner_path,json=styleOwnerPath" json:"style_owner_path,omitempty"`
	ParagraphStyleIndexProperty *uint32                                                                                 `protobuf:"varint,2,opt,name=paragraph_style_index_property,json=paragraphStyleIndexProperty" json:"paragraph_style_index_property,omitempty"`
	ForwardMap                  *CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive `protobuf:"bytes,3,opt,name=forward_map,json=forwardMap" json:"forward_map,omitempty"`
	ReverseMap                  *CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive `protobuf:"bytes,4,opt,name=reverse_map,json=reverseMap" json:"reverse_map,omitempty"`
}

func (x *CommandMutatePropertiesArchive_ParagraphStyleDeltaMap) Reset() {
	*x = CommandMutatePropertiesArchive_ParagraphStyleDeltaMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHCommandArchives_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandMutatePropertiesArchive_ParagraphStyleDeltaMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandMutatePropertiesArchive_ParagraphStyleDeltaMap) ProtoMessage() {}

func (x *CommandMutatePropertiesArchive_ParagraphStyleDeltaMap) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHCommandArchives_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandMutatePropertiesArchive_ParagraphStyleDeltaMap.ProtoReflect.Descriptor instead.
func (*CommandMutatePropertiesArchive_ParagraphStyleDeltaMap) Descriptor() ([]byte, []int) {
	return file_TSCHCommandArchives_proto_rawDescGZIP(), []int{5, 1}
}

func (x *CommandMutatePropertiesArchive_ParagraphStyleDeltaMap) GetStyleOwnerPath() *StyleOwnerPath {
	if x != nil {
		return x.StyleOwnerPath
	}
	return nil
}

func (x *CommandMutatePropertiesArchive_ParagraphStyleDeltaMap) GetParagraphStyleIndexProperty() uint32 {
	if x != nil && x.ParagraphStyleIndexProperty != nil {
		return *x.ParagraphStyleIndexProperty
	}
	return 0
}

func (x *CommandMutatePropertiesArchive_ParagraphStyleDeltaMap) GetForwardMap() *CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive {
	if x != nil {
		return x.ForwardMap
	}
	return nil
}

func (x *CommandMutatePropertiesArchive_ParagraphStyleDeltaMap) GetReverseMap() *CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive {
	if x != nil {
		return x.ReverseMap
	}
	return nil
}

type CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChartMap         *ChartGenericPropertyMapArchive         `protobuf:"bytes,2,opt,name=chart_map,json=chartMap" json:"chart_map,omitempty"`
	LegendMap        *LegendGenericPropertyMapArchive        `protobuf:"bytes,3,opt,name=legend_map,json=legendMap" json:"legend_map,omitempty"`
	AxisMap          *ChartAxisGenericPropertyMapArchive     `protobuf:"bytes,4,opt,name=axis_map,json=axisMap" json:"axis_map,omitempty"`
	SeriesMap        *ChartSeriesGenericPropertyMapArchive   `protobuf:"bytes,5,opt,name=series_map,json=seriesMap" json:"series_map,omitempty"`
	ReferenceLineMap *ReferenceLineGenericPropertyMapArchive `protobuf:"bytes,6,opt,name=reference_line_map,json=referenceLineMap" json:"reference_line_map,omitempty"`
}

func (x *CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion) Reset() {
	*x = CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHCommandArchives_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion) ProtoMessage() {}

func (x *CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHCommandArchives_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion.ProtoReflect.Descriptor instead.
func (*CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion) Descriptor() ([]byte, []int) {
	return file_TSCHCommandArchives_proto_rawDescGZIP(), []int{5, 0, 0}
}

func (x *CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion) GetChartMap() *ChartGenericPropertyMapArchive {
	if x != nil {
		return x.ChartMap
	}
	return nil
}

func (x *CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion) GetLegendMap() *LegendGenericPropertyMapArchive {
	if x != nil {
		return x.LegendMap
	}
	return nil
}

func (x *CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion) GetAxisMap() *ChartAxisGenericPropertyMapArchive {
	if x != nil {
		return x.AxisMap
	}
	return nil
}

func (x *CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion) GetSeriesMap() *ChartSeriesGenericPropertyMapArchive {
	if x != nil {
		return x.SeriesMap
	}
	return nil
}

func (x *CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion) GetReferenceLineMap() *ReferenceLineGenericPropertyMapArchive {
	if x != nil {
		return x.ReferenceLineMap
	}
	return nil
}

type CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharProperties *CharacterStylePropertiesArchive `protobuf:"bytes,1,opt,name=char_properties,json=charProperties" json:"char_properties,omitempty"`
	ParaProperties *ParagraphStylePropertiesArchive `protobuf:"bytes,2,opt,name=para_properties,json=paraProperties" json:"para_properties,omitempty"`
}

func (x *CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive) Reset() {
	*x = CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHCommandArchives_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive) ProtoMessage() {
}

func (x *CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHCommandArchives_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive.ProtoReflect.Descriptor instead.
func (*CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive) Descriptor() ([]byte, []int) {
	return file_TSCHCommandArchives_proto_rawDescGZIP(), []int{5, 1, 0}
}

func (x *CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive) GetCharProperties() *CharacterStylePropertiesArchive {
	if x != nil {
		return x.CharProperties
	}
	return nil
}

func (x *CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive) GetParaProperties() *ParagraphStylePropertiesArchive {
	if x != nil {
		return x.ParaProperties
	}
	return nil
}

type CommandSetFontFamilyArchive_StyleSemanticTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwapType *StyleSwapType `protobuf:"varint,1,opt,name=swap_type,json=swapType,enum=TSCH.StyleSwapType" json:"swap_type,omitempty"`
	Index    *uint32        `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
}

func (x *CommandSetFontFamilyArchive_StyleSemanticTag) Reset() {
	*x = CommandSetFontFamilyArchive_StyleSemanticTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHCommandArchives_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSetFontFamilyArchive_StyleSemanticTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSetFontFamilyArchive_StyleSemanticTag) ProtoMessage() {}

func (x *CommandSetFontFamilyArchive_StyleSemanticTag) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHCommandArchives_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSetFontFamilyArchive_StyleSemanticTag.ProtoReflect.Descriptor instead.
func (*CommandSetFontFamilyArchive_StyleSemanticTag) Descriptor() ([]byte, []int) {
	return file_TSCHCommandArchives_proto_rawDescGZIP(), []int{7, 0}
}

func (x *CommandSetFontFamilyArchive_StyleSemanticTag) GetSwapType() StyleSwapType {
	if x != nil && x.SwapType != nil {
		return *x.SwapType
	}
	return StyleSwapType_chart_style
}

func (x *CommandSetFontFamilyArchive_StyleSemanticTag) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

type CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StyleSemanticTag            *CommandSetFontFamilyArchive_StyleSemanticTag                                                   `protobuf:"bytes,1,opt,name=style_semantic_tag,json=styleSemanticTag" json:"style_semantic_tag,omitempty"`
	ParagraphStyleIndexProperty *uint32                                                                                         `protobuf:"varint,2,opt,name=paragraph_style_index_property,json=paragraphStyleIndexProperty" json:"paragraph_style_index_property,omitempty"`
	ForwardMap                  *CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive `protobuf:"bytes,3,opt,name=forward_map,json=forwardMap" json:"forward_map,omitempty"`
	ReverseMap                  *CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive `protobuf:"bytes,4,opt,name=reverse_map,json=reverseMap" json:"reverse_map,omitempty"`
}

func (x *CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap) Reset() {
	*x = CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHCommandArchives_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap) ProtoMessage() {}

func (x *CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHCommandArchives_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap.ProtoReflect.Descriptor instead.
func (*CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap) Descriptor() ([]byte, []int) {
	return file_TSCHCommandArchives_proto_rawDescGZIP(), []int{7, 1}
}

func (x *CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap) GetStyleSemanticTag() *CommandSetFontFamilyArchive_StyleSemanticTag {
	if x != nil {
		return x.StyleSemanticTag
	}
	return nil
}

func (x *CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap) GetParagraphStyleIndexProperty() uint32 {
	if x != nil && x.ParagraphStyleIndexProperty != nil {
		return *x.ParagraphStyleIndexProperty
	}
	return 0
}

func (x *CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap) GetForwardMap() *CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive {
	if x != nil {
		return x.ForwardMap
	}
	return nil
}

func (x *CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap) GetReverseMap() *CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive {
	if x != nil {
		return x.ReverseMap
	}
	return nil
}

type CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharProperties *CharacterStylePropertiesArchive `protobuf:"bytes,1,opt,name=char_properties,json=charProperties" json:"char_properties,omitempty"`
	ParaProperties *ParagraphStylePropertiesArchive `protobuf:"bytes,2,opt,name=para_properties,json=paraProperties" json:"para_properties,omitempty"`
}

func (x *CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive) Reset() {
	*x = CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHCommandArchives_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive) ProtoMessage() {
}

func (x *CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHCommandArchives_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive.ProtoReflect.Descriptor instead.
func (*CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive) Descriptor() ([]byte, []int) {
	return file_TSCHCommandArchives_proto_rawDescGZIP(), []int{7, 1, 0}
}

func (x *CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive) GetCharProperties() *CharacterStylePropertiesArchive {
	if x != nil {
		return x.CharProperties
	}
	return nil
}

func (x *CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive) GetParaProperties() *ParagraphStylePropertiesArchive {
	if x != nil {
		return x.ParaProperties
	}
	return nil
}

type CommandReplaceThemePresetArchive_StyleAndIdentifierPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Style      *Reference `protobuf:"bytes,1,req,name=style" json:"style,omitempty"`
	Identifier *string    `protobuf:"bytes,2,req,name=identifier" json:"identifier,omitempty"`
}

func (x *CommandReplaceThemePresetArchive_StyleAndIdentifierPair) Reset() {
	*x = CommandReplaceThemePresetArchive_StyleAndIdentifierPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHCommandArchives_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandReplaceThemePresetArchive_StyleAndIdentifierPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandReplaceThemePresetArchive_StyleAndIdentifierPair) ProtoMessage() {}

func (x *CommandReplaceThemePresetArchive_StyleAndIdentifierPair) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHCommandArchives_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandReplaceThemePresetArchive_StyleAndIdentifierPair.ProtoReflect.Descriptor instead.
func (*CommandReplaceThemePresetArchive_StyleAndIdentifierPair) Descriptor() ([]byte, []int) {
	return file_TSCHCommandArchives_proto_rawDescGZIP(), []int{29, 0}
}

func (x *CommandReplaceThemePresetArchive_StyleAndIdentifierPair) GetStyle() *Reference {
	if x != nil {
		return x.Style
	}
	return nil
}

func (x *CommandReplaceThemePresetArchive_StyleAndIdentifierPair) GetIdentifier() string {
	if x != nil && x.Identifier != nil {
		return *x.Identifier
	}
	return ""
}

type CommandReplaceCustomFormatArchive_FormatObjectMutation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StyleOwnerType       *StyleOwnerType         `protobuf:"varint,1,opt,name=style_owner_type,json=styleOwnerType,enum=TSCH.StyleOwnerType" json:"style_owner_type,omitempty"`
	StyleOwnerIndex      *uint32                 `protobuf:"varint,2,opt,name=style_owner_index,json=styleOwnerIndex" json:"style_owner_index,omitempty"`
	FormatObjectProperty *uint32                 `protobuf:"varint,3,opt,name=format_object_property,json=formatObjectProperty" json:"format_object_property,omitempty"`
	FormatObject         *TSKFormatStructArchive `protobuf:"bytes,4,opt,name=format_object,json=formatObject" json:"format_object,omitempty"`
}

func (x *CommandReplaceCustomFormatArchive_FormatObjectMutation) Reset() {
	*x = CommandReplaceCustomFormatArchive_FormatObjectMutation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHCommandArchives_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandReplaceCustomFormatArchive_FormatObjectMutation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandReplaceCustomFormatArchive_FormatObjectMutation) ProtoMessage() {}

func (x *CommandReplaceCustomFormatArchive_FormatObjectMutation) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHCommandArchives_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandReplaceCustomFormatArchive_FormatObjectMutation.ProtoReflect.Descriptor instead.
func (*CommandReplaceCustomFormatArchive_FormatObjectMutation) Descriptor() ([]byte, []int) {
	return file_TSCHCommandArchives_proto_rawDescGZIP(), []int{31, 0}
}

func (x *CommandReplaceCustomFormatArchive_FormatObjectMutation) GetStyleOwnerType() StyleOwnerType {
	if x != nil && x.StyleOwnerType != nil {
		return *x.StyleOwnerType
	}
	return StyleOwnerType_chart_info
}

func (x *CommandReplaceCustomFormatArchive_FormatObjectMutation) GetStyleOwnerIndex() uint32 {
	if x != nil && x.StyleOwnerIndex != nil {
		return *x.StyleOwnerIndex
	}
	return 0
}

func (x *CommandReplaceCustomFormatArchive_FormatObjectMutation) GetFormatObjectProperty() uint32 {
	if x != nil && x.FormatObjectProperty != nil {
		return *x.FormatObjectProperty
	}
	return 0
}

func (x *CommandReplaceCustomFormatArchive_FormatObjectMutation) GetFormatObject() *TSKFormatStructArchive {
	if x != nil {
		return x.FormatObject
	}
	return nil
}

var File_TSCHCommandArchives_proto protoreflect.FileDescriptor

var file_TSCHCommandArchives_proto_rawDesc = []byte{
	0x0a, 0x19, 0x54, 0x53, 0x43, 0x48, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x54, 0x53, 0x43,
	0x48, 0x1a, 0x19, 0x54, 0x53, 0x43, 0x48, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x5f,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x54, 0x53,
	0x43, 0x48, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x5f, 0x47, 0x45, 0x4e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x54, 0x53, 0x43, 0x48, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x54, 0x53, 0x44, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x11, 0x54, 0x53, 0x4b, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x54, 0x53, 0x50, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x54, 0x53, 0x53, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x54, 0x53, 0x57,
	0x50, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x31, 0x0a, 0x0e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x1f, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x05, 0x75, 0x75, 0x69,
	0x64, 0x73, 0x22, 0xee, 0x04, 0x0a, 0x1a, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x12, 0x35, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x54, 0x53, 0x43,
	0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x6e, 0x65, 0x77,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x0e, 0x6f, 0x6c, 0x64,
	0x5f, 0x63, 0x68, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0c, 0x6f, 0x6c, 0x64, 0x43, 0x68, 0x61, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x3f, 0x0a, 0x13, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11,
	0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x72, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x22, 0x0a, 0x07, 0x72, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x06, 0x72,
	0x6f, 0x77, 0x49, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x55, 0x55, 0x49, 0x44, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x73, 0x12,
	0x29, 0x0a, 0x0b, 0x6f, 0x6c, 0x64, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52,
	0x09, 0x6f, 0x6c, 0x64, 0x52, 0x6f, 0x77, 0x49, 0x64, 0x73, 0x12, 0x2f, 0x0a, 0x0e, 0x6f, 0x6c,
	0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0c, 0x6f,
	0x6c, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x33, 0x0a, 0x10, 0x72,
	0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44,
	0x52, 0x0e, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x6f, 0x77, 0x49, 0x64, 0x73,
	0x12, 0x39, 0x0a, 0x13, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x11, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x75,
	0x73, 0x65, 0x73, 0x5f, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x75, 0x73, 0x65, 0x73, 0x43, 0x61, 0x70,
	0x74, 0x75, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x73, 0x65,
	0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x9b, 0x02, 0x0a, 0x19, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x53, 0x77, 0x61,
	0x70, 0x55, 0x6e, 0x64, 0x6f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x12, 0x2d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x63, 0x68, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x30, 0x0a, 0x09, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x53, 0x77, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x73, 0x77, 0x61, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2b, 0x0a, 0x09, 0x6f, 0x6c, 0x64, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x6f, 0x6c, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2d, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x55, 0x55, 0x49, 0x44, 0x52, 0x0b, 0x72, 0x65, 0x66, 0x4c, 0x69, 0x6e, 0x65, 0x55, 0x75, 0x69,
	0x64, 0x22, 0x5e, 0x0a, 0x1a, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x53, 0x77, 0x61, 0x70, 0x55, 0x6e,
	0x64, 0x6f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12,
	0x40, 0x0a, 0x0b, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x53, 0x77, 0x61, 0x70, 0x55, 0x6e, 0x64, 0x6f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x73, 0x77, 0x61, 0x70, 0x54, 0x75, 0x70, 0x6c, 0x65,
	0x73, 0x22, 0x8c, 0x01, 0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x53, 0x77, 0x61, 0x70, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2f, 0x0a,
	0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54,
	0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x40,
	0x0a, 0x0b, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x53, 0x77, 0x61, 0x70, 0x55, 0x6e, 0x64, 0x6f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x75, 0x6e, 0x64, 0x6f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x73,
	0x22, 0xfb, 0x0d, 0x0a, 0x1e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4d, 0x75, 0x74, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x0c, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x5f, 0x63, 0x6d, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x72, 0x6f, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x43, 0x6d, 0x64, 0x12, 0x7b, 0x0a, 0x1b, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x69, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x64, 0x65, 0x6c, 0x74,
	0x61, 0x5f, 0x6d, 0x61, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x54,
	0x53, 0x43, 0x48, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4d, 0x75, 0x74, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x52, 0x18, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x44, 0x65, 0x6c, 0x74, 0x61,
	0x4d, 0x61, 0x70, 0x73, 0x12, 0x78, 0x0a, 0x1a, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x6d, 0x61,
	0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x50,
	0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x44, 0x65, 0x6c,
	0x74, 0x61, 0x4d, 0x61, 0x70, 0x52, 0x17, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x73, 0x12, 0x26,
	0x0a, 0x0e, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x57, 0x65, 0x62,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65,
	0x64, 0x4f, 0x6e, 0x57, 0x65, 0x62, 0x1a, 0xf2, 0x05, 0x0a, 0x17, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x69, 0x63, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x4d,
	0x61, 0x70, 0x12, 0x3e, 0x0a, 0x10, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x54,
	0x53, 0x43, 0x48, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x50, 0x61,
	0x74, 0x68, 0x52, 0x0e, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x6d, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6d, 0x61,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x44, 0x65, 0x6c,
	0x74, 0x61, 0x4d, 0x61, 0x70, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x4d, 0x61, 0x70,
	0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x61,
	0x70, 0x12, 0x6d, 0x0a, 0x0b, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x44, 0x65, 0x6c, 0x74,
	0x61, 0x4d, 0x61, 0x70, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x4d, 0x61, 0x70, 0x55,
	0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x4d, 0x61, 0x70,
	0x1a, 0xb8, 0x03, 0x0a, 0x0f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x4d, 0x61, 0x70, 0x55,
	0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x72, 0x74, 0x5f, 0x6d, 0x61,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4d, 0x61, 0x70,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x08, 0x63, 0x68, 0x61, 0x72, 0x74, 0x4d, 0x61,
	0x70, 0x12, 0x4e, 0x0a, 0x0a, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x4c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x09, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x4d, 0x61,
	0x70, 0x12, 0x4d, 0x0a, 0x08, 0x61, 0x78, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x41, 0x78, 0x69, 0x73, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4d, 0x61, 0x70,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x07, 0x61, 0x78, 0x69, 0x73, 0x4d, 0x61, 0x70,
	0x12, 0x53, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x53, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x4d, 0x61, 0x70, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x09, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x4d, 0x61, 0x70, 0x12, 0x64, 0x0a, 0x12, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4d,
	0x61, 0x70, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x10, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x1a, 0xe0, 0x04, 0x0a, 0x16,
	0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x44, 0x65,
	0x6c, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x12, 0x3e, 0x0a, 0x10, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0e, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x50, 0x61, 0x74, 0x68, 0x12, 0x43, 0x0a, 0x1e, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b,
	0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x7d, 0x0a, 0x0b, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x5c, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4d,
	0x75, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x2e, 0x50, 0x61,
	0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0a,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x61, 0x70, 0x12, 0x7d, 0x0a, 0x0b, 0x72, 0x65,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x5c, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4d, 0x75,
	0x74, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x2e, 0x50, 0x61, 0x72,
	0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x72,
	0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x4d, 0x61, 0x70, 0x1a, 0xc2, 0x01, 0x0a, 0x20, 0x50, 0x61,
	0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x4e,
	0x0a, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x43,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0e,
	0x63, 0x68, 0x61, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x4e,
	0x0a, 0x0f, 0x70, 0x61, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x50,
	0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0e,
	0x70, 0x61, 0x72, 0x61, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0xa3,
	0x01, 0x0a, 0x1a, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x41,
	0x6c, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2f, 0x0a,
	0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54,
	0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x31,
	0x0a, 0x0c, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6d, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x6d,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x22, 0x88, 0x09, 0x0a, 0x1b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x53, 0x65, 0x74, 0x46, 0x6f, 0x6e, 0x74, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x0c, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x5f, 0x63, 0x6d, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x72, 0x6f, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x6d, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x77, 0x5f,
	0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6e, 0x65, 0x77, 0x46, 0x6f, 0x6e, 0x74, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x6c, 0x64, 0x5f, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x66, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x6c, 0x64, 0x46, 0x6f,
	0x6e, 0x74, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x80, 0x01, 0x0a, 0x1a, 0x70, 0x61, 0x72,
	0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x6c,
	0x74, 0x61, 0x5f, 0x6d, 0x61, 0x70, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e,
	0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x46,
	0x6f, 0x6e, 0x74, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x2e, 0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x61, 0x70, 0x52, 0x17, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x69,
	0x73, 0x5f, 0x62, 0x6f, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x02, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73,
	0x42, 0x6f, 0x6c, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x69, 0x74, 0x61, 0x6c, 0x69,
	0x63, 0x18, 0x07, 0x20, 0x02, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x49, 0x74, 0x61, 0x6c, 0x69,
	0x63, 0x1a, 0x5a, 0x0a, 0x10, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74,
	0x69, 0x63, 0x54, 0x61, 0x67, 0x12, 0x30, 0x0a, 0x09, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x53, 0x77, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x73,
	0x77, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0x9f, 0x05,
	0x0a, 0x21, 0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x61, 0x70, 0x12, 0x60, 0x0a, 0x12, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x6d,
	0x61, 0x6e, 0x74, 0x69, 0x63, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x65,
	0x74, 0x46, 0x6f, 0x6e, 0x74, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63,
	0x54, 0x61, 0x67, 0x52, 0x10, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74,
	0x69, 0x63, 0x54, 0x61, 0x67, 0x12, 0x43, 0x0a, 0x1e, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x70,
	0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x85, 0x01, 0x0a, 0x0b, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x64, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53,
	0x65, 0x74, 0x46, 0x6f, 0x6e, 0x74, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x2e, 0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x50, 0x61, 0x72, 0x61,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x4d,
	0x61, 0x70, 0x12, 0x85, 0x01, 0x0a, 0x0b, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x6d,
	0x61, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x64, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x46, 0x6f, 0x6e, 0x74, 0x46, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x53, 0x65, 0x6d, 0x61,
	0x6e, 0x74, 0x69, 0x63, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x2e, 0x50, 0x61,
	0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0a,
	0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x4d, 0x61, 0x70, 0x1a, 0xc2, 0x01, 0x0a, 0x20, 0x50,
	0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12,
	0x4e, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e,
	0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x0e, 0x63, 0x68, 0x61, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x4e, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e,
	0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x0e, 0x70, 0x61, 0x72, 0x61, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22,
	0xfb, 0x02, 0x0a, 0x1a, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x46, 0x69, 0x6c, 0x6c, 0x53, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2f,
	0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12,
	0x2e, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x63, 0x68, 0x61, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x34, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x46, 0x69,
	0x6c, 0x6c, 0x53, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x07, 0x66, 0x69,
	0x6c, 0x6c, 0x53, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x0c, 0x6f, 0x6c, 0x64, 0x5f, 0x66, 0x69, 0x6c,
	0x6c, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53,
	0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x6c, 0x53, 0x65, 0x74, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x6f, 0x6c, 0x64, 0x46, 0x69, 0x6c, 0x6c, 0x53,
	0x65, 0x74, 0x12, 0x56, 0x0a, 0x29, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x5f, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x65,
	0x74, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x23, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x4c, 0x61, 0x73, 0x74,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x6c, 0x53, 0x65, 0x74, 0x4c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x31, 0x0a, 0x0c, 0x72, 0x6f,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6d, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x0b, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x6d, 0x64, 0x22, 0xa4, 0x01,
	0x0a, 0x1b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2f, 0x0a,
	0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54,
	0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x20,
	0x0a, 0x0b, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x18, 0x0a, 0x07, 0x6f, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65,
	0x77, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x77,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0xd6, 0x01, 0x0a, 0x1d, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x53, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0d,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a,
	0x07, 0x6f, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6f, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x77, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x44, 0x61, 0x74, 0x61,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xb9, 0x02,
	0x0a, 0x19, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x47, 0x72, 0x69, 0x64,
	0x52, 0x6f, 0x77, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x43,
	0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x06,
	0x72, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x05, 0x72, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x29,
	0x0a, 0x0b, 0x72, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x09,
	0x72, 0x6f, 0x77, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x6f, 0x77,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x72, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3e, 0x0a,
	0x16, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x13, 0x75, 0x6e, 0x64, 0x6f, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x64, 0x12, 0x3a, 0x0a,
	0x14, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65,
	0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x11, 0x75, 0x6e, 0x64, 0x6f, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x49, 0x64, 0x22, 0xce, 0x02, 0x0a, 0x1c, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x47, 0x72, 0x69, 0x64, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x43, 0x48,
	0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x09, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x08, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x69, 0x64,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3e,
	0x0a, 0x16, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x13, 0x75, 0x6e, 0x64, 0x6f, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x64, 0x12, 0x3a,
	0x0a, 0x14, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x65, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x11, 0x75, 0x6e, 0x64, 0x6f, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x49, 0x64, 0x22, 0x86, 0x02, 0x0a, 0x1a, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4d, 0x6f, 0x76, 0x65, 0x47, 0x72, 0x69, 0x64, 0x52, 0x6f,
	0x77, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x0c, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x52, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x72,
	0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x52, 0x6f, 0x77, 0x49, 0x64,
	0x12, 0x2b, 0x0a, 0x0c, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49,
	0x44, 0x52, 0x0a, 0x61, 0x66, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x34, 0x0a,
	0x11, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x77, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55,
	0x55, 0x49, 0x44, 0x52, 0x0e, 0x75, 0x6e, 0x64, 0x6f, 0x41, 0x66, 0x74, 0x65, 0x72, 0x52, 0x6f,
	0x77, 0x49, 0x64, 0x22, 0xa1, 0x02, 0x0a, 0x1d, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4d,
	0x6f, 0x76, 0x65, 0x47, 0x72, 0x69, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x0d, 0x65, 0x6e, 0x64,
	0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0b, 0x65, 0x6e, 0x64,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x0f, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0d, 0x61, 0x66,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x14, 0x75,
	0x6e, 0x64, 0x6f, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x55, 0x55, 0x49, 0x44, 0x52, 0x11, 0x75, 0x6e, 0x64, 0x6f, 0x41, 0x66, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x22, 0xc3, 0x04, 0x0a, 0x1c, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x69, 0x64, 0x52, 0x6f, 0x77,
	0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x0c, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x52, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x6f,
	0x77, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x52, 0x6f, 0x77, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0d, 0x63, 0x75, 0x74, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x75, 0x74, 0x52, 0x6f, 0x77, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x0a, 0x63, 0x75, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x47,
	0x72, 0x69, 0x64, 0x52, 0x6f, 0x77, 0x52, 0x09, 0x63, 0x75, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x12, 0x30, 0x0a, 0x14, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72,
	0x64, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x75, 0x6e, 0x64, 0x6f, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x73, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x18, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44,
	0x52, 0x15, 0x75, 0x6e, 0x64, 0x6f, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x15, 0x75, 0x6e, 0x64, 0x6f, 0x5f,
	0x72, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49,
	0x44, 0x52, 0x12, 0x75, 0x6e, 0x64, 0x6f, 0x52, 0x6f, 0x77, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x10, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x72, 0x6f,
	0x77, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0d, 0x75, 0x6e, 0x64, 0x6f,
	0x52, 0x6f, 0x77, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x75, 0x74,
	0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x75, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x13, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x10, 0x75, 0x6e, 0x64,
	0x6f, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xc5, 0x04,
	0x0a, 0x1f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47,
	0x72, 0x69, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x12, 0x31, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x75, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x12, 0x2c, 0x0a, 0x0a, 0x63, 0x75, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x47, 0x72, 0x69,
	0x64, 0x52, 0x6f, 0x77, 0x52, 0x09, 0x63, 0x75, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12,
	0x30, 0x0a, 0x14, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x73,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x75,
	0x6e, 0x64, 0x6f, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x12, 0x42, 0x0a, 0x18, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x15,
	0x75, 0x6e, 0x64, 0x6f, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x15, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x72, 0x6f,
	0x77, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52,
	0x12, 0x75, 0x6e, 0x64, 0x6f, 0x52, 0x6f, 0x77, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x13, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x10, 0x75, 0x6e, 0x64,
	0x6f, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a,
	0x0d, 0x63, 0x75, 0x74, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x75, 0x74, 0x52, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x12, 0x32, 0x0a, 0x10, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x69, 0x64,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0d, 0x75, 0x6e, 0x64, 0x6f, 0x52, 0x6f, 0x77, 0x49,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xc3, 0x01, 0x0a, 0x1a, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x53, 0x65, 0x74, 0x47, 0x72, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x77, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x6f, 0x77, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x6c, 0x64, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x04, 0x20, 0x02, 0x28, 0x01, 0x52, 0x08, 0x6f, 0x6c, 0x64, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28,
	0x01, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x1e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x47, 0x72, 0x69, 0x64, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2f,
	0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12,
	0x23, 0x0a, 0x0d, 0x6f, 0x6c, 0x64, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0c, 0x6f, 0x6c, 0x64, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x5f, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0c, 0x6e, 0x65, 0x77,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa4, 0x01, 0x0a, 0x1b, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x0b, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07,
	0x6f, 0x6c, 0x64, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x07, 0x6f,
	0x6c, 0x64, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x77, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x8d, 0x01, 0x0a, 0x1e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x53,
	0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x6c, 0x64, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x09, 0x6f, 0x6c, 0x64, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18,
	0x04, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x22, 0x8d, 0x01, 0x0a, 0x22, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x6c, 0x64, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x6c, 0x64, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x22, 0xc9, 0x01, 0x0a, 0x1c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x4c,
	0x65, 0x67, 0x65, 0x6e, 0x64, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x12, 0x3b, 0x0a, 0x10, 0x6f, 0x6c, 0x64, 0x5f, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64,
	0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x54,
	0x53, 0x43, 0x48, 0x2e, 0x52, 0x65, 0x63, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x0e, 0x6f, 0x6c, 0x64, 0x4c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12,
	0x3b, 0x0a, 0x10, 0x6e, 0x65, 0x77, 0x5f, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x5f, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x54, 0x53, 0x43, 0x48,
	0x2e, 0x52, 0x65, 0x63, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0e, 0x6e, 0x65,
	0x77, 0x4c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x22, 0xb3, 0x02, 0x0a,
	0x1b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x50, 0x69, 0x65, 0x57, 0x65,
	0x64, 0x67, 0x65, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x05,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53,
	0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x25, 0x0a,
	0x0e, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x77, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x65, 0x78,
	0x70, 0x6c, 0x6f, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x01, 0x52, 0x0f,
	0x77, 0x65, 0x64, 0x67, 0x65, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x2c, 0x0a, 0x12, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x6e,
	0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x10, 0x6f, 0x6c, 0x64,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x30, 0x0a,
	0x14, 0x6f, 0x6c, 0x64, 0x5f, 0x77, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x6f,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x01, 0x52, 0x12, 0x6f, 0x6c, 0x64,
	0x57, 0x65, 0x64, 0x67, 0x65, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x31, 0x0a, 0x0c, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6d, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43,
	0x6d, 0x64, 0x22, 0xd1, 0x01, 0x0a, 0x16, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x38, 0x0a,
	0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x54,
	0x53, 0x53, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x43, 0x68, 0x69,
	0x6c, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x0c, 0x73,
	0x77, 0x61, 0x70, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x0b, 0x73, 0x77, 0x61, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x26,
	0x0a, 0x06, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x22, 0xf5, 0x04, 0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x43, 0x68, 0x61, 0x72, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x08, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x3a, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x73, 0x52, 0x08, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x06,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x12, 0x2d, 0x0a, 0x0a, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x6f, 0x6c, 0x64, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x53, 0x77, 0x61, 0x70, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x15,
	0x61, 0x72, 0x65, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x5f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x61, 0x72, 0x65,
	0x53, 0x77, 0x61, 0x70, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12,
	0x40, 0x0a, 0x0b, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x53, 0x77, 0x61, 0x70, 0x55, 0x6e, 0x64, 0x6f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x73, 0x77, 0x61, 0x70, 0x54, 0x75, 0x70, 0x6c, 0x65,
	0x73, 0x12, 0x4f, 0x0a, 0x13, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x73, 0x77, 0x61,
	0x70, 0x5f, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x53, 0x77, 0x61, 0x70, 0x55,
	0x6e, 0x64, 0x6f, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x11, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x53, 0x77, 0x61, 0x70, 0x54, 0x75, 0x70, 0x6c,
	0x65, 0x73, 0x12, 0x37, 0x0a, 0x0f, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x72, 0x6f, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x12, 0x51, 0x0a, 0x14, 0x72,
	0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x74, 0x75, 0x70,
	0x6c, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x54, 0x53, 0x43, 0x48,
	0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x53, 0x77, 0x61, 0x70, 0x55, 0x6e, 0x64, 0x6f, 0x54, 0x75,
	0x70, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x12, 0x72, 0x6f, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x53, 0x77, 0x61, 0x70, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x22, 0xa5,
	0x02, 0x0a, 0x1d, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75,
	0x70, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x12, 0x2f, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x12, 0x42, 0x0a, 0x15, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x13, 0x69, 0x6e, 0x66, 0x6f, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x4a, 0x0a, 0x19, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x17, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x12, 0x43, 0x0a, 0x14, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x65,
	0x67, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x52, 0x65, 0x63, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x12, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4c, 0x65, 0x67, 0x65,
	0x6e, 0x64, 0x52, 0x65, 0x63, 0x74, 0x22, 0x95, 0x02, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29,
	0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x0a, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x14, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x72, 0x74, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x44, 0x69, 0x72, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x12, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49,
	0x44, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x49, 0x64, 0x50, 0x61, 0x74, 0x68, 0x12, 0x36, 0x0a, 0x18, 0x69, 0x73, 0x5f, 0x66, 0x6f, 0x72,
	0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x72, 0x65,
	0x64, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x46, 0x6f, 0x72, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x55, 0x6e, 0x64, 0x6f, 0x52, 0x65, 0x64, 0x6f, 0x22, 0xf0,
	0x05, 0x0a, 0x1f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x47, 0x72, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x0d, 0x6f, 0x6c, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x72, 0x6f, 0x77, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x54, 0x53, 0x43,
	0x48, 0x2e, 0x47, 0x72, 0x69, 0x64, 0x52, 0x6f, 0x77, 0x52, 0x0b, 0x6f, 0x6c, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x31, 0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x54, 0x53, 0x43, 0x48, 0x2e, 0x47, 0x72, 0x69, 0x64, 0x52, 0x6f, 0x77, 0x52, 0x0b, 0x6e, 0x65,
	0x77, 0x44, 0x61, 0x74, 0x61, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x6c, 0x64,
	0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x6f, 0x6c, 0x64, 0x52, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x22, 0x0a,
	0x0d, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x52, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x6c,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65,
	0x77, 0x43, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x10, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0e,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x77, 0x55, 0x75, 0x69, 0x64, 0x73, 0x12, 0x39,
	0x0a, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f,
	0x75, 0x75, 0x69, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x73, 0x12, 0x2d, 0x0a, 0x0d, 0x61, 0x64, 0x64,
	0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0b, 0x61, 0x64, 0x64,
	0x52, 0x6f, 0x77, 0x55, 0x75, 0x69, 0x64, 0x73, 0x12, 0x33, 0x0a, 0x10, 0x61, 0x64, 0x64, 0x5f,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0e, 0x61,
	0x64, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x73, 0x12, 0x33, 0x0a,
	0x10, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x75, 0x75, 0x69, 0x64,
	0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55,
	0x49, 0x44, 0x52, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x77, 0x55, 0x75, 0x69,
	0x64, 0x73, 0x12, 0x39, 0x0a, 0x13, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x11, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x73, 0x12, 0x30, 0x0a,
	0x14, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x73, 0x65, 0x74,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x30, 0x0a, 0x14, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6e,
	0x65, 0x77, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xbc, 0x03, 0x0a, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x12, 0x24, 0x0a, 0x05, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x05, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x0a, 0x6f, 0x6c, 0x64, 0x5f, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x6f, 0x6c, 0x64,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x12, 0x2d, 0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x12, 0x5f, 0x0a, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x54, 0x53, 0x43,
	0x48, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x54, 0x68, 0x65, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0e, 0x6f, 0x6c, 0x64, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x1a, 0x5e, 0x0a, 0x16, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x12, 0x24, 0x0a, 0x05, 0x73, 0x74,
	0x79, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x22, 0x46, 0x0a, 0x19, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x57, 0x50, 0x43, 0x61, 0x63, 0x68, 0x65, 0x73, 0x12, 0x29, 0x0a,
	0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54,
	0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x22, 0xec, 0x05, 0x0a, 0x21, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2f,
	0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12,
	0x31, 0x0a, 0x0c, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6d, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43,
	0x6d, 0x64, 0x12, 0x47, 0x0a, 0x11, 0x6f, 0x6c, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x54, 0x53, 0x4b, 0x2e, 0x54, 0x53, 0x4b, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0f, 0x6f, 0x6c, 0x64, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x47, 0x0a, 0x11, 0x6e,
	0x65, 0x77, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x54, 0x53, 0x4b,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x0f, 0x6e, 0x65, 0x77, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x69, 0x0a, 0x11, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f,
	0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3c, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x69, 0x0a, 0x11, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x6d, 0x75, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x54, 0x53, 0x43,
	0x48, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xfa, 0x01, 0x0a, 0x14, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x75, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x10, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x54, 0x53, 0x43, 0x48, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0e, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x34, 0x0a, 0x16, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x14, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54,
	0x53, 0x4b, 0x2e, 0x54, 0x53, 0x4b, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0xee, 0x02, 0x0a, 0x1e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c,
	0x69, 0x6e, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x43, 0x48,
	0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x07, 0x61,
	0x78, 0x69, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54,
	0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x41, 0x78, 0x69, 0x73, 0x49, 0x44, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x06, 0x61, 0x78, 0x69, 0x73, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x2b, 0x0a,
	0x09, 0x6e, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x08, 0x6e, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x73, 0x74,
	0x79, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x12, 0x39, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x73, 0x74,
	0x79, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x61,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x11, 0x72,
	0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x22, 0xf2, 0x02, 0x0a, 0x21, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2f,
	0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12,
	0x31, 0x0a, 0x07, 0x61, 0x78, 0x69, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x41, 0x78, 0x69,
	0x73, 0x49, 0x44, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x06, 0x61, 0x78, 0x69, 0x73,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x12, 0x2b, 0x0a, 0x09, 0x6e, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x6e, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x24,
	0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x79, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0f,
	0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x12,
	0x3c, 0x0a, 0x12, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x53, 0x77, 0x61, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0xbe, 0x03,
	0x0a, 0x18, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x61, 0x73, 0x74, 0x65, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x43, 0x48,
	0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x12, 0x73,
	0x74, 0x79, 0x6c, 0x65, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x53, 0x77,
	0x61, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x65, 0x0a, 0x19, 0x69, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x54,
	0x53, 0x43, 0x48, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x16, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x56, 0x0a, 0x11, 0x63, 0x68, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x54, 0x53,
	0x43, 0x48, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x74, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x70,
	0x65, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x73,
	0x68, 0x61, 0x70, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x73, 0x75, 0x62,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xce,
	0x02, 0x0a, 0x1e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x12, 0x3c, 0x0a, 0x12, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x73, 0x77, 0x61, 0x70,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x10,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x53, 0x77, 0x61, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x12, 0x65, 0x0a, 0x19, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x16, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x56, 0x0a, 0x11, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0f,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22,
	0x4b, 0x0a, 0x1e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x64, 0x75, 0x63, 0x65,
	0x64, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x47, 0x72, 0x69,
	0x64, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x22, 0x4a, 0x0a, 0x1d,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x64, 0x75, 0x63, 0x65, 0x64, 0x33, 0x44,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x29, 0x0a,
	0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54,
	0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x22, 0x54, 0x0a, 0x24, 0x43, 0x68, 0x61, 0x72,
	0x74, 0x54, 0x65, 0x78, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x12, 0x2c, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6a,
	0x0a, 0x28, 0x43, 0x68, 0x61, 0x72, 0x74, 0x44, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x3e, 0x0a, 0x05, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x54, 0x53, 0x44, 0x2e,
	0x44, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x22, 0x59, 0x0a, 0x29, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x53, 0x75, 0x62, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x48, 0x65, 0x6c, 0x70, 0x65, 0x72,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2c, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc7, 0x01, 0x0a, 0x30, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52,
	0x65, 0x66, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x75, 0x62, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x48, 0x65, 0x6c,
	0x70, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x45, 0x0a, 0x05, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x54, 0x53, 0x43, 0x48,
	0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x53, 0x75, 0x62, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x48, 0x65, 0x6c,
	0x70, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x12, 0x4c, 0x0a, 0x1d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x75, 0x75, 0x69,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55,
	0x55, 0x49, 0x44, 0x52, 0x1a, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x55, 0x75, 0x69, 0x64, 0x73, 0x22,
	0x7a, 0x0a, 0x31, 0x43, 0x68, 0x61, 0x72, 0x74, 0x53, 0x75, 0x62, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x48, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x12, 0x45, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x53, 0x75, 0x62, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x48, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x22, 0x7b, 0x0a, 0x23, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x53, 0x75, 0x62, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x12, 0x2c, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x26, 0x0a, 0x06, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x06, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x22, 0x55, 0x0a, 0x1e, 0x43, 0x44, 0x45, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x33, 0x0a, 0x0d, 0x63, 0x64,
	0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x0c, 0x63, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2a,
	0x68, 0x0a, 0x0e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x10,
	0x01, 0x12, 0x10, 0x0a, 0x0c, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x78, 0x69,
	0x73, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x10, 0x05, 0x2a, 0xf8, 0x02, 0x0a, 0x0d, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x53, 0x77, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x10,
	0x02, 0x12, 0x10, 0x0a, 0x0c, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x5f, 0x6e, 0x6f,
	0x6e, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x61, 0x78, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x10, 0x05, 0x12,
	0x18, 0x0a, 0x14, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x61, 0x78, 0x69, 0x73, 0x5f, 0x6e, 0x6f,
	0x6e, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x61, 0x78, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x10, 0x07, 0x12, 0x1b, 0x0a, 0x17, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x61,
	0x78, 0x69, 0x73, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x10, 0x08, 0x12,
	0x16, 0x0a, 0x12, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x5f,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x10, 0x09, 0x12, 0x18, 0x0a, 0x14, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x10,
	0x0a, 0x12, 0x14, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x10, 0x0b, 0x12, 0x13, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x61, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x10, 0x0c, 0x12, 0x18, 0x0a, 0x14,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73,
	0x74, 0x79, 0x6c, 0x65, 0x10, 0x0d, 0x12, 0x1c, 0x0a, 0x18, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x10, 0x0e, 0x12, 0x1e, 0x0a, 0x1a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x10, 0x0f, 0x2a, 0x5c, 0x0a, 0x13, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x10, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x10,
	0x01, 0x12, 0x16, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x6f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x10, 0x03, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x2f, 0x6b, 0x70, 0x62,
}

var (
	file_TSCHCommandArchives_proto_rawDescOnce sync.Once
	file_TSCHCommandArchives_proto_rawDescData = file_TSCHCommandArchives_proto_rawDesc
)

func file_TSCHCommandArchives_proto_rawDescGZIP() []byte {
	file_TSCHCommandArchives_proto_rawDescOnce.Do(func() {
		file_TSCHCommandArchives_proto_rawDescData = protoimpl.X.CompressGZIP(file_TSCHCommandArchives_proto_rawDescData)
	})
	return file_TSCHCommandArchives_proto_rawDescData
}

var file_TSCHCommandArchives_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_TSCHCommandArchives_proto_msgTypes = make([]protoimpl.MessageInfo, 54)
var file_TSCHCommandArchives_proto_goTypes = []interface{}{
	(StyleOwnerType)(0),                                                            // 0: TSCH.StyleOwnerType
	(StyleSwapType)(0),                                                             // 1: TSCH.StyleSwapType
	(ApplyPresetBehavior)(0),                                                       // 2: TSCH.ApplyPresetBehavior
	(*StyleOwnerPath)(nil),                                                         // 3: TSCH.StyleOwnerPath
	(*CommandSetChartTypeArchive)(nil),                                             // 4: TSCH.CommandSetChartTypeArchive
	(*StyleSwapUndoTupleArchive)(nil),                                              // 5: TSCH.StyleSwapUndoTupleArchive
	(*StyleSwapUndoTuplesArchive)(nil),                                             // 6: TSCH.StyleSwapUndoTuplesArchive
	(*CommandStyleSwapArchive)(nil),                                                // 7: TSCH.CommandStyleSwapArchive
	(*CommandMutatePropertiesArchive)(nil),                                         // 8: TSCH.CommandMutatePropertiesArchive
	(*CommandScaleAllTextArchive)(nil),                                             // 9: TSCH.CommandScaleAllTextArchive
	(*CommandSetFontFamilyArchive)(nil),                                            // 10: TSCH.CommandSetFontFamilyArchive
	(*CommandApplyFillSetArchive)(nil),                                             // 11: TSCH.CommandApplyFillSetArchive
	(*CommandSetSeriesNameArchive)(nil),                                            // 12: TSCH.CommandSetSeriesNameArchive
	(*CommandSetCategoryNameArchive)(nil),                                          // 13: TSCH.CommandSetCategoryNameArchive
	(*CommandAddGridRowsArchive)(nil),                                              // 14: TSCH.CommandAddGridRowsArchive
	(*CommandAddGridColumnsArchive)(nil),                                           // 15: TSCH.CommandAddGridColumnsArchive
	(*CommandMoveGridRowsArchive)(nil),                                             // 16: TSCH.CommandMoveGridRowsArchive
	(*CommandMoveGridColumnsArchive)(nil),                                          // 17: TSCH.CommandMoveGridColumnsArchive
	(*CommandDeleteGridRowsArchive)(nil),                                           // 18: TSCH.CommandDeleteGridRowsArchive
	(*CommandDeleteGridColumnsArchive)(nil),                                        // 19: TSCH.CommandDeleteGridColumnsArchive
	(*CommandSetGridValueArchive)(nil),                                             // 20: TSCH.CommandSetGridValueArchive
	(*CommandSetGridDirectionArchive)(nil),                                         // 21: TSCH.CommandSetGridDirectionArchive
	(*CommandSetSeriesTypeArchive)(nil),                                            // 22: TSCH.CommandSetSeriesTypeArchive
	(*CommandSetScatterFormatArchive)(nil),                                         // 23: TSCH.CommandSetScatterFormatArchive
	(*CommandSetMultiDataSetIndexArchive)(nil),                                     // 24: TSCH.CommandSetMultiDataSetIndexArchive
	(*CommandSetLegendFrameArchive)(nil),                                           // 25: TSCH.CommandSetLegendFrameArchive
	(*CommandSetPieWedgeExplosion)(nil),                                            // 26: TSCH.CommandSetPieWedgeExplosion
	(*CommandChartApplyTheme)(nil),                                                 // 27: TSCH.CommandChartApplyTheme
	(*CommandChartApplyPreset)(nil),                                                // 28: TSCH.CommandChartApplyPreset
	(*CommandCleanupGeometryArchive)(nil),                                          // 29: TSCH.CommandCleanupGeometryArchive
	(*ChartCommandArchive)(nil),                                                    // 30: TSCH.ChartCommandArchive
	(*CommandReplaceGridValuesArchive)(nil),                                        // 31: TSCH.CommandReplaceGridValuesArchive
	(*CommandReplaceThemePresetArchive)(nil),                                       // 32: TSCH.CommandReplaceThemePresetArchive
	(*CommandInvalidateWPCaches)(nil),                                              // 33: TSCH.CommandInvalidateWPCaches
	(*CommandReplaceCustomFormatArchive)(nil),                                      // 34: TSCH.CommandReplaceCustomFormatArchive
	(*CommandAddReferenceLineArchive)(nil),                                         // 35: TSCH.CommandAddReferenceLineArchive
	(*CommandDeleteReferenceLineArchive)(nil),                                      // 36: TSCH.CommandDeleteReferenceLineArchive
	(*CommandPasteStyleArchive)(nil),                                               // 37: TSCH.CommandPasteStyleArchive
	(*CommandReplaceImageDataArchive)(nil),                                         // 38: TSCH.CommandReplaceImageDataArchive
	(*CommandInducedReplaceChartGrid)(nil),                                         // 39: TSCH.CommandInducedReplaceChartGrid
	(*CommandInduced3DChartGeometry)(nil),                                          // 40: TSCH.CommandInduced3DChartGeometry
	(*ChartTextSelectionTransformerArchive)(nil),                                   // 41: TSCH.ChartTextSelectionTransformerArchive
	(*ChartDrawableSelectionTransformerArchive)(nil),                               // 42: TSCH.ChartDrawableSelectionTransformerArchive
	(*ChartSubselectionTransformerHelperArchive)(nil),                              // 43: TSCH.ChartSubselectionTransformerHelperArchive
	(*ChartRefLineSubselectionTransformerHelperArchive)(nil),                       // 44: TSCH.ChartRefLineSubselectionTransformerHelperArchive
	(*ChartSubselectionIdentityTransformerHelperArchive)(nil),                      // 45: TSCH.ChartSubselectionIdentityTransformerHelperArchive
	(*ChartSubselectionTransformerArchive)(nil),                                    // 46: TSCH.ChartSubselectionTransformerArchive
	(*CDESelectionTransformerArchive)(nil),                                         // 47: TSCH.CDESelectionTransformerArchive
	(*CommandMutatePropertiesArchive_GenericPropertyDeltaMap)(nil),                 // 48: TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap
	(*CommandMutatePropertiesArchive_ParagraphStyleDeltaMap)(nil),                  // 49: TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap
	(*CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion)(nil), // 50: TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.GenericMapUnion
	(*CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive)(nil),         // 51: TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.ParagraphStylePropertyMapArchive
	(*CommandSetFontFamilyArchive_StyleSemanticTag)(nil),                                                   // 52: TSCH.CommandSetFontFamilyArchive.StyleSemanticTag
	(*CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap)(nil),                                  // 53: TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap
	(*CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive)(nil), // 54: TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.ParagraphStylePropertyMapArchive
	(*CommandReplaceThemePresetArchive_StyleAndIdentifierPair)(nil),                                        // 55: TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair
	(*CommandReplaceCustomFormatArchive_FormatObjectMutation)(nil),                                         // 56: TSCH.CommandReplaceCustomFormatArchive.FormatObjectMutation
	(*UUID)(nil),                                   // 57: TSP.UUID
	(ChartType)(0),                                 // 58: TSCH.ChartType
	(*Reference)(nil),                              // 59: TSP.Reference
	(*ChartFillSetArchive)(nil),                    // 60: TSCH.ChartFillSetArchive
	(*GridRow)(nil),                                // 61: TSCH.GridRow
	(*RectArchive)(nil),                            // 62: TSCH.RectArchive
	(*ApplyThemeChildCommandArchive)(nil),          // 63: TSS.ApplyThemeChildCommandArchive
	(*CommandArchive)(nil),                         // 64: TSK.CommandArchive
	(*UUIDPath)(nil),                               // 65: TSP.UUIDPath
	(*TSKFormatStructArchive)(nil),                 // 66: TSK.TSKFormatStructArchive
	(*ChartAxisIDArchive)(nil),                     // 67: TSCH.ChartAxisIDArchive
	(*PropertyValueStorageContainerArchive)(nil),   // 68: TSCH.PropertyValueStorageContainerArchive
	(*ChartSelectionPathArchive)(nil),              // 69: TSCH.ChartSelectionPathArchive
	(*DrawableSelectionTransformerArchive)(nil),    // 70: TSD.DrawableSelectionTransformerArchive
	(*ChartGenericPropertyMapArchive)(nil),         // 71: TSCH.Generated.ChartGenericPropertyMapArchive
	(*LegendGenericPropertyMapArchive)(nil),        // 72: TSCH.Generated.LegendGenericPropertyMapArchive
	(*ChartAxisGenericPropertyMapArchive)(nil),     // 73: TSCH.Generated.ChartAxisGenericPropertyMapArchive
	(*ChartSeriesGenericPropertyMapArchive)(nil),   // 74: TSCH.Generated.ChartSeriesGenericPropertyMapArchive
	(*ReferenceLineGenericPropertyMapArchive)(nil), // 75: TSCH.Generated.ReferenceLineGenericPropertyMapArchive
	(*CharacterStylePropertiesArchive)(nil),        // 76: TSWP.CharacterStylePropertiesArchive
	(*ParagraphStylePropertiesArchive)(nil),        // 77: TSWP.ParagraphStylePropertiesArchive
}
var file_TSCHCommandArchives_proto_depIdxs = []int32{
	57,  // 0: TSCH.StyleOwnerPath.uuids:type_name -> TSP.UUID
	30,  // 1: TSCH.CommandSetChartTypeArchive.super:type_name -> TSCH.ChartCommandArchive
	58,  // 2: TSCH.CommandSetChartTypeArchive.new_chart_type:type_name -> TSCH.ChartType
	58,  // 3: TSCH.CommandSetChartTypeArchive.old_chart_type:type_name -> TSCH.ChartType
	58,  // 4: TSCH.CommandSetChartTypeArchive.rollback_chart_type:type_name -> TSCH.ChartType
	57,  // 5: TSCH.CommandSetChartTypeArchive.row_ids:type_name -> TSP.UUID
	57,  // 6: TSCH.CommandSetChartTypeArchive.column_ids:type_name -> TSP.UUID
	57,  // 7: TSCH.CommandSetChartTypeArchive.old_row_ids:type_name -> TSP.UUID
	57,  // 8: TSCH.CommandSetChartTypeArchive.old_column_ids:type_name -> TSP.UUID
	57,  // 9: TSCH.CommandSetChartTypeArchive.rollback_row_ids:type_name -> TSP.UUID
	57,  // 10: TSCH.CommandSetChartTypeArchive.rollback_column_ids:type_name -> TSP.UUID
	59,  // 11: TSCH.StyleSwapUndoTupleArchive.chart_info:type_name -> TSP.Reference
	1,   // 12: TSCH.StyleSwapUndoTupleArchive.swap_type:type_name -> TSCH.StyleSwapType
	59,  // 13: TSCH.StyleSwapUndoTupleArchive.old_value:type_name -> TSP.Reference
	59,  // 14: TSCH.StyleSwapUndoTupleArchive.new_value:type_name -> TSP.Reference
	57,  // 15: TSCH.StyleSwapUndoTupleArchive.ref_line_uuid:type_name -> TSP.UUID
	5,   // 16: TSCH.StyleSwapUndoTuplesArchive.swap_tuples:type_name -> TSCH.StyleSwapUndoTupleArchive
	30,  // 17: TSCH.CommandStyleSwapArchive.super:type_name -> TSCH.ChartCommandArchive
	5,   // 18: TSCH.CommandStyleSwapArchive.undo_tuples:type_name -> TSCH.StyleSwapUndoTupleArchive
	30,  // 19: TSCH.CommandMutatePropertiesArchive.super:type_name -> TSCH.ChartCommandArchive
	59,  // 20: TSCH.CommandMutatePropertiesArchive.rollback_cmd:type_name -> TSP.Reference
	48,  // 21: TSCH.CommandMutatePropertiesArchive.generic_property_delta_maps:type_name -> TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap
	49,  // 22: TSCH.CommandMutatePropertiesArchive.paragraph_style_delta_maps:type_name -> TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap
	30,  // 23: TSCH.CommandScaleAllTextArchive.super:type_name -> TSCH.ChartCommandArchive
	59,  // 24: TSCH.CommandScaleAllTextArchive.rollback_cmd:type_name -> TSP.Reference
	30,  // 25: TSCH.CommandSetFontFamilyArchive.super:type_name -> TSCH.ChartCommandArchive
	59,  // 26: TSCH.CommandSetFontFamilyArchive.rollback_cmd:type_name -> TSP.Reference
	53,  // 27: TSCH.CommandSetFontFamilyArchive.paragraph_style_delta_maps:type_name -> TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap
	30,  // 28: TSCH.CommandApplyFillSetArchive.super:type_name -> TSCH.ChartCommandArchive
	58,  // 29: TSCH.CommandApplyFillSetArchive.chart_type:type_name -> TSCH.ChartType
	60,  // 30: TSCH.CommandApplyFillSetArchive.fill_set:type_name -> TSCH.ChartFillSetArchive
	60,  // 31: TSCH.CommandApplyFillSetArchive.old_fill_set:type_name -> TSCH.ChartFillSetArchive
	59,  // 32: TSCH.CommandApplyFillSetArchive.rollback_cmd:type_name -> TSP.Reference
	30,  // 33: TSCH.CommandSetSeriesNameArchive.super:type_name -> TSCH.ChartCommandArchive
	30,  // 34: TSCH.CommandSetCategoryNameArchive.super:type_name -> TSCH.ChartCommandArchive
	30,  // 35: TSCH.CommandAddGridRowsArchive.super:type_name -> TSCH.ChartCommandArchive
	57,  // 36: TSCH.CommandAddGridRowsArchive.row_id:type_name -> TSP.UUID
	57,  // 37: TSCH.CommandAddGridRowsArchive.row_id_list:type_name -> TSP.UUID
	57,  // 38: TSCH.CommandAddGridRowsArchive.undo_deletion_start_id:type_name -> TSP.UUID
	57,  // 39: TSCH.CommandAddGridRowsArchive.undo_deletion_end_id:type_name -> TSP.UUID
	30,  // 40: TSCH.CommandAddGridColumnsArchive.super:type_name -> TSCH.ChartCommandArchive
	57,  // 41: TSCH.CommandAddGridColumnsArchive.column_id:type_name -> TSP.UUID
	57,  // 42: TSCH.CommandAddGridColumnsArchive.column_id_list:type_name -> TSP.UUID
	57,  // 43: TSCH.CommandAddGridColumnsArchive.undo_deletion_start_id:type_name -> TSP.UUID
	57,  // 44: TSCH.CommandAddGridColumnsArchive.undo_deletion_end_id:type_name -> TSP.UUID
	30,  // 45: TSCH.CommandMoveGridRowsArchive.super:type_name -> TSCH.ChartCommandArchive
	57,  // 46: TSCH.CommandMoveGridRowsArchive.start_row_id:type_name -> TSP.UUID
	57,  // 47: TSCH.CommandMoveGridRowsArchive.end_row_id:type_name -> TSP.UUID
	57,  // 48: TSCH.CommandMoveGridRowsArchive.after_row_id:type_name -> TSP.UUID
	57,  // 49: TSCH.CommandMoveGridRowsArchive.undo_after_row_id:type_name -> TSP.UUID
	30,  // 50: TSCH.CommandMoveGridColumnsArchive.super:type_name -> TSCH.ChartCommandArchive
	57,  // 51: TSCH.CommandMoveGridColumnsArchive.start_column_id:type_name -> TSP.UUID
	57,  // 52: TSCH.CommandMoveGridColumnsArchive.end_column_id:type_name -> TSP.UUID
	57,  // 53: TSCH.CommandMoveGridColumnsArchive.after_column_id:type_name -> TSP.UUID
	57,  // 54: TSCH.CommandMoveGridColumnsArchive.undo_after_column_id:type_name -> TSP.UUID
	30,  // 55: TSCH.CommandDeleteGridRowsArchive.super:type_name -> TSCH.ChartCommandArchive
	57,  // 56: TSCH.CommandDeleteGridRowsArchive.start_row_id:type_name -> TSP.UUID
	57,  // 57: TSCH.CommandDeleteGridRowsArchive.end_row_id:type_name -> TSP.UUID
	61,  // 58: TSCH.CommandDeleteGridRowsArchive.cut_values:type_name -> TSCH.GridRow
	57,  // 59: TSCH.CommandDeleteGridRowsArchive.undo_column_insertion_id:type_name -> TSP.UUID
	57,  // 60: TSCH.CommandDeleteGridRowsArchive.undo_row_insertion_id:type_name -> TSP.UUID
	57,  // 61: TSCH.CommandDeleteGridRowsArchive.undo_row_id_list:type_name -> TSP.UUID
	57,  // 62: TSCH.CommandDeleteGridRowsArchive.undo_column_id_list:type_name -> TSP.UUID
	30,  // 63: TSCH.CommandDeleteGridColumnsArchive.super:type_name -> TSCH.ChartCommandArchive
	57,  // 64: TSCH.CommandDeleteGridColumnsArchive.start_column_id:type_name -> TSP.UUID
	57,  // 65: TSCH.CommandDeleteGridColumnsArchive.end_column_id:type_name -> TSP.UUID
	61,  // 66: TSCH.CommandDeleteGridColumnsArchive.cut_values:type_name -> TSCH.GridRow
	57,  // 67: TSCH.CommandDeleteGridColumnsArchive.undo_column_insertion_id:type_name -> TSP.UUID
	57,  // 68: TSCH.CommandDeleteGridColumnsArchive.undo_row_insertion_id:type_name -> TSP.UUID
	57,  // 69: TSCH.CommandDeleteGridColumnsArchive.undo_column_id_list:type_name -> TSP.UUID
	57,  // 70: TSCH.CommandDeleteGridColumnsArchive.undo_row_id_list:type_name -> TSP.UUID
	30,  // 71: TSCH.CommandSetGridValueArchive.super:type_name -> TSCH.ChartCommandArchive
	30,  // 72: TSCH.CommandSetGridDirectionArchive.super:type_name -> TSCH.ChartCommandArchive
	30,  // 73: TSCH.CommandSetSeriesTypeArchive.super:type_name -> TSCH.ChartCommandArchive
	30,  // 74: TSCH.CommandSetScatterFormatArchive.super:type_name -> TSCH.ChartCommandArchive
	30,  // 75: TSCH.CommandSetMultiDataSetIndexArchive.super:type_name -> TSCH.ChartCommandArchive
	30,  // 76: TSCH.CommandSetLegendFrameArchive.super:type_name -> TSCH.ChartCommandArchive
	62,  // 77: TSCH.CommandSetLegendFrameArchive.old_legend_frame:type_name -> TSCH.RectArchive
	62,  // 78: TSCH.CommandSetLegendFrameArchive.new_legend_frame:type_name -> TSCH.RectArchive
	30,  // 79: TSCH.CommandSetPieWedgeExplosion.super:type_name -> TSCH.ChartCommandArchive
	59,  // 80: TSCH.CommandSetPieWedgeExplosion.rollback_cmd:type_name -> TSP.Reference
	63,  // 81: TSCH.CommandChartApplyTheme.super:type_name -> TSS.ApplyThemeChildCommandArchive
	59,  // 82: TSCH.CommandChartApplyTheme.info:type_name -> TSP.Reference
	59,  // 83: TSCH.CommandChartApplyTheme.swap_command:type_name -> TSP.Reference
	59,  // 84: TSCH.CommandChartApplyTheme.preset:type_name -> TSP.Reference
	30,  // 85: TSCH.CommandChartApplyPreset.super:type_name -> TSCH.ChartCommandArchive
	2,   // 86: TSCH.CommandChartApplyPreset.behavior:type_name -> TSCH.ApplyPresetBehavior
	59,  // 87: TSCH.CommandChartApplyPreset.preset:type_name -> TSP.Reference
	59,  // 88: TSCH.CommandChartApplyPreset.old_preset:type_name -> TSP.Reference
	5,   // 89: TSCH.CommandChartApplyPreset.swap_tuples:type_name -> TSCH.StyleSwapUndoTupleArchive
	5,   // 90: TSCH.CommandChartApplyPreset.inverse_swap_tuples:type_name -> TSCH.StyleSwapUndoTupleArchive
	59,  // 91: TSCH.CommandChartApplyPreset.rollback_preset:type_name -> TSP.Reference
	5,   // 92: TSCH.CommandChartApplyPreset.rollback_swap_tuples:type_name -> TSCH.StyleSwapUndoTupleArchive
	30,  // 93: TSCH.CommandCleanupGeometryArchive.super:type_name -> TSCH.ChartCommandArchive
	59,  // 94: TSCH.CommandCleanupGeometryArchive.info_geometry_command:type_name -> TSP.Reference
	59,  // 95: TSCH.CommandCleanupGeometryArchive.anchor_attachment_command:type_name -> TSP.Reference
	62,  // 96: TSCH.CommandCleanupGeometryArchive.original_legend_rect:type_name -> TSCH.RectArchive
	64,  // 97: TSCH.ChartCommandArchive.super:type_name -> TSK.CommandArchive
	59,  // 98: TSCH.ChartCommandArchive.chart_info:type_name -> TSP.Reference
	65,  // 99: TSCH.ChartCommandArchive.chart_info_id_path:type_name -> TSP.UUIDPath
	30,  // 100: TSCH.CommandReplaceGridValuesArchive.super:type_name -> TSCH.ChartCommandArchive
	61,  // 101: TSCH.CommandReplaceGridValuesArchive.old_data_rows:type_name -> TSCH.GridRow
	61,  // 102: TSCH.CommandReplaceGridValuesArchive.new_data_rows:type_name -> TSCH.GridRow
	57,  // 103: TSCH.CommandReplaceGridValuesArchive.update_row_uuids:type_name -> TSP.UUID
	57,  // 104: TSCH.CommandReplaceGridValuesArchive.update_column_uuids:type_name -> TSP.UUID
	57,  // 105: TSCH.CommandReplaceGridValuesArchive.add_row_uuids:type_name -> TSP.UUID
	57,  // 106: TSCH.CommandReplaceGridValuesArchive.add_column_uuids:type_name -> TSP.UUID
	57,  // 107: TSCH.CommandReplaceGridValuesArchive.delete_row_uuids:type_name -> TSP.UUID
	57,  // 108: TSCH.CommandReplaceGridValuesArchive.delete_column_uuids:type_name -> TSP.UUID
	64,  // 109: TSCH.CommandReplaceThemePresetArchive.super:type_name -> TSK.CommandArchive
	59,  // 110: TSCH.CommandReplaceThemePresetArchive.theme:type_name -> TSP.Reference
	59,  // 111: TSCH.CommandReplaceThemePresetArchive.old_preset:type_name -> TSP.Reference
	59,  // 112: TSCH.CommandReplaceThemePresetArchive.new_preset:type_name -> TSP.Reference
	55,  // 113: TSCH.CommandReplaceThemePresetArchive.identifiers:type_name -> TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair
	64,  // 114: TSCH.CommandInvalidateWPCaches.super:type_name -> TSK.CommandArchive
	30,  // 115: TSCH.CommandReplaceCustomFormatArchive.super:type_name -> TSCH.ChartCommandArchive
	59,  // 116: TSCH.CommandReplaceCustomFormatArchive.rollback_cmd:type_name -> TSP.Reference
	66,  // 117: TSCH.CommandReplaceCustomFormatArchive.old_format_object:type_name -> TSK.TSKFormatStructArchive
	66,  // 118: TSCH.CommandReplaceCustomFormatArchive.new_format_object:type_name -> TSK.TSKFormatStructArchive
	56,  // 119: TSCH.CommandReplaceCustomFormatArchive.forward_mutations:type_name -> TSCH.CommandReplaceCustomFormatArchive.FormatObjectMutation
	56,  // 120: TSCH.CommandReplaceCustomFormatArchive.reverse_mutations:type_name -> TSCH.CommandReplaceCustomFormatArchive.FormatObjectMutation
	30,  // 121: TSCH.CommandAddReferenceLineArchive.super:type_name -> TSCH.ChartCommandArchive
	67,  // 122: TSCH.CommandAddReferenceLineArchive.axis_id:type_name -> TSCH.ChartAxisIDArchive
	57,  // 123: TSCH.CommandAddReferenceLineArchive.uuid:type_name -> TSP.UUID
	59,  // 124: TSCH.CommandAddReferenceLineArchive.non_style:type_name -> TSP.Reference
	59,  // 125: TSCH.CommandAddReferenceLineArchive.style:type_name -> TSP.Reference
	59,  // 126: TSCH.CommandAddReferenceLineArchive.paragraph_styles:type_name -> TSP.Reference
	59,  // 127: TSCH.CommandAddReferenceLineArchive.rollback_commands:type_name -> TSP.Reference
	30,  // 128: TSCH.CommandDeleteReferenceLineArchive.super:type_name -> TSCH.ChartCommandArchive
	67,  // 129: TSCH.CommandDeleteReferenceLineArchive.axis_id:type_name -> TSCH.ChartAxisIDArchive
	57,  // 130: TSCH.CommandDeleteReferenceLineArchive.uuid:type_name -> TSP.UUID
	59,  // 131: TSCH.CommandDeleteReferenceLineArchive.non_style:type_name -> TSP.Reference
	59,  // 132: TSCH.CommandDeleteReferenceLineArchive.style:type_name -> TSP.Reference
	59,  // 133: TSCH.CommandDeleteReferenceLineArchive.paragraph_styles:type_name -> TSP.Reference
	59,  // 134: TSCH.CommandDeleteReferenceLineArchive.style_swap_command:type_name -> TSP.Reference
	30,  // 135: TSCH.CommandPasteStyleArchive.super:type_name -> TSCH.ChartCommandArchive
	59,  // 136: TSCH.CommandPasteStyleArchive.style_swap_command:type_name -> TSP.Reference
	68,  // 137: TSCH.CommandPasteStyleArchive.inverse_chart_style_state:type_name -> TSCH.PropertyValueStorageContainerArchive
	68,  // 138: TSCH.CommandPasteStyleArchive.chart_style_state:type_name -> TSCH.PropertyValueStorageContainerArchive
	59,  // 139: TSCH.CommandPasteStyleArchive.shape_style:type_name -> TSP.Reference
	69,  // 140: TSCH.CommandPasteStyleArchive.subselection:type_name -> TSCH.ChartSelectionPathArchive
	30,  // 141: TSCH.CommandReplaceImageDataArchive.super:type_name -> TSCH.ChartCommandArchive
	59,  // 142: TSCH.CommandReplaceImageDataArchive.style_swap_command:type_name -> TSP.Reference
	68,  // 143: TSCH.CommandReplaceImageDataArchive.inverse_chart_style_state:type_name -> TSCH.PropertyValueStorageContainerArchive
	68,  // 144: TSCH.CommandReplaceImageDataArchive.chart_style_state:type_name -> TSCH.PropertyValueStorageContainerArchive
	64,  // 145: TSCH.CommandInducedReplaceChartGrid.super:type_name -> TSK.CommandArchive
	64,  // 146: TSCH.CommandInduced3DChartGeometry.super:type_name -> TSK.CommandArchive
	59,  // 147: TSCH.ChartTextSelectionTransformerArchive.selection:type_name -> TSP.Reference
	70,  // 148: TSCH.ChartDrawableSelectionTransformerArchive.super:type_name -> TSD.DrawableSelectionTransformerArchive
	59,  // 149: TSCH.ChartSubselectionTransformerHelperArchive.selection:type_name -> TSP.Reference
	43,  // 150: TSCH.ChartRefLineSubselectionTransformerHelperArchive.super:type_name -> TSCH.ChartSubselectionTransformerHelperArchive
	57,  // 151: TSCH.ChartRefLineSubselectionTransformerHelperArchive.selected_reference_line_uuids:type_name -> TSP.UUID
	43,  // 152: TSCH.ChartSubselectionIdentityTransformerHelperArchive.super:type_name -> TSCH.ChartSubselectionTransformerHelperArchive
	59,  // 153: TSCH.ChartSubselectionTransformerArchive.selection:type_name -> TSP.Reference
	59,  // 154: TSCH.ChartSubselectionTransformerArchive.helper:type_name -> TSP.Reference
	59,  // 155: TSCH.CDESelectionTransformerArchive.cde_selection:type_name -> TSP.Reference
	3,   // 156: TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.style_owner_path:type_name -> TSCH.StyleOwnerPath
	50,  // 157: TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.forward_map:type_name -> TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.GenericMapUnion
	50,  // 158: TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.reverse_map:type_name -> TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.GenericMapUnion
	3,   // 159: TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.style_owner_path:type_name -> TSCH.StyleOwnerPath
	51,  // 160: TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.forward_map:type_name -> TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.ParagraphStylePropertyMapArchive
	51,  // 161: TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.reverse_map:type_name -> TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.ParagraphStylePropertyMapArchive
	71,  // 162: TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.GenericMapUnion.chart_map:type_name -> TSCH.Generated.ChartGenericPropertyMapArchive
	72,  // 163: TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.GenericMapUnion.legend_map:type_name -> TSCH.Generated.LegendGenericPropertyMapArchive
	73,  // 164: TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.GenericMapUnion.axis_map:type_name -> TSCH.Generated.ChartAxisGenericPropertyMapArchive
	74,  // 165: TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.GenericMapUnion.series_map:type_name -> TSCH.Generated.ChartSeriesGenericPropertyMapArchive
	75,  // 166: TSCH.CommandMutatePropertiesArchive.GenericPropertyDeltaMap.GenericMapUnion.reference_line_map:type_name -> TSCH.Generated.ReferenceLineGenericPropertyMapArchive
	76,  // 167: TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.ParagraphStylePropertyMapArchive.char_properties:type_name -> TSWP.CharacterStylePropertiesArchive
	77,  // 168: TSCH.CommandMutatePropertiesArchive.ParagraphStyleDeltaMap.ParagraphStylePropertyMapArchive.para_properties:type_name -> TSWP.ParagraphStylePropertiesArchive
	1,   // 169: TSCH.CommandSetFontFamilyArchive.StyleSemanticTag.swap_type:type_name -> TSCH.StyleSwapType
	52,  // 170: TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.style_semantic_tag:type_name -> TSCH.CommandSetFontFamilyArchive.StyleSemanticTag
	54,  // 171: TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.forward_map:type_name -> TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.ParagraphStylePropertyMapArchive
	54,  // 172: TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.reverse_map:type_name -> TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.ParagraphStylePropertyMapArchive
	76,  // 173: TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.ParagraphStylePropertyMapArchive.char_properties:type_name -> TSWP.CharacterStylePropertiesArchive
	77,  // 174: TSCH.CommandSetFontFamilyArchive.SemanticParagraphStyleMutationMap.ParagraphStylePropertyMapArchive.para_properties:type_name -> TSWP.ParagraphStylePropertiesArchive
	59,  // 175: TSCH.CommandReplaceThemePresetArchive.StyleAndIdentifierPair.style:type_name -> TSP.Reference
	0,   // 176: TSCH.CommandReplaceCustomFormatArchive.FormatObjectMutation.style_owner_type:type_name -> TSCH.StyleOwnerType
	66,  // 177: TSCH.CommandReplaceCustomFormatArchive.FormatObjectMutation.format_object:type_name -> TSK.TSKFormatStructArchive
	178, // [178:178] is the sub-list for method output_type
	178, // [178:178] is the sub-list for method input_type
	178, // [178:178] is the sub-list for extension type_name
	178, // [178:178] is the sub-list for extension extendee
	0,   // [0:178] is the sub-list for field type_name
}

func init() { file_TSCHCommandArchives_proto_init() }
func file_TSCHCommandArchives_proto_init() {
	if File_TSCHCommandArchives_proto != nil {
		return
	}
	file_TSCHArchives_Common_proto_init()
	file_TSCHArchives_GEN_proto_init()
	file_TSCHArchives_proto_init()
	file_TSDCommandArchives_proto_init()
	file_TSKArchives_proto_init()
	file_TSPMessages_proto_init()
	file_TSSArchives_proto_init()
	file_TSWPArchives_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_TSCHCommandArchives_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StyleOwnerPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHCommandArchives_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSetChartTypeArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHCommandArchives_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StyleSwapUndoTupleArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHCommandArchives_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StyleSwapUndoTuplesArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHCommandArchives_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandStyleSwapArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHCommandArchives_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandMutatePropertiesArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHCommandArchives_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandScaleAllTextArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHCommandArchives_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSetFontFamilyArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHCommandArchives_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandApplyFillSetArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHCommandArchives_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSetSeriesNameArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHCommandArchives_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSetCategoryNameArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHCommandArchives_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandAddGridRowsArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHCommandArchives_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandAddGridColumnsArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHCommandArchives_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandMoveGridRowsArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHCommandArchives_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandMoveGridColumnsArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHCommandArchives_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandDeleteGridRowsArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHCommandArchives_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandDeleteGridColumnsArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHCommandArchives_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSetGridValueArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHCommandArchives_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSetGridDirectionArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHCommandArchives_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSetSeriesTypeArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHCommandArchives_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSetScatterFormatArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHCommandArchives_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSetMultiDataSetIndexArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHCommandArchives_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSetLegendFrameArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHCommandArchives_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSetPieWedgeExplosion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHCommandArchives_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandChartApplyTheme); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHCommandArchives_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandChartApplyPreset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHCommandArchives_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandCleanupGeometryArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHCommandArchives_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHCommandArchives_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandReplaceGridValuesArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHCommandArchives_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandReplaceThemePresetArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHCommandArchives_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandInvalidateWPCaches); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHCommandArchives_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandReplaceCustomFormatArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHCommandArchives_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandAddReferenceLineArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHCommandArchives_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandDeleteReferenceLineArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHCommandArchives_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandPasteStyleArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHCommandArchives_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandReplaceImageDataArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHCommandArchives_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandInducedReplaceChartGrid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHCommandArchives_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandInduced3DChartGeometry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHCommandArchives_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartTextSelectionTransformerArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHCommandArchives_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartDrawableSelectionTransformerArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHCommandArchives_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartSubselectionTransformerHelperArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHCommandArchives_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartRefLineSubselectionTransformerHelperArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHCommandArchives_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartSubselectionIdentityTransformerHelperArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHCommandArchives_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartSubselectionTransformerArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHCommandArchives_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDESelectionTransformerArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHCommandArchives_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandMutatePropertiesArchive_GenericPropertyDeltaMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHCommandArchives_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandMutatePropertiesArchive_ParagraphStyleDeltaMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHCommandArchives_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandMutatePropertiesArchive_GenericPropertyDeltaMap_GenericMapUnion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHCommandArchives_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandMutatePropertiesArchive_ParagraphStyleDeltaMap_ParagraphStylePropertyMapArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHCommandArchives_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSetFontFamilyArchive_StyleSemanticTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHCommandArchives_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHCommandArchives_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSetFontFamilyArchive_SemanticParagraphStyleMutationMap_ParagraphStylePropertyMapArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHCommandArchives_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandReplaceThemePresetArchive_StyleAndIdentifierPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHCommandArchives_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandReplaceCustomFormatArchive_FormatObjectMutation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_TSCHCommandArchives_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   54,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_TSCHCommandArchives_proto_goTypes,
		DependencyIndexes: file_TSCHCommandArchives_proto_depIdxs,
		EnumInfos:         file_TSCHCommandArchives_proto_enumTypes,
		MessageInfos:      file_TSCHCommandArchives_proto_msgTypes,
	}.Build()
	File_TSCHCommandArchives_proto = out.File
	file_TSCHCommandArchives_proto_rawDesc = nil
	file_TSCHCommandArchives_proto_goTypes = nil
	file_TSCHCommandArchives_proto_depIdxs = nil
}
