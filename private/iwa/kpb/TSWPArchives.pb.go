// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: TSWPArchives.proto

package kpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SelectionType int32

const (
	SelectionType_SelectionType_Normal         SelectionType = 0
	SelectionType_SelectionType_ListLabel      SelectionType = 1
	SelectionType_SelectionType_ListTopic      SelectionType = 2
	SelectionType_SelectionType_Replace        SelectionType = 3
	SelectionType_SelectionType_CopyPasteStyle SelectionType = 4
	SelectionType_SelectionType_Replace2       SelectionType = 5
	SelectionType_SelectionType_SmartField     SelectionType = 6
	SelectionType_SelectionType_Visual         SelectionType = 7
)

// Enum value maps for SelectionType.
var (
	SelectionType_name = map[int32]string{
		0: "SelectionType_Normal",
		1: "SelectionType_ListLabel",
		2: "SelectionType_ListTopic",
		3: "SelectionType_Replace",
		4: "SelectionType_CopyPasteStyle",
		5: "SelectionType_Replace2",
		6: "SelectionType_SmartField",
		7: "SelectionType_Visual",
	}
	SelectionType_value = map[string]int32{
		"SelectionType_Normal":         0,
		"SelectionType_ListLabel":      1,
		"SelectionType_ListTopic":      2,
		"SelectionType_Replace":        3,
		"SelectionType_CopyPasteStyle": 4,
		"SelectionType_Replace2":       5,
		"SelectionType_SmartField":     6,
		"SelectionType_Visual":         7,
	}
)

func (x SelectionType) Enum() *SelectionType {
	p := new(SelectionType)
	*p = x
	return p
}

func (x SelectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SelectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_TSWPArchives_proto_enumTypes[0].Descriptor()
}

func (SelectionType) Type() protoreflect.EnumType {
	return &file_TSWPArchives_proto_enumTypes[0]
}

func (x SelectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SelectionType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SelectionType(num)
	return nil
}

// Deprecated: Use SelectionType.Descriptor instead.
func (SelectionType) EnumDescriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{0}
}

type StyleInsertionBehavior int32

const (
	StyleInsertionBehavior_StyleInsertionBehavior_NoGrow    StyleInsertionBehavior = 0
	StyleInsertionBehavior_StyleInsertionBehavior_GrowLeft  StyleInsertionBehavior = 1
	StyleInsertionBehavior_StyleInsertionBehavior_GrowRight StyleInsertionBehavior = 2
)

// Enum value maps for StyleInsertionBehavior.
var (
	StyleInsertionBehavior_name = map[int32]string{
		0: "StyleInsertionBehavior_NoGrow",
		1: "StyleInsertionBehavior_GrowLeft",
		2: "StyleInsertionBehavior_GrowRight",
	}
	StyleInsertionBehavior_value = map[string]int32{
		"StyleInsertionBehavior_NoGrow":    0,
		"StyleInsertionBehavior_GrowLeft":  1,
		"StyleInsertionBehavior_GrowRight": 2,
	}
)

func (x StyleInsertionBehavior) Enum() *StyleInsertionBehavior {
	p := new(StyleInsertionBehavior)
	*p = x
	return p
}

func (x StyleInsertionBehavior) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StyleInsertionBehavior) Descriptor() protoreflect.EnumDescriptor {
	return file_TSWPArchives_proto_enumTypes[1].Descriptor()
}

func (StyleInsertionBehavior) Type() protoreflect.EnumType {
	return &file_TSWPArchives_proto_enumTypes[1]
}

func (x StyleInsertionBehavior) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *StyleInsertionBehavior) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = StyleInsertionBehavior(num)
	return nil
}

// Deprecated: Use StyleInsertionBehavior.Descriptor instead.
func (StyleInsertionBehavior) EnumDescriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{1}
}

type CaretAffinity int32

const (
	CaretAffinity_CaretAffinity_Start CaretAffinity = 0
	CaretAffinity_CaretAffinity_End   CaretAffinity = 1
)

// Enum value maps for CaretAffinity.
var (
	CaretAffinity_name = map[int32]string{
		0: "CaretAffinity_Start",
		1: "CaretAffinity_End",
	}
	CaretAffinity_value = map[string]int32{
		"CaretAffinity_Start": 0,
		"CaretAffinity_End":   1,
	}
)

func (x CaretAffinity) Enum() *CaretAffinity {
	p := new(CaretAffinity)
	*p = x
	return p
}

func (x CaretAffinity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CaretAffinity) Descriptor() protoreflect.EnumDescriptor {
	return file_TSWPArchives_proto_enumTypes[2].Descriptor()
}

func (CaretAffinity) Type() protoreflect.EnumType {
	return &file_TSWPArchives_proto_enumTypes[2]
}

func (x CaretAffinity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CaretAffinity) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CaretAffinity(num)
	return nil
}

// Deprecated: Use CaretAffinity.Descriptor instead.
func (CaretAffinity) EnumDescriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{2}
}

type WritingDirectionType int32

const (
	WritingDirectionType_kWritingDirectionNatural     WritingDirectionType = -1
	WritingDirectionType_kWritingDirectionLeftToRight WritingDirectionType = 0
	WritingDirectionType_kWritingDirectionRightToLeft WritingDirectionType = 1
)

// Enum value maps for WritingDirectionType.
var (
	WritingDirectionType_name = map[int32]string{
		-1: "kWritingDirectionNatural",
		0:  "kWritingDirectionLeftToRight",
		1:  "kWritingDirectionRightToLeft",
	}
	WritingDirectionType_value = map[string]int32{
		"kWritingDirectionNatural":     -1,
		"kWritingDirectionLeftToRight": 0,
		"kWritingDirectionRightToLeft": 1,
	}
)

func (x WritingDirectionType) Enum() *WritingDirectionType {
	p := new(WritingDirectionType)
	*p = x
	return p
}

func (x WritingDirectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WritingDirectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_TSWPArchives_proto_enumTypes[3].Descriptor()
}

func (WritingDirectionType) Type() protoreflect.EnumType {
	return &file_TSWPArchives_proto_enumTypes[3]
}

func (x WritingDirectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *WritingDirectionType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = WritingDirectionType(num)
	return nil
}

// Deprecated: Use WritingDirectionType.Descriptor instead.
func (WritingDirectionType) EnumDescriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{3}
}

type StorageArchive_KindType int32

const (
	StorageArchive_BODY            StorageArchive_KindType = 0
	StorageArchive_HEADER          StorageArchive_KindType = 1
	StorageArchive_FOOTNOTE        StorageArchive_KindType = 2
	StorageArchive_TEXTBOX         StorageArchive_KindType = 3
	StorageArchive_NOTE            StorageArchive_KindType = 4
	StorageArchive_CELL            StorageArchive_KindType = 5
	StorageArchive_UNCLASSIFIED    StorageArchive_KindType = 6
	StorageArchive_TABLEOFCONTENTS StorageArchive_KindType = 7
)

// Enum value maps for StorageArchive_KindType.
var (
	StorageArchive_KindType_name = map[int32]string{
		0: "BODY",
		1: "HEADER",
		2: "FOOTNOTE",
		3: "TEXTBOX",
		4: "NOTE",
		5: "CELL",
		6: "UNCLASSIFIED",
		7: "TABLEOFCONTENTS",
	}
	StorageArchive_KindType_value = map[string]int32{
		"BODY":            0,
		"HEADER":          1,
		"FOOTNOTE":        2,
		"TEXTBOX":         3,
		"NOTE":            4,
		"CELL":            5,
		"UNCLASSIFIED":    6,
		"TABLEOFCONTENTS": 7,
	}
)

func (x StorageArchive_KindType) Enum() *StorageArchive_KindType {
	p := new(StorageArchive_KindType)
	*p = x
	return p
}

func (x StorageArchive_KindType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StorageArchive_KindType) Descriptor() protoreflect.EnumDescriptor {
	return file_TSWPArchives_proto_enumTypes[4].Descriptor()
}

func (StorageArchive_KindType) Type() protoreflect.EnumType {
	return &file_TSWPArchives_proto_enumTypes[4]
}

func (x StorageArchive_KindType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *StorageArchive_KindType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = StorageArchive_KindType(num)
	return nil
}

// Deprecated: Use StorageArchive_KindType.Descriptor instead.
func (StorageArchive_KindType) EnumDescriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{5, 0}
}

type CharacterStylePropertiesArchive_CapitalizationType int32

const (
	CharacterStylePropertiesArchive_kNoCaps    CharacterStylePropertiesArchive_CapitalizationType = 0
	CharacterStylePropertiesArchive_kAllCaps   CharacterStylePropertiesArchive_CapitalizationType = 1
	CharacterStylePropertiesArchive_kSmallCaps CharacterStylePropertiesArchive_CapitalizationType = 2
	CharacterStylePropertiesArchive_kTitled    CharacterStylePropertiesArchive_CapitalizationType = 3
)

// Enum value maps for CharacterStylePropertiesArchive_CapitalizationType.
var (
	CharacterStylePropertiesArchive_CapitalizationType_name = map[int32]string{
		0: "kNoCaps",
		1: "kAllCaps",
		2: "kSmallCaps",
		3: "kTitled",
	}
	CharacterStylePropertiesArchive_CapitalizationType_value = map[string]int32{
		"kNoCaps":    0,
		"kAllCaps":   1,
		"kSmallCaps": 2,
		"kTitled":    3,
	}
)

func (x CharacterStylePropertiesArchive_CapitalizationType) Enum() *CharacterStylePropertiesArchive_CapitalizationType {
	p := new(CharacterStylePropertiesArchive_CapitalizationType)
	*p = x
	return p
}

func (x CharacterStylePropertiesArchive_CapitalizationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CharacterStylePropertiesArchive_CapitalizationType) Descriptor() protoreflect.EnumDescriptor {
	return file_TSWPArchives_proto_enumTypes[5].Descriptor()
}

func (CharacterStylePropertiesArchive_CapitalizationType) Type() protoreflect.EnumType {
	return &file_TSWPArchives_proto_enumTypes[5]
}

func (x CharacterStylePropertiesArchive_CapitalizationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CharacterStylePropertiesArchive_CapitalizationType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CharacterStylePropertiesArchive_CapitalizationType(num)
	return nil
}

// Deprecated: Use CharacterStylePropertiesArchive_CapitalizationType.Descriptor instead.
func (CharacterStylePropertiesArchive_CapitalizationType) EnumDescriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{9, 0}
}

type CharacterStylePropertiesArchive_UnderlineType int32

const (
	CharacterStylePropertiesArchive_kNoUnderline     CharacterStylePropertiesArchive_UnderlineType = 0
	CharacterStylePropertiesArchive_kSingleUnderline CharacterStylePropertiesArchive_UnderlineType = 1
	CharacterStylePropertiesArchive_kDoubleUnderline CharacterStylePropertiesArchive_UnderlineType = 2
	CharacterStylePropertiesArchive_kWavyUnderline   CharacterStylePropertiesArchive_UnderlineType = 3
)

// Enum value maps for CharacterStylePropertiesArchive_UnderlineType.
var (
	CharacterStylePropertiesArchive_UnderlineType_name = map[int32]string{
		0: "kNoUnderline",
		1: "kSingleUnderline",
		2: "kDoubleUnderline",
		3: "kWavyUnderline",
	}
	CharacterStylePropertiesArchive_UnderlineType_value = map[string]int32{
		"kNoUnderline":     0,
		"kSingleUnderline": 1,
		"kDoubleUnderline": 2,
		"kWavyUnderline":   3,
	}
)

func (x CharacterStylePropertiesArchive_UnderlineType) Enum() *CharacterStylePropertiesArchive_UnderlineType {
	p := new(CharacterStylePropertiesArchive_UnderlineType)
	*p = x
	return p
}

func (x CharacterStylePropertiesArchive_UnderlineType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CharacterStylePropertiesArchive_UnderlineType) Descriptor() protoreflect.EnumDescriptor {
	return file_TSWPArchives_proto_enumTypes[6].Descriptor()
}

func (CharacterStylePropertiesArchive_UnderlineType) Type() protoreflect.EnumType {
	return &file_TSWPArchives_proto_enumTypes[6]
}

func (x CharacterStylePropertiesArchive_UnderlineType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CharacterStylePropertiesArchive_UnderlineType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CharacterStylePropertiesArchive_UnderlineType(num)
	return nil
}

// Deprecated: Use CharacterStylePropertiesArchive_UnderlineType.Descriptor instead.
func (CharacterStylePropertiesArchive_UnderlineType) EnumDescriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{9, 1}
}

type CharacterStylePropertiesArchive_LigaturesType int32

const (
	CharacterStylePropertiesArchive_kRequiredLigatures CharacterStylePropertiesArchive_LigaturesType = 0
	CharacterStylePropertiesArchive_kStandardLigatures CharacterStylePropertiesArchive_LigaturesType = 1
	CharacterStylePropertiesArchive_kAllLigatures      CharacterStylePropertiesArchive_LigaturesType = 2
)

// Enum value maps for CharacterStylePropertiesArchive_LigaturesType.
var (
	CharacterStylePropertiesArchive_LigaturesType_name = map[int32]string{
		0: "kRequiredLigatures",
		1: "kStandardLigatures",
		2: "kAllLigatures",
	}
	CharacterStylePropertiesArchive_LigaturesType_value = map[string]int32{
		"kRequiredLigatures": 0,
		"kStandardLigatures": 1,
		"kAllLigatures":      2,
	}
)

func (x CharacterStylePropertiesArchive_LigaturesType) Enum() *CharacterStylePropertiesArchive_LigaturesType {
	p := new(CharacterStylePropertiesArchive_LigaturesType)
	*p = x
	return p
}

func (x CharacterStylePropertiesArchive_LigaturesType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CharacterStylePropertiesArchive_LigaturesType) Descriptor() protoreflect.EnumDescriptor {
	return file_TSWPArchives_proto_enumTypes[7].Descriptor()
}

func (CharacterStylePropertiesArchive_LigaturesType) Type() protoreflect.EnumType {
	return &file_TSWPArchives_proto_enumTypes[7]
}

func (x CharacterStylePropertiesArchive_LigaturesType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CharacterStylePropertiesArchive_LigaturesType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CharacterStylePropertiesArchive_LigaturesType(num)
	return nil
}

// Deprecated: Use CharacterStylePropertiesArchive_LigaturesType.Descriptor instead.
func (CharacterStylePropertiesArchive_LigaturesType) EnumDescriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{9, 2}
}

type CharacterStylePropertiesArchive_StrikethruType int32

const (
	CharacterStylePropertiesArchive_kNoStrikethru     CharacterStylePropertiesArchive_StrikethruType = 0
	CharacterStylePropertiesArchive_kSingleStrikethru CharacterStylePropertiesArchive_StrikethruType = 1
	CharacterStylePropertiesArchive_kDoubleStrikethru CharacterStylePropertiesArchive_StrikethruType = 2
	CharacterStylePropertiesArchive_kTripleStrikethru CharacterStylePropertiesArchive_StrikethruType = 3
)

// Enum value maps for CharacterStylePropertiesArchive_StrikethruType.
var (
	CharacterStylePropertiesArchive_StrikethruType_name = map[int32]string{
		0: "kNoStrikethru",
		1: "kSingleStrikethru",
		2: "kDoubleStrikethru",
		3: "kTripleStrikethru",
	}
	CharacterStylePropertiesArchive_StrikethruType_value = map[string]int32{
		"kNoStrikethru":     0,
		"kSingleStrikethru": 1,
		"kDoubleStrikethru": 2,
		"kTripleStrikethru": 3,
	}
)

func (x CharacterStylePropertiesArchive_StrikethruType) Enum() *CharacterStylePropertiesArchive_StrikethruType {
	p := new(CharacterStylePropertiesArchive_StrikethruType)
	*p = x
	return p
}

func (x CharacterStylePropertiesArchive_StrikethruType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CharacterStylePropertiesArchive_StrikethruType) Descriptor() protoreflect.EnumDescriptor {
	return file_TSWPArchives_proto_enumTypes[8].Descriptor()
}

func (CharacterStylePropertiesArchive_StrikethruType) Type() protoreflect.EnumType {
	return &file_TSWPArchives_proto_enumTypes[8]
}

func (x CharacterStylePropertiesArchive_StrikethruType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CharacterStylePropertiesArchive_StrikethruType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CharacterStylePropertiesArchive_StrikethruType(num)
	return nil
}

// Deprecated: Use CharacterStylePropertiesArchive_StrikethruType.Descriptor instead.
func (CharacterStylePropertiesArchive_StrikethruType) EnumDescriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{9, 3}
}

type CharacterStylePropertiesArchive_SuperscriptType int32

const (
	CharacterStylePropertiesArchive_kNoScript    CharacterStylePropertiesArchive_SuperscriptType = 0
	CharacterStylePropertiesArchive_kSuperscript CharacterStylePropertiesArchive_SuperscriptType = 1
	CharacterStylePropertiesArchive_kSubscript   CharacterStylePropertiesArchive_SuperscriptType = 2
)

// Enum value maps for CharacterStylePropertiesArchive_SuperscriptType.
var (
	CharacterStylePropertiesArchive_SuperscriptType_name = map[int32]string{
		0: "kNoScript",
		1: "kSuperscript",
		2: "kSubscript",
	}
	CharacterStylePropertiesArchive_SuperscriptType_value = map[string]int32{
		"kNoScript":    0,
		"kSuperscript": 1,
		"kSubscript":   2,
	}
)

func (x CharacterStylePropertiesArchive_SuperscriptType) Enum() *CharacterStylePropertiesArchive_SuperscriptType {
	p := new(CharacterStylePropertiesArchive_SuperscriptType)
	*p = x
	return p
}

func (x CharacterStylePropertiesArchive_SuperscriptType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CharacterStylePropertiesArchive_SuperscriptType) Descriptor() protoreflect.EnumDescriptor {
	return file_TSWPArchives_proto_enumTypes[9].Descriptor()
}

func (CharacterStylePropertiesArchive_SuperscriptType) Type() protoreflect.EnumType {
	return &file_TSWPArchives_proto_enumTypes[9]
}

func (x CharacterStylePropertiesArchive_SuperscriptType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CharacterStylePropertiesArchive_SuperscriptType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CharacterStylePropertiesArchive_SuperscriptType(num)
	return nil
}

// Deprecated: Use CharacterStylePropertiesArchive_SuperscriptType.Descriptor instead.
func (CharacterStylePropertiesArchive_SuperscriptType) EnumDescriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{9, 4}
}

type TabArchive_TabAlignmentType int32

const (
	TabArchive_kTabAlignmentLeft    TabArchive_TabAlignmentType = 0
	TabArchive_kTabAlignmentCenter  TabArchive_TabAlignmentType = 1
	TabArchive_kTabAlignmentRight   TabArchive_TabAlignmentType = 2
	TabArchive_kTabAlignmentDecimal TabArchive_TabAlignmentType = 3
)

// Enum value maps for TabArchive_TabAlignmentType.
var (
	TabArchive_TabAlignmentType_name = map[int32]string{
		0: "kTabAlignmentLeft",
		1: "kTabAlignmentCenter",
		2: "kTabAlignmentRight",
		3: "kTabAlignmentDecimal",
	}
	TabArchive_TabAlignmentType_value = map[string]int32{
		"kTabAlignmentLeft":    0,
		"kTabAlignmentCenter":  1,
		"kTabAlignmentRight":   2,
		"kTabAlignmentDecimal": 3,
	}
)

func (x TabArchive_TabAlignmentType) Enum() *TabArchive_TabAlignmentType {
	p := new(TabArchive_TabAlignmentType)
	*p = x
	return p
}

func (x TabArchive_TabAlignmentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TabArchive_TabAlignmentType) Descriptor() protoreflect.EnumDescriptor {
	return file_TSWPArchives_proto_enumTypes[10].Descriptor()
}

func (TabArchive_TabAlignmentType) Type() protoreflect.EnumType {
	return &file_TSWPArchives_proto_enumTypes[10]
}

func (x TabArchive_TabAlignmentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TabArchive_TabAlignmentType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TabArchive_TabAlignmentType(num)
	return nil
}

// Deprecated: Use TabArchive_TabAlignmentType.Descriptor instead.
func (TabArchive_TabAlignmentType) EnumDescriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{11, 0}
}

type LineSpacingArchive_LineSpacingModeType int32

const (
	LineSpacingArchive_kRelativeLineSpacing     LineSpacingArchive_LineSpacingModeType = 0
	LineSpacingArchive_kMinimumLineSpacing      LineSpacingArchive_LineSpacingModeType = 1
	LineSpacingArchive_kExactLineSpacing        LineSpacingArchive_LineSpacingModeType = 2
	LineSpacingArchive_kMaximumLineSpacing      LineSpacingArchive_LineSpacingModeType = 3
	LineSpacingArchive_kSpaceBetweenLineSpacing LineSpacingArchive_LineSpacingModeType = 4
)

// Enum value maps for LineSpacingArchive_LineSpacingModeType.
var (
	LineSpacingArchive_LineSpacingModeType_name = map[int32]string{
		0: "kRelativeLineSpacing",
		1: "kMinimumLineSpacing",
		2: "kExactLineSpacing",
		3: "kMaximumLineSpacing",
		4: "kSpaceBetweenLineSpacing",
	}
	LineSpacingArchive_LineSpacingModeType_value = map[string]int32{
		"kRelativeLineSpacing":     0,
		"kMinimumLineSpacing":      1,
		"kExactLineSpacing":        2,
		"kMaximumLineSpacing":      3,
		"kSpaceBetweenLineSpacing": 4,
	}
)

func (x LineSpacingArchive_LineSpacingModeType) Enum() *LineSpacingArchive_LineSpacingModeType {
	p := new(LineSpacingArchive_LineSpacingModeType)
	*p = x
	return p
}

func (x LineSpacingArchive_LineSpacingModeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LineSpacingArchive_LineSpacingModeType) Descriptor() protoreflect.EnumDescriptor {
	return file_TSWPArchives_proto_enumTypes[11].Descriptor()
}

func (LineSpacingArchive_LineSpacingModeType) Type() protoreflect.EnumType {
	return &file_TSWPArchives_proto_enumTypes[11]
}

func (x LineSpacingArchive_LineSpacingModeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *LineSpacingArchive_LineSpacingModeType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = LineSpacingArchive_LineSpacingModeType(num)
	return nil
}

// Deprecated: Use LineSpacingArchive_LineSpacingModeType.Descriptor instead.
func (LineSpacingArchive_LineSpacingModeType) EnumDescriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{13, 0}
}

type ParagraphStylePropertiesArchive_TextAlignmentType int32

const (
	ParagraphStylePropertiesArchive_TATvalue0 ParagraphStylePropertiesArchive_TextAlignmentType = 0
	ParagraphStylePropertiesArchive_TATvalue1 ParagraphStylePropertiesArchive_TextAlignmentType = 1
	ParagraphStylePropertiesArchive_TATvalue2 ParagraphStylePropertiesArchive_TextAlignmentType = 2
	ParagraphStylePropertiesArchive_TATvalue3 ParagraphStylePropertiesArchive_TextAlignmentType = 3
	ParagraphStylePropertiesArchive_TATvalue4 ParagraphStylePropertiesArchive_TextAlignmentType = 4
)

// Enum value maps for ParagraphStylePropertiesArchive_TextAlignmentType.
var (
	ParagraphStylePropertiesArchive_TextAlignmentType_name = map[int32]string{
		0: "TATvalue0",
		1: "TATvalue1",
		2: "TATvalue2",
		3: "TATvalue3",
		4: "TATvalue4",
	}
	ParagraphStylePropertiesArchive_TextAlignmentType_value = map[string]int32{
		"TATvalue0": 0,
		"TATvalue1": 1,
		"TATvalue2": 2,
		"TATvalue3": 3,
		"TATvalue4": 4,
	}
)

func (x ParagraphStylePropertiesArchive_TextAlignmentType) Enum() *ParagraphStylePropertiesArchive_TextAlignmentType {
	p := new(ParagraphStylePropertiesArchive_TextAlignmentType)
	*p = x
	return p
}

func (x ParagraphStylePropertiesArchive_TextAlignmentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ParagraphStylePropertiesArchive_TextAlignmentType) Descriptor() protoreflect.EnumDescriptor {
	return file_TSWPArchives_proto_enumTypes[12].Descriptor()
}

func (ParagraphStylePropertiesArchive_TextAlignmentType) Type() protoreflect.EnumType {
	return &file_TSWPArchives_proto_enumTypes[12]
}

func (x ParagraphStylePropertiesArchive_TextAlignmentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ParagraphStylePropertiesArchive_TextAlignmentType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ParagraphStylePropertiesArchive_TextAlignmentType(num)
	return nil
}

// Deprecated: Use ParagraphStylePropertiesArchive_TextAlignmentType.Descriptor instead.
func (ParagraphStylePropertiesArchive_TextAlignmentType) EnumDescriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{14, 0}
}

type ParagraphStylePropertiesArchive_ParagraphBorderType int32

const (
	ParagraphStylePropertiesArchive_PBTvalue0 ParagraphStylePropertiesArchive_ParagraphBorderType = 0
	ParagraphStylePropertiesArchive_PBTvalue1 ParagraphStylePropertiesArchive_ParagraphBorderType = 1
	ParagraphStylePropertiesArchive_PBTvalue2 ParagraphStylePropertiesArchive_ParagraphBorderType = 2
	ParagraphStylePropertiesArchive_PBTvalue3 ParagraphStylePropertiesArchive_ParagraphBorderType = 3
	ParagraphStylePropertiesArchive_PBTvalue4 ParagraphStylePropertiesArchive_ParagraphBorderType = 4
)

// Enum value maps for ParagraphStylePropertiesArchive_ParagraphBorderType.
var (
	ParagraphStylePropertiesArchive_ParagraphBorderType_name = map[int32]string{
		0: "PBTvalue0",
		1: "PBTvalue1",
		2: "PBTvalue2",
		3: "PBTvalue3",
		4: "PBTvalue4",
	}
	ParagraphStylePropertiesArchive_ParagraphBorderType_value = map[string]int32{
		"PBTvalue0": 0,
		"PBTvalue1": 1,
		"PBTvalue2": 2,
		"PBTvalue3": 3,
		"PBTvalue4": 4,
	}
)

func (x ParagraphStylePropertiesArchive_ParagraphBorderType) Enum() *ParagraphStylePropertiesArchive_ParagraphBorderType {
	p := new(ParagraphStylePropertiesArchive_ParagraphBorderType)
	*p = x
	return p
}

func (x ParagraphStylePropertiesArchive_ParagraphBorderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ParagraphStylePropertiesArchive_ParagraphBorderType) Descriptor() protoreflect.EnumDescriptor {
	return file_TSWPArchives_proto_enumTypes[13].Descriptor()
}

func (ParagraphStylePropertiesArchive_ParagraphBorderType) Type() protoreflect.EnumType {
	return &file_TSWPArchives_proto_enumTypes[13]
}

func (x ParagraphStylePropertiesArchive_ParagraphBorderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ParagraphStylePropertiesArchive_ParagraphBorderType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ParagraphStylePropertiesArchive_ParagraphBorderType(num)
	return nil
}

// Deprecated: Use ParagraphStylePropertiesArchive_ParagraphBorderType.Descriptor instead.
func (ParagraphStylePropertiesArchive_ParagraphBorderType) EnumDescriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{14, 1}
}

type ParagraphStylePropertiesArchive_OutlineStyleType int32

const (
	ParagraphStylePropertiesArchive_OSTvalue0 ParagraphStylePropertiesArchive_OutlineStyleType = 0
	ParagraphStylePropertiesArchive_OSTvalue1 ParagraphStylePropertiesArchive_OutlineStyleType = 1
	ParagraphStylePropertiesArchive_OSTvalue2 ParagraphStylePropertiesArchive_OutlineStyleType = 2
)

// Enum value maps for ParagraphStylePropertiesArchive_OutlineStyleType.
var (
	ParagraphStylePropertiesArchive_OutlineStyleType_name = map[int32]string{
		0: "OSTvalue0",
		1: "OSTvalue1",
		2: "OSTvalue2",
	}
	ParagraphStylePropertiesArchive_OutlineStyleType_value = map[string]int32{
		"OSTvalue0": 0,
		"OSTvalue1": 1,
		"OSTvalue2": 2,
	}
)

func (x ParagraphStylePropertiesArchive_OutlineStyleType) Enum() *ParagraphStylePropertiesArchive_OutlineStyleType {
	p := new(ParagraphStylePropertiesArchive_OutlineStyleType)
	*p = x
	return p
}

func (x ParagraphStylePropertiesArchive_OutlineStyleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ParagraphStylePropertiesArchive_OutlineStyleType) Descriptor() protoreflect.EnumDescriptor {
	return file_TSWPArchives_proto_enumTypes[14].Descriptor()
}

func (ParagraphStylePropertiesArchive_OutlineStyleType) Type() protoreflect.EnumType {
	return &file_TSWPArchives_proto_enumTypes[14]
}

func (x ParagraphStylePropertiesArchive_OutlineStyleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ParagraphStylePropertiesArchive_OutlineStyleType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ParagraphStylePropertiesArchive_OutlineStyleType(num)
	return nil
}

// Deprecated: Use ParagraphStylePropertiesArchive_OutlineStyleType.Descriptor instead.
func (ParagraphStylePropertiesArchive_OutlineStyleType) EnumDescriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{14, 2}
}

type ListStyleArchive_LabelType int32

const (
	ListStyleArchive_kNone   ListStyleArchive_LabelType = 0
	ListStyleArchive_kImage  ListStyleArchive_LabelType = 1
	ListStyleArchive_kString ListStyleArchive_LabelType = 2
	ListStyleArchive_kNumber ListStyleArchive_LabelType = 3
)

// Enum value maps for ListStyleArchive_LabelType.
var (
	ListStyleArchive_LabelType_name = map[int32]string{
		0: "kNone",
		1: "kImage",
		2: "kString",
		3: "kNumber",
	}
	ListStyleArchive_LabelType_value = map[string]int32{
		"kNone":   0,
		"kImage":  1,
		"kString": 2,
		"kNumber": 3,
	}
)

func (x ListStyleArchive_LabelType) Enum() *ListStyleArchive_LabelType {
	p := new(ListStyleArchive_LabelType)
	*p = x
	return p
}

func (x ListStyleArchive_LabelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListStyleArchive_LabelType) Descriptor() protoreflect.EnumDescriptor {
	return file_TSWPArchives_proto_enumTypes[15].Descriptor()
}

func (ListStyleArchive_LabelType) Type() protoreflect.EnumType {
	return &file_TSWPArchives_proto_enumTypes[15]
}

func (x ListStyleArchive_LabelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ListStyleArchive_LabelType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ListStyleArchive_LabelType(num)
	return nil
}

// Deprecated: Use ListStyleArchive_LabelType.Descriptor instead.
func (ListStyleArchive_LabelType) EnumDescriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{16, 0}
}

type ListStyleArchive_NumberType int32

const (
	ListStyleArchive_kNumericDecimal                                     ListStyleArchive_NumberType = 0
	ListStyleArchive_kNumericDoubleParen                                 ListStyleArchive_NumberType = 1
	ListStyleArchive_kNumericRightParen                                  ListStyleArchive_NumberType = 2
	ListStyleArchive_kRomanUpperDecimal                                  ListStyleArchive_NumberType = 3
	ListStyleArchive_kRomanUpperDoubleParen                              ListStyleArchive_NumberType = 4
	ListStyleArchive_kRomanUpperRightParen                               ListStyleArchive_NumberType = 5
	ListStyleArchive_kRomanLowerDecimal                                  ListStyleArchive_NumberType = 6
	ListStyleArchive_kRomanLowerDoubleParen                              ListStyleArchive_NumberType = 7
	ListStyleArchive_kRomanLowerRightParen                               ListStyleArchive_NumberType = 8
	ListStyleArchive_kAlphaUpperDecimal                                  ListStyleArchive_NumberType = 9
	ListStyleArchive_kAlphaUpperDoubleParen                              ListStyleArchive_NumberType = 10
	ListStyleArchive_kAlphaUpperRightParen                               ListStyleArchive_NumberType = 11
	ListStyleArchive_kAlphaLowerDecimal                                  ListStyleArchive_NumberType = 12
	ListStyleArchive_kAlphaLowerDoubleParen                              ListStyleArchive_NumberType = 13
	ListStyleArchive_kAlphaLowerRightParen                               ListStyleArchive_NumberType = 14
	ListStyleArchive_kIdeographicJapaneseDecimalKind                     ListStyleArchive_NumberType = 15
	ListStyleArchive_kIdeographicJapaneseDoubleParenKind                 ListStyleArchive_NumberType = 16
	ListStyleArchive_kIdeographicJapaneseRightParenKind                  ListStyleArchive_NumberType = 17
	ListStyleArchive_kHiraganaDecimalKind                                ListStyleArchive_NumberType = 18
	ListStyleArchive_kHiraganaDoubleParenKind                            ListStyleArchive_NumberType = 19
	ListStyleArchive_kHiraganaRightParenKind                             ListStyleArchive_NumberType = 20
	ListStyleArchive_kKatakanaDecimalKind                                ListStyleArchive_NumberType = 21
	ListStyleArchive_kKatakanaDoubleParenKind                            ListStyleArchive_NumberType = 22
	ListStyleArchive_kKatakanaRightParenKind                             ListStyleArchive_NumberType = 23
	ListStyleArchive_kHiraganaIrohaDecimalKind                           ListStyleArchive_NumberType = 24
	ListStyleArchive_kHiraganaIrohaDoubleParenKind                       ListStyleArchive_NumberType = 25
	ListStyleArchive_kHiraganaIrohaRightParenKind                        ListStyleArchive_NumberType = 26
	ListStyleArchive_kKatakanaIrohaDecimalKind                           ListStyleArchive_NumberType = 27
	ListStyleArchive_kKatakanaIrohaDoubleParenKind                       ListStyleArchive_NumberType = 28
	ListStyleArchive_kKatakanaIrohaRightParenKind                        ListStyleArchive_NumberType = 29
	ListStyleArchive_kIdeographicSimplifiedChineseDecimalKind            ListStyleArchive_NumberType = 30
	ListStyleArchive_kIdeographicSimplifiedChineseDoubleParenKind        ListStyleArchive_NumberType = 31
	ListStyleArchive_kIdeographicSimplifiedChineseRightParenKind         ListStyleArchive_NumberType = 32
	ListStyleArchive_kIdeographicTraditionalChineseDecimalKind           ListStyleArchive_NumberType = 33
	ListStyleArchive_kIdeographicTraditionalChineseDoubleParenKind       ListStyleArchive_NumberType = 34
	ListStyleArchive_kIdeographicTraditionalChineseRightParenKind        ListStyleArchive_NumberType = 35
	ListStyleArchive_kIdeographicFormalJapaneseDecimalKind               ListStyleArchive_NumberType = 36
	ListStyleArchive_kIdeographicFormalJapaneseDoubleParenKind           ListStyleArchive_NumberType = 37
	ListStyleArchive_kIdeographicFormalJapaneseRightParenKind            ListStyleArchive_NumberType = 38
	ListStyleArchive_kIdeographicFormalSimplifiedChineseDecimalKind      ListStyleArchive_NumberType = 39
	ListStyleArchive_kIdeographicFormalSimplifiedChineseDoubleParenKind  ListStyleArchive_NumberType = 40
	ListStyleArchive_kIdeographicFormalSimplifiedChineseRightParenKind   ListStyleArchive_NumberType = 41
	ListStyleArchive_kIdeographicFormalTraditionalChineseDecimalKind     ListStyleArchive_NumberType = 42
	ListStyleArchive_kIdeographicFormalTraditionalChineseDoubleParenKind ListStyleArchive_NumberType = 43
	ListStyleArchive_kIdeographicFormalTraditionalChineseRightParenKind  ListStyleArchive_NumberType = 44
	ListStyleArchive_kKoreanAlphabetDecimalKind                          ListStyleArchive_NumberType = 45
	ListStyleArchive_kKoreanAlphabetDoubleParenKind                      ListStyleArchive_NumberType = 46
	ListStyleArchive_kKoreanAlphabetRightParenKind                       ListStyleArchive_NumberType = 47
	ListStyleArchive_kCircledNumberKind                                  ListStyleArchive_NumberType = 48
	ListStyleArchive_kArabianNumericDecimalKind                          ListStyleArchive_NumberType = 49
	ListStyleArchive_kArabianNumericDoubleParenKind                      ListStyleArchive_NumberType = 50
	ListStyleArchive_kArabianNumericRightParenKind                       ListStyleArchive_NumberType = 51
	ListStyleArchive_kArabianAlphaDecimalKind                            ListStyleArchive_NumberType = 52
	ListStyleArchive_kArabianAlphaDoubleParenKind                        ListStyleArchive_NumberType = 53
	ListStyleArchive_kArabianAlphaRightParenKind                         ListStyleArchive_NumberType = 54
	ListStyleArchive_kArabianAbjadDecimalKind                            ListStyleArchive_NumberType = 55
	ListStyleArchive_kArabianAbjadDoubleParenKind                        ListStyleArchive_NumberType = 56
	ListStyleArchive_kArabianAbjadRightParenKind                         ListStyleArchive_NumberType = 57
	ListStyleArchive_kHebrewAlphaDecimalKind                             ListStyleArchive_NumberType = 58
	ListStyleArchive_kHebrewAlphaDoubleParenKind                         ListStyleArchive_NumberType = 59
	ListStyleArchive_kHebrewAlphaRightParenKind                          ListStyleArchive_NumberType = 60
	ListStyleArchive_kHebrewBiblicalStandardKind                         ListStyleArchive_NumberType = 61
	ListStyleArchive_kHebrewBiblicalDecimalKind                          ListStyleArchive_NumberType = 62
	ListStyleArchive_kHebrewBiblicalDoubleParenKind                      ListStyleArchive_NumberType = 63
	ListStyleArchive_kHebrewBiblicalRightParenKind                       ListStyleArchive_NumberType = 64
)

// Enum value maps for ListStyleArchive_NumberType.
var (
	ListStyleArchive_NumberType_name = map[int32]string{
		0:  "kNumericDecimal",
		1:  "kNumericDoubleParen",
		2:  "kNumericRightParen",
		3:  "kRomanUpperDecimal",
		4:  "kRomanUpperDoubleParen",
		5:  "kRomanUpperRightParen",
		6:  "kRomanLowerDecimal",
		7:  "kRomanLowerDoubleParen",
		8:  "kRomanLowerRightParen",
		9:  "kAlphaUpperDecimal",
		10: "kAlphaUpperDoubleParen",
		11: "kAlphaUpperRightParen",
		12: "kAlphaLowerDecimal",
		13: "kAlphaLowerDoubleParen",
		14: "kAlphaLowerRightParen",
		15: "kIdeographicJapaneseDecimalKind",
		16: "kIdeographicJapaneseDoubleParenKind",
		17: "kIdeographicJapaneseRightParenKind",
		18: "kHiraganaDecimalKind",
		19: "kHiraganaDoubleParenKind",
		20: "kHiraganaRightParenKind",
		21: "kKatakanaDecimalKind",
		22: "kKatakanaDoubleParenKind",
		23: "kKatakanaRightParenKind",
		24: "kHiraganaIrohaDecimalKind",
		25: "kHiraganaIrohaDoubleParenKind",
		26: "kHiraganaIrohaRightParenKind",
		27: "kKatakanaIrohaDecimalKind",
		28: "kKatakanaIrohaDoubleParenKind",
		29: "kKatakanaIrohaRightParenKind",
		30: "kIdeographicSimplifiedChineseDecimalKind",
		31: "kIdeographicSimplifiedChineseDoubleParenKind",
		32: "kIdeographicSimplifiedChineseRightParenKind",
		33: "kIdeographicTraditionalChineseDecimalKind",
		34: "kIdeographicTraditionalChineseDoubleParenKind",
		35: "kIdeographicTraditionalChineseRightParenKind",
		36: "kIdeographicFormalJapaneseDecimalKind",
		37: "kIdeographicFormalJapaneseDoubleParenKind",
		38: "kIdeographicFormalJapaneseRightParenKind",
		39: "kIdeographicFormalSimplifiedChineseDecimalKind",
		40: "kIdeographicFormalSimplifiedChineseDoubleParenKind",
		41: "kIdeographicFormalSimplifiedChineseRightParenKind",
		42: "kIdeographicFormalTraditionalChineseDecimalKind",
		43: "kIdeographicFormalTraditionalChineseDoubleParenKind",
		44: "kIdeographicFormalTraditionalChineseRightParenKind",
		45: "kKoreanAlphabetDecimalKind",
		46: "kKoreanAlphabetDoubleParenKind",
		47: "kKoreanAlphabetRightParenKind",
		48: "kCircledNumberKind",
		49: "kArabianNumericDecimalKind",
		50: "kArabianNumericDoubleParenKind",
		51: "kArabianNumericRightParenKind",
		52: "kArabianAlphaDecimalKind",
		53: "kArabianAlphaDoubleParenKind",
		54: "kArabianAlphaRightParenKind",
		55: "kArabianAbjadDecimalKind",
		56: "kArabianAbjadDoubleParenKind",
		57: "kArabianAbjadRightParenKind",
		58: "kHebrewAlphaDecimalKind",
		59: "kHebrewAlphaDoubleParenKind",
		60: "kHebrewAlphaRightParenKind",
		61: "kHebrewBiblicalStandardKind",
		62: "kHebrewBiblicalDecimalKind",
		63: "kHebrewBiblicalDoubleParenKind",
		64: "kHebrewBiblicalRightParenKind",
	}
	ListStyleArchive_NumberType_value = map[string]int32{
		"kNumericDecimal":                                     0,
		"kNumericDoubleParen":                                 1,
		"kNumericRightParen":                                  2,
		"kRomanUpperDecimal":                                  3,
		"kRomanUpperDoubleParen":                              4,
		"kRomanUpperRightParen":                               5,
		"kRomanLowerDecimal":                                  6,
		"kRomanLowerDoubleParen":                              7,
		"kRomanLowerRightParen":                               8,
		"kAlphaUpperDecimal":                                  9,
		"kAlphaUpperDoubleParen":                              10,
		"kAlphaUpperRightParen":                               11,
		"kAlphaLowerDecimal":                                  12,
		"kAlphaLowerDoubleParen":                              13,
		"kAlphaLowerRightParen":                               14,
		"kIdeographicJapaneseDecimalKind":                     15,
		"kIdeographicJapaneseDoubleParenKind":                 16,
		"kIdeographicJapaneseRightParenKind":                  17,
		"kHiraganaDecimalKind":                                18,
		"kHiraganaDoubleParenKind":                            19,
		"kHiraganaRightParenKind":                             20,
		"kKatakanaDecimalKind":                                21,
		"kKatakanaDoubleParenKind":                            22,
		"kKatakanaRightParenKind":                             23,
		"kHiraganaIrohaDecimalKind":                           24,
		"kHiraganaIrohaDoubleParenKind":                       25,
		"kHiraganaIrohaRightParenKind":                        26,
		"kKatakanaIrohaDecimalKind":                           27,
		"kKatakanaIrohaDoubleParenKind":                       28,
		"kKatakanaIrohaRightParenKind":                        29,
		"kIdeographicSimplifiedChineseDecimalKind":            30,
		"kIdeographicSimplifiedChineseDoubleParenKind":        31,
		"kIdeographicSimplifiedChineseRightParenKind":         32,
		"kIdeographicTraditionalChineseDecimalKind":           33,
		"kIdeographicTraditionalChineseDoubleParenKind":       34,
		"kIdeographicTraditionalChineseRightParenKind":        35,
		"kIdeographicFormalJapaneseDecimalKind":               36,
		"kIdeographicFormalJapaneseDoubleParenKind":           37,
		"kIdeographicFormalJapaneseRightParenKind":            38,
		"kIdeographicFormalSimplifiedChineseDecimalKind":      39,
		"kIdeographicFormalSimplifiedChineseDoubleParenKind":  40,
		"kIdeographicFormalSimplifiedChineseRightParenKind":   41,
		"kIdeographicFormalTraditionalChineseDecimalKind":     42,
		"kIdeographicFormalTraditionalChineseDoubleParenKind": 43,
		"kIdeographicFormalTraditionalChineseRightParenKind":  44,
		"kKoreanAlphabetDecimalKind":                          45,
		"kKoreanAlphabetDoubleParenKind":                      46,
		"kKoreanAlphabetRightParenKind":                       47,
		"kCircledNumberKind":                                  48,
		"kArabianNumericDecimalKind":                          49,
		"kArabianNumericDoubleParenKind":                      50,
		"kArabianNumericRightParenKind":                       51,
		"kArabianAlphaDecimalKind":                            52,
		"kArabianAlphaDoubleParenKind":                        53,
		"kArabianAlphaRightParenKind":                         54,
		"kArabianAbjadDecimalKind":                            55,
		"kArabianAbjadDoubleParenKind":                        56,
		"kArabianAbjadRightParenKind":                         57,
		"kHebrewAlphaDecimalKind":                             58,
		"kHebrewAlphaDoubleParenKind":                         59,
		"kHebrewAlphaRightParenKind":                          60,
		"kHebrewBiblicalStandardKind":                         61,
		"kHebrewBiblicalDecimalKind":                          62,
		"kHebrewBiblicalDoubleParenKind":                      63,
		"kHebrewBiblicalRightParenKind":                       64,
	}
)

func (x ListStyleArchive_NumberType) Enum() *ListStyleArchive_NumberType {
	p := new(ListStyleArchive_NumberType)
	*p = x
	return p
}

func (x ListStyleArchive_NumberType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListStyleArchive_NumberType) Descriptor() protoreflect.EnumDescriptor {
	return file_TSWPArchives_proto_enumTypes[16].Descriptor()
}

func (ListStyleArchive_NumberType) Type() protoreflect.EnumType {
	return &file_TSWPArchives_proto_enumTypes[16]
}

func (x ListStyleArchive_NumberType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ListStyleArchive_NumberType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ListStyleArchive_NumberType(num)
	return nil
}

// Deprecated: Use ListStyleArchive_NumberType.Descriptor instead.
func (ListStyleArchive_NumberType) EnumDescriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{16, 1}
}

type ColumnStylePropertiesArchive_VerticalAlignmentType int32

const (
	ColumnStylePropertiesArchive_kFrameAlignTop     ColumnStylePropertiesArchive_VerticalAlignmentType = 0
	ColumnStylePropertiesArchive_kFrameAlignMiddle  ColumnStylePropertiesArchive_VerticalAlignmentType = 1
	ColumnStylePropertiesArchive_kFrameAlignBottom  ColumnStylePropertiesArchive_VerticalAlignmentType = 2
	ColumnStylePropertiesArchive_kFrameAlignJustify ColumnStylePropertiesArchive_VerticalAlignmentType = 3
)

// Enum value maps for ColumnStylePropertiesArchive_VerticalAlignmentType.
var (
	ColumnStylePropertiesArchive_VerticalAlignmentType_name = map[int32]string{
		0: "kFrameAlignTop",
		1: "kFrameAlignMiddle",
		2: "kFrameAlignBottom",
		3: "kFrameAlignJustify",
	}
	ColumnStylePropertiesArchive_VerticalAlignmentType_value = map[string]int32{
		"kFrameAlignTop":     0,
		"kFrameAlignMiddle":  1,
		"kFrameAlignBottom":  2,
		"kFrameAlignJustify": 3,
	}
)

func (x ColumnStylePropertiesArchive_VerticalAlignmentType) Enum() *ColumnStylePropertiesArchive_VerticalAlignmentType {
	p := new(ColumnStylePropertiesArchive_VerticalAlignmentType)
	*p = x
	return p
}

func (x ColumnStylePropertiesArchive_VerticalAlignmentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ColumnStylePropertiesArchive_VerticalAlignmentType) Descriptor() protoreflect.EnumDescriptor {
	return file_TSWPArchives_proto_enumTypes[17].Descriptor()
}

func (ColumnStylePropertiesArchive_VerticalAlignmentType) Type() protoreflect.EnumType {
	return &file_TSWPArchives_proto_enumTypes[17]
}

func (x ColumnStylePropertiesArchive_VerticalAlignmentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ColumnStylePropertiesArchive_VerticalAlignmentType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ColumnStylePropertiesArchive_VerticalAlignmentType(num)
	return nil
}

// Deprecated: Use ColumnStylePropertiesArchive_VerticalAlignmentType.Descriptor instead.
func (ColumnStylePropertiesArchive_VerticalAlignmentType) EnumDescriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{20, 0}
}

type TSWPShapeStylePropertiesArchive_VerticalAlignmentType int32

const (
	TSWPShapeStylePropertiesArchive_kFrameAlignTop     TSWPShapeStylePropertiesArchive_VerticalAlignmentType = 0
	TSWPShapeStylePropertiesArchive_kFrameAlignMiddle  TSWPShapeStylePropertiesArchive_VerticalAlignmentType = 1
	TSWPShapeStylePropertiesArchive_kFrameAlignBottom  TSWPShapeStylePropertiesArchive_VerticalAlignmentType = 2
	TSWPShapeStylePropertiesArchive_kFrameAlignJustify TSWPShapeStylePropertiesArchive_VerticalAlignmentType = 3
)

// Enum value maps for TSWPShapeStylePropertiesArchive_VerticalAlignmentType.
var (
	TSWPShapeStylePropertiesArchive_VerticalAlignmentType_name = map[int32]string{
		0: "kFrameAlignTop",
		1: "kFrameAlignMiddle",
		2: "kFrameAlignBottom",
		3: "kFrameAlignJustify",
	}
	TSWPShapeStylePropertiesArchive_VerticalAlignmentType_value = map[string]int32{
		"kFrameAlignTop":     0,
		"kFrameAlignMiddle":  1,
		"kFrameAlignBottom":  2,
		"kFrameAlignJustify": 3,
	}
)

func (x TSWPShapeStylePropertiesArchive_VerticalAlignmentType) Enum() *TSWPShapeStylePropertiesArchive_VerticalAlignmentType {
	p := new(TSWPShapeStylePropertiesArchive_VerticalAlignmentType)
	*p = x
	return p
}

func (x TSWPShapeStylePropertiesArchive_VerticalAlignmentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TSWPShapeStylePropertiesArchive_VerticalAlignmentType) Descriptor() protoreflect.EnumDescriptor {
	return file_TSWPArchives_proto_enumTypes[18].Descriptor()
}

func (TSWPShapeStylePropertiesArchive_VerticalAlignmentType) Type() protoreflect.EnumType {
	return &file_TSWPArchives_proto_enumTypes[18]
}

func (x TSWPShapeStylePropertiesArchive_VerticalAlignmentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TSWPShapeStylePropertiesArchive_VerticalAlignmentType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TSWPShapeStylePropertiesArchive_VerticalAlignmentType(num)
	return nil
}

// Deprecated: Use TSWPShapeStylePropertiesArchive_VerticalAlignmentType.Descriptor instead.
func (TSWPShapeStylePropertiesArchive_VerticalAlignmentType) EnumDescriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{22, 0}
}

type UndoTransaction_UndoKind int32

const (
	UndoTransaction_REPLACE_TEXT              UndoTransaction_UndoKind = 1
	UndoTransaction_INSERT_ATTRIBUTE          UndoTransaction_UndoKind = 2
	UndoTransaction_DELETE_ATTRIBUTE          UndoTransaction_UndoKind = 3
	UndoTransaction_ADJUST_CHAR_INDEXES       UndoTransaction_UndoKind = 4
	UndoTransaction_COMPR_ADJUST_CHAR_INDEXES UndoTransaction_UndoKind = 5
	UndoTransaction_REPLACE_CHAR_INDEX        UndoTransaction_UndoKind = 6
	UndoTransaction_REPLACE_OBJECT            UndoTransaction_UndoKind = 7
	UndoTransaction_REPLACE_PARAGRAPH_DATA    UndoTransaction_UndoKind = 8
	UndoTransaction_OBJECT_DOLC               UndoTransaction_UndoKind = 9
	UndoTransaction_CT_DATE                   UndoTransaction_UndoKind = 10
)

// Enum value maps for UndoTransaction_UndoKind.
var (
	UndoTransaction_UndoKind_name = map[int32]string{
		1:  "REPLACE_TEXT",
		2:  "INSERT_ATTRIBUTE",
		3:  "DELETE_ATTRIBUTE",
		4:  "ADJUST_CHAR_INDEXES",
		5:  "COMPR_ADJUST_CHAR_INDEXES",
		6:  "REPLACE_CHAR_INDEX",
		7:  "REPLACE_OBJECT",
		8:  "REPLACE_PARAGRAPH_DATA",
		9:  "OBJECT_DOLC",
		10: "CT_DATE",
	}
	UndoTransaction_UndoKind_value = map[string]int32{
		"REPLACE_TEXT":              1,
		"INSERT_ATTRIBUTE":          2,
		"DELETE_ATTRIBUTE":          3,
		"ADJUST_CHAR_INDEXES":       4,
		"COMPR_ADJUST_CHAR_INDEXES": 5,
		"REPLACE_CHAR_INDEX":        6,
		"REPLACE_OBJECT":            7,
		"REPLACE_PARAGRAPH_DATA":    8,
		"OBJECT_DOLC":               9,
		"CT_DATE":                   10,
	}
)

func (x UndoTransaction_UndoKind) Enum() *UndoTransaction_UndoKind {
	p := new(UndoTransaction_UndoKind)
	*p = x
	return p
}

func (x UndoTransaction_UndoKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UndoTransaction_UndoKind) Descriptor() protoreflect.EnumDescriptor {
	return file_TSWPArchives_proto_enumTypes[19].Descriptor()
}

func (UndoTransaction_UndoKind) Type() protoreflect.EnumType {
	return &file_TSWPArchives_proto_enumTypes[19]
}

func (x UndoTransaction_UndoKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *UndoTransaction_UndoKind) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = UndoTransaction_UndoKind(num)
	return nil
}

// Deprecated: Use UndoTransaction_UndoKind.Descriptor instead.
func (UndoTransaction_UndoKind) EnumDescriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{30, 0}
}

type UndoTransaction_ActionKind int32

const (
	UndoTransaction_ACTION_UNDEFINED UndoTransaction_ActionKind = 0
	UndoTransaction_ACTION_TEXT      UndoTransaction_ActionKind = 1
	UndoTransaction_ACTION_ATTRIBUTE UndoTransaction_ActionKind = 2
)

// Enum value maps for UndoTransaction_ActionKind.
var (
	UndoTransaction_ActionKind_name = map[int32]string{
		0: "ACTION_UNDEFINED",
		1: "ACTION_TEXT",
		2: "ACTION_ATTRIBUTE",
	}
	UndoTransaction_ActionKind_value = map[string]int32{
		"ACTION_UNDEFINED": 0,
		"ACTION_TEXT":      1,
		"ACTION_ATTRIBUTE": 2,
	}
)

func (x UndoTransaction_ActionKind) Enum() *UndoTransaction_ActionKind {
	p := new(UndoTransaction_ActionKind)
	*p = x
	return p
}

func (x UndoTransaction_ActionKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UndoTransaction_ActionKind) Descriptor() protoreflect.EnumDescriptor {
	return file_TSWPArchives_proto_enumTypes[20].Descriptor()
}

func (UndoTransaction_ActionKind) Type() protoreflect.EnumType {
	return &file_TSWPArchives_proto_enumTypes[20]
}

func (x UndoTransaction_ActionKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *UndoTransaction_ActionKind) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = UndoTransaction_ActionKind(num)
	return nil
}

// Deprecated: Use UndoTransaction_ActionKind.Descriptor instead.
func (UndoTransaction_ActionKind) EnumDescriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{30, 1}
}

type UndoTransaction_ActionGroupKind int32

const (
	UndoTransaction_ACTION_GROUP_UNDEFINED UndoTransaction_ActionGroupKind = 0
	UndoTransaction_ACTION_GROUP_TEXT      UndoTransaction_ActionGroupKind = 1
	UndoTransaction_ACTION_GROUP_ATTRIBUTE UndoTransaction_ActionGroupKind = 2
)

// Enum value maps for UndoTransaction_ActionGroupKind.
var (
	UndoTransaction_ActionGroupKind_name = map[int32]string{
		0: "ACTION_GROUP_UNDEFINED",
		1: "ACTION_GROUP_TEXT",
		2: "ACTION_GROUP_ATTRIBUTE",
	}
	UndoTransaction_ActionGroupKind_value = map[string]int32{
		"ACTION_GROUP_UNDEFINED": 0,
		"ACTION_GROUP_TEXT":      1,
		"ACTION_GROUP_ATTRIBUTE": 2,
	}
)

func (x UndoTransaction_ActionGroupKind) Enum() *UndoTransaction_ActionGroupKind {
	p := new(UndoTransaction_ActionGroupKind)
	*p = x
	return p
}

func (x UndoTransaction_ActionGroupKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UndoTransaction_ActionGroupKind) Descriptor() protoreflect.EnumDescriptor {
	return file_TSWPArchives_proto_enumTypes[21].Descriptor()
}

func (UndoTransaction_ActionGroupKind) Type() protoreflect.EnumType {
	return &file_TSWPArchives_proto_enumTypes[21]
}

func (x UndoTransaction_ActionGroupKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *UndoTransaction_ActionGroupKind) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = UndoTransaction_ActionGroupKind(num)
	return nil
}

// Deprecated: Use UndoTransaction_ActionGroupKind.Descriptor instead.
func (UndoTransaction_ActionGroupKind) EnumDescriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{30, 2}
}

type TextualAttachmentArchive_Kind int32

const (
	TextualAttachmentArchive_kKindPageNumber   TextualAttachmentArchive_Kind = 0
	TextualAttachmentArchive_kKindPageCount    TextualAttachmentArchive_Kind = 1
	TextualAttachmentArchive_kKindFootnoteMark TextualAttachmentArchive_Kind = 2
)

// Enum value maps for TextualAttachmentArchive_Kind.
var (
	TextualAttachmentArchive_Kind_name = map[int32]string{
		0: "kKindPageNumber",
		1: "kKindPageCount",
		2: "kKindFootnoteMark",
	}
	TextualAttachmentArchive_Kind_value = map[string]int32{
		"kKindPageNumber":   0,
		"kKindPageCount":    1,
		"kKindFootnoteMark": 2,
	}
)

func (x TextualAttachmentArchive_Kind) Enum() *TextualAttachmentArchive_Kind {
	p := new(TextualAttachmentArchive_Kind)
	*p = x
	return p
}

func (x TextualAttachmentArchive_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TextualAttachmentArchive_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_TSWPArchives_proto_enumTypes[22].Descriptor()
}

func (TextualAttachmentArchive_Kind) Type() protoreflect.EnumType {
	return &file_TSWPArchives_proto_enumTypes[22]
}

func (x TextualAttachmentArchive_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TextualAttachmentArchive_Kind) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TextualAttachmentArchive_Kind(num)
	return nil
}

// Deprecated: Use TextualAttachmentArchive_Kind.Descriptor instead.
func (TextualAttachmentArchive_Kind) EnumDescriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{37, 0}
}

type DateTimeSmartFieldArchive_DateTimeUpdatePlan int32

const (
	DateTimeSmartFieldArchive_kDateTimeUpdatePlanNever DateTimeSmartFieldArchive_DateTimeUpdatePlan = 0
	DateTimeSmartFieldArchive_kDateTimeUpdatePlanAuto  DateTimeSmartFieldArchive_DateTimeUpdatePlan = 1
	DateTimeSmartFieldArchive_kDateTimeUpdatePlanOnce  DateTimeSmartFieldArchive_DateTimeUpdatePlan = 2
)

// Enum value maps for DateTimeSmartFieldArchive_DateTimeUpdatePlan.
var (
	DateTimeSmartFieldArchive_DateTimeUpdatePlan_name = map[int32]string{
		0: "kDateTimeUpdatePlanNever",
		1: "kDateTimeUpdatePlanAuto",
		2: "kDateTimeUpdatePlanOnce",
	}
	DateTimeSmartFieldArchive_DateTimeUpdatePlan_value = map[string]int32{
		"kDateTimeUpdatePlanNever": 0,
		"kDateTimeUpdatePlanAuto":  1,
		"kDateTimeUpdatePlanOnce":  2,
	}
)

func (x DateTimeSmartFieldArchive_DateTimeUpdatePlan) Enum() *DateTimeSmartFieldArchive_DateTimeUpdatePlan {
	p := new(DateTimeSmartFieldArchive_DateTimeUpdatePlan)
	*p = x
	return p
}

func (x DateTimeSmartFieldArchive_DateTimeUpdatePlan) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DateTimeSmartFieldArchive_DateTimeUpdatePlan) Descriptor() protoreflect.EnumDescriptor {
	return file_TSWPArchives_proto_enumTypes[23].Descriptor()
}

func (DateTimeSmartFieldArchive_DateTimeUpdatePlan) Type() protoreflect.EnumType {
	return &file_TSWPArchives_proto_enumTypes[23]
}

func (x DateTimeSmartFieldArchive_DateTimeUpdatePlan) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DateTimeSmartFieldArchive_DateTimeUpdatePlan) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DateTimeSmartFieldArchive_DateTimeUpdatePlan(num)
	return nil
}

// Deprecated: Use DateTimeSmartFieldArchive_DateTimeUpdatePlan.Descriptor instead.
func (DateTimeSmartFieldArchive_DateTimeUpdatePlan) EnumDescriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{51, 0}
}

type DateTimeSmartFieldArchive_DateTimeFormatterStyle int32

const (
	DateTimeSmartFieldArchive_kDateTimeFormatterStyleNone   DateTimeSmartFieldArchive_DateTimeFormatterStyle = 0
	DateTimeSmartFieldArchive_kDateTimeFormatterStyleShort  DateTimeSmartFieldArchive_DateTimeFormatterStyle = 1
	DateTimeSmartFieldArchive_kDateTimeFormatterStyleMedium DateTimeSmartFieldArchive_DateTimeFormatterStyle = 2
	DateTimeSmartFieldArchive_kDateTimeFormatterStyleLong   DateTimeSmartFieldArchive_DateTimeFormatterStyle = 3
	DateTimeSmartFieldArchive_kDateTimeFormatterStyleFull   DateTimeSmartFieldArchive_DateTimeFormatterStyle = 4
)

// Enum value maps for DateTimeSmartFieldArchive_DateTimeFormatterStyle.
var (
	DateTimeSmartFieldArchive_DateTimeFormatterStyle_name = map[int32]string{
		0: "kDateTimeFormatterStyleNone",
		1: "kDateTimeFormatterStyleShort",
		2: "kDateTimeFormatterStyleMedium",
		3: "kDateTimeFormatterStyleLong",
		4: "kDateTimeFormatterStyleFull",
	}
	DateTimeSmartFieldArchive_DateTimeFormatterStyle_value = map[string]int32{
		"kDateTimeFormatterStyleNone":   0,
		"kDateTimeFormatterStyleShort":  1,
		"kDateTimeFormatterStyleMedium": 2,
		"kDateTimeFormatterStyleLong":   3,
		"kDateTimeFormatterStyleFull":   4,
	}
)

func (x DateTimeSmartFieldArchive_DateTimeFormatterStyle) Enum() *DateTimeSmartFieldArchive_DateTimeFormatterStyle {
	p := new(DateTimeSmartFieldArchive_DateTimeFormatterStyle)
	*p = x
	return p
}

func (x DateTimeSmartFieldArchive_DateTimeFormatterStyle) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DateTimeSmartFieldArchive_DateTimeFormatterStyle) Descriptor() protoreflect.EnumDescriptor {
	return file_TSWPArchives_proto_enumTypes[24].Descriptor()
}

func (DateTimeSmartFieldArchive_DateTimeFormatterStyle) Type() protoreflect.EnumType {
	return &file_TSWPArchives_proto_enumTypes[24]
}

func (x DateTimeSmartFieldArchive_DateTimeFormatterStyle) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DateTimeSmartFieldArchive_DateTimeFormatterStyle) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DateTimeSmartFieldArchive_DateTimeFormatterStyle(num)
	return nil
}

// Deprecated: Use DateTimeSmartFieldArchive_DateTimeFormatterStyle.Descriptor instead.
func (DateTimeSmartFieldArchive_DateTimeFormatterStyle) EnumDescriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{51, 1}
}

type MergeSmartFieldArchive_MergeCategory int32

const (
	MergeSmartFieldArchive_kMergeCategoryTo   MergeSmartFieldArchive_MergeCategory = 0
	MergeSmartFieldArchive_kMergeCategoryFrom MergeSmartFieldArchive_MergeCategory = 1
)

// Enum value maps for MergeSmartFieldArchive_MergeCategory.
var (
	MergeSmartFieldArchive_MergeCategory_name = map[int32]string{
		0: "kMergeCategoryTo",
		1: "kMergeCategoryFrom",
	}
	MergeSmartFieldArchive_MergeCategory_value = map[string]int32{
		"kMergeCategoryTo":   0,
		"kMergeCategoryFrom": 1,
	}
)

func (x MergeSmartFieldArchive_MergeCategory) Enum() *MergeSmartFieldArchive_MergeCategory {
	p := new(MergeSmartFieldArchive_MergeCategory)
	*p = x
	return p
}

func (x MergeSmartFieldArchive_MergeCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MergeSmartFieldArchive_MergeCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_TSWPArchives_proto_enumTypes[25].Descriptor()
}

func (MergeSmartFieldArchive_MergeCategory) Type() protoreflect.EnumType {
	return &file_TSWPArchives_proto_enumTypes[25]
}

func (x MergeSmartFieldArchive_MergeCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MergeSmartFieldArchive_MergeCategory) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MergeSmartFieldArchive_MergeCategory(num)
	return nil
}

// Deprecated: Use MergeSmartFieldArchive_MergeCategory.Descriptor instead.
func (MergeSmartFieldArchive_MergeCategory) EnumDescriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{54, 0}
}

type ChangeArchive_ChangeKind int32

const (
	ChangeArchive_kChangeKindInsertion ChangeArchive_ChangeKind = 1
	ChangeArchive_kChangeKindDeletion  ChangeArchive_ChangeKind = 2
)

// Enum value maps for ChangeArchive_ChangeKind.
var (
	ChangeArchive_ChangeKind_name = map[int32]string{
		1: "kChangeKindInsertion",
		2: "kChangeKindDeletion",
	}
	ChangeArchive_ChangeKind_value = map[string]int32{
		"kChangeKindInsertion": 1,
		"kChangeKindDeletion":  2,
	}
)

func (x ChangeArchive_ChangeKind) Enum() *ChangeArchive_ChangeKind {
	p := new(ChangeArchive_ChangeKind)
	*p = x
	return p
}

func (x ChangeArchive_ChangeKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChangeArchive_ChangeKind) Descriptor() protoreflect.EnumDescriptor {
	return file_TSWPArchives_proto_enumTypes[26].Descriptor()
}

func (ChangeArchive_ChangeKind) Type() protoreflect.EnumType {
	return &file_TSWPArchives_proto_enumTypes[26]
}

func (x ChangeArchive_ChangeKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ChangeArchive_ChangeKind) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ChangeArchive_ChangeKind(num)
	return nil
}

// Deprecated: Use ChangeArchive_ChangeKind.Descriptor instead.
func (ChangeArchive_ChangeKind) EnumDescriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{58, 0}
}

type DropCapArchive_DropCapType int32

const (
	DropCapArchive_TSWPDropCapTypeText  DropCapArchive_DropCapType = 0
	DropCapArchive_TSWPDropCapTypeShape DropCapArchive_DropCapType = 1
	DropCapArchive_TSWPDropCapTypeImage DropCapArchive_DropCapType = 2
)

// Enum value maps for DropCapArchive_DropCapType.
var (
	DropCapArchive_DropCapType_name = map[int32]string{
		0: "TSWPDropCapTypeText",
		1: "TSWPDropCapTypeShape",
		2: "TSWPDropCapTypeImage",
	}
	DropCapArchive_DropCapType_value = map[string]int32{
		"TSWPDropCapTypeText":  0,
		"TSWPDropCapTypeShape": 1,
		"TSWPDropCapTypeImage": 2,
	}
)

func (x DropCapArchive_DropCapType) Enum() *DropCapArchive_DropCapType {
	p := new(DropCapArchive_DropCapType)
	*p = x
	return p
}

func (x DropCapArchive_DropCapType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DropCapArchive_DropCapType) Descriptor() protoreflect.EnumDescriptor {
	return file_TSWPArchives_proto_enumTypes[27].Descriptor()
}

func (DropCapArchive_DropCapType) Type() protoreflect.EnumType {
	return &file_TSWPArchives_proto_enumTypes[27]
}

func (x DropCapArchive_DropCapType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DropCapArchive_DropCapType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DropCapArchive_DropCapType(num)
	return nil
}

// Deprecated: Use DropCapArchive_DropCapType.Descriptor instead.
func (DropCapArchive_DropCapType) EnumDescriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{64, 0}
}

type DropCapArchive_DropCapWrapType int32

const (
	DropCapArchive_TSWPDropCapWrapTypeRectangular DropCapArchive_DropCapWrapType = 0
	DropCapArchive_TSWPDropCapWrapTypeContour     DropCapArchive_DropCapWrapType = 1
	DropCapArchive_TSWPDropCapWrapTypeNone        DropCapArchive_DropCapWrapType = 2
)

// Enum value maps for DropCapArchive_DropCapWrapType.
var (
	DropCapArchive_DropCapWrapType_name = map[int32]string{
		0: "TSWPDropCapWrapTypeRectangular",
		1: "TSWPDropCapWrapTypeContour",
		2: "TSWPDropCapWrapTypeNone",
	}
	DropCapArchive_DropCapWrapType_value = map[string]int32{
		"TSWPDropCapWrapTypeRectangular": 0,
		"TSWPDropCapWrapTypeContour":     1,
		"TSWPDropCapWrapTypeNone":        2,
	}
)

func (x DropCapArchive_DropCapWrapType) Enum() *DropCapArchive_DropCapWrapType {
	p := new(DropCapArchive_DropCapWrapType)
	*p = x
	return p
}

func (x DropCapArchive_DropCapWrapType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DropCapArchive_DropCapWrapType) Descriptor() protoreflect.EnumDescriptor {
	return file_TSWPArchives_proto_enumTypes[28].Descriptor()
}

func (DropCapArchive_DropCapWrapType) Type() protoreflect.EnumType {
	return &file_TSWPArchives_proto_enumTypes[28]
}

func (x DropCapArchive_DropCapWrapType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DropCapArchive_DropCapWrapType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DropCapArchive_DropCapWrapType(num)
	return nil
}

// Deprecated: Use DropCapArchive_DropCapWrapType.Descriptor instead.
func (DropCapArchive_DropCapWrapType) EnumDescriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{64, 1}
}

type TSWPSelectionArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                   *SelectionType          `protobuf:"varint,1,req,name=type,enum=TSWP.SelectionType" json:"type,omitempty"`
	Range                  *Range                  `protobuf:"bytes,2,req,name=range" json:"range,omitempty"`
	StyleInsertionBehavior *StyleInsertionBehavior `protobuf:"varint,3,req,name=styleInsertionBehavior,enum=TSWP.StyleInsertionBehavior" json:"styleInsertionBehavior,omitempty"`
	CaretAffinity          *CaretAffinity          `protobuf:"varint,4,req,name=caretAffinity,enum=TSWP.CaretAffinity" json:"caretAffinity,omitempty"`
	SmartFieldRange        *Range                  `protobuf:"bytes,5,req,name=smart_field_range,json=smartFieldRange" json:"smart_field_range,omitempty"`
}

func (x *TSWPSelectionArchive) Reset() {
	*x = TSWPSelectionArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSWPSelectionArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSWPSelectionArchive) ProtoMessage() {}

func (x *TSWPSelectionArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSWPSelectionArchive.ProtoReflect.Descriptor instead.
func (*TSWPSelectionArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{0}
}

func (x *TSWPSelectionArchive) GetType() SelectionType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return SelectionType_SelectionType_Normal
}

func (x *TSWPSelectionArchive) GetRange() *Range {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *TSWPSelectionArchive) GetStyleInsertionBehavior() StyleInsertionBehavior {
	if x != nil && x.StyleInsertionBehavior != nil {
		return *x.StyleInsertionBehavior
	}
	return StyleInsertionBehavior_StyleInsertionBehavior_NoGrow
}

func (x *TSWPSelectionArchive) GetCaretAffinity() CaretAffinity {
	if x != nil && x.CaretAffinity != nil {
		return *x.CaretAffinity
	}
	return CaretAffinity_CaretAffinity_Start
}

func (x *TSWPSelectionArchive) GetSmartFieldRange() *Range {
	if x != nil {
		return x.SmartFieldRange
	}
	return nil
}

type ObjectAttributeTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*ObjectAttributeTable_ObjectAttribute `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
}

func (x *ObjectAttributeTable) Reset() {
	*x = ObjectAttributeTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectAttributeTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectAttributeTable) ProtoMessage() {}

func (x *ObjectAttributeTable) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectAttributeTable.ProtoReflect.Descriptor instead.
func (*ObjectAttributeTable) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{1}
}

func (x *ObjectAttributeTable) GetEntries() []*ObjectAttributeTable_ObjectAttribute {
	if x != nil {
		return x.Entries
	}
	return nil
}

type StringAttributeTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*StringAttributeTable_StringAttribute `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
}

func (x *StringAttributeTable) Reset() {
	*x = StringAttributeTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringAttributeTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringAttributeTable) ProtoMessage() {}

func (x *StringAttributeTable) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringAttributeTable.ProtoReflect.Descriptor instead.
func (*StringAttributeTable) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{2}
}

func (x *StringAttributeTable) GetEntries() []*StringAttributeTable_StringAttribute {
	if x != nil {
		return x.Entries
	}
	return nil
}

type ParaDataAttributeTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*ParaDataAttributeTable_ParaDataAttribute `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
}

func (x *ParaDataAttributeTable) Reset() {
	*x = ParaDataAttributeTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParaDataAttributeTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParaDataAttributeTable) ProtoMessage() {}

func (x *ParaDataAttributeTable) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParaDataAttributeTable.ProtoReflect.Descriptor instead.
func (*ParaDataAttributeTable) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{3}
}

func (x *ParaDataAttributeTable) GetEntries() []*ParaDataAttributeTable_ParaDataAttribute {
	if x != nil {
		return x.Entries
	}
	return nil
}

type OverlappingFieldAttributeTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*OverlappingFieldAttributeTable_OverlappingFieldAttribute `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
}

func (x *OverlappingFieldAttributeTable) Reset() {
	*x = OverlappingFieldAttributeTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverlappingFieldAttributeTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverlappingFieldAttributeTable) ProtoMessage() {}

func (x *OverlappingFieldAttributeTable) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverlappingFieldAttributeTable.ProtoReflect.Descriptor instead.
func (*OverlappingFieldAttributeTable) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{4}
}

func (x *OverlappingFieldAttributeTable) GetEntries() []*OverlappingFieldAttributeTable_OverlappingFieldAttribute {
	if x != nil {
		return x.Entries
	}
	return nil
}

type StorageArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind                      *StorageArchive_KindType        `protobuf:"varint,1,opt,name=kind,enum=TSWP.StorageArchive_KindType,def=3" json:"kind,omitempty"`
	StyleSheet                *Reference                      `protobuf:"bytes,2,opt,name=style_sheet,json=styleSheet" json:"style_sheet,omitempty"`
	Text                      []string                        `protobuf:"bytes,3,rep,name=text" json:"text,omitempty"`
	HasItext                  *bool                           `protobuf:"varint,4,opt,name=has_itext,json=hasItext,def=0" json:"has_itext,omitempty"`
	InDocument                *bool                           `protobuf:"varint,10,opt,name=in_document,json=inDocument,def=0" json:"in_document,omitempty"`
	TableParaStyle            *ObjectAttributeTable           `protobuf:"bytes,5,opt,name=table_para_style,json=tableParaStyle" json:"table_para_style,omitempty"`
	TableParaData             *ParaDataAttributeTable         `protobuf:"bytes,6,opt,name=table_para_data,json=tableParaData" json:"table_para_data,omitempty"`
	TableListStyle            *ObjectAttributeTable           `protobuf:"bytes,7,opt,name=table_list_style,json=tableListStyle" json:"table_list_style,omitempty"`
	TableCharStyle            *ObjectAttributeTable           `protobuf:"bytes,8,opt,name=table_char_style,json=tableCharStyle" json:"table_char_style,omitempty"`
	TableAttachment           *ObjectAttributeTable           `protobuf:"bytes,9,opt,name=table_attachment,json=tableAttachment" json:"table_attachment,omitempty"`
	TableSmartfield           *ObjectAttributeTable           `protobuf:"bytes,11,opt,name=table_smartfield,json=tableSmartfield" json:"table_smartfield,omitempty"`
	TableLayoutStyle          *ObjectAttributeTable           `protobuf:"bytes,12,opt,name=table_layout_style,json=tableLayoutStyle" json:"table_layout_style,omitempty"`
	TableParaStarts           *ParaDataAttributeTable         `protobuf:"bytes,14,opt,name=table_para_starts,json=tableParaStarts" json:"table_para_starts,omitempty"`
	TableBookmark             *ObjectAttributeTable           `protobuf:"bytes,15,opt,name=table_bookmark,json=tableBookmark" json:"table_bookmark,omitempty"`
	TableFootnote             *ObjectAttributeTable           `protobuf:"bytes,16,opt,name=table_footnote,json=tableFootnote" json:"table_footnote,omitempty"`
	TableSection              *ObjectAttributeTable           `protobuf:"bytes,17,opt,name=table_section,json=tableSection" json:"table_section,omitempty"`
	TableRubyfield            *ObjectAttributeTable           `protobuf:"bytes,18,opt,name=table_rubyfield,json=tableRubyfield" json:"table_rubyfield,omitempty"`
	TableLanguage             *StringAttributeTable           `protobuf:"bytes,19,opt,name=table_language,json=tableLanguage" json:"table_language,omitempty"`
	TableDictation            *StringAttributeTable           `protobuf:"bytes,20,opt,name=table_dictation,json=tableDictation" json:"table_dictation,omitempty"`
	TableInsertion            *ObjectAttributeTable           `protobuf:"bytes,21,opt,name=table_insertion,json=tableInsertion" json:"table_insertion,omitempty"`
	TableDeletion             *ObjectAttributeTable           `protobuf:"bytes,22,opt,name=table_deletion,json=tableDeletion" json:"table_deletion,omitempty"`
	TableHighlight            *ObjectAttributeTable           `protobuf:"bytes,23,opt,name=table_highlight,json=tableHighlight" json:"table_highlight,omitempty"`
	TableParaBidi             *ParaDataAttributeTable         `protobuf:"bytes,24,opt,name=table_para_bidi,json=tableParaBidi" json:"table_para_bidi,omitempty"`
	TableOverlappingHighlight *OverlappingFieldAttributeTable `protobuf:"bytes,25,opt,name=table_overlapping_highlight,json=tableOverlappingHighlight" json:"table_overlapping_highlight,omitempty"`
	TablePencilAnnotation     *OverlappingFieldAttributeTable `protobuf:"bytes,26,opt,name=table_pencil_annotation,json=tablePencilAnnotation" json:"table_pencil_annotation,omitempty"`
	TableTatechuyoko          *ObjectAttributeTable           `protobuf:"bytes,27,opt,name=table_tatechuyoko,json=tableTatechuyoko" json:"table_tatechuyoko,omitempty"`
	TableDropCapStyle         *ObjectAttributeTable           `protobuf:"bytes,28,opt,name=table_drop_cap_style,json=tableDropCapStyle" json:"table_drop_cap_style,omitempty"`
}

// Default values for StorageArchive fields.
const (
	Default_StorageArchive_Kind       = StorageArchive_TEXTBOX
	Default_StorageArchive_HasItext   = bool(false)
	Default_StorageArchive_InDocument = bool(false)
)

func (x *StorageArchive) Reset() {
	*x = StorageArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageArchive) ProtoMessage() {}

func (x *StorageArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageArchive.ProtoReflect.Descriptor instead.
func (*StorageArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{5}
}

func (x *StorageArchive) GetKind() StorageArchive_KindType {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return Default_StorageArchive_Kind
}

func (x *StorageArchive) GetStyleSheet() *Reference {
	if x != nil {
		return x.StyleSheet
	}
	return nil
}

func (x *StorageArchive) GetText() []string {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *StorageArchive) GetHasItext() bool {
	if x != nil && x.HasItext != nil {
		return *x.HasItext
	}
	return Default_StorageArchive_HasItext
}

func (x *StorageArchive) GetInDocument() bool {
	if x != nil && x.InDocument != nil {
		return *x.InDocument
	}
	return Default_StorageArchive_InDocument
}

func (x *StorageArchive) GetTableParaStyle() *ObjectAttributeTable {
	if x != nil {
		return x.TableParaStyle
	}
	return nil
}

func (x *StorageArchive) GetTableParaData() *ParaDataAttributeTable {
	if x != nil {
		return x.TableParaData
	}
	return nil
}

func (x *StorageArchive) GetTableListStyle() *ObjectAttributeTable {
	if x != nil {
		return x.TableListStyle
	}
	return nil
}

func (x *StorageArchive) GetTableCharStyle() *ObjectAttributeTable {
	if x != nil {
		return x.TableCharStyle
	}
	return nil
}

func (x *StorageArchive) GetTableAttachment() *ObjectAttributeTable {
	if x != nil {
		return x.TableAttachment
	}
	return nil
}

func (x *StorageArchive) GetTableSmartfield() *ObjectAttributeTable {
	if x != nil {
		return x.TableSmartfield
	}
	return nil
}

func (x *StorageArchive) GetTableLayoutStyle() *ObjectAttributeTable {
	if x != nil {
		return x.TableLayoutStyle
	}
	return nil
}

func (x *StorageArchive) GetTableParaStarts() *ParaDataAttributeTable {
	if x != nil {
		return x.TableParaStarts
	}
	return nil
}

func (x *StorageArchive) GetTableBookmark() *ObjectAttributeTable {
	if x != nil {
		return x.TableBookmark
	}
	return nil
}

func (x *StorageArchive) GetTableFootnote() *ObjectAttributeTable {
	if x != nil {
		return x.TableFootnote
	}
	return nil
}

func (x *StorageArchive) GetTableSection() *ObjectAttributeTable {
	if x != nil {
		return x.TableSection
	}
	return nil
}

func (x *StorageArchive) GetTableRubyfield() *ObjectAttributeTable {
	if x != nil {
		return x.TableRubyfield
	}
	return nil
}

func (x *StorageArchive) GetTableLanguage() *StringAttributeTable {
	if x != nil {
		return x.TableLanguage
	}
	return nil
}

func (x *StorageArchive) GetTableDictation() *StringAttributeTable {
	if x != nil {
		return x.TableDictation
	}
	return nil
}

func (x *StorageArchive) GetTableInsertion() *ObjectAttributeTable {
	if x != nil {
		return x.TableInsertion
	}
	return nil
}

func (x *StorageArchive) GetTableDeletion() *ObjectAttributeTable {
	if x != nil {
		return x.TableDeletion
	}
	return nil
}

func (x *StorageArchive) GetTableHighlight() *ObjectAttributeTable {
	if x != nil {
		return x.TableHighlight
	}
	return nil
}

func (x *StorageArchive) GetTableParaBidi() *ParaDataAttributeTable {
	if x != nil {
		return x.TableParaBidi
	}
	return nil
}

func (x *StorageArchive) GetTableOverlappingHighlight() *OverlappingFieldAttributeTable {
	if x != nil {
		return x.TableOverlappingHighlight
	}
	return nil
}

func (x *StorageArchive) GetTablePencilAnnotation() *OverlappingFieldAttributeTable {
	if x != nil {
		return x.TablePencilAnnotation
	}
	return nil
}

func (x *StorageArchive) GetTableTatechuyoko() *ObjectAttributeTable {
	if x != nil {
		return x.TableTatechuyoko
	}
	return nil
}

func (x *StorageArchive) GetTableDropCapStyle() *ObjectAttributeTable {
	if x != nil {
		return x.TableDropCapStyle
	}
	return nil
}

type HighlightArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommentStorage          *Reference `protobuf:"bytes,1,opt,name=commentStorage" json:"commentStorage,omitempty"`
	TextAttributeUuidString *string    `protobuf:"bytes,2,opt,name=text_attribute_uuid_string,json=textAttributeUuidString" json:"text_attribute_uuid_string,omitempty"`
}

func (x *HighlightArchive) Reset() {
	*x = HighlightArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HighlightArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HighlightArchive) ProtoMessage() {}

func (x *HighlightArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HighlightArchive.ProtoReflect.Descriptor instead.
func (*HighlightArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{6}
}

func (x *HighlightArchive) GetCommentStorage() *Reference {
	if x != nil {
		return x.CommentStorage
	}
	return nil
}

func (x *HighlightArchive) GetTextAttributeUuidString() string {
	if x != nil && x.TextAttributeUuidString != nil {
		return *x.TextAttributeUuidString
	}
	return ""
}

type TSWPPencilAnnotationArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PencilAnnotationStorage *Reference `protobuf:"bytes,1,opt,name=pencil_annotation_storage,json=pencilAnnotationStorage" json:"pencil_annotation_storage,omitempty"`
	TextAttributeUuidString *string    `protobuf:"bytes,2,opt,name=text_attribute_uuid_string,json=textAttributeUuidString" json:"text_attribute_uuid_string,omitempty"`
}

func (x *TSWPPencilAnnotationArchive) Reset() {
	*x = TSWPPencilAnnotationArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSWPPencilAnnotationArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSWPPencilAnnotationArchive) ProtoMessage() {}

func (x *TSWPPencilAnnotationArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSWPPencilAnnotationArchive.ProtoReflect.Descriptor instead.
func (*TSWPPencilAnnotationArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{7}
}

func (x *TSWPPencilAnnotationArchive) GetPencilAnnotationStorage() *Reference {
	if x != nil {
		return x.PencilAnnotationStorage
	}
	return nil
}

func (x *TSWPPencilAnnotationArchive) GetTextAttributeUuidString() string {
	if x != nil && x.TextAttributeUuidString != nil {
		return *x.TextAttributeUuidString
	}
	return ""
}

type FontFeatureArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeatureType     *uint32 `protobuf:"varint,1,req,name=feature_type,json=featureType" json:"feature_type,omitempty"`
	FeatureSelector *uint32 `protobuf:"varint,2,req,name=feature_selector,json=featureSelector" json:"feature_selector,omitempty"`
}

func (x *FontFeatureArchive) Reset() {
	*x = FontFeatureArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FontFeatureArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FontFeatureArchive) ProtoMessage() {}

func (x *FontFeatureArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FontFeatureArchive.ProtoReflect.Descriptor instead.
func (*FontFeatureArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{8}
}

func (x *FontFeatureArchive) GetFeatureType() uint32 {
	if x != nil && x.FeatureType != nil {
		return *x.FeatureType
	}
	return 0
}

func (x *FontFeatureArchive) GetFeatureSelector() uint32 {
	if x != nil && x.FeatureSelector != nil {
		return *x.FeatureSelector
	}
	return 0
}

type CharacterStylePropertiesArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bold                           *bool                                               `protobuf:"varint,1,opt,name=bold" json:"bold,omitempty"`
	Italic                         *bool                                               `protobuf:"varint,2,opt,name=italic" json:"italic,omitempty"`
	FontSize                       *float32                                            `protobuf:"fixed32,3,opt,name=font_size,json=fontSize" json:"font_size,omitempty"`
	FontNameNull                   *bool                                               `protobuf:"varint,4,opt,name=font_name_null,json=fontNameNull" json:"font_name_null,omitempty"`
	FontName                       *string                                             `protobuf:"bytes,5,opt,name=font_name,json=fontName" json:"font_name,omitempty"`
	FontColorNull                  *bool                                               `protobuf:"varint,6,opt,name=font_color_null,json=fontColorNull" json:"font_color_null,omitempty"`
	FontColor                      *Color                                              `protobuf:"bytes,7,opt,name=font_color,json=fontColor" json:"font_color,omitempty"`
	LanguageNull                   *bool                                               `protobuf:"varint,8,opt,name=language_null,json=languageNull" json:"language_null,omitempty"`
	Language                       *string                                             `protobuf:"bytes,9,opt,name=language" json:"language,omitempty"`
	Superscript                    *CharacterStylePropertiesArchive_SuperscriptType    `protobuf:"varint,10,opt,name=superscript,enum=TSWP.CharacterStylePropertiesArchive_SuperscriptType" json:"superscript,omitempty"`
	Underline                      *CharacterStylePropertiesArchive_UnderlineType      `protobuf:"varint,11,opt,name=underline,enum=TSWP.CharacterStylePropertiesArchive_UnderlineType" json:"underline,omitempty"`
	Strikethru                     *CharacterStylePropertiesArchive_StrikethruType     `protobuf:"varint,12,opt,name=strikethru,enum=TSWP.CharacterStylePropertiesArchive_StrikethruType" json:"strikethru,omitempty"`
	Capitalization                 *CharacterStylePropertiesArchive_CapitalizationType `protobuf:"varint,13,opt,name=capitalization,enum=TSWP.CharacterStylePropertiesArchive_CapitalizationType" json:"capitalization,omitempty"`
	BaselineShift                  *float32                                            `protobuf:"fixed32,14,opt,name=baseline_shift,json=baselineShift" json:"baseline_shift,omitempty"`
	Kerning                        *float32                                            `protobuf:"fixed32,15,opt,name=kerning" json:"kerning,omitempty"`
	Ligatures                      *CharacterStylePropertiesArchive_LigaturesType      `protobuf:"varint,16,opt,name=ligatures,enum=TSWP.CharacterStylePropertiesArchive_LigaturesType" json:"ligatures,omitempty"`
	OutlineColorNull               *bool                                               `protobuf:"varint,17,opt,name=outline_color_null,json=outlineColorNull" json:"outline_color_null,omitempty"`
	OutlineColor                   *Color                                              `protobuf:"bytes,18,opt,name=outline_color,json=outlineColor" json:"outline_color,omitempty"`
	Outline                        *float32                                            `protobuf:"fixed32,19,opt,name=outline" json:"outline,omitempty"`
	ShadowNull                     *bool                                               `protobuf:"varint,20,opt,name=shadow_null,json=shadowNull" json:"shadow_null,omitempty"`
	Shadow                         *ShadowArchive                                      `protobuf:"bytes,21,opt,name=shadow" json:"shadow,omitempty"`
	StrikethruColorNull            *bool                                               `protobuf:"varint,22,opt,name=strikethru_color_null,json=strikethruColorNull" json:"strikethru_color_null,omitempty"`
	StrikethruColor                *Color                                              `protobuf:"bytes,23,opt,name=strikethru_color,json=strikethruColor" json:"strikethru_color,omitempty"`
	StrikethruWidth                *float32                                            `protobuf:"fixed32,24,opt,name=strikethru_width,json=strikethruWidth" json:"strikethru_width,omitempty"`
	BackgroundColorNull            *bool                                               `protobuf:"varint,25,opt,name=background_color_null,json=backgroundColorNull" json:"background_color_null,omitempty"`
	BackgroundColor                *Color                                              `protobuf:"bytes,26,opt,name=background_color,json=backgroundColor" json:"background_color,omitempty"`
	Tracking                       *float32                                            `protobuf:"fixed32,27,opt,name=tracking" json:"tracking,omitempty"`
	UnderlineColorNull             *bool                                               `protobuf:"varint,28,opt,name=underline_color_null,json=underlineColorNull" json:"underline_color_null,omitempty"`
	UnderlineColor                 *Color                                              `protobuf:"bytes,29,opt,name=underline_color,json=underlineColor" json:"underline_color,omitempty"`
	UnderlineWidth                 *float32                                            `protobuf:"fixed32,30,opt,name=underline_width,json=underlineWidth" json:"underline_width,omitempty"`
	WordStrikethru                 *bool                                               `protobuf:"varint,31,opt,name=word_strikethru,json=wordStrikethru" json:"word_strikethru,omitempty"`
	WordUnderline                  *bool                                               `protobuf:"varint,32,opt,name=word_underline,json=wordUnderline" json:"word_underline,omitempty"`
	FontFeaturesNull               *bool                                               `protobuf:"varint,33,opt,name=font_features_null,json=fontFeaturesNull" json:"font_features_null,omitempty"`
	FontFeatures                   []*FontFeatureArchive                               `protobuf:"bytes,34,rep,name=font_features,json=fontFeatures" json:"font_features,omitempty"`
	WritingDirection               *WritingDirectionType                               `protobuf:"varint,35,opt,name=writing_direction,json=writingDirection,enum=TSWP.WritingDirectionType,def=-1" json:"writing_direction,omitempty"`
	EmphasisMarksNull              *bool                                               `protobuf:"varint,36,opt,name=emphasis_marks_null,json=emphasisMarksNull" json:"emphasis_marks_null,omitempty"`
	EmphasisMarks                  *string                                             `protobuf:"bytes,37,opt,name=emphasis_marks,json=emphasisMarks" json:"emphasis_marks,omitempty"`
	CompatibilityFontNameNull      *bool                                               `protobuf:"varint,38,opt,name=compatibility_font_name_null,json=compatibilityFontNameNull" json:"compatibility_font_name_null,omitempty"`
	CompatibilityFontName          *string                                             `protobuf:"bytes,39,opt,name=compatibility_font_name,json=compatibilityFontName" json:"compatibility_font_name,omitempty"`
	IsNamedPointSize               *bool                                               `protobuf:"varint,40,opt,name=is_named_point_size,json=isNamedPointSize" json:"is_named_point_size,omitempty"`
	CapitalizationUsesLinguistics  *bool                                               `protobuf:"varint,41,opt,name=capitalization_uses_linguistics,json=capitalizationUsesLinguistics" json:"capitalization_uses_linguistics,omitempty"`
	TateChuYoko                    *bool                                               `protobuf:"varint,42,opt,name=tate_chu_yoko,json=tateChuYoko" json:"tate_chu_yoko,omitempty"`
	TsdStrokeNull                  *bool                                               `protobuf:"varint,43,opt,name=tsd_stroke_null,json=tsdStrokeNull" json:"tsd_stroke_null,omitempty"`
	TsdStroke                      *StrokeArchive                                      `protobuf:"bytes,44,opt,name=tsd_stroke,json=tsdStroke" json:"tsd_stroke,omitempty"`
	TsdFillNull                    *bool                                               `protobuf:"varint,45,opt,name=tsd_fill_null,json=tsdFillNull" json:"tsd_fill_null,omitempty"`
	TsdFill                        *FillArchive                                        `protobuf:"bytes,46,opt,name=tsd_fill,json=tsdFill" json:"tsd_fill,omitempty"`
	TsdFillShouldFillTextContainer *bool                                               `protobuf:"varint,47,opt,name=tsd_fill_should_fill_text_container,json=tsdFillShouldFillTextContainer" json:"tsd_fill_should_fill_text_container,omitempty"`
}

// Default values for CharacterStylePropertiesArchive fields.
const (
	Default_CharacterStylePropertiesArchive_WritingDirection = WritingDirectionType_kWritingDirectionNatural
)

func (x *CharacterStylePropertiesArchive) Reset() {
	*x = CharacterStylePropertiesArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharacterStylePropertiesArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterStylePropertiesArchive) ProtoMessage() {}

func (x *CharacterStylePropertiesArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterStylePropertiesArchive.ProtoReflect.Descriptor instead.
func (*CharacterStylePropertiesArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{9}
}

func (x *CharacterStylePropertiesArchive) GetBold() bool {
	if x != nil && x.Bold != nil {
		return *x.Bold
	}
	return false
}

func (x *CharacterStylePropertiesArchive) GetItalic() bool {
	if x != nil && x.Italic != nil {
		return *x.Italic
	}
	return false
}

func (x *CharacterStylePropertiesArchive) GetFontSize() float32 {
	if x != nil && x.FontSize != nil {
		return *x.FontSize
	}
	return 0
}

func (x *CharacterStylePropertiesArchive) GetFontNameNull() bool {
	if x != nil && x.FontNameNull != nil {
		return *x.FontNameNull
	}
	return false
}

func (x *CharacterStylePropertiesArchive) GetFontName() string {
	if x != nil && x.FontName != nil {
		return *x.FontName
	}
	return ""
}

func (x *CharacterStylePropertiesArchive) GetFontColorNull() bool {
	if x != nil && x.FontColorNull != nil {
		return *x.FontColorNull
	}
	return false
}

func (x *CharacterStylePropertiesArchive) GetFontColor() *Color {
	if x != nil {
		return x.FontColor
	}
	return nil
}

func (x *CharacterStylePropertiesArchive) GetLanguageNull() bool {
	if x != nil && x.LanguageNull != nil {
		return *x.LanguageNull
	}
	return false
}

func (x *CharacterStylePropertiesArchive) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

func (x *CharacterStylePropertiesArchive) GetSuperscript() CharacterStylePropertiesArchive_SuperscriptType {
	if x != nil && x.Superscript != nil {
		return *x.Superscript
	}
	return CharacterStylePropertiesArchive_kNoScript
}

func (x *CharacterStylePropertiesArchive) GetUnderline() CharacterStylePropertiesArchive_UnderlineType {
	if x != nil && x.Underline != nil {
		return *x.Underline
	}
	return CharacterStylePropertiesArchive_kNoUnderline
}

func (x *CharacterStylePropertiesArchive) GetStrikethru() CharacterStylePropertiesArchive_StrikethruType {
	if x != nil && x.Strikethru != nil {
		return *x.Strikethru
	}
	return CharacterStylePropertiesArchive_kNoStrikethru
}

func (x *CharacterStylePropertiesArchive) GetCapitalization() CharacterStylePropertiesArchive_CapitalizationType {
	if x != nil && x.Capitalization != nil {
		return *x.Capitalization
	}
	return CharacterStylePropertiesArchive_kNoCaps
}

func (x *CharacterStylePropertiesArchive) GetBaselineShift() float32 {
	if x != nil && x.BaselineShift != nil {
		return *x.BaselineShift
	}
	return 0
}

func (x *CharacterStylePropertiesArchive) GetKerning() float32 {
	if x != nil && x.Kerning != nil {
		return *x.Kerning
	}
	return 0
}

func (x *CharacterStylePropertiesArchive) GetLigatures() CharacterStylePropertiesArchive_LigaturesType {
	if x != nil && x.Ligatures != nil {
		return *x.Ligatures
	}
	return CharacterStylePropertiesArchive_kRequiredLigatures
}

func (x *CharacterStylePropertiesArchive) GetOutlineColorNull() bool {
	if x != nil && x.OutlineColorNull != nil {
		return *x.OutlineColorNull
	}
	return false
}

func (x *CharacterStylePropertiesArchive) GetOutlineColor() *Color {
	if x != nil {
		return x.OutlineColor
	}
	return nil
}

func (x *CharacterStylePropertiesArchive) GetOutline() float32 {
	if x != nil && x.Outline != nil {
		return *x.Outline
	}
	return 0
}

func (x *CharacterStylePropertiesArchive) GetShadowNull() bool {
	if x != nil && x.ShadowNull != nil {
		return *x.ShadowNull
	}
	return false
}

func (x *CharacterStylePropertiesArchive) GetShadow() *ShadowArchive {
	if x != nil {
		return x.Shadow
	}
	return nil
}

func (x *CharacterStylePropertiesArchive) GetStrikethruColorNull() bool {
	if x != nil && x.StrikethruColorNull != nil {
		return *x.StrikethruColorNull
	}
	return false
}

func (x *CharacterStylePropertiesArchive) GetStrikethruColor() *Color {
	if x != nil {
		return x.StrikethruColor
	}
	return nil
}

func (x *CharacterStylePropertiesArchive) GetStrikethruWidth() float32 {
	if x != nil && x.StrikethruWidth != nil {
		return *x.StrikethruWidth
	}
	return 0
}

func (x *CharacterStylePropertiesArchive) GetBackgroundColorNull() bool {
	if x != nil && x.BackgroundColorNull != nil {
		return *x.BackgroundColorNull
	}
	return false
}

func (x *CharacterStylePropertiesArchive) GetBackgroundColor() *Color {
	if x != nil {
		return x.BackgroundColor
	}
	return nil
}

func (x *CharacterStylePropertiesArchive) GetTracking() float32 {
	if x != nil && x.Tracking != nil {
		return *x.Tracking
	}
	return 0
}

func (x *CharacterStylePropertiesArchive) GetUnderlineColorNull() bool {
	if x != nil && x.UnderlineColorNull != nil {
		return *x.UnderlineColorNull
	}
	return false
}

func (x *CharacterStylePropertiesArchive) GetUnderlineColor() *Color {
	if x != nil {
		return x.UnderlineColor
	}
	return nil
}

func (x *CharacterStylePropertiesArchive) GetUnderlineWidth() float32 {
	if x != nil && x.UnderlineWidth != nil {
		return *x.UnderlineWidth
	}
	return 0
}

func (x *CharacterStylePropertiesArchive) GetWordStrikethru() bool {
	if x != nil && x.WordStrikethru != nil {
		return *x.WordStrikethru
	}
	return false
}

func (x *CharacterStylePropertiesArchive) GetWordUnderline() bool {
	if x != nil && x.WordUnderline != nil {
		return *x.WordUnderline
	}
	return false
}

func (x *CharacterStylePropertiesArchive) GetFontFeaturesNull() bool {
	if x != nil && x.FontFeaturesNull != nil {
		return *x.FontFeaturesNull
	}
	return false
}

func (x *CharacterStylePropertiesArchive) GetFontFeatures() []*FontFeatureArchive {
	if x != nil {
		return x.FontFeatures
	}
	return nil
}

func (x *CharacterStylePropertiesArchive) GetWritingDirection() WritingDirectionType {
	if x != nil && x.WritingDirection != nil {
		return *x.WritingDirection
	}
	return Default_CharacterStylePropertiesArchive_WritingDirection
}

func (x *CharacterStylePropertiesArchive) GetEmphasisMarksNull() bool {
	if x != nil && x.EmphasisMarksNull != nil {
		return *x.EmphasisMarksNull
	}
	return false
}

func (x *CharacterStylePropertiesArchive) GetEmphasisMarks() string {
	if x != nil && x.EmphasisMarks != nil {
		return *x.EmphasisMarks
	}
	return ""
}

func (x *CharacterStylePropertiesArchive) GetCompatibilityFontNameNull() bool {
	if x != nil && x.CompatibilityFontNameNull != nil {
		return *x.CompatibilityFontNameNull
	}
	return false
}

func (x *CharacterStylePropertiesArchive) GetCompatibilityFontName() string {
	if x != nil && x.CompatibilityFontName != nil {
		return *x.CompatibilityFontName
	}
	return ""
}

func (x *CharacterStylePropertiesArchive) GetIsNamedPointSize() bool {
	if x != nil && x.IsNamedPointSize != nil {
		return *x.IsNamedPointSize
	}
	return false
}

func (x *CharacterStylePropertiesArchive) GetCapitalizationUsesLinguistics() bool {
	if x != nil && x.CapitalizationUsesLinguistics != nil {
		return *x.CapitalizationUsesLinguistics
	}
	return false
}

func (x *CharacterStylePropertiesArchive) GetTateChuYoko() bool {
	if x != nil && x.TateChuYoko != nil {
		return *x.TateChuYoko
	}
	return false
}

func (x *CharacterStylePropertiesArchive) GetTsdStrokeNull() bool {
	if x != nil && x.TsdStrokeNull != nil {
		return *x.TsdStrokeNull
	}
	return false
}

func (x *CharacterStylePropertiesArchive) GetTsdStroke() *StrokeArchive {
	if x != nil {
		return x.TsdStroke
	}
	return nil
}

func (x *CharacterStylePropertiesArchive) GetTsdFillNull() bool {
	if x != nil && x.TsdFillNull != nil {
		return *x.TsdFillNull
	}
	return false
}

func (x *CharacterStylePropertiesArchive) GetTsdFill() *FillArchive {
	if x != nil {
		return x.TsdFill
	}
	return nil
}

func (x *CharacterStylePropertiesArchive) GetTsdFillShouldFillTextContainer() bool {
	if x != nil && x.TsdFillShouldFillTextContainer != nil {
		return *x.TsdFillShouldFillTextContainer
	}
	return false
}

type CharacterStyleArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super          *StyleArchive                    `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	OverrideCount  *uint32                          `protobuf:"varint,10,opt,name=override_count,json=overrideCount,def=0" json:"override_count,omitempty"`
	CharProperties *CharacterStylePropertiesArchive `protobuf:"bytes,11,opt,name=char_properties,json=charProperties" json:"char_properties,omitempty"`
}

// Default values for CharacterStyleArchive fields.
const (
	Default_CharacterStyleArchive_OverrideCount = uint32(0)
)

func (x *CharacterStyleArchive) Reset() {
	*x = CharacterStyleArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharacterStyleArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterStyleArchive) ProtoMessage() {}

func (x *CharacterStyleArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterStyleArchive.ProtoReflect.Descriptor instead.
func (*CharacterStyleArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{10}
}

func (x *CharacterStyleArchive) GetSuper() *StyleArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CharacterStyleArchive) GetOverrideCount() uint32 {
	if x != nil && x.OverrideCount != nil {
		return *x.OverrideCount
	}
	return Default_CharacterStyleArchive_OverrideCount
}

func (x *CharacterStyleArchive) GetCharProperties() *CharacterStylePropertiesArchive {
	if x != nil {
		return x.CharProperties
	}
	return nil
}

type TabArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position  *float32                     `protobuf:"fixed32,1,opt,name=position" json:"position,omitempty"`
	Alignment *TabArchive_TabAlignmentType `protobuf:"varint,2,opt,name=alignment,enum=TSWP.TabArchive_TabAlignmentType" json:"alignment,omitempty"`
	Leader    *string                      `protobuf:"bytes,3,opt,name=leader" json:"leader,omitempty"`
}

func (x *TabArchive) Reset() {
	*x = TabArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TabArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TabArchive) ProtoMessage() {}

func (x *TabArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TabArchive.ProtoReflect.Descriptor instead.
func (*TabArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{11}
}

func (x *TabArchive) GetPosition() float32 {
	if x != nil && x.Position != nil {
		return *x.Position
	}
	return 0
}

func (x *TabArchive) GetAlignment() TabArchive_TabAlignmentType {
	if x != nil && x.Alignment != nil {
		return *x.Alignment
	}
	return TabArchive_kTabAlignmentLeft
}

func (x *TabArchive) GetLeader() string {
	if x != nil && x.Leader != nil {
		return *x.Leader
	}
	return ""
}

type TabsArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tabs []*TabArchive `protobuf:"bytes,1,rep,name=tabs" json:"tabs,omitempty"`
}

func (x *TabsArchive) Reset() {
	*x = TabsArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TabsArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TabsArchive) ProtoMessage() {}

func (x *TabsArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TabsArchive.ProtoReflect.Descriptor instead.
func (*TabsArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{12}
}

func (x *TabsArchive) GetTabs() []*TabArchive {
	if x != nil {
		return x.Tabs
	}
	return nil
}

type LineSpacingArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode         *LineSpacingArchive_LineSpacingModeType `protobuf:"varint,1,opt,name=mode,enum=TSWP.LineSpacingArchive_LineSpacingModeType" json:"mode,omitempty"`
	Amount       *float32                                `protobuf:"fixed32,2,opt,name=amount" json:"amount,omitempty"`
	BaselineRule *float32                                `protobuf:"fixed32,3,opt,name=baselineRule" json:"baselineRule,omitempty"`
}

func (x *LineSpacingArchive) Reset() {
	*x = LineSpacingArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LineSpacingArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LineSpacingArchive) ProtoMessage() {}

func (x *LineSpacingArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LineSpacingArchive.ProtoReflect.Descriptor instead.
func (*LineSpacingArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{13}
}

func (x *LineSpacingArchive) GetMode() LineSpacingArchive_LineSpacingModeType {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return LineSpacingArchive_kRelativeLineSpacing
}

func (x *LineSpacingArchive) GetAmount() float32 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

func (x *LineSpacingArchive) GetBaselineRule() float32 {
	if x != nil && x.BaselineRule != nil {
		return *x.BaselineRule
	}
	return 0
}

type ParagraphStylePropertiesArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alignment            *ParagraphStylePropertiesArchive_TextAlignmentType   `protobuf:"varint,1,opt,name=alignment,enum=TSWP.ParagraphStylePropertiesArchive_TextAlignmentType" json:"alignment,omitempty"`
	DecimalTabNull       *bool                                                `protobuf:"varint,2,opt,name=decimal_tab_null,json=decimalTabNull" json:"decimal_tab_null,omitempty"`
	DecimalTab           *string                                              `protobuf:"bytes,3,opt,name=decimal_tab,json=decimalTab" json:"decimal_tab,omitempty"`
	DefaultTabStops      *float32                                             `protobuf:"fixed32,4,opt,name=default_tab_stops,json=defaultTabStops" json:"default_tab_stops,omitempty"`
	FillNull             *bool                                                `protobuf:"varint,5,opt,name=fill_null,json=fillNull" json:"fill_null,omitempty"`
	Fill                 *Color                                               `protobuf:"bytes,6,opt,name=fill" json:"fill,omitempty"`
	FirstLineIndent      *float32                                             `protobuf:"fixed32,7,opt,name=first_line_indent,json=firstLineIndent" json:"first_line_indent,omitempty"`
	Hyphenate            *bool                                                `protobuf:"varint,8,opt,name=hyphenate" json:"hyphenate,omitempty"`
	KeepLinesTogether    *bool                                                `protobuf:"varint,9,opt,name=keep_lines_together,json=keepLinesTogether" json:"keep_lines_together,omitempty"`
	KeepWithNext         *bool                                                `protobuf:"varint,10,opt,name=keep_with_next,json=keepWithNext" json:"keep_with_next,omitempty"`
	LeftIndent           *float32                                             `protobuf:"fixed32,11,opt,name=left_indent,json=leftIndent" json:"left_indent,omitempty"`
	LineSpacingNull      *bool                                                `protobuf:"varint,12,opt,name=line_spacing_null,json=lineSpacingNull" json:"line_spacing_null,omitempty"`
	LineSpacing          *LineSpacingArchive                                  `protobuf:"bytes,13,opt,name=line_spacing,json=lineSpacing" json:"line_spacing,omitempty"`
	PageBreakBefore      *bool                                                `protobuf:"varint,14,opt,name=page_break_before,json=pageBreakBefore" json:"page_break_before,omitempty"`
	Borders              *ParagraphStylePropertiesArchive_ParagraphBorderType `protobuf:"varint,15,opt,name=borders,enum=TSWP.ParagraphStylePropertiesArchive_ParagraphBorderType" json:"borders,omitempty"`
	RuleOffsetNull       *bool                                                `protobuf:"varint,16,opt,name=rule_offset_null,json=ruleOffsetNull" json:"rule_offset_null,omitempty"`
	RuleOffset           *Point                                               `protobuf:"bytes,17,opt,name=rule_offset,json=ruleOffset" json:"rule_offset,omitempty"`
	RuleWidth            *float32                                             `protobuf:"fixed32,18,opt,name=rule_width,json=ruleWidth" json:"rule_width,omitempty"`
	RightIndent          *float32                                             `protobuf:"fixed32,19,opt,name=right_indent,json=rightIndent" json:"right_indent,omitempty"`
	SpaceAfter           *float32                                             `protobuf:"fixed32,20,opt,name=space_after,json=spaceAfter" json:"space_after,omitempty"`
	SpaceBefore          *float32                                             `protobuf:"fixed32,21,opt,name=space_before,json=spaceBefore" json:"space_before,omitempty"`
	TabsNull             *bool                                                `protobuf:"varint,24,opt,name=tabs_null,json=tabsNull" json:"tabs_null,omitempty"`
	Tabs                 *TabsArchive                                         `protobuf:"bytes,25,opt,name=tabs" json:"tabs,omitempty"`
	WidowControl         *bool                                                `protobuf:"varint,26,opt,name=widow_control,json=widowControl" json:"widow_control,omitempty"`
	OutlineLevel         *uint32                                              `protobuf:"varint,27,opt,name=outline_level,json=outlineLevel" json:"outline_level,omitempty"`
	OutlineStyle         *ParagraphStylePropertiesArchive_OutlineStyleType    `protobuf:"varint,28,opt,name=outline_style,json=outlineStyle,enum=TSWP.ParagraphStylePropertiesArchive_OutlineStyleType" json:"outline_style,omitempty"`
	FollowingStyleIdNull *bool                                                `protobuf:"varint,29,opt,name=following_style_id_null,json=followingStyleIdNull" json:"following_style_id_null,omitempty"`
	FollowingStyleId     *string                                              `protobuf:"bytes,30,opt,name=following_style_id,json=followingStyleId" json:"following_style_id,omitempty"`
	StrokeNull           *bool                                                `protobuf:"varint,31,opt,name=stroke_null,json=strokeNull" json:"stroke_null,omitempty"`
	Stroke               *StrokeArchive                                       `protobuf:"bytes,32,opt,name=stroke" json:"stroke,omitempty"`
	ShowInToc            *bool                                                `protobuf:"varint,33,opt,name=show_in_toc,json=showInToc" json:"show_in_toc,omitempty"`
	TocStyleIdNull       *bool                                                `protobuf:"varint,34,opt,name=toc_style_id_null,json=tocStyleIdNull" json:"toc_style_id_null,omitempty"`
	TocStyleId           *string                                              `protobuf:"bytes,35,opt,name=toc_style_id,json=tocStyleId" json:"toc_style_id,omitempty"`
	WritingDirection     *WritingDirectionType                                `protobuf:"varint,38,opt,name=writing_direction,json=writingDirection,enum=TSWP.WritingDirectionType,def=-1" json:"writing_direction,omitempty"`
	ListStyleNull        *bool                                                `protobuf:"varint,39,opt,name=list_style_null,json=listStyleNull" json:"list_style_null,omitempty"`
	ListStyle            *Reference                                           `protobuf:"bytes,40,opt,name=list_style,json=listStyle" json:"list_style,omitempty"`
	FollowingStyleNull   *bool                                                `protobuf:"varint,41,opt,name=following_style_null,json=followingStyleNull" json:"following_style_null,omitempty"`
	FollowingStyle       *Reference                                           `protobuf:"bytes,42,opt,name=following_style,json=followingStyle" json:"following_style,omitempty"`
	ShowInBookmarksList  *bool                                                `protobuf:"varint,43,opt,name=show_in_bookmarks_list,json=showInBookmarksList" json:"show_in_bookmarks_list,omitempty"`
	ShowInTocNavigator   *bool                                                `protobuf:"varint,44,opt,name=show_in_toc_navigator,json=showInTocNavigator" json:"show_in_toc_navigator,omitempty"`
}

// Default values for ParagraphStylePropertiesArchive fields.
const (
	Default_ParagraphStylePropertiesArchive_WritingDirection = WritingDirectionType_kWritingDirectionNatural
)

func (x *ParagraphStylePropertiesArchive) Reset() {
	*x = ParagraphStylePropertiesArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParagraphStylePropertiesArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParagraphStylePropertiesArchive) ProtoMessage() {}

func (x *ParagraphStylePropertiesArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParagraphStylePropertiesArchive.ProtoReflect.Descriptor instead.
func (*ParagraphStylePropertiesArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{14}
}

func (x *ParagraphStylePropertiesArchive) GetAlignment() ParagraphStylePropertiesArchive_TextAlignmentType {
	if x != nil && x.Alignment != nil {
		return *x.Alignment
	}
	return ParagraphStylePropertiesArchive_TATvalue0
}

func (x *ParagraphStylePropertiesArchive) GetDecimalTabNull() bool {
	if x != nil && x.DecimalTabNull != nil {
		return *x.DecimalTabNull
	}
	return false
}

func (x *ParagraphStylePropertiesArchive) GetDecimalTab() string {
	if x != nil && x.DecimalTab != nil {
		return *x.DecimalTab
	}
	return ""
}

func (x *ParagraphStylePropertiesArchive) GetDefaultTabStops() float32 {
	if x != nil && x.DefaultTabStops != nil {
		return *x.DefaultTabStops
	}
	return 0
}

func (x *ParagraphStylePropertiesArchive) GetFillNull() bool {
	if x != nil && x.FillNull != nil {
		return *x.FillNull
	}
	return false
}

func (x *ParagraphStylePropertiesArchive) GetFill() *Color {
	if x != nil {
		return x.Fill
	}
	return nil
}

func (x *ParagraphStylePropertiesArchive) GetFirstLineIndent() float32 {
	if x != nil && x.FirstLineIndent != nil {
		return *x.FirstLineIndent
	}
	return 0
}

func (x *ParagraphStylePropertiesArchive) GetHyphenate() bool {
	if x != nil && x.Hyphenate != nil {
		return *x.Hyphenate
	}
	return false
}

func (x *ParagraphStylePropertiesArchive) GetKeepLinesTogether() bool {
	if x != nil && x.KeepLinesTogether != nil {
		return *x.KeepLinesTogether
	}
	return false
}

func (x *ParagraphStylePropertiesArchive) GetKeepWithNext() bool {
	if x != nil && x.KeepWithNext != nil {
		return *x.KeepWithNext
	}
	return false
}

func (x *ParagraphStylePropertiesArchive) GetLeftIndent() float32 {
	if x != nil && x.LeftIndent != nil {
		return *x.LeftIndent
	}
	return 0
}

func (x *ParagraphStylePropertiesArchive) GetLineSpacingNull() bool {
	if x != nil && x.LineSpacingNull != nil {
		return *x.LineSpacingNull
	}
	return false
}

func (x *ParagraphStylePropertiesArchive) GetLineSpacing() *LineSpacingArchive {
	if x != nil {
		return x.LineSpacing
	}
	return nil
}

func (x *ParagraphStylePropertiesArchive) GetPageBreakBefore() bool {
	if x != nil && x.PageBreakBefore != nil {
		return *x.PageBreakBefore
	}
	return false
}

func (x *ParagraphStylePropertiesArchive) GetBorders() ParagraphStylePropertiesArchive_ParagraphBorderType {
	if x != nil && x.Borders != nil {
		return *x.Borders
	}
	return ParagraphStylePropertiesArchive_PBTvalue0
}

func (x *ParagraphStylePropertiesArchive) GetRuleOffsetNull() bool {
	if x != nil && x.RuleOffsetNull != nil {
		return *x.RuleOffsetNull
	}
	return false
}

func (x *ParagraphStylePropertiesArchive) GetRuleOffset() *Point {
	if x != nil {
		return x.RuleOffset
	}
	return nil
}

func (x *ParagraphStylePropertiesArchive) GetRuleWidth() float32 {
	if x != nil && x.RuleWidth != nil {
		return *x.RuleWidth
	}
	return 0
}

func (x *ParagraphStylePropertiesArchive) GetRightIndent() float32 {
	if x != nil && x.RightIndent != nil {
		return *x.RightIndent
	}
	return 0
}

func (x *ParagraphStylePropertiesArchive) GetSpaceAfter() float32 {
	if x != nil && x.SpaceAfter != nil {
		return *x.SpaceAfter
	}
	return 0
}

func (x *ParagraphStylePropertiesArchive) GetSpaceBefore() float32 {
	if x != nil && x.SpaceBefore != nil {
		return *x.SpaceBefore
	}
	return 0
}

func (x *ParagraphStylePropertiesArchive) GetTabsNull() bool {
	if x != nil && x.TabsNull != nil {
		return *x.TabsNull
	}
	return false
}

func (x *ParagraphStylePropertiesArchive) GetTabs() *TabsArchive {
	if x != nil {
		return x.Tabs
	}
	return nil
}

func (x *ParagraphStylePropertiesArchive) GetWidowControl() bool {
	if x != nil && x.WidowControl != nil {
		return *x.WidowControl
	}
	return false
}

func (x *ParagraphStylePropertiesArchive) GetOutlineLevel() uint32 {
	if x != nil && x.OutlineLevel != nil {
		return *x.OutlineLevel
	}
	return 0
}

func (x *ParagraphStylePropertiesArchive) GetOutlineStyle() ParagraphStylePropertiesArchive_OutlineStyleType {
	if x != nil && x.OutlineStyle != nil {
		return *x.OutlineStyle
	}
	return ParagraphStylePropertiesArchive_OSTvalue0
}

func (x *ParagraphStylePropertiesArchive) GetFollowingStyleIdNull() bool {
	if x != nil && x.FollowingStyleIdNull != nil {
		return *x.FollowingStyleIdNull
	}
	return false
}

func (x *ParagraphStylePropertiesArchive) GetFollowingStyleId() string {
	if x != nil && x.FollowingStyleId != nil {
		return *x.FollowingStyleId
	}
	return ""
}

func (x *ParagraphStylePropertiesArchive) GetStrokeNull() bool {
	if x != nil && x.StrokeNull != nil {
		return *x.StrokeNull
	}
	return false
}

func (x *ParagraphStylePropertiesArchive) GetStroke() *StrokeArchive {
	if x != nil {
		return x.Stroke
	}
	return nil
}

func (x *ParagraphStylePropertiesArchive) GetShowInToc() bool {
	if x != nil && x.ShowInToc != nil {
		return *x.ShowInToc
	}
	return false
}

func (x *ParagraphStylePropertiesArchive) GetTocStyleIdNull() bool {
	if x != nil && x.TocStyleIdNull != nil {
		return *x.TocStyleIdNull
	}
	return false
}

func (x *ParagraphStylePropertiesArchive) GetTocStyleId() string {
	if x != nil && x.TocStyleId != nil {
		return *x.TocStyleId
	}
	return ""
}

func (x *ParagraphStylePropertiesArchive) GetWritingDirection() WritingDirectionType {
	if x != nil && x.WritingDirection != nil {
		return *x.WritingDirection
	}
	return Default_ParagraphStylePropertiesArchive_WritingDirection
}

func (x *ParagraphStylePropertiesArchive) GetListStyleNull() bool {
	if x != nil && x.ListStyleNull != nil {
		return *x.ListStyleNull
	}
	return false
}

func (x *ParagraphStylePropertiesArchive) GetListStyle() *Reference {
	if x != nil {
		return x.ListStyle
	}
	return nil
}

func (x *ParagraphStylePropertiesArchive) GetFollowingStyleNull() bool {
	if x != nil && x.FollowingStyleNull != nil {
		return *x.FollowingStyleNull
	}
	return false
}

func (x *ParagraphStylePropertiesArchive) GetFollowingStyle() *Reference {
	if x != nil {
		return x.FollowingStyle
	}
	return nil
}

func (x *ParagraphStylePropertiesArchive) GetShowInBookmarksList() bool {
	if x != nil && x.ShowInBookmarksList != nil {
		return *x.ShowInBookmarksList
	}
	return false
}

func (x *ParagraphStylePropertiesArchive) GetShowInTocNavigator() bool {
	if x != nil && x.ShowInTocNavigator != nil {
		return *x.ShowInTocNavigator
	}
	return false
}

type ParagraphStyleArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super          *StyleArchive                    `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	OverrideCount  *uint32                          `protobuf:"varint,10,opt,name=override_count,json=overrideCount,def=0" json:"override_count,omitempty"`
	CharProperties *CharacterStylePropertiesArchive `protobuf:"bytes,11,opt,name=char_properties,json=charProperties" json:"char_properties,omitempty"`
	ParaProperties *ParagraphStylePropertiesArchive `protobuf:"bytes,12,opt,name=para_properties,json=paraProperties" json:"para_properties,omitempty"`
}

// Default values for ParagraphStyleArchive fields.
const (
	Default_ParagraphStyleArchive_OverrideCount = uint32(0)
)

func (x *ParagraphStyleArchive) Reset() {
	*x = ParagraphStyleArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParagraphStyleArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParagraphStyleArchive) ProtoMessage() {}

func (x *ParagraphStyleArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParagraphStyleArchive.ProtoReflect.Descriptor instead.
func (*ParagraphStyleArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{15}
}

func (x *ParagraphStyleArchive) GetSuper() *StyleArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *ParagraphStyleArchive) GetOverrideCount() uint32 {
	if x != nil && x.OverrideCount != nil {
		return *x.OverrideCount
	}
	return Default_ParagraphStyleArchive_OverrideCount
}

func (x *ParagraphStyleArchive) GetCharProperties() *CharacterStylePropertiesArchive {
	if x != nil {
		return x.CharProperties
	}
	return nil
}

func (x *ParagraphStyleArchive) GetParaProperties() *ParagraphStylePropertiesArchive {
	if x != nil {
		return x.ParaProperties
	}
	return nil
}

type ListStyleArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super            *StyleArchive                     `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	OverrideCount    *uint32                           `protobuf:"varint,10,opt,name=override_count,json=overrideCount,def=0" json:"override_count,omitempty"`
	LabelTypes       []ListStyleArchive_LabelType      `protobuf:"varint,11,rep,name=label_types,json=labelTypes,enum=TSWP.ListStyleArchive_LabelType" json:"label_types,omitempty"`
	TextIndents      []float32                         `protobuf:"fixed32,12,rep,name=text_indents,json=textIndents" json:"text_indents,omitempty"`
	Indents          []float32                         `protobuf:"fixed32,13,rep,name=indents" json:"indents,omitempty"`
	Geometries       []*ListStyleArchive_LabelGeometry `protobuf:"bytes,14,rep,name=geometries" json:"geometries,omitempty"`
	NumberTypes      []ListStyleArchive_NumberType     `protobuf:"varint,15,rep,name=number_types,json=numberTypes,enum=TSWP.ListStyleArchive_NumberType" json:"number_types,omitempty"`
	Strings          []string                          `protobuf:"bytes,16,rep,name=strings" json:"strings,omitempty"`
	Images           []*ListStyleArchive_LabelImage    `protobuf:"bytes,17,rep,name=images" json:"images,omitempty"`
	ShadowNull       *bool                             `protobuf:"varint,18,opt,name=shadow_null,json=shadowNull" json:"shadow_null,omitempty"`
	Shadow           *ShadowArchive                    `protobuf:"bytes,19,opt,name=shadow" json:"shadow,omitempty"`
	FontColorNull    *bool                             `protobuf:"varint,20,opt,name=font_color_null,json=fontColorNull" json:"font_color_null,omitempty"`
	FontColor        *Color                            `protobuf:"bytes,21,opt,name=font_color,json=fontColor" json:"font_color,omitempty"`
	FontNameNull     *bool                             `protobuf:"varint,22,opt,name=font_name_null,json=fontNameNull" json:"font_name_null,omitempty"`
	FontName         *string                           `protobuf:"bytes,23,opt,name=font_name,json=fontName" json:"font_name,omitempty"`
	WritingDirection *WritingDirectionType             `protobuf:"varint,24,opt,name=writing_direction,json=writingDirection,enum=TSWP.WritingDirectionType,def=-1" json:"writing_direction,omitempty"`
	TieredNumbers    []bool                            `protobuf:"varint,25,rep,name=tiered_numbers,json=tieredNumbers" json:"tiered_numbers,omitempty"`
}

// Default values for ListStyleArchive fields.
const (
	Default_ListStyleArchive_OverrideCount    = uint32(0)
	Default_ListStyleArchive_WritingDirection = WritingDirectionType_kWritingDirectionNatural
)

func (x *ListStyleArchive) Reset() {
	*x = ListStyleArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStyleArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStyleArchive) ProtoMessage() {}

func (x *ListStyleArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStyleArchive.ProtoReflect.Descriptor instead.
func (*ListStyleArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{16}
}

func (x *ListStyleArchive) GetSuper() *StyleArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *ListStyleArchive) GetOverrideCount() uint32 {
	if x != nil && x.OverrideCount != nil {
		return *x.OverrideCount
	}
	return Default_ListStyleArchive_OverrideCount
}

func (x *ListStyleArchive) GetLabelTypes() []ListStyleArchive_LabelType {
	if x != nil {
		return x.LabelTypes
	}
	return nil
}

func (x *ListStyleArchive) GetTextIndents() []float32 {
	if x != nil {
		return x.TextIndents
	}
	return nil
}

func (x *ListStyleArchive) GetIndents() []float32 {
	if x != nil {
		return x.Indents
	}
	return nil
}

func (x *ListStyleArchive) GetGeometries() []*ListStyleArchive_LabelGeometry {
	if x != nil {
		return x.Geometries
	}
	return nil
}

func (x *ListStyleArchive) GetNumberTypes() []ListStyleArchive_NumberType {
	if x != nil {
		return x.NumberTypes
	}
	return nil
}

func (x *ListStyleArchive) GetStrings() []string {
	if x != nil {
		return x.Strings
	}
	return nil
}

func (x *ListStyleArchive) GetImages() []*ListStyleArchive_LabelImage {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *ListStyleArchive) GetShadowNull() bool {
	if x != nil && x.ShadowNull != nil {
		return *x.ShadowNull
	}
	return false
}

func (x *ListStyleArchive) GetShadow() *ShadowArchive {
	if x != nil {
		return x.Shadow
	}
	return nil
}

func (x *ListStyleArchive) GetFontColorNull() bool {
	if x != nil && x.FontColorNull != nil {
		return *x.FontColorNull
	}
	return false
}

func (x *ListStyleArchive) GetFontColor() *Color {
	if x != nil {
		return x.FontColor
	}
	return nil
}

func (x *ListStyleArchive) GetFontNameNull() bool {
	if x != nil && x.FontNameNull != nil {
		return *x.FontNameNull
	}
	return false
}

func (x *ListStyleArchive) GetFontName() string {
	if x != nil && x.FontName != nil {
		return *x.FontName
	}
	return ""
}

func (x *ListStyleArchive) GetWritingDirection() WritingDirectionType {
	if x != nil && x.WritingDirection != nil {
		return *x.WritingDirection
	}
	return Default_ListStyleArchive_WritingDirection
}

func (x *ListStyleArchive) GetTieredNumbers() []bool {
	if x != nil {
		return x.TieredNumbers
	}
	return nil
}

type TextStylePresetArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PresetIdentifier *string    `protobuf:"bytes,1,opt,name=preset_identifier,json=presetIdentifier" json:"preset_identifier,omitempty"`
	ParagraphStyle   *Reference `protobuf:"bytes,2,opt,name=paragraph_style,json=paragraphStyle" json:"paragraph_style,omitempty"`
	ListStyle        *Reference `protobuf:"bytes,3,opt,name=list_style,json=listStyle" json:"list_style,omitempty"`
}

func (x *TextStylePresetArchive) Reset() {
	*x = TextStylePresetArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextStylePresetArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextStylePresetArchive) ProtoMessage() {}

func (x *TextStylePresetArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextStylePresetArchive.ProtoReflect.Descriptor instead.
func (*TextStylePresetArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{17}
}

func (x *TextStylePresetArchive) GetPresetIdentifier() string {
	if x != nil && x.PresetIdentifier != nil {
		return *x.PresetIdentifier
	}
	return ""
}

func (x *TextStylePresetArchive) GetParagraphStyle() *Reference {
	if x != nil {
		return x.ParagraphStyle
	}
	return nil
}

func (x *TextStylePresetArchive) GetListStyle() *Reference {
	if x != nil {
		return x.ListStyle
	}
	return nil
}

type ColumnsArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EqualColumns    *ColumnsArchive_EqualColumnsArchive    `protobuf:"bytes,1,opt,name=equal_columns,json=equalColumns" json:"equal_columns,omitempty"`
	NonEqualColumns *ColumnsArchive_NonEqualColumnsArchive `protobuf:"bytes,2,opt,name=non_equal_columns,json=nonEqualColumns" json:"non_equal_columns,omitempty"`
}

func (x *ColumnsArchive) Reset() {
	*x = ColumnsArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnsArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnsArchive) ProtoMessage() {}

func (x *ColumnsArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnsArchive.ProtoReflect.Descriptor instead.
func (*ColumnsArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{18}
}

func (x *ColumnsArchive) GetEqualColumns() *ColumnsArchive_EqualColumnsArchive {
	if x != nil {
		return x.EqualColumns
	}
	return nil
}

func (x *ColumnsArchive) GetNonEqualColumns() *ColumnsArchive_NonEqualColumnsArchive {
	if x != nil {
		return x.NonEqualColumns
	}
	return nil
}

type PaddingArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Left   *float32 `protobuf:"fixed32,1,opt,name=left" json:"left,omitempty"`
	Top    *float32 `protobuf:"fixed32,2,opt,name=top" json:"top,omitempty"`
	Right  *float32 `protobuf:"fixed32,3,opt,name=right" json:"right,omitempty"`
	Bottom *float32 `protobuf:"fixed32,4,opt,name=bottom" json:"bottom,omitempty"`
}

func (x *PaddingArchive) Reset() {
	*x = PaddingArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaddingArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaddingArchive) ProtoMessage() {}

func (x *PaddingArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaddingArchive.ProtoReflect.Descriptor instead.
func (*PaddingArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{19}
}

func (x *PaddingArchive) GetLeft() float32 {
	if x != nil && x.Left != nil {
		return *x.Left
	}
	return 0
}

func (x *PaddingArchive) GetTop() float32 {
	if x != nil && x.Top != nil {
		return *x.Top
	}
	return 0
}

func (x *PaddingArchive) GetRight() float32 {
	if x != nil && x.Right != nil {
		return *x.Right
	}
	return 0
}

func (x *PaddingArchive) GetBottom() float32 {
	if x != nil && x.Bottom != nil {
		return *x.Bottom
	}
	return 0
}

type ColumnStylePropertiesArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Continuous         *bool                                               `protobuf:"varint,1,opt,name=continuous" json:"continuous,omitempty"`
	ShrinkToFit        *bool                                               `protobuf:"varint,2,opt,name=shrink_to_fit,json=shrinkToFit" json:"shrink_to_fit,omitempty"`
	VerticalText       *bool                                               `protobuf:"varint,3,opt,name=vertical_text,json=verticalText" json:"vertical_text,omitempty"`
	MinHorizontalInset *float32                                            `protobuf:"fixed32,4,opt,name=min_horizontal_inset,json=minHorizontalInset" json:"min_horizontal_inset,omitempty"`
	VerticalAlignment  *ColumnStylePropertiesArchive_VerticalAlignmentType `protobuf:"varint,5,opt,name=vertical_alignment,json=verticalAlignment,enum=TSWP.ColumnStylePropertiesArchive_VerticalAlignmentType" json:"vertical_alignment,omitempty"`
	ColumnsNull        *bool                                               `protobuf:"varint,6,opt,name=columns_null,json=columnsNull" json:"columns_null,omitempty"`
	Columns            *ColumnsArchive                                     `protobuf:"bytes,7,opt,name=columns" json:"columns,omitempty"`
	MarginsNull        *bool                                               `protobuf:"varint,8,opt,name=margins_null,json=marginsNull" json:"margins_null,omitempty"`
	Margins            *PaddingArchive                                     `protobuf:"bytes,9,opt,name=margins" json:"margins,omitempty"`
	PaddingNull        *bool                                               `protobuf:"varint,10,opt,name=padding_null,json=paddingNull" json:"padding_null,omitempty"`
	Padding            *PaddingArchive                                     `protobuf:"bytes,11,opt,name=padding" json:"padding,omitempty"`
	WritingDirection   *WritingDirectionType                               `protobuf:"varint,12,opt,name=writing_direction,json=writingDirection,enum=TSWP.WritingDirectionType,def=-1" json:"writing_direction,omitempty"`
}

// Default values for ColumnStylePropertiesArchive fields.
const (
	Default_ColumnStylePropertiesArchive_WritingDirection = WritingDirectionType_kWritingDirectionNatural
)

func (x *ColumnStylePropertiesArchive) Reset() {
	*x = ColumnStylePropertiesArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnStylePropertiesArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnStylePropertiesArchive) ProtoMessage() {}

func (x *ColumnStylePropertiesArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnStylePropertiesArchive.ProtoReflect.Descriptor instead.
func (*ColumnStylePropertiesArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{20}
}

func (x *ColumnStylePropertiesArchive) GetContinuous() bool {
	if x != nil && x.Continuous != nil {
		return *x.Continuous
	}
	return false
}

func (x *ColumnStylePropertiesArchive) GetShrinkToFit() bool {
	if x != nil && x.ShrinkToFit != nil {
		return *x.ShrinkToFit
	}
	return false
}

func (x *ColumnStylePropertiesArchive) GetVerticalText() bool {
	if x != nil && x.VerticalText != nil {
		return *x.VerticalText
	}
	return false
}

func (x *ColumnStylePropertiesArchive) GetMinHorizontalInset() float32 {
	if x != nil && x.MinHorizontalInset != nil {
		return *x.MinHorizontalInset
	}
	return 0
}

func (x *ColumnStylePropertiesArchive) GetVerticalAlignment() ColumnStylePropertiesArchive_VerticalAlignmentType {
	if x != nil && x.VerticalAlignment != nil {
		return *x.VerticalAlignment
	}
	return ColumnStylePropertiesArchive_kFrameAlignTop
}

func (x *ColumnStylePropertiesArchive) GetColumnsNull() bool {
	if x != nil && x.ColumnsNull != nil {
		return *x.ColumnsNull
	}
	return false
}

func (x *ColumnStylePropertiesArchive) GetColumns() *ColumnsArchive {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *ColumnStylePropertiesArchive) GetMarginsNull() bool {
	if x != nil && x.MarginsNull != nil {
		return *x.MarginsNull
	}
	return false
}

func (x *ColumnStylePropertiesArchive) GetMargins() *PaddingArchive {
	if x != nil {
		return x.Margins
	}
	return nil
}

func (x *ColumnStylePropertiesArchive) GetPaddingNull() bool {
	if x != nil && x.PaddingNull != nil {
		return *x.PaddingNull
	}
	return false
}

func (x *ColumnStylePropertiesArchive) GetPadding() *PaddingArchive {
	if x != nil {
		return x.Padding
	}
	return nil
}

func (x *ColumnStylePropertiesArchive) GetWritingDirection() WritingDirectionType {
	if x != nil && x.WritingDirection != nil {
		return *x.WritingDirection
	}
	return Default_ColumnStylePropertiesArchive_WritingDirection
}

type ColumnStyleArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super            *StyleArchive                 `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	OverrideCount    *uint32                       `protobuf:"varint,10,opt,name=override_count,json=overrideCount,def=0" json:"override_count,omitempty"`
	ColumnProperties *ColumnStylePropertiesArchive `protobuf:"bytes,11,opt,name=column_properties,json=columnProperties" json:"column_properties,omitempty"`
}

// Default values for ColumnStyleArchive fields.
const (
	Default_ColumnStyleArchive_OverrideCount = uint32(0)
)

func (x *ColumnStyleArchive) Reset() {
	*x = ColumnStyleArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnStyleArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnStyleArchive) ProtoMessage() {}

func (x *ColumnStyleArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnStyleArchive.ProtoReflect.Descriptor instead.
func (*ColumnStyleArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{21}
}

func (x *ColumnStyleArchive) GetSuper() *StyleArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *ColumnStyleArchive) GetOverrideCount() uint32 {
	if x != nil && x.OverrideCount != nil {
		return *x.OverrideCount
	}
	return Default_ColumnStyleArchive_OverrideCount
}

func (x *ColumnStyleArchive) GetColumnProperties() *ColumnStylePropertiesArchive {
	if x != nil {
		return x.ColumnProperties
	}
	return nil
}

type TSWPShapeStylePropertiesArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShrinkToFit            *bool                                                  `protobuf:"varint,1,opt,name=shrink_to_fit,json=shrinkToFit" json:"shrink_to_fit,omitempty"`
	VerticalAlignment      *TSWPShapeStylePropertiesArchive_VerticalAlignmentType `protobuf:"varint,2,opt,name=vertical_alignment,json=verticalAlignment,enum=TSWP.TSWPShapeStylePropertiesArchive_VerticalAlignmentType" json:"vertical_alignment,omitempty"`
	ColumnsNull            *bool                                                  `protobuf:"varint,3,opt,name=columns_null,json=columnsNull" json:"columns_null,omitempty"`
	Columns                *ColumnsArchive                                        `protobuf:"bytes,4,opt,name=columns" json:"columns,omitempty"`
	PaddingNull            *bool                                                  `protobuf:"varint,5,opt,name=padding_null,json=paddingNull" json:"padding_null,omitempty"`
	Padding                *PaddingArchive                                        `protobuf:"bytes,6,opt,name=padding" json:"padding,omitempty"`
	DefaultTextPresetIndex *uint32                                                `protobuf:"varint,7,opt,name=default_text_preset_index,json=defaultTextPresetIndex" json:"default_text_preset_index,omitempty"`
	VerticalText           *bool                                                  `protobuf:"varint,8,opt,name=vertical_text,json=verticalText" json:"vertical_text,omitempty"`
	ParagraphStyleNull     *bool                                                  `protobuf:"varint,9,opt,name=paragraph_style_null,json=paragraphStyleNull" json:"paragraph_style_null,omitempty"`
	ParagraphStyle         *Reference                                             `protobuf:"bytes,10,opt,name=paragraph_style,json=paragraphStyle" json:"paragraph_style,omitempty"`
	VerticalText_40        *bool                                                  `protobuf:"varint,11,opt,name=vertical_text_40,json=verticalText40" json:"vertical_text_40,omitempty"`
}

func (x *TSWPShapeStylePropertiesArchive) Reset() {
	*x = TSWPShapeStylePropertiesArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSWPShapeStylePropertiesArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSWPShapeStylePropertiesArchive) ProtoMessage() {}

func (x *TSWPShapeStylePropertiesArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSWPShapeStylePropertiesArchive.ProtoReflect.Descriptor instead.
func (*TSWPShapeStylePropertiesArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{22}
}

func (x *TSWPShapeStylePropertiesArchive) GetShrinkToFit() bool {
	if x != nil && x.ShrinkToFit != nil {
		return *x.ShrinkToFit
	}
	return false
}

func (x *TSWPShapeStylePropertiesArchive) GetVerticalAlignment() TSWPShapeStylePropertiesArchive_VerticalAlignmentType {
	if x != nil && x.VerticalAlignment != nil {
		return *x.VerticalAlignment
	}
	return TSWPShapeStylePropertiesArchive_kFrameAlignTop
}

func (x *TSWPShapeStylePropertiesArchive) GetColumnsNull() bool {
	if x != nil && x.ColumnsNull != nil {
		return *x.ColumnsNull
	}
	return false
}

func (x *TSWPShapeStylePropertiesArchive) GetColumns() *ColumnsArchive {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *TSWPShapeStylePropertiesArchive) GetPaddingNull() bool {
	if x != nil && x.PaddingNull != nil {
		return *x.PaddingNull
	}
	return false
}

func (x *TSWPShapeStylePropertiesArchive) GetPadding() *PaddingArchive {
	if x != nil {
		return x.Padding
	}
	return nil
}

func (x *TSWPShapeStylePropertiesArchive) GetDefaultTextPresetIndex() uint32 {
	if x != nil && x.DefaultTextPresetIndex != nil {
		return *x.DefaultTextPresetIndex
	}
	return 0
}

func (x *TSWPShapeStylePropertiesArchive) GetVerticalText() bool {
	if x != nil && x.VerticalText != nil {
		return *x.VerticalText
	}
	return false
}

func (x *TSWPShapeStylePropertiesArchive) GetParagraphStyleNull() bool {
	if x != nil && x.ParagraphStyleNull != nil {
		return *x.ParagraphStyleNull
	}
	return false
}

func (x *TSWPShapeStylePropertiesArchive) GetParagraphStyle() *Reference {
	if x != nil {
		return x.ParagraphStyle
	}
	return nil
}

func (x *TSWPShapeStylePropertiesArchive) GetVerticalText_40() bool {
	if x != nil && x.VerticalText_40 != nil {
		return *x.VerticalText_40
	}
	return false
}

type TSWPShapeStyleArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super           *ShapeStyleArchive               `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	OverrideCount   *uint32                          `protobuf:"varint,10,opt,name=override_count,json=overrideCount,def=0" json:"override_count,omitempty"`
	ShapeProperties *TSWPShapeStylePropertiesArchive `protobuf:"bytes,11,opt,name=shape_properties,json=shapeProperties" json:"shape_properties,omitempty"`
}

// Default values for TSWPShapeStyleArchive fields.
const (
	Default_TSWPShapeStyleArchive_OverrideCount = uint32(0)
)

func (x *TSWPShapeStyleArchive) Reset() {
	*x = TSWPShapeStyleArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSWPShapeStyleArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSWPShapeStyleArchive) ProtoMessage() {}

func (x *TSWPShapeStyleArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSWPShapeStyleArchive.ProtoReflect.Descriptor instead.
func (*TSWPShapeStyleArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{23}
}

func (x *TSWPShapeStyleArchive) GetSuper() *ShapeStyleArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *TSWPShapeStyleArchive) GetOverrideCount() uint32 {
	if x != nil && x.OverrideCount != nil {
		return *x.OverrideCount
	}
	return Default_TSWPShapeStyleArchive_OverrideCount
}

func (x *TSWPShapeStyleArchive) GetShapeProperties() *TSWPShapeStylePropertiesArchive {
	if x != nil {
		return x.ShapeProperties
	}
	return nil
}

type TSWPThemePresetsArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ListStylePresets         []*Reference `protobuf:"bytes,1,rep,name=list_style_presets,json=listStylePresets" json:"list_style_presets,omitempty"`
	TextStylePresets         []*Reference `protobuf:"bytes,2,rep,name=text_style_presets,json=textStylePresets" json:"text_style_presets,omitempty"`
	ImportedTextStylePresets []*Reference `protobuf:"bytes,3,rep,name=imported_text_style_presets,json=importedTextStylePresets" json:"imported_text_style_presets,omitempty"`
	TocEntryStylePresets     []*Reference `protobuf:"bytes,4,rep,name=toc_entry_style_presets,json=tocEntryStylePresets" json:"toc_entry_style_presets,omitempty"`
	TocSettingsPresets       []*Reference `protobuf:"bytes,5,rep,name=toc_settings_presets,json=tocSettingsPresets" json:"toc_settings_presets,omitempty"`
	CharacterStylePresets    []*Reference `protobuf:"bytes,6,rep,name=character_style_presets,json=characterStylePresets" json:"character_style_presets,omitempty"`
	ParagraphStylePresets    []*Reference `protobuf:"bytes,7,rep,name=paragraph_style_presets,json=paragraphStylePresets" json:"paragraph_style_presets,omitempty"`
	DropcapStylePresets      []*Reference `protobuf:"bytes,8,rep,name=dropcap_style_presets,json=dropcapStylePresets" json:"dropcap_style_presets,omitempty"`
}

func (x *TSWPThemePresetsArchive) Reset() {
	*x = TSWPThemePresetsArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSWPThemePresetsArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSWPThemePresetsArchive) ProtoMessage() {}

func (x *TSWPThemePresetsArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSWPThemePresetsArchive.ProtoReflect.Descriptor instead.
func (*TSWPThemePresetsArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{24}
}

func (x *TSWPThemePresetsArchive) GetListStylePresets() []*Reference {
	if x != nil {
		return x.ListStylePresets
	}
	return nil
}

func (x *TSWPThemePresetsArchive) GetTextStylePresets() []*Reference {
	if x != nil {
		return x.TextStylePresets
	}
	return nil
}

func (x *TSWPThemePresetsArchive) GetImportedTextStylePresets() []*Reference {
	if x != nil {
		return x.ImportedTextStylePresets
	}
	return nil
}

func (x *TSWPThemePresetsArchive) GetTocEntryStylePresets() []*Reference {
	if x != nil {
		return x.TocEntryStylePresets
	}
	return nil
}

func (x *TSWPThemePresetsArchive) GetTocSettingsPresets() []*Reference {
	if x != nil {
		return x.TocSettingsPresets
	}
	return nil
}

func (x *TSWPThemePresetsArchive) GetCharacterStylePresets() []*Reference {
	if x != nil {
		return x.CharacterStylePresets
	}
	return nil
}

func (x *TSWPThemePresetsArchive) GetParagraphStylePresets() []*Reference {
	if x != nil {
		return x.ParagraphStylePresets
	}
	return nil
}

func (x *TSWPThemePresetsArchive) GetDropcapStylePresets() []*Reference {
	if x != nil {
		return x.DropcapStylePresets
	}
	return nil
}

type TextPresetDisplayItemArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Preset      *Reference `protobuf:"bytes,1,req,name=preset" json:"preset,omitempty"`
	DisplayName *string    `protobuf:"bytes,2,req,name=display_name,json=displayName" json:"display_name,omitempty"`
}

func (x *TextPresetDisplayItemArchive) Reset() {
	*x = TextPresetDisplayItemArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextPresetDisplayItemArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextPresetDisplayItemArchive) ProtoMessage() {}

func (x *TextPresetDisplayItemArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextPresetDisplayItemArchive.ProtoReflect.Descriptor instead.
func (*TextPresetDisplayItemArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{25}
}

func (x *TextPresetDisplayItemArchive) GetPreset() *Reference {
	if x != nil {
		return x.Preset
	}
	return nil
}

func (x *TextPresetDisplayItemArchive) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

type TOCEntryStylePropertiesArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNumberStyleNull *bool      `protobuf:"varint,1,opt,name=page_number_style_null,json=pageNumberStyleNull" json:"page_number_style_null,omitempty"`
	PageNumberStyle     *Reference `protobuf:"bytes,2,opt,name=page_number_style,json=pageNumberStyle" json:"page_number_style,omitempty"`
	ShowPageNumber      *bool      `protobuf:"varint,3,opt,name=show_page_number,json=showPageNumber" json:"show_page_number,omitempty"`
}

func (x *TOCEntryStylePropertiesArchive) Reset() {
	*x = TOCEntryStylePropertiesArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TOCEntryStylePropertiesArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TOCEntryStylePropertiesArchive) ProtoMessage() {}

func (x *TOCEntryStylePropertiesArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TOCEntryStylePropertiesArchive.ProtoReflect.Descriptor instead.
func (*TOCEntryStylePropertiesArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{26}
}

func (x *TOCEntryStylePropertiesArchive) GetPageNumberStyleNull() bool {
	if x != nil && x.PageNumberStyleNull != nil {
		return *x.PageNumberStyleNull
	}
	return false
}

func (x *TOCEntryStylePropertiesArchive) GetPageNumberStyle() *Reference {
	if x != nil {
		return x.PageNumberStyle
	}
	return nil
}

func (x *TOCEntryStylePropertiesArchive) GetShowPageNumber() bool {
	if x != nil && x.ShowPageNumber != nil {
		return *x.ShowPageNumber
	}
	return false
}

type TOCEntryStyleArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super         *ParagraphStyleArchive          `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	TocProperties *TOCEntryStylePropertiesArchive `protobuf:"bytes,2,opt,name=toc_properties,json=tocProperties" json:"toc_properties,omitempty"`
}

func (x *TOCEntryStyleArchive) Reset() {
	*x = TOCEntryStyleArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TOCEntryStyleArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TOCEntryStyleArchive) ProtoMessage() {}

func (x *TOCEntryStyleArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TOCEntryStyleArchive.ProtoReflect.Descriptor instead.
func (*TOCEntryStyleArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{27}
}

func (x *TOCEntryStyleArchive) GetSuper() *ParagraphStyleArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *TOCEntryStyleArchive) GetTocProperties() *TOCEntryStylePropertiesArchive {
	if x != nil {
		return x.TocProperties
	}
	return nil
}

type TOCSettingsArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TocName  *string                            `protobuf:"bytes,1,opt,name=toc_name,json=tocName" json:"toc_name,omitempty"`
	TocScope *uint32                            `protobuf:"varint,2,opt,name=toc_scope,json=tocScope" json:"toc_scope,omitempty"`
	Entries  []*TOCSettingsArchive_TOCEntryData `protobuf:"bytes,3,rep,name=entries" json:"entries,omitempty"`
}

func (x *TOCSettingsArchive) Reset() {
	*x = TOCSettingsArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TOCSettingsArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TOCSettingsArchive) ProtoMessage() {}

func (x *TOCSettingsArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TOCSettingsArchive.ProtoReflect.Descriptor instead.
func (*TOCSettingsArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{28}
}

func (x *TOCSettingsArchive) GetTocName() string {
	if x != nil && x.TocName != nil {
		return *x.TocName
	}
	return ""
}

func (x *TOCSettingsArchive) GetTocScope() uint32 {
	if x != nil && x.TocScope != nil {
		return *x.TocScope
	}
	return 0
}

func (x *TOCSettingsArchive) GetEntries() []*TOCSettingsArchive_TOCEntryData {
	if x != nil {
		return x.Entries
	}
	return nil
}

type TOCEntryInstanceArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParagraphIndex        *uint32    `protobuf:"varint,1,req,name=paragraph_index,json=paragraphIndex" json:"paragraph_index,omitempty"`
	PageNumber            *uint32    `protobuf:"varint,2,req,name=page_number,json=pageNumber" json:"page_number,omitempty"`
	NumberFormat          *uint32    `protobuf:"varint,3,req,name=number_format,json=numberFormat" json:"number_format,omitempty"`
	Heading               *string    `protobuf:"bytes,4,req,name=heading" json:"heading,omitempty"`
	IndexedStyle          *Reference `protobuf:"bytes,5,req,name=indexed_style,json=indexedStyle" json:"indexed_style,omitempty"`
	IndexedListStyle      *Reference `protobuf:"bytes,6,opt,name=indexed_list_style,json=indexedListStyle" json:"indexed_list_style,omitempty"`
	IndexedListStart      *uint32    `protobuf:"varint,7,opt,name=indexed_list_start,json=indexedListStart" json:"indexed_list_start,omitempty"`
	IndexedParagraphLevel *uint32    `protobuf:"varint,8,opt,name=indexed_paragraph_level,json=indexedParagraphLevel" json:"indexed_paragraph_level,omitempty"`
	NumberFormatName      *string    `protobuf:"bytes,9,opt,name=number_format_name,json=numberFormatName" json:"number_format_name,omitempty"`
}

func (x *TOCEntryInstanceArchive) Reset() {
	*x = TOCEntryInstanceArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TOCEntryInstanceArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TOCEntryInstanceArchive) ProtoMessage() {}

func (x *TOCEntryInstanceArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TOCEntryInstanceArchive.ProtoReflect.Descriptor instead.
func (*TOCEntryInstanceArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{29}
}

func (x *TOCEntryInstanceArchive) GetParagraphIndex() uint32 {
	if x != nil && x.ParagraphIndex != nil {
		return *x.ParagraphIndex
	}
	return 0
}

func (x *TOCEntryInstanceArchive) GetPageNumber() uint32 {
	if x != nil && x.PageNumber != nil {
		return *x.PageNumber
	}
	return 0
}

func (x *TOCEntryInstanceArchive) GetNumberFormat() uint32 {
	if x != nil && x.NumberFormat != nil {
		return *x.NumberFormat
	}
	return 0
}

func (x *TOCEntryInstanceArchive) GetHeading() string {
	if x != nil && x.Heading != nil {
		return *x.Heading
	}
	return ""
}

func (x *TOCEntryInstanceArchive) GetIndexedStyle() *Reference {
	if x != nil {
		return x.IndexedStyle
	}
	return nil
}

func (x *TOCEntryInstanceArchive) GetIndexedListStyle() *Reference {
	if x != nil {
		return x.IndexedListStyle
	}
	return nil
}

func (x *TOCEntryInstanceArchive) GetIndexedListStart() uint32 {
	if x != nil && x.IndexedListStart != nil {
		return *x.IndexedListStart
	}
	return 0
}

func (x *TOCEntryInstanceArchive) GetIndexedParagraphLevel() uint32 {
	if x != nil && x.IndexedParagraphLevel != nil {
		return *x.IndexedParagraphLevel
	}
	return 0
}

func (x *TOCEntryInstanceArchive) GetNumberFormatName() string {
	if x != nil && x.NumberFormatName != nil {
		return *x.NumberFormatName
	}
	return ""
}

type UndoTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries      []*UndoTransaction_UnionTransaction   `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
	GroupEntries []*UndoTransaction_StorageActionGroup `protobuf:"bytes,2,rep,name=group_entries,json=groupEntries" json:"group_entries,omitempty"`
	Flags        *uint32                               `protobuf:"varint,3,opt,name=flags" json:"flags,omitempty"`
	Version      *uint32                               `protobuf:"varint,4,opt,name=version" json:"version,omitempty"`
}

func (x *UndoTransaction) Reset() {
	*x = UndoTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UndoTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UndoTransaction) ProtoMessage() {}

func (x *UndoTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UndoTransaction.ProtoReflect.Descriptor instead.
func (*UndoTransaction) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{30}
}

func (x *UndoTransaction) GetEntries() []*UndoTransaction_UnionTransaction {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *UndoTransaction) GetGroupEntries() []*UndoTransaction_StorageActionGroup {
	if x != nil {
		return x.GroupEntries
	}
	return nil
}

func (x *UndoTransaction) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *UndoTransaction) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

type UndoTransactionWrapperArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UndoTransaction *UndoTransaction `protobuf:"bytes,1,req,name=undo_transaction,json=undoTransaction" json:"undo_transaction,omitempty"`
}

func (x *UndoTransactionWrapperArchive) Reset() {
	*x = UndoTransactionWrapperArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UndoTransactionWrapperArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UndoTransactionWrapperArchive) ProtoMessage() {}

func (x *UndoTransactionWrapperArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UndoTransactionWrapperArchive.ProtoReflect.Descriptor instead.
func (*UndoTransactionWrapperArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{31}
}

func (x *UndoTransactionWrapperArchive) GetUndoTransaction() *UndoTransaction {
	if x != nil {
		return x.UndoTransaction
	}
	return nil
}

type ShapeInfoArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *ShapeArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	// Deprecated: Do not use.
	DeprecatedStorage *Reference `protobuf:"bytes,2,opt,name=deprecated_storage,json=deprecatedStorage" json:"deprecated_storage,omitempty"`
	TextFlow          *Reference `protobuf:"bytes,3,opt,name=text_flow,json=textFlow" json:"text_flow,omitempty"`
	OwnedStorage      *Reference `protobuf:"bytes,4,opt,name=owned_storage,json=ownedStorage" json:"owned_storage,omitempty"`
	IsTextBox         *bool      `protobuf:"varint,6,opt,name=is_text_box,json=isTextBox" json:"is_text_box,omitempty"`
}

func (x *ShapeInfoArchive) Reset() {
	*x = ShapeInfoArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShapeInfoArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShapeInfoArchive) ProtoMessage() {}

func (x *ShapeInfoArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShapeInfoArchive.ProtoReflect.Descriptor instead.
func (*ShapeInfoArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{32}
}

func (x *ShapeInfoArchive) GetSuper() *ShapeArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

// Deprecated: Do not use.
func (x *ShapeInfoArchive) GetDeprecatedStorage() *Reference {
	if x != nil {
		return x.DeprecatedStorage
	}
	return nil
}

func (x *ShapeInfoArchive) GetTextFlow() *Reference {
	if x != nil {
		return x.TextFlow
	}
	return nil
}

func (x *ShapeInfoArchive) GetOwnedStorage() *Reference {
	if x != nil {
		return x.OwnedStorage
	}
	return nil
}

func (x *ShapeInfoArchive) GetIsTextBox() bool {
	if x != nil && x.IsTextBox != nil {
		return *x.IsTextBox
	}
	return false
}

type CommentInfoArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super          *ShapeInfoArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	CommentStorage *Reference        `protobuf:"bytes,2,opt,name=comment_storage,json=commentStorage" json:"comment_storage,omitempty"`
}

func (x *CommentInfoArchive) Reset() {
	*x = CommentInfoArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentInfoArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentInfoArchive) ProtoMessage() {}

func (x *CommentInfoArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentInfoArchive.ProtoReflect.Descriptor instead.
func (*CommentInfoArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{33}
}

func (x *CommentInfoArchive) GetSuper() *ShapeInfoArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommentInfoArchive) GetCommentStorage() *Reference {
	if x != nil {
		return x.CommentStorage
	}
	return nil
}

type TOCInfoArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                           *ShapeInfoArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	TocSettings                     *Reference        `protobuf:"bytes,2,opt,name=toc_settings,json=tocSettings" json:"toc_settings,omitempty"`
	TocEntryData                    []*Reference      `protobuf:"bytes,3,rep,name=toc_entry_data,json=tocEntryData" json:"toc_entry_data,omitempty"`
	PageNumberRanges                []*Range          `protobuf:"bytes,4,rep,name=page_number_ranges,json=pageNumberRanges" json:"page_number_ranges,omitempty"`
	SyncTocSettingsWithTocNavigator *bool             `protobuf:"varint,5,opt,name=sync_toc_settings_with_toc_navigator,json=syncTocSettingsWithTocNavigator" json:"sync_toc_settings_with_toc_navigator,omitempty"`
}

func (x *TOCInfoArchive) Reset() {
	*x = TOCInfoArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TOCInfoArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TOCInfoArchive) ProtoMessage() {}

func (x *TOCInfoArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TOCInfoArchive.ProtoReflect.Descriptor instead.
func (*TOCInfoArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{34}
}

func (x *TOCInfoArchive) GetSuper() *ShapeInfoArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *TOCInfoArchive) GetTocSettings() *Reference {
	if x != nil {
		return x.TocSettings
	}
	return nil
}

func (x *TOCInfoArchive) GetTocEntryData() []*Reference {
	if x != nil {
		return x.TocEntryData
	}
	return nil
}

func (x *TOCInfoArchive) GetPageNumberRanges() []*Range {
	if x != nil {
		return x.PageNumberRanges
	}
	return nil
}

func (x *TOCInfoArchive) GetSyncTocSettingsWithTocNavigator() bool {
	if x != nil && x.SyncTocSettingsWithTocNavigator != nil {
		return *x.SyncTocSettingsWithTocNavigator
	}
	return false
}

type TOCLayoutHintArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharRange *Range `protobuf:"bytes,1,req,name=charRange" json:"charRange,omitempty"`
}

func (x *TOCLayoutHintArchive) Reset() {
	*x = TOCLayoutHintArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TOCLayoutHintArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TOCLayoutHintArchive) ProtoMessage() {}

func (x *TOCLayoutHintArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TOCLayoutHintArchive.ProtoReflect.Descriptor instead.
func (*TOCLayoutHintArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{35}
}

func (x *TOCLayoutHintArchive) GetCharRange() *Range {
	if x != nil {
		return x.CharRange
	}
	return nil
}

type EquationInfoArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EquationInfoArchive) Reset() {
	*x = EquationInfoArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquationInfoArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquationInfoArchive) ProtoMessage() {}

func (x *EquationInfoArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquationInfoArchive.ProtoReflect.Descriptor instead.
func (*EquationInfoArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{36}
}

type TextualAttachmentArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StringEquivalent *string                        `protobuf:"bytes,1,opt,name=string_equivalent,json=stringEquivalent" json:"string_equivalent,omitempty"`
	Kind             *TextualAttachmentArchive_Kind `protobuf:"varint,2,opt,name=kind,enum=TSWP.TextualAttachmentArchive_Kind" json:"kind,omitempty"`
}

func (x *TextualAttachmentArchive) Reset() {
	*x = TextualAttachmentArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextualAttachmentArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextualAttachmentArchive) ProtoMessage() {}

func (x *TextualAttachmentArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextualAttachmentArchive.ProtoReflect.Descriptor instead.
func (*TextualAttachmentArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{37}
}

func (x *TextualAttachmentArchive) GetStringEquivalent() string {
	if x != nil && x.StringEquivalent != nil {
		return *x.StringEquivalent
	}
	return ""
}

func (x *TextualAttachmentArchive) GetKind() TextualAttachmentArchive_Kind {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return TextualAttachmentArchive_kKindPageNumber
}

type TSWPTOCPageNumberAttachmentArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super        *TextualAttachmentArchive `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	PageNumber   *string                   `protobuf:"bytes,2,opt,name=page_number,json=pageNumber" json:"page_number,omitempty"`
	BookmarkName *string                   `protobuf:"bytes,3,opt,name=bookmark_name,json=bookmarkName" json:"bookmark_name,omitempty"`
}

func (x *TSWPTOCPageNumberAttachmentArchive) Reset() {
	*x = TSWPTOCPageNumberAttachmentArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSWPTOCPageNumberAttachmentArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSWPTOCPageNumberAttachmentArchive) ProtoMessage() {}

func (x *TSWPTOCPageNumberAttachmentArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSWPTOCPageNumberAttachmentArchive.ProtoReflect.Descriptor instead.
func (*TSWPTOCPageNumberAttachmentArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{38}
}

func (x *TSWPTOCPageNumberAttachmentArchive) GetSuper() *TextualAttachmentArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *TSWPTOCPageNumberAttachmentArchive) GetPageNumber() string {
	if x != nil && x.PageNumber != nil {
		return *x.PageNumber
	}
	return ""
}

func (x *TSWPTOCPageNumberAttachmentArchive) GetBookmarkName() string {
	if x != nil && x.BookmarkName != nil {
		return *x.BookmarkName
	}
	return ""
}

type UIGraphicalAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UIGraphicalAttachment) Reset() {
	*x = UIGraphicalAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UIGraphicalAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UIGraphicalAttachment) ProtoMessage() {}

func (x *UIGraphicalAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UIGraphicalAttachment.ProtoReflect.Descriptor instead.
func (*UIGraphicalAttachment) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{39}
}

type DrawableAttachmentArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Drawable    *Reference `protobuf:"bytes,1,opt,name=drawable" json:"drawable,omitempty"`
	HOffsetType *uint32    `protobuf:"varint,2,opt,name=h_offset_type,json=hOffsetType" json:"h_offset_type,omitempty"`
	HOffset     *float32   `protobuf:"fixed32,3,opt,name=h_offset,json=hOffset" json:"h_offset,omitempty"`
	VOffsetType *uint32    `protobuf:"varint,4,opt,name=v_offset_type,json=vOffsetType" json:"v_offset_type,omitempty"`
	VOffset     *float32   `protobuf:"fixed32,5,opt,name=v_offset,json=vOffset" json:"v_offset,omitempty"`
}

func (x *DrawableAttachmentArchive) Reset() {
	*x = DrawableAttachmentArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrawableAttachmentArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawableAttachmentArchive) ProtoMessage() {}

func (x *DrawableAttachmentArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawableAttachmentArchive.ProtoReflect.Descriptor instead.
func (*DrawableAttachmentArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{40}
}

func (x *DrawableAttachmentArchive) GetDrawable() *Reference {
	if x != nil {
		return x.Drawable
	}
	return nil
}

func (x *DrawableAttachmentArchive) GetHOffsetType() uint32 {
	if x != nil && x.HOffsetType != nil {
		return *x.HOffsetType
	}
	return 0
}

func (x *DrawableAttachmentArchive) GetHOffset() float32 {
	if x != nil && x.HOffset != nil {
		return *x.HOffset
	}
	return 0
}

func (x *DrawableAttachmentArchive) GetVOffsetType() uint32 {
	if x != nil && x.VOffsetType != nil {
		return *x.VOffsetType
	}
	return 0
}

func (x *DrawableAttachmentArchive) GetVOffset() float32 {
	if x != nil && x.VOffset != nil {
		return *x.VOffset
	}
	return 0
}

type TOCAttachmentArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *DrawableAttachmentArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
}

func (x *TOCAttachmentArchive) Reset() {
	*x = TOCAttachmentArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TOCAttachmentArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TOCAttachmentArchive) ProtoMessage() {}

func (x *TOCAttachmentArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TOCAttachmentArchive.ProtoReflect.Descriptor instead.
func (*TOCAttachmentArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{41}
}

func (x *TOCAttachmentArchive) GetSuper() *DrawableAttachmentArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

type FootnoteReferenceAttachmentArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super            *TextualAttachmentArchive `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	ContainedStorage *Reference                `protobuf:"bytes,2,opt,name=contained_storage,json=containedStorage" json:"contained_storage,omitempty"`
	CustomMarkString *string                   `protobuf:"bytes,3,opt,name=custom_mark_string,json=customMarkString" json:"custom_mark_string,omitempty"`
}

func (x *FootnoteReferenceAttachmentArchive) Reset() {
	*x = FootnoteReferenceAttachmentArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FootnoteReferenceAttachmentArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FootnoteReferenceAttachmentArchive) ProtoMessage() {}

func (x *FootnoteReferenceAttachmentArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FootnoteReferenceAttachmentArchive.ProtoReflect.Descriptor instead.
func (*FootnoteReferenceAttachmentArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{42}
}

func (x *FootnoteReferenceAttachmentArchive) GetSuper() *TextualAttachmentArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *FootnoteReferenceAttachmentArchive) GetContainedStorage() *Reference {
	if x != nil {
		return x.ContainedStorage
	}
	return nil
}

func (x *FootnoteReferenceAttachmentArchive) GetCustomMarkString() string {
	if x != nil && x.CustomMarkString != nil {
		return *x.CustomMarkString
	}
	return ""
}

type NumberAttachmentArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super            *TextualAttachmentArchive `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	NumberFormat     *uint32                   `protobuf:"varint,2,opt,name=number_format,json=numberFormat" json:"number_format,omitempty"`
	StringValue      *string                   `protobuf:"bytes,3,opt,name=string_value,json=stringValue" json:"string_value,omitempty"`
	NumberFormatName *string                   `protobuf:"bytes,4,opt,name=number_format_name,json=numberFormatName" json:"number_format_name,omitempty"`
}

func (x *NumberAttachmentArchive) Reset() {
	*x = NumberAttachmentArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NumberAttachmentArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumberAttachmentArchive) ProtoMessage() {}

func (x *NumberAttachmentArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumberAttachmentArchive.ProtoReflect.Descriptor instead.
func (*NumberAttachmentArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{43}
}

func (x *NumberAttachmentArchive) GetSuper() *TextualAttachmentArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *NumberAttachmentArchive) GetNumberFormat() uint32 {
	if x != nil && x.NumberFormat != nil {
		return *x.NumberFormat
	}
	return 0
}

func (x *NumberAttachmentArchive) GetStringValue() string {
	if x != nil && x.StringValue != nil {
		return *x.StringValue
	}
	return ""
}

func (x *NumberAttachmentArchive) GetNumberFormatName() string {
	if x != nil && x.NumberFormatName != nil {
		return *x.NumberFormatName
	}
	return ""
}

type SmartFieldArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TextAttributeUuidString *string `protobuf:"bytes,1,opt,name=text_attribute_uuid_string,json=textAttributeUuidString" json:"text_attribute_uuid_string,omitempty"`
}

func (x *SmartFieldArchive) Reset() {
	*x = SmartFieldArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmartFieldArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmartFieldArchive) ProtoMessage() {}

func (x *SmartFieldArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmartFieldArchive.ProtoReflect.Descriptor instead.
func (*SmartFieldArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{44}
}

func (x *SmartFieldArchive) GetTextAttributeUuidString() string {
	if x != nil && x.TextAttributeUuidString != nil {
		return *x.TextAttributeUuidString
	}
	return ""
}

type HyperlinkFieldArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super  *SmartFieldArchive `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	UrlRef *string            `protobuf:"bytes,2,opt,name=url_ref,json=urlRef" json:"url_ref,omitempty"`
}

func (x *HyperlinkFieldArchive) Reset() {
	*x = HyperlinkFieldArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperlinkFieldArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperlinkFieldArchive) ProtoMessage() {}

func (x *HyperlinkFieldArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperlinkFieldArchive.ProtoReflect.Descriptor instead.
func (*HyperlinkFieldArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{45}
}

func (x *HyperlinkFieldArchive) GetSuper() *SmartFieldArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *HyperlinkFieldArchive) GetUrlRef() string {
	if x != nil && x.UrlRef != nil {
		return *x.UrlRef
	}
	return ""
}

type PlaceholderSmartFieldArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super       *SmartFieldArchive `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	Localizable *bool              `protobuf:"varint,2,opt,name=localizable" json:"localizable,omitempty"`
	ScriptTag   *string            `protobuf:"bytes,3,opt,name=script_tag,json=scriptTag" json:"script_tag,omitempty"`
}

func (x *PlaceholderSmartFieldArchive) Reset() {
	*x = PlaceholderSmartFieldArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaceholderSmartFieldArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaceholderSmartFieldArchive) ProtoMessage() {}

func (x *PlaceholderSmartFieldArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaceholderSmartFieldArchive.ProtoReflect.Descriptor instead.
func (*PlaceholderSmartFieldArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{46}
}

func (x *PlaceholderSmartFieldArchive) GetSuper() *SmartFieldArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *PlaceholderSmartFieldArchive) GetLocalizable() bool {
	if x != nil && x.Localizable != nil {
		return *x.Localizable
	}
	return false
}

func (x *PlaceholderSmartFieldArchive) GetScriptTag() string {
	if x != nil && x.ScriptTag != nil {
		return *x.ScriptTag
	}
	return ""
}

type UnsupportedHyperlinkFieldArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super          *PlaceholderSmartFieldArchive `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	UrlRef         *string                       `protobuf:"bytes,2,opt,name=url_ref,json=urlRef" json:"url_ref,omitempty"`
	UrlOriginalRef *string                       `protobuf:"bytes,3,opt,name=url_original_ref,json=urlOriginalRef" json:"url_original_ref,omitempty"`
}

func (x *UnsupportedHyperlinkFieldArchive) Reset() {
	*x = UnsupportedHyperlinkFieldArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnsupportedHyperlinkFieldArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsupportedHyperlinkFieldArchive) ProtoMessage() {}

func (x *UnsupportedHyperlinkFieldArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsupportedHyperlinkFieldArchive.ProtoReflect.Descriptor instead.
func (*UnsupportedHyperlinkFieldArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{47}
}

func (x *UnsupportedHyperlinkFieldArchive) GetSuper() *PlaceholderSmartFieldArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *UnsupportedHyperlinkFieldArchive) GetUrlRef() string {
	if x != nil && x.UrlRef != nil {
		return *x.UrlRef
	}
	return ""
}

func (x *UnsupportedHyperlinkFieldArchive) GetUrlOriginalRef() string {
	if x != nil && x.UrlOriginalRef != nil {
		return *x.UrlOriginalRef
	}
	return ""
}

type BibliographySmartFieldArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super           *SmartFieldArchive            `protobuf:"bytes,3,opt,name=super" json:"super,omitempty"`
	CitationRecords []*Reference                  `protobuf:"bytes,2,rep,name=citation_records,json=citationRecords" json:"citation_records,omitempty"`
	Localizable     *bool                         `protobuf:"varint,4,opt,name=localizable" json:"localizable,omitempty"`
	OldSuper        *PlaceholderSmartFieldArchive `protobuf:"bytes,1,opt,name=old_super,json=oldSuper" json:"old_super,omitempty"`
}

func (x *BibliographySmartFieldArchive) Reset() {
	*x = BibliographySmartFieldArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BibliographySmartFieldArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BibliographySmartFieldArchive) ProtoMessage() {}

func (x *BibliographySmartFieldArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BibliographySmartFieldArchive.ProtoReflect.Descriptor instead.
func (*BibliographySmartFieldArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{48}
}

func (x *BibliographySmartFieldArchive) GetSuper() *SmartFieldArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *BibliographySmartFieldArchive) GetCitationRecords() []*Reference {
	if x != nil {
		return x.CitationRecords
	}
	return nil
}

func (x *BibliographySmartFieldArchive) GetLocalizable() bool {
	if x != nil && x.Localizable != nil {
		return *x.Localizable
	}
	return false
}

func (x *BibliographySmartFieldArchive) GetOldSuper() *PlaceholderSmartFieldArchive {
	if x != nil {
		return x.OldSuper
	}
	return nil
}

type CitationRecordArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndnoteXml      *string `protobuf:"bytes,1,opt,name=endnote_xml,json=endnoteXml" json:"endnote_xml,omitempty"`
	HideAuthorNames *bool   `protobuf:"varint,2,opt,name=hide_author_names,json=hideAuthorNames" json:"hide_author_names,omitempty"`
	HideYear        *bool   `protobuf:"varint,3,opt,name=hide_year,json=hideYear" json:"hide_year,omitempty"`
	PageRange       *string `protobuf:"bytes,4,opt,name=page_range,json=pageRange" json:"page_range,omitempty"`
	Prefix          *string `protobuf:"bytes,5,opt,name=prefix" json:"prefix,omitempty"`
	Suffix          *string `protobuf:"bytes,6,opt,name=suffix" json:"suffix,omitempty"`
	AuthorsString   *string `protobuf:"bytes,7,opt,name=authors_string,json=authorsString" json:"authors_string,omitempty"`
	Title           *string `protobuf:"bytes,8,opt,name=title" json:"title,omitempty"`
	Year            *string `protobuf:"bytes,9,opt,name=year" json:"year,omitempty"`
	Type            *string `protobuf:"bytes,10,opt,name=type" json:"type,omitempty"`
}

func (x *CitationRecordArchive) Reset() {
	*x = CitationRecordArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CitationRecordArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CitationRecordArchive) ProtoMessage() {}

func (x *CitationRecordArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CitationRecordArchive.ProtoReflect.Descriptor instead.
func (*CitationRecordArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{49}
}

func (x *CitationRecordArchive) GetEndnoteXml() string {
	if x != nil && x.EndnoteXml != nil {
		return *x.EndnoteXml
	}
	return ""
}

func (x *CitationRecordArchive) GetHideAuthorNames() bool {
	if x != nil && x.HideAuthorNames != nil {
		return *x.HideAuthorNames
	}
	return false
}

func (x *CitationRecordArchive) GetHideYear() bool {
	if x != nil && x.HideYear != nil {
		return *x.HideYear
	}
	return false
}

func (x *CitationRecordArchive) GetPageRange() string {
	if x != nil && x.PageRange != nil {
		return *x.PageRange
	}
	return ""
}

func (x *CitationRecordArchive) GetPrefix() string {
	if x != nil && x.Prefix != nil {
		return *x.Prefix
	}
	return ""
}

func (x *CitationRecordArchive) GetSuffix() string {
	if x != nil && x.Suffix != nil {
		return *x.Suffix
	}
	return ""
}

func (x *CitationRecordArchive) GetAuthorsString() string {
	if x != nil && x.AuthorsString != nil {
		return *x.AuthorsString
	}
	return ""
}

func (x *CitationRecordArchive) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *CitationRecordArchive) GetYear() string {
	if x != nil && x.Year != nil {
		return *x.Year
	}
	return ""
}

func (x *CitationRecordArchive) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

type CitationSmartFieldArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super           *SmartFieldArchive            `protobuf:"bytes,3,opt,name=super" json:"super,omitempty"`
	CitationRecords []*Reference                  `protobuf:"bytes,2,rep,name=citation_records,json=citationRecords" json:"citation_records,omitempty"`
	Localizable     *bool                         `protobuf:"varint,4,opt,name=localizable" json:"localizable,omitempty"`
	OldSuper        *PlaceholderSmartFieldArchive `protobuf:"bytes,1,opt,name=old_super,json=oldSuper" json:"old_super,omitempty"`
}

func (x *CitationSmartFieldArchive) Reset() {
	*x = CitationSmartFieldArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CitationSmartFieldArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CitationSmartFieldArchive) ProtoMessage() {}

func (x *CitationSmartFieldArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CitationSmartFieldArchive.ProtoReflect.Descriptor instead.
func (*CitationSmartFieldArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{50}
}

func (x *CitationSmartFieldArchive) GetSuper() *SmartFieldArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CitationSmartFieldArchive) GetCitationRecords() []*Reference {
	if x != nil {
		return x.CitationRecords
	}
	return nil
}

func (x *CitationSmartFieldArchive) GetLocalizable() bool {
	if x != nil && x.Localizable != nil {
		return *x.Localizable
	}
	return false
}

func (x *CitationSmartFieldArchive) GetOldSuper() *PlaceholderSmartFieldArchive {
	if x != nil {
		return x.OldSuper
	}
	return nil
}

type DateTimeSmartFieldArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super            *SmartFieldArchive                                `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	Format           *string                                           `protobuf:"bytes,2,opt,name=format" json:"format,omitempty"`
	LocaleIdentifier *string                                           `protobuf:"bytes,3,opt,name=locale_identifier,json=localeIdentifier" json:"locale_identifier,omitempty"`
	DateStyle        *DateTimeSmartFieldArchive_DateTimeFormatterStyle `protobuf:"varint,4,opt,name=date_style,json=dateStyle,enum=TSWP.DateTimeSmartFieldArchive_DateTimeFormatterStyle" json:"date_style,omitempty"`
	TimeStyle        *DateTimeSmartFieldArchive_DateTimeFormatterStyle `protobuf:"varint,5,opt,name=time_style,json=timeStyle,enum=TSWP.DateTimeSmartFieldArchive_DateTimeFormatterStyle" json:"time_style,omitempty"`
	UpdatePlan       *DateTimeSmartFieldArchive_DateTimeUpdatePlan     `protobuf:"varint,6,opt,name=update_plan,json=updatePlan,enum=TSWP.DateTimeSmartFieldArchive_DateTimeUpdatePlan" json:"update_plan,omitempty"`
	NeedsUpdate      *bool                                             `protobuf:"varint,7,opt,name=needs_update,json=needsUpdate" json:"needs_update,omitempty"`
	Date             *Date                                             `protobuf:"bytes,8,opt,name=date" json:"date,omitempty"`
}

func (x *DateTimeSmartFieldArchive) Reset() {
	*x = DateTimeSmartFieldArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DateTimeSmartFieldArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateTimeSmartFieldArchive) ProtoMessage() {}

func (x *DateTimeSmartFieldArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateTimeSmartFieldArchive.ProtoReflect.Descriptor instead.
func (*DateTimeSmartFieldArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{51}
}

func (x *DateTimeSmartFieldArchive) GetSuper() *SmartFieldArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *DateTimeSmartFieldArchive) GetFormat() string {
	if x != nil && x.Format != nil {
		return *x.Format
	}
	return ""
}

func (x *DateTimeSmartFieldArchive) GetLocaleIdentifier() string {
	if x != nil && x.LocaleIdentifier != nil {
		return *x.LocaleIdentifier
	}
	return ""
}

func (x *DateTimeSmartFieldArchive) GetDateStyle() DateTimeSmartFieldArchive_DateTimeFormatterStyle {
	if x != nil && x.DateStyle != nil {
		return *x.DateStyle
	}
	return DateTimeSmartFieldArchive_kDateTimeFormatterStyleNone
}

func (x *DateTimeSmartFieldArchive) GetTimeStyle() DateTimeSmartFieldArchive_DateTimeFormatterStyle {
	if x != nil && x.TimeStyle != nil {
		return *x.TimeStyle
	}
	return DateTimeSmartFieldArchive_kDateTimeFormatterStyleNone
}

func (x *DateTimeSmartFieldArchive) GetUpdatePlan() DateTimeSmartFieldArchive_DateTimeUpdatePlan {
	if x != nil && x.UpdatePlan != nil {
		return *x.UpdatePlan
	}
	return DateTimeSmartFieldArchive_kDateTimeUpdatePlanNever
}

func (x *DateTimeSmartFieldArchive) GetNeedsUpdate() bool {
	if x != nil && x.NeedsUpdate != nil {
		return *x.NeedsUpdate
	}
	return false
}

func (x *DateTimeSmartFieldArchive) GetDate() *Date {
	if x != nil {
		return x.Date
	}
	return nil
}

type BookmarkFieldArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super  *SmartFieldArchive `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	Name   *string            `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Ranged *uint32            `protobuf:"varint,3,opt,name=ranged" json:"ranged,omitempty"`
	Hidden *uint32            `protobuf:"varint,4,opt,name=hidden" json:"hidden,omitempty"`
}

func (x *BookmarkFieldArchive) Reset() {
	*x = BookmarkFieldArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BookmarkFieldArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BookmarkFieldArchive) ProtoMessage() {}

func (x *BookmarkFieldArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BookmarkFieldArchive.ProtoReflect.Descriptor instead.
func (*BookmarkFieldArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{52}
}

func (x *BookmarkFieldArchive) GetSuper() *SmartFieldArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *BookmarkFieldArchive) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *BookmarkFieldArchive) GetRanged() uint32 {
	if x != nil && x.Ranged != nil {
		return *x.Ranged
	}
	return 0
}

func (x *BookmarkFieldArchive) GetHidden() uint32 {
	if x != nil && x.Hidden != nil {
		return *x.Hidden
	}
	return 0
}

type FilenameSmartFieldArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super        *PlaceholderSmartFieldArchive `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	DisplayFlags *uint32                       `protobuf:"varint,2,opt,name=display_flags,json=displayFlags" json:"display_flags,omitempty"`
}

func (x *FilenameSmartFieldArchive) Reset() {
	*x = FilenameSmartFieldArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilenameSmartFieldArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilenameSmartFieldArchive) ProtoMessage() {}

func (x *FilenameSmartFieldArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilenameSmartFieldArchive.ProtoReflect.Descriptor instead.
func (*FilenameSmartFieldArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{53}
}

func (x *FilenameSmartFieldArchive) GetSuper() *PlaceholderSmartFieldArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *FilenameSmartFieldArchive) GetDisplayFlags() uint32 {
	if x != nil && x.DisplayFlags != nil {
		return *x.DisplayFlags
	}
	return 0
}

type MergeSmartFieldArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                       *PlaceholderSmartFieldArchive         `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	Property                    *string                               `protobuf:"bytes,2,opt,name=property" json:"property,omitempty"`
	Label                       *string                               `protobuf:"bytes,3,opt,name=label" json:"label,omitempty"`
	Key                         *string                               `protobuf:"bytes,4,opt,name=key" json:"key,omitempty"`
	Category                    *MergeSmartFieldArchive_MergeCategory `protobuf:"varint,5,opt,name=category,enum=TSWP.MergeSmartFieldArchive_MergeCategory" json:"category,omitempty"`
	RequiresFollowingWhitespace *bool                                 `protobuf:"varint,6,opt,name=requires_following_whitespace,json=requiresFollowingWhitespace" json:"requires_following_whitespace,omitempty"`
	Whitespace                  *string                               `protobuf:"bytes,7,opt,name=whitespace" json:"whitespace,omitempty"`
	Guid                        *string                               `protobuf:"bytes,8,opt,name=guid" json:"guid,omitempty"`
	TableField                  *string                               `protobuf:"bytes,9,opt,name=table_field,json=tableField" json:"table_field,omitempty"`
}

func (x *MergeSmartFieldArchive) Reset() {
	*x = MergeSmartFieldArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergeSmartFieldArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeSmartFieldArchive) ProtoMessage() {}

func (x *MergeSmartFieldArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeSmartFieldArchive.ProtoReflect.Descriptor instead.
func (*MergeSmartFieldArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{54}
}

func (x *MergeSmartFieldArchive) GetSuper() *PlaceholderSmartFieldArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *MergeSmartFieldArchive) GetProperty() string {
	if x != nil && x.Property != nil {
		return *x.Property
	}
	return ""
}

func (x *MergeSmartFieldArchive) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

func (x *MergeSmartFieldArchive) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *MergeSmartFieldArchive) GetCategory() MergeSmartFieldArchive_MergeCategory {
	if x != nil && x.Category != nil {
		return *x.Category
	}
	return MergeSmartFieldArchive_kMergeCategoryTo
}

func (x *MergeSmartFieldArchive) GetRequiresFollowingWhitespace() bool {
	if x != nil && x.RequiresFollowingWhitespace != nil {
		return *x.RequiresFollowingWhitespace
	}
	return false
}

func (x *MergeSmartFieldArchive) GetWhitespace() string {
	if x != nil && x.Whitespace != nil {
		return *x.Whitespace
	}
	return ""
}

func (x *MergeSmartFieldArchive) GetGuid() string {
	if x != nil && x.Guid != nil {
		return *x.Guid
	}
	return ""
}

func (x *MergeSmartFieldArchive) GetTableField() string {
	if x != nil && x.TableField != nil {
		return *x.TableField
	}
	return ""
}

type TOCSmartFieldArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super      *PlaceholderSmartFieldArchive    `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	TocEntries []*TOCSmartFieldArchive_TOCEntry `protobuf:"bytes,2,rep,name=toc_entries,json=tocEntries" json:"toc_entries,omitempty"`
}

func (x *TOCSmartFieldArchive) Reset() {
	*x = TOCSmartFieldArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TOCSmartFieldArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TOCSmartFieldArchive) ProtoMessage() {}

func (x *TOCSmartFieldArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TOCSmartFieldArchive.ProtoReflect.Descriptor instead.
func (*TOCSmartFieldArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{55}
}

func (x *TOCSmartFieldArchive) GetSuper() *PlaceholderSmartFieldArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *TOCSmartFieldArchive) GetTocEntries() []*TOCSmartFieldArchive_TOCEntry {
	if x != nil {
		return x.TocEntries
	}
	return nil
}

type RubyFieldArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super    *SmartFieldArchive `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	RubyText *string            `protobuf:"bytes,2,opt,name=ruby_text,json=rubyText" json:"ruby_text,omitempty"`
}

func (x *RubyFieldArchive) Reset() {
	*x = RubyFieldArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RubyFieldArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RubyFieldArchive) ProtoMessage() {}

func (x *RubyFieldArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RubyFieldArchive.ProtoReflect.Descriptor instead.
func (*RubyFieldArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{56}
}

func (x *RubyFieldArchive) GetSuper() *SmartFieldArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *RubyFieldArchive) GetRubyText() string {
	if x != nil && x.RubyText != nil {
		return *x.RubyText
	}
	return ""
}

type TateChuYokoFieldArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *SmartFieldArchive `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
}

func (x *TateChuYokoFieldArchive) Reset() {
	*x = TateChuYokoFieldArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TateChuYokoFieldArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TateChuYokoFieldArchive) ProtoMessage() {}

func (x *TateChuYokoFieldArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TateChuYokoFieldArchive.ProtoReflect.Descriptor instead.
func (*TateChuYokoFieldArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{57}
}

func (x *TateChuYokoFieldArchive) GetSuper() *SmartFieldArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

type ChangeArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind                    *ChangeArchive_ChangeKind `protobuf:"varint,1,opt,name=kind,enum=TSWP.ChangeArchive_ChangeKind" json:"kind,omitempty"`
	Session                 *Reference                `protobuf:"bytes,2,opt,name=session" json:"session,omitempty"`
	Date                    *Date                     `protobuf:"bytes,3,opt,name=date" json:"date,omitempty"`
	TextAttributeUuidString *string                   `protobuf:"bytes,4,opt,name=text_attribute_uuid_string,json=textAttributeUuidString" json:"text_attribute_uuid_string,omitempty"`
}

func (x *ChangeArchive) Reset() {
	*x = ChangeArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeArchive) ProtoMessage() {}

func (x *ChangeArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeArchive.ProtoReflect.Descriptor instead.
func (*ChangeArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{58}
}

func (x *ChangeArchive) GetKind() ChangeArchive_ChangeKind {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return ChangeArchive_kChangeKindInsertion
}

func (x *ChangeArchive) GetSession() *Reference {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *ChangeArchive) GetDate() *Date {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *ChangeArchive) GetTextAttributeUuidString() string {
	if x != nil && x.TextAttributeUuidString != nil {
		return *x.TextAttributeUuidString
	}
	return ""
}

type ChangeSessionArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionUid *uint32    `protobuf:"varint,1,opt,name=session_uid,json=sessionUid" json:"session_uid,omitempty"`
	Author     *Reference `protobuf:"bytes,2,opt,name=author" json:"author,omitempty"`
	Date       *Date      `protobuf:"bytes,3,opt,name=date" json:"date,omitempty"`
}

func (x *ChangeSessionArchive) Reset() {
	*x = ChangeSessionArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeSessionArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeSessionArchive) ProtoMessage() {}

func (x *ChangeSessionArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeSessionArchive.ProtoReflect.Descriptor instead.
func (*ChangeSessionArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{59}
}

func (x *ChangeSessionArchive) GetSessionUid() uint32 {
	if x != nil && x.SessionUid != nil {
		return *x.SessionUid
	}
	return 0
}

func (x *ChangeSessionArchive) GetAuthor() *Reference {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *ChangeSessionArchive) GetDate() *Date {
	if x != nil {
		return x.Date
	}
	return nil
}

type SectionPlaceholderArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentStorage *Reference `protobuf:"bytes,1,opt,name=parent_storage,json=parentStorage" json:"parent_storage,omitempty"`
}

func (x *SectionPlaceholderArchive) Reset() {
	*x = SectionPlaceholderArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SectionPlaceholderArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SectionPlaceholderArchive) ProtoMessage() {}

func (x *SectionPlaceholderArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SectionPlaceholderArchive.ProtoReflect.Descriptor instead.
func (*SectionPlaceholderArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{60}
}

func (x *SectionPlaceholderArchive) GetParentStorage() *Reference {
	if x != nil {
		return x.ParentStorage
	}
	return nil
}

type HyperlinkSelectionArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HyperlinkSelectionArchive) Reset() {
	*x = HyperlinkSelectionArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperlinkSelectionArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperlinkSelectionArchive) ProtoMessage() {}

func (x *HyperlinkSelectionArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperlinkSelectionArchive.ProtoReflect.Descriptor instead.
func (*HyperlinkSelectionArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{61}
}

type FlowInfoArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TextStorage             *Reference   `protobuf:"bytes,1,opt,name=text_storage,json=textStorage" json:"text_storage,omitempty"`
	Textboxes               []*Reference `protobuf:"bytes,2,rep,name=textboxes" json:"textboxes,omitempty"`
	UserInterfaceIdentifier *uint32      `protobuf:"varint,3,opt,name=user_interface_identifier,json=userInterfaceIdentifier" json:"user_interface_identifier,omitempty"`
}

func (x *FlowInfoArchive) Reset() {
	*x = FlowInfoArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowInfoArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowInfoArchive) ProtoMessage() {}

func (x *FlowInfoArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowInfoArchive.ProtoReflect.Descriptor instead.
func (*FlowInfoArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{62}
}

func (x *FlowInfoArchive) GetTextStorage() *Reference {
	if x != nil {
		return x.TextStorage
	}
	return nil
}

func (x *FlowInfoArchive) GetTextboxes() []*Reference {
	if x != nil {
		return x.Textboxes
	}
	return nil
}

func (x *FlowInfoArchive) GetUserInterfaceIdentifier() uint32 {
	if x != nil && x.UserInterfaceIdentifier != nil {
		return *x.UserInterfaceIdentifier
	}
	return 0
}

type FlowInfoContainerArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowInfos                   []*Reference `protobuf:"bytes,1,rep,name=flow_infos,json=flowInfos" json:"flow_infos,omitempty"`
	NextUserInterfaceIdentifier *uint32      `protobuf:"varint,2,opt,name=next_user_interface_identifier,json=nextUserInterfaceIdentifier" json:"next_user_interface_identifier,omitempty"`
}

func (x *FlowInfoContainerArchive) Reset() {
	*x = FlowInfoContainerArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowInfoContainerArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowInfoContainerArchive) ProtoMessage() {}

func (x *FlowInfoContainerArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowInfoContainerArchive.ProtoReflect.Descriptor instead.
func (*FlowInfoContainerArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{63}
}

func (x *FlowInfoContainerArchive) GetFlowInfos() []*Reference {
	if x != nil {
		return x.FlowInfos
	}
	return nil
}

func (x *FlowInfoContainerArchive) GetNextUserInterfaceIdentifier() uint32 {
	if x != nil && x.NextUserInterfaceIdentifier != nil {
		return *x.NextUserInterfaceIdentifier
	}
	return 0
}

type DropCapArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                     *DropCapArchive_DropCapType     `protobuf:"varint,1,opt,name=type,enum=TSWP.DropCapArchive_DropCapType,def=0" json:"type,omitempty"`
	NumberOfLines            *uint32                         `protobuf:"varint,2,opt,name=number_of_lines,json=numberOfLines,def=3" json:"number_of_lines,omitempty"`
	NumberOfRaisedLines      *uint32                         `protobuf:"varint,3,opt,name=number_of_raised_lines,json=numberOfRaisedLines,def=0" json:"number_of_raised_lines,omitempty"`
	DeprecatedOutdent        *float32                        `protobuf:"fixed32,4,opt,name=deprecated_outdent,json=deprecatedOutdent" json:"deprecated_outdent,omitempty"`
	Outdent                  *float64                        `protobuf:"fixed64,11,opt,name=outdent,def=0" json:"outdent,omitempty"`
	DeprecatedPadding        *float32                        `protobuf:"fixed32,5,opt,name=deprecated_padding,json=deprecatedPadding" json:"deprecated_padding,omitempty"`
	Padding                  *float64                        `protobuf:"fixed64,12,opt,name=padding,def=0" json:"padding,omitempty"`
	WrapType                 *DropCapArchive_DropCapWrapType `protobuf:"varint,6,opt,name=wrap_type,json=wrapType,enum=TSWP.DropCapArchive_DropCapWrapType,def=0" json:"wrap_type,omitempty"`
	ShapeEnabled             *bool                           `protobuf:"varint,7,opt,name=shape_enabled,json=shapeEnabled,def=0" json:"shape_enabled,omitempty"`
	DeprecatedCornerRadius   *float32                        `protobuf:"fixed32,8,opt,name=deprecated_corner_radius,json=deprecatedCornerRadius" json:"deprecated_corner_radius,omitempty"`
	CornerRadius             *float64                        `protobuf:"fixed64,13,opt,name=corner_radius,json=cornerRadius,def=0" json:"corner_radius,omitempty"`
	DeprecatedCharacterScale *float32                        `protobuf:"fixed32,9,opt,name=deprecated_character_scale,json=deprecatedCharacterScale" json:"deprecated_character_scale,omitempty"`
	CharacterScale           *float64                        `protobuf:"fixed64,14,opt,name=character_scale,json=characterScale,def=1" json:"character_scale,omitempty"`
	NumberOfCharacters       *uint32                         `protobuf:"varint,10,opt,name=number_of_characters,json=numberOfCharacters,def=1" json:"number_of_characters,omitempty"`
}

// Default values for DropCapArchive fields.
const (
	Default_DropCapArchive_Type                = DropCapArchive_TSWPDropCapTypeText
	Default_DropCapArchive_NumberOfLines       = uint32(3)
	Default_DropCapArchive_NumberOfRaisedLines = uint32(0)
	Default_DropCapArchive_Outdent             = float64(0)
	Default_DropCapArchive_Padding             = float64(0)
	Default_DropCapArchive_WrapType            = DropCapArchive_TSWPDropCapWrapTypeRectangular
	Default_DropCapArchive_ShapeEnabled        = bool(false)
	Default_DropCapArchive_CornerRadius        = float64(0)
	Default_DropCapArchive_CharacterScale      = float64(1)
	Default_DropCapArchive_NumberOfCharacters  = uint32(1)
)

func (x *DropCapArchive) Reset() {
	*x = DropCapArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropCapArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropCapArchive) ProtoMessage() {}

func (x *DropCapArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropCapArchive.ProtoReflect.Descriptor instead.
func (*DropCapArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{64}
}

func (x *DropCapArchive) GetType() DropCapArchive_DropCapType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_DropCapArchive_Type
}

func (x *DropCapArchive) GetNumberOfLines() uint32 {
	if x != nil && x.NumberOfLines != nil {
		return *x.NumberOfLines
	}
	return Default_DropCapArchive_NumberOfLines
}

func (x *DropCapArchive) GetNumberOfRaisedLines() uint32 {
	if x != nil && x.NumberOfRaisedLines != nil {
		return *x.NumberOfRaisedLines
	}
	return Default_DropCapArchive_NumberOfRaisedLines
}

func (x *DropCapArchive) GetDeprecatedOutdent() float32 {
	if x != nil && x.DeprecatedOutdent != nil {
		return *x.DeprecatedOutdent
	}
	return 0
}

func (x *DropCapArchive) GetOutdent() float64 {
	if x != nil && x.Outdent != nil {
		return *x.Outdent
	}
	return Default_DropCapArchive_Outdent
}

func (x *DropCapArchive) GetDeprecatedPadding() float32 {
	if x != nil && x.DeprecatedPadding != nil {
		return *x.DeprecatedPadding
	}
	return 0
}

func (x *DropCapArchive) GetPadding() float64 {
	if x != nil && x.Padding != nil {
		return *x.Padding
	}
	return Default_DropCapArchive_Padding
}

func (x *DropCapArchive) GetWrapType() DropCapArchive_DropCapWrapType {
	if x != nil && x.WrapType != nil {
		return *x.WrapType
	}
	return Default_DropCapArchive_WrapType
}

func (x *DropCapArchive) GetShapeEnabled() bool {
	if x != nil && x.ShapeEnabled != nil {
		return *x.ShapeEnabled
	}
	return Default_DropCapArchive_ShapeEnabled
}

func (x *DropCapArchive) GetDeprecatedCornerRadius() float32 {
	if x != nil && x.DeprecatedCornerRadius != nil {
		return *x.DeprecatedCornerRadius
	}
	return 0
}

func (x *DropCapArchive) GetCornerRadius() float64 {
	if x != nil && x.CornerRadius != nil {
		return *x.CornerRadius
	}
	return Default_DropCapArchive_CornerRadius
}

func (x *DropCapArchive) GetDeprecatedCharacterScale() float32 {
	if x != nil && x.DeprecatedCharacterScale != nil {
		return *x.DeprecatedCharacterScale
	}
	return 0
}

func (x *DropCapArchive) GetCharacterScale() float64 {
	if x != nil && x.CharacterScale != nil {
		return *x.CharacterScale
	}
	return Default_DropCapArchive_CharacterScale
}

func (x *DropCapArchive) GetNumberOfCharacters() uint32 {
	if x != nil && x.NumberOfCharacters != nil {
		return *x.NumberOfCharacters
	}
	return Default_DropCapArchive_NumberOfCharacters
}

type DropCapStylePropertiesArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DropCap              *DropCapArchive `protobuf:"bytes,1,opt,name=drop_cap,json=dropCap" json:"drop_cap,omitempty"`
	DropCapShapeStroke   *StrokeArchive  `protobuf:"bytes,3,opt,name=drop_cap_shape_stroke,json=dropCapShapeStroke" json:"drop_cap_shape_stroke,omitempty"`
	DropCapShapeFillNull *bool           `protobuf:"varint,4,opt,name=drop_cap_shape_fill_null,json=dropCapShapeFillNull" json:"drop_cap_shape_fill_null,omitempty"`
	DropCapShapeFill     *FillArchive    `protobuf:"bytes,5,opt,name=drop_cap_shape_fill,json=dropCapShapeFill" json:"drop_cap_shape_fill,omitempty"`
}

func (x *DropCapStylePropertiesArchive) Reset() {
	*x = DropCapStylePropertiesArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropCapStylePropertiesArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropCapStylePropertiesArchive) ProtoMessage() {}

func (x *DropCapStylePropertiesArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropCapStylePropertiesArchive.ProtoReflect.Descriptor instead.
func (*DropCapStylePropertiesArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{65}
}

func (x *DropCapStylePropertiesArchive) GetDropCap() *DropCapArchive {
	if x != nil {
		return x.DropCap
	}
	return nil
}

func (x *DropCapStylePropertiesArchive) GetDropCapShapeStroke() *StrokeArchive {
	if x != nil {
		return x.DropCapShapeStroke
	}
	return nil
}

func (x *DropCapStylePropertiesArchive) GetDropCapShapeFillNull() bool {
	if x != nil && x.DropCapShapeFillNull != nil {
		return *x.DropCapShapeFillNull
	}
	return false
}

func (x *DropCapStylePropertiesArchive) GetDropCapShapeFill() *FillArchive {
	if x != nil {
		return x.DropCapShapeFill
	}
	return nil
}

type DropCapStyleArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super             *StyleArchive                    `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	OverrideCount     *uint32                          `protobuf:"varint,10,opt,name=override_count,json=overrideCount,def=0" json:"override_count,omitempty"`
	CharProperties    *CharacterStylePropertiesArchive `protobuf:"bytes,11,opt,name=char_properties,json=charProperties" json:"char_properties,omitempty"`
	DropCapProperties *DropCapStylePropertiesArchive   `protobuf:"bytes,12,opt,name=drop_cap_properties,json=dropCapProperties" json:"drop_cap_properties,omitempty"`
}

// Default values for DropCapStyleArchive fields.
const (
	Default_DropCapStyleArchive_OverrideCount = uint32(0)
)

func (x *DropCapStyleArchive) Reset() {
	*x = DropCapStyleArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropCapStyleArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropCapStyleArchive) ProtoMessage() {}

func (x *DropCapStyleArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropCapStyleArchive.ProtoReflect.Descriptor instead.
func (*DropCapStyleArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{66}
}

func (x *DropCapStyleArchive) GetSuper() *StyleArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *DropCapStyleArchive) GetOverrideCount() uint32 {
	if x != nil && x.OverrideCount != nil {
		return *x.OverrideCount
	}
	return Default_DropCapStyleArchive_OverrideCount
}

func (x *DropCapStyleArchive) GetCharProperties() *CharacterStylePropertiesArchive {
	if x != nil {
		return x.CharProperties
	}
	return nil
}

func (x *DropCapStyleArchive) GetDropCapProperties() *DropCapStylePropertiesArchive {
	if x != nil {
		return x.DropCapProperties
	}
	return nil
}

type ObjectAttributeTable_ObjectAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharacterIndex *uint32    `protobuf:"varint,1,req,name=character_index,json=characterIndex" json:"character_index,omitempty"`
	Object         *Reference `protobuf:"bytes,2,opt,name=object" json:"object,omitempty"`
}

func (x *ObjectAttributeTable_ObjectAttribute) Reset() {
	*x = ObjectAttributeTable_ObjectAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectAttributeTable_ObjectAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectAttributeTable_ObjectAttribute) ProtoMessage() {}

func (x *ObjectAttributeTable_ObjectAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectAttributeTable_ObjectAttribute.ProtoReflect.Descriptor instead.
func (*ObjectAttributeTable_ObjectAttribute) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{1, 0}
}

func (x *ObjectAttributeTable_ObjectAttribute) GetCharacterIndex() uint32 {
	if x != nil && x.CharacterIndex != nil {
		return *x.CharacterIndex
	}
	return 0
}

func (x *ObjectAttributeTable_ObjectAttribute) GetObject() *Reference {
	if x != nil {
		return x.Object
	}
	return nil
}

type StringAttributeTable_StringAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharacterIndex *uint32 `protobuf:"varint,1,req,name=character_index,json=characterIndex" json:"character_index,omitempty"`
	Object         *string `protobuf:"bytes,2,opt,name=object" json:"object,omitempty"`
}

func (x *StringAttributeTable_StringAttribute) Reset() {
	*x = StringAttributeTable_StringAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringAttributeTable_StringAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringAttributeTable_StringAttribute) ProtoMessage() {}

func (x *StringAttributeTable_StringAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringAttributeTable_StringAttribute.ProtoReflect.Descriptor instead.
func (*StringAttributeTable_StringAttribute) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{2, 0}
}

func (x *StringAttributeTable_StringAttribute) GetCharacterIndex() uint32 {
	if x != nil && x.CharacterIndex != nil {
		return *x.CharacterIndex
	}
	return 0
}

func (x *StringAttributeTable_StringAttribute) GetObject() string {
	if x != nil && x.Object != nil {
		return *x.Object
	}
	return ""
}

type ParaDataAttributeTable_ParaDataAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharacterIndex *uint32 `protobuf:"varint,1,req,name=character_index,json=characterIndex" json:"character_index,omitempty"`
	First          *uint32 `protobuf:"varint,2,req,name=first" json:"first,omitempty"`
	Second         *uint32 `protobuf:"varint,3,req,name=second" json:"second,omitempty"`
}

func (x *ParaDataAttributeTable_ParaDataAttribute) Reset() {
	*x = ParaDataAttributeTable_ParaDataAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParaDataAttributeTable_ParaDataAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParaDataAttributeTable_ParaDataAttribute) ProtoMessage() {}

func (x *ParaDataAttributeTable_ParaDataAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParaDataAttributeTable_ParaDataAttribute.ProtoReflect.Descriptor instead.
func (*ParaDataAttributeTable_ParaDataAttribute) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{3, 0}
}

func (x *ParaDataAttributeTable_ParaDataAttribute) GetCharacterIndex() uint32 {
	if x != nil && x.CharacterIndex != nil {
		return *x.CharacterIndex
	}
	return 0
}

func (x *ParaDataAttributeTable_ParaDataAttribute) GetFirst() uint32 {
	if x != nil && x.First != nil {
		return *x.First
	}
	return 0
}

func (x *ParaDataAttributeTable_ParaDataAttribute) GetSecond() uint32 {
	if x != nil && x.Second != nil {
		return *x.Second
	}
	return 0
}

type OverlappingFieldAttributeTable_OverlappingFieldAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Range *Range     `protobuf:"bytes,1,req,name=range" json:"range,omitempty"`
	Field *Reference `protobuf:"bytes,2,req,name=field" json:"field,omitempty"`
}

func (x *OverlappingFieldAttributeTable_OverlappingFieldAttribute) Reset() {
	*x = OverlappingFieldAttributeTable_OverlappingFieldAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverlappingFieldAttributeTable_OverlappingFieldAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverlappingFieldAttributeTable_OverlappingFieldAttribute) ProtoMessage() {}

func (x *OverlappingFieldAttributeTable_OverlappingFieldAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverlappingFieldAttributeTable_OverlappingFieldAttribute.ProtoReflect.Descriptor instead.
func (*OverlappingFieldAttributeTable_OverlappingFieldAttribute) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{4, 0}
}

func (x *OverlappingFieldAttributeTable_OverlappingFieldAttribute) GetRange() *Range {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *OverlappingFieldAttributeTable_OverlappingFieldAttribute) GetField() *Reference {
	if x != nil {
		return x.Field
	}
	return nil
}

type ListStyleArchive_LabelGeometry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scale          *float32 `protobuf:"fixed32,1,opt,name=scale,def=1" json:"scale,omitempty"`
	BaselineOffset *float32 `protobuf:"fixed32,2,opt,name=baseline_offset,json=baselineOffset,def=0" json:"baseline_offset,omitempty"`
	ScaleWithText  *bool    `protobuf:"varint,3,opt,name=scale_with_text,json=scaleWithText,def=1" json:"scale_with_text,omitempty"`
}

// Default values for ListStyleArchive_LabelGeometry fields.
const (
	Default_ListStyleArchive_LabelGeometry_Scale          = float32(1)
	Default_ListStyleArchive_LabelGeometry_BaselineOffset = float32(0)
	Default_ListStyleArchive_LabelGeometry_ScaleWithText  = bool(true)
)

func (x *ListStyleArchive_LabelGeometry) Reset() {
	*x = ListStyleArchive_LabelGeometry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStyleArchive_LabelGeometry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStyleArchive_LabelGeometry) ProtoMessage() {}

func (x *ListStyleArchive_LabelGeometry) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStyleArchive_LabelGeometry.ProtoReflect.Descriptor instead.
func (*ListStyleArchive_LabelGeometry) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{16, 0}
}

func (x *ListStyleArchive_LabelGeometry) GetScale() float32 {
	if x != nil && x.Scale != nil {
		return *x.Scale
	}
	return Default_ListStyleArchive_LabelGeometry_Scale
}

func (x *ListStyleArchive_LabelGeometry) GetBaselineOffset() float32 {
	if x != nil && x.BaselineOffset != nil {
		return *x.BaselineOffset
	}
	return Default_ListStyleArchive_LabelGeometry_BaselineOffset
}

func (x *ListStyleArchive_LabelGeometry) GetScaleWithText() bool {
	if x != nil && x.ScaleWithText != nil {
		return *x.ScaleWithText
	}
	return Default_ListStyleArchive_LabelGeometry_ScaleWithText
}

type ListStyleArchive_LabelImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image         *DataReference `protobuf:"bytes,3,opt,name=image" json:"image,omitempty"`
	ImageNull     *bool          `protobuf:"varint,2,opt,name=image_null,json=imageNull" json:"image_null,omitempty"`
	DatabaseImage *Reference     `protobuf:"bytes,1,opt,name=database_image,json=databaseImage" json:"database_image,omitempty"`
}

func (x *ListStyleArchive_LabelImage) Reset() {
	*x = ListStyleArchive_LabelImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStyleArchive_LabelImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStyleArchive_LabelImage) ProtoMessage() {}

func (x *ListStyleArchive_LabelImage) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStyleArchive_LabelImage.ProtoReflect.Descriptor instead.
func (*ListStyleArchive_LabelImage) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{16, 1}
}

func (x *ListStyleArchive_LabelImage) GetImage() *DataReference {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *ListStyleArchive_LabelImage) GetImageNull() bool {
	if x != nil && x.ImageNull != nil {
		return *x.ImageNull
	}
	return false
}

func (x *ListStyleArchive_LabelImage) GetDatabaseImage() *Reference {
	if x != nil {
		return x.DatabaseImage
	}
	return nil
}

type ColumnsArchive_EqualColumnsArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count *uint32  `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
	Gap   *float32 `protobuf:"fixed32,2,opt,name=gap" json:"gap,omitempty"`
}

func (x *ColumnsArchive_EqualColumnsArchive) Reset() {
	*x = ColumnsArchive_EqualColumnsArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnsArchive_EqualColumnsArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnsArchive_EqualColumnsArchive) ProtoMessage() {}

func (x *ColumnsArchive_EqualColumnsArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnsArchive_EqualColumnsArchive.ProtoReflect.Descriptor instead.
func (*ColumnsArchive_EqualColumnsArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{18, 0}
}

func (x *ColumnsArchive_EqualColumnsArchive) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *ColumnsArchive_EqualColumnsArchive) GetGap() float32 {
	if x != nil && x.Gap != nil {
		return *x.Gap
	}
	return 0
}

type ColumnsArchive_NonEqualColumnsArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	First     *float32                                                 `protobuf:"fixed32,1,req,name=first" json:"first,omitempty"`
	Following []*ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive `protobuf:"bytes,2,rep,name=following" json:"following,omitempty"`
}

func (x *ColumnsArchive_NonEqualColumnsArchive) Reset() {
	*x = ColumnsArchive_NonEqualColumnsArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnsArchive_NonEqualColumnsArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnsArchive_NonEqualColumnsArchive) ProtoMessage() {}

func (x *ColumnsArchive_NonEqualColumnsArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnsArchive_NonEqualColumnsArchive.ProtoReflect.Descriptor instead.
func (*ColumnsArchive_NonEqualColumnsArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{18, 1}
}

func (x *ColumnsArchive_NonEqualColumnsArchive) GetFirst() float32 {
	if x != nil && x.First != nil {
		return *x.First
	}
	return 0
}

func (x *ColumnsArchive_NonEqualColumnsArchive) GetFollowing() []*ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive {
	if x != nil {
		return x.Following
	}
	return nil
}

type ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gap   *float32 `protobuf:"fixed32,1,req,name=gap" json:"gap,omitempty"`
	Width *float32 `protobuf:"fixed32,2,req,name=width" json:"width,omitempty"`
}

func (x *ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive) Reset() {
	*x = ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive) ProtoMessage() {}

func (x *ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive.ProtoReflect.Descriptor instead.
func (*ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{18, 1, 0}
}

func (x *ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive) GetGap() float32 {
	if x != nil && x.Gap != nil {
		return *x.Gap
	}
	return 0
}

func (x *ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive) GetWidth() float32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

type TOCSettingsArchive_TOCEntryData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParagraphStyle *Reference `protobuf:"bytes,1,opt,name=paragraph_style,json=paragraphStyle" json:"paragraph_style,omitempty"`
	TocEntryStyle  *Reference `protobuf:"bytes,2,opt,name=toc_entry_style,json=tocEntryStyle" json:"toc_entry_style,omitempty"`
	ShowInToc      *bool      `protobuf:"varint,3,opt,name=show_in_toc,json=showInToc" json:"show_in_toc,omitempty"`
}

func (x *TOCSettingsArchive_TOCEntryData) Reset() {
	*x = TOCSettingsArchive_TOCEntryData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TOCSettingsArchive_TOCEntryData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TOCSettingsArchive_TOCEntryData) ProtoMessage() {}

func (x *TOCSettingsArchive_TOCEntryData) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TOCSettingsArchive_TOCEntryData.ProtoReflect.Descriptor instead.
func (*TOCSettingsArchive_TOCEntryData) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{28, 0}
}

func (x *TOCSettingsArchive_TOCEntryData) GetParagraphStyle() *Reference {
	if x != nil {
		return x.ParagraphStyle
	}
	return nil
}

func (x *TOCSettingsArchive_TOCEntryData) GetTocEntryStyle() *Reference {
	if x != nil {
		return x.TocEntryStyle
	}
	return nil
}

func (x *TOCSettingsArchive_TOCEntryData) GetShowInToc() bool {
	if x != nil && x.ShowInToc != nil {
		return *x.ShowInToc
	}
	return false
}

type UndoTransaction_GenericTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value1 *uint32 `protobuf:"varint,1,req,name=value1" json:"value1,omitempty"`
	Value2 *uint32 `protobuf:"varint,2,req,name=value2" json:"value2,omitempty"`
	Value3 *uint32 `protobuf:"varint,3,req,name=value3" json:"value3,omitempty"`
}

func (x *UndoTransaction_GenericTransaction) Reset() {
	*x = UndoTransaction_GenericTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UndoTransaction_GenericTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UndoTransaction_GenericTransaction) ProtoMessage() {}

func (x *UndoTransaction_GenericTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UndoTransaction_GenericTransaction.ProtoReflect.Descriptor instead.
func (*UndoTransaction_GenericTransaction) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{30, 0}
}

func (x *UndoTransaction_GenericTransaction) GetValue1() uint32 {
	if x != nil && x.Value1 != nil {
		return *x.Value1
	}
	return 0
}

func (x *UndoTransaction_GenericTransaction) GetValue2() uint32 {
	if x != nil && x.Value2 != nil {
		return *x.Value2
	}
	return 0
}

func (x *UndoTransaction_GenericTransaction) GetValue3() uint32 {
	if x != nil && x.Value3 != nil {
		return *x.Value3
	}
	return 0
}

type UndoTransaction_TextTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InsertLocation *uint32 `protobuf:"varint,1,req,name=insert_location,json=insertLocation" json:"insert_location,omitempty"`
	InsertLength   *uint32 `protobuf:"varint,2,req,name=insert_length,json=insertLength" json:"insert_length,omitempty"`
	StringToDelete *string `protobuf:"bytes,3,opt,name=string_to_delete,json=stringToDelete" json:"string_to_delete,omitempty"`
}

func (x *UndoTransaction_TextTransaction) Reset() {
	*x = UndoTransaction_TextTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UndoTransaction_TextTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UndoTransaction_TextTransaction) ProtoMessage() {}

func (x *UndoTransaction_TextTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UndoTransaction_TextTransaction.ProtoReflect.Descriptor instead.
func (*UndoTransaction_TextTransaction) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{30, 1}
}

func (x *UndoTransaction_TextTransaction) GetInsertLocation() uint32 {
	if x != nil && x.InsertLocation != nil {
		return *x.InsertLocation
	}
	return 0
}

func (x *UndoTransaction_TextTransaction) GetInsertLength() uint32 {
	if x != nil && x.InsertLength != nil {
		return *x.InsertLength
	}
	return 0
}

func (x *UndoTransaction_TextTransaction) GetStringToDelete() string {
	if x != nil && x.StringToDelete != nil {
		return *x.StringToDelete
	}
	return ""
}

type UndoTransaction_CharIndexTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharIndex *uint32    `protobuf:"varint,1,req,name=char_index,json=charIndex" json:"char_index,omitempty"`
	Count     *uint32    `protobuf:"varint,2,req,name=count" json:"count,omitempty"`
	Object    *Reference `protobuf:"bytes,3,opt,name=object" json:"object,omitempty"`
}

func (x *UndoTransaction_CharIndexTransaction) Reset() {
	*x = UndoTransaction_CharIndexTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UndoTransaction_CharIndexTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UndoTransaction_CharIndexTransaction) ProtoMessage() {}

func (x *UndoTransaction_CharIndexTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UndoTransaction_CharIndexTransaction.ProtoReflect.Descriptor instead.
func (*UndoTransaction_CharIndexTransaction) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{30, 2}
}

func (x *UndoTransaction_CharIndexTransaction) GetCharIndex() uint32 {
	if x != nil && x.CharIndex != nil {
		return *x.CharIndex
	}
	return 0
}

func (x *UndoTransaction_CharIndexTransaction) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *UndoTransaction_CharIndexTransaction) GetObject() *Reference {
	if x != nil {
		return x.Object
	}
	return nil
}

type UndoTransaction_ReplaceCharIndexTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttributeIndex *uint32 `protobuf:"varint,1,req,name=attribute_index,json=attributeIndex" json:"attribute_index,omitempty"`
	CharIndex      *uint32 `protobuf:"varint,2,req,name=char_index,json=charIndex" json:"char_index,omitempty"`
}

func (x *UndoTransaction_ReplaceCharIndexTransaction) Reset() {
	*x = UndoTransaction_ReplaceCharIndexTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UndoTransaction_ReplaceCharIndexTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UndoTransaction_ReplaceCharIndexTransaction) ProtoMessage() {}

func (x *UndoTransaction_ReplaceCharIndexTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UndoTransaction_ReplaceCharIndexTransaction.ProtoReflect.Descriptor instead.
func (*UndoTransaction_ReplaceCharIndexTransaction) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{30, 3}
}

func (x *UndoTransaction_ReplaceCharIndexTransaction) GetAttributeIndex() uint32 {
	if x != nil && x.AttributeIndex != nil {
		return *x.AttributeIndex
	}
	return 0
}

func (x *UndoTransaction_ReplaceCharIndexTransaction) GetCharIndex() uint32 {
	if x != nil && x.CharIndex != nil {
		return *x.CharIndex
	}
	return 0
}

type UndoTransaction_AttributeIndexTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttributeIndex *uint32    `protobuf:"varint,1,req,name=attribute_index,json=attributeIndex" json:"attribute_index,omitempty"`
	CharIndex      *uint32    `protobuf:"varint,2,req,name=char_index,json=charIndex" json:"char_index,omitempty"`
	Object         *Reference `protobuf:"bytes,3,opt,name=object" json:"object,omitempty"`
	String_        *string    `protobuf:"bytes,4,opt,name=string" json:"string,omitempty"`
}

func (x *UndoTransaction_AttributeIndexTransaction) Reset() {
	*x = UndoTransaction_AttributeIndexTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UndoTransaction_AttributeIndexTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UndoTransaction_AttributeIndexTransaction) ProtoMessage() {}

func (x *UndoTransaction_AttributeIndexTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UndoTransaction_AttributeIndexTransaction.ProtoReflect.Descriptor instead.
func (*UndoTransaction_AttributeIndexTransaction) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{30, 4}
}

func (x *UndoTransaction_AttributeIndexTransaction) GetAttributeIndex() uint32 {
	if x != nil && x.AttributeIndex != nil {
		return *x.AttributeIndex
	}
	return 0
}

func (x *UndoTransaction_AttributeIndexTransaction) GetCharIndex() uint32 {
	if x != nil && x.CharIndex != nil {
		return *x.CharIndex
	}
	return 0
}

func (x *UndoTransaction_AttributeIndexTransaction) GetObject() *Reference {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *UndoTransaction_AttributeIndexTransaction) GetString_() string {
	if x != nil && x.String_ != nil {
		return *x.String_
	}
	return ""
}

type UndoTransaction_InsertAttributeTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttributeIndex *uint32    `protobuf:"varint,1,req,name=attribute_index,json=attributeIndex" json:"attribute_index,omitempty"`
	AttributeCount *uint32    `protobuf:"varint,2,req,name=attribute_count,json=attributeCount" json:"attribute_count,omitempty"`
	Object         *Reference `protobuf:"bytes,3,opt,name=object" json:"object,omitempty"`
	String_        *string    `protobuf:"bytes,4,opt,name=string" json:"string,omitempty"`
}

func (x *UndoTransaction_InsertAttributeTransaction) Reset() {
	*x = UndoTransaction_InsertAttributeTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UndoTransaction_InsertAttributeTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UndoTransaction_InsertAttributeTransaction) ProtoMessage() {}

func (x *UndoTransaction_InsertAttributeTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UndoTransaction_InsertAttributeTransaction.ProtoReflect.Descriptor instead.
func (*UndoTransaction_InsertAttributeTransaction) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{30, 5}
}

func (x *UndoTransaction_InsertAttributeTransaction) GetAttributeIndex() uint32 {
	if x != nil && x.AttributeIndex != nil {
		return *x.AttributeIndex
	}
	return 0
}

func (x *UndoTransaction_InsertAttributeTransaction) GetAttributeCount() uint32 {
	if x != nil && x.AttributeCount != nil {
		return *x.AttributeCount
	}
	return 0
}

func (x *UndoTransaction_InsertAttributeTransaction) GetObject() *Reference {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *UndoTransaction_InsertAttributeTransaction) GetString_() string {
	if x != nil && x.String_ != nil {
		return *x.String_
	}
	return ""
}

type UndoTransaction_InsertNilTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttributeIndex *uint32 `protobuf:"varint,1,req,name=attribute_index,json=attributeIndex" json:"attribute_index,omitempty"`
	AttributeCount *uint32 `protobuf:"varint,2,req,name=attribute_count,json=attributeCount" json:"attribute_count,omitempty"`
}

func (x *UndoTransaction_InsertNilTransaction) Reset() {
	*x = UndoTransaction_InsertNilTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UndoTransaction_InsertNilTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UndoTransaction_InsertNilTransaction) ProtoMessage() {}

func (x *UndoTransaction_InsertNilTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UndoTransaction_InsertNilTransaction.ProtoReflect.Descriptor instead.
func (*UndoTransaction_InsertNilTransaction) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{30, 6}
}

func (x *UndoTransaction_InsertNilTransaction) GetAttributeIndex() uint32 {
	if x != nil && x.AttributeIndex != nil {
		return *x.AttributeIndex
	}
	return 0
}

func (x *UndoTransaction_InsertNilTransaction) GetAttributeCount() uint32 {
	if x != nil && x.AttributeCount != nil {
		return *x.AttributeCount
	}
	return 0
}

type UndoTransaction_CharDeltaTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharIndex      *uint32 `protobuf:"varint,1,req,name=char_index,json=charIndex" json:"char_index,omitempty"`
	AttributeIndex *uint32 `protobuf:"varint,2,req,name=attribute_index,json=attributeIndex" json:"attribute_index,omitempty"`
	CharDelta      *int32  `protobuf:"zigzag32,3,req,name=char_delta,json=charDelta" json:"char_delta,omitempty"`
}

func (x *UndoTransaction_CharDeltaTransaction) Reset() {
	*x = UndoTransaction_CharDeltaTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UndoTransaction_CharDeltaTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UndoTransaction_CharDeltaTransaction) ProtoMessage() {}

func (x *UndoTransaction_CharDeltaTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UndoTransaction_CharDeltaTransaction.ProtoReflect.Descriptor instead.
func (*UndoTransaction_CharDeltaTransaction) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{30, 7}
}

func (x *UndoTransaction_CharDeltaTransaction) GetCharIndex() uint32 {
	if x != nil && x.CharIndex != nil {
		return *x.CharIndex
	}
	return 0
}

func (x *UndoTransaction_CharDeltaTransaction) GetAttributeIndex() uint32 {
	if x != nil && x.AttributeIndex != nil {
		return *x.AttributeIndex
	}
	return 0
}

func (x *UndoTransaction_CharDeltaTransaction) GetCharDelta() int32 {
	if x != nil && x.CharDelta != nil {
		return *x.CharDelta
	}
	return 0
}

type UndoTransaction_ParagraphDataTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttributeIndex *uint32 `protobuf:"varint,1,req,name=attribute_index,json=attributeIndex" json:"attribute_index,omitempty"`
	First          *uint32 `protobuf:"varint,2,req,name=first" json:"first,omitempty"`
	Second         *uint32 `protobuf:"varint,3,req,name=second" json:"second,omitempty"`
	CharIndex      *uint32 `protobuf:"varint,4,req,name=char_index,json=charIndex" json:"char_index,omitempty"`
}

func (x *UndoTransaction_ParagraphDataTransaction) Reset() {
	*x = UndoTransaction_ParagraphDataTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UndoTransaction_ParagraphDataTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UndoTransaction_ParagraphDataTransaction) ProtoMessage() {}

func (x *UndoTransaction_ParagraphDataTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UndoTransaction_ParagraphDataTransaction.ProtoReflect.Descriptor instead.
func (*UndoTransaction_ParagraphDataTransaction) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{30, 8}
}

func (x *UndoTransaction_ParagraphDataTransaction) GetAttributeIndex() uint32 {
	if x != nil && x.AttributeIndex != nil {
		return *x.AttributeIndex
	}
	return 0
}

func (x *UndoTransaction_ParagraphDataTransaction) GetFirst() uint32 {
	if x != nil && x.First != nil {
		return *x.First
	}
	return 0
}

func (x *UndoTransaction_ParagraphDataTransaction) GetSecond() uint32 {
	if x != nil && x.Second != nil {
		return *x.Second
	}
	return 0
}

func (x *UndoTransaction_ParagraphDataTransaction) GetCharIndex() uint32 {
	if x != nil && x.CharIndex != nil {
		return *x.CharIndex
	}
	return 0
}

type UndoTransaction_ObjectDOLCTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flags  *uint32    `protobuf:"varint,1,req,name=flags" json:"flags,omitempty"`
	Object *Reference `protobuf:"bytes,2,opt,name=object" json:"object,omitempty"`
}

func (x *UndoTransaction_ObjectDOLCTransaction) Reset() {
	*x = UndoTransaction_ObjectDOLCTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UndoTransaction_ObjectDOLCTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UndoTransaction_ObjectDOLCTransaction) ProtoMessage() {}

func (x *UndoTransaction_ObjectDOLCTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UndoTransaction_ObjectDOLCTransaction.ProtoReflect.Descriptor instead.
func (*UndoTransaction_ObjectDOLCTransaction) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{30, 9}
}

func (x *UndoTransaction_ObjectDOLCTransaction) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *UndoTransaction_ObjectDOLCTransaction) GetObject() *Reference {
	if x != nil {
		return x.Object
	}
	return nil
}

type UndoTransaction_CTDateTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttributeIndex *uint32 `protobuf:"varint,1,req,name=attribute_index,json=attributeIndex" json:"attribute_index,omitempty"`
	Date           *Date   `protobuf:"bytes,2,opt,name=date" json:"date,omitempty"`
}

func (x *UndoTransaction_CTDateTransaction) Reset() {
	*x = UndoTransaction_CTDateTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UndoTransaction_CTDateTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UndoTransaction_CTDateTransaction) ProtoMessage() {}

func (x *UndoTransaction_CTDateTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UndoTransaction_CTDateTransaction.ProtoReflect.Descriptor instead.
func (*UndoTransaction_CTDateTransaction) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{30, 10}
}

func (x *UndoTransaction_CTDateTransaction) GetAttributeIndex() uint32 {
	if x != nil && x.AttributeIndex != nil {
		return *x.AttributeIndex
	}
	return 0
}

func (x *UndoTransaction_CTDateTransaction) GetDate() *Date {
	if x != nil {
		return x.Date
	}
	return nil
}

type UndoTransaction_UnionTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind             *UndoTransaction_UndoKind                    `protobuf:"varint,1,req,name=kind,enum=TSWP.UndoTransaction_UndoKind" json:"kind,omitempty"`
	Table            *uint32                                      `protobuf:"varint,2,opt,name=table" json:"table,omitempty"`
	Generic          *UndoTransaction_GenericTransaction          `protobuf:"bytes,5,opt,name=generic" json:"generic,omitempty"`
	Text             *UndoTransaction_TextTransaction             `protobuf:"bytes,6,opt,name=text" json:"text,omitempty"`
	CharIndex        *UndoTransaction_CharIndexTransaction        `protobuf:"bytes,7,opt,name=char_index,json=charIndex" json:"char_index,omitempty"`
	ReplaceCharIndex *UndoTransaction_ReplaceCharIndexTransaction `protobuf:"bytes,8,opt,name=replace_char_index,json=replaceCharIndex" json:"replace_char_index,omitempty"`
	AttributeIndex   *UndoTransaction_AttributeIndexTransaction   `protobuf:"bytes,9,opt,name=attribute_index,json=attributeIndex" json:"attribute_index,omitempty"`
	InsertNil        *UndoTransaction_InsertNilTransaction        `protobuf:"bytes,10,opt,name=insert_nil,json=insertNil" json:"insert_nil,omitempty"`
	InsertAttribute  *UndoTransaction_InsertAttributeTransaction  `protobuf:"bytes,11,opt,name=insert_attribute,json=insertAttribute" json:"insert_attribute,omitempty"`
	CharDelta        *UndoTransaction_CharDeltaTransaction        `protobuf:"bytes,12,opt,name=char_delta,json=charDelta" json:"char_delta,omitempty"`
	ParagraphData    *UndoTransaction_ParagraphDataTransaction    `protobuf:"bytes,13,opt,name=paragraph_data,json=paragraphData" json:"paragraph_data,omitempty"`
	ObjectDolc       *UndoTransaction_ObjectDOLCTransaction       `protobuf:"bytes,14,opt,name=object_dolc,json=objectDolc" json:"object_dolc,omitempty"`
	CtDate           *UndoTransaction_CTDateTransaction           `protobuf:"bytes,15,opt,name=ct_date,json=ctDate" json:"ct_date,omitempty"`
}

func (x *UndoTransaction_UnionTransaction) Reset() {
	*x = UndoTransaction_UnionTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UndoTransaction_UnionTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UndoTransaction_UnionTransaction) ProtoMessage() {}

func (x *UndoTransaction_UnionTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UndoTransaction_UnionTransaction.ProtoReflect.Descriptor instead.
func (*UndoTransaction_UnionTransaction) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{30, 11}
}

func (x *UndoTransaction_UnionTransaction) GetKind() UndoTransaction_UndoKind {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return UndoTransaction_REPLACE_TEXT
}

func (x *UndoTransaction_UnionTransaction) GetTable() uint32 {
	if x != nil && x.Table != nil {
		return *x.Table
	}
	return 0
}

func (x *UndoTransaction_UnionTransaction) GetGeneric() *UndoTransaction_GenericTransaction {
	if x != nil {
		return x.Generic
	}
	return nil
}

func (x *UndoTransaction_UnionTransaction) GetText() *UndoTransaction_TextTransaction {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *UndoTransaction_UnionTransaction) GetCharIndex() *UndoTransaction_CharIndexTransaction {
	if x != nil {
		return x.CharIndex
	}
	return nil
}

func (x *UndoTransaction_UnionTransaction) GetReplaceCharIndex() *UndoTransaction_ReplaceCharIndexTransaction {
	if x != nil {
		return x.ReplaceCharIndex
	}
	return nil
}

func (x *UndoTransaction_UnionTransaction) GetAttributeIndex() *UndoTransaction_AttributeIndexTransaction {
	if x != nil {
		return x.AttributeIndex
	}
	return nil
}

func (x *UndoTransaction_UnionTransaction) GetInsertNil() *UndoTransaction_InsertNilTransaction {
	if x != nil {
		return x.InsertNil
	}
	return nil
}

func (x *UndoTransaction_UnionTransaction) GetInsertAttribute() *UndoTransaction_InsertAttributeTransaction {
	if x != nil {
		return x.InsertAttribute
	}
	return nil
}

func (x *UndoTransaction_UnionTransaction) GetCharDelta() *UndoTransaction_CharDeltaTransaction {
	if x != nil {
		return x.CharDelta
	}
	return nil
}

func (x *UndoTransaction_UnionTransaction) GetParagraphData() *UndoTransaction_ParagraphDataTransaction {
	if x != nil {
		return x.ParagraphData
	}
	return nil
}

func (x *UndoTransaction_UnionTransaction) GetObjectDolc() *UndoTransaction_ObjectDOLCTransaction {
	if x != nil {
		return x.ObjectDolc
	}
	return nil
}

func (x *UndoTransaction_UnionTransaction) GetCtDate() *UndoTransaction_CTDateTransaction {
	if x != nil {
		return x.CtDate
	}
	return nil
}

type UndoTransaction_StorageAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind              *UndoTransaction_ActionKind `protobuf:"varint,1,req,name=kind,enum=TSWP.UndoTransaction_ActionKind" json:"kind,omitempty"`
	Flags             *uint32                     `protobuf:"varint,2,opt,name=flags" json:"flags,omitempty"`
	Table             *uint32                     `protobuf:"varint,3,opt,name=table" json:"table,omitempty"`
	Range             *Range                      `protobuf:"bytes,4,opt,name=range" json:"range,omitempty"`
	String_           *string                     `protobuf:"bytes,5,opt,name=string" json:"string,omitempty"`
	Object            *Reference                  `protobuf:"bytes,6,opt,name=object" json:"object,omitempty"`
	Date              *Date                       `protobuf:"bytes,7,opt,name=date" json:"date,omitempty"`
	ParagraphLevel    *uint32                     `protobuf:"varint,8,opt,name=paragraph_level,json=paragraphLevel" json:"paragraph_level,omitempty"`
	ParagraphFlags    *uint32                     `protobuf:"varint,9,opt,name=paragraph_flags,json=paragraphFlags" json:"paragraph_flags,omitempty"`
	ParagraphValue    *uint32                     `protobuf:"varint,10,opt,name=paragraph_value,json=paragraphValue" json:"paragraph_value,omitempty"`
	PlacementIndex    *int32                      `protobuf:"varint,11,opt,name=placement_index,json=placementIndex" json:"placement_index,omitempty"`
	PlacementUuidPath *string                     `protobuf:"bytes,12,opt,name=placement_uuid_path,json=placementUuidPath" json:"placement_uuid_path,omitempty"`
	UndoObject        *Reference                  `protobuf:"bytes,13,opt,name=undo_object,json=undoObject" json:"undo_object,omitempty"`
}

func (x *UndoTransaction_StorageAction) Reset() {
	*x = UndoTransaction_StorageAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UndoTransaction_StorageAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UndoTransaction_StorageAction) ProtoMessage() {}

func (x *UndoTransaction_StorageAction) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UndoTransaction_StorageAction.ProtoReflect.Descriptor instead.
func (*UndoTransaction_StorageAction) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{30, 12}
}

func (x *UndoTransaction_StorageAction) GetKind() UndoTransaction_ActionKind {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return UndoTransaction_ACTION_UNDEFINED
}

func (x *UndoTransaction_StorageAction) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *UndoTransaction_StorageAction) GetTable() uint32 {
	if x != nil && x.Table != nil {
		return *x.Table
	}
	return 0
}

func (x *UndoTransaction_StorageAction) GetRange() *Range {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *UndoTransaction_StorageAction) GetString_() string {
	if x != nil && x.String_ != nil {
		return *x.String_
	}
	return ""
}

func (x *UndoTransaction_StorageAction) GetObject() *Reference {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *UndoTransaction_StorageAction) GetDate() *Date {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *UndoTransaction_StorageAction) GetParagraphLevel() uint32 {
	if x != nil && x.ParagraphLevel != nil {
		return *x.ParagraphLevel
	}
	return 0
}

func (x *UndoTransaction_StorageAction) GetParagraphFlags() uint32 {
	if x != nil && x.ParagraphFlags != nil {
		return *x.ParagraphFlags
	}
	return 0
}

func (x *UndoTransaction_StorageAction) GetParagraphValue() uint32 {
	if x != nil && x.ParagraphValue != nil {
		return *x.ParagraphValue
	}
	return 0
}

func (x *UndoTransaction_StorageAction) GetPlacementIndex() int32 {
	if x != nil && x.PlacementIndex != nil {
		return *x.PlacementIndex
	}
	return 0
}

func (x *UndoTransaction_StorageAction) GetPlacementUuidPath() string {
	if x != nil && x.PlacementUuidPath != nil {
		return *x.PlacementUuidPath
	}
	return ""
}

func (x *UndoTransaction_StorageAction) GetUndoObject() *Reference {
	if x != nil {
		return x.UndoObject
	}
	return nil
}

type UndoTransaction_StorageActionGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind                  *UndoTransaction_ActionGroupKind `protobuf:"varint,1,req,name=kind,enum=TSWP.UndoTransaction_ActionGroupKind" json:"kind,omitempty"`
	ForwardActions        []*UndoTransaction_StorageAction `protobuf:"bytes,3,rep,name=forward_actions,json=forwardActions" json:"forward_actions,omitempty"`
	InverseForwardActions []*UndoTransaction_StorageAction `protobuf:"bytes,4,rep,name=inverse_forward_actions,json=inverseForwardActions" json:"inverse_forward_actions,omitempty"`
	InverseDetailActions  []*UndoTransaction_StorageAction `protobuf:"bytes,6,rep,name=inverse_detail_actions,json=inverseDetailActions" json:"inverse_detail_actions,omitempty"`
}

func (x *UndoTransaction_StorageActionGroup) Reset() {
	*x = UndoTransaction_StorageActionGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UndoTransaction_StorageActionGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UndoTransaction_StorageActionGroup) ProtoMessage() {}

func (x *UndoTransaction_StorageActionGroup) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UndoTransaction_StorageActionGroup.ProtoReflect.Descriptor instead.
func (*UndoTransaction_StorageActionGroup) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{30, 13}
}

func (x *UndoTransaction_StorageActionGroup) GetKind() UndoTransaction_ActionGroupKind {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return UndoTransaction_ACTION_GROUP_UNDEFINED
}

func (x *UndoTransaction_StorageActionGroup) GetForwardActions() []*UndoTransaction_StorageAction {
	if x != nil {
		return x.ForwardActions
	}
	return nil
}

func (x *UndoTransaction_StorageActionGroup) GetInverseForwardActions() []*UndoTransaction_StorageAction {
	if x != nil {
		return x.InverseForwardActions
	}
	return nil
}

func (x *UndoTransaction_StorageActionGroup) GetInverseDetailActions() []*UndoTransaction_StorageAction {
	if x != nil {
		return x.InverseDetailActions
	}
	return nil
}

type TOCSmartFieldArchive_TOCEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BookmarkName *string    `protobuf:"bytes,1,opt,name=bookmark_name,json=bookmarkName" json:"bookmark_name,omitempty"`
	TargetStyle  *Reference `protobuf:"bytes,2,opt,name=target_style,json=targetStyle" json:"target_style,omitempty"`
	Range        *Range     `protobuf:"bytes,3,opt,name=range" json:"range,omitempty"`
}

func (x *TOCSmartFieldArchive_TOCEntry) Reset() {
	*x = TOCSmartFieldArchive_TOCEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TOCSmartFieldArchive_TOCEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TOCSmartFieldArchive_TOCEntry) ProtoMessage() {}

func (x *TOCSmartFieldArchive_TOCEntry) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TOCSmartFieldArchive_TOCEntry.ProtoReflect.Descriptor instead.
func (*TOCSmartFieldArchive_TOCEntry) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_proto_rawDescGZIP(), []int{55, 0}
}

func (x *TOCSmartFieldArchive_TOCEntry) GetBookmarkName() string {
	if x != nil && x.BookmarkName != nil {
		return *x.BookmarkName
	}
	return ""
}

func (x *TOCSmartFieldArchive_TOCEntry) GetTargetStyle() *Reference {
	if x != nil {
		return x.TargetStyle
	}
	return nil
}

func (x *TOCSmartFieldArchive_TOCEntry) GetRange() *Range {
	if x != nil {
		return x.Range
	}
	return nil
}

var file_TSWPArchives_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*CommandPropertyEntryArchive)(nil),
		ExtensionType: (*PaddingArchive)(nil),
		Field:         100,
		Name:          "TSWP.padding",
		Tag:           "bytes,100,opt,name=padding",
		Filename:      "TSWPArchives.proto",
	},
	{
		ExtendedType:  (*TSSThemeArchive)(nil),
		ExtensionType: (*TSWPThemePresetsArchive)(nil),
		Field:         110,
		Name:          "TSWP.TSWPThemePresetsArchive.extension",
		Tag:           "bytes,110,opt,name=extension",
		Filename:      "TSWPArchives.proto",
	},
	{
		ExtendedType:  (*ImageArchive)(nil),
		ExtensionType: (*string)(nil),
		Field:         100,
		Name:          "TSWP.EquationInfoArchive.equation_source_old",
		Tag:           "bytes,100,opt,name=equation_source_old",
		Filename:      "TSWPArchives.proto",
	},
	{
		ExtendedType:  (*ImageArchive)(nil),
		ExtensionType: (*CharacterStylePropertiesArchive)(nil),
		Field:         101,
		Name:          "TSWP.EquationInfoArchive.equation_text_properties",
		Tag:           "bytes,101,opt,name=equation_text_properties",
		Filename:      "TSWPArchives.proto",
	},
	{
		ExtendedType:  (*ImageArchive)(nil),
		ExtensionType: (*float32)(nil),
		Field:         102,
		Name:          "TSWP.EquationInfoArchive.equation_depth",
		Tag:           "fixed32,102,opt,name=equation_depth",
		Filename:      "TSWPArchives.proto",
	},
	{
		ExtendedType:  (*ImageArchive)(nil),
		ExtensionType: (*string)(nil),
		Field:         103,
		Name:          "TSWP.EquationInfoArchive.equation_source_text",
		Tag:           "bytes,103,opt,name=equation_source_text",
		Filename:      "TSWPArchives.proto",
	},
}

// Extension fields to CommandPropertyEntryArchive.
var (
	// optional TSWP.PaddingArchive padding = 100;
	E_Padding = &file_TSWPArchives_proto_extTypes[0]
)

// Extension fields to TSSThemeArchive.
var (
	// optional TSWP.TSWPThemePresetsArchive extension = 110;
	E_TSWPThemePresetsArchive_Extension = &file_TSWPArchives_proto_extTypes[1]
)

// Extension fields to ImageArchive.
var (
	// optional string equation_source_old = 100;
	E_EquationInfoArchive_EquationSourceOld = &file_TSWPArchives_proto_extTypes[2]
	// optional TSWP.CharacterStylePropertiesArchive equation_text_properties = 101;
	E_EquationInfoArchive_EquationTextProperties = &file_TSWPArchives_proto_extTypes[3]
	// optional float equation_depth = 102;
	E_EquationInfoArchive_EquationDepth = &file_TSWPArchives_proto_extTypes[4]
	// optional string equation_source_text = 103;
	E_EquationInfoArchive_EquationSourceText = &file_TSWPArchives_proto_extTypes[5]
)

var File_TSWPArchives_proto protoreflect.FileDescriptor

var file_TSWPArchives_proto_rawDesc = []byte{
	0x0a, 0x12, 0x54, 0x53, 0x57, 0x50, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x54, 0x53, 0x57, 0x50, 0x1a, 0x11, 0x54, 0x53, 0x50, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x54,
	0x53, 0x53, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x11, 0x54, 0x53, 0x44, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xaa, 0x02, 0x0a, 0x14, 0x54, 0x53, 0x57, 0x50, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x27, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x57,
	0x50, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x54, 0x0a, 0x16, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x52, 0x16, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x39, 0x0a,
	0x0d, 0x63, 0x61, 0x72, 0x65, 0x74, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x18, 0x04,
	0x20, 0x02, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x43, 0x61, 0x72, 0x65,
	0x74, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x52, 0x0d, 0x63, 0x61, 0x72, 0x65, 0x74,
	0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x36, 0x0a, 0x11, 0x73, 0x6d, 0x61, 0x72,
	0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x0f, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x22, 0xc0, 0x01, 0x0a, 0x14, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x44, 0x0a, 0x07, 0x65, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x54, 0x53, 0x57,
	0x50, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x1a,
	0x62, 0x0a, 0x0f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x26, 0x0a, 0x06, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x22, 0xb0, 0x01, 0x0a, 0x14, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x44, 0x0a, 0x07,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x54, 0x53, 0x57, 0x50, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x1a, 0x52, 0x0a, 0x0f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0e,
	0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0xce, 0x01, 0x0a, 0x16, 0x50, 0x61, 0x72, 0x61, 0x44,
	0x61, 0x74, 0x61, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x48, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x44, 0x61,
	0x74, 0x61, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x2e, 0x50, 0x61, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x6a, 0x0a, 0x11, 0x50,
	0x61, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x22, 0xdf, 0x01, 0x0a, 0x1e, 0x4f, 0x76, 0x65, 0x72,
	0x6c, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x58, 0x0a, 0x07, 0x65, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x54, 0x53,
	0x57, 0x50, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x1a, 0x63, 0x0a, 0x19, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x12, 0x20, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x22, 0x90, 0x0f, 0x0a, 0x0e, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x3a, 0x0a, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x54, 0x53, 0x57,
	0x50, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x07, 0x54, 0x45, 0x58, 0x54, 0x42,
	0x4f, 0x58, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x2f, 0x0a, 0x0b, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x5f, 0x73, 0x68, 0x65, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x73,
	0x74, 0x79, 0x6c, 0x65, 0x53, 0x68, 0x65, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x22, 0x0a,
	0x09, 0x68, 0x61, 0x73, 0x5f, 0x69, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x08, 0x68, 0x61, 0x73, 0x49, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x26, 0x0a, 0x0b, 0x69, 0x6e, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0a, 0x69,
	0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x10, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x0e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12,
	0x44, 0x0a, 0x0f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e,
	0x50, 0x61, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x10, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0e, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x44, 0x0a, 0x10, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x0e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x72, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x12, 0x45, 0x0a, 0x10, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53,
	0x57, 0x50, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x10, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x48, 0x0a, 0x12, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53,
	0x57, 0x50, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x10, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x48, 0x0a, 0x11, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x50, 0x61, 0x72, 0x61,
	0x44, 0x61, 0x74, 0x61, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x0f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x0e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x6f, 0x6f,
	0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53,
	0x57, 0x50, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x6f,
	0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x41, 0x0a, 0x0e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x66, 0x6f, 0x6f, 0x74, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0d, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x46, 0x6f, 0x6f, 0x74, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0c, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x62, 0x79, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x0e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x75, 0x62, 0x79, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x41, 0x0a, 0x0e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x0d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x69, 0x63, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53,
	0x57, 0x50, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x69,
	0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0e, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0e,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x0d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x43, 0x0a, 0x0f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x0e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x69, 0x67, 0x68, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x44, 0x0a, 0x0f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x5f, 0x62, 0x69, 0x64, 0x69, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x54, 0x53, 0x57, 0x50, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0d, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x42, 0x69, 0x64, 0x69, 0x12, 0x64, 0x0a, 0x1b, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f,
	0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x19, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x76, 0x65, 0x72,
	0x6c, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x5c, 0x0a, 0x17, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x65, 0x6e, 0x63, 0x69, 0x6c,
	0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x15, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x65,
	0x6e, 0x63, 0x69, 0x6c, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47,
	0x0a, 0x11, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x61, 0x74, 0x65, 0x63, 0x68, 0x75, 0x79,
	0x6f, 0x6b, 0x6f, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x57, 0x50,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x10, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x61, 0x74, 0x65,
	0x63, 0x68, 0x75, 0x79, 0x6f, 0x6b, 0x6f, 0x12, 0x4b, 0x0a, 0x14, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x63, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x11, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x72, 0x6f, 0x70, 0x43, 0x61, 0x70, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x22, 0x76, 0x0a, 0x08, 0x4b, 0x69, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x08, 0x0a, 0x04, 0x42, 0x4f, 0x44, 0x59, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x48, 0x45,
	0x41, 0x44, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x4f, 0x4f, 0x54, 0x4e, 0x4f,
	0x54, 0x45, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x45, 0x58, 0x54, 0x42, 0x4f, 0x58, 0x10,
	0x03, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x54, 0x45, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x43,
	0x45, 0x4c, 0x4c, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x43, 0x4c, 0x41, 0x53, 0x53,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x41, 0x42, 0x4c, 0x45,
	0x4f, 0x46, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x07, 0x22, 0x87, 0x01, 0x0a,
	0x10, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x12, 0x36, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x74, 0x65, 0x78,
	0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x74,
	0x65, 0x78, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x55, 0x75, 0x69, 0x64,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0xa6, 0x01, 0x0a, 0x1b, 0x54, 0x53, 0x57, 0x50, 0x50,
	0x65, 0x6e, 0x63, 0x69, 0x6c, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x4a, 0x0a, 0x19, 0x70, 0x65, 0x6e, 0x63, 0x69, 0x6c,
	0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x17, 0x70, 0x65, 0x6e, 0x63, 0x69,
	0x6c, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x74, 0x65, 0x78, 0x74, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x55, 0x75, 0x69, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22,
	0x62, 0x0a, 0x12, 0x46, 0x6f, 0x6e, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x0d, 0x52, 0x0f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x22, 0xe3, 0x15, 0x0a, 0x1f, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x6c, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x62, 0x6f, 0x6c, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69,
	0x74, 0x61, 0x6c, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x74, 0x61,
	0x6c, 0x69, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x66, 0x6f, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x24, 0x0a, 0x0e, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x75,
	0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x66, 0x6f, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6f, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x66, 0x6f,
	0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x29, 0x0a, 0x0a, 0x66,
	0x6f, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x09, 0x66, 0x6f, 0x6e,
	0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x57, 0x0a, 0x0b, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x54,
	0x53, 0x57, 0x50, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x2e, 0x53, 0x75, 0x70, 0x65, 0x72, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0b, 0x73, 0x75, 0x70, 0x65, 0x72, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x12, 0x51, 0x0a, 0x09, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x55, 0x6e, 0x64, 0x65, 0x72,
	0x6c, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x54, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x74, 0x68, 0x72,
	0x75, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x43,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6b, 0x65, 0x74, 0x68, 0x72, 0x75, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73,
	0x74, 0x72, 0x69, 0x6b, 0x65, 0x74, 0x68, 0x72, 0x75, 0x12, 0x60, 0x0a, 0x0e, 0x63, 0x61, 0x70,
	0x69, 0x74, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x38, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x63, 0x61, 0x70,
	0x69, 0x74, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x62,
	0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x68, 0x69,
	0x66, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x07, 0x6b, 0x65, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x51, 0x0a, 0x09,
	0x6c, 0x69, 0x67, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x33, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x4c, 0x69, 0x67, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12,
	0x2c, 0x0a, 0x12, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x6f, 0x75, 0x74,
	0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x2f, 0x0a,
	0x0d, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x52, 0x0c, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x07, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x64,
	0x6f, 0x77, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73,
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x68, 0x61,
	0x64, 0x6f, 0x77, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e,
	0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x06, 0x73,
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x74,
	0x68, 0x72, 0x75, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x74, 0x68, 0x72, 0x75,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x35, 0x0a, 0x10, 0x73, 0x74, 0x72,
	0x69, 0x6b, 0x65, 0x74, 0x68, 0x72, 0x75, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52,
	0x0f, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x74, 0x68, 0x72, 0x75, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x12, 0x29, 0x0a, 0x10, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x74, 0x68, 0x72, 0x75, 0x5f, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x18, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x73, 0x74, 0x72, 0x69,
	0x6b, 0x65, 0x74, 0x68, 0x72, 0x75, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x32, 0x0a, 0x15, 0x62,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f,
	0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x62, 0x61, 0x63, 0x6b,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4e, 0x75, 0x6c, 0x6c, 0x12,
	0x35, 0x0a, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x33, 0x0a, 0x0f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x0e, 0x75, 0x6e, 0x64, 0x65, 0x72,
	0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x75, 0x6e, 0x64,
	0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x57, 0x69, 0x64,
	0x74, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6b,
	0x65, 0x74, 0x68, 0x72, 0x75, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x77, 0x6f, 0x72,
	0x64, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x74, 0x68, 0x72, 0x75, 0x12, 0x25, 0x0a, 0x0e, 0x77,
	0x6f, 0x72, 0x64, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x64, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x21, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x66, 0x6f, 0x6e, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x4e, 0x75, 0x6c, 0x6c,
	0x12, 0x3d, 0x0a, 0x0d, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x46,
	0x6f, 0x6e, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x0c, 0x66, 0x6f, 0x6e, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12,
	0x61, 0x0a, 0x11, 0x77, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x57,
	0x50, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x18, 0x6b, 0x57, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c,
	0x52, 0x10, 0x77, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x6d, 0x70, 0x68, 0x61, 0x73, 0x69, 0x73, 0x5f, 0x6d,
	0x61, 0x72, 0x6b, 0x73, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x24, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x65, 0x6d, 0x70, 0x68, 0x61, 0x73, 0x69, 0x73, 0x4d, 0x61, 0x72, 0x6b, 0x73, 0x4e, 0x75,
	0x6c, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6d, 0x70, 0x68, 0x61, 0x73, 0x69, 0x73, 0x5f, 0x6d,
	0x61, 0x72, 0x6b, 0x73, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6d, 0x70, 0x68,
	0x61, 0x73, 0x69, 0x73, 0x4d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x3f, 0x0a, 0x1c, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x6f, 0x6e, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x26, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x19, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x46, 0x6f,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x6f, 0x6e, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x46, 0x6f, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x69, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x46, 0x0a, 0x1f, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x73, 0x5f, 0x6c, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x63, 0x61, 0x70, 0x69,
	0x74, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x73, 0x4c, 0x69,
	0x6e, 0x67, 0x75, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x63, 0x68, 0x75, 0x5f, 0x79, 0x6f, 0x6b, 0x6f, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x75, 0x59, 0x6f, 0x6b, 0x6f, 0x12, 0x26, 0x0a,
	0x0f, 0x74, 0x73, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x5f, 0x6e, 0x75, 0x6c, 0x6c,
	0x18, 0x2b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x74, 0x73, 0x64, 0x53, 0x74, 0x72, 0x6f, 0x6b,
	0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x31, 0x0a, 0x0a, 0x74, 0x73, 0x64, 0x5f, 0x73, 0x74, 0x72,
	0x6f, 0x6b, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e,
	0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x09, 0x74,
	0x73, 0x64, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x73, 0x64, 0x5f,
	0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x74, 0x73, 0x64, 0x46, 0x69, 0x6c, 0x6c, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x2b, 0x0a, 0x08,
	0x74, 0x73, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x54, 0x53, 0x44, 0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x07, 0x74, 0x73, 0x64, 0x46, 0x69, 0x6c, 0x6c, 0x12, 0x4b, 0x0a, 0x23, 0x74, 0x73, 0x64,
	0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x66, 0x69, 0x6c,
	0x6c, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x18, 0x2f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x74, 0x73, 0x64, 0x46, 0x69, 0x6c, 0x6c, 0x53,
	0x68, 0x6f, 0x75, 0x6c, 0x64, 0x46, 0x69, 0x6c, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x22, 0x4c, 0x0a, 0x12, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x6b, 0x4e, 0x6f, 0x43, 0x61, 0x70, 0x73, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x6b, 0x41, 0x6c,
	0x6c, 0x43, 0x61, 0x70, 0x73, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x53, 0x6d, 0x61, 0x6c,
	0x6c, 0x43, 0x61, 0x70, 0x73, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x6b, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x64, 0x10, 0x03, 0x22, 0x61, 0x0a, 0x0d, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x69, 0x6e,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x6b, 0x4e, 0x6f, 0x55, 0x6e, 0x64, 0x65,
	0x72, 0x6c, 0x69, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x10, 0x01, 0x12, 0x14, 0x0a,
	0x10, 0x6b, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x69, 0x6e,
	0x65, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x57, 0x61, 0x76, 0x79, 0x55, 0x6e, 0x64, 0x65,
	0x72, 0x6c, 0x69, 0x6e, 0x65, 0x10, 0x03, 0x22, 0x52, 0x0a, 0x0d, 0x4c, 0x69, 0x67, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x67, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x10, 0x00,
	0x12, 0x16, 0x0a, 0x12, 0x6b, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x67,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x6b, 0x41, 0x6c, 0x6c,
	0x4c, 0x69, 0x67, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x10, 0x02, 0x22, 0x68, 0x0a, 0x0e, 0x53,
	0x74, 0x72, 0x69, 0x6b, 0x65, 0x74, 0x68, 0x72, 0x75, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a,
	0x0d, 0x6b, 0x4e, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x74, 0x68, 0x72, 0x75, 0x10, 0x00,
	0x12, 0x15, 0x0a, 0x11, 0x6b, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6b,
	0x65, 0x74, 0x68, 0x72, 0x75, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x74, 0x68, 0x72, 0x75, 0x10, 0x02, 0x12, 0x15,
	0x0a, 0x11, 0x6b, 0x54, 0x72, 0x69, 0x70, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x74,
	0x68, 0x72, 0x75, 0x10, 0x03, 0x22, 0x42, 0x0a, 0x0f, 0x53, 0x75, 0x70, 0x65, 0x72, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x6b, 0x4e, 0x6f, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x6b, 0x53, 0x75, 0x70, 0x65,
	0x72, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x10, 0x02, 0x22, 0xba, 0x01, 0x0a, 0x15, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x54, 0x53, 0x53, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0e,
	0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4e, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x5f, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x72, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0xf7, 0x01, 0x0a, 0x0a, 0x54, 0x61, 0x62, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3f, 0x0a, 0x09, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x54, 0x61, 0x62, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x54, 0x61, 0x62, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x74, 0x0a, 0x10, 0x54, 0x61,
	0x62, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15,
	0x0a, 0x11, 0x6b, 0x54, 0x61, 0x62, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4c,
	0x65, 0x66, 0x74, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x54, 0x61, 0x62, 0x41, 0x6c, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x10, 0x01, 0x12, 0x16,
	0x0a, 0x12, 0x6b, 0x54, 0x61, 0x62, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x69, 0x67, 0x68, 0x74, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x6b, 0x54, 0x61, 0x62, 0x41, 0x6c,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x10, 0x03,
	0x22, 0x33, 0x0a, 0x0b, 0x54, 0x61, 0x62, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12,
	0x24, 0x0a, 0x04, 0x74, 0x61, 0x62, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x54, 0x53, 0x57, 0x50, 0x2e, 0x54, 0x61, 0x62, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x04, 0x74, 0x61, 0x62, 0x73, 0x22, 0xab, 0x02, 0x0a, 0x12, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x70,
	0x61, 0x63, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x40, 0x0a, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x54, 0x53, 0x57,
	0x50, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67,
	0x4d, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x62, 0x61,
	0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x13, 0x4c,
	0x69, 0x6e, 0x65, 0x53, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x6b, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4c,
	0x69, 0x6e, 0x65, 0x53, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13,
	0x6b, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x61, 0x63,
	0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x45, 0x78, 0x61, 0x63, 0x74, 0x4c,
	0x69, 0x6e, 0x65, 0x53, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13,
	0x6b, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x61, 0x63,
	0x69, 0x6e, 0x67, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x42,
	0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x61, 0x63, 0x69, 0x6e,
	0x67, 0x10, 0x04, 0x22, 0xce, 0x10, 0x0a, 0x1f, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x55, 0x0a, 0x09, 0x61, 0x6c, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x54, 0x53, 0x57,
	0x50, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x28,
	0x0a, 0x10, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x5f, 0x6e, 0x75,
	0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x54, 0x61, 0x62, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x54, 0x61, 0x62, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x61, 0x62,
	0x53, 0x74, 0x6f, 0x70, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x6e, 0x75,
	0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x6c, 0x4e, 0x75,
	0x6c, 0x6c, 0x12, 0x1e, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x04, 0x66, 0x69,
	0x6c, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x68, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x68, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13,
	0x6b, 0x65, 0x65, 0x70, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x67, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6b, 0x65, 0x65, 0x70, 0x4c,
	0x69, 0x6e, 0x65, 0x73, 0x54, 0x6f, 0x67, 0x65, 0x74, 0x68, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e,
	0x6b, 0x65, 0x65, 0x70, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6b, 0x65, 0x65, 0x70, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x65,
	0x78, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x6e,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x6c, 0x65, 0x66, 0x74, 0x49, 0x6e, 0x64,
	0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x70, 0x61, 0x63,
	0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x6c, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x12,
	0x3b, 0x0a, 0x0c, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x4c, 0x69, 0x6e,
	0x65, 0x53, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x0b, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x11,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x70, 0x61, 0x67, 0x65, 0x42, 0x72, 0x65,
	0x61, 0x6b, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x53, 0x0a, 0x07, 0x62, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x54, 0x53, 0x57, 0x50,
	0x2e, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x2e, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x28, 0x0a,
	0x10, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x75, 0x6c,
	0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x75, 0x6c, 0x65, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x2b, 0x0a, 0x0b, 0x72, 0x75, 0x6c, 0x65, 0x5f,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0a, 0x72, 0x75, 0x6c, 0x65, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x57, 0x69,
	0x64, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x49, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61,
	0x62, 0x73, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x74,
	0x61, 0x62, 0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x61, 0x62, 0x73, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x54, 0x61, 0x62,
	0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x61, 0x62, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x77, 0x69, 0x64, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x77, 0x69, 0x64, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x6c,
	0x69, 0x6e, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x5b, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x36, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x6e, 0x75, 0x6c, 0x6c,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x49, 0x64, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x2c, 0x0a, 0x12,
	0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74,
	0x72, 0x6f, 0x6b, 0x65, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x2a, 0x0a, 0x06, 0x73,
	0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53,
	0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x06, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f,
	0x69, 0x6e, 0x5f, 0x74, 0x6f, 0x63, 0x18, 0x21, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x68,
	0x6f, 0x77, 0x49, 0x6e, 0x54, 0x6f, 0x63, 0x12, 0x29, 0x0a, 0x11, 0x74, 0x6f, 0x63, 0x5f, 0x73,
	0x74, 0x79, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x74, 0x6f, 0x63, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x49, 0x64, 0x4e, 0x75,
	0x6c, 0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x6f, 0x63, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x63, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x61, 0x0a, 0x11, 0x77, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x18, 0x6b, 0x57, 0x72,
	0x69, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x74, 0x75, 0x72, 0x61, 0x6c, 0x52, 0x10, 0x77, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x27, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x12,
	0x2d, 0x0a, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x30,
	0x0a, 0x14, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x29, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x66, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x4e, 0x75, 0x6c, 0x6c,
	0x12, 0x37, 0x0a, 0x0f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74,
	0x79, 0x6c, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x66, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x73, 0x68, 0x6f,
	0x77, 0x5f, 0x69, 0x6e, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x73, 0x68, 0x6f, 0x77, 0x49,
	0x6e, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x31,
	0x0a, 0x15, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x6f, 0x63, 0x5f, 0x6e, 0x61,
	0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x73,
	0x68, 0x6f, 0x77, 0x49, 0x6e, 0x54, 0x6f, 0x63, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f,
	0x72, 0x22, 0x5e, 0x0a, 0x11, 0x54, 0x65, 0x78, 0x74, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x41, 0x54, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x30, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x41, 0x54, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x31, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x41, 0x54, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x32, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x41, 0x54, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x33,
	0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x41, 0x54, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x34, 0x10,
	0x04, 0x22, 0x60, 0x0a, 0x13, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x42, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x42, 0x54, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x30, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x42, 0x54, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x31, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x42, 0x54, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x32, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x42, 0x54, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x33, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x42, 0x54, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x34, 0x10, 0x04, 0x22, 0x3f, 0x0a, 0x10, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x53, 0x54, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x30, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x53, 0x54, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x31, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x53, 0x54, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x32, 0x10, 0x02, 0x22, 0x8a, 0x02, 0x0a, 0x15, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x27,
	0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x54, 0x53, 0x53, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x4e, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x54, 0x53, 0x57,
	0x50, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x4e, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x54, 0x53, 0x57,
	0x50, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x61, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x22, 0x82, 0x1b, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x54, 0x53, 0x53, 0x2e, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12,
	0x28, 0x0a, 0x0e, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0d, 0x6f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x0b, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x20,
	0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0a, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x02, 0x52, 0x0b, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x02,
	0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x44, 0x0a, 0x0a, 0x67, 0x65, 0x6f,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x54, 0x53, 0x57, 0x50, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x47, 0x65, 0x6f, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x52, 0x0a, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x44, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x39, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68,
	0x61, 0x64, 0x6f, 0x77, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x2a, 0x0a, 0x06, 0x73,
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53,
	0x44, 0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x06, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x6f, 0x6e, 0x74, 0x5f,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x66, 0x6f, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4e, 0x75, 0x6c, 0x6c, 0x12,
	0x29, 0x0a, 0x0a, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52,
	0x09, 0x66, 0x6f, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x6f,
	0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x66, 0x6f, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x4e, 0x75, 0x6c, 0x6c,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6f, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x61, 0x0a,
	0x11, 0x77, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e,
	0x57, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x3a, 0x18, 0x6b, 0x57, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x52, 0x10,
	0x77, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x25, 0x0a, 0x0e, 0x74, 0x69, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x08, 0x52, 0x0d, 0x74, 0x69, 0x65, 0x72, 0x65, 0x64,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x1a, 0x82, 0x01, 0x0a, 0x0d, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x17, 0x0a, 0x05, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x3a, 0x01, 0x31, 0x52, 0x05, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x0f, 0x62, 0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x3a, 0x01, 0x30, 0x52, 0x0e,
	0x62, 0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x2c,
	0x0a, 0x0f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0d, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x57, 0x69, 0x74, 0x68, 0x54, 0x65, 0x78, 0x74, 0x1a, 0x8c, 0x01, 0x0a,
	0x0a, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6e,
	0x75, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x35, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x3c, 0x0a, 0x09, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x6b, 0x4e, 0x6f, 0x6e,
	0x65, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x6b, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x10, 0x01, 0x12,
	0x0b, 0x0a, 0x07, 0x6b, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07,
	0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x10, 0x03, 0x22, 0xfa, 0x11, 0x0a, 0x0a, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x6b, 0x4e, 0x75, 0x6d,
	0x65, 0x72, 0x69, 0x63, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x17, 0x0a,
	0x13, 0x6b, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x4e, 0x75, 0x6d, 0x65, 0x72,
	0x69, 0x63, 0x52, 0x69, 0x67, 0x68, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x10, 0x02, 0x12, 0x16,
	0x0a, 0x12, 0x6b, 0x52, 0x6f, 0x6d, 0x61, 0x6e, 0x55, 0x70, 0x70, 0x65, 0x72, 0x44, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x52, 0x6f, 0x6d, 0x61, 0x6e,
	0x55, 0x70, 0x70, 0x65, 0x72, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x52, 0x6f, 0x6d, 0x61, 0x6e, 0x55, 0x70, 0x70, 0x65,
	0x72, 0x52, 0x69, 0x67, 0x68, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x10, 0x05, 0x12, 0x16, 0x0a,
	0x12, 0x6b, 0x52, 0x6f, 0x6d, 0x61, 0x6e, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x44, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x52, 0x6f, 0x6d, 0x61, 0x6e, 0x4c,
	0x6f, 0x77, 0x65, 0x72, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x10,
	0x07, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x52, 0x6f, 0x6d, 0x61, 0x6e, 0x4c, 0x6f, 0x77, 0x65, 0x72,
	0x52, 0x69, 0x67, 0x68, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12,
	0x6b, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x55, 0x70, 0x70, 0x65, 0x72, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x10, 0x09, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x55, 0x70,
	0x70, 0x65, 0x72, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x10, 0x0a,
	0x12, 0x19, 0x0a, 0x15, 0x6b, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x55, 0x70, 0x70, 0x65, 0x72, 0x52,
	0x69, 0x67, 0x68, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x10, 0x0b, 0x12, 0x16, 0x0a, 0x12, 0x6b,
	0x41, 0x6c, 0x70, 0x68, 0x61, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x10, 0x0c, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x4c, 0x6f, 0x77,
	0x65, 0x72, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x10, 0x0d, 0x12,
	0x19, 0x0a, 0x15, 0x6b, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x69,
	0x67, 0x68, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x10, 0x0e, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x49,
	0x64, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x4a, 0x61, 0x70, 0x61, 0x6e, 0x65,
	0x73, 0x65, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x10, 0x0f, 0x12,
	0x27, 0x0a, 0x23, 0x6b, 0x49, 0x64, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x4a,
	0x61, 0x70, 0x61, 0x6e, 0x65, 0x73, 0x65, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x10, 0x10, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x49, 0x64, 0x65,
	0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x4a, 0x61, 0x70, 0x61, 0x6e, 0x65, 0x73, 0x65,
	0x52, 0x69, 0x67, 0x68, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x10, 0x11,
	0x12, 0x18, 0x0a, 0x14, 0x6b, 0x48, 0x69, 0x72, 0x61, 0x67, 0x61, 0x6e, 0x61, 0x44, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x10, 0x12, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x48,
	0x69, 0x72, 0x61, 0x67, 0x61, 0x6e, 0x61, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x10, 0x13, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x48, 0x69, 0x72,
	0x61, 0x67, 0x61, 0x6e, 0x61, 0x52, 0x69, 0x67, 0x68, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x4b,
	0x69, 0x6e, 0x64, 0x10, 0x14, 0x12, 0x18, 0x0a, 0x14, 0x6b, 0x4b, 0x61, 0x74, 0x61, 0x6b, 0x61,
	0x6e, 0x61, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x10, 0x15, 0x12,
	0x1c, 0x0a, 0x18, 0x6b, 0x4b, 0x61, 0x74, 0x61, 0x6b, 0x61, 0x6e, 0x61, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x10, 0x16, 0x12, 0x1b, 0x0a,
	0x17, 0x6b, 0x4b, 0x61, 0x74, 0x61, 0x6b, 0x61, 0x6e, 0x61, 0x52, 0x69, 0x67, 0x68, 0x74, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x10, 0x17, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x48,
	0x69, 0x72, 0x61, 0x67, 0x61, 0x6e, 0x61, 0x49, 0x72, 0x6f, 0x68, 0x61, 0x44, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x10, 0x18, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x48, 0x69,
	0x72, 0x61, 0x67, 0x61, 0x6e, 0x61, 0x49, 0x72, 0x6f, 0x68, 0x61, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x10, 0x19, 0x12, 0x20, 0x0a, 0x1c,
	0x6b, 0x48, 0x69, 0x72, 0x61, 0x67, 0x61, 0x6e, 0x61, 0x49, 0x72, 0x6f, 0x68, 0x61, 0x52, 0x69,
	0x67, 0x68, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x10, 0x1a, 0x12, 0x1d,
	0x0a, 0x19, 0x6b, 0x4b, 0x61, 0x74, 0x61, 0x6b, 0x61, 0x6e, 0x61, 0x49, 0x72, 0x6f, 0x68, 0x61,
	0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x10, 0x1b, 0x12, 0x21, 0x0a,
	0x1d, 0x6b, 0x4b, 0x61, 0x74, 0x61, 0x6b, 0x61, 0x6e, 0x61, 0x49, 0x72, 0x6f, 0x68, 0x61, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x10, 0x1c,
	0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x4b, 0x61, 0x74, 0x61, 0x6b, 0x61, 0x6e, 0x61, 0x49, 0x72, 0x6f,
	0x68, 0x61, 0x52, 0x69, 0x67, 0x68, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x4b, 0x69, 0x6e, 0x64,
	0x10, 0x1d, 0x12, 0x2c, 0x0a, 0x28, 0x6b, 0x49, 0x64, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x69, 0x63, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x68, 0x69, 0x6e,
	0x65, 0x73, 0x65, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x10, 0x1e,
	0x12, 0x30, 0x0a, 0x2c, 0x6b, 0x49, 0x64, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63,
	0x53, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x68, 0x69, 0x6e, 0x65, 0x73,
	0x65, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x4b, 0x69, 0x6e, 0x64,
	0x10, 0x1f, 0x12, 0x2f, 0x0a, 0x2b, 0x6b, 0x49, 0x64, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x69, 0x63, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x68, 0x69, 0x6e,
	0x65, 0x73, 0x65, 0x52, 0x69, 0x67, 0x68, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x4b, 0x69, 0x6e,
	0x64, 0x10, 0x20, 0x12, 0x2d, 0x0a, 0x29, 0x6b, 0x49, 0x64, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x69, 0x63, 0x54, 0x72, 0x61, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x68,
	0x69, 0x6e, 0x65, 0x73, 0x65, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x4b, 0x69, 0x6e, 0x64,
	0x10, 0x21, 0x12, 0x31, 0x0a, 0x2d, 0x6b, 0x49, 0x64, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x69, 0x63, 0x54, 0x72, 0x61, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x68, 0x69,
	0x6e, 0x65, 0x73, 0x65, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x4b,
	0x69, 0x6e, 0x64, 0x10, 0x22, 0x12, 0x30, 0x0a, 0x2c, 0x6b, 0x49, 0x64, 0x65, 0x6f, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x69, 0x63, 0x54, 0x72, 0x61, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x43, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x65, 0x52, 0x69, 0x67, 0x68, 0x74, 0x50, 0x61, 0x72, 0x65,
	0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x10, 0x23, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x49, 0x64, 0x65, 0x6f,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x4a, 0x61, 0x70,
	0x61, 0x6e, 0x65, 0x73, 0x65, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x4b, 0x69, 0x6e, 0x64,
	0x10, 0x24, 0x12, 0x2d, 0x0a, 0x29, 0x6b, 0x49, 0x64, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x69, 0x63, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x4a, 0x61, 0x70, 0x61, 0x6e, 0x65, 0x73, 0x65,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x10,
	0x25, 0x12, 0x2c, 0x0a, 0x28, 0x6b, 0x49, 0x64, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69,
	0x63, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x4a, 0x61, 0x70, 0x61, 0x6e, 0x65, 0x73, 0x65, 0x52,
	0x69, 0x67, 0x68, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x10, 0x26, 0x12,
	0x32, 0x0a, 0x2e, 0x6b, 0x49, 0x64, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43,
	0x68, 0x69, 0x6e, 0x65, 0x73, 0x65, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x4b, 0x69, 0x6e,
	0x64, 0x10, 0x27, 0x12, 0x36, 0x0a, 0x32, 0x6b, 0x49, 0x64, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x69, 0x63, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x43, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x65, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x50, 0x61, 0x72, 0x65, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x10, 0x28, 0x12, 0x35, 0x0a, 0x31, 0x6b,
	0x49, 0x64, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x68, 0x69, 0x6e, 0x65,
	0x73, 0x65, 0x52, 0x69, 0x67, 0x68, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x4b, 0x69, 0x6e, 0x64,
	0x10, 0x29, 0x12, 0x33, 0x0a, 0x2f, 0x6b, 0x49, 0x64, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x69, 0x63, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x43, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x65, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x10, 0x2a, 0x12, 0x37, 0x0a, 0x33, 0x6b, 0x49, 0x64, 0x65, 0x6f,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x54, 0x72, 0x61,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x65, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x10, 0x2b,
	0x12, 0x36, 0x0a, 0x32, 0x6b, 0x49, 0x64, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x43, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x65, 0x52, 0x69, 0x67, 0x68, 0x74, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x10, 0x2c, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x4b, 0x6f, 0x72,
	0x65, 0x61, 0x6e, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x65, 0x74, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x10, 0x2d, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x4b, 0x6f, 0x72,
	0x65, 0x61, 0x6e, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x65, 0x74, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x10, 0x2e, 0x12, 0x21, 0x0a, 0x1d,
	0x6b, 0x4b, 0x6f, 0x72, 0x65, 0x61, 0x6e, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x65, 0x74, 0x52,
	0x69, 0x67, 0x68, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x10, 0x2f, 0x12,
	0x16, 0x0a, 0x12, 0x6b, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x4b, 0x69, 0x6e, 0x64, 0x10, 0x30, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x41, 0x72, 0x61, 0x62,
	0x69, 0x61, 0x6e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x10, 0x31, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x41, 0x72, 0x61, 0x62,
	0x69, 0x61, 0x6e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x50, 0x61, 0x72, 0x65, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x10, 0x32, 0x12, 0x21, 0x0a, 0x1d, 0x6b,
	0x41, 0x72, 0x61, 0x62, 0x69, 0x61, 0x6e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x69,
	0x67, 0x68, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x10, 0x33, 0x12, 0x1c,
	0x0a, 0x18, 0x6b, 0x41, 0x72, 0x61, 0x62, 0x69, 0x61, 0x6e, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x10, 0x34, 0x12, 0x20, 0x0a, 0x1c,
	0x6b, 0x41, 0x72, 0x61, 0x62, 0x69, 0x61, 0x6e, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x10, 0x35, 0x12, 0x1f,
	0x0a, 0x1b, 0x6b, 0x41, 0x72, 0x61, 0x62, 0x69, 0x61, 0x6e, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52,
	0x69, 0x67, 0x68, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x10, 0x36, 0x12,
	0x1c, 0x0a, 0x18, 0x6b, 0x41, 0x72, 0x61, 0x62, 0x69, 0x61, 0x6e, 0x41, 0x62, 0x6a, 0x61, 0x64,
	0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x10, 0x37, 0x12, 0x20, 0x0a,
	0x1c, 0x6b, 0x41, 0x72, 0x61, 0x62, 0x69, 0x61, 0x6e, 0x41, 0x62, 0x6a, 0x61, 0x64, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x10, 0x38, 0x12,
	0x1f, 0x0a, 0x1b, 0x6b, 0x41, 0x72, 0x61, 0x62, 0x69, 0x61, 0x6e, 0x41, 0x62, 0x6a, 0x61, 0x64,
	0x52, 0x69, 0x67, 0x68, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x10, 0x39,
	0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x48, 0x65, 0x62, 0x72, 0x65, 0x77, 0x41, 0x6c, 0x70, 0x68, 0x61,
	0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x10, 0x3a, 0x12, 0x1f, 0x0a,
	0x1b, 0x6b, 0x48, 0x65, 0x62, 0x72, 0x65, 0x77, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x10, 0x3b, 0x12, 0x1e,
	0x0a, 0x1a, 0x6b, 0x48, 0x65, 0x62, 0x72, 0x65, 0x77, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x69,
	0x67, 0x68, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x10, 0x3c, 0x12, 0x1f,
	0x0a, 0x1b, 0x6b, 0x48, 0x65, 0x62, 0x72, 0x65, 0x77, 0x42, 0x69, 0x62, 0x6c, 0x69, 0x63, 0x61,
	0x6c, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x4b, 0x69, 0x6e, 0x64, 0x10, 0x3d, 0x12,
	0x1e, 0x0a, 0x1a, 0x6b, 0x48, 0x65, 0x62, 0x72, 0x65, 0x77, 0x42, 0x69, 0x62, 0x6c, 0x69, 0x63,
	0x61, 0x6c, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x10, 0x3e, 0x12,
	0x22, 0x0a, 0x1e, 0x6b, 0x48, 0x65, 0x62, 0x72, 0x65, 0x77, 0x42, 0x69, 0x62, 0x6c, 0x69, 0x63,
	0x61, 0x6c, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x4b, 0x69, 0x6e,
	0x64, 0x10, 0x3f, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x48, 0x65, 0x62, 0x72, 0x65, 0x77, 0x42, 0x69,
	0x62, 0x6c, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x69, 0x67, 0x68, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x4b, 0x69, 0x6e, 0x64, 0x10, 0x40, 0x22, 0xad, 0x01, 0x0a, 0x16, 0x54, 0x65, 0x78, 0x74, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x37,
	0x0a, 0x0f, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x6c, 0x69, 0x73,
	0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x22, 0xbe, 0x03, 0x0a, 0x0e, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x4d, 0x0a, 0x0d, 0x65, 0x71, 0x75,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0c, 0x65, 0x71, 0x75, 0x61,
	0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x57, 0x0a, 0x11, 0x6e, 0x6f, 0x6e, 0x5f,
	0x65, 0x71, 0x75, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x4e, 0x6f, 0x6e, 0x45, 0x71, 0x75,
	0x61, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x0f, 0x6e, 0x6f, 0x6e, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x73, 0x1a, 0x3d, 0x0a, 0x13, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x67, 0x61, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x67, 0x61, 0x70,
	0x1a, 0xc4, 0x01, 0x0a, 0x16, 0x4e, 0x6f, 0x6e, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x02, 0x52, 0x05, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x12, 0x59, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x4e, 0x6f, 0x6e, 0x45, 0x71,
	0x75, 0x61, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x2e, 0x47, 0x61, 0x70, 0x57, 0x69, 0x64, 0x74, 0x68, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x09, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x1a, 0x39, 0x0a, 0x0f,
	0x47, 0x61, 0x70, 0x57, 0x69, 0x64, 0x74, 0x68, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x67, 0x61, 0x70, 0x18, 0x01, 0x20, 0x02, 0x28, 0x02, 0x52, 0x03, 0x67, 0x61,
	0x70, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x02, 0x28, 0x02,
	0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x22, 0x64, 0x0a, 0x0e, 0x50, 0x61, 0x64, 0x64, 0x69,
	0x6e, 0x67, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x65, 0x66,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x74, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x74, 0x6f, 0x70, 0x12,
	0x14, 0x0a, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x22, 0xf1, 0x05,
	0x0a, 0x1c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x12, 0x22,
	0x0a, 0x0d, 0x73, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x54, 0x6f, 0x46,
	0x69, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x69, 0x6e, 0x5f, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x6d, 0x69, 0x6e, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f,
	0x6e, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x65, 0x74, 0x12, 0x67, 0x0a, 0x12, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x11, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x5f, 0x6e, 0x75,
	0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x2e, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x07, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x73,
	0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x2e, 0x0a, 0x07, 0x6d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x54, 0x53, 0x57, 0x50,
	0x2e, 0x50, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x07, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x64, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x2e, 0x0a, 0x07, 0x70,
	0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x54,
	0x53, 0x57, 0x50, 0x2e, 0x50, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x07, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x61, 0x0a, 0x11, 0x77,
	0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x57, 0x72,
	0x69, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x3a, 0x18, 0x6b, 0x57, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x52, 0x10, 0x77, 0x72,
	0x69, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x71,
	0x0a, 0x15, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x54, 0x6f, 0x70, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x6b,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x41, 0x6c, 0x69, 0x67,
	0x6e, 0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x4a, 0x75, 0x73, 0x74, 0x69, 0x66, 0x79, 0x10,
	0x03, 0x22, 0xb8, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x54, 0x53, 0x53, 0x2e, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0d, 0x6f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4f, 0x0a, 0x11, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x10, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0xbf, 0x05, 0x0a,
	0x1f, 0x54, 0x53, 0x57, 0x50, 0x53, 0x68, 0x61, 0x70, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x12, 0x22, 0x0a, 0x0d, 0x73, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x69,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x54,
	0x6f, 0x46, 0x69, 0x74, 0x12, 0x6a, 0x0a, 0x12, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x5f, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3b, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x53, 0x68, 0x61, 0x70,
	0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x5f, 0x6e, 0x75, 0x6c, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x4e,
	0x75, 0x6c, 0x6c, 0x12, 0x2e, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6e,
	0x75, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x70, 0x61, 0x64, 0x64, 0x69,
	0x6e, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x2e, 0x0a, 0x07, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x50,
	0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x07, 0x70,
	0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x39, 0x0a, 0x19, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x54, 0x65, 0x78, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x37, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x61,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x65,
	0x78, 0x74, 0x5f, 0x34, 0x30, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x34, 0x30, 0x22, 0x71, 0x0a, 0x15, 0x56,
	0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x41, 0x6c,
	0x69, 0x67, 0x6e, 0x54, 0x6f, 0x70, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x10, 0x01, 0x12,
	0x15, 0x0a, 0x11, 0x6b, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x42, 0x6f,
	0x74, 0x74, 0x6f, 0x6d, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x41, 0x6c, 0x69, 0x67, 0x6e, 0x4a, 0x75, 0x73, 0x74, 0x69, 0x66, 0x79, 0x10, 0x03, 0x22, 0xc1,
	0x01, 0x0a, 0x15, 0x54, 0x53, 0x57, 0x50, 0x53, 0x68, 0x61, 0x70, 0x65, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x68,
	0x61, 0x70, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01,
	0x30, 0x52, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x50, 0x0a, 0x10, 0x73, 0x68, 0x61, 0x70, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x54, 0x53, 0x57,
	0x50, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x53, 0x68, 0x61, 0x70, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x0f, 0x73, 0x68, 0x61, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x22, 0x94, 0x05, 0x0a, 0x17, 0x54, 0x53, 0x57, 0x50, 0x54, 0x68, 0x65, 0x6d, 0x65,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x3c,
	0x0a, 0x12, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x6c, 0x69, 0x73, 0x74,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x12,
	0x74, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x74, 0x65, 0x78, 0x74, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x12, 0x4d, 0x0a, 0x1b, 0x69, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x18, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x12, 0x45, 0x0a, 0x17, 0x74, 0x6f, 0x63,
	0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x14, 0x74, 0x6f, 0x63, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73,
	0x12, 0x40, 0x0a, 0x14, 0x74, 0x6f, 0x63, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x12,
	0x74, 0x6f, 0x63, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x73, 0x12, 0x46, 0x0a, 0x17, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x15, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x17, 0x70, 0x61,
	0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x15, 0x70, 0x61, 0x72,
	0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x73, 0x12, 0x42, 0x0a, 0x15, 0x64, 0x72, 0x6f, 0x70, 0x63, 0x61, 0x70, 0x5f, 0x73, 0x74,
	0x79, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x13, 0x64, 0x72, 0x6f, 0x70, 0x63, 0x61, 0x70, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x32, 0x51, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x2e, 0x54, 0x53, 0x53, 0x2e, 0x54, 0x53, 0x53, 0x54, 0x68, 0x65,
	0x6d, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x54, 0x68, 0x65, 0x6d, 0x65,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x69, 0x0a, 0x1c, 0x54, 0x65, 0x78,
	0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x74,
	0x65, 0x6d, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0xbb, 0x01, 0x0a, 0x1e, 0x54, 0x4f, 0x43, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x6e, 0x75, 0x6c,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x3a, 0x0a, 0x11,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x68, 0x6f, 0x77,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x73, 0x68, 0x6f, 0x77, 0x50, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x22, 0x96, 0x01, 0x0a, 0x14, 0x54, 0x4f, 0x43, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x57,
	0x50, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x4b,
	0x0a, 0x0e, 0x74, 0x6f, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x54, 0x4f,
	0x43, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0d, 0x74, 0x6f,
	0x63, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0xaf, 0x02, 0x0a, 0x12,
	0x54, 0x4f, 0x43, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x6f, 0x63, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x74, 0x6f, 0x63, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x65, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x54, 0x53,
	0x57, 0x50, 0x2e, 0x54, 0x4f, 0x43, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x54, 0x4f, 0x43, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x9f, 0x01, 0x0a, 0x0c,
	0x54, 0x4f, 0x43, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x0f,
	0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x0f, 0x74, 0x6f, 0x63, 0x5f, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0d,
	0x74, 0x6f, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x1e, 0x0a,
	0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x6f, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x54, 0x6f, 0x63, 0x22, 0xa9, 0x03,
	0x0a, 0x17, 0x54, 0x4f, 0x43, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x72,
	0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0d, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x33, 0x0a, 0x0d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x5f, 0x73, 0x74,
	0x79, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x65, 0x64, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x12, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x65, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x10, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x50, 0x61, 0x72,
	0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xc5, 0x1d, 0x0a, 0x0f, 0x55, 0x6e,
	0x64, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a,
	0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x55, 0x6e, 0x64, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x4d, 0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x55, 0x6e,
	0x64, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66,
	0x6c, 0x61, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x5c,
	0x0a, 0x12, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x33, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x33, 0x1a, 0x89, 0x01, 0x0a,
	0x0f, 0x54, 0x65, 0x78, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d,
	0x52, 0x0c, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x28,
	0x0a, 0x10, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x54, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x1a, 0x73, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x72,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68, 0x61, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x1a, 0x65, 0x0a,
	0x1b, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68, 0x61, 0x72, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x1a, 0xa3, 0x01, 0x0a, 0x19, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x68, 0x61, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x26, 0x0a, 0x06, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0xae, 0x01, 0x0a, 0x1a, 0x49,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0d, 0x52, 0x0e, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x68, 0x0a, 0x14, 0x49,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x4e, 0x69, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x27, 0x0a, 0x0f,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x7d, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x72, 0x44, 0x65, 0x6c,
	0x74, 0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x68, 0x61, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0d, 0x52, 0x09, 0x63, 0x68, 0x61, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x27, 0x0a, 0x0f,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x5f, 0x64, 0x65,
	0x6c, 0x74, 0x61, 0x18, 0x03, 0x20, 0x02, 0x28, 0x11, 0x52, 0x09, 0x63, 0x68, 0x61, 0x72, 0x44,
	0x65, 0x6c, 0x74, 0x61, 0x1a, 0x90, 0x01, 0x0a, 0x18, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x44, 0x61, 0x74, 0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d,
	0x52, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x72,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68,
	0x61, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0x55, 0x0a, 0x15, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x44, 0x4f, 0x4c, 0x43, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x26, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x1a, 0x5b,
	0x0a, 0x11, 0x43, 0x54, 0x44, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x1a, 0xbb, 0x07, 0x0a, 0x10,
	0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x32, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x55, 0x6e, 0x64, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x6e, 0x64, 0x6f, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x42, 0x0a, 0x07, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x54, 0x53,
	0x57, 0x50, 0x2e, 0x55, 0x6e, 0x64, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x12, 0x39,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x54,
	0x53, 0x57, 0x50, 0x2e, 0x55, 0x6e, 0x64, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x49, 0x0a, 0x0a, 0x63, 0x68, 0x61,
	0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x54, 0x53, 0x57, 0x50, 0x2e, 0x55, 0x6e, 0x64, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x68, 0x61, 0x72, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x5f, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f,
	0x63, 0x68, 0x61, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x55, 0x6e, 0x64, 0x6f, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43,
	0x68, 0x61, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x58, 0x0a, 0x0f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x55, 0x6e, 0x64, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0e, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x49, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x6e, 0x69, 0x6c, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x55, 0x6e, 0x64, 0x6f, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x4e, 0x69, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4e, 0x69, 0x6c, 0x12, 0x5b, 0x0a, 0x10, 0x69, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x55, 0x6e, 0x64, 0x6f,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x49, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x5f,
	0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x54, 0x53,
	0x57, 0x50, 0x2e, 0x55, 0x6e, 0x64, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x68, 0x61, 0x72, 0x44, 0x65, 0x6c,
	0x74, 0x61, 0x12, 0x55, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x54, 0x53, 0x57,
	0x50, 0x2e, 0x55, 0x6e, 0x64, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x44, 0x61, 0x74, 0x61, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x61,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4c, 0x0a, 0x0b, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x64, 0x6f, 0x6c, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x55, 0x6e, 0x64, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x4f, 0x4c, 0x43,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x44, 0x6f, 0x6c, 0x63, 0x12, 0x40, 0x0a, 0x07, 0x63, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e,
	0x55, 0x6e, 0x64, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x43, 0x54, 0x44, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x06, 0x63, 0x74, 0x44, 0x61, 0x74, 0x65, 0x1a, 0xf7, 0x03, 0x0a, 0x0d, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x54, 0x53, 0x57, 0x50,
	0x2e, 0x55, 0x6e, 0x64, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x20, 0x0a,
	0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x1d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x61, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x46, 0x6c, 0x61, 0x67, 0x73,
	0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x61, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x75, 0x75, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x2f, 0x0a, 0x0b, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x75, 0x6e, 0x64, 0x6f, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x1a, 0xd5, 0x02, 0x0a, 0x12, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x39, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e,
	0x55, 0x6e, 0x64, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x69, 0x6e, 0x64, 0x52,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x4c, 0x0a, 0x0f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x55, 0x6e, 0x64, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x5b, 0x0a, 0x17, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x55, 0x6e, 0x64, 0x6f,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x69, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x59, 0x0a, 0x16, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x55, 0x6e, 0x64, 0x6f, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xe6, 0x01, 0x0a, 0x08,
	0x55, 0x6e, 0x64, 0x6f, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x50, 0x4c,
	0x41, 0x43, 0x45, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e,
	0x53, 0x45, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x10, 0x02,
	0x12, 0x14, 0x0a, 0x10, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49,
	0x42, 0x55, 0x54, 0x45, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x44, 0x4a, 0x55, 0x53, 0x54,
	0x5f, 0x43, 0x48, 0x41, 0x52, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x45, 0x53, 0x10, 0x04, 0x12,
	0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x5f, 0x41, 0x44, 0x4a, 0x55, 0x53, 0x54, 0x5f,
	0x43, 0x48, 0x41, 0x52, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x45, 0x53, 0x10, 0x05, 0x12, 0x16,
	0x0a, 0x12, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x5f, 0x49,
	0x4e, 0x44, 0x45, 0x58, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43,
	0x45, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x07, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45,
	0x50, 0x4c, 0x41, 0x43, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x47, 0x52, 0x41, 0x50, 0x48, 0x5f,
	0x44, 0x41, 0x54, 0x41, 0x10, 0x08, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54,
	0x5f, 0x44, 0x4f, 0x4c, 0x43, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x54, 0x5f, 0x44, 0x41,
	0x54, 0x45, 0x10, 0x0a, 0x22, 0x49, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69,
	0x6e, 0x64, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x44,
	0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x10, 0x02, 0x22,
	0x60, 0x0a, 0x0f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x69,
	0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15,
	0x0a, 0x11, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54,
	0x45, 0x58, 0x54, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x10,
	0x02, 0x22, 0x61, 0x0a, 0x1d, 0x55, 0x6e, 0x64, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x12, 0x40, 0x0a, 0x10, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x54,
	0x53, 0x57, 0x50, 0x2e, 0x55, 0x6e, 0x64, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x75, 0x6e, 0x64, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x80, 0x02, 0x0a, 0x10, 0x53, 0x68, 0x61, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53,
	0x68, 0x61, 0x70, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x12, 0x41, 0x0a, 0x12, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x11, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x66, 0x6c,
	0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x74, 0x65, 0x78, 0x74, 0x46, 0x6c,
	0x6f, 0x77, 0x12, 0x33, 0x0a, 0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x6f, 0x77, 0x6e, 0x65, 0x64,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x74, 0x65,
	0x78, 0x74, 0x5f, 0x62, 0x6f, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x54, 0x65, 0x78, 0x74, 0x42, 0x6f, 0x78, 0x22, 0x7b, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2c, 0x0a,
	0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x54,
	0x53, 0x57, 0x50, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x0f, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x22, 0xb0, 0x02, 0x0a, 0x0e, 0x54, 0x4f, 0x43, 0x49, 0x6e, 0x66, 0x6f,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x53, 0x68,
	0x61, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x0c, 0x74, 0x6f, 0x63, 0x5f, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x74, 0x6f, 0x63,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x34, 0x0a, 0x0e, 0x74, 0x6f, 0x63, 0x5f,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x0c, 0x74, 0x6f, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x38,
	0x0a, 0x12, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x10, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x24, 0x73, 0x79, 0x6e, 0x63,
	0x5f, 0x74, 0x6f, 0x63, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x5f, 0x74, 0x6f, 0x63, 0x5f, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1f, 0x73, 0x79, 0x6e, 0x63, 0x54, 0x6f, 0x63, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x57, 0x69, 0x74, 0x68, 0x54, 0x6f, 0x63, 0x4e, 0x61,
	0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x40, 0x0a, 0x14, 0x54, 0x4f, 0x43, 0x4c, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x48, 0x69, 0x6e, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12,
	0x28, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xcb, 0x02, 0x0a, 0x13, 0x45, 0x71,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x32, 0x41, 0x0a, 0x13, 0x65, 0x71, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x6f, 0x6c, 0x64, 0x12, 0x11, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x65, 0x71, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4f, 0x6c, 0x64, 0x32, 0x72, 0x0a, 0x18, 0x65, 0x71, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x11, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x54, 0x53, 0x57, 0x50,
	0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x16, 0x65, 0x71, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x32, 0x38, 0x0a, 0x0e, 0x65, 0x71, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x12, 0x11, 0x2e, 0x54, 0x53, 0x44,
	0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x18, 0x66, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0d, 0x65, 0x71, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70,
	0x74, 0x68, 0x32, 0x43, 0x0a, 0x14, 0x65, 0x71, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x12, 0x11, 0x2e, 0x54, 0x53, 0x44,
	0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x18, 0x67, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x65, 0x71, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x65, 0x78, 0x74, 0x22, 0xc8, 0x01, 0x0a, 0x18, 0x54, 0x65, 0x78, 0x74,
	0x75, 0x61, 0x6c, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x65,
	0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e,
	0x74, 0x12, 0x37, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x75, 0x61, 0x6c, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e,
	0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x46, 0x0a, 0x04, 0x4b, 0x69,
	0x6e, 0x64, 0x12, 0x13, 0x0a, 0x0f, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x61, 0x67, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x4b, 0x69, 0x6e, 0x64,
	0x50, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x6b,
	0x4b, 0x69, 0x6e, 0x64, 0x46, 0x6f, 0x6f, 0x74, 0x6e, 0x6f, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b,
	0x10, 0x02, 0x22, 0xa0, 0x01, 0x0a, 0x22, 0x54, 0x53, 0x57, 0x50, 0x54, 0x4f, 0x43, 0x50, 0x61,
	0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e,
	0x54, 0x65, 0x78, 0x74, 0x75, 0x61, 0x6c, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x23, 0x0a, 0x0d, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x17, 0x0a, 0x15, 0x55, 0x49, 0x47, 0x72, 0x61, 0x70, 0x68,
	0x69, 0x63, 0x61, 0x6c, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xc5,
	0x01, 0x0a, 0x19, 0x44, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2a, 0x0a, 0x08,
	0x64, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08,
	0x64, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x68, 0x5f, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x68, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x68, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07,
	0x68, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x76, 0x5f, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x76, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x76,
	0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x76,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x4d, 0x0a, 0x14, 0x54, 0x4f, 0x43, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x35,
	0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x54, 0x53, 0x57, 0x50, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x22, 0xc5, 0x01, 0x0a, 0x22, 0x46, 0x6f, 0x6f, 0x74, 0x6e, 0x6f,
	0x74, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x34, 0x0a, 0x05,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x54, 0x53,
	0x57, 0x50, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x75, 0x61, 0x6c, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x12, 0x3b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12,
	0x2c, 0x0a, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0xc5, 0x01,
	0x0a, 0x17, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e,
	0x54, 0x65, 0x78, 0x74, 0x75, 0x61, 0x6c, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12,
	0x23, 0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x50, 0x0a, 0x11, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x74, 0x65,
	0x78, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x75, 0x75, 0x69,
	0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17,
	0x74, 0x65, 0x78, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x55, 0x75, 0x69,
	0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x5f, 0x0a, 0x15, 0x48, 0x79, 0x70, 0x65, 0x72,
	0x6c, 0x69, 0x6e, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x12, 0x2d, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x72, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x72, 0x6c, 0x52, 0x65, 0x66, 0x22, 0x8e, 0x01, 0x0a, 0x1c, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e,
	0x53, 0x6d, 0x61, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x61, 0x67, 0x22, 0x9f, 0x01, 0x0a, 0x20, 0x55, 0x6e,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69,
	0x6e, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x38,
	0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x54, 0x53, 0x57, 0x50, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x53, 0x6d, 0x61, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x72, 0x6c, 0x5f,
	0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x72, 0x6c, 0x52, 0x65,
	0x66, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x72, 0x6c, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x75, 0x72, 0x6c,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x22, 0xec, 0x01, 0x0a, 0x1d,
	0x42, 0x69, 0x62, 0x6c, 0x69, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x53, 0x6d, 0x61, 0x72,
	0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2d, 0x0a,
	0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x54,
	0x53, 0x57, 0x50, 0x2e, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x10,
	0x63, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x63, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x6f, 0x6c, 0x64,
	0x5f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x54,
	0x53, 0x57, 0x50, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x53,
	0x6d, 0x61, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x08, 0x6f, 0x6c, 0x64, 0x53, 0x75, 0x70, 0x65, 0x72, 0x22, 0xb5, 0x02, 0x0a, 0x15, 0x43,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x6e, 0x6f, 0x74, 0x65, 0x5f,
	0x78, 0x6d, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x6e, 0x6f,
	0x74, 0x65, 0x58, 0x6d, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x68, 0x69, 0x64, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x68, 0x69, 0x64, 0x65, 0x59, 0x65, 0x61, 0x72, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x25, 0x0a,
	0x0e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65,
	0x61, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0xe8, 0x01, 0x0a, 0x19, 0x43, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x6d, 0x61, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x12, 0x2d, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12,
	0x39, 0x0a, 0x10, 0x63, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x63, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x09,
	0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x08, 0x6f, 0x6c, 0x64, 0x53, 0x75, 0x70, 0x65, 0x72, 0x22, 0x85, 0x06,
	0x0a, 0x19, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x54, 0x53, 0x57,
	0x50, 0x2e, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x55, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x74, 0x65, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x09, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x55, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73,
	0x74, 0x79, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x54, 0x53, 0x57,
	0x50, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x72, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x53, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x32, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c,
	0x61, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x22, 0x6c, 0x0a, 0x12, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x44,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61,
	0x6e, 0x4e, 0x65, 0x76, 0x65, 0x72, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x41,
	0x75, 0x74, 0x6f, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x6e, 0x63, 0x65,
	0x10, 0x02, 0x22, 0xc0, 0x01, 0x0a, 0x16, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x1f, 0x0a,
	0x1b, 0x6b, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x20,
	0x0a, 0x1c, 0x6b, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x10, 0x01,
	0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x74, 0x65, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x75,
	0x6d, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x4c, 0x6f,
	0x6e, 0x67, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x46,
	0x75, 0x6c, 0x6c, 0x10, 0x04, 0x22, 0x89, 0x01, 0x0a, 0x14, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61,
	0x72, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2d,
	0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x54, 0x53, 0x57, 0x50, 0x2e, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x69, 0x64,
	0x64, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65,
	0x6e, 0x22, 0x7a, 0x0a, 0x19, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x6d, 0x61,
	0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x38,
	0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x54, 0x53, 0x57, 0x50, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x53, 0x6d, 0x61, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x22, 0xb6, 0x03,
	0x0a, 0x16, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x46, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e,
	0x4d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x42,
	0x0a, 0x1d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x46,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x57, 0x68, 0x69, 0x74, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x68, 0x69, 0x74, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x68, 0x69, 0x74, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x22, 0x3d, 0x0a, 0x0d, 0x4d, 0x65, 0x72, 0x67, 0x65,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x4d, 0x65, 0x72,
	0x67, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x6f, 0x10, 0x00, 0x12, 0x16,
	0x0a, 0x12, 0x6b, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x46, 0x72, 0x6f, 0x6d, 0x10, 0x01, 0x22, 0x9d, 0x02, 0x0a, 0x14, 0x54, 0x4f, 0x43, 0x53, 0x6d,
	0x61, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12,
	0x38, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x0b, 0x74, 0x6f, 0x63,
	0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x54, 0x4f, 0x43, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x54, 0x4f, 0x43, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0a, 0x74, 0x6f, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x1a,
	0x84, 0x01, 0x0a, 0x08, 0x54, 0x4f, 0x43, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0d,
	0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x31, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x5e, 0x0a, 0x10, 0x52, 0x75, 0x62, 0x79, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x54, 0x53, 0x57, 0x50,
	0x2e, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x75, 0x62,
	0x79, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x75,
	0x62, 0x79, 0x54, 0x65, 0x78, 0x74, 0x22, 0x48, 0x0a, 0x17, 0x54, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x75, 0x59, 0x6f, 0x6b, 0x6f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x12, 0x2d, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x22, 0x8a, 0x02, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1e, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4b, 0x69, 0x6e, 0x64,
	0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x28, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x3b, 0x0a, 0x1a, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x17, 0x74, 0x65, 0x78, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x55, 0x75, 0x69, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x3f, 0x0a, 0x0a,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x14, 0x6b, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x69,
	0x6f, 0x6e, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4b,
	0x69, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x02, 0x22, 0x7e, 0x0a,
	0x14, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x55, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x1d,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0x52, 0x0a,
	0x19, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x35, 0x0a, 0x0e, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x22, 0x1b, 0x0a, 0x19, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x22, 0xae,
	0x01, 0x0a, 0x0f, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x74, 0x65, 0x78, 0x74, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x09, 0x74, 0x65, 0x78, 0x74, 0x62, 0x6f, 0x78,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x74, 0x65, 0x78, 0x74, 0x62, 0x6f,
	0x78, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22,
	0x8e, 0x01, 0x0a, 0x18, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2d, 0x0a, 0x0a,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x09, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x43, 0x0a, 0x1e, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x1b, 0x6e, 0x65, 0x78, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x22, 0xb6, 0x07, 0x0a, 0x0e, 0x44, 0x72, 0x6f, 0x70, 0x43, 0x61, 0x70, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x12, 0x49, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x20, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x43, 0x61, 0x70,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x43, 0x61, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x3a, 0x13, 0x54, 0x53, 0x57, 0x50, 0x44, 0x72, 0x6f, 0x70, 0x43, 0x61, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x29,
	0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x6c, 0x69, 0x6e, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x33, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x4f, 0x66, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x61, 0x69, 0x73, 0x65, 0x64, 0x5f, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x13, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x52, 0x61, 0x69, 0x73, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x65,
	0x73, 0x12, 0x2d, 0x0a, 0x12, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x6f, 0x75, 0x74, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x64,
	0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x64, 0x65, 0x6e, 0x74,
	0x12, 0x1b, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x01, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a,
	0x12, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x64, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x64, 0x65, 0x70, 0x72, 0x65,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x50, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x07,
	0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x01, 0x30,
	0x52, 0x07, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x61, 0x0a, 0x09, 0x77, 0x72, 0x61,
	0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x54,
	0x53, 0x57, 0x50, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x43, 0x61, 0x70, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x43, 0x61, 0x70, 0x57, 0x72, 0x61, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x3a, 0x1e, 0x54, 0x53, 0x57, 0x50, 0x44, 0x72, 0x6f, 0x70, 0x43, 0x61, 0x70, 0x57,
	0x72, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c,
	0x61, 0x72, 0x52, 0x08, 0x77, 0x72, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x0d,
	0x73, 0x68, 0x61, 0x70, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0c, 0x73, 0x68, 0x61, 0x70,
	0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x64, 0x65, 0x70, 0x72,
	0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x61,
	0x64, 0x69, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x16, 0x64, 0x65, 0x70, 0x72,
	0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x52, 0x61, 0x64, 0x69,
	0x75, 0x73, 0x12, 0x26, 0x0a, 0x0d, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x64,
	0x69, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x01, 0x30, 0x52, 0x0c, 0x63, 0x6f,
	0x72, 0x6e, 0x65, 0x72, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x64, 0x65,
	0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x18,
	0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x01, 0x3a, 0x01, 0x31, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x53,
	0x63, 0x61, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x14, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f,
	0x66, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x31, 0x52, 0x12, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x43,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x22, 0x5a, 0x0a, 0x0b, 0x44, 0x72, 0x6f,
	0x70, 0x43, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x53, 0x57, 0x50,
	0x44, 0x72, 0x6f, 0x70, 0x43, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x54, 0x65, 0x78, 0x74, 0x10,
	0x00, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x53, 0x57, 0x50, 0x44, 0x72, 0x6f, 0x70, 0x43, 0x61, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x53, 0x68, 0x61, 0x70, 0x65, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x54,
	0x53, 0x57, 0x50, 0x44, 0x72, 0x6f, 0x70, 0x43, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x10, 0x02, 0x22, 0x72, 0x0a, 0x0f, 0x44, 0x72, 0x6f, 0x70, 0x43, 0x61, 0x70,
	0x57, 0x72, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x53, 0x57, 0x50,
	0x44, 0x72, 0x6f, 0x70, 0x43, 0x61, 0x70, 0x57, 0x72, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a,
	0x54, 0x53, 0x57, 0x50, 0x44, 0x72, 0x6f, 0x70, 0x43, 0x61, 0x70, 0x57, 0x72, 0x61, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x6f, 0x75, 0x72, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17,
	0x54, 0x53, 0x57, 0x50, 0x44, 0x72, 0x6f, 0x70, 0x43, 0x61, 0x70, 0x57, 0x72, 0x61, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x02, 0x22, 0x90, 0x02, 0x0a, 0x1d, 0x44, 0x72,
	0x6f, 0x70, 0x43, 0x61, 0x70, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x64,
	0x72, 0x6f, 0x70, 0x5f, 0x63, 0x61, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x54, 0x53, 0x57, 0x50, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x43, 0x61, 0x70, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x07, 0x64, 0x72, 0x6f, 0x70, 0x43, 0x61, 0x70, 0x12, 0x45, 0x0a, 0x15,
	0x64, 0x72, 0x6f, 0x70, 0x5f, 0x63, 0x61, 0x70, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x65, 0x5f, 0x73,
	0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53,
	0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x12, 0x64, 0x72, 0x6f, 0x70, 0x43, 0x61, 0x70, 0x53, 0x68, 0x61, 0x70, 0x65, 0x53, 0x74, 0x72,
	0x6f, 0x6b, 0x65, 0x12, 0x36, 0x0a, 0x18, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x63, 0x61, 0x70, 0x5f,
	0x73, 0x68, 0x61, 0x70, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x64, 0x72, 0x6f, 0x70, 0x43, 0x61, 0x70, 0x53, 0x68,
	0x61, 0x70, 0x65, 0x46, 0x69, 0x6c, 0x6c, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x3f, 0x0a, 0x13, 0x64,
	0x72, 0x6f, 0x70, 0x5f, 0x63, 0x61, 0x70, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x65, 0x5f, 0x66, 0x69,
	0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x46,
	0x69, 0x6c, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x10, 0x64, 0x72, 0x6f, 0x70,
	0x43, 0x61, 0x70, 0x53, 0x68, 0x61, 0x70, 0x65, 0x46, 0x69, 0x6c, 0x6c, 0x22, 0x8d, 0x02, 0x0a,
	0x13, 0x44, 0x72, 0x6f, 0x70, 0x43, 0x61, 0x70, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x54, 0x53, 0x53, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x28, 0x0a,
	0x0e, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4e, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x5f,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x72, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x13, 0x64, 0x72, 0x6f, 0x70, 0x5f,
	0x63, 0x61, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x44, 0x72, 0x6f, 0x70,
	0x43, 0x61, 0x70, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x11, 0x64, 0x72, 0x6f, 0x70, 0x43,
	0x61, 0x70, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2a, 0xf4, 0x01, 0x0a,
	0x0d, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x14, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x10, 0x03, 0x12, 0x20, 0x0a,
	0x1c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43,
	0x6f, 0x70, 0x79, 0x50, 0x61, 0x73, 0x74, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x10, 0x04, 0x12,
	0x1a, 0x0a, 0x16, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x32, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x6d, 0x61,
	0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x56, 0x69, 0x73, 0x75, 0x61,
	0x6c, 0x10, 0x07, 0x2a, 0x86, 0x01, 0x0a, 0x16, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x49, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x21,
	0x0a, 0x1d, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x5f, 0x4e, 0x6f, 0x47, 0x72, 0x6f, 0x77, 0x10,
	0x00, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x5f, 0x47, 0x72, 0x6f, 0x77,
	0x4c, 0x65, 0x66, 0x74, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x49,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x5f, 0x47, 0x72, 0x6f, 0x77, 0x52, 0x69, 0x67, 0x68, 0x74, 0x10, 0x02, 0x2a, 0x3f, 0x0a, 0x0d,
	0x43, 0x61, 0x72, 0x65, 0x74, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x17, 0x0a,
	0x13, 0x43, 0x61, 0x72, 0x65, 0x74, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x61, 0x72, 0x65, 0x74, 0x41,
	0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x45, 0x6e, 0x64, 0x10, 0x01, 0x2a, 0x81, 0x01,
	0x0a, 0x14, 0x57, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x18, 0x6b, 0x57, 0x72, 0x69, 0x74, 0x69,
	0x6e, 0x67, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x74, 0x75, 0x72,
	0x61, 0x6c, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x20, 0x0a,
	0x1c, 0x6b, 0x57, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x65, 0x66, 0x74, 0x54, 0x6f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x10, 0x00, 0x12,
	0x20, 0x0a, 0x1c, 0x6b, 0x57, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x69, 0x67, 0x68, 0x74, 0x54, 0x6f, 0x4c, 0x65, 0x66, 0x74, 0x10,
	0x01, 0x3a, 0x50, 0x0a, 0x07, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x2e, 0x54,
	0x53, 0x53, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x18, 0x64,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x50, 0x61, 0x64, 0x64,
	0x69, 0x6e, 0x67, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x07, 0x70, 0x61, 0x64, 0x64,
	0x69, 0x6e, 0x67, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x2f, 0x6b, 0x70, 0x62,
}

var (
	file_TSWPArchives_proto_rawDescOnce sync.Once
	file_TSWPArchives_proto_rawDescData = file_TSWPArchives_proto_rawDesc
)

func file_TSWPArchives_proto_rawDescGZIP() []byte {
	file_TSWPArchives_proto_rawDescOnce.Do(func() {
		file_TSWPArchives_proto_rawDescData = protoimpl.X.CompressGZIP(file_TSWPArchives_proto_rawDescData)
	})
	return file_TSWPArchives_proto_rawDescData
}

var file_TSWPArchives_proto_enumTypes = make([]protoimpl.EnumInfo, 29)
var file_TSWPArchives_proto_msgTypes = make([]protoimpl.MessageInfo, 92)
var file_TSWPArchives_proto_goTypes = []interface{}{
	(SelectionType)(0),                                               // 0: TSWP.SelectionType
	(StyleInsertionBehavior)(0),                                      // 1: TSWP.StyleInsertionBehavior
	(CaretAffinity)(0),                                               // 2: TSWP.CaretAffinity
	(WritingDirectionType)(0),                                        // 3: TSWP.WritingDirectionType
	(StorageArchive_KindType)(0),                                     // 4: TSWP.StorageArchive.KindType
	(CharacterStylePropertiesArchive_CapitalizationType)(0),          // 5: TSWP.CharacterStylePropertiesArchive.CapitalizationType
	(CharacterStylePropertiesArchive_UnderlineType)(0),               // 6: TSWP.CharacterStylePropertiesArchive.UnderlineType
	(CharacterStylePropertiesArchive_LigaturesType)(0),               // 7: TSWP.CharacterStylePropertiesArchive.LigaturesType
	(CharacterStylePropertiesArchive_StrikethruType)(0),              // 8: TSWP.CharacterStylePropertiesArchive.StrikethruType
	(CharacterStylePropertiesArchive_SuperscriptType)(0),             // 9: TSWP.CharacterStylePropertiesArchive.SuperscriptType
	(TabArchive_TabAlignmentType)(0),                                 // 10: TSWP.TabArchive.TabAlignmentType
	(LineSpacingArchive_LineSpacingModeType)(0),                      // 11: TSWP.LineSpacingArchive.LineSpacingModeType
	(ParagraphStylePropertiesArchive_TextAlignmentType)(0),           // 12: TSWP.ParagraphStylePropertiesArchive.TextAlignmentType
	(ParagraphStylePropertiesArchive_ParagraphBorderType)(0),         // 13: TSWP.ParagraphStylePropertiesArchive.ParagraphBorderType
	(ParagraphStylePropertiesArchive_OutlineStyleType)(0),            // 14: TSWP.ParagraphStylePropertiesArchive.OutlineStyleType
	(ListStyleArchive_LabelType)(0),                                  // 15: TSWP.ListStyleArchive.LabelType
	(ListStyleArchive_NumberType)(0),                                 // 16: TSWP.ListStyleArchive.NumberType
	(ColumnStylePropertiesArchive_VerticalAlignmentType)(0),          // 17: TSWP.ColumnStylePropertiesArchive.VerticalAlignmentType
	(TSWPShapeStylePropertiesArchive_VerticalAlignmentType)(0),       // 18: TSWP.TSWPShapeStylePropertiesArchive.VerticalAlignmentType
	(UndoTransaction_UndoKind)(0),                                    // 19: TSWP.UndoTransaction.UndoKind
	(UndoTransaction_ActionKind)(0),                                  // 20: TSWP.UndoTransaction.ActionKind
	(UndoTransaction_ActionGroupKind)(0),                             // 21: TSWP.UndoTransaction.ActionGroupKind
	(TextualAttachmentArchive_Kind)(0),                               // 22: TSWP.TextualAttachmentArchive.Kind
	(DateTimeSmartFieldArchive_DateTimeUpdatePlan)(0),                // 23: TSWP.DateTimeSmartFieldArchive.DateTimeUpdatePlan
	(DateTimeSmartFieldArchive_DateTimeFormatterStyle)(0),            // 24: TSWP.DateTimeSmartFieldArchive.DateTimeFormatterStyle
	(MergeSmartFieldArchive_MergeCategory)(0),                        // 25: TSWP.MergeSmartFieldArchive.MergeCategory
	(ChangeArchive_ChangeKind)(0),                                    // 26: TSWP.ChangeArchive.ChangeKind
	(DropCapArchive_DropCapType)(0),                                  // 27: TSWP.DropCapArchive.DropCapType
	(DropCapArchive_DropCapWrapType)(0),                              // 28: TSWP.DropCapArchive.DropCapWrapType
	(*TSWPSelectionArchive)(nil),                                     // 29: TSWP.TSWPSelectionArchive
	(*ObjectAttributeTable)(nil),                                     // 30: TSWP.ObjectAttributeTable
	(*StringAttributeTable)(nil),                                     // 31: TSWP.StringAttributeTable
	(*ParaDataAttributeTable)(nil),                                   // 32: TSWP.ParaDataAttributeTable
	(*OverlappingFieldAttributeTable)(nil),                           // 33: TSWP.OverlappingFieldAttributeTable
	(*StorageArchive)(nil),                                           // 34: TSWP.StorageArchive
	(*HighlightArchive)(nil),                                         // 35: TSWP.HighlightArchive
	(*TSWPPencilAnnotationArchive)(nil),                              // 36: TSWP.TSWPPencilAnnotationArchive
	(*FontFeatureArchive)(nil),                                       // 37: TSWP.FontFeatureArchive
	(*CharacterStylePropertiesArchive)(nil),                          // 38: TSWP.CharacterStylePropertiesArchive
	(*CharacterStyleArchive)(nil),                                    // 39: TSWP.CharacterStyleArchive
	(*TabArchive)(nil),                                               // 40: TSWP.TabArchive
	(*TabsArchive)(nil),                                              // 41: TSWP.TabsArchive
	(*LineSpacingArchive)(nil),                                       // 42: TSWP.LineSpacingArchive
	(*ParagraphStylePropertiesArchive)(nil),                          // 43: TSWP.ParagraphStylePropertiesArchive
	(*ParagraphStyleArchive)(nil),                                    // 44: TSWP.ParagraphStyleArchive
	(*ListStyleArchive)(nil),                                         // 45: TSWP.ListStyleArchive
	(*TextStylePresetArchive)(nil),                                   // 46: TSWP.TextStylePresetArchive
	(*ColumnsArchive)(nil),                                           // 47: TSWP.ColumnsArchive
	(*PaddingArchive)(nil),                                           // 48: TSWP.PaddingArchive
	(*ColumnStylePropertiesArchive)(nil),                             // 49: TSWP.ColumnStylePropertiesArchive
	(*ColumnStyleArchive)(nil),                                       // 50: TSWP.ColumnStyleArchive
	(*TSWPShapeStylePropertiesArchive)(nil),                          // 51: TSWP.TSWPShapeStylePropertiesArchive
	(*TSWPShapeStyleArchive)(nil),                                    // 52: TSWP.TSWPShapeStyleArchive
	(*TSWPThemePresetsArchive)(nil),                                  // 53: TSWP.TSWPThemePresetsArchive
	(*TextPresetDisplayItemArchive)(nil),                             // 54: TSWP.TextPresetDisplayItemArchive
	(*TOCEntryStylePropertiesArchive)(nil),                           // 55: TSWP.TOCEntryStylePropertiesArchive
	(*TOCEntryStyleArchive)(nil),                                     // 56: TSWP.TOCEntryStyleArchive
	(*TOCSettingsArchive)(nil),                                       // 57: TSWP.TOCSettingsArchive
	(*TOCEntryInstanceArchive)(nil),                                  // 58: TSWP.TOCEntryInstanceArchive
	(*UndoTransaction)(nil),                                          // 59: TSWP.UndoTransaction
	(*UndoTransactionWrapperArchive)(nil),                            // 60: TSWP.UndoTransactionWrapperArchive
	(*ShapeInfoArchive)(nil),                                         // 61: TSWP.ShapeInfoArchive
	(*CommentInfoArchive)(nil),                                       // 62: TSWP.CommentInfoArchive
	(*TOCInfoArchive)(nil),                                           // 63: TSWP.TOCInfoArchive
	(*TOCLayoutHintArchive)(nil),                                     // 64: TSWP.TOCLayoutHintArchive
	(*EquationInfoArchive)(nil),                                      // 65: TSWP.EquationInfoArchive
	(*TextualAttachmentArchive)(nil),                                 // 66: TSWP.TextualAttachmentArchive
	(*TSWPTOCPageNumberAttachmentArchive)(nil),                       // 67: TSWP.TSWPTOCPageNumberAttachmentArchive
	(*UIGraphicalAttachment)(nil),                                    // 68: TSWP.UIGraphicalAttachment
	(*DrawableAttachmentArchive)(nil),                                // 69: TSWP.DrawableAttachmentArchive
	(*TOCAttachmentArchive)(nil),                                     // 70: TSWP.TOCAttachmentArchive
	(*FootnoteReferenceAttachmentArchive)(nil),                       // 71: TSWP.FootnoteReferenceAttachmentArchive
	(*NumberAttachmentArchive)(nil),                                  // 72: TSWP.NumberAttachmentArchive
	(*SmartFieldArchive)(nil),                                        // 73: TSWP.SmartFieldArchive
	(*HyperlinkFieldArchive)(nil),                                    // 74: TSWP.HyperlinkFieldArchive
	(*PlaceholderSmartFieldArchive)(nil),                             // 75: TSWP.PlaceholderSmartFieldArchive
	(*UnsupportedHyperlinkFieldArchive)(nil),                         // 76: TSWP.UnsupportedHyperlinkFieldArchive
	(*BibliographySmartFieldArchive)(nil),                            // 77: TSWP.BibliographySmartFieldArchive
	(*CitationRecordArchive)(nil),                                    // 78: TSWP.CitationRecordArchive
	(*CitationSmartFieldArchive)(nil),                                // 79: TSWP.CitationSmartFieldArchive
	(*DateTimeSmartFieldArchive)(nil),                                // 80: TSWP.DateTimeSmartFieldArchive
	(*BookmarkFieldArchive)(nil),                                     // 81: TSWP.BookmarkFieldArchive
	(*FilenameSmartFieldArchive)(nil),                                // 82: TSWP.FilenameSmartFieldArchive
	(*MergeSmartFieldArchive)(nil),                                   // 83: TSWP.MergeSmartFieldArchive
	(*TOCSmartFieldArchive)(nil),                                     // 84: TSWP.TOCSmartFieldArchive
	(*RubyFieldArchive)(nil),                                         // 85: TSWP.RubyFieldArchive
	(*TateChuYokoFieldArchive)(nil),                                  // 86: TSWP.TateChuYokoFieldArchive
	(*ChangeArchive)(nil),                                            // 87: TSWP.ChangeArchive
	(*ChangeSessionArchive)(nil),                                     // 88: TSWP.ChangeSessionArchive
	(*SectionPlaceholderArchive)(nil),                                // 89: TSWP.SectionPlaceholderArchive
	(*HyperlinkSelectionArchive)(nil),                                // 90: TSWP.HyperlinkSelectionArchive
	(*FlowInfoArchive)(nil),                                          // 91: TSWP.FlowInfoArchive
	(*FlowInfoContainerArchive)(nil),                                 // 92: TSWP.FlowInfoContainerArchive
	(*DropCapArchive)(nil),                                           // 93: TSWP.DropCapArchive
	(*DropCapStylePropertiesArchive)(nil),                            // 94: TSWP.DropCapStylePropertiesArchive
	(*DropCapStyleArchive)(nil),                                      // 95: TSWP.DropCapStyleArchive
	(*ObjectAttributeTable_ObjectAttribute)(nil),                     // 96: TSWP.ObjectAttributeTable.ObjectAttribute
	(*StringAttributeTable_StringAttribute)(nil),                     // 97: TSWP.StringAttributeTable.StringAttribute
	(*ParaDataAttributeTable_ParaDataAttribute)(nil),                 // 98: TSWP.ParaDataAttributeTable.ParaDataAttribute
	(*OverlappingFieldAttributeTable_OverlappingFieldAttribute)(nil), // 99: TSWP.OverlappingFieldAttributeTable.OverlappingFieldAttribute
	(*ListStyleArchive_LabelGeometry)(nil),                           // 100: TSWP.ListStyleArchive.LabelGeometry
	(*ListStyleArchive_LabelImage)(nil),                              // 101: TSWP.ListStyleArchive.LabelImage
	(*ColumnsArchive_EqualColumnsArchive)(nil),                       // 102: TSWP.ColumnsArchive.EqualColumnsArchive
	(*ColumnsArchive_NonEqualColumnsArchive)(nil),                    // 103: TSWP.ColumnsArchive.NonEqualColumnsArchive
	(*ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive)(nil),    // 104: TSWP.ColumnsArchive.NonEqualColumnsArchive.GapWidthArchive
	(*TOCSettingsArchive_TOCEntryData)(nil),                          // 105: TSWP.TOCSettingsArchive.TOCEntryData
	(*UndoTransaction_GenericTransaction)(nil),                       // 106: TSWP.UndoTransaction.GenericTransaction
	(*UndoTransaction_TextTransaction)(nil),                          // 107: TSWP.UndoTransaction.TextTransaction
	(*UndoTransaction_CharIndexTransaction)(nil),                     // 108: TSWP.UndoTransaction.CharIndexTransaction
	(*UndoTransaction_ReplaceCharIndexTransaction)(nil),              // 109: TSWP.UndoTransaction.ReplaceCharIndexTransaction
	(*UndoTransaction_AttributeIndexTransaction)(nil),                // 110: TSWP.UndoTransaction.AttributeIndexTransaction
	(*UndoTransaction_InsertAttributeTransaction)(nil),               // 111: TSWP.UndoTransaction.InsertAttributeTransaction
	(*UndoTransaction_InsertNilTransaction)(nil),                     // 112: TSWP.UndoTransaction.InsertNilTransaction
	(*UndoTransaction_CharDeltaTransaction)(nil),                     // 113: TSWP.UndoTransaction.CharDeltaTransaction
	(*UndoTransaction_ParagraphDataTransaction)(nil),                 // 114: TSWP.UndoTransaction.ParagraphDataTransaction
	(*UndoTransaction_ObjectDOLCTransaction)(nil),                    // 115: TSWP.UndoTransaction.ObjectDOLCTransaction
	(*UndoTransaction_CTDateTransaction)(nil),                        // 116: TSWP.UndoTransaction.CTDateTransaction
	(*UndoTransaction_UnionTransaction)(nil),                         // 117: TSWP.UndoTransaction.UnionTransaction
	(*UndoTransaction_StorageAction)(nil),                            // 118: TSWP.UndoTransaction.StorageAction
	(*UndoTransaction_StorageActionGroup)(nil),                       // 119: TSWP.UndoTransaction.StorageActionGroup
	(*TOCSmartFieldArchive_TOCEntry)(nil),                            // 120: TSWP.TOCSmartFieldArchive.TOCEntry
	(*Range)(nil),                                                    // 121: TSP.Range
	(*Reference)(nil),                                                // 122: TSP.Reference
	(*Color)(nil),                                                    // 123: TSP.Color
	(*ShadowArchive)(nil),                                            // 124: TSD.ShadowArchive
	(*StrokeArchive)(nil),                                            // 125: TSD.StrokeArchive
	(*FillArchive)(nil),                                              // 126: TSD.FillArchive
	(*StyleArchive)(nil),                                             // 127: TSS.StyleArchive
	(*Point)(nil),                                                    // 128: TSP.Point
	(*ShapeStyleArchive)(nil),                                        // 129: TSD.ShapeStyleArchive
	(*ShapeArchive)(nil),                                             // 130: TSD.ShapeArchive
	(*Date)(nil),                                                     // 131: TSP.Date
	(*DataReference)(nil),                                            // 132: TSP.DataReference
	(*CommandPropertyEntryArchive)(nil),                              // 133: TSS.CommandPropertyEntryArchive
	(*TSSThemeArchive)(nil),                                          // 134: TSS.TSSThemeArchive
	(*ImageArchive)(nil),                                             // 135: TSD.ImageArchive
}
var file_TSWPArchives_proto_depIdxs = []int32{
	0,   // 0: TSWP.TSWPSelectionArchive.type:type_name -> TSWP.SelectionType
	121, // 1: TSWP.TSWPSelectionArchive.range:type_name -> TSP.Range
	1,   // 2: TSWP.TSWPSelectionArchive.styleInsertionBehavior:type_name -> TSWP.StyleInsertionBehavior
	2,   // 3: TSWP.TSWPSelectionArchive.caretAffinity:type_name -> TSWP.CaretAffinity
	121, // 4: TSWP.TSWPSelectionArchive.smart_field_range:type_name -> TSP.Range
	96,  // 5: TSWP.ObjectAttributeTable.entries:type_name -> TSWP.ObjectAttributeTable.ObjectAttribute
	97,  // 6: TSWP.StringAttributeTable.entries:type_name -> TSWP.StringAttributeTable.StringAttribute
	98,  // 7: TSWP.ParaDataAttributeTable.entries:type_name -> TSWP.ParaDataAttributeTable.ParaDataAttribute
	99,  // 8: TSWP.OverlappingFieldAttributeTable.entries:type_name -> TSWP.OverlappingFieldAttributeTable.OverlappingFieldAttribute
	4,   // 9: TSWP.StorageArchive.kind:type_name -> TSWP.StorageArchive.KindType
	122, // 10: TSWP.StorageArchive.style_sheet:type_name -> TSP.Reference
	30,  // 11: TSWP.StorageArchive.table_para_style:type_name -> TSWP.ObjectAttributeTable
	32,  // 12: TSWP.StorageArchive.table_para_data:type_name -> TSWP.ParaDataAttributeTable
	30,  // 13: TSWP.StorageArchive.table_list_style:type_name -> TSWP.ObjectAttributeTable
	30,  // 14: TSWP.StorageArchive.table_char_style:type_name -> TSWP.ObjectAttributeTable
	30,  // 15: TSWP.StorageArchive.table_attachment:type_name -> TSWP.ObjectAttributeTable
	30,  // 16: TSWP.StorageArchive.table_smartfield:type_name -> TSWP.ObjectAttributeTable
	30,  // 17: TSWP.StorageArchive.table_layout_style:type_name -> TSWP.ObjectAttributeTable
	32,  // 18: TSWP.StorageArchive.table_para_starts:type_name -> TSWP.ParaDataAttributeTable
	30,  // 19: TSWP.StorageArchive.table_bookmark:type_name -> TSWP.ObjectAttributeTable
	30,  // 20: TSWP.StorageArchive.table_footnote:type_name -> TSWP.ObjectAttributeTable
	30,  // 21: TSWP.StorageArchive.table_section:type_name -> TSWP.ObjectAttributeTable
	30,  // 22: TSWP.StorageArchive.table_rubyfield:type_name -> TSWP.ObjectAttributeTable
	31,  // 23: TSWP.StorageArchive.table_language:type_name -> TSWP.StringAttributeTable
	31,  // 24: TSWP.StorageArchive.table_dictation:type_name -> TSWP.StringAttributeTable
	30,  // 25: TSWP.StorageArchive.table_insertion:type_name -> TSWP.ObjectAttributeTable
	30,  // 26: TSWP.StorageArchive.table_deletion:type_name -> TSWP.ObjectAttributeTable
	30,  // 27: TSWP.StorageArchive.table_highlight:type_name -> TSWP.ObjectAttributeTable
	32,  // 28: TSWP.StorageArchive.table_para_bidi:type_name -> TSWP.ParaDataAttributeTable
	33,  // 29: TSWP.StorageArchive.table_overlapping_highlight:type_name -> TSWP.OverlappingFieldAttributeTable
	33,  // 30: TSWP.StorageArchive.table_pencil_annotation:type_name -> TSWP.OverlappingFieldAttributeTable
	30,  // 31: TSWP.StorageArchive.table_tatechuyoko:type_name -> TSWP.ObjectAttributeTable
	30,  // 32: TSWP.StorageArchive.table_drop_cap_style:type_name -> TSWP.ObjectAttributeTable
	122, // 33: TSWP.HighlightArchive.commentStorage:type_name -> TSP.Reference
	122, // 34: TSWP.TSWPPencilAnnotationArchive.pencil_annotation_storage:type_name -> TSP.Reference
	123, // 35: TSWP.CharacterStylePropertiesArchive.font_color:type_name -> TSP.Color
	9,   // 36: TSWP.CharacterStylePropertiesArchive.superscript:type_name -> TSWP.CharacterStylePropertiesArchive.SuperscriptType
	6,   // 37: TSWP.CharacterStylePropertiesArchive.underline:type_name -> TSWP.CharacterStylePropertiesArchive.UnderlineType
	8,   // 38: TSWP.CharacterStylePropertiesArchive.strikethru:type_name -> TSWP.CharacterStylePropertiesArchive.StrikethruType
	5,   // 39: TSWP.CharacterStylePropertiesArchive.capitalization:type_name -> TSWP.CharacterStylePropertiesArchive.CapitalizationType
	7,   // 40: TSWP.CharacterStylePropertiesArchive.ligatures:type_name -> TSWP.CharacterStylePropertiesArchive.LigaturesType
	123, // 41: TSWP.CharacterStylePropertiesArchive.outline_color:type_name -> TSP.Color
	124, // 42: TSWP.CharacterStylePropertiesArchive.shadow:type_name -> TSD.ShadowArchive
	123, // 43: TSWP.CharacterStylePropertiesArchive.strikethru_color:type_name -> TSP.Color
	123, // 44: TSWP.CharacterStylePropertiesArchive.background_color:type_name -> TSP.Color
	123, // 45: TSWP.CharacterStylePropertiesArchive.underline_color:type_name -> TSP.Color
	37,  // 46: TSWP.CharacterStylePropertiesArchive.font_features:type_name -> TSWP.FontFeatureArchive
	3,   // 47: TSWP.CharacterStylePropertiesArchive.writing_direction:type_name -> TSWP.WritingDirectionType
	125, // 48: TSWP.CharacterStylePropertiesArchive.tsd_stroke:type_name -> TSD.StrokeArchive
	126, // 49: TSWP.CharacterStylePropertiesArchive.tsd_fill:type_name -> TSD.FillArchive
	127, // 50: TSWP.CharacterStyleArchive.super:type_name -> TSS.StyleArchive
	38,  // 51: TSWP.CharacterStyleArchive.char_properties:type_name -> TSWP.CharacterStylePropertiesArchive
	10,  // 52: TSWP.TabArchive.alignment:type_name -> TSWP.TabArchive.TabAlignmentType
	40,  // 53: TSWP.TabsArchive.tabs:type_name -> TSWP.TabArchive
	11,  // 54: TSWP.LineSpacingArchive.mode:type_name -> TSWP.LineSpacingArchive.LineSpacingModeType
	12,  // 55: TSWP.ParagraphStylePropertiesArchive.alignment:type_name -> TSWP.ParagraphStylePropertiesArchive.TextAlignmentType
	123, // 56: TSWP.ParagraphStylePropertiesArchive.fill:type_name -> TSP.Color
	42,  // 57: TSWP.ParagraphStylePropertiesArchive.line_spacing:type_name -> TSWP.LineSpacingArchive
	13,  // 58: TSWP.ParagraphStylePropertiesArchive.borders:type_name -> TSWP.ParagraphStylePropertiesArchive.ParagraphBorderType
	128, // 59: TSWP.ParagraphStylePropertiesArchive.rule_offset:type_name -> TSP.Point
	41,  // 60: TSWP.ParagraphStylePropertiesArchive.tabs:type_name -> TSWP.TabsArchive
	14,  // 61: TSWP.ParagraphStylePropertiesArchive.outline_style:type_name -> TSWP.ParagraphStylePropertiesArchive.OutlineStyleType
	125, // 62: TSWP.ParagraphStylePropertiesArchive.stroke:type_name -> TSD.StrokeArchive
	3,   // 63: TSWP.ParagraphStylePropertiesArchive.writing_direction:type_name -> TSWP.WritingDirectionType
	122, // 64: TSWP.ParagraphStylePropertiesArchive.list_style:type_name -> TSP.Reference
	122, // 65: TSWP.ParagraphStylePropertiesArchive.following_style:type_name -> TSP.Reference
	127, // 66: TSWP.ParagraphStyleArchive.super:type_name -> TSS.StyleArchive
	38,  // 67: TSWP.ParagraphStyleArchive.char_properties:type_name -> TSWP.CharacterStylePropertiesArchive
	43,  // 68: TSWP.ParagraphStyleArchive.para_properties:type_name -> TSWP.ParagraphStylePropertiesArchive
	127, // 69: TSWP.ListStyleArchive.super:type_name -> TSS.StyleArchive
	15,  // 70: TSWP.ListStyleArchive.label_types:type_name -> TSWP.ListStyleArchive.LabelType
	100, // 71: TSWP.ListStyleArchive.geometries:type_name -> TSWP.ListStyleArchive.LabelGeometry
	16,  // 72: TSWP.ListStyleArchive.number_types:type_name -> TSWP.ListStyleArchive.NumberType
	101, // 73: TSWP.ListStyleArchive.images:type_name -> TSWP.ListStyleArchive.LabelImage
	124, // 74: TSWP.ListStyleArchive.shadow:type_name -> TSD.ShadowArchive
	123, // 75: TSWP.ListStyleArchive.font_color:type_name -> TSP.Color
	3,   // 76: TSWP.ListStyleArchive.writing_direction:type_name -> TSWP.WritingDirectionType
	122, // 77: TSWP.TextStylePresetArchive.paragraph_style:type_name -> TSP.Reference
	122, // 78: TSWP.TextStylePresetArchive.list_style:type_name -> TSP.Reference
	102, // 79: TSWP.ColumnsArchive.equal_columns:type_name -> TSWP.ColumnsArchive.EqualColumnsArchive
	103, // 80: TSWP.ColumnsArchive.non_equal_columns:type_name -> TSWP.ColumnsArchive.NonEqualColumnsArchive
	17,  // 81: TSWP.ColumnStylePropertiesArchive.vertical_alignment:type_name -> TSWP.ColumnStylePropertiesArchive.VerticalAlignmentType
	47,  // 82: TSWP.ColumnStylePropertiesArchive.columns:type_name -> TSWP.ColumnsArchive
	48,  // 83: TSWP.ColumnStylePropertiesArchive.margins:type_name -> TSWP.PaddingArchive
	48,  // 84: TSWP.ColumnStylePropertiesArchive.padding:type_name -> TSWP.PaddingArchive
	3,   // 85: TSWP.ColumnStylePropertiesArchive.writing_direction:type_name -> TSWP.WritingDirectionType
	127, // 86: TSWP.ColumnStyleArchive.super:type_name -> TSS.StyleArchive
	49,  // 87: TSWP.ColumnStyleArchive.column_properties:type_name -> TSWP.ColumnStylePropertiesArchive
	18,  // 88: TSWP.TSWPShapeStylePropertiesArchive.vertical_alignment:type_name -> TSWP.TSWPShapeStylePropertiesArchive.VerticalAlignmentType
	47,  // 89: TSWP.TSWPShapeStylePropertiesArchive.columns:type_name -> TSWP.ColumnsArchive
	48,  // 90: TSWP.TSWPShapeStylePropertiesArchive.padding:type_name -> TSWP.PaddingArchive
	122, // 91: TSWP.TSWPShapeStylePropertiesArchive.paragraph_style:type_name -> TSP.Reference
	129, // 92: TSWP.TSWPShapeStyleArchive.super:type_name -> TSD.ShapeStyleArchive
	51,  // 93: TSWP.TSWPShapeStyleArchive.shape_properties:type_name -> TSWP.TSWPShapeStylePropertiesArchive
	122, // 94: TSWP.TSWPThemePresetsArchive.list_style_presets:type_name -> TSP.Reference
	122, // 95: TSWP.TSWPThemePresetsArchive.text_style_presets:type_name -> TSP.Reference
	122, // 96: TSWP.TSWPThemePresetsArchive.imported_text_style_presets:type_name -> TSP.Reference
	122, // 97: TSWP.TSWPThemePresetsArchive.toc_entry_style_presets:type_name -> TSP.Reference
	122, // 98: TSWP.TSWPThemePresetsArchive.toc_settings_presets:type_name -> TSP.Reference
	122, // 99: TSWP.TSWPThemePresetsArchive.character_style_presets:type_name -> TSP.Reference
	122, // 100: TSWP.TSWPThemePresetsArchive.paragraph_style_presets:type_name -> TSP.Reference
	122, // 101: TSWP.TSWPThemePresetsArchive.dropcap_style_presets:type_name -> TSP.Reference
	122, // 102: TSWP.TextPresetDisplayItemArchive.preset:type_name -> TSP.Reference
	122, // 103: TSWP.TOCEntryStylePropertiesArchive.page_number_style:type_name -> TSP.Reference
	44,  // 104: TSWP.TOCEntryStyleArchive.super:type_name -> TSWP.ParagraphStyleArchive
	55,  // 105: TSWP.TOCEntryStyleArchive.toc_properties:type_name -> TSWP.TOCEntryStylePropertiesArchive
	105, // 106: TSWP.TOCSettingsArchive.entries:type_name -> TSWP.TOCSettingsArchive.TOCEntryData
	122, // 107: TSWP.TOCEntryInstanceArchive.indexed_style:type_name -> TSP.Reference
	122, // 108: TSWP.TOCEntryInstanceArchive.indexed_list_style:type_name -> TSP.Reference
	117, // 109: TSWP.UndoTransaction.entries:type_name -> TSWP.UndoTransaction.UnionTransaction
	119, // 110: TSWP.UndoTransaction.group_entries:type_name -> TSWP.UndoTransaction.StorageActionGroup
	59,  // 111: TSWP.UndoTransactionWrapperArchive.undo_transaction:type_name -> TSWP.UndoTransaction
	130, // 112: TSWP.ShapeInfoArchive.super:type_name -> TSD.ShapeArchive
	122, // 113: TSWP.ShapeInfoArchive.deprecated_storage:type_name -> TSP.Reference
	122, // 114: TSWP.ShapeInfoArchive.text_flow:type_name -> TSP.Reference
	122, // 115: TSWP.ShapeInfoArchive.owned_storage:type_name -> TSP.Reference
	61,  // 116: TSWP.CommentInfoArchive.super:type_name -> TSWP.ShapeInfoArchive
	122, // 117: TSWP.CommentInfoArchive.comment_storage:type_name -> TSP.Reference
	61,  // 118: TSWP.TOCInfoArchive.super:type_name -> TSWP.ShapeInfoArchive
	122, // 119: TSWP.TOCInfoArchive.toc_settings:type_name -> TSP.Reference
	122, // 120: TSWP.TOCInfoArchive.toc_entry_data:type_name -> TSP.Reference
	121, // 121: TSWP.TOCInfoArchive.page_number_ranges:type_name -> TSP.Range
	121, // 122: TSWP.TOCLayoutHintArchive.charRange:type_name -> TSP.Range
	22,  // 123: TSWP.TextualAttachmentArchive.kind:type_name -> TSWP.TextualAttachmentArchive.Kind
	66,  // 124: TSWP.TSWPTOCPageNumberAttachmentArchive.super:type_name -> TSWP.TextualAttachmentArchive
	122, // 125: TSWP.DrawableAttachmentArchive.drawable:type_name -> TSP.Reference
	69,  // 126: TSWP.TOCAttachmentArchive.super:type_name -> TSWP.DrawableAttachmentArchive
	66,  // 127: TSWP.FootnoteReferenceAttachmentArchive.super:type_name -> TSWP.TextualAttachmentArchive
	122, // 128: TSWP.FootnoteReferenceAttachmentArchive.contained_storage:type_name -> TSP.Reference
	66,  // 129: TSWP.NumberAttachmentArchive.super:type_name -> TSWP.TextualAttachmentArchive
	73,  // 130: TSWP.HyperlinkFieldArchive.super:type_name -> TSWP.SmartFieldArchive
	73,  // 131: TSWP.PlaceholderSmartFieldArchive.super:type_name -> TSWP.SmartFieldArchive
	75,  // 132: TSWP.UnsupportedHyperlinkFieldArchive.super:type_name -> TSWP.PlaceholderSmartFieldArchive
	73,  // 133: TSWP.BibliographySmartFieldArchive.super:type_name -> TSWP.SmartFieldArchive
	122, // 134: TSWP.BibliographySmartFieldArchive.citation_records:type_name -> TSP.Reference
	75,  // 135: TSWP.BibliographySmartFieldArchive.old_super:type_name -> TSWP.PlaceholderSmartFieldArchive
	73,  // 136: TSWP.CitationSmartFieldArchive.super:type_name -> TSWP.SmartFieldArchive
	122, // 137: TSWP.CitationSmartFieldArchive.citation_records:type_name -> TSP.Reference
	75,  // 138: TSWP.CitationSmartFieldArchive.old_super:type_name -> TSWP.PlaceholderSmartFieldArchive
	73,  // 139: TSWP.DateTimeSmartFieldArchive.super:type_name -> TSWP.SmartFieldArchive
	24,  // 140: TSWP.DateTimeSmartFieldArchive.date_style:type_name -> TSWP.DateTimeSmartFieldArchive.DateTimeFormatterStyle
	24,  // 141: TSWP.DateTimeSmartFieldArchive.time_style:type_name -> TSWP.DateTimeSmartFieldArchive.DateTimeFormatterStyle
	23,  // 142: TSWP.DateTimeSmartFieldArchive.update_plan:type_name -> TSWP.DateTimeSmartFieldArchive.DateTimeUpdatePlan
	131, // 143: TSWP.DateTimeSmartFieldArchive.date:type_name -> TSP.Date
	73,  // 144: TSWP.BookmarkFieldArchive.super:type_name -> TSWP.SmartFieldArchive
	75,  // 145: TSWP.FilenameSmartFieldArchive.super:type_name -> TSWP.PlaceholderSmartFieldArchive
	75,  // 146: TSWP.MergeSmartFieldArchive.super:type_name -> TSWP.PlaceholderSmartFieldArchive
	25,  // 147: TSWP.MergeSmartFieldArchive.category:type_name -> TSWP.MergeSmartFieldArchive.MergeCategory
	75,  // 148: TSWP.TOCSmartFieldArchive.super:type_name -> TSWP.PlaceholderSmartFieldArchive
	120, // 149: TSWP.TOCSmartFieldArchive.toc_entries:type_name -> TSWP.TOCSmartFieldArchive.TOCEntry
	73,  // 150: TSWP.RubyFieldArchive.super:type_name -> TSWP.SmartFieldArchive
	73,  // 151: TSWP.TateChuYokoFieldArchive.super:type_name -> TSWP.SmartFieldArchive
	26,  // 152: TSWP.ChangeArchive.kind:type_name -> TSWP.ChangeArchive.ChangeKind
	122, // 153: TSWP.ChangeArchive.session:type_name -> TSP.Reference
	131, // 154: TSWP.ChangeArchive.date:type_name -> TSP.Date
	122, // 155: TSWP.ChangeSessionArchive.author:type_name -> TSP.Reference
	131, // 156: TSWP.ChangeSessionArchive.date:type_name -> TSP.Date
	122, // 157: TSWP.SectionPlaceholderArchive.parent_storage:type_name -> TSP.Reference
	122, // 158: TSWP.FlowInfoArchive.text_storage:type_name -> TSP.Reference
	122, // 159: TSWP.FlowInfoArchive.textboxes:type_name -> TSP.Reference
	122, // 160: TSWP.FlowInfoContainerArchive.flow_infos:type_name -> TSP.Reference
	27,  // 161: TSWP.DropCapArchive.type:type_name -> TSWP.DropCapArchive.DropCapType
	28,  // 162: TSWP.DropCapArchive.wrap_type:type_name -> TSWP.DropCapArchive.DropCapWrapType
	93,  // 163: TSWP.DropCapStylePropertiesArchive.drop_cap:type_name -> TSWP.DropCapArchive
	125, // 164: TSWP.DropCapStylePropertiesArchive.drop_cap_shape_stroke:type_name -> TSD.StrokeArchive
	126, // 165: TSWP.DropCapStylePropertiesArchive.drop_cap_shape_fill:type_name -> TSD.FillArchive
	127, // 166: TSWP.DropCapStyleArchive.super:type_name -> TSS.StyleArchive
	38,  // 167: TSWP.DropCapStyleArchive.char_properties:type_name -> TSWP.CharacterStylePropertiesArchive
	94,  // 168: TSWP.DropCapStyleArchive.drop_cap_properties:type_name -> TSWP.DropCapStylePropertiesArchive
	122, // 169: TSWP.ObjectAttributeTable.ObjectAttribute.object:type_name -> TSP.Reference
	121, // 170: TSWP.OverlappingFieldAttributeTable.OverlappingFieldAttribute.range:type_name -> TSP.Range
	122, // 171: TSWP.OverlappingFieldAttributeTable.OverlappingFieldAttribute.field:type_name -> TSP.Reference
	132, // 172: TSWP.ListStyleArchive.LabelImage.image:type_name -> TSP.DataReference
	122, // 173: TSWP.ListStyleArchive.LabelImage.database_image:type_name -> TSP.Reference
	104, // 174: TSWP.ColumnsArchive.NonEqualColumnsArchive.following:type_name -> TSWP.ColumnsArchive.NonEqualColumnsArchive.GapWidthArchive
	122, // 175: TSWP.TOCSettingsArchive.TOCEntryData.paragraph_style:type_name -> TSP.Reference
	122, // 176: TSWP.TOCSettingsArchive.TOCEntryData.toc_entry_style:type_name -> TSP.Reference
	122, // 177: TSWP.UndoTransaction.CharIndexTransaction.object:type_name -> TSP.Reference
	122, // 178: TSWP.UndoTransaction.AttributeIndexTransaction.object:type_name -> TSP.Reference
	122, // 179: TSWP.UndoTransaction.InsertAttributeTransaction.object:type_name -> TSP.Reference
	122, // 180: TSWP.UndoTransaction.ObjectDOLCTransaction.object:type_name -> TSP.Reference
	131, // 181: TSWP.UndoTransaction.CTDateTransaction.date:type_name -> TSP.Date
	19,  // 182: TSWP.UndoTransaction.UnionTransaction.kind:type_name -> TSWP.UndoTransaction.UndoKind
	106, // 183: TSWP.UndoTransaction.UnionTransaction.generic:type_name -> TSWP.UndoTransaction.GenericTransaction
	107, // 184: TSWP.UndoTransaction.UnionTransaction.text:type_name -> TSWP.UndoTransaction.TextTransaction
	108, // 185: TSWP.UndoTransaction.UnionTransaction.char_index:type_name -> TSWP.UndoTransaction.CharIndexTransaction
	109, // 186: TSWP.UndoTransaction.UnionTransaction.replace_char_index:type_name -> TSWP.UndoTransaction.ReplaceCharIndexTransaction
	110, // 187: TSWP.UndoTransaction.UnionTransaction.attribute_index:type_name -> TSWP.UndoTransaction.AttributeIndexTransaction
	112, // 188: TSWP.UndoTransaction.UnionTransaction.insert_nil:type_name -> TSWP.UndoTransaction.InsertNilTransaction
	111, // 189: TSWP.UndoTransaction.UnionTransaction.insert_attribute:type_name -> TSWP.UndoTransaction.InsertAttributeTransaction
	113, // 190: TSWP.UndoTransaction.UnionTransaction.char_delta:type_name -> TSWP.UndoTransaction.CharDeltaTransaction
	114, // 191: TSWP.UndoTransaction.UnionTransaction.paragraph_data:type_name -> TSWP.UndoTransaction.ParagraphDataTransaction
	115, // 192: TSWP.UndoTransaction.UnionTransaction.object_dolc:type_name -> TSWP.UndoTransaction.ObjectDOLCTransaction
	116, // 193: TSWP.UndoTransaction.UnionTransaction.ct_date:type_name -> TSWP.UndoTransaction.CTDateTransaction
	20,  // 194: TSWP.UndoTransaction.StorageAction.kind:type_name -> TSWP.UndoTransaction.ActionKind
	121, // 195: TSWP.UndoTransaction.StorageAction.range:type_name -> TSP.Range
	122, // 196: TSWP.UndoTransaction.StorageAction.object:type_name -> TSP.Reference
	131, // 197: TSWP.UndoTransaction.StorageAction.date:type_name -> TSP.Date
	122, // 198: TSWP.UndoTransaction.StorageAction.undo_object:type_name -> TSP.Reference
	21,  // 199: TSWP.UndoTransaction.StorageActionGroup.kind:type_name -> TSWP.UndoTransaction.ActionGroupKind
	118, // 200: TSWP.UndoTransaction.StorageActionGroup.forward_actions:type_name -> TSWP.UndoTransaction.StorageAction
	118, // 201: TSWP.UndoTransaction.StorageActionGroup.inverse_forward_actions:type_name -> TSWP.UndoTransaction.StorageAction
	118, // 202: TSWP.UndoTransaction.StorageActionGroup.inverse_detail_actions:type_name -> TSWP.UndoTransaction.StorageAction
	122, // 203: TSWP.TOCSmartFieldArchive.TOCEntry.target_style:type_name -> TSP.Reference
	121, // 204: TSWP.TOCSmartFieldArchive.TOCEntry.range:type_name -> TSP.Range
	133, // 205: TSWP.padding:extendee -> TSS.CommandPropertyEntryArchive
	134, // 206: TSWP.TSWPThemePresetsArchive.extension:extendee -> TSS.TSSThemeArchive
	135, // 207: TSWP.EquationInfoArchive.equation_source_old:extendee -> TSD.ImageArchive
	135, // 208: TSWP.EquationInfoArchive.equation_text_properties:extendee -> TSD.ImageArchive
	135, // 209: TSWP.EquationInfoArchive.equation_depth:extendee -> TSD.ImageArchive
	135, // 210: TSWP.EquationInfoArchive.equation_source_text:extendee -> TSD.ImageArchive
	48,  // 211: TSWP.padding:type_name -> TSWP.PaddingArchive
	53,  // 212: TSWP.TSWPThemePresetsArchive.extension:type_name -> TSWP.TSWPThemePresetsArchive
	38,  // 213: TSWP.EquationInfoArchive.equation_text_properties:type_name -> TSWP.CharacterStylePropertiesArchive
	214, // [214:214] is the sub-list for method output_type
	214, // [214:214] is the sub-list for method input_type
	211, // [211:214] is the sub-list for extension type_name
	205, // [205:211] is the sub-list for extension extendee
	0,   // [0:205] is the sub-list for field type_name
}

func init() { file_TSWPArchives_proto_init() }
func file_TSWPArchives_proto_init() {
	if File_TSWPArchives_proto != nil {
		return
	}
	file_TSPMessages_proto_init()
	file_TSSArchives_proto_init()
	file_TSDArchives_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_TSWPArchives_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSWPSelectionArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectAttributeTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringAttributeTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParaDataAttributeTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OverlappingFieldAttributeTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HighlightArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSWPPencilAnnotationArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FontFeatureArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharacterStylePropertiesArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharacterStyleArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TabArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TabsArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LineSpacingArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParagraphStylePropertiesArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParagraphStyleArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStyleArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextStylePresetArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnsArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaddingArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnStylePropertiesArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnStyleArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSWPShapeStylePropertiesArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSWPShapeStyleArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSWPThemePresetsArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextPresetDisplayItemArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TOCEntryStylePropertiesArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TOCEntryStyleArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TOCSettingsArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TOCEntryInstanceArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UndoTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UndoTransactionWrapperArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShapeInfoArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommentInfoArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TOCInfoArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TOCLayoutHintArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquationInfoArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextualAttachmentArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSWPTOCPageNumberAttachmentArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UIGraphicalAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrawableAttachmentArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TOCAttachmentArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FootnoteReferenceAttachmentArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NumberAttachmentArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmartFieldArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HyperlinkFieldArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaceholderSmartFieldArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnsupportedHyperlinkFieldArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BibliographySmartFieldArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CitationRecordArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CitationSmartFieldArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DateTimeSmartFieldArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BookmarkFieldArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilenameSmartFieldArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergeSmartFieldArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TOCSmartFieldArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RubyFieldArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TateChuYokoFieldArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeSessionArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SectionPlaceholderArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HyperlinkSelectionArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowInfoArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowInfoContainerArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropCapArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropCapStylePropertiesArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropCapStyleArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectAttributeTable_ObjectAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringAttributeTable_StringAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParaDataAttributeTable_ParaDataAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OverlappingFieldAttributeTable_OverlappingFieldAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStyleArchive_LabelGeometry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStyleArchive_LabelImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnsArchive_EqualColumnsArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnsArchive_NonEqualColumnsArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnsArchive_NonEqualColumnsArchive_GapWidthArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TOCSettingsArchive_TOCEntryData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UndoTransaction_GenericTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UndoTransaction_TextTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UndoTransaction_CharIndexTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UndoTransaction_ReplaceCharIndexTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UndoTransaction_AttributeIndexTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UndoTransaction_InsertAttributeTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UndoTransaction_InsertNilTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UndoTransaction_CharDeltaTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UndoTransaction_ParagraphDataTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UndoTransaction_ObjectDOLCTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UndoTransaction_CTDateTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UndoTransaction_UnionTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UndoTransaction_StorageAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UndoTransaction_StorageActionGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TOCSmartFieldArchive_TOCEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_TSWPArchives_proto_rawDesc,
			NumEnums:      29,
			NumMessages:   92,
			NumExtensions: 6,
			NumServices:   0,
		},
		GoTypes:           file_TSWPArchives_proto_goTypes,
		DependencyIndexes: file_TSWPArchives_proto_depIdxs,
		EnumInfos:         file_TSWPArchives_proto_enumTypes,
		MessageInfos:      file_TSWPArchives_proto_msgTypes,
		ExtensionInfos:    file_TSWPArchives_proto_extTypes,
	}.Build()
	File_TSWPArchives_proto = out.File
	file_TSWPArchives_proto_rawDesc = nil
	file_TSWPArchives_proto_goTypes = nil
	file_TSWPArchives_proto_depIdxs = nil
}
