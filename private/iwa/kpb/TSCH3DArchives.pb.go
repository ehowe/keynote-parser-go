// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: TSCH3DArchives.proto

package kpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TextureTilingMode int32

const (
	TextureTilingMode_textureTilingModeNone    TextureTilingMode = 0
	TextureTilingMode_textureTilingModeTallest TextureTilingMode = 1
)

// Enum value maps for TextureTilingMode.
var (
	TextureTilingMode_name = map[int32]string{
		0: "textureTilingModeNone",
		1: "textureTilingModeTallest",
	}
	TextureTilingMode_value = map[string]int32{
		"textureTilingModeNone":    0,
		"textureTilingModeTallest": 1,
	}
)

func (x TextureTilingMode) Enum() *TextureTilingMode {
	p := new(TextureTilingMode)
	*p = x
	return p
}

func (x TextureTilingMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TextureTilingMode) Descriptor() protoreflect.EnumDescriptor {
	return file_TSCH3DArchives_proto_enumTypes[0].Descriptor()
}

func (TextureTilingMode) Type() protoreflect.EnumType {
	return &file_TSCH3DArchives_proto_enumTypes[0]
}

func (x TextureTilingMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TextureTilingMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TextureTilingMode(num)
	return nil
}

// Deprecated: Use TextureTilingMode.Descriptor instead.
func (TextureTilingMode) EnumDescriptor() ([]byte, []int) {
	return file_TSCH3DArchives_proto_rawDescGZIP(), []int{0}
}

type TextureTilingFace int32

const (
	TextureTilingFace_textureTilingFaceAll          TextureTilingFace = 0
	TextureTilingFace_textureTilingFaceTopAndBottom TextureTilingFace = 1
	TextureTilingFace_textureTilingFaceSide         TextureTilingFace = 2
)

// Enum value maps for TextureTilingFace.
var (
	TextureTilingFace_name = map[int32]string{
		0: "textureTilingFaceAll",
		1: "textureTilingFaceTopAndBottom",
		2: "textureTilingFaceSide",
	}
	TextureTilingFace_value = map[string]int32{
		"textureTilingFaceAll":          0,
		"textureTilingFaceTopAndBottom": 1,
		"textureTilingFaceSide":         2,
	}
)

func (x TextureTilingFace) Enum() *TextureTilingFace {
	p := new(TextureTilingFace)
	*p = x
	return p
}

func (x TextureTilingFace) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TextureTilingFace) Descriptor() protoreflect.EnumDescriptor {
	return file_TSCH3DArchives_proto_enumTypes[1].Descriptor()
}

func (TextureTilingFace) Type() protoreflect.EnumType {
	return &file_TSCH3DArchives_proto_enumTypes[1]
}

func (x TextureTilingFace) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TextureTilingFace) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TextureTilingFace(num)
	return nil
}

// Deprecated: Use TextureTilingFace.Descriptor instead.
func (TextureTilingFace) EnumDescriptor() ([]byte, []int) {
	return file_TSCH3DArchives_proto_rawDescGZIP(), []int{1}
}

type TextureTilingWrap int32

const (
	TextureTilingWrap_textureTilingWrapProjected TextureTilingWrap = 0
	TextureTilingWrap_textureTilingWrapFaceWrap  TextureTilingWrap = 1
)

// Enum value maps for TextureTilingWrap.
var (
	TextureTilingWrap_name = map[int32]string{
		0: "textureTilingWrapProjected",
		1: "textureTilingWrapFaceWrap",
	}
	TextureTilingWrap_value = map[string]int32{
		"textureTilingWrapProjected": 0,
		"textureTilingWrapFaceWrap":  1,
	}
)

func (x TextureTilingWrap) Enum() *TextureTilingWrap {
	p := new(TextureTilingWrap)
	*p = x
	return p
}

func (x TextureTilingWrap) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TextureTilingWrap) Descriptor() protoreflect.EnumDescriptor {
	return file_TSCH3DArchives_proto_enumTypes[2].Descriptor()
}

func (TextureTilingWrap) Type() protoreflect.EnumType {
	return &file_TSCH3DArchives_proto_enumTypes[2]
}

func (x TextureTilingWrap) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TextureTilingWrap) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TextureTilingWrap(num)
	return nil
}

// Deprecated: Use TextureTilingWrap.Descriptor instead.
func (TextureTilingWrap) EnumDescriptor() ([]byte, []int) {
	return file_TSCH3DArchives_proto_rawDescGZIP(), []int{2}
}

type TextureTilingXPosition int32

const (
	TextureTilingXPosition_textureTilingXPositionLeft   TextureTilingXPosition = 0
	TextureTilingXPosition_textureTilingXPositionCenter TextureTilingXPosition = 1
	TextureTilingXPosition_textureTilingXPositionRight  TextureTilingXPosition = 2
)

// Enum value maps for TextureTilingXPosition.
var (
	TextureTilingXPosition_name = map[int32]string{
		0: "textureTilingXPositionLeft",
		1: "textureTilingXPositionCenter",
		2: "textureTilingXPositionRight",
	}
	TextureTilingXPosition_value = map[string]int32{
		"textureTilingXPositionLeft":   0,
		"textureTilingXPositionCenter": 1,
		"textureTilingXPositionRight":  2,
	}
)

func (x TextureTilingXPosition) Enum() *TextureTilingXPosition {
	p := new(TextureTilingXPosition)
	*p = x
	return p
}

func (x TextureTilingXPosition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TextureTilingXPosition) Descriptor() protoreflect.EnumDescriptor {
	return file_TSCH3DArchives_proto_enumTypes[3].Descriptor()
}

func (TextureTilingXPosition) Type() protoreflect.EnumType {
	return &file_TSCH3DArchives_proto_enumTypes[3]
}

func (x TextureTilingXPosition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TextureTilingXPosition) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TextureTilingXPosition(num)
	return nil
}

// Deprecated: Use TextureTilingXPosition.Descriptor instead.
func (TextureTilingXPosition) EnumDescriptor() ([]byte, []int) {
	return file_TSCH3DArchives_proto_rawDescGZIP(), []int{3}
}

type TextureTilingYPosition int32

const (
	TextureTilingYPosition_textureTilingYPositionTop    TextureTilingYPosition = 0
	TextureTilingYPosition_textureTilingYPositionMiddle TextureTilingYPosition = 1
	TextureTilingYPosition_textureTilingYPositionBottom TextureTilingYPosition = 2
)

// Enum value maps for TextureTilingYPosition.
var (
	TextureTilingYPosition_name = map[int32]string{
		0: "textureTilingYPositionTop",
		1: "textureTilingYPositionMiddle",
		2: "textureTilingYPositionBottom",
	}
	TextureTilingYPosition_value = map[string]int32{
		"textureTilingYPositionTop":    0,
		"textureTilingYPositionMiddle": 1,
		"textureTilingYPositionBottom": 2,
	}
)

func (x TextureTilingYPosition) Enum() *TextureTilingYPosition {
	p := new(TextureTilingYPosition)
	*p = x
	return p
}

func (x TextureTilingYPosition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TextureTilingYPosition) Descriptor() protoreflect.EnumDescriptor {
	return file_TSCH3DArchives_proto_enumTypes[4].Descriptor()
}

func (TextureTilingYPosition) Type() protoreflect.EnumType {
	return &file_TSCH3DArchives_proto_enumTypes[4]
}

func (x TextureTilingYPosition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TextureTilingYPosition) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TextureTilingYPosition(num)
	return nil
}

// Deprecated: Use TextureTilingYPosition.Descriptor instead.
func (TextureTilingYPosition) EnumDescriptor() ([]byte, []int) {
	return file_TSCH3DArchives_proto_rawDescGZIP(), []int{4}
}

type TextureTilingContinuity int32

const (
	TextureTilingContinuity_textureTilingContinuityNone     TextureTilingContinuity = 0
	TextureTilingContinuity_textureTilingContinuityGlobal   TextureTilingContinuity = 1
	TextureTilingContinuity_textureTilingContinuitySeries   TextureTilingContinuity = 2
	TextureTilingContinuity_textureTilingContinuityJittered TextureTilingContinuity = 3
)

// Enum value maps for TextureTilingContinuity.
var (
	TextureTilingContinuity_name = map[int32]string{
		0: "textureTilingContinuityNone",
		1: "textureTilingContinuityGlobal",
		2: "textureTilingContinuitySeries",
		3: "textureTilingContinuityJittered",
	}
	TextureTilingContinuity_value = map[string]int32{
		"textureTilingContinuityNone":     0,
		"textureTilingContinuityGlobal":   1,
		"textureTilingContinuitySeries":   2,
		"textureTilingContinuityJittered": 3,
	}
)

func (x TextureTilingContinuity) Enum() *TextureTilingContinuity {
	p := new(TextureTilingContinuity)
	*p = x
	return p
}

func (x TextureTilingContinuity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TextureTilingContinuity) Descriptor() protoreflect.EnumDescriptor {
	return file_TSCH3DArchives_proto_enumTypes[5].Descriptor()
}

func (TextureTilingContinuity) Type() protoreflect.EnumType {
	return &file_TSCH3DArchives_proto_enumTypes[5]
}

func (x TextureTilingContinuity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TextureTilingContinuity) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TextureTilingContinuity(num)
	return nil
}

// Deprecated: Use TextureTilingContinuity.Descriptor instead.
func (TextureTilingContinuity) EnumDescriptor() ([]byte, []int) {
	return file_TSCH3DArchives_proto_rawDescGZIP(), []int{5}
}

type FillPropertyType int32

const (
	FillPropertyType_fillPropertyTypeUndefined FillPropertyType = 0
	FillPropertyType_fillPropertyTypeArea      FillPropertyType = 1
	FillPropertyType_fillPropertyTypeBar       FillPropertyType = 2
	FillPropertyType_fillPropertyTypeColumn    FillPropertyType = 3
	FillPropertyType_fillPropertyTypeLine      FillPropertyType = 4
	FillPropertyType_fillPropertyTypePie       FillPropertyType = 5
)

// Enum value maps for FillPropertyType.
var (
	FillPropertyType_name = map[int32]string{
		0: "fillPropertyTypeUndefined",
		1: "fillPropertyTypeArea",
		2: "fillPropertyTypeBar",
		3: "fillPropertyTypeColumn",
		4: "fillPropertyTypeLine",
		5: "fillPropertyTypePie",
	}
	FillPropertyType_value = map[string]int32{
		"fillPropertyTypeUndefined": 0,
		"fillPropertyTypeArea":      1,
		"fillPropertyTypeBar":       2,
		"fillPropertyTypeColumn":    3,
		"fillPropertyTypeLine":      4,
		"fillPropertyTypePie":       5,
	}
)

func (x FillPropertyType) Enum() *FillPropertyType {
	p := new(FillPropertyType)
	*p = x
	return p
}

func (x FillPropertyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FillPropertyType) Descriptor() protoreflect.EnumDescriptor {
	return file_TSCH3DArchives_proto_enumTypes[6].Descriptor()
}

func (FillPropertyType) Type() protoreflect.EnumType {
	return &file_TSCH3DArchives_proto_enumTypes[6]
}

func (x FillPropertyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *FillPropertyType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = FillPropertyType(num)
	return nil
}

// Deprecated: Use FillPropertyType.Descriptor instead.
func (FillPropertyType) EnumDescriptor() ([]byte, []int) {
	return file_TSCH3DArchives_proto_rawDescGZIP(), []int{6}
}

type Chart3DEnvironmentPackageArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Materials []*Chart3DEnvironmentMaterialArchive `protobuf:"bytes,1,rep,name=materials" json:"materials,omitempty"`
}

func (x *Chart3DEnvironmentPackageArchive) Reset() {
	*x = Chart3DEnvironmentPackageArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCH3DArchives_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chart3DEnvironmentPackageArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chart3DEnvironmentPackageArchive) ProtoMessage() {}

func (x *Chart3DEnvironmentPackageArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCH3DArchives_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chart3DEnvironmentPackageArchive.ProtoReflect.Descriptor instead.
func (*Chart3DEnvironmentPackageArchive) Descriptor() ([]byte, []int) {
	return file_TSCH3DArchives_proto_rawDescGZIP(), []int{0}
}

func (x *Chart3DEnvironmentPackageArchive) GetMaterials() []*Chart3DEnvironmentMaterialArchive {
	if x != nil {
		return x.Materials
	}
	return nil
}

type Chart3DFillArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lightingmodel *Chart3DLightingModelArchive `protobuf:"bytes,1,opt,name=lightingmodel" json:"lightingmodel,omitempty"`
	TexturesetId  *string                      `protobuf:"bytes,2,opt,name=textureset_id,json=texturesetId" json:"textureset_id,omitempty"`
	FillType      *FillPropertyType            `protobuf:"varint,3,opt,name=fill_type,json=fillType,enum=TSCH.FillPropertyType" json:"fill_type,omitempty"`
	SeriesIndex   *uint32                      `protobuf:"varint,4,opt,name=series_index,json=seriesIndex" json:"series_index,omitempty"`
}

func (x *Chart3DFillArchive) Reset() {
	*x = Chart3DFillArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCH3DArchives_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chart3DFillArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chart3DFillArchive) ProtoMessage() {}

func (x *Chart3DFillArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCH3DArchives_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chart3DFillArchive.ProtoReflect.Descriptor instead.
func (*Chart3DFillArchive) Descriptor() ([]byte, []int) {
	return file_TSCH3DArchives_proto_rawDescGZIP(), []int{1}
}

func (x *Chart3DFillArchive) GetLightingmodel() *Chart3DLightingModelArchive {
	if x != nil {
		return x.Lightingmodel
	}
	return nil
}

func (x *Chart3DFillArchive) GetTexturesetId() string {
	if x != nil && x.TexturesetId != nil {
		return *x.TexturesetId
	}
	return ""
}

func (x *Chart3DFillArchive) GetFillType() FillPropertyType {
	if x != nil && x.FillType != nil {
		return *x.FillType
	}
	return FillPropertyType_fillPropertyTypeUndefined
}

func (x *Chart3DFillArchive) GetSeriesIndex() uint32 {
	if x != nil && x.SeriesIndex != nil {
		return *x.SeriesIndex
	}
	return 0
}

type Chart3DPointLightArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position *Chart3DVectorArchive `protobuf:"bytes,1,req,name=position" json:"position,omitempty"`
}

func (x *Chart3DPointLightArchive) Reset() {
	*x = Chart3DPointLightArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCH3DArchives_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chart3DPointLightArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chart3DPointLightArchive) ProtoMessage() {}

func (x *Chart3DPointLightArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCH3DArchives_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chart3DPointLightArchive.ProtoReflect.Descriptor instead.
func (*Chart3DPointLightArchive) Descriptor() ([]byte, []int) {
	return file_TSCH3DArchives_proto_rawDescGZIP(), []int{2}
}

func (x *Chart3DPointLightArchive) GetPosition() *Chart3DVectorArchive {
	if x != nil {
		return x.Position
	}
	return nil
}

type Chart3DDirectionalLightArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direction *Chart3DVectorArchive `protobuf:"bytes,1,req,name=direction" json:"direction,omitempty"`
}

func (x *Chart3DDirectionalLightArchive) Reset() {
	*x = Chart3DDirectionalLightArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCH3DArchives_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chart3DDirectionalLightArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chart3DDirectionalLightArchive) ProtoMessage() {}

func (x *Chart3DDirectionalLightArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCH3DArchives_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chart3DDirectionalLightArchive.ProtoReflect.Descriptor instead.
func (*Chart3DDirectionalLightArchive) Descriptor() ([]byte, []int) {
	return file_TSCH3DArchives_proto_rawDescGZIP(), []int{3}
}

func (x *Chart3DDirectionalLightArchive) GetDirection() *Chart3DVectorArchive {
	if x != nil {
		return x.Direction
	}
	return nil
}

type Chart3DSpotLightArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position  *Chart3DVectorArchive `protobuf:"bytes,1,req,name=position" json:"position,omitempty"`
	Direction *Chart3DVectorArchive `protobuf:"bytes,2,req,name=direction" json:"direction,omitempty"`
	Cutoff    *float32              `protobuf:"fixed32,3,req,name=cutoff" json:"cutoff,omitempty"`
	Dropoff   *float32              `protobuf:"fixed32,4,req,name=dropoff" json:"dropoff,omitempty"`
}

func (x *Chart3DSpotLightArchive) Reset() {
	*x = Chart3DSpotLightArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCH3DArchives_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chart3DSpotLightArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chart3DSpotLightArchive) ProtoMessage() {}

func (x *Chart3DSpotLightArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCH3DArchives_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chart3DSpotLightArchive.ProtoReflect.Descriptor instead.
func (*Chart3DSpotLightArchive) Descriptor() ([]byte, []int) {
	return file_TSCH3DArchives_proto_rawDescGZIP(), []int{4}
}

func (x *Chart3DSpotLightArchive) GetPosition() *Chart3DVectorArchive {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *Chart3DSpotLightArchive) GetDirection() *Chart3DVectorArchive {
	if x != nil {
		return x.Direction
	}
	return nil
}

func (x *Chart3DSpotLightArchive) GetCutoff() float32 {
	if x != nil && x.Cutoff != nil {
		return *x.Cutoff
	}
	return 0
}

func (x *Chart3DSpotLightArchive) GetDropoff() float32 {
	if x != nil && x.Dropoff != nil {
		return *x.Dropoff
	}
	return 0
}

type Chart3DLightArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             *string                         `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	AmbientColor     *Chart3DVectorArchive           `protobuf:"bytes,2,req,name=ambient_color,json=ambientColor" json:"ambient_color,omitempty"`
	DiffuseColor     *Chart3DVectorArchive           `protobuf:"bytes,3,req,name=diffuse_color,json=diffuseColor" json:"diffuse_color,omitempty"`
	SpecularColor    *Chart3DVectorArchive           `protobuf:"bytes,4,req,name=specular_color,json=specularColor" json:"specular_color,omitempty"`
	Intensity        *float32                        `protobuf:"fixed32,5,req,name=intensity" json:"intensity,omitempty"`
	Attenuation      *Chart3DVectorArchive           `protobuf:"bytes,6,req,name=attenuation" json:"attenuation,omitempty"`
	CoordinateSpace  *uint32                         `protobuf:"varint,7,req,name=coordinate_space,json=coordinateSpace" json:"coordinate_space,omitempty"`
	Enabled          *bool                           `protobuf:"varint,8,req,name=enabled" json:"enabled,omitempty"`
	PointLight       *Chart3DPointLightArchive       `protobuf:"bytes,9,opt,name=point_light,json=pointLight" json:"point_light,omitempty"`
	DirectionalLight *Chart3DDirectionalLightArchive `protobuf:"bytes,10,opt,name=directional_light,json=directionalLight" json:"directional_light,omitempty"`
	SpotLight        *Chart3DSpotLightArchive        `protobuf:"bytes,11,opt,name=spot_light,json=spotLight" json:"spot_light,omitempty"`
}

func (x *Chart3DLightArchive) Reset() {
	*x = Chart3DLightArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCH3DArchives_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chart3DLightArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chart3DLightArchive) ProtoMessage() {}

func (x *Chart3DLightArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCH3DArchives_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chart3DLightArchive.ProtoReflect.Descriptor instead.
func (*Chart3DLightArchive) Descriptor() ([]byte, []int) {
	return file_TSCH3DArchives_proto_rawDescGZIP(), []int{5}
}

func (x *Chart3DLightArchive) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Chart3DLightArchive) GetAmbientColor() *Chart3DVectorArchive {
	if x != nil {
		return x.AmbientColor
	}
	return nil
}

func (x *Chart3DLightArchive) GetDiffuseColor() *Chart3DVectorArchive {
	if x != nil {
		return x.DiffuseColor
	}
	return nil
}

func (x *Chart3DLightArchive) GetSpecularColor() *Chart3DVectorArchive {
	if x != nil {
		return x.SpecularColor
	}
	return nil
}

func (x *Chart3DLightArchive) GetIntensity() float32 {
	if x != nil && x.Intensity != nil {
		return *x.Intensity
	}
	return 0
}

func (x *Chart3DLightArchive) GetAttenuation() *Chart3DVectorArchive {
	if x != nil {
		return x.Attenuation
	}
	return nil
}

func (x *Chart3DLightArchive) GetCoordinateSpace() uint32 {
	if x != nil && x.CoordinateSpace != nil {
		return *x.CoordinateSpace
	}
	return 0
}

func (x *Chart3DLightArchive) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *Chart3DLightArchive) GetPointLight() *Chart3DPointLightArchive {
	if x != nil {
		return x.PointLight
	}
	return nil
}

func (x *Chart3DLightArchive) GetDirectionalLight() *Chart3DDirectionalLightArchive {
	if x != nil {
		return x.DirectionalLight
	}
	return nil
}

func (x *Chart3DLightArchive) GetSpotLight() *Chart3DSpotLightArchive {
	if x != nil {
		return x.SpotLight
	}
	return nil
}

type Chart3DLightingModelArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phong         *Chart3DPhongLightingModelArchive         `protobuf:"bytes,1,opt,name=phong" json:"phong,omitempty"`
	FixedFunction *Chart3DFixedFunctionLightingModelArchive `protobuf:"bytes,2,opt,name=fixed_function,json=fixedFunction" json:"fixed_function,omitempty"`
	Environment   *Chart3DEnvironmentPackageArchive         `protobuf:"bytes,3,opt,name=environment" json:"environment,omitempty"`
}

func (x *Chart3DLightingModelArchive) Reset() {
	*x = Chart3DLightingModelArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCH3DArchives_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chart3DLightingModelArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chart3DLightingModelArchive) ProtoMessage() {}

func (x *Chart3DLightingModelArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCH3DArchives_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chart3DLightingModelArchive.ProtoReflect.Descriptor instead.
func (*Chart3DLightingModelArchive) Descriptor() ([]byte, []int) {
	return file_TSCH3DArchives_proto_rawDescGZIP(), []int{6}
}

func (x *Chart3DLightingModelArchive) GetPhong() *Chart3DPhongLightingModelArchive {
	if x != nil {
		return x.Phong
	}
	return nil
}

func (x *Chart3DLightingModelArchive) GetFixedFunction() *Chart3DFixedFunctionLightingModelArchive {
	if x != nil {
		return x.FixedFunction
	}
	return nil
}

func (x *Chart3DLightingModelArchive) GetEnvironment() *Chart3DEnvironmentPackageArchive {
	if x != nil {
		return x.Environment
	}
	return nil
}

type Chart3DLightingPackageArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   *string                `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Lights []*Chart3DLightArchive `protobuf:"bytes,2,rep,name=lights" json:"lights,omitempty"`
}

func (x *Chart3DLightingPackageArchive) Reset() {
	*x = Chart3DLightingPackageArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCH3DArchives_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chart3DLightingPackageArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chart3DLightingPackageArchive) ProtoMessage() {}

func (x *Chart3DLightingPackageArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCH3DArchives_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chart3DLightingPackageArchive.ProtoReflect.Descriptor instead.
func (*Chart3DLightingPackageArchive) Descriptor() ([]byte, []int) {
	return file_TSCH3DArchives_proto_rawDescGZIP(), []int{7}
}

func (x *Chart3DLightingPackageArchive) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Chart3DLightingPackageArchive) GetLights() []*Chart3DLightArchive {
	if x != nil {
		return x.Lights
	}
	return nil
}

type Chart3DTexturesMaterialArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Color    *Chart3DVectorArchive                `protobuf:"bytes,1,req,name=color" json:"color,omitempty"`
	Textures []*Chart3DTSPImageDataTextureArchive `protobuf:"bytes,2,rep,name=textures" json:"textures,omitempty"`
}

func (x *Chart3DTexturesMaterialArchive) Reset() {
	*x = Chart3DTexturesMaterialArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCH3DArchives_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chart3DTexturesMaterialArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chart3DTexturesMaterialArchive) ProtoMessage() {}

func (x *Chart3DTexturesMaterialArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCH3DArchives_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chart3DTexturesMaterialArchive.ProtoReflect.Descriptor instead.
func (*Chart3DTexturesMaterialArchive) Descriptor() ([]byte, []int) {
	return file_TSCH3DArchives_proto_rawDescGZIP(), []int{8}
}

func (x *Chart3DTexturesMaterialArchive) GetColor() *Chart3DVectorArchive {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *Chart3DTexturesMaterialArchive) GetTextures() []*Chart3DTSPImageDataTextureArchive {
	if x != nil {
		return x.Textures
	}
	return nil
}

type Chart3DEmissiveMaterialArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super   *Chart3DTexturesMaterialArchive     `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Tilings []*Chart3DImageTextureTilingArchive `protobuf:"bytes,2,rep,name=tilings" json:"tilings,omitempty"`
}

func (x *Chart3DEmissiveMaterialArchive) Reset() {
	*x = Chart3DEmissiveMaterialArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCH3DArchives_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chart3DEmissiveMaterialArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chart3DEmissiveMaterialArchive) ProtoMessage() {}

func (x *Chart3DEmissiveMaterialArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCH3DArchives_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chart3DEmissiveMaterialArchive.ProtoReflect.Descriptor instead.
func (*Chart3DEmissiveMaterialArchive) Descriptor() ([]byte, []int) {
	return file_TSCH3DArchives_proto_rawDescGZIP(), []int{9}
}

func (x *Chart3DEmissiveMaterialArchive) GetSuper() *Chart3DTexturesMaterialArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *Chart3DEmissiveMaterialArchive) GetTilings() []*Chart3DImageTextureTilingArchive {
	if x != nil {
		return x.Tilings
	}
	return nil
}

type Chart3DDiffuseMaterialArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super   *Chart3DTexturesMaterialArchive     `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Tilings []*Chart3DImageTextureTilingArchive `protobuf:"bytes,2,rep,name=tilings" json:"tilings,omitempty"`
}

func (x *Chart3DDiffuseMaterialArchive) Reset() {
	*x = Chart3DDiffuseMaterialArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCH3DArchives_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chart3DDiffuseMaterialArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chart3DDiffuseMaterialArchive) ProtoMessage() {}

func (x *Chart3DDiffuseMaterialArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCH3DArchives_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chart3DDiffuseMaterialArchive.ProtoReflect.Descriptor instead.
func (*Chart3DDiffuseMaterialArchive) Descriptor() ([]byte, []int) {
	return file_TSCH3DArchives_proto_rawDescGZIP(), []int{10}
}

func (x *Chart3DDiffuseMaterialArchive) GetSuper() *Chart3DTexturesMaterialArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *Chart3DDiffuseMaterialArchive) GetTilings() []*Chart3DImageTextureTilingArchive {
	if x != nil {
		return x.Tilings
	}
	return nil
}

type Chart3DModulateMaterialArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super   *Chart3DTexturesMaterialArchive     `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Tilings []*Chart3DImageTextureTilingArchive `protobuf:"bytes,2,rep,name=tilings" json:"tilings,omitempty"`
}

func (x *Chart3DModulateMaterialArchive) Reset() {
	*x = Chart3DModulateMaterialArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCH3DArchives_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chart3DModulateMaterialArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chart3DModulateMaterialArchive) ProtoMessage() {}

func (x *Chart3DModulateMaterialArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCH3DArchives_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chart3DModulateMaterialArchive.ProtoReflect.Descriptor instead.
func (*Chart3DModulateMaterialArchive) Descriptor() ([]byte, []int) {
	return file_TSCH3DArchives_proto_rawDescGZIP(), []int{11}
}

func (x *Chart3DModulateMaterialArchive) GetSuper() *Chart3DTexturesMaterialArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *Chart3DModulateMaterialArchive) GetTilings() []*Chart3DImageTextureTilingArchive {
	if x != nil {
		return x.Tilings
	}
	return nil
}

type Chart3DSpecularMaterialArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super   *Chart3DTexturesMaterialArchive     `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Tilings []*Chart3DImageTextureTilingArchive `protobuf:"bytes,2,rep,name=tilings" json:"tilings,omitempty"`
}

func (x *Chart3DSpecularMaterialArchive) Reset() {
	*x = Chart3DSpecularMaterialArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCH3DArchives_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chart3DSpecularMaterialArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chart3DSpecularMaterialArchive) ProtoMessage() {}

func (x *Chart3DSpecularMaterialArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCH3DArchives_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chart3DSpecularMaterialArchive.ProtoReflect.Descriptor instead.
func (*Chart3DSpecularMaterialArchive) Descriptor() ([]byte, []int) {
	return file_TSCH3DArchives_proto_rawDescGZIP(), []int{12}
}

func (x *Chart3DSpecularMaterialArchive) GetSuper() *Chart3DTexturesMaterialArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *Chart3DSpecularMaterialArchive) GetTilings() []*Chart3DImageTextureTilingArchive {
	if x != nil {
		return x.Tilings
	}
	return nil
}

type Chart3DShininessMaterialArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super   *Chart3DTexturesMaterialArchive     `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Tilings []*Chart3DImageTextureTilingArchive `protobuf:"bytes,2,rep,name=tilings" json:"tilings,omitempty"`
}

func (x *Chart3DShininessMaterialArchive) Reset() {
	*x = Chart3DShininessMaterialArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCH3DArchives_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chart3DShininessMaterialArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chart3DShininessMaterialArchive) ProtoMessage() {}

func (x *Chart3DShininessMaterialArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCH3DArchives_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chart3DShininessMaterialArchive.ProtoReflect.Descriptor instead.
func (*Chart3DShininessMaterialArchive) Descriptor() ([]byte, []int) {
	return file_TSCH3DArchives_proto_rawDescGZIP(), []int{13}
}

func (x *Chart3DShininessMaterialArchive) GetSuper() *Chart3DTexturesMaterialArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *Chart3DShininessMaterialArchive) GetTilings() []*Chart3DImageTextureTilingArchive {
	if x != nil {
		return x.Tilings
	}
	return nil
}

type Chart3DEnvironmentMaterialArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super           *Chart3DTexturesMaterialArchive         `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	OBSOLETETilings []*Chart3DBaseImageTextureTilingArchive `protobuf:"bytes,2,rep,name=OBSOLETE_tilings,json=OBSOLETETilings" json:"OBSOLETE_tilings,omitempty"`
	DecalMode       *bool                                   `protobuf:"varint,3,opt,name=decalMode" json:"decalMode,omitempty"`
	Tilings         []*Chart3DImageTextureTilingArchive     `protobuf:"bytes,4,rep,name=tilings" json:"tilings,omitempty"`
}

func (x *Chart3DEnvironmentMaterialArchive) Reset() {
	*x = Chart3DEnvironmentMaterialArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCH3DArchives_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chart3DEnvironmentMaterialArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chart3DEnvironmentMaterialArchive) ProtoMessage() {}

func (x *Chart3DEnvironmentMaterialArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCH3DArchives_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chart3DEnvironmentMaterialArchive.ProtoReflect.Descriptor instead.
func (*Chart3DEnvironmentMaterialArchive) Descriptor() ([]byte, []int) {
	return file_TSCH3DArchives_proto_rawDescGZIP(), []int{14}
}

func (x *Chart3DEnvironmentMaterialArchive) GetSuper() *Chart3DTexturesMaterialArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *Chart3DEnvironmentMaterialArchive) GetOBSOLETETilings() []*Chart3DBaseImageTextureTilingArchive {
	if x != nil {
		return x.OBSOLETETilings
	}
	return nil
}

func (x *Chart3DEnvironmentMaterialArchive) GetDecalMode() bool {
	if x != nil && x.DecalMode != nil {
		return *x.DecalMode
	}
	return false
}

func (x *Chart3DEnvironmentMaterialArchive) GetTilings() []*Chart3DImageTextureTilingArchive {
	if x != nil {
		return x.Tilings
	}
	return nil
}

type Chart3DFixedFunctionLightingModelArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Materials *Chart3DPhongMaterialPackageArchive `protobuf:"bytes,1,req,name=materials" json:"materials,omitempty"`
}

func (x *Chart3DFixedFunctionLightingModelArchive) Reset() {
	*x = Chart3DFixedFunctionLightingModelArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCH3DArchives_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chart3DFixedFunctionLightingModelArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chart3DFixedFunctionLightingModelArchive) ProtoMessage() {}

func (x *Chart3DFixedFunctionLightingModelArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCH3DArchives_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chart3DFixedFunctionLightingModelArchive.ProtoReflect.Descriptor instead.
func (*Chart3DFixedFunctionLightingModelArchive) Descriptor() ([]byte, []int) {
	return file_TSCH3DArchives_proto_rawDescGZIP(), []int{15}
}

func (x *Chart3DFixedFunctionLightingModelArchive) GetMaterials() *Chart3DPhongMaterialPackageArchive {
	if x != nil {
		return x.Materials
	}
	return nil
}

type Chart3DPhongLightingModelArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Materials *Chart3DPhongMaterialPackageArchive `protobuf:"bytes,1,req,name=materials" json:"materials,omitempty"`
}

func (x *Chart3DPhongLightingModelArchive) Reset() {
	*x = Chart3DPhongLightingModelArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCH3DArchives_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chart3DPhongLightingModelArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chart3DPhongLightingModelArchive) ProtoMessage() {}

func (x *Chart3DPhongLightingModelArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCH3DArchives_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chart3DPhongLightingModelArchive.ProtoReflect.Descriptor instead.
func (*Chart3DPhongLightingModelArchive) Descriptor() ([]byte, []int) {
	return file_TSCH3DArchives_proto_rawDescGZIP(), []int{16}
}

func (x *Chart3DPhongLightingModelArchive) GetMaterials() *Chart3DPhongMaterialPackageArchive {
	if x != nil {
		return x.Materials
	}
	return nil
}

type Chart3DPhongMaterialPackageArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Emissive  *Chart3DEmissiveMaterialArchive  `protobuf:"bytes,1,opt,name=emissive" json:"emissive,omitempty"`
	Diffuse   *Chart3DDiffuseMaterialArchive   `protobuf:"bytes,2,opt,name=diffuse" json:"diffuse,omitempty"`
	Modulate  *Chart3DModulateMaterialArchive  `protobuf:"bytes,3,opt,name=modulate" json:"modulate,omitempty"`
	Specular  *Chart3DSpecularMaterialArchive  `protobuf:"bytes,4,opt,name=specular" json:"specular,omitempty"`
	Shininess *Chart3DShininessMaterialArchive `protobuf:"bytes,5,opt,name=shininess" json:"shininess,omitempty"`
}

func (x *Chart3DPhongMaterialPackageArchive) Reset() {
	*x = Chart3DPhongMaterialPackageArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCH3DArchives_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chart3DPhongMaterialPackageArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chart3DPhongMaterialPackageArchive) ProtoMessage() {}

func (x *Chart3DPhongMaterialPackageArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCH3DArchives_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chart3DPhongMaterialPackageArchive.ProtoReflect.Descriptor instead.
func (*Chart3DPhongMaterialPackageArchive) Descriptor() ([]byte, []int) {
	return file_TSCH3DArchives_proto_rawDescGZIP(), []int{17}
}

func (x *Chart3DPhongMaterialPackageArchive) GetEmissive() *Chart3DEmissiveMaterialArchive {
	if x != nil {
		return x.Emissive
	}
	return nil
}

func (x *Chart3DPhongMaterialPackageArchive) GetDiffuse() *Chart3DDiffuseMaterialArchive {
	if x != nil {
		return x.Diffuse
	}
	return nil
}

func (x *Chart3DPhongMaterialPackageArchive) GetModulate() *Chart3DModulateMaterialArchive {
	if x != nil {
		return x.Modulate
	}
	return nil
}

func (x *Chart3DPhongMaterialPackageArchive) GetSpecular() *Chart3DSpecularMaterialArchive {
	if x != nil {
		return x.Specular
	}
	return nil
}

func (x *Chart3DPhongMaterialPackageArchive) GetShininess() *Chart3DShininessMaterialArchive {
	if x != nil {
		return x.Shininess
	}
	return nil
}

type Chart3DTSPImageDataTextureArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data               *DataReference `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
	Mipmapdata         *DataReference `protobuf:"bytes,4,opt,name=mipmapdata" json:"mipmapdata,omitempty"`
	DatabaseData       *Reference     `protobuf:"bytes,1,opt,name=database_data,json=databaseData" json:"database_data,omitempty"`
	DatabaseMipmapdata *Reference     `protobuf:"bytes,2,opt,name=database_mipmapdata,json=databaseMipmapdata" json:"database_mipmapdata,omitempty"`
}

func (x *Chart3DTSPImageDataTextureArchive) Reset() {
	*x = Chart3DTSPImageDataTextureArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCH3DArchives_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chart3DTSPImageDataTextureArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chart3DTSPImageDataTextureArchive) ProtoMessage() {}

func (x *Chart3DTSPImageDataTextureArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCH3DArchives_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chart3DTSPImageDataTextureArchive.ProtoReflect.Descriptor instead.
func (*Chart3DTSPImageDataTextureArchive) Descriptor() ([]byte, []int) {
	return file_TSCH3DArchives_proto_rawDescGZIP(), []int{18}
}

func (x *Chart3DTSPImageDataTextureArchive) GetData() *DataReference {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Chart3DTSPImageDataTextureArchive) GetMipmapdata() *DataReference {
	if x != nil {
		return x.Mipmapdata
	}
	return nil
}

func (x *Chart3DTSPImageDataTextureArchive) GetDatabaseData() *Reference {
	if x != nil {
		return x.DatabaseData
	}
	return nil
}

func (x *Chart3DTSPImageDataTextureArchive) GetDatabaseMipmapdata() *Reference {
	if x != nil {
		return x.DatabaseMipmapdata
	}
	return nil
}

type Chart3DBaseImageTextureTilingArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scale    *Chart3DVectorArchive `protobuf:"bytes,1,opt,name=scale" json:"scale,omitempty"`
	Rotation *float32              `protobuf:"fixed32,2,opt,name=rotation" json:"rotation,omitempty"`
}

func (x *Chart3DBaseImageTextureTilingArchive) Reset() {
	*x = Chart3DBaseImageTextureTilingArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCH3DArchives_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chart3DBaseImageTextureTilingArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chart3DBaseImageTextureTilingArchive) ProtoMessage() {}

func (x *Chart3DBaseImageTextureTilingArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCH3DArchives_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chart3DBaseImageTextureTilingArchive.ProtoReflect.Descriptor instead.
func (*Chart3DBaseImageTextureTilingArchive) Descriptor() ([]byte, []int) {
	return file_TSCH3DArchives_proto_rawDescGZIP(), []int{19}
}

func (x *Chart3DBaseImageTextureTilingArchive) GetScale() *Chart3DVectorArchive {
	if x != nil {
		return x.Scale
	}
	return nil
}

func (x *Chart3DBaseImageTextureTilingArchive) GetRotation() float32 {
	if x != nil && x.Rotation != nil {
		return *x.Rotation
	}
	return 0
}

type Chart3DImageTextureTilingArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super       *Chart3DBaseImageTextureTilingArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Mode        *TextureTilingMode                    `protobuf:"varint,2,opt,name=mode,enum=TSCH.TextureTilingMode" json:"mode,omitempty"`
	Wrap        *TextureTilingWrap                    `protobuf:"varint,3,opt,name=wrap,enum=TSCH.TextureTilingWrap" json:"wrap,omitempty"`
	Face        *TextureTilingFace                    `protobuf:"varint,4,opt,name=face,enum=TSCH.TextureTilingFace" json:"face,omitempty"`
	Xposition   *TextureTilingXPosition               `protobuf:"varint,5,opt,name=xposition,enum=TSCH.TextureTilingXPosition" json:"xposition,omitempty"`
	Yposition   *TextureTilingYPosition               `protobuf:"varint,6,opt,name=yposition,enum=TSCH.TextureTilingYPosition" json:"yposition,omitempty"`
	Scontinuity *TextureTilingContinuity              `protobuf:"varint,7,opt,name=scontinuity,enum=TSCH.TextureTilingContinuity" json:"scontinuity,omitempty"`
	Tcontinuity *TextureTilingContinuity              `protobuf:"varint,8,opt,name=tcontinuity,enum=TSCH.TextureTilingContinuity" json:"tcontinuity,omitempty"`
	Reveal      *bool                                 `protobuf:"varint,9,opt,name=reveal" json:"reveal,omitempty"`
}

func (x *Chart3DImageTextureTilingArchive) Reset() {
	*x = Chart3DImageTextureTilingArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCH3DArchives_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chart3DImageTextureTilingArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chart3DImageTextureTilingArchive) ProtoMessage() {}

func (x *Chart3DImageTextureTilingArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCH3DArchives_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chart3DImageTextureTilingArchive.ProtoReflect.Descriptor instead.
func (*Chart3DImageTextureTilingArchive) Descriptor() ([]byte, []int) {
	return file_TSCH3DArchives_proto_rawDescGZIP(), []int{20}
}

func (x *Chart3DImageTextureTilingArchive) GetSuper() *Chart3DBaseImageTextureTilingArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *Chart3DImageTextureTilingArchive) GetMode() TextureTilingMode {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return TextureTilingMode_textureTilingModeNone
}

func (x *Chart3DImageTextureTilingArchive) GetWrap() TextureTilingWrap {
	if x != nil && x.Wrap != nil {
		return *x.Wrap
	}
	return TextureTilingWrap_textureTilingWrapProjected
}

func (x *Chart3DImageTextureTilingArchive) GetFace() TextureTilingFace {
	if x != nil && x.Face != nil {
		return *x.Face
	}
	return TextureTilingFace_textureTilingFaceAll
}

func (x *Chart3DImageTextureTilingArchive) GetXposition() TextureTilingXPosition {
	if x != nil && x.Xposition != nil {
		return *x.Xposition
	}
	return TextureTilingXPosition_textureTilingXPositionLeft
}

func (x *Chart3DImageTextureTilingArchive) GetYposition() TextureTilingYPosition {
	if x != nil && x.Yposition != nil {
		return *x.Yposition
	}
	return TextureTilingYPosition_textureTilingYPositionTop
}

func (x *Chart3DImageTextureTilingArchive) GetScontinuity() TextureTilingContinuity {
	if x != nil && x.Scontinuity != nil {
		return *x.Scontinuity
	}
	return TextureTilingContinuity_textureTilingContinuityNone
}

func (x *Chart3DImageTextureTilingArchive) GetTcontinuity() TextureTilingContinuity {
	if x != nil && x.Tcontinuity != nil {
		return *x.Tcontinuity
	}
	return TextureTilingContinuity_textureTilingContinuityNone
}

func (x *Chart3DImageTextureTilingArchive) GetReveal() bool {
	if x != nil && x.Reveal != nil {
		return *x.Reveal
	}
	return false
}

type Chart3DVectorArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X *float32 `protobuf:"fixed32,1,req,name=x" json:"x,omitempty"`
	Y *float32 `protobuf:"fixed32,2,req,name=y" json:"y,omitempty"`
	Z *float32 `protobuf:"fixed32,3,req,name=z" json:"z,omitempty"`
	W *float32 `protobuf:"fixed32,4,req,name=w" json:"w,omitempty"`
}

func (x *Chart3DVectorArchive) Reset() {
	*x = Chart3DVectorArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCH3DArchives_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chart3DVectorArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chart3DVectorArchive) ProtoMessage() {}

func (x *Chart3DVectorArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCH3DArchives_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chart3DVectorArchive.ProtoReflect.Descriptor instead.
func (*Chart3DVectorArchive) Descriptor() ([]byte, []int) {
	return file_TSCH3DArchives_proto_rawDescGZIP(), []int{21}
}

func (x *Chart3DVectorArchive) GetX() float32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *Chart3DVectorArchive) GetY() float32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

func (x *Chart3DVectorArchive) GetZ() float32 {
	if x != nil && x.Z != nil {
		return *x.Z
	}
	return 0
}

func (x *Chart3DVectorArchive) GetW() float32 {
	if x != nil && x.W != nil {
		return *x.W
	}
	return 0
}

var file_TSCH3DArchives_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*FillArchive)(nil),
		ExtensionType: (*Chart3DFillArchive)(nil),
		Field:         100,
		Name:          "TSCH.fill3d",
		Tag:           "bytes,100,opt,name=fill3d",
		Filename:      "TSCH3DArchives.proto",
	},
}

// Extension fields to FillArchive.
var (
	// optional TSCH.Chart3DFillArchive fill3d = 100;
	E_Fill3D = &file_TSCH3DArchives_proto_extTypes[0]
)

var File_TSCH3DArchives_proto protoreflect.FileDescriptor

var file_TSCH3DArchives_proto_rawDesc = []byte{
	0x0a, 0x14, 0x54, 0x53, 0x43, 0x48, 0x33, 0x44, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x54, 0x53, 0x43, 0x48, 0x1a, 0x11, 0x54, 0x53,
	0x50, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x11, 0x54, 0x53, 0x44, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x69, 0x0a, 0x20, 0x43, 0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x45, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x54, 0x53, 0x43, 0x48,
	0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x22, 0xda, 0x01,
	0x0a, 0x12, 0x43, 0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x46, 0x69, 0x6c, 0x6c, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x12, 0x47, 0x0a, 0x0d, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x54, 0x53,
	0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x69,
	0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0d,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x23, 0x0a,
	0x0d, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x33, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x46, 0x69, 0x6c,
	0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x52, 0x0a, 0x18, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x33, 0x44, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5a,
	0x0a, 0x1e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x12, 0x38, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x33, 0x44, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xbd, 0x01, 0x0a, 0x17, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x53, 0x70, 0x6f, 0x74, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38,
	0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x33, 0x44,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x09, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x74, 0x6f,
	0x66, 0x66, 0x18, 0x03, 0x20, 0x02, 0x28, 0x02, 0x52, 0x06, 0x63, 0x75, 0x74, 0x6f, 0x66, 0x66,
	0x12, 0x18, 0x0a, 0x07, 0x64, 0x72, 0x6f, 0x70, 0x6f, 0x66, 0x66, 0x18, 0x04, 0x20, 0x02, 0x28,
	0x02, 0x52, 0x07, 0x64, 0x72, 0x6f, 0x70, 0x6f, 0x66, 0x66, 0x22, 0xe1, 0x04, 0x0a, 0x13, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x61, 0x6d, 0x62, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0c, 0x61, 0x6d, 0x62, 0x69, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x3f, 0x0a, 0x0d, 0x64, 0x69, 0x66, 0x66, 0x75,
	0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0c, 0x64, 0x69, 0x66, 0x66,
	0x75, 0x73, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x41, 0x0a, 0x0e, 0x73, 0x70, 0x65, 0x63,
	0x75, 0x6c, 0x61, 0x72, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0d, 0x73, 0x70,
	0x65, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x02, 0x28, 0x02, 0x52, 0x09,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x12, 0x3c, 0x0a, 0x0b, 0x61, 0x74, 0x74,
	0x65, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x65,
	0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x07, 0x20, 0x02, 0x28,
	0x0d, 0x52, 0x0f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x08, 0x20,
	0x02, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x0b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x33, 0x44,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x0a, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x51, 0x0a,
	0x11, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x10,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x3c, 0x0a, 0x0a, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72,
	0x74, 0x33, 0x44, 0x53, 0x70, 0x6f, 0x74, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x09, 0x73, 0x70, 0x6f, 0x74, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x22, 0xfc,
	0x01, 0x0a, 0x1b, 0x43, 0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x69,
	0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x3c,
	0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x50, 0x68, 0x6f, 0x6e,
	0x67, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x67, 0x12, 0x55, 0x0a, 0x0e,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72,
	0x74, 0x33, 0x44, 0x46, 0x69, 0x78, 0x65, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x0d, 0x66, 0x69, 0x78, 0x65, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x66, 0x0a,
	0x1d, 0x43, 0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x33,
	0x44, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x06, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x22, 0x97, 0x01, 0x0a, 0x1e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x33,
	0x44, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x73, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x43, 0x0a, 0x08, 0x74, 0x65,
	0x78, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x54,
	0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x54, 0x53, 0x50, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x08, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22,
	0x9e, 0x01, 0x0a, 0x1e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x45, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x76, 0x65, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x33, 0x44,
	0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x73, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x40,
	0x0a, 0x07, 0x74, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6c, 0x69, 0x6e, 0x67,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x07, 0x74, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x73,
	0x22, 0x9d, 0x01, 0x0a, 0x1d, 0x43, 0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x44, 0x69, 0x66, 0x66,
	0x75, 0x73, 0x65, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x33, 0x44,
	0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x73, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x40,
	0x0a, 0x07, 0x74, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6c, 0x69, 0x6e, 0x67,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x07, 0x74, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x73,
	0x22, 0x9e, 0x01, 0x0a, 0x1e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x33,
	0x44, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x73, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12,
	0x40, 0x0a, 0x07, 0x74, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6c, 0x69, 0x6e,
	0x67, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x07, 0x74, 0x69, 0x6c, 0x69, 0x6e, 0x67,
	0x73, 0x22, 0x9e, 0x01, 0x0a, 0x1e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x53, 0x70, 0x65,
	0x63, 0x75, 0x6c, 0x61, 0x72, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x33, 0x44, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x73, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x12, 0x40, 0x0a, 0x07, 0x74, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x33, 0x44,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6c, 0x69,
	0x6e, 0x67, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x07, 0x74, 0x69, 0x6c, 0x69, 0x6e,
	0x67, 0x73, 0x22, 0x9f, 0x01, 0x0a, 0x1f, 0x43, 0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x53, 0x68,
	0x69, 0x6e, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x33, 0x44, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x73, 0x4d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x12, 0x40, 0x0a, 0x07, 0x74, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x33, 0x44, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x54, 0x69,
	0x6c, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x07, 0x74, 0x69, 0x6c,
	0x69, 0x6e, 0x67, 0x73, 0x22, 0x96, 0x02, 0x0a, 0x21, 0x43, 0x68, 0x61, 0x72, 0x74, 0x33, 0x44,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x54, 0x53, 0x43, 0x48,
	0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x10, 0x4f, 0x42, 0x53, 0x4f, 0x4c, 0x45,
	0x54, 0x45, 0x5f, 0x74, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x42,
	0x61, 0x73, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x54,
	0x69, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0f, 0x4f, 0x42,
	0x53, 0x4f, 0x4c, 0x45, 0x54, 0x45, 0x54, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x64, 0x65, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x64, 0x65, 0x63, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x74,
	0x69, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x54,
	0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x07, 0x74, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x72, 0x0a,
	0x28, 0x43, 0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x46, 0x69, 0x78, 0x65, 0x64, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x46, 0x0a, 0x09, 0x6d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x54,
	0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x50, 0x68, 0x6f, 0x6e, 0x67,
	0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x73, 0x22, 0x6a, 0x0a, 0x20, 0x43, 0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x50, 0x68, 0x6f, 0x6e,
	0x67, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x46, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x50, 0x68, 0x6f, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x22, 0xee, 0x02,
	0x0a, 0x22, 0x43, 0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x50, 0x68, 0x6f, 0x6e, 0x67, 0x4d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x65, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x76, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x33, 0x44, 0x45, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x76, 0x65, 0x4d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x08, 0x65, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x76, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x64, 0x69, 0x66, 0x66, 0x75, 0x73,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x44, 0x69, 0x66, 0x66, 0x75, 0x73, 0x65, 0x4d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x07, 0x64, 0x69,
	0x66, 0x66, 0x75, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x08, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x73, 0x70, 0x65, 0x63, 0x75,
	0x6c, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x54, 0x53, 0x43, 0x48,
	0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x53, 0x70, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x72,
	0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x08, 0x73, 0x70, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x12, 0x43, 0x0a, 0x09, 0x73, 0x68, 0x69,
	0x6e, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x54,
	0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x53, 0x68, 0x69, 0x6e, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x09, 0x73, 0x68, 0x69, 0x6e, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x22, 0xf5,
	0x01, 0x0a, 0x21, 0x43, 0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x54, 0x53, 0x50, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x0a,
	0x6d, 0x69, 0x70, 0x6d, 0x61, 0x70, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x6d, 0x69, 0x70, 0x6d, 0x61, 0x70, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x33, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x13, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x6d, 0x69, 0x70, 0x6d, 0x61, 0x70, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x12, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4d, 0x69, 0x70, 0x6d,
	0x61, 0x70, 0x64, 0x61, 0x74, 0x61, 0x22, 0x74, 0x0a, 0x24, 0x43, 0x68, 0x61, 0x72, 0x74, 0x33,
	0x44, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72,
	0x65, 0x54, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x30,
	0x0a, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xfd, 0x03, 0x0a,
	0x20, 0x43, 0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78,
	0x74, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x12, 0x40, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x42,
	0x61, 0x73, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x54,
	0x69, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65,
	0x54, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x12, 0x2b, 0x0a, 0x04, 0x77, 0x72, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6c,
	0x69, 0x6e, 0x67, 0x57, 0x72, 0x61, 0x70, 0x52, 0x04, 0x77, 0x72, 0x61, 0x70, 0x12, 0x2b, 0x0a,
	0x04, 0x66, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x54, 0x53,
	0x43, 0x48, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6c, 0x69, 0x6e, 0x67,
	0x46, 0x61, 0x63, 0x65, 0x52, 0x04, 0x66, 0x61, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x78, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e,
	0x54, 0x53, 0x43, 0x48, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6c, 0x69,
	0x6e, 0x67, 0x58, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x78, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x09, 0x79, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x54, 0x53, 0x43, 0x48,
	0x2e, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x59, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x79, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0b, 0x73, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x69, 0x74,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x54,
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74,
	0x69, 0x6e, 0x75, 0x69, 0x74, 0x79, 0x52, 0x0b, 0x73, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75,
	0x69, 0x74, 0x79, 0x12, 0x3f, 0x0a, 0x0b, 0x74, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x69,
	0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e,
	0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x75, 0x69, 0x74, 0x79, 0x52, 0x0b, 0x74, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
	0x75, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x22, 0x4e, 0x0a, 0x14,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x02, 0x28, 0x02, 0x52,
	0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x02, 0x52, 0x01, 0x79,
	0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x03, 0x20, 0x02, 0x28, 0x02, 0x52, 0x01, 0x7a, 0x12, 0x0c,
	0x0a, 0x01, 0x77, 0x18, 0x04, 0x20, 0x02, 0x28, 0x02, 0x52, 0x01, 0x77, 0x2a, 0x4c, 0x0a, 0x11,
	0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6c, 0x69,
	0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18,
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64,
	0x65, 0x54, 0x61, 0x6c, 0x6c, 0x65, 0x73, 0x74, 0x10, 0x01, 0x2a, 0x6b, 0x0a, 0x11, 0x54, 0x65,
	0x78, 0x74, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x65, 0x12,
	0x18, 0x0a, 0x14, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6c, 0x69, 0x6e, 0x67,
	0x46, 0x61, 0x63, 0x65, 0x41, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x74, 0x65, 0x78,
	0x74, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x65, 0x54, 0x6f,
	0x70, 0x41, 0x6e, 0x64, 0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15,
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63,
	0x65, 0x53, 0x69, 0x64, 0x65, 0x10, 0x02, 0x2a, 0x52, 0x0a, 0x11, 0x54, 0x65, 0x78, 0x74, 0x75,
	0x72, 0x65, 0x54, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x57, 0x72, 0x61, 0x70, 0x12, 0x1e, 0x0a, 0x1a,
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x57, 0x72, 0x61,
	0x70, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19,
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x57, 0x72, 0x61,
	0x70, 0x46, 0x61, 0x63, 0x65, 0x57, 0x72, 0x61, 0x70, 0x10, 0x01, 0x2a, 0x7b, 0x0a, 0x16, 0x54,
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x58, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x1a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65,
	0x54, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x58, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x65, 0x66, 0x74, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65,
	0x54, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x58, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x74, 0x65, 0x78, 0x74, 0x75,
	0x72, 0x65, 0x54, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x58, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x69, 0x67, 0x68, 0x74, 0x10, 0x02, 0x2a, 0x7b, 0x0a, 0x16, 0x54, 0x65, 0x78, 0x74,
	0x75, 0x72, 0x65, 0x54, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x59, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x19, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6c,
	0x69, 0x6e, 0x67, 0x59, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x70, 0x10,
	0x00, 0x12, 0x20, 0x0a, 0x1c, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6c, 0x69,
	0x6e, 0x67, 0x59, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x54, 0x69,
	0x6c, 0x69, 0x6e, 0x67, 0x59, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x74,
	0x74, 0x6f, 0x6d, 0x10, 0x02, 0x2a, 0xa5, 0x01, 0x0a, 0x17, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72,
	0x65, 0x54, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x69, 0x74,
	0x79, 0x12, 0x1f, 0x0a, 0x1b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6c, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x6e, 0x65,
	0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6c,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x69, 0x74, 0x79, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65,
	0x54, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x69, 0x74, 0x79,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x74, 0x65, 0x78, 0x74,
	0x75, 0x72, 0x65, 0x54, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75,
	0x69, 0x74, 0x79, 0x4a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x65, 0x64, 0x10, 0x03, 0x2a, 0xb3, 0x01,
	0x0a, 0x10, 0x46, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x66, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x10,
	0x00, 0x12, 0x18, 0x0a, 0x14, 0x66, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x41, 0x72, 0x65, 0x61, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x66,
	0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x61, 0x72, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x66, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x10, 0x03,
	0x12, 0x18, 0x0a, 0x14, 0x66, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x66, 0x69,
	0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x50, 0x69,
	0x65, 0x10, 0x05, 0x3a, 0x42, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x6c, 0x33, 0x64, 0x12, 0x10, 0x2e,
	0x54, 0x53, 0x44, 0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x18,
	0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x33, 0x44, 0x46, 0x69, 0x6c, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x06, 0x66, 0x69, 0x6c, 0x6c, 0x33, 0x64, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x2f, 0x6b, 0x70, 0x62,
}

var (
	file_TSCH3DArchives_proto_rawDescOnce sync.Once
	file_TSCH3DArchives_proto_rawDescData = file_TSCH3DArchives_proto_rawDesc
)

func file_TSCH3DArchives_proto_rawDescGZIP() []byte {
	file_TSCH3DArchives_proto_rawDescOnce.Do(func() {
		file_TSCH3DArchives_proto_rawDescData = protoimpl.X.CompressGZIP(file_TSCH3DArchives_proto_rawDescData)
	})
	return file_TSCH3DArchives_proto_rawDescData
}

var file_TSCH3DArchives_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_TSCH3DArchives_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_TSCH3DArchives_proto_goTypes = []interface{}{
	(TextureTilingMode)(0),                           // 0: TSCH.TextureTilingMode
	(TextureTilingFace)(0),                           // 1: TSCH.TextureTilingFace
	(TextureTilingWrap)(0),                           // 2: TSCH.TextureTilingWrap
	(TextureTilingXPosition)(0),                      // 3: TSCH.TextureTilingXPosition
	(TextureTilingYPosition)(0),                      // 4: TSCH.TextureTilingYPosition
	(TextureTilingContinuity)(0),                     // 5: TSCH.TextureTilingContinuity
	(FillPropertyType)(0),                            // 6: TSCH.FillPropertyType
	(*Chart3DEnvironmentPackageArchive)(nil),         // 7: TSCH.Chart3DEnvironmentPackageArchive
	(*Chart3DFillArchive)(nil),                       // 8: TSCH.Chart3DFillArchive
	(*Chart3DPointLightArchive)(nil),                 // 9: TSCH.Chart3DPointLightArchive
	(*Chart3DDirectionalLightArchive)(nil),           // 10: TSCH.Chart3DDirectionalLightArchive
	(*Chart3DSpotLightArchive)(nil),                  // 11: TSCH.Chart3DSpotLightArchive
	(*Chart3DLightArchive)(nil),                      // 12: TSCH.Chart3DLightArchive
	(*Chart3DLightingModelArchive)(nil),              // 13: TSCH.Chart3DLightingModelArchive
	(*Chart3DLightingPackageArchive)(nil),            // 14: TSCH.Chart3DLightingPackageArchive
	(*Chart3DTexturesMaterialArchive)(nil),           // 15: TSCH.Chart3DTexturesMaterialArchive
	(*Chart3DEmissiveMaterialArchive)(nil),           // 16: TSCH.Chart3DEmissiveMaterialArchive
	(*Chart3DDiffuseMaterialArchive)(nil),            // 17: TSCH.Chart3DDiffuseMaterialArchive
	(*Chart3DModulateMaterialArchive)(nil),           // 18: TSCH.Chart3DModulateMaterialArchive
	(*Chart3DSpecularMaterialArchive)(nil),           // 19: TSCH.Chart3DSpecularMaterialArchive
	(*Chart3DShininessMaterialArchive)(nil),          // 20: TSCH.Chart3DShininessMaterialArchive
	(*Chart3DEnvironmentMaterialArchive)(nil),        // 21: TSCH.Chart3DEnvironmentMaterialArchive
	(*Chart3DFixedFunctionLightingModelArchive)(nil), // 22: TSCH.Chart3DFixedFunctionLightingModelArchive
	(*Chart3DPhongLightingModelArchive)(nil),         // 23: TSCH.Chart3DPhongLightingModelArchive
	(*Chart3DPhongMaterialPackageArchive)(nil),       // 24: TSCH.Chart3DPhongMaterialPackageArchive
	(*Chart3DTSPImageDataTextureArchive)(nil),        // 25: TSCH.Chart3DTSPImageDataTextureArchive
	(*Chart3DBaseImageTextureTilingArchive)(nil),     // 26: TSCH.Chart3DBaseImageTextureTilingArchive
	(*Chart3DImageTextureTilingArchive)(nil),         // 27: TSCH.Chart3DImageTextureTilingArchive
	(*Chart3DVectorArchive)(nil),                     // 28: TSCH.Chart3DVectorArchive
	(*DataReference)(nil),                            // 29: TSP.DataReference
	(*Reference)(nil),                                // 30: TSP.Reference
	(*FillArchive)(nil),                              // 31: TSD.FillArchive
}
var file_TSCH3DArchives_proto_depIdxs = []int32{
	21, // 0: TSCH.Chart3DEnvironmentPackageArchive.materials:type_name -> TSCH.Chart3DEnvironmentMaterialArchive
	13, // 1: TSCH.Chart3DFillArchive.lightingmodel:type_name -> TSCH.Chart3DLightingModelArchive
	6,  // 2: TSCH.Chart3DFillArchive.fill_type:type_name -> TSCH.FillPropertyType
	28, // 3: TSCH.Chart3DPointLightArchive.position:type_name -> TSCH.Chart3DVectorArchive
	28, // 4: TSCH.Chart3DDirectionalLightArchive.direction:type_name -> TSCH.Chart3DVectorArchive
	28, // 5: TSCH.Chart3DSpotLightArchive.position:type_name -> TSCH.Chart3DVectorArchive
	28, // 6: TSCH.Chart3DSpotLightArchive.direction:type_name -> TSCH.Chart3DVectorArchive
	28, // 7: TSCH.Chart3DLightArchive.ambient_color:type_name -> TSCH.Chart3DVectorArchive
	28, // 8: TSCH.Chart3DLightArchive.diffuse_color:type_name -> TSCH.Chart3DVectorArchive
	28, // 9: TSCH.Chart3DLightArchive.specular_color:type_name -> TSCH.Chart3DVectorArchive
	28, // 10: TSCH.Chart3DLightArchive.attenuation:type_name -> TSCH.Chart3DVectorArchive
	9,  // 11: TSCH.Chart3DLightArchive.point_light:type_name -> TSCH.Chart3DPointLightArchive
	10, // 12: TSCH.Chart3DLightArchive.directional_light:type_name -> TSCH.Chart3DDirectionalLightArchive
	11, // 13: TSCH.Chart3DLightArchive.spot_light:type_name -> TSCH.Chart3DSpotLightArchive
	23, // 14: TSCH.Chart3DLightingModelArchive.phong:type_name -> TSCH.Chart3DPhongLightingModelArchive
	22, // 15: TSCH.Chart3DLightingModelArchive.fixed_function:type_name -> TSCH.Chart3DFixedFunctionLightingModelArchive
	7,  // 16: TSCH.Chart3DLightingModelArchive.environment:type_name -> TSCH.Chart3DEnvironmentPackageArchive
	12, // 17: TSCH.Chart3DLightingPackageArchive.lights:type_name -> TSCH.Chart3DLightArchive
	28, // 18: TSCH.Chart3DTexturesMaterialArchive.color:type_name -> TSCH.Chart3DVectorArchive
	25, // 19: TSCH.Chart3DTexturesMaterialArchive.textures:type_name -> TSCH.Chart3DTSPImageDataTextureArchive
	15, // 20: TSCH.Chart3DEmissiveMaterialArchive.super:type_name -> TSCH.Chart3DTexturesMaterialArchive
	27, // 21: TSCH.Chart3DEmissiveMaterialArchive.tilings:type_name -> TSCH.Chart3DImageTextureTilingArchive
	15, // 22: TSCH.Chart3DDiffuseMaterialArchive.super:type_name -> TSCH.Chart3DTexturesMaterialArchive
	27, // 23: TSCH.Chart3DDiffuseMaterialArchive.tilings:type_name -> TSCH.Chart3DImageTextureTilingArchive
	15, // 24: TSCH.Chart3DModulateMaterialArchive.super:type_name -> TSCH.Chart3DTexturesMaterialArchive
	27, // 25: TSCH.Chart3DModulateMaterialArchive.tilings:type_name -> TSCH.Chart3DImageTextureTilingArchive
	15, // 26: TSCH.Chart3DSpecularMaterialArchive.super:type_name -> TSCH.Chart3DTexturesMaterialArchive
	27, // 27: TSCH.Chart3DSpecularMaterialArchive.tilings:type_name -> TSCH.Chart3DImageTextureTilingArchive
	15, // 28: TSCH.Chart3DShininessMaterialArchive.super:type_name -> TSCH.Chart3DTexturesMaterialArchive
	27, // 29: TSCH.Chart3DShininessMaterialArchive.tilings:type_name -> TSCH.Chart3DImageTextureTilingArchive
	15, // 30: TSCH.Chart3DEnvironmentMaterialArchive.super:type_name -> TSCH.Chart3DTexturesMaterialArchive
	26, // 31: TSCH.Chart3DEnvironmentMaterialArchive.OBSOLETE_tilings:type_name -> TSCH.Chart3DBaseImageTextureTilingArchive
	27, // 32: TSCH.Chart3DEnvironmentMaterialArchive.tilings:type_name -> TSCH.Chart3DImageTextureTilingArchive
	24, // 33: TSCH.Chart3DFixedFunctionLightingModelArchive.materials:type_name -> TSCH.Chart3DPhongMaterialPackageArchive
	24, // 34: TSCH.Chart3DPhongLightingModelArchive.materials:type_name -> TSCH.Chart3DPhongMaterialPackageArchive
	16, // 35: TSCH.Chart3DPhongMaterialPackageArchive.emissive:type_name -> TSCH.Chart3DEmissiveMaterialArchive
	17, // 36: TSCH.Chart3DPhongMaterialPackageArchive.diffuse:type_name -> TSCH.Chart3DDiffuseMaterialArchive
	18, // 37: TSCH.Chart3DPhongMaterialPackageArchive.modulate:type_name -> TSCH.Chart3DModulateMaterialArchive
	19, // 38: TSCH.Chart3DPhongMaterialPackageArchive.specular:type_name -> TSCH.Chart3DSpecularMaterialArchive
	20, // 39: TSCH.Chart3DPhongMaterialPackageArchive.shininess:type_name -> TSCH.Chart3DShininessMaterialArchive
	29, // 40: TSCH.Chart3DTSPImageDataTextureArchive.data:type_name -> TSP.DataReference
	29, // 41: TSCH.Chart3DTSPImageDataTextureArchive.mipmapdata:type_name -> TSP.DataReference
	30, // 42: TSCH.Chart3DTSPImageDataTextureArchive.database_data:type_name -> TSP.Reference
	30, // 43: TSCH.Chart3DTSPImageDataTextureArchive.database_mipmapdata:type_name -> TSP.Reference
	28, // 44: TSCH.Chart3DBaseImageTextureTilingArchive.scale:type_name -> TSCH.Chart3DVectorArchive
	26, // 45: TSCH.Chart3DImageTextureTilingArchive.super:type_name -> TSCH.Chart3DBaseImageTextureTilingArchive
	0,  // 46: TSCH.Chart3DImageTextureTilingArchive.mode:type_name -> TSCH.TextureTilingMode
	2,  // 47: TSCH.Chart3DImageTextureTilingArchive.wrap:type_name -> TSCH.TextureTilingWrap
	1,  // 48: TSCH.Chart3DImageTextureTilingArchive.face:type_name -> TSCH.TextureTilingFace
	3,  // 49: TSCH.Chart3DImageTextureTilingArchive.xposition:type_name -> TSCH.TextureTilingXPosition
	4,  // 50: TSCH.Chart3DImageTextureTilingArchive.yposition:type_name -> TSCH.TextureTilingYPosition
	5,  // 51: TSCH.Chart3DImageTextureTilingArchive.scontinuity:type_name -> TSCH.TextureTilingContinuity
	5,  // 52: TSCH.Chart3DImageTextureTilingArchive.tcontinuity:type_name -> TSCH.TextureTilingContinuity
	31, // 53: TSCH.fill3d:extendee -> TSD.FillArchive
	8,  // 54: TSCH.fill3d:type_name -> TSCH.Chart3DFillArchive
	55, // [55:55] is the sub-list for method output_type
	55, // [55:55] is the sub-list for method input_type
	54, // [54:55] is the sub-list for extension type_name
	53, // [53:54] is the sub-list for extension extendee
	0,  // [0:53] is the sub-list for field type_name
}

func init() { file_TSCH3DArchives_proto_init() }
func file_TSCH3DArchives_proto_init() {
	if File_TSCH3DArchives_proto != nil {
		return
	}
	file_TSPMessages_proto_init()
	file_TSDArchives_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_TSCH3DArchives_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chart3DEnvironmentPackageArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCH3DArchives_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chart3DFillArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCH3DArchives_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chart3DPointLightArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCH3DArchives_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chart3DDirectionalLightArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCH3DArchives_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chart3DSpotLightArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCH3DArchives_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chart3DLightArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCH3DArchives_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chart3DLightingModelArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCH3DArchives_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chart3DLightingPackageArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCH3DArchives_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chart3DTexturesMaterialArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCH3DArchives_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chart3DEmissiveMaterialArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCH3DArchives_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chart3DDiffuseMaterialArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCH3DArchives_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chart3DModulateMaterialArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCH3DArchives_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chart3DSpecularMaterialArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCH3DArchives_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chart3DShininessMaterialArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCH3DArchives_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chart3DEnvironmentMaterialArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCH3DArchives_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chart3DFixedFunctionLightingModelArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCH3DArchives_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chart3DPhongLightingModelArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCH3DArchives_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chart3DPhongMaterialPackageArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCH3DArchives_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chart3DTSPImageDataTextureArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCH3DArchives_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chart3DBaseImageTextureTilingArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCH3DArchives_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chart3DImageTextureTilingArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCH3DArchives_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chart3DVectorArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_TSCH3DArchives_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   22,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_TSCH3DArchives_proto_goTypes,
		DependencyIndexes: file_TSCH3DArchives_proto_depIdxs,
		EnumInfos:         file_TSCH3DArchives_proto_enumTypes,
		MessageInfos:      file_TSCH3DArchives_proto_msgTypes,
		ExtensionInfos:    file_TSCH3DArchives_proto_extTypes,
	}.Build()
	File_TSCH3DArchives_proto = out.File
	file_TSCH3DArchives_proto_rawDesc = nil
	file_TSCH3DArchives_proto_goTypes = nil
	file_TSCH3DArchives_proto_depIdxs = nil
}
