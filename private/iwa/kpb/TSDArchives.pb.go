// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: TSDArchives.proto

package kpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LineJoin int32

const (
	LineJoin_MiterJoin LineJoin = 0
	LineJoin_RoundJoin LineJoin = 1
	LineJoin_BevelJoin LineJoin = 2
)

// Enum value maps for LineJoin.
var (
	LineJoin_name = map[int32]string{
		0: "MiterJoin",
		1: "RoundJoin",
		2: "BevelJoin",
	}
	LineJoin_value = map[string]int32{
		"MiterJoin": 0,
		"RoundJoin": 1,
		"BevelJoin": 2,
	}
)

func (x LineJoin) Enum() *LineJoin {
	p := new(LineJoin)
	*p = x
	return p
}

func (x LineJoin) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LineJoin) Descriptor() protoreflect.EnumDescriptor {
	return file_TSDArchives_proto_enumTypes[0].Descriptor()
}

func (LineJoin) Type() protoreflect.EnumType {
	return &file_TSDArchives_proto_enumTypes[0]
}

func (x LineJoin) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *LineJoin) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = LineJoin(num)
	return nil
}

// Deprecated: Use LineJoin.Descriptor instead.
func (LineJoin) EnumDescriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{0}
}

type PointPathSourceArchive_PointPathSourceType int32

const (
	PointPathSourceArchive_kTSDLeftSingleArrow  PointPathSourceArchive_PointPathSourceType = 0
	PointPathSourceArchive_kTSDRightSingleArrow PointPathSourceArchive_PointPathSourceType = 1
	PointPathSourceArchive_kTSDDoubleArrow      PointPathSourceArchive_PointPathSourceType = 10
	PointPathSourceArchive_kTSDStar             PointPathSourceArchive_PointPathSourceType = 100
	PointPathSourceArchive_kTSDPlus             PointPathSourceArchive_PointPathSourceType = 200
)

// Enum value maps for PointPathSourceArchive_PointPathSourceType.
var (
	PointPathSourceArchive_PointPathSourceType_name = map[int32]string{
		0:   "kTSDLeftSingleArrow",
		1:   "kTSDRightSingleArrow",
		10:  "kTSDDoubleArrow",
		100: "kTSDStar",
		200: "kTSDPlus",
	}
	PointPathSourceArchive_PointPathSourceType_value = map[string]int32{
		"kTSDLeftSingleArrow":  0,
		"kTSDRightSingleArrow": 1,
		"kTSDDoubleArrow":      10,
		"kTSDStar":             100,
		"kTSDPlus":             200,
	}
)

func (x PointPathSourceArchive_PointPathSourceType) Enum() *PointPathSourceArchive_PointPathSourceType {
	p := new(PointPathSourceArchive_PointPathSourceType)
	*p = x
	return p
}

func (x PointPathSourceArchive_PointPathSourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PointPathSourceArchive_PointPathSourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_TSDArchives_proto_enumTypes[1].Descriptor()
}

func (PointPathSourceArchive_PointPathSourceType) Type() protoreflect.EnumType {
	return &file_TSDArchives_proto_enumTypes[1]
}

func (x PointPathSourceArchive_PointPathSourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PointPathSourceArchive_PointPathSourceType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PointPathSourceArchive_PointPathSourceType(num)
	return nil
}

// Deprecated: Use PointPathSourceArchive_PointPathSourceType.Descriptor instead.
func (PointPathSourceArchive_PointPathSourceType) EnumDescriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{2, 0}
}

type ScalarPathSourceArchive_ScalarPathSourceType int32

const (
	ScalarPathSourceArchive_kTSDRoundedRectangle ScalarPathSourceArchive_ScalarPathSourceType = 0
	ScalarPathSourceArchive_kTSDRegularPolygon   ScalarPathSourceArchive_ScalarPathSourceType = 1
	ScalarPathSourceArchive_kTSDChevron          ScalarPathSourceArchive_ScalarPathSourceType = 2
)

// Enum value maps for ScalarPathSourceArchive_ScalarPathSourceType.
var (
	ScalarPathSourceArchive_ScalarPathSourceType_name = map[int32]string{
		0: "kTSDRoundedRectangle",
		1: "kTSDRegularPolygon",
		2: "kTSDChevron",
	}
	ScalarPathSourceArchive_ScalarPathSourceType_value = map[string]int32{
		"kTSDRoundedRectangle": 0,
		"kTSDRegularPolygon":   1,
		"kTSDChevron":          2,
	}
)

func (x ScalarPathSourceArchive_ScalarPathSourceType) Enum() *ScalarPathSourceArchive_ScalarPathSourceType {
	p := new(ScalarPathSourceArchive_ScalarPathSourceType)
	*p = x
	return p
}

func (x ScalarPathSourceArchive_ScalarPathSourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScalarPathSourceArchive_ScalarPathSourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_TSDArchives_proto_enumTypes[2].Descriptor()
}

func (ScalarPathSourceArchive_ScalarPathSourceType) Type() protoreflect.EnumType {
	return &file_TSDArchives_proto_enumTypes[2]
}

func (x ScalarPathSourceArchive_ScalarPathSourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ScalarPathSourceArchive_ScalarPathSourceType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ScalarPathSourceArchive_ScalarPathSourceType(num)
	return nil
}

// Deprecated: Use ScalarPathSourceArchive_ScalarPathSourceType.Descriptor instead.
func (ScalarPathSourceArchive_ScalarPathSourceType) EnumDescriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{3, 0}
}

type ConnectionLinePathSourceArchive_ConnectionLinePathSourceType int32

const (
	ConnectionLinePathSourceArchive_kTSDConnectionLineTypeQuadratic  ConnectionLinePathSourceArchive_ConnectionLinePathSourceType = 0
	ConnectionLinePathSourceArchive_kTSDConnectionLineTypeOrthogonal ConnectionLinePathSourceArchive_ConnectionLinePathSourceType = 1
)

// Enum value maps for ConnectionLinePathSourceArchive_ConnectionLinePathSourceType.
var (
	ConnectionLinePathSourceArchive_ConnectionLinePathSourceType_name = map[int32]string{
		0: "kTSDConnectionLineTypeQuadratic",
		1: "kTSDConnectionLineTypeOrthogonal",
	}
	ConnectionLinePathSourceArchive_ConnectionLinePathSourceType_value = map[string]int32{
		"kTSDConnectionLineTypeQuadratic":  0,
		"kTSDConnectionLineTypeOrthogonal": 1,
	}
)

func (x ConnectionLinePathSourceArchive_ConnectionLinePathSourceType) Enum() *ConnectionLinePathSourceArchive_ConnectionLinePathSourceType {
	p := new(ConnectionLinePathSourceArchive_ConnectionLinePathSourceType)
	*p = x
	return p
}

func (x ConnectionLinePathSourceArchive_ConnectionLinePathSourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectionLinePathSourceArchive_ConnectionLinePathSourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_TSDArchives_proto_enumTypes[3].Descriptor()
}

func (ConnectionLinePathSourceArchive_ConnectionLinePathSourceType) Type() protoreflect.EnumType {
	return &file_TSDArchives_proto_enumTypes[3]
}

func (x ConnectionLinePathSourceArchive_ConnectionLinePathSourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ConnectionLinePathSourceArchive_ConnectionLinePathSourceType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ConnectionLinePathSourceArchive_ConnectionLinePathSourceType(num)
	return nil
}

// Deprecated: Use ConnectionLinePathSourceArchive_ConnectionLinePathSourceType.Descriptor instead.
func (ConnectionLinePathSourceArchive_ConnectionLinePathSourceType) EnumDescriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{6, 0}
}

type EditableBezierPathSourceArchive_NodeType int32

const (
	EditableBezierPathSourceArchive_sharp  EditableBezierPathSourceArchive_NodeType = 1
	EditableBezierPathSourceArchive_bezier EditableBezierPathSourceArchive_NodeType = 2
	EditableBezierPathSourceArchive_smooth EditableBezierPathSourceArchive_NodeType = 3
)

// Enum value maps for EditableBezierPathSourceArchive_NodeType.
var (
	EditableBezierPathSourceArchive_NodeType_name = map[int32]string{
		1: "sharp",
		2: "bezier",
		3: "smooth",
	}
	EditableBezierPathSourceArchive_NodeType_value = map[string]int32{
		"sharp":  1,
		"bezier": 2,
		"smooth": 3,
	}
)

func (x EditableBezierPathSourceArchive_NodeType) Enum() *EditableBezierPathSourceArchive_NodeType {
	p := new(EditableBezierPathSourceArchive_NodeType)
	*p = x
	return p
}

func (x EditableBezierPathSourceArchive_NodeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EditableBezierPathSourceArchive_NodeType) Descriptor() protoreflect.EnumDescriptor {
	return file_TSDArchives_proto_enumTypes[4].Descriptor()
}

func (EditableBezierPathSourceArchive_NodeType) Type() protoreflect.EnumType {
	return &file_TSDArchives_proto_enumTypes[4]
}

func (x EditableBezierPathSourceArchive_NodeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EditableBezierPathSourceArchive_NodeType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EditableBezierPathSourceArchive_NodeType(num)
	return nil
}

// Deprecated: Use EditableBezierPathSourceArchive_NodeType.Descriptor instead.
func (EditableBezierPathSourceArchive_NodeType) EnumDescriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{7, 0}
}

type GradientArchive_GradientType int32

const (
	GradientArchive_Linear GradientArchive_GradientType = 0
	GradientArchive_Radial GradientArchive_GradientType = 1
)

// Enum value maps for GradientArchive_GradientType.
var (
	GradientArchive_GradientType_name = map[int32]string{
		0: "Linear",
		1: "Radial",
	}
	GradientArchive_GradientType_value = map[string]int32{
		"Linear": 0,
		"Radial": 1,
	}
)

func (x GradientArchive_GradientType) Enum() *GradientArchive_GradientType {
	p := new(GradientArchive_GradientType)
	*p = x
	return p
}

func (x GradientArchive_GradientType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GradientArchive_GradientType) Descriptor() protoreflect.EnumDescriptor {
	return file_TSDArchives_proto_enumTypes[5].Descriptor()
}

func (GradientArchive_GradientType) Type() protoreflect.EnumType {
	return &file_TSDArchives_proto_enumTypes[5]
}

func (x GradientArchive_GradientType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GradientArchive_GradientType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GradientArchive_GradientType(num)
	return nil
}

// Deprecated: Use GradientArchive_GradientType.Descriptor instead.
func (GradientArchive_GradientType) EnumDescriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{11, 0}
}

type ImageFillArchive_ImageFillTechnique int32

const (
	ImageFillArchive_NaturalSize ImageFillArchive_ImageFillTechnique = 0
	ImageFillArchive_Stretch     ImageFillArchive_ImageFillTechnique = 1
	ImageFillArchive_Tile        ImageFillArchive_ImageFillTechnique = 2
	ImageFillArchive_ScaleToFill ImageFillArchive_ImageFillTechnique = 3
	ImageFillArchive_ScaleToFit  ImageFillArchive_ImageFillTechnique = 4
)

// Enum value maps for ImageFillArchive_ImageFillTechnique.
var (
	ImageFillArchive_ImageFillTechnique_name = map[int32]string{
		0: "NaturalSize",
		1: "Stretch",
		2: "Tile",
		3: "ScaleToFill",
		4: "ScaleToFit",
	}
	ImageFillArchive_ImageFillTechnique_value = map[string]int32{
		"NaturalSize": 0,
		"Stretch":     1,
		"Tile":        2,
		"ScaleToFill": 3,
		"ScaleToFit":  4,
	}
)

func (x ImageFillArchive_ImageFillTechnique) Enum() *ImageFillArchive_ImageFillTechnique {
	p := new(ImageFillArchive_ImageFillTechnique)
	*p = x
	return p
}

func (x ImageFillArchive_ImageFillTechnique) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImageFillArchive_ImageFillTechnique) Descriptor() protoreflect.EnumDescriptor {
	return file_TSDArchives_proto_enumTypes[6].Descriptor()
}

func (ImageFillArchive_ImageFillTechnique) Type() protoreflect.EnumType {
	return &file_TSDArchives_proto_enumTypes[6]
}

func (x ImageFillArchive_ImageFillTechnique) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ImageFillArchive_ImageFillTechnique) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ImageFillArchive_ImageFillTechnique(num)
	return nil
}

// Deprecated: Use ImageFillArchive_ImageFillTechnique.Descriptor instead.
func (ImageFillArchive_ImageFillTechnique) EnumDescriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{12, 0}
}

type StrokePatternArchive_StrokePatternType int32

const (
	StrokePatternArchive_TSDPattern      StrokePatternArchive_StrokePatternType = 0
	StrokePatternArchive_TSDSolidPattern StrokePatternArchive_StrokePatternType = 1
	StrokePatternArchive_TSDEmptyPattern StrokePatternArchive_StrokePatternType = 2
)

// Enum value maps for StrokePatternArchive_StrokePatternType.
var (
	StrokePatternArchive_StrokePatternType_name = map[int32]string{
		0: "TSDPattern",
		1: "TSDSolidPattern",
		2: "TSDEmptyPattern",
	}
	StrokePatternArchive_StrokePatternType_value = map[string]int32{
		"TSDPattern":      0,
		"TSDSolidPattern": 1,
		"TSDEmptyPattern": 2,
	}
)

func (x StrokePatternArchive_StrokePatternType) Enum() *StrokePatternArchive_StrokePatternType {
	p := new(StrokePatternArchive_StrokePatternType)
	*p = x
	return p
}

func (x StrokePatternArchive_StrokePatternType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StrokePatternArchive_StrokePatternType) Descriptor() protoreflect.EnumDescriptor {
	return file_TSDArchives_proto_enumTypes[7].Descriptor()
}

func (StrokePatternArchive_StrokePatternType) Type() protoreflect.EnumType {
	return &file_TSDArchives_proto_enumTypes[7]
}

func (x StrokePatternArchive_StrokePatternType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *StrokePatternArchive_StrokePatternType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = StrokePatternArchive_StrokePatternType(num)
	return nil
}

// Deprecated: Use StrokePatternArchive_StrokePatternType.Descriptor instead.
func (StrokePatternArchive_StrokePatternType) EnumDescriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{14, 0}
}

type StrokeArchive_LineCap int32

const (
	StrokeArchive_ButtCap   StrokeArchive_LineCap = 0
	StrokeArchive_RoundCap  StrokeArchive_LineCap = 1
	StrokeArchive_SquareCap StrokeArchive_LineCap = 2
)

// Enum value maps for StrokeArchive_LineCap.
var (
	StrokeArchive_LineCap_name = map[int32]string{
		0: "ButtCap",
		1: "RoundCap",
		2: "SquareCap",
	}
	StrokeArchive_LineCap_value = map[string]int32{
		"ButtCap":   0,
		"RoundCap":  1,
		"SquareCap": 2,
	}
)

func (x StrokeArchive_LineCap) Enum() *StrokeArchive_LineCap {
	p := new(StrokeArchive_LineCap)
	*p = x
	return p
}

func (x StrokeArchive_LineCap) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StrokeArchive_LineCap) Descriptor() protoreflect.EnumDescriptor {
	return file_TSDArchives_proto_enumTypes[8].Descriptor()
}

func (StrokeArchive_LineCap) Type() protoreflect.EnumType {
	return &file_TSDArchives_proto_enumTypes[8]
}

func (x StrokeArchive_LineCap) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *StrokeArchive_LineCap) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = StrokeArchive_LineCap(num)
	return nil
}

// Deprecated: Use StrokeArchive_LineCap.Descriptor instead.
func (StrokeArchive_LineCap) EnumDescriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{15, 0}
}

type ShadowArchive_ShadowType int32

const (
	ShadowArchive_TSDDropShadow    ShadowArchive_ShadowType = 0
	ShadowArchive_TSDContactShadow ShadowArchive_ShadowType = 1
	ShadowArchive_TSDCurvedShadow  ShadowArchive_ShadowType = 2
)

// Enum value maps for ShadowArchive_ShadowType.
var (
	ShadowArchive_ShadowType_name = map[int32]string{
		0: "TSDDropShadow",
		1: "TSDContactShadow",
		2: "TSDCurvedShadow",
	}
	ShadowArchive_ShadowType_value = map[string]int32{
		"TSDDropShadow":    0,
		"TSDContactShadow": 1,
		"TSDCurvedShadow":  2,
	}
)

func (x ShadowArchive_ShadowType) Enum() *ShadowArchive_ShadowType {
	p := new(ShadowArchive_ShadowType)
	*p = x
	return p
}

func (x ShadowArchive_ShadowType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShadowArchive_ShadowType) Descriptor() protoreflect.EnumDescriptor {
	return file_TSDArchives_proto_enumTypes[9].Descriptor()
}

func (ShadowArchive_ShadowType) Type() protoreflect.EnumType {
	return &file_TSDArchives_proto_enumTypes[9]
}

func (x ShadowArchive_ShadowType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ShadowArchive_ShadowType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ShadowArchive_ShadowType(num)
	return nil
}

// Deprecated: Use ShadowArchive_ShadowType.Descriptor instead.
func (ShadowArchive_ShadowType) EnumDescriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{20, 0}
}

type MovieArchive_MovieLoopOption int32

const (
	MovieArchive_None         MovieArchive_MovieLoopOption = 0
	MovieArchive_Repeat       MovieArchive_MovieLoopOption = 1
	MovieArchive_BackAndForth MovieArchive_MovieLoopOption = 2
)

// Enum value maps for MovieArchive_MovieLoopOption.
var (
	MovieArchive_MovieLoopOption_name = map[int32]string{
		0: "None",
		1: "Repeat",
		2: "BackAndForth",
	}
	MovieArchive_MovieLoopOption_value = map[string]int32{
		"None":         0,
		"Repeat":       1,
		"BackAndForth": 2,
	}
)

func (x MovieArchive_MovieLoopOption) Enum() *MovieArchive_MovieLoopOption {
	p := new(MovieArchive_MovieLoopOption)
	*p = x
	return p
}

func (x MovieArchive_MovieLoopOption) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MovieArchive_MovieLoopOption) Descriptor() protoreflect.EnumDescriptor {
	return file_TSDArchives_proto_enumTypes[10].Descriptor()
}

func (MovieArchive_MovieLoopOption) Type() protoreflect.EnumType {
	return &file_TSDArchives_proto_enumTypes[10]
}

func (x MovieArchive_MovieLoopOption) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MovieArchive_MovieLoopOption) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MovieArchive_MovieLoopOption(num)
	return nil
}

// Deprecated: Use MovieArchive_MovieLoopOption.Descriptor instead.
func (MovieArchive_MovieLoopOption) EnumDescriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{42, 0}
}

type FreehandDrawingToolkitUIState_FreehandDrawingToolType int32

const (
	FreehandDrawingToolkitUIState_Pen           FreehandDrawingToolkitUIState_FreehandDrawingToolType = 0
	FreehandDrawingToolkitUIState_Pencil        FreehandDrawingToolkitUIState_FreehandDrawingToolType = 1
	FreehandDrawingToolkitUIState_Crayon        FreehandDrawingToolkitUIState_FreehandDrawingToolType = 2
	FreehandDrawingToolkitUIState_Fill          FreehandDrawingToolkitUIState_FreehandDrawingToolType = 3
	FreehandDrawingToolkitUIState_Eraser        FreehandDrawingToolkitUIState_FreehandDrawingToolType = 4
	FreehandDrawingToolkitUIState_MarqueeSelect FreehandDrawingToolkitUIState_FreehandDrawingToolType = 5
)

// Enum value maps for FreehandDrawingToolkitUIState_FreehandDrawingToolType.
var (
	FreehandDrawingToolkitUIState_FreehandDrawingToolType_name = map[int32]string{
		0: "Pen",
		1: "Pencil",
		2: "Crayon",
		3: "Fill",
		4: "Eraser",
		5: "MarqueeSelect",
	}
	FreehandDrawingToolkitUIState_FreehandDrawingToolType_value = map[string]int32{
		"Pen":           0,
		"Pencil":        1,
		"Crayon":        2,
		"Fill":          3,
		"Eraser":        4,
		"MarqueeSelect": 5,
	}
)

func (x FreehandDrawingToolkitUIState_FreehandDrawingToolType) Enum() *FreehandDrawingToolkitUIState_FreehandDrawingToolType {
	p := new(FreehandDrawingToolkitUIState_FreehandDrawingToolType)
	*p = x
	return p
}

func (x FreehandDrawingToolkitUIState_FreehandDrawingToolType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FreehandDrawingToolkitUIState_FreehandDrawingToolType) Descriptor() protoreflect.EnumDescriptor {
	return file_TSDArchives_proto_enumTypes[11].Descriptor()
}

func (FreehandDrawingToolkitUIState_FreehandDrawingToolType) Type() protoreflect.EnumType {
	return &file_TSDArchives_proto_enumTypes[11]
}

func (x FreehandDrawingToolkitUIState_FreehandDrawingToolType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *FreehandDrawingToolkitUIState_FreehandDrawingToolType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = FreehandDrawingToolkitUIState_FreehandDrawingToolType(num)
	return nil
}

// Deprecated: Use FreehandDrawingToolkitUIState_FreehandDrawingToolType.Descriptor instead.
func (FreehandDrawingToolkitUIState_FreehandDrawingToolType) EnumDescriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{46, 0}
}

type GuideArchive_GuideType int32

const (
	GuideArchive_Horizontal GuideArchive_GuideType = 0
	GuideArchive_Vertical   GuideArchive_GuideType = 1
)

// Enum value maps for GuideArchive_GuideType.
var (
	GuideArchive_GuideType_name = map[int32]string{
		0: "Horizontal",
		1: "Vertical",
	}
	GuideArchive_GuideType_value = map[string]int32{
		"Horizontal": 0,
		"Vertical":   1,
	}
)

func (x GuideArchive_GuideType) Enum() *GuideArchive_GuideType {
	p := new(GuideArchive_GuideType)
	*p = x
	return p
}

func (x GuideArchive_GuideType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GuideArchive_GuideType) Descriptor() protoreflect.EnumDescriptor {
	return file_TSDArchives_proto_enumTypes[12].Descriptor()
}

func (GuideArchive_GuideType) Type() protoreflect.EnumType {
	return &file_TSDArchives_proto_enumTypes[12]
}

func (x GuideArchive_GuideType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GuideArchive_GuideType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GuideArchive_GuideType(num)
	return nil
}

// Deprecated: Use GuideArchive_GuideType.Descriptor instead.
func (GuideArchive_GuideType) EnumDescriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{48, 0}
}

type UserDefinedGuideArchive_GuideType int32

const (
	UserDefinedGuideArchive_Horizontal UserDefinedGuideArchive_GuideType = 0
	UserDefinedGuideArchive_Vertical   UserDefinedGuideArchive_GuideType = 1
)

// Enum value maps for UserDefinedGuideArchive_GuideType.
var (
	UserDefinedGuideArchive_GuideType_name = map[int32]string{
		0: "Horizontal",
		1: "Vertical",
	}
	UserDefinedGuideArchive_GuideType_value = map[string]int32{
		"Horizontal": 0,
		"Vertical":   1,
	}
)

func (x UserDefinedGuideArchive_GuideType) Enum() *UserDefinedGuideArchive_GuideType {
	p := new(UserDefinedGuideArchive_GuideType)
	*p = x
	return p
}

func (x UserDefinedGuideArchive_GuideType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserDefinedGuideArchive_GuideType) Descriptor() protoreflect.EnumDescriptor {
	return file_TSDArchives_proto_enumTypes[13].Descriptor()
}

func (UserDefinedGuideArchive_GuideType) Type() protoreflect.EnumType {
	return &file_TSDArchives_proto_enumTypes[13]
}

func (x UserDefinedGuideArchive_GuideType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *UserDefinedGuideArchive_GuideType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = UserDefinedGuideArchive_GuideType(num)
	return nil
}

// Deprecated: Use UserDefinedGuideArchive_GuideType.Descriptor instead.
func (UserDefinedGuideArchive_GuideType) EnumDescriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{49, 0}
}

type EdgeInsetsArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Top    *float32 `protobuf:"fixed32,1,req,name=top" json:"top,omitempty"`
	Left   *float32 `protobuf:"fixed32,2,req,name=left" json:"left,omitempty"`
	Bottom *float32 `protobuf:"fixed32,3,req,name=bottom" json:"bottom,omitempty"`
	Right  *float32 `protobuf:"fixed32,4,req,name=right" json:"right,omitempty"`
}

func (x *EdgeInsetsArchive) Reset() {
	*x = EdgeInsetsArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgeInsetsArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgeInsetsArchive) ProtoMessage() {}

func (x *EdgeInsetsArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgeInsetsArchive.ProtoReflect.Descriptor instead.
func (*EdgeInsetsArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{0}
}

func (x *EdgeInsetsArchive) GetTop() float32 {
	if x != nil && x.Top != nil {
		return *x.Top
	}
	return 0
}

func (x *EdgeInsetsArchive) GetLeft() float32 {
	if x != nil && x.Left != nil {
		return *x.Left
	}
	return 0
}

func (x *EdgeInsetsArchive) GetBottom() float32 {
	if x != nil && x.Bottom != nil {
		return *x.Bottom
	}
	return 0
}

func (x *EdgeInsetsArchive) GetRight() float32 {
	if x != nil && x.Right != nil {
		return *x.Right
	}
	return 0
}

type GeometryArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position *Point   `protobuf:"bytes,1,opt,name=position" json:"position,omitempty"`
	Size     *Size    `protobuf:"bytes,2,opt,name=size" json:"size,omitempty"`
	Flags    *uint32  `protobuf:"varint,3,opt,name=flags" json:"flags,omitempty"`
	Angle    *float32 `protobuf:"fixed32,4,opt,name=angle" json:"angle,omitempty"`
}

func (x *GeometryArchive) Reset() {
	*x = GeometryArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeometryArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeometryArchive) ProtoMessage() {}

func (x *GeometryArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeometryArchive.ProtoReflect.Descriptor instead.
func (*GeometryArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{1}
}

func (x *GeometryArchive) GetPosition() *Point {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *GeometryArchive) GetSize() *Size {
	if x != nil {
		return x.Size
	}
	return nil
}

func (x *GeometryArchive) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *GeometryArchive) GetAngle() float32 {
	if x != nil && x.Angle != nil {
		return *x.Angle
	}
	return 0
}

type PointPathSourceArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        *PointPathSourceArchive_PointPathSourceType `protobuf:"varint,1,opt,name=type,enum=TSD.PointPathSourceArchive_PointPathSourceType" json:"type,omitempty"`
	Point       *Point                                      `protobuf:"bytes,2,opt,name=point" json:"point,omitempty"`
	NaturalSize *Size                                       `protobuf:"bytes,3,opt,name=naturalSize" json:"naturalSize,omitempty"`
}

func (x *PointPathSourceArchive) Reset() {
	*x = PointPathSourceArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PointPathSourceArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointPathSourceArchive) ProtoMessage() {}

func (x *PointPathSourceArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointPathSourceArchive.ProtoReflect.Descriptor instead.
func (*PointPathSourceArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{2}
}

func (x *PointPathSourceArchive) GetType() PointPathSourceArchive_PointPathSourceType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return PointPathSourceArchive_kTSDLeftSingleArrow
}

func (x *PointPathSourceArchive) GetPoint() *Point {
	if x != nil {
		return x.Point
	}
	return nil
}

func (x *PointPathSourceArchive) GetNaturalSize() *Size {
	if x != nil {
		return x.NaturalSize
	}
	return nil
}

type ScalarPathSourceArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type              *ScalarPathSourceArchive_ScalarPathSourceType `protobuf:"varint,1,opt,name=type,enum=TSD.ScalarPathSourceArchive_ScalarPathSourceType" json:"type,omitempty"`
	Scalar            *float32                                      `protobuf:"fixed32,2,opt,name=scalar" json:"scalar,omitempty"`
	NaturalSize       *Size                                         `protobuf:"bytes,3,opt,name=naturalSize" json:"naturalSize,omitempty"`
	IsCurveContinuous *bool                                         `protobuf:"varint,4,opt,name=is_curve_continuous,json=isCurveContinuous" json:"is_curve_continuous,omitempty"`
}

func (x *ScalarPathSourceArchive) Reset() {
	*x = ScalarPathSourceArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScalarPathSourceArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScalarPathSourceArchive) ProtoMessage() {}

func (x *ScalarPathSourceArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScalarPathSourceArchive.ProtoReflect.Descriptor instead.
func (*ScalarPathSourceArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{3}
}

func (x *ScalarPathSourceArchive) GetType() ScalarPathSourceArchive_ScalarPathSourceType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ScalarPathSourceArchive_kTSDRoundedRectangle
}

func (x *ScalarPathSourceArchive) GetScalar() float32 {
	if x != nil && x.Scalar != nil {
		return *x.Scalar
	}
	return 0
}

func (x *ScalarPathSourceArchive) GetNaturalSize() *Size {
	if x != nil {
		return x.NaturalSize
	}
	return nil
}

func (x *ScalarPathSourceArchive) GetIsCurveContinuous() bool {
	if x != nil && x.IsCurveContinuous != nil {
		return *x.IsCurveContinuous
	}
	return false
}

type BezierPathSourceArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Do not use.
	PathString  *string `protobuf:"bytes,1,opt,name=path_string,json=pathString" json:"path_string,omitempty"`
	NaturalSize *Size   `protobuf:"bytes,2,opt,name=naturalSize" json:"naturalSize,omitempty"`
	Path        *Path   `protobuf:"bytes,3,opt,name=path" json:"path,omitempty"`
}

func (x *BezierPathSourceArchive) Reset() {
	*x = BezierPathSourceArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BezierPathSourceArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BezierPathSourceArchive) ProtoMessage() {}

func (x *BezierPathSourceArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BezierPathSourceArchive.ProtoReflect.Descriptor instead.
func (*BezierPathSourceArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{4}
}

// Deprecated: Do not use.
func (x *BezierPathSourceArchive) GetPathString() string {
	if x != nil && x.PathString != nil {
		return *x.PathString
	}
	return ""
}

func (x *BezierPathSourceArchive) GetNaturalSize() *Size {
	if x != nil {
		return x.NaturalSize
	}
	return nil
}

func (x *BezierPathSourceArchive) GetPath() *Path {
	if x != nil {
		return x.Path
	}
	return nil
}

type CalloutPathSourceArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NaturalSize  *Size    `protobuf:"bytes,1,opt,name=natural_size,json=naturalSize" json:"natural_size,omitempty"`
	TailPosition *Point   `protobuf:"bytes,2,opt,name=tail_position,json=tailPosition" json:"tail_position,omitempty"`
	TailSize     *float32 `protobuf:"fixed32,3,opt,name=tail_size,json=tailSize" json:"tail_size,omitempty"`
	CornerRadius *float32 `protobuf:"fixed32,4,opt,name=corner_radius,json=cornerRadius" json:"corner_radius,omitempty"`
	CenterTail   *bool    `protobuf:"varint,5,opt,name=center_tail,json=centerTail" json:"center_tail,omitempty"`
}

func (x *CalloutPathSourceArchive) Reset() {
	*x = CalloutPathSourceArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalloutPathSourceArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalloutPathSourceArchive) ProtoMessage() {}

func (x *CalloutPathSourceArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalloutPathSourceArchive.ProtoReflect.Descriptor instead.
func (*CalloutPathSourceArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{5}
}

func (x *CalloutPathSourceArchive) GetNaturalSize() *Size {
	if x != nil {
		return x.NaturalSize
	}
	return nil
}

func (x *CalloutPathSourceArchive) GetTailPosition() *Point {
	if x != nil {
		return x.TailPosition
	}
	return nil
}

func (x *CalloutPathSourceArchive) GetTailSize() float32 {
	if x != nil && x.TailSize != nil {
		return *x.TailSize
	}
	return 0
}

func (x *CalloutPathSourceArchive) GetCornerRadius() float32 {
	if x != nil && x.CornerRadius != nil {
		return *x.CornerRadius
	}
	return 0
}

func (x *CalloutPathSourceArchive) GetCenterTail() bool {
	if x != nil && x.CenterTail != nil {
		return *x.CenterTail
	}
	return false
}

type ConnectionLinePathSourceArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super      *BezierPathSourceArchive                                      `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Type       *ConnectionLinePathSourceArchive_ConnectionLinePathSourceType `protobuf:"varint,2,opt,name=type,enum=TSD.ConnectionLinePathSourceArchive_ConnectionLinePathSourceType" json:"type,omitempty"`
	OutsetFrom *float32                                                      `protobuf:"fixed32,3,opt,name=outset_from,json=outsetFrom" json:"outset_from,omitempty"`
	OutsetTo   *float32                                                      `protobuf:"fixed32,4,opt,name=outset_to,json=outsetTo" json:"outset_to,omitempty"`
}

func (x *ConnectionLinePathSourceArchive) Reset() {
	*x = ConnectionLinePathSourceArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionLinePathSourceArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionLinePathSourceArchive) ProtoMessage() {}

func (x *ConnectionLinePathSourceArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionLinePathSourceArchive.ProtoReflect.Descriptor instead.
func (*ConnectionLinePathSourceArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{6}
}

func (x *ConnectionLinePathSourceArchive) GetSuper() *BezierPathSourceArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *ConnectionLinePathSourceArchive) GetType() ConnectionLinePathSourceArchive_ConnectionLinePathSourceType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ConnectionLinePathSourceArchive_kTSDConnectionLineTypeQuadratic
}

func (x *ConnectionLinePathSourceArchive) GetOutsetFrom() float32 {
	if x != nil && x.OutsetFrom != nil {
		return *x.OutsetFrom
	}
	return 0
}

func (x *ConnectionLinePathSourceArchive) GetOutsetTo() float32 {
	if x != nil && x.OutsetTo != nil {
		return *x.OutsetTo
	}
	return 0
}

type EditableBezierPathSourceArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subpaths    []*EditableBezierPathSourceArchive_Subpath `protobuf:"bytes,1,rep,name=subpaths" json:"subpaths,omitempty"`
	NaturalSize *Size                                      `protobuf:"bytes,2,opt,name=naturalSize" json:"naturalSize,omitempty"`
}

func (x *EditableBezierPathSourceArchive) Reset() {
	*x = EditableBezierPathSourceArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditableBezierPathSourceArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditableBezierPathSourceArchive) ProtoMessage() {}

func (x *EditableBezierPathSourceArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditableBezierPathSourceArchive.ProtoReflect.Descriptor instead.
func (*EditableBezierPathSourceArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{7}
}

func (x *EditableBezierPathSourceArchive) GetSubpaths() []*EditableBezierPathSourceArchive_Subpath {
	if x != nil {
		return x.Subpaths
	}
	return nil
}

func (x *EditableBezierPathSourceArchive) GetNaturalSize() *Size {
	if x != nil {
		return x.NaturalSize
	}
	return nil
}

type PathSourceArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HorizontalFlip           *bool                            `protobuf:"varint,1,opt,name=horizontalFlip" json:"horizontalFlip,omitempty"`
	VerticalFlip             *bool                            `protobuf:"varint,2,opt,name=verticalFlip" json:"verticalFlip,omitempty"`
	PointPathSource          *PointPathSourceArchive          `protobuf:"bytes,3,opt,name=point_path_source,json=pointPathSource" json:"point_path_source,omitempty"`
	ScalarPathSource         *ScalarPathSourceArchive         `protobuf:"bytes,4,opt,name=scalar_path_source,json=scalarPathSource" json:"scalar_path_source,omitempty"`
	BezierPathSource         *BezierPathSourceArchive         `protobuf:"bytes,5,opt,name=bezier_path_source,json=bezierPathSource" json:"bezier_path_source,omitempty"`
	CalloutPathSource        *CalloutPathSourceArchive        `protobuf:"bytes,6,opt,name=callout_path_source,json=calloutPathSource" json:"callout_path_source,omitempty"`
	ConnectionLinePathSource *ConnectionLinePathSourceArchive `protobuf:"bytes,7,opt,name=connection_line_path_source,json=connectionLinePathSource" json:"connection_line_path_source,omitempty"`
	EditableBezierPathSource *EditableBezierPathSourceArchive `protobuf:"bytes,8,opt,name=editable_bezier_path_source,json=editableBezierPathSource" json:"editable_bezier_path_source,omitempty"`
	LocalizationKey          *string                          `protobuf:"bytes,9,opt,name=localizationKey" json:"localizationKey,omitempty"`
	UserDefinedName          *string                          `protobuf:"bytes,10,opt,name=userDefinedName" json:"userDefinedName,omitempty"`
}

func (x *PathSourceArchive) Reset() {
	*x = PathSourceArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PathSourceArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PathSourceArchive) ProtoMessage() {}

func (x *PathSourceArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PathSourceArchive.ProtoReflect.Descriptor instead.
func (*PathSourceArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{8}
}

func (x *PathSourceArchive) GetHorizontalFlip() bool {
	if x != nil && x.HorizontalFlip != nil {
		return *x.HorizontalFlip
	}
	return false
}

func (x *PathSourceArchive) GetVerticalFlip() bool {
	if x != nil && x.VerticalFlip != nil {
		return *x.VerticalFlip
	}
	return false
}

func (x *PathSourceArchive) GetPointPathSource() *PointPathSourceArchive {
	if x != nil {
		return x.PointPathSource
	}
	return nil
}

func (x *PathSourceArchive) GetScalarPathSource() *ScalarPathSourceArchive {
	if x != nil {
		return x.ScalarPathSource
	}
	return nil
}

func (x *PathSourceArchive) GetBezierPathSource() *BezierPathSourceArchive {
	if x != nil {
		return x.BezierPathSource
	}
	return nil
}

func (x *PathSourceArchive) GetCalloutPathSource() *CalloutPathSourceArchive {
	if x != nil {
		return x.CalloutPathSource
	}
	return nil
}

func (x *PathSourceArchive) GetConnectionLinePathSource() *ConnectionLinePathSourceArchive {
	if x != nil {
		return x.ConnectionLinePathSource
	}
	return nil
}

func (x *PathSourceArchive) GetEditableBezierPathSource() *EditableBezierPathSourceArchive {
	if x != nil {
		return x.EditableBezierPathSource
	}
	return nil
}

func (x *PathSourceArchive) GetLocalizationKey() string {
	if x != nil && x.LocalizationKey != nil {
		return *x.LocalizationKey
	}
	return ""
}

func (x *PathSourceArchive) GetUserDefinedName() string {
	if x != nil && x.UserDefinedName != nil {
		return *x.UserDefinedName
	}
	return ""
}

type AngleGradientArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gradientangle *float32 `protobuf:"fixed32,2,opt,name=gradientangle" json:"gradientangle,omitempty"`
}

func (x *AngleGradientArchive) Reset() {
	*x = AngleGradientArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AngleGradientArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AngleGradientArchive) ProtoMessage() {}

func (x *AngleGradientArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AngleGradientArchive.ProtoReflect.Descriptor instead.
func (*AngleGradientArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{9}
}

func (x *AngleGradientArchive) GetGradientangle() float32 {
	if x != nil && x.Gradientangle != nil {
		return *x.Gradientangle
	}
	return 0
}

type TransformGradientArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start           *Point `protobuf:"bytes,1,opt,name=start" json:"start,omitempty"`
	End             *Point `protobuf:"bytes,2,opt,name=end" json:"end,omitempty"`
	BaseNaturalSize *Size  `protobuf:"bytes,3,opt,name=baseNaturalSize" json:"baseNaturalSize,omitempty"`
}

func (x *TransformGradientArchive) Reset() {
	*x = TransformGradientArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransformGradientArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransformGradientArchive) ProtoMessage() {}

func (x *TransformGradientArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransformGradientArchive.ProtoReflect.Descriptor instead.
func (*TransformGradientArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{10}
}

func (x *TransformGradientArchive) GetStart() *Point {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *TransformGradientArchive) GetEnd() *Point {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *TransformGradientArchive) GetBaseNaturalSize() *Size {
	if x != nil {
		return x.BaseNaturalSize
	}
	return nil
}

type GradientArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type              *GradientArchive_GradientType   `protobuf:"varint,1,opt,name=type,enum=TSD.GradientArchive_GradientType" json:"type,omitempty"`
	Stops             []*GradientArchive_GradientStop `protobuf:"bytes,2,rep,name=stops" json:"stops,omitempty"`
	Opacity           *float32                        `protobuf:"fixed32,3,opt,name=opacity" json:"opacity,omitempty"`
	AdvancedGradient  *bool                           `protobuf:"varint,4,opt,name=advancedGradient" json:"advancedGradient,omitempty"`
	Anglegradient     *AngleGradientArchive           `protobuf:"bytes,5,opt,name=anglegradient" json:"anglegradient,omitempty"`
	Transformgradient *TransformGradientArchive       `protobuf:"bytes,6,opt,name=transformgradient" json:"transformgradient,omitempty"`
}

func (x *GradientArchive) Reset() {
	*x = GradientArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GradientArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GradientArchive) ProtoMessage() {}

func (x *GradientArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GradientArchive.ProtoReflect.Descriptor instead.
func (*GradientArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{11}
}

func (x *GradientArchive) GetType() GradientArchive_GradientType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return GradientArchive_Linear
}

func (x *GradientArchive) GetStops() []*GradientArchive_GradientStop {
	if x != nil {
		return x.Stops
	}
	return nil
}

func (x *GradientArchive) GetOpacity() float32 {
	if x != nil && x.Opacity != nil {
		return *x.Opacity
	}
	return 0
}

func (x *GradientArchive) GetAdvancedGradient() bool {
	if x != nil && x.AdvancedGradient != nil {
		return *x.AdvancedGradient
	}
	return false
}

func (x *GradientArchive) GetAnglegradient() *AngleGradientArchive {
	if x != nil {
		return x.Anglegradient
	}
	return nil
}

func (x *GradientArchive) GetTransformgradient() *TransformGradientArchive {
	if x != nil {
		return x.Transformgradient
	}
	return nil
}

type ImageFillArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Imagedata *DataReference                       `protobuf:"bytes,6,opt,name=imagedata" json:"imagedata,omitempty"`
	Technique *ImageFillArchive_ImageFillTechnique `protobuf:"varint,2,opt,name=technique,enum=TSD.ImageFillArchive_ImageFillTechnique,def=0" json:"technique,omitempty"`
	Tint      *Color                               `protobuf:"bytes,3,opt,name=tint" json:"tint,omitempty"`
	Fillsize  *Size                                `protobuf:"bytes,4,opt,name=fillsize" json:"fillsize,omitempty"`
	// Deprecated: Do not use.
	Originalimagedata                    *DataReference `protobuf:"bytes,7,opt,name=originalimagedata" json:"originalimagedata,omitempty"`
	InterpretsUntaggedImageDataAsGeneric *bool          `protobuf:"varint,8,opt,name=interpretsUntaggedImageDataAsGeneric" json:"interpretsUntaggedImageDataAsGeneric,omitempty"`
	Referencecolor                       *Color         `protobuf:"bytes,9,opt,name=referencecolor" json:"referencecolor,omitempty"`
	DatabaseImagedata                    *Reference     `protobuf:"bytes,1,opt,name=database_imagedata,json=databaseImagedata" json:"database_imagedata,omitempty"`
	DatabaseOriginalimagedata            *Reference     `protobuf:"bytes,5,opt,name=database_originalimagedata,json=databaseOriginalimagedata" json:"database_originalimagedata,omitempty"`
}

// Default values for ImageFillArchive fields.
const (
	Default_ImageFillArchive_Technique = ImageFillArchive_NaturalSize
)

func (x *ImageFillArchive) Reset() {
	*x = ImageFillArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageFillArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageFillArchive) ProtoMessage() {}

func (x *ImageFillArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageFillArchive.ProtoReflect.Descriptor instead.
func (*ImageFillArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{12}
}

func (x *ImageFillArchive) GetImagedata() *DataReference {
	if x != nil {
		return x.Imagedata
	}
	return nil
}

func (x *ImageFillArchive) GetTechnique() ImageFillArchive_ImageFillTechnique {
	if x != nil && x.Technique != nil {
		return *x.Technique
	}
	return Default_ImageFillArchive_Technique
}

func (x *ImageFillArchive) GetTint() *Color {
	if x != nil {
		return x.Tint
	}
	return nil
}

func (x *ImageFillArchive) GetFillsize() *Size {
	if x != nil {
		return x.Fillsize
	}
	return nil
}

// Deprecated: Do not use.
func (x *ImageFillArchive) GetOriginalimagedata() *DataReference {
	if x != nil {
		return x.Originalimagedata
	}
	return nil
}

func (x *ImageFillArchive) GetInterpretsUntaggedImageDataAsGeneric() bool {
	if x != nil && x.InterpretsUntaggedImageDataAsGeneric != nil {
		return *x.InterpretsUntaggedImageDataAsGeneric
	}
	return false
}

func (x *ImageFillArchive) GetReferencecolor() *Color {
	if x != nil {
		return x.Referencecolor
	}
	return nil
}

func (x *ImageFillArchive) GetDatabaseImagedata() *Reference {
	if x != nil {
		return x.DatabaseImagedata
	}
	return nil
}

func (x *ImageFillArchive) GetDatabaseOriginalimagedata() *Reference {
	if x != nil {
		return x.DatabaseOriginalimagedata
	}
	return nil
}

type FillArchive struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	Color    *Color            `protobuf:"bytes,1,opt,name=color" json:"color,omitempty"`
	Gradient *GradientArchive  `protobuf:"bytes,2,opt,name=gradient" json:"gradient,omitempty"`
	Image    *ImageFillArchive `protobuf:"bytes,3,opt,name=image" json:"image,omitempty"`
}

func (x *FillArchive) Reset() {
	*x = FillArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FillArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FillArchive) ProtoMessage() {}

func (x *FillArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FillArchive.ProtoReflect.Descriptor instead.
func (*FillArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{13}
}

func (x *FillArchive) GetColor() *Color {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *FillArchive) GetGradient() *GradientArchive {
	if x != nil {
		return x.Gradient
	}
	return nil
}

func (x *FillArchive) GetImage() *ImageFillArchive {
	if x != nil {
		return x.Image
	}
	return nil
}

type StrokePatternArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    *StrokePatternArchive_StrokePatternType `protobuf:"varint,1,opt,name=type,enum=TSD.StrokePatternArchive_StrokePatternType" json:"type,omitempty"`
	Phase   *float32                                `protobuf:"fixed32,2,opt,name=phase" json:"phase,omitempty"`
	Count   *uint32                                 `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
	Pattern []float32                               `protobuf:"fixed32,4,rep,name=pattern" json:"pattern,omitempty"`
}

func (x *StrokePatternArchive) Reset() {
	*x = StrokePatternArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StrokePatternArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrokePatternArchive) ProtoMessage() {}

func (x *StrokePatternArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrokePatternArchive.ProtoReflect.Descriptor instead.
func (*StrokePatternArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{14}
}

func (x *StrokePatternArchive) GetType() StrokePatternArchive_StrokePatternType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return StrokePatternArchive_TSDPattern
}

func (x *StrokePatternArchive) GetPhase() float32 {
	if x != nil && x.Phase != nil {
		return *x.Phase
	}
	return 0
}

func (x *StrokePatternArchive) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *StrokePatternArchive) GetPattern() []float32 {
	if x != nil {
		return x.Pattern
	}
	return nil
}

type StrokeArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Color           *Color                  `protobuf:"bytes,1,opt,name=color" json:"color,omitempty"`
	Width           *float32                `protobuf:"fixed32,2,opt,name=width" json:"width,omitempty"`
	Cap             *StrokeArchive_LineCap  `protobuf:"varint,3,opt,name=cap,enum=TSD.StrokeArchive_LineCap" json:"cap,omitempty"`
	Join            *LineJoin               `protobuf:"varint,4,opt,name=join,enum=TSD.LineJoin" json:"join,omitempty"`
	MiterLimit      *float32                `protobuf:"fixed32,5,opt,name=miter_limit,json=miterLimit" json:"miter_limit,omitempty"`
	Pattern         *StrokePatternArchive   `protobuf:"bytes,6,opt,name=pattern" json:"pattern,omitempty"`
	SmartStroke     *SmartStrokeArchive     `protobuf:"bytes,7,opt,name=smart_stroke,json=smartStroke" json:"smart_stroke,omitempty"`
	Frame           *FrameArchive           `protobuf:"bytes,8,opt,name=frame" json:"frame,omitempty"`
	PatternedStroke *PatternedStrokeArchive `protobuf:"bytes,9,opt,name=patterned_stroke,json=patternedStroke" json:"patterned_stroke,omitempty"`
}

func (x *StrokeArchive) Reset() {
	*x = StrokeArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StrokeArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrokeArchive) ProtoMessage() {}

func (x *StrokeArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrokeArchive.ProtoReflect.Descriptor instead.
func (*StrokeArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{15}
}

func (x *StrokeArchive) GetColor() *Color {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *StrokeArchive) GetWidth() float32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *StrokeArchive) GetCap() StrokeArchive_LineCap {
	if x != nil && x.Cap != nil {
		return *x.Cap
	}
	return StrokeArchive_ButtCap
}

func (x *StrokeArchive) GetJoin() LineJoin {
	if x != nil && x.Join != nil {
		return *x.Join
	}
	return LineJoin_MiterJoin
}

func (x *StrokeArchive) GetMiterLimit() float32 {
	if x != nil && x.MiterLimit != nil {
		return *x.MiterLimit
	}
	return 0
}

func (x *StrokeArchive) GetPattern() *StrokePatternArchive {
	if x != nil {
		return x.Pattern
	}
	return nil
}

func (x *StrokeArchive) GetSmartStroke() *SmartStrokeArchive {
	if x != nil {
		return x.SmartStroke
	}
	return nil
}

func (x *StrokeArchive) GetFrame() *FrameArchive {
	if x != nil {
		return x.Frame
	}
	return nil
}

func (x *StrokeArchive) GetPatternedStroke() *PatternedStrokeArchive {
	if x != nil {
		return x.PatternedStroke
	}
	return nil
}

type SmartStrokeArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StrokeName            *string              `protobuf:"bytes,2,opt,name=stroke_name,json=strokeName" json:"stroke_name,omitempty"`
	RandomSeed            *uint32              `protobuf:"varint,3,opt,name=random_seed,json=randomSeed" json:"random_seed,omitempty"`
	ParameterValues       *ReferenceDictionary `protobuf:"bytes,4,opt,name=parameterValues" json:"parameterValues,omitempty"`
	PatternOffsetDistance *float64             `protobuf:"fixed64,5,opt,name=pattern_offset_distance,json=patternOffsetDistance" json:"pattern_offset_distance,omitempty"`
}

func (x *SmartStrokeArchive) Reset() {
	*x = SmartStrokeArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmartStrokeArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmartStrokeArchive) ProtoMessage() {}

func (x *SmartStrokeArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmartStrokeArchive.ProtoReflect.Descriptor instead.
func (*SmartStrokeArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{16}
}

func (x *SmartStrokeArchive) GetStrokeName() string {
	if x != nil && x.StrokeName != nil {
		return *x.StrokeName
	}
	return ""
}

func (x *SmartStrokeArchive) GetRandomSeed() uint32 {
	if x != nil && x.RandomSeed != nil {
		return *x.RandomSeed
	}
	return 0
}

func (x *SmartStrokeArchive) GetParameterValues() *ReferenceDictionary {
	if x != nil {
		return x.ParameterValues
	}
	return nil
}

func (x *SmartStrokeArchive) GetPatternOffsetDistance() float64 {
	if x != nil && x.PatternOffsetDistance != nil {
		return *x.PatternOffsetDistance
	}
	return 0
}

type FrameArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FrameName  *string  `protobuf:"bytes,2,opt,name=frameName" json:"frameName,omitempty"`
	AssetScale *float32 `protobuf:"fixed32,3,opt,name=assetScale" json:"assetScale,omitempty"`
}

func (x *FrameArchive) Reset() {
	*x = FrameArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrameArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrameArchive) ProtoMessage() {}

func (x *FrameArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrameArchive.ProtoReflect.Descriptor instead.
func (*FrameArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{17}
}

func (x *FrameArchive) GetFrameName() string {
	if x != nil && x.FrameName != nil {
		return *x.FrameName
	}
	return ""
}

func (x *FrameArchive) GetAssetScale() float32 {
	if x != nil && x.AssetScale != nil {
		return *x.AssetScale
	}
	return 0
}

type PatternedStrokeArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PatternName *string `protobuf:"bytes,2,opt,name=pattern_name,json=patternName" json:"pattern_name,omitempty"`
}

func (x *PatternedStrokeArchive) Reset() {
	*x = PatternedStrokeArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternedStrokeArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternedStrokeArchive) ProtoMessage() {}

func (x *PatternedStrokeArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternedStrokeArchive.ProtoReflect.Descriptor instead.
func (*PatternedStrokeArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{18}
}

func (x *PatternedStrokeArchive) GetPatternName() string {
	if x != nil && x.PatternName != nil {
		return *x.PatternName
	}
	return ""
}

type LineEndArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path       *Path     `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	LineJoin   *LineJoin `protobuf:"varint,2,opt,name=line_join,json=lineJoin,enum=TSD.LineJoin,def=0" json:"line_join,omitempty"`
	EndPoint   *Point    `protobuf:"bytes,3,opt,name=end_point,json=endPoint" json:"end_point,omitempty"`
	IsFilled   *bool     `protobuf:"varint,4,opt,name=is_filled,json=isFilled" json:"is_filled,omitempty"`
	Identifier *string   `protobuf:"bytes,5,opt,name=identifier" json:"identifier,omitempty"`
}

// Default values for LineEndArchive fields.
const (
	Default_LineEndArchive_LineJoin = LineJoin_MiterJoin
)

func (x *LineEndArchive) Reset() {
	*x = LineEndArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LineEndArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LineEndArchive) ProtoMessage() {}

func (x *LineEndArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LineEndArchive.ProtoReflect.Descriptor instead.
func (*LineEndArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{19}
}

func (x *LineEndArchive) GetPath() *Path {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *LineEndArchive) GetLineJoin() LineJoin {
	if x != nil && x.LineJoin != nil {
		return *x.LineJoin
	}
	return Default_LineEndArchive_LineJoin
}

func (x *LineEndArchive) GetEndPoint() *Point {
	if x != nil {
		return x.EndPoint
	}
	return nil
}

func (x *LineEndArchive) GetIsFilled() bool {
	if x != nil && x.IsFilled != nil {
		return *x.IsFilled
	}
	return false
}

func (x *LineEndArchive) GetIdentifier() string {
	if x != nil && x.Identifier != nil {
		return *x.Identifier
	}
	return ""
}

type ShadowArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Color         *Color                    `protobuf:"bytes,1,opt,name=color" json:"color,omitempty"`
	Angle         *float32                  `protobuf:"fixed32,2,opt,name=angle,def=315" json:"angle,omitempty"`
	Offset        *float32                  `protobuf:"fixed32,3,opt,name=offset,def=5" json:"offset,omitempty"`
	Radius        *int32                    `protobuf:"varint,4,opt,name=radius,def=1" json:"radius,omitempty"`
	Opacity       *float32                  `protobuf:"fixed32,5,opt,name=opacity,def=1" json:"opacity,omitempty"`
	IsEnabled     *bool                     `protobuf:"varint,6,opt,name=is_enabled,json=isEnabled,def=1" json:"is_enabled,omitempty"`
	Type          *ShadowArchive_ShadowType `protobuf:"varint,7,opt,name=type,enum=TSD.ShadowArchive_ShadowType,def=0" json:"type,omitempty"`
	DropShadow    *DropShadowArchive        `protobuf:"bytes,8,opt,name=dropShadow" json:"dropShadow,omitempty"`
	ContactShadow *ContactShadowArchive     `protobuf:"bytes,9,opt,name=contactShadow" json:"contactShadow,omitempty"`
	CurvedShadow  *CurvedShadowArchive      `protobuf:"bytes,10,opt,name=curvedShadow" json:"curvedShadow,omitempty"`
}

// Default values for ShadowArchive fields.
const (
	Default_ShadowArchive_Angle     = float32(315)
	Default_ShadowArchive_Offset    = float32(5)
	Default_ShadowArchive_Radius    = int32(1)
	Default_ShadowArchive_Opacity   = float32(1)
	Default_ShadowArchive_IsEnabled = bool(true)
	Default_ShadowArchive_Type      = ShadowArchive_TSDDropShadow
)

func (x *ShadowArchive) Reset() {
	*x = ShadowArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShadowArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShadowArchive) ProtoMessage() {}

func (x *ShadowArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShadowArchive.ProtoReflect.Descriptor instead.
func (*ShadowArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{20}
}

func (x *ShadowArchive) GetColor() *Color {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *ShadowArchive) GetAngle() float32 {
	if x != nil && x.Angle != nil {
		return *x.Angle
	}
	return Default_ShadowArchive_Angle
}

func (x *ShadowArchive) GetOffset() float32 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return Default_ShadowArchive_Offset
}

func (x *ShadowArchive) GetRadius() int32 {
	if x != nil && x.Radius != nil {
		return *x.Radius
	}
	return Default_ShadowArchive_Radius
}

func (x *ShadowArchive) GetOpacity() float32 {
	if x != nil && x.Opacity != nil {
		return *x.Opacity
	}
	return Default_ShadowArchive_Opacity
}

func (x *ShadowArchive) GetIsEnabled() bool {
	if x != nil && x.IsEnabled != nil {
		return *x.IsEnabled
	}
	return Default_ShadowArchive_IsEnabled
}

func (x *ShadowArchive) GetType() ShadowArchive_ShadowType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_ShadowArchive_Type
}

func (x *ShadowArchive) GetDropShadow() *DropShadowArchive {
	if x != nil {
		return x.DropShadow
	}
	return nil
}

func (x *ShadowArchive) GetContactShadow() *ContactShadowArchive {
	if x != nil {
		return x.ContactShadow
	}
	return nil
}

func (x *ShadowArchive) GetCurvedShadow() *CurvedShadowArchive {
	if x != nil {
		return x.CurvedShadow
	}
	return nil
}

type DropShadowArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DropShadowArchive) Reset() {
	*x = DropShadowArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropShadowArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropShadowArchive) ProtoMessage() {}

func (x *DropShadowArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropShadowArchive.ProtoReflect.Descriptor instead.
func (*DropShadowArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{21}
}

type ContactShadowArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height *float32 `protobuf:"fixed32,2,opt,name=height,def=0.2" json:"height,omitempty"`
	Offset *float32 `protobuf:"fixed32,4,opt,name=offset,def=0" json:"offset,omitempty"`
}

// Default values for ContactShadowArchive fields.
const (
	Default_ContactShadowArchive_Height = float32(0.20000000298023224)
	Default_ContactShadowArchive_Offset = float32(0)
)

func (x *ContactShadowArchive) Reset() {
	*x = ContactShadowArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactShadowArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactShadowArchive) ProtoMessage() {}

func (x *ContactShadowArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactShadowArchive.ProtoReflect.Descriptor instead.
func (*ContactShadowArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{22}
}

func (x *ContactShadowArchive) GetHeight() float32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return Default_ContactShadowArchive_Height
}

func (x *ContactShadowArchive) GetOffset() float32 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return Default_ContactShadowArchive_Offset
}

type CurvedShadowArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Curve *float32 `protobuf:"fixed32,1,opt,name=curve,def=0.6" json:"curve,omitempty"`
}

// Default values for CurvedShadowArchive fields.
const (
	Default_CurvedShadowArchive_Curve = float32(0.6000000238418579)
)

func (x *CurvedShadowArchive) Reset() {
	*x = CurvedShadowArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurvedShadowArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurvedShadowArchive) ProtoMessage() {}

func (x *CurvedShadowArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurvedShadowArchive.ProtoReflect.Descriptor instead.
func (*CurvedShadowArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{23}
}

func (x *CurvedShadowArchive) GetCurve() float32 {
	if x != nil && x.Curve != nil {
		return *x.Curve
	}
	return Default_CurvedShadowArchive_Curve
}

type ReflectionArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Opacity *float32 `protobuf:"fixed32,1,opt,name=opacity,def=0.5" json:"opacity,omitempty"`
}

// Default values for ReflectionArchive fields.
const (
	Default_ReflectionArchive_Opacity = float32(0.5)
)

func (x *ReflectionArchive) Reset() {
	*x = ReflectionArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReflectionArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReflectionArchive) ProtoMessage() {}

func (x *ReflectionArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReflectionArchive.ProtoReflect.Descriptor instead.
func (*ReflectionArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{24}
}

func (x *ReflectionArchive) GetOpacity() float32 {
	if x != nil && x.Opacity != nil {
		return *x.Opacity
	}
	return Default_ReflectionArchive_Opacity
}

type ImageAdjustmentsArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exposure                  *float32 `protobuf:"fixed32,1,opt,name=exposure" json:"exposure,omitempty"`
	Saturation                *float32 `protobuf:"fixed32,2,opt,name=saturation" json:"saturation,omitempty"`
	Contrast                  *float32 `protobuf:"fixed32,3,opt,name=contrast" json:"contrast,omitempty"`
	Highlights                *float32 `protobuf:"fixed32,4,opt,name=highlights" json:"highlights,omitempty"`
	Shadows                   *float32 `protobuf:"fixed32,5,opt,name=shadows" json:"shadows,omitempty"`
	Sharpness                 *float32 `protobuf:"fixed32,6,opt,name=sharpness" json:"sharpness,omitempty"`
	Denoise                   *float32 `protobuf:"fixed32,7,opt,name=denoise" json:"denoise,omitempty"`
	Temperature               *float32 `protobuf:"fixed32,8,opt,name=temperature" json:"temperature,omitempty"`
	Tint                      *float32 `protobuf:"fixed32,9,opt,name=tint" json:"tint,omitempty"`
	BottomLevel               *float32 `protobuf:"fixed32,10,opt,name=bottom_level,json=bottomLevel" json:"bottom_level,omitempty"`
	TopLevel                  *float32 `protobuf:"fixed32,11,opt,name=top_level,json=topLevel,def=1" json:"top_level,omitempty"`
	Gamma                     *float32 `protobuf:"fixed32,12,opt,name=gamma" json:"gamma,omitempty"`
	Enhance                   *bool    `protobuf:"varint,13,opt,name=enhance,def=0" json:"enhance,omitempty"`
	RepresentsSageAdjustments *bool    `protobuf:"varint,14,opt,name=represents_sage_adjustments,json=representsSageAdjustments,def=0" json:"represents_sage_adjustments,omitempty"`
}

// Default values for ImageAdjustmentsArchive fields.
const (
	Default_ImageAdjustmentsArchive_TopLevel                  = float32(1)
	Default_ImageAdjustmentsArchive_Enhance                   = bool(false)
	Default_ImageAdjustmentsArchive_RepresentsSageAdjustments = bool(false)
)

func (x *ImageAdjustmentsArchive) Reset() {
	*x = ImageAdjustmentsArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageAdjustmentsArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageAdjustmentsArchive) ProtoMessage() {}

func (x *ImageAdjustmentsArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageAdjustmentsArchive.ProtoReflect.Descriptor instead.
func (*ImageAdjustmentsArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{25}
}

func (x *ImageAdjustmentsArchive) GetExposure() float32 {
	if x != nil && x.Exposure != nil {
		return *x.Exposure
	}
	return 0
}

func (x *ImageAdjustmentsArchive) GetSaturation() float32 {
	if x != nil && x.Saturation != nil {
		return *x.Saturation
	}
	return 0
}

func (x *ImageAdjustmentsArchive) GetContrast() float32 {
	if x != nil && x.Contrast != nil {
		return *x.Contrast
	}
	return 0
}

func (x *ImageAdjustmentsArchive) GetHighlights() float32 {
	if x != nil && x.Highlights != nil {
		return *x.Highlights
	}
	return 0
}

func (x *ImageAdjustmentsArchive) GetShadows() float32 {
	if x != nil && x.Shadows != nil {
		return *x.Shadows
	}
	return 0
}

func (x *ImageAdjustmentsArchive) GetSharpness() float32 {
	if x != nil && x.Sharpness != nil {
		return *x.Sharpness
	}
	return 0
}

func (x *ImageAdjustmentsArchive) GetDenoise() float32 {
	if x != nil && x.Denoise != nil {
		return *x.Denoise
	}
	return 0
}

func (x *ImageAdjustmentsArchive) GetTemperature() float32 {
	if x != nil && x.Temperature != nil {
		return *x.Temperature
	}
	return 0
}

func (x *ImageAdjustmentsArchive) GetTint() float32 {
	if x != nil && x.Tint != nil {
		return *x.Tint
	}
	return 0
}

func (x *ImageAdjustmentsArchive) GetBottomLevel() float32 {
	if x != nil && x.BottomLevel != nil {
		return *x.BottomLevel
	}
	return 0
}

func (x *ImageAdjustmentsArchive) GetTopLevel() float32 {
	if x != nil && x.TopLevel != nil {
		return *x.TopLevel
	}
	return Default_ImageAdjustmentsArchive_TopLevel
}

func (x *ImageAdjustmentsArchive) GetGamma() float32 {
	if x != nil && x.Gamma != nil {
		return *x.Gamma
	}
	return 0
}

func (x *ImageAdjustmentsArchive) GetEnhance() bool {
	if x != nil && x.Enhance != nil {
		return *x.Enhance
	}
	return Default_ImageAdjustmentsArchive_Enhance
}

func (x *ImageAdjustmentsArchive) GetRepresentsSageAdjustments() bool {
	if x != nil && x.RepresentsSageAdjustments != nil {
		return *x.RepresentsSageAdjustments
	}
	return Default_ImageAdjustmentsArchive_RepresentsSageAdjustments
}

type ShapeStylePropertiesArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fill        *FillArchive       `protobuf:"bytes,1,opt,name=fill" json:"fill,omitempty"`
	Stroke      *StrokeArchive     `protobuf:"bytes,2,opt,name=stroke" json:"stroke,omitempty"`
	Opacity     *float32           `protobuf:"fixed32,3,opt,name=opacity" json:"opacity,omitempty"`
	Shadow      *ShadowArchive     `protobuf:"bytes,4,opt,name=shadow" json:"shadow,omitempty"`
	Reflection  *ReflectionArchive `protobuf:"bytes,5,opt,name=reflection" json:"reflection,omitempty"`
	HeadLineEnd *LineEndArchive    `protobuf:"bytes,6,opt,name=head_line_end,json=headLineEnd" json:"head_line_end,omitempty"`
	TailLineEnd *LineEndArchive    `protobuf:"bytes,7,opt,name=tail_line_end,json=tailLineEnd" json:"tail_line_end,omitempty"`
}

func (x *ShapeStylePropertiesArchive) Reset() {
	*x = ShapeStylePropertiesArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShapeStylePropertiesArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShapeStylePropertiesArchive) ProtoMessage() {}

func (x *ShapeStylePropertiesArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShapeStylePropertiesArchive.ProtoReflect.Descriptor instead.
func (*ShapeStylePropertiesArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{26}
}

func (x *ShapeStylePropertiesArchive) GetFill() *FillArchive {
	if x != nil {
		return x.Fill
	}
	return nil
}

func (x *ShapeStylePropertiesArchive) GetStroke() *StrokeArchive {
	if x != nil {
		return x.Stroke
	}
	return nil
}

func (x *ShapeStylePropertiesArchive) GetOpacity() float32 {
	if x != nil && x.Opacity != nil {
		return *x.Opacity
	}
	return 0
}

func (x *ShapeStylePropertiesArchive) GetShadow() *ShadowArchive {
	if x != nil {
		return x.Shadow
	}
	return nil
}

func (x *ShapeStylePropertiesArchive) GetReflection() *ReflectionArchive {
	if x != nil {
		return x.Reflection
	}
	return nil
}

func (x *ShapeStylePropertiesArchive) GetHeadLineEnd() *LineEndArchive {
	if x != nil {
		return x.HeadLineEnd
	}
	return nil
}

func (x *ShapeStylePropertiesArchive) GetTailLineEnd() *LineEndArchive {
	if x != nil {
		return x.TailLineEnd
	}
	return nil
}

type ShapeStyleArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super           *StyleArchive                `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	OverrideCount   *uint32                      `protobuf:"varint,10,opt,name=override_count,json=overrideCount,def=0" json:"override_count,omitempty"`
	ShapeProperties *ShapeStylePropertiesArchive `protobuf:"bytes,11,opt,name=shape_properties,json=shapeProperties" json:"shape_properties,omitempty"`
}

// Default values for ShapeStyleArchive fields.
const (
	Default_ShapeStyleArchive_OverrideCount = uint32(0)
)

func (x *ShapeStyleArchive) Reset() {
	*x = ShapeStyleArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShapeStyleArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShapeStyleArchive) ProtoMessage() {}

func (x *ShapeStyleArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShapeStyleArchive.ProtoReflect.Descriptor instead.
func (*ShapeStyleArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{27}
}

func (x *ShapeStyleArchive) GetSuper() *StyleArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *ShapeStyleArchive) GetOverrideCount() uint32 {
	if x != nil && x.OverrideCount != nil {
		return *x.OverrideCount
	}
	return Default_ShapeStyleArchive_OverrideCount
}

func (x *ShapeStyleArchive) GetShapeProperties() *ShapeStylePropertiesArchive {
	if x != nil {
		return x.ShapeProperties
	}
	return nil
}

type MediaStylePropertiesArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stroke     *StrokeArchive     `protobuf:"bytes,1,opt,name=stroke" json:"stroke,omitempty"`
	Opacity    *float32           `protobuf:"fixed32,2,opt,name=opacity" json:"opacity,omitempty"`
	Shadow     *ShadowArchive     `protobuf:"bytes,3,opt,name=shadow" json:"shadow,omitempty"`
	Reflection *ReflectionArchive `protobuf:"bytes,4,opt,name=reflection" json:"reflection,omitempty"`
}

func (x *MediaStylePropertiesArchive) Reset() {
	*x = MediaStylePropertiesArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaStylePropertiesArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaStylePropertiesArchive) ProtoMessage() {}

func (x *MediaStylePropertiesArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaStylePropertiesArchive.ProtoReflect.Descriptor instead.
func (*MediaStylePropertiesArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{28}
}

func (x *MediaStylePropertiesArchive) GetStroke() *StrokeArchive {
	if x != nil {
		return x.Stroke
	}
	return nil
}

func (x *MediaStylePropertiesArchive) GetOpacity() float32 {
	if x != nil && x.Opacity != nil {
		return *x.Opacity
	}
	return 0
}

func (x *MediaStylePropertiesArchive) GetShadow() *ShadowArchive {
	if x != nil {
		return x.Shadow
	}
	return nil
}

func (x *MediaStylePropertiesArchive) GetReflection() *ReflectionArchive {
	if x != nil {
		return x.Reflection
	}
	return nil
}

type MediaStyleArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super           *StyleArchive                `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	OverrideCount   *uint32                      `protobuf:"varint,10,opt,name=override_count,json=overrideCount,def=0" json:"override_count,omitempty"`
	MediaProperties *MediaStylePropertiesArchive `protobuf:"bytes,11,opt,name=media_properties,json=mediaProperties" json:"media_properties,omitempty"`
}

// Default values for MediaStyleArchive fields.
const (
	Default_MediaStyleArchive_OverrideCount = uint32(0)
)

func (x *MediaStyleArchive) Reset() {
	*x = MediaStyleArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaStyleArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaStyleArchive) ProtoMessage() {}

func (x *MediaStyleArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaStyleArchive.ProtoReflect.Descriptor instead.
func (*MediaStyleArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{29}
}

func (x *MediaStyleArchive) GetSuper() *StyleArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *MediaStyleArchive) GetOverrideCount() uint32 {
	if x != nil && x.OverrideCount != nil {
		return *x.OverrideCount
	}
	return Default_MediaStyleArchive_OverrideCount
}

func (x *MediaStyleArchive) GetMediaProperties() *MediaStylePropertiesArchive {
	if x != nil {
		return x.MediaProperties
	}
	return nil
}

type TSDThemePresetsArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GradientFillPresets     []*FillArchive   `protobuf:"bytes,1,rep,name=gradient_fill_presets,json=gradientFillPresets" json:"gradient_fill_presets,omitempty"`
	ImageFillPresets        []*FillArchive   `protobuf:"bytes,2,rep,name=image_fill_presets,json=imageFillPresets" json:"image_fill_presets,omitempty"`
	ShadowPresets           []*ShadowArchive `protobuf:"bytes,3,rep,name=shadow_presets,json=shadowPresets" json:"shadow_presets,omitempty"`
	LineStylePresets        []*Reference     `protobuf:"bytes,4,rep,name=line_style_presets,json=lineStylePresets" json:"line_style_presets,omitempty"`
	ShapeStylePresets       []*Reference     `protobuf:"bytes,5,rep,name=shape_style_presets,json=shapeStylePresets" json:"shape_style_presets,omitempty"`
	TextboxStylePresets     []*Reference     `protobuf:"bytes,6,rep,name=textbox_style_presets,json=textboxStylePresets" json:"textbox_style_presets,omitempty"`
	ImageStylePresets       []*Reference     `protobuf:"bytes,7,rep,name=image_style_presets,json=imageStylePresets" json:"image_style_presets,omitempty"`
	MovieStylePresets       []*Reference     `protobuf:"bytes,8,rep,name=movie_style_presets,json=movieStylePresets" json:"movie_style_presets,omitempty"`
	DrawingLineStylePresets []*Reference     `protobuf:"bytes,9,rep,name=drawing_line_style_presets,json=drawingLineStylePresets" json:"drawing_line_style_presets,omitempty"`
}

func (x *TSDThemePresetsArchive) Reset() {
	*x = TSDThemePresetsArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSDThemePresetsArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSDThemePresetsArchive) ProtoMessage() {}

func (x *TSDThemePresetsArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSDThemePresetsArchive.ProtoReflect.Descriptor instead.
func (*TSDThemePresetsArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{30}
}

func (x *TSDThemePresetsArchive) GetGradientFillPresets() []*FillArchive {
	if x != nil {
		return x.GradientFillPresets
	}
	return nil
}

func (x *TSDThemePresetsArchive) GetImageFillPresets() []*FillArchive {
	if x != nil {
		return x.ImageFillPresets
	}
	return nil
}

func (x *TSDThemePresetsArchive) GetShadowPresets() []*ShadowArchive {
	if x != nil {
		return x.ShadowPresets
	}
	return nil
}

func (x *TSDThemePresetsArchive) GetLineStylePresets() []*Reference {
	if x != nil {
		return x.LineStylePresets
	}
	return nil
}

func (x *TSDThemePresetsArchive) GetShapeStylePresets() []*Reference {
	if x != nil {
		return x.ShapeStylePresets
	}
	return nil
}

func (x *TSDThemePresetsArchive) GetTextboxStylePresets() []*Reference {
	if x != nil {
		return x.TextboxStylePresets
	}
	return nil
}

func (x *TSDThemePresetsArchive) GetImageStylePresets() []*Reference {
	if x != nil {
		return x.ImageStylePresets
	}
	return nil
}

func (x *TSDThemePresetsArchive) GetMovieStylePresets() []*Reference {
	if x != nil {
		return x.MovieStylePresets
	}
	return nil
}

func (x *TSDThemePresetsArchive) GetDrawingLineStylePresets() []*Reference {
	if x != nil {
		return x.DrawingLineStylePresets
	}
	return nil
}

type ThemeReplaceFillPresetCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super   *CommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Theme   *Reference      `protobuf:"bytes,2,req,name=theme" json:"theme,omitempty"`
	Fill    *FillArchive    `protobuf:"bytes,3,req,name=fill" json:"fill,omitempty"`
	OldFill *FillArchive    `protobuf:"bytes,4,req,name=old_fill,json=oldFill" json:"old_fill,omitempty"`
	Index   *uint32         `protobuf:"varint,5,req,name=index" json:"index,omitempty"`
}

func (x *ThemeReplaceFillPresetCommandArchive) Reset() {
	*x = ThemeReplaceFillPresetCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThemeReplaceFillPresetCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThemeReplaceFillPresetCommandArchive) ProtoMessage() {}

func (x *ThemeReplaceFillPresetCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThemeReplaceFillPresetCommandArchive.ProtoReflect.Descriptor instead.
func (*ThemeReplaceFillPresetCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{31}
}

func (x *ThemeReplaceFillPresetCommandArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *ThemeReplaceFillPresetCommandArchive) GetTheme() *Reference {
	if x != nil {
		return x.Theme
	}
	return nil
}

func (x *ThemeReplaceFillPresetCommandArchive) GetFill() *FillArchive {
	if x != nil {
		return x.Fill
	}
	return nil
}

func (x *ThemeReplaceFillPresetCommandArchive) GetOldFill() *FillArchive {
	if x != nil {
		return x.OldFill
	}
	return nil
}

func (x *ThemeReplaceFillPresetCommandArchive) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

type DrawableArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Geometry                 *GeometryArchive         `protobuf:"bytes,1,opt,name=geometry" json:"geometry,omitempty"`
	Parent                   *Reference               `protobuf:"bytes,2,opt,name=parent" json:"parent,omitempty"`
	ExteriorTextWrap         *ExteriorTextWrapArchive `protobuf:"bytes,3,opt,name=exterior_text_wrap,json=exteriorTextWrap" json:"exterior_text_wrap,omitempty"`
	HyperlinkUrl             *string                  `protobuf:"bytes,4,opt,name=hyperlink_url,json=hyperlinkUrl" json:"hyperlink_url,omitempty"`
	Locked                   *bool                    `protobuf:"varint,5,opt,name=locked" json:"locked,omitempty"`
	Comment                  *Reference               `protobuf:"bytes,6,opt,name=comment" json:"comment,omitempty"`
	AspectRatioLocked        *bool                    `protobuf:"varint,7,opt,name=aspect_ratio_locked,json=aspectRatioLocked" json:"aspect_ratio_locked,omitempty"`
	AccessibilityDescription *string                  `protobuf:"bytes,8,opt,name=accessibility_description,json=accessibilityDescription" json:"accessibility_description,omitempty"`
	PencilAnnotations        []*Reference             `protobuf:"bytes,9,rep,name=pencil_annotations,json=pencilAnnotations" json:"pencil_annotations,omitempty"`
	Title                    *Reference               `protobuf:"bytes,10,opt,name=title" json:"title,omitempty"`
	Caption                  *Reference               `protobuf:"bytes,11,opt,name=caption" json:"caption,omitempty"`
	TitleHidden              *bool                    `protobuf:"varint,12,opt,name=title_hidden,json=titleHidden" json:"title_hidden,omitempty"`
	CaptionHidden            *bool                    `protobuf:"varint,13,opt,name=caption_hidden,json=captionHidden" json:"caption_hidden,omitempty"`
}

func (x *DrawableArchive) Reset() {
	*x = DrawableArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrawableArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawableArchive) ProtoMessage() {}

func (x *DrawableArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawableArchive.ProtoReflect.Descriptor instead.
func (*DrawableArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{32}
}

func (x *DrawableArchive) GetGeometry() *GeometryArchive {
	if x != nil {
		return x.Geometry
	}
	return nil
}

func (x *DrawableArchive) GetParent() *Reference {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *DrawableArchive) GetExteriorTextWrap() *ExteriorTextWrapArchive {
	if x != nil {
		return x.ExteriorTextWrap
	}
	return nil
}

func (x *DrawableArchive) GetHyperlinkUrl() string {
	if x != nil && x.HyperlinkUrl != nil {
		return *x.HyperlinkUrl
	}
	return ""
}

func (x *DrawableArchive) GetLocked() bool {
	if x != nil && x.Locked != nil {
		return *x.Locked
	}
	return false
}

func (x *DrawableArchive) GetComment() *Reference {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *DrawableArchive) GetAspectRatioLocked() bool {
	if x != nil && x.AspectRatioLocked != nil {
		return *x.AspectRatioLocked
	}
	return false
}

func (x *DrawableArchive) GetAccessibilityDescription() string {
	if x != nil && x.AccessibilityDescription != nil {
		return *x.AccessibilityDescription
	}
	return ""
}

func (x *DrawableArchive) GetPencilAnnotations() []*Reference {
	if x != nil {
		return x.PencilAnnotations
	}
	return nil
}

func (x *DrawableArchive) GetTitle() *Reference {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *DrawableArchive) GetCaption() *Reference {
	if x != nil {
		return x.Caption
	}
	return nil
}

func (x *DrawableArchive) GetTitleHidden() bool {
	if x != nil && x.TitleHidden != nil {
		return *x.TitleHidden
	}
	return false
}

func (x *DrawableArchive) GetCaptionHidden() bool {
	if x != nil && x.CaptionHidden != nil {
		return *x.CaptionHidden
	}
	return false
}

type ContainerArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Geometry *GeometryArchive `protobuf:"bytes,1,opt,name=geometry" json:"geometry,omitempty"`
	Parent   *Reference       `protobuf:"bytes,2,opt,name=parent" json:"parent,omitempty"`
	Children []*Reference     `protobuf:"bytes,3,rep,name=children" json:"children,omitempty"`
}

func (x *ContainerArchive) Reset() {
	*x = ContainerArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerArchive) ProtoMessage() {}

func (x *ContainerArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerArchive.ProtoReflect.Descriptor instead.
func (*ContainerArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{33}
}

func (x *ContainerArchive) GetGeometry() *GeometryArchive {
	if x != nil {
		return x.Geometry
	}
	return nil
}

func (x *ContainerArchive) GetParent() *Reference {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *ContainerArchive) GetChildren() []*Reference {
	if x != nil {
		return x.Children
	}
	return nil
}

type GroupArchive struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	Super                  *DrawableArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Children               []*Reference     `protobuf:"bytes,2,rep,name=children" json:"children,omitempty"`
	FakeShapeForEmptyGroup *Reference       `protobuf:"bytes,3,opt,name=fake_shape_for_empty_group,json=fakeShapeForEmptyGroup" json:"fake_shape_for_empty_group,omitempty"`
}

func (x *GroupArchive) Reset() {
	*x = GroupArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupArchive) ProtoMessage() {}

func (x *GroupArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupArchive.ProtoReflect.Descriptor instead.
func (*GroupArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{34}
}

func (x *GroupArchive) GetSuper() *DrawableArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *GroupArchive) GetChildren() []*Reference {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *GroupArchive) GetFakeShapeForEmptyGroup() *Reference {
	if x != nil {
		return x.FakeShapeForEmptyGroup
	}
	return nil
}

type FreehandDrawingAnimationArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Duration   *float64 `protobuf:"fixed64,1,opt,name=duration" json:"duration,omitempty"`
	ShouldLoop *bool    `protobuf:"varint,2,opt,name=should_loop,json=shouldLoop" json:"should_loop,omitempty"`
}

func (x *FreehandDrawingAnimationArchive) Reset() {
	*x = FreehandDrawingAnimationArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FreehandDrawingAnimationArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FreehandDrawingAnimationArchive) ProtoMessage() {}

func (x *FreehandDrawingAnimationArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FreehandDrawingAnimationArchive.ProtoReflect.Descriptor instead.
func (*FreehandDrawingAnimationArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{35}
}

func (x *FreehandDrawingAnimationArchive) GetDuration() float64 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *FreehandDrawingAnimationArchive) GetShouldLoop() bool {
	if x != nil && x.ShouldLoop != nil {
		return *x.ShouldLoop
	}
	return false
}

type FreehandDrawingArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpacerShape      *Reference                       `protobuf:"bytes,1,opt,name=spacer_shape,json=spacerShape" json:"spacer_shape,omitempty"`
	Opacity          *float64                         `protobuf:"fixed64,2,opt,name=opacity" json:"opacity,omitempty"`
	Animation        *FreehandDrawingAnimationArchive `protobuf:"bytes,3,opt,name=animation" json:"animation,omitempty"`
	LastClampedScale *float64                         `protobuf:"fixed64,4,opt,name=last_clamped_scale,json=lastClampedScale" json:"last_clamped_scale,omitempty"`
}

func (x *FreehandDrawingArchive) Reset() {
	*x = FreehandDrawingArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FreehandDrawingArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FreehandDrawingArchive) ProtoMessage() {}

func (x *FreehandDrawingArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FreehandDrawingArchive.ProtoReflect.Descriptor instead.
func (*FreehandDrawingArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{36}
}

func (x *FreehandDrawingArchive) GetSpacerShape() *Reference {
	if x != nil {
		return x.SpacerShape
	}
	return nil
}

func (x *FreehandDrawingArchive) GetOpacity() float64 {
	if x != nil && x.Opacity != nil {
		return *x.Opacity
	}
	return 0
}

func (x *FreehandDrawingArchive) GetAnimation() *FreehandDrawingAnimationArchive {
	if x != nil {
		return x.Animation
	}
	return nil
}

func (x *FreehandDrawingArchive) GetLastClampedScale() float64 {
	if x != nil && x.LastClampedScale != nil {
		return *x.LastClampedScale
	}
	return 0
}

type ShapeArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super      *DrawableArchive   `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Style      *Reference         `protobuf:"bytes,2,opt,name=style" json:"style,omitempty"`
	Pathsource *PathSourceArchive `protobuf:"bytes,3,opt,name=pathsource" json:"pathsource,omitempty"`
	// Deprecated: Do not use.
	HeadLineEnd *LineEndArchive `protobuf:"bytes,4,opt,name=head_line_end,json=headLineEnd" json:"head_line_end,omitempty"`
	// Deprecated: Do not use.
	TailLineEnd                 *LineEndArchive `protobuf:"bytes,5,opt,name=tail_line_end,json=tailLineEnd" json:"tail_line_end,omitempty"`
	StrokePatternOffsetDistance *float32        `protobuf:"fixed32,6,opt,name=strokePatternOffsetDistance" json:"strokePatternOffsetDistance,omitempty"`
}

func (x *ShapeArchive) Reset() {
	*x = ShapeArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShapeArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShapeArchive) ProtoMessage() {}

func (x *ShapeArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShapeArchive.ProtoReflect.Descriptor instead.
func (*ShapeArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{37}
}

func (x *ShapeArchive) GetSuper() *DrawableArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *ShapeArchive) GetStyle() *Reference {
	if x != nil {
		return x.Style
	}
	return nil
}

func (x *ShapeArchive) GetPathsource() *PathSourceArchive {
	if x != nil {
		return x.Pathsource
	}
	return nil
}

// Deprecated: Do not use.
func (x *ShapeArchive) GetHeadLineEnd() *LineEndArchive {
	if x != nil {
		return x.HeadLineEnd
	}
	return nil
}

// Deprecated: Do not use.
func (x *ShapeArchive) GetTailLineEnd() *LineEndArchive {
	if x != nil {
		return x.TailLineEnd
	}
	return nil
}

func (x *ShapeArchive) GetStrokePatternOffsetDistance() float32 {
	if x != nil && x.StrokePatternOffsetDistance != nil {
		return *x.StrokePatternOffsetDistance
	}
	return 0
}

type ConnectionLineArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super             *ShapeArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	ConnectedFrom     *Reference    `protobuf:"bytes,2,opt,name=connected_from,json=connectedFrom" json:"connected_from,omitempty"`
	ConnectedTo       *Reference    `protobuf:"bytes,3,opt,name=connected_to,json=connectedTo" json:"connected_to,omitempty"`
	ConnectedToUuid   *UUID         `protobuf:"bytes,4,opt,name=connected_to_uuid,json=connectedToUuid" json:"connected_to_uuid,omitempty"`
	ConnectedFromUuid *UUID         `protobuf:"bytes,5,opt,name=connected_from_uuid,json=connectedFromUuid" json:"connected_from_uuid,omitempty"`
}

func (x *ConnectionLineArchive) Reset() {
	*x = ConnectionLineArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionLineArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionLineArchive) ProtoMessage() {}

func (x *ConnectionLineArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionLineArchive.ProtoReflect.Descriptor instead.
func (*ConnectionLineArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{38}
}

func (x *ConnectionLineArchive) GetSuper() *ShapeArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *ConnectionLineArchive) GetConnectedFrom() *Reference {
	if x != nil {
		return x.ConnectedFrom
	}
	return nil
}

func (x *ConnectionLineArchive) GetConnectedTo() *Reference {
	if x != nil {
		return x.ConnectedTo
	}
	return nil
}

func (x *ConnectionLineArchive) GetConnectedToUuid() *UUID {
	if x != nil {
		return x.ConnectedToUuid
	}
	return nil
}

func (x *ConnectionLineArchive) GetConnectedFromUuid() *UUID {
	if x != nil {
		return x.ConnectedFromUuid
	}
	return nil
}

type ImageArchive struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	Super                                *DrawableArchive         `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Data                                 *DataReference           `protobuf:"bytes,11,opt,name=data" json:"data,omitempty"`
	Style                                *Reference               `protobuf:"bytes,3,opt,name=style" json:"style,omitempty"`
	OriginalSize                         *Size                    `protobuf:"bytes,4,opt,name=originalSize" json:"originalSize,omitempty"`
	Mask                                 *Reference               `protobuf:"bytes,5,opt,name=mask" json:"mask,omitempty"`
	ThumbnailData                        *DataReference           `protobuf:"bytes,12,opt,name=thumbnailData" json:"thumbnailData,omitempty"`
	Flags                                *uint32                  `protobuf:"varint,7,opt,name=flags" json:"flags,omitempty"`
	OriginalData                         *DataReference           `protobuf:"bytes,13,opt,name=originalData" json:"originalData,omitempty"`
	NaturalSize                          *Size                    `protobuf:"bytes,9,opt,name=naturalSize" json:"naturalSize,omitempty"`
	InstantAlphaPath                     *Path                    `protobuf:"bytes,10,opt,name=instantAlphaPath" json:"instantAlphaPath,omitempty"`
	ImageAdjustments                     *ImageAdjustmentsArchive `protobuf:"bytes,14,opt,name=imageAdjustments" json:"imageAdjustments,omitempty"`
	EnhancedImageData                    *DataReference           `protobuf:"bytes,17,opt,name=enhancedImageData" json:"enhancedImageData,omitempty"`
	AdjustedImageData                    *DataReference           `protobuf:"bytes,15,opt,name=adjustedImageData" json:"adjustedImageData,omitempty"`
	ThumbnailAdjustedImageData           *DataReference           `protobuf:"bytes,16,opt,name=thumbnailAdjustedImageData" json:"thumbnailAdjustedImageData,omitempty"`
	InterpretsUntaggedImageDataAsGeneric *bool                    `protobuf:"varint,18,opt,name=interpretsUntaggedImageDataAsGeneric" json:"interpretsUntaggedImageDataAsGeneric,omitempty"`
	DatabaseData                         *Reference               `protobuf:"bytes,2,opt,name=database_data,json=databaseData" json:"database_data,omitempty"`
	DatabaseThumbnailData                *Reference               `protobuf:"bytes,6,opt,name=database_thumbnailData,json=databaseThumbnailData" json:"database_thumbnailData,omitempty"`
	DatabaseOriginalData                 *Reference               `protobuf:"bytes,8,opt,name=database_originalData,json=databaseOriginalData" json:"database_originalData,omitempty"`
	TracedPath                           *Path                    `protobuf:"bytes,19,opt,name=traced_path,json=tracedPath" json:"traced_path,omitempty"`
	Attribution                          *Attribution             `protobuf:"bytes,20,opt,name=attribution" json:"attribution,omitempty"`
	ShouldTracePdfContent                *bool                    `protobuf:"varint,21,opt,name=should_trace_pdf_content,json=shouldTracePdfContent" json:"should_trace_pdf_content,omitempty"`
}

func (x *ImageArchive) Reset() {
	*x = ImageArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageArchive) ProtoMessage() {}

func (x *ImageArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageArchive.ProtoReflect.Descriptor instead.
func (*ImageArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{39}
}

func (x *ImageArchive) GetSuper() *DrawableArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *ImageArchive) GetData() *DataReference {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ImageArchive) GetStyle() *Reference {
	if x != nil {
		return x.Style
	}
	return nil
}

func (x *ImageArchive) GetOriginalSize() *Size {
	if x != nil {
		return x.OriginalSize
	}
	return nil
}

func (x *ImageArchive) GetMask() *Reference {
	if x != nil {
		return x.Mask
	}
	return nil
}

func (x *ImageArchive) GetThumbnailData() *DataReference {
	if x != nil {
		return x.ThumbnailData
	}
	return nil
}

func (x *ImageArchive) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *ImageArchive) GetOriginalData() *DataReference {
	if x != nil {
		return x.OriginalData
	}
	return nil
}

func (x *ImageArchive) GetNaturalSize() *Size {
	if x != nil {
		return x.NaturalSize
	}
	return nil
}

func (x *ImageArchive) GetInstantAlphaPath() *Path {
	if x != nil {
		return x.InstantAlphaPath
	}
	return nil
}

func (x *ImageArchive) GetImageAdjustments() *ImageAdjustmentsArchive {
	if x != nil {
		return x.ImageAdjustments
	}
	return nil
}

func (x *ImageArchive) GetEnhancedImageData() *DataReference {
	if x != nil {
		return x.EnhancedImageData
	}
	return nil
}

func (x *ImageArchive) GetAdjustedImageData() *DataReference {
	if x != nil {
		return x.AdjustedImageData
	}
	return nil
}

func (x *ImageArchive) GetThumbnailAdjustedImageData() *DataReference {
	if x != nil {
		return x.ThumbnailAdjustedImageData
	}
	return nil
}

func (x *ImageArchive) GetInterpretsUntaggedImageDataAsGeneric() bool {
	if x != nil && x.InterpretsUntaggedImageDataAsGeneric != nil {
		return *x.InterpretsUntaggedImageDataAsGeneric
	}
	return false
}

func (x *ImageArchive) GetDatabaseData() *Reference {
	if x != nil {
		return x.DatabaseData
	}
	return nil
}

func (x *ImageArchive) GetDatabaseThumbnailData() *Reference {
	if x != nil {
		return x.DatabaseThumbnailData
	}
	return nil
}

func (x *ImageArchive) GetDatabaseOriginalData() *Reference {
	if x != nil {
		return x.DatabaseOriginalData
	}
	return nil
}

func (x *ImageArchive) GetTracedPath() *Path {
	if x != nil {
		return x.TracedPath
	}
	return nil
}

func (x *ImageArchive) GetAttribution() *Attribution {
	if x != nil {
		return x.Attribution
	}
	return nil
}

func (x *ImageArchive) GetShouldTracePdfContent() bool {
	if x != nil && x.ShouldTracePdfContent != nil {
		return *x.ShouldTracePdfContent
	}
	return false
}

type MaskArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super      *DrawableArchive   `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Pathsource *PathSourceArchive `protobuf:"bytes,2,opt,name=pathsource" json:"pathsource,omitempty"`
}

func (x *MaskArchive) Reset() {
	*x = MaskArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaskArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaskArchive) ProtoMessage() {}

func (x *MaskArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaskArchive.ProtoReflect.Descriptor instead.
func (*MaskArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{40}
}

func (x *MaskArchive) GetSuper() *DrawableArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *MaskArchive) GetPathsource() *PathSourceArchive {
	if x != nil {
		return x.Pathsource
	}
	return nil
}

type ImageDataAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PixelSize                              *Size `protobuf:"bytes,1,opt,name=pixel_size,json=pixelSize" json:"pixel_size,omitempty"`
	ImageIsSrgb                            *bool `protobuf:"varint,2,opt,name=image_is_srgb,json=imageIsSrgb" json:"image_is_srgb,omitempty"`
	ShouldBeInterpretedAsGenericIfUntagged *bool `protobuf:"varint,3,opt,name=should_be_interpreted_as_generic_if_untagged,json=shouldBeInterpretedAsGenericIfUntagged" json:"should_be_interpreted_as_generic_if_untagged,omitempty"`
}

func (x *ImageDataAttributes) Reset() {
	*x = ImageDataAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageDataAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageDataAttributes) ProtoMessage() {}

func (x *ImageDataAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageDataAttributes.ProtoReflect.Descriptor instead.
func (*ImageDataAttributes) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{41}
}

func (x *ImageDataAttributes) GetPixelSize() *Size {
	if x != nil {
		return x.PixelSize
	}
	return nil
}

func (x *ImageDataAttributes) GetImageIsSrgb() bool {
	if x != nil && x.ImageIsSrgb != nil {
		return *x.ImageIsSrgb
	}
	return false
}

func (x *ImageDataAttributes) GetShouldBeInterpretedAsGenericIfUntagged() bool {
	if x != nil && x.ShouldBeInterpretedAsGenericIfUntagged != nil {
		return *x.ShouldBeInterpretedAsGenericIfUntagged
	}
	return false
}

type MovieArchive struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	Super                                      *DrawableArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	MovieData                                  *DataReference   `protobuf:"bytes,14,opt,name=movieData" json:"movieData,omitempty"`
	ImportedAuxiliaryMovieData                 *DataReference   `protobuf:"bytes,22,opt,name=importedAuxiliaryMovieData" json:"importedAuxiliaryMovieData,omitempty"`
	ImportedAuxiliaryMovieDataOriginalFilename *string          `protobuf:"bytes,25,opt,name=imported_auxiliary_movie_data_original_filename,json=importedAuxiliaryMovieDataOriginalFilename" json:"imported_auxiliary_movie_data_original_filename,omitempty"`
	MovieRemoteURL                             *string          `protobuf:"bytes,17,opt,name=movieRemoteURL" json:"movieRemoteURL,omitempty"`
	StartTime                                  *float32         `protobuf:"fixed32,3,opt,name=startTime" json:"startTime,omitempty"`
	EndTime                                    *float32         `protobuf:"fixed32,4,opt,name=endTime" json:"endTime,omitempty"`
	PosterTime                                 *float32         `protobuf:"fixed32,5,opt,name=posterTime" json:"posterTime,omitempty"`
	// Deprecated: Do not use.
	LoopOptionAsInteger *uint32                       `protobuf:"varint,6,opt,name=loopOptionAsInteger" json:"loopOptionAsInteger,omitempty"`
	LoopOption          *MovieArchive_MovieLoopOption `protobuf:"varint,24,opt,name=loop_option,json=loopOption,enum=TSD.MovieArchive_MovieLoopOption,def=0" json:"loop_option,omitempty"`
	Volume              *float32                      `protobuf:"fixed32,7,opt,name=volume" json:"volume,omitempty"`
	// Deprecated: Do not use.
	AutoPlay                             *bool             `protobuf:"varint,8,opt,name=autoPlay" json:"autoPlay,omitempty"`
	AudioOnly                            *bool             `protobuf:"varint,9,opt,name=audioOnly" json:"audioOnly,omitempty"`
	Streaming                            *bool             `protobuf:"varint,18,opt,name=streaming" json:"streaming,omitempty"`
	NativeAudioRecording                 *bool             `protobuf:"varint,27,opt,name=nativeAudioRecording" json:"nativeAudioRecording,omitempty"`
	PlaysAcrossSlides                    *bool             `protobuf:"varint,28,opt,name=playsAcrossSlides" json:"playsAcrossSlides,omitempty"`
	PosterImageData                      *DataReference    `protobuf:"bytes,15,opt,name=posterImageData" json:"posterImageData,omitempty"`
	AudioOnlyImageData                   *DataReference    `protobuf:"bytes,16,opt,name=audioOnlyImageData" json:"audioOnlyImageData,omitempty"`
	PosterImageGeneratedWithAlphaSupport *bool             `protobuf:"varint,23,opt,name=poster_image_generated_with_alpha_support,json=posterImageGeneratedWithAlphaSupport" json:"poster_image_generated_with_alpha_support,omitempty"`
	PlayableState                        *uint32           `protobuf:"varint,12,opt,name=playableState" json:"playableState,omitempty"`
	Flags                                *uint32           `protobuf:"varint,13,opt,name=flags" json:"flags,omitempty"`
	DatabaseMovieData                    *Reference        `protobuf:"bytes,2,opt,name=database_movieData,json=databaseMovieData" json:"database_movieData,omitempty"`
	DatabasePosterImageData              *Reference        `protobuf:"bytes,10,opt,name=database_posterImageData,json=databasePosterImageData" json:"database_posterImageData,omitempty"`
	DatabaseAudioOnlyImageData           *Reference        `protobuf:"bytes,11,opt,name=database_audioOnlyImageData,json=databaseAudioOnlyImageData" json:"database_audioOnlyImageData,omitempty"`
	Style                                *Reference        `protobuf:"bytes,19,opt,name=style" json:"style,omitempty"`
	OriginalSize                         *Size             `protobuf:"bytes,20,opt,name=originalSize" json:"originalSize,omitempty"`
	NaturalSize                          *Size             `protobuf:"bytes,21,opt,name=naturalSize" json:"naturalSize,omitempty"`
	Attribution                          *Attribution      `protobuf:"bytes,26,opt,name=attribution" json:"attribution,omitempty"`
	Fingerprint                          *MovieFingerprint `protobuf:"bytes,29,opt,name=fingerprint" json:"fingerprint,omitempty"`
	IsLiveVideo                          *bool             `protobuf:"varint,30,opt,name=is_live_video,json=isLiveVideo,def=0" json:"is_live_video,omitempty"`
}

// Default values for MovieArchive fields.
const (
	Default_MovieArchive_LoopOption  = MovieArchive_None
	Default_MovieArchive_IsLiveVideo = bool(false)
)

func (x *MovieArchive) Reset() {
	*x = MovieArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MovieArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovieArchive) ProtoMessage() {}

func (x *MovieArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovieArchive.ProtoReflect.Descriptor instead.
func (*MovieArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{42}
}

func (x *MovieArchive) GetSuper() *DrawableArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *MovieArchive) GetMovieData() *DataReference {
	if x != nil {
		return x.MovieData
	}
	return nil
}

func (x *MovieArchive) GetImportedAuxiliaryMovieData() *DataReference {
	if x != nil {
		return x.ImportedAuxiliaryMovieData
	}
	return nil
}

func (x *MovieArchive) GetImportedAuxiliaryMovieDataOriginalFilename() string {
	if x != nil && x.ImportedAuxiliaryMovieDataOriginalFilename != nil {
		return *x.ImportedAuxiliaryMovieDataOriginalFilename
	}
	return ""
}

func (x *MovieArchive) GetMovieRemoteURL() string {
	if x != nil && x.MovieRemoteURL != nil {
		return *x.MovieRemoteURL
	}
	return ""
}

func (x *MovieArchive) GetStartTime() float32 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *MovieArchive) GetEndTime() float32 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

func (x *MovieArchive) GetPosterTime() float32 {
	if x != nil && x.PosterTime != nil {
		return *x.PosterTime
	}
	return 0
}

// Deprecated: Do not use.
func (x *MovieArchive) GetLoopOptionAsInteger() uint32 {
	if x != nil && x.LoopOptionAsInteger != nil {
		return *x.LoopOptionAsInteger
	}
	return 0
}

func (x *MovieArchive) GetLoopOption() MovieArchive_MovieLoopOption {
	if x != nil && x.LoopOption != nil {
		return *x.LoopOption
	}
	return Default_MovieArchive_LoopOption
}

func (x *MovieArchive) GetVolume() float32 {
	if x != nil && x.Volume != nil {
		return *x.Volume
	}
	return 0
}

// Deprecated: Do not use.
func (x *MovieArchive) GetAutoPlay() bool {
	if x != nil && x.AutoPlay != nil {
		return *x.AutoPlay
	}
	return false
}

func (x *MovieArchive) GetAudioOnly() bool {
	if x != nil && x.AudioOnly != nil {
		return *x.AudioOnly
	}
	return false
}

func (x *MovieArchive) GetStreaming() bool {
	if x != nil && x.Streaming != nil {
		return *x.Streaming
	}
	return false
}

func (x *MovieArchive) GetNativeAudioRecording() bool {
	if x != nil && x.NativeAudioRecording != nil {
		return *x.NativeAudioRecording
	}
	return false
}

func (x *MovieArchive) GetPlaysAcrossSlides() bool {
	if x != nil && x.PlaysAcrossSlides != nil {
		return *x.PlaysAcrossSlides
	}
	return false
}

func (x *MovieArchive) GetPosterImageData() *DataReference {
	if x != nil {
		return x.PosterImageData
	}
	return nil
}

func (x *MovieArchive) GetAudioOnlyImageData() *DataReference {
	if x != nil {
		return x.AudioOnlyImageData
	}
	return nil
}

func (x *MovieArchive) GetPosterImageGeneratedWithAlphaSupport() bool {
	if x != nil && x.PosterImageGeneratedWithAlphaSupport != nil {
		return *x.PosterImageGeneratedWithAlphaSupport
	}
	return false
}

func (x *MovieArchive) GetPlayableState() uint32 {
	if x != nil && x.PlayableState != nil {
		return *x.PlayableState
	}
	return 0
}

func (x *MovieArchive) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *MovieArchive) GetDatabaseMovieData() *Reference {
	if x != nil {
		return x.DatabaseMovieData
	}
	return nil
}

func (x *MovieArchive) GetDatabasePosterImageData() *Reference {
	if x != nil {
		return x.DatabasePosterImageData
	}
	return nil
}

func (x *MovieArchive) GetDatabaseAudioOnlyImageData() *Reference {
	if x != nil {
		return x.DatabaseAudioOnlyImageData
	}
	return nil
}

func (x *MovieArchive) GetStyle() *Reference {
	if x != nil {
		return x.Style
	}
	return nil
}

func (x *MovieArchive) GetOriginalSize() *Size {
	if x != nil {
		return x.OriginalSize
	}
	return nil
}

func (x *MovieArchive) GetNaturalSize() *Size {
	if x != nil {
		return x.NaturalSize
	}
	return nil
}

func (x *MovieArchive) GetAttribution() *Attribution {
	if x != nil {
		return x.Attribution
	}
	return nil
}

func (x *MovieArchive) GetFingerprint() *MovieFingerprint {
	if x != nil {
		return x.Fingerprint
	}
	return nil
}

func (x *MovieArchive) GetIsLiveVideo() bool {
	if x != nil && x.IsLiveVideo != nil {
		return *x.IsLiveVideo
	}
	return Default_MovieArchive_IsLiveVideo
}

type ExteriorTextWrapArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           *uint32  `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Direction      *uint32  `protobuf:"varint,2,opt,name=direction" json:"direction,omitempty"`
	FitType        *uint32  `protobuf:"varint,3,opt,name=fit_type,json=fitType" json:"fit_type,omitempty"`
	Margin         *float32 `protobuf:"fixed32,4,opt,name=margin" json:"margin,omitempty"`
	AlphaThreshold *float32 `protobuf:"fixed32,5,opt,name=alpha_threshold,json=alphaThreshold" json:"alpha_threshold,omitempty"`
	IsHtmlWrap     *bool    `protobuf:"varint,6,opt,name=is_html_wrap,json=isHtmlWrap" json:"is_html_wrap,omitempty"`
}

func (x *ExteriorTextWrapArchive) Reset() {
	*x = ExteriorTextWrapArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExteriorTextWrapArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExteriorTextWrapArchive) ProtoMessage() {}

func (x *ExteriorTextWrapArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExteriorTextWrapArchive.ProtoReflect.Descriptor instead.
func (*ExteriorTextWrapArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{43}
}

func (x *ExteriorTextWrapArchive) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *ExteriorTextWrapArchive) GetDirection() uint32 {
	if x != nil && x.Direction != nil {
		return *x.Direction
	}
	return 0
}

func (x *ExteriorTextWrapArchive) GetFitType() uint32 {
	if x != nil && x.FitType != nil {
		return *x.FitType
	}
	return 0
}

func (x *ExteriorTextWrapArchive) GetMargin() float32 {
	if x != nil && x.Margin != nil {
		return *x.Margin
	}
	return 0
}

func (x *ExteriorTextWrapArchive) GetAlphaThreshold() float32 {
	if x != nil && x.AlphaThreshold != nil {
		return *x.AlphaThreshold
	}
	return 0
}

func (x *ExteriorTextWrapArchive) GetIsHtmlWrap() bool {
	if x != nil && x.IsHtmlWrap != nil {
		return *x.IsHtmlWrap
	}
	return false
}

type DrawableContentDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ElementKind         *uint32 `protobuf:"varint,1,opt,name=element_kind,json=elementKind" json:"element_kind,omitempty"`
	IsAnchoredToText    *bool   `protobuf:"varint,2,opt,name=is_anchored_to_text,json=isAnchoredToText" json:"is_anchored_to_text,omitempty"`
	IsFloatingAboveText *bool   `protobuf:"varint,3,opt,name=is_floating_above_text,json=isFloatingAboveText" json:"is_floating_above_text,omitempty"`
	IsInlineWithText    *bool   `protobuf:"varint,4,opt,name=is_inline_with_text,json=isInlineWithText" json:"is_inline_with_text,omitempty"`
}

func (x *DrawableContentDescription) Reset() {
	*x = DrawableContentDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrawableContentDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawableContentDescription) ProtoMessage() {}

func (x *DrawableContentDescription) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawableContentDescription.ProtoReflect.Descriptor instead.
func (*DrawableContentDescription) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{44}
}

func (x *DrawableContentDescription) GetElementKind() uint32 {
	if x != nil && x.ElementKind != nil {
		return *x.ElementKind
	}
	return 0
}

func (x *DrawableContentDescription) GetIsAnchoredToText() bool {
	if x != nil && x.IsAnchoredToText != nil {
		return *x.IsAnchoredToText
	}
	return false
}

func (x *DrawableContentDescription) GetIsFloatingAboveText() bool {
	if x != nil && x.IsFloatingAboveText != nil {
		return *x.IsFloatingAboveText
	}
	return false
}

func (x *DrawableContentDescription) GetIsInlineWithText() bool {
	if x != nil && x.IsInlineWithText != nil {
		return *x.IsInlineWithText
	}
	return false
}

type FreehandDrawingContentDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                      *DrawableContentDescription `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	SourceDocWantedSpacerShape *bool                       `protobuf:"varint,2,opt,name=source_doc_wanted_spacer_shape,json=sourceDocWantedSpacerShape" json:"source_doc_wanted_spacer_shape,omitempty"`
}

func (x *FreehandDrawingContentDescription) Reset() {
	*x = FreehandDrawingContentDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FreehandDrawingContentDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FreehandDrawingContentDescription) ProtoMessage() {}

func (x *FreehandDrawingContentDescription) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FreehandDrawingContentDescription.ProtoReflect.Descriptor instead.
func (*FreehandDrawingContentDescription) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{45}
}

func (x *FreehandDrawingContentDescription) GetSuper() *DrawableContentDescription {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *FreehandDrawingContentDescription) GetSourceDocWantedSpacerShape() bool {
	if x != nil && x.SourceDocWantedSpacerShape != nil {
		return *x.SourceDocWantedSpacerShape
	}
	return false
}

type FreehandDrawingToolkitUIState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Do not use.
	CurrentColor                 *Color                                                 `protobuf:"bytes,1,opt,name=current_color,json=currentColor" json:"current_color,omitempty"`
	MostRecentRestorableToolType *FreehandDrawingToolkitUIState_FreehandDrawingToolType `protobuf:"varint,2,opt,name=most_recent_restorable_tool_type,json=mostRecentRestorableToolType,enum=TSD.FreehandDrawingToolkitUIState_FreehandDrawingToolType,def=0" json:"most_recent_restorable_tool_type,omitempty"`
	PenToolOpacity               *float32                                               `protobuf:"fixed32,3,opt,name=pen_tool_opacity,json=penToolOpacity" json:"pen_tool_opacity,omitempty"`
	PenToolUnscaledWidth         *float32                                               `protobuf:"fixed32,4,opt,name=pen_tool_unscaled_width,json=penToolUnscaledWidth" json:"pen_tool_unscaled_width,omitempty"`
	PencilToolOpacity            *float32                                               `protobuf:"fixed32,5,opt,name=pencil_tool_opacity,json=pencilToolOpacity" json:"pencil_tool_opacity,omitempty"`
	PencilToolUnscaledWidth      *float32                                               `protobuf:"fixed32,6,opt,name=pencil_tool_unscaled_width,json=pencilToolUnscaledWidth" json:"pencil_tool_unscaled_width,omitempty"`
	CrayonToolOpacity            *float32                                               `protobuf:"fixed32,7,opt,name=crayon_tool_opacity,json=crayonToolOpacity" json:"crayon_tool_opacity,omitempty"`
	CrayonToolUnscaledWidth      *float32                                               `protobuf:"fixed32,8,opt,name=crayon_tool_unscaled_width,json=crayonToolUnscaledWidth" json:"crayon_tool_unscaled_width,omitempty"`
	FillToolOpacity              *float32                                               `protobuf:"fixed32,9,opt,name=fill_tool_opacity,json=fillToolOpacity" json:"fill_tool_opacity,omitempty"`
	EraserToolScaledWidth        *float32                                               `protobuf:"fixed32,10,opt,name=eraser_tool_scaled_width,json=eraserToolScaledWidth" json:"eraser_tool_scaled_width,omitempty"`
	EraserToolErasesWholeObjects *bool                                                  `protobuf:"varint,11,opt,name=eraser_tool_erases_whole_objects,json=eraserToolErasesWholeObjects" json:"eraser_tool_erases_whole_objects,omitempty"`
	PenToolColor                 *Color                                                 `protobuf:"bytes,12,opt,name=pen_tool_color,json=penToolColor" json:"pen_tool_color,omitempty"`
	PencilToolColor              *Color                                                 `protobuf:"bytes,13,opt,name=pencil_tool_color,json=pencilToolColor" json:"pencil_tool_color,omitempty"`
	CrayonToolColor              *Color                                                 `protobuf:"bytes,14,opt,name=crayon_tool_color,json=crayonToolColor" json:"crayon_tool_color,omitempty"`
	FillToolColor                *Color                                                 `protobuf:"bytes,15,opt,name=fill_tool_color,json=fillToolColor" json:"fill_tool_color,omitempty"`
}

// Default values for FreehandDrawingToolkitUIState fields.
const (
	Default_FreehandDrawingToolkitUIState_MostRecentRestorableToolType = FreehandDrawingToolkitUIState_Pen
)

func (x *FreehandDrawingToolkitUIState) Reset() {
	*x = FreehandDrawingToolkitUIState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FreehandDrawingToolkitUIState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FreehandDrawingToolkitUIState) ProtoMessage() {}

func (x *FreehandDrawingToolkitUIState) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FreehandDrawingToolkitUIState.ProtoReflect.Descriptor instead.
func (*FreehandDrawingToolkitUIState) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{46}
}

// Deprecated: Do not use.
func (x *FreehandDrawingToolkitUIState) GetCurrentColor() *Color {
	if x != nil {
		return x.CurrentColor
	}
	return nil
}

func (x *FreehandDrawingToolkitUIState) GetMostRecentRestorableToolType() FreehandDrawingToolkitUIState_FreehandDrawingToolType {
	if x != nil && x.MostRecentRestorableToolType != nil {
		return *x.MostRecentRestorableToolType
	}
	return Default_FreehandDrawingToolkitUIState_MostRecentRestorableToolType
}

func (x *FreehandDrawingToolkitUIState) GetPenToolOpacity() float32 {
	if x != nil && x.PenToolOpacity != nil {
		return *x.PenToolOpacity
	}
	return 0
}

func (x *FreehandDrawingToolkitUIState) GetPenToolUnscaledWidth() float32 {
	if x != nil && x.PenToolUnscaledWidth != nil {
		return *x.PenToolUnscaledWidth
	}
	return 0
}

func (x *FreehandDrawingToolkitUIState) GetPencilToolOpacity() float32 {
	if x != nil && x.PencilToolOpacity != nil {
		return *x.PencilToolOpacity
	}
	return 0
}

func (x *FreehandDrawingToolkitUIState) GetPencilToolUnscaledWidth() float32 {
	if x != nil && x.PencilToolUnscaledWidth != nil {
		return *x.PencilToolUnscaledWidth
	}
	return 0
}

func (x *FreehandDrawingToolkitUIState) GetCrayonToolOpacity() float32 {
	if x != nil && x.CrayonToolOpacity != nil {
		return *x.CrayonToolOpacity
	}
	return 0
}

func (x *FreehandDrawingToolkitUIState) GetCrayonToolUnscaledWidth() float32 {
	if x != nil && x.CrayonToolUnscaledWidth != nil {
		return *x.CrayonToolUnscaledWidth
	}
	return 0
}

func (x *FreehandDrawingToolkitUIState) GetFillToolOpacity() float32 {
	if x != nil && x.FillToolOpacity != nil {
		return *x.FillToolOpacity
	}
	return 0
}

func (x *FreehandDrawingToolkitUIState) GetEraserToolScaledWidth() float32 {
	if x != nil && x.EraserToolScaledWidth != nil {
		return *x.EraserToolScaledWidth
	}
	return 0
}

func (x *FreehandDrawingToolkitUIState) GetEraserToolErasesWholeObjects() bool {
	if x != nil && x.EraserToolErasesWholeObjects != nil {
		return *x.EraserToolErasesWholeObjects
	}
	return false
}

func (x *FreehandDrawingToolkitUIState) GetPenToolColor() *Color {
	if x != nil {
		return x.PenToolColor
	}
	return nil
}

func (x *FreehandDrawingToolkitUIState) GetPencilToolColor() *Color {
	if x != nil {
		return x.PencilToolColor
	}
	return nil
}

func (x *FreehandDrawingToolkitUIState) GetCrayonToolColor() *Color {
	if x != nil {
		return x.CrayonToolColor
	}
	return nil
}

func (x *FreehandDrawingToolkitUIState) GetFillToolColor() *Color {
	if x != nil {
		return x.FillToolColor
	}
	return nil
}

type StandinCaptionArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StandinCaptionArchive) Reset() {
	*x = StandinCaptionArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StandinCaptionArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StandinCaptionArchive) ProtoMessage() {}

func (x *StandinCaptionArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StandinCaptionArchive.ProtoReflect.Descriptor instead.
func (*StandinCaptionArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{47}
}

type GuideArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     *GuideArchive_GuideType `protobuf:"varint,1,opt,name=type,enum=TSD.GuideArchive_GuideType" json:"type,omitempty"`
	Offset   *float32                `protobuf:"fixed32,2,opt,name=offset" json:"offset,omitempty"`
	Start    *float32                `protobuf:"fixed32,3,opt,name=start" json:"start,omitempty"`
	End      *float32                `protobuf:"fixed32,4,opt,name=end" json:"end,omitempty"`
	Dynamic  *bool                   `protobuf:"varint,5,opt,name=dynamic" json:"dynamic,omitempty"`
	Infinite *bool                   `protobuf:"varint,6,opt,name=infinite" json:"infinite,omitempty"`
}

func (x *GuideArchive) Reset() {
	*x = GuideArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuideArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuideArchive) ProtoMessage() {}

func (x *GuideArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuideArchive.ProtoReflect.Descriptor instead.
func (*GuideArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{48}
}

func (x *GuideArchive) GetType() GuideArchive_GuideType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return GuideArchive_Horizontal
}

func (x *GuideArchive) GetOffset() float32 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *GuideArchive) GetStart() float32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *GuideArchive) GetEnd() float32 {
	if x != nil && x.End != nil {
		return *x.End
	}
	return 0
}

func (x *GuideArchive) GetDynamic() bool {
	if x != nil && x.Dynamic != nil {
		return *x.Dynamic
	}
	return false
}

func (x *GuideArchive) GetInfinite() bool {
	if x != nil && x.Infinite != nil {
		return *x.Infinite
	}
	return false
}

type UserDefinedGuideArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     *UserDefinedGuideArchive_GuideType `protobuf:"varint,1,opt,name=type,enum=TSD.UserDefinedGuideArchive_GuideType" json:"type,omitempty"`
	Position *float32                           `protobuf:"fixed32,2,opt,name=position" json:"position,omitempty"`
}

func (x *UserDefinedGuideArchive) Reset() {
	*x = UserDefinedGuideArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDefinedGuideArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDefinedGuideArchive) ProtoMessage() {}

func (x *UserDefinedGuideArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDefinedGuideArchive.ProtoReflect.Descriptor instead.
func (*UserDefinedGuideArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{49}
}

func (x *UserDefinedGuideArchive) GetType() UserDefinedGuideArchive_GuideType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return UserDefinedGuideArchive_Horizontal
}

func (x *UserDefinedGuideArchive) GetPosition() float32 {
	if x != nil && x.Position != nil {
		return *x.Position
	}
	return 0
}

type GuideStorageArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserDefinedGuides []*UserDefinedGuideArchive `protobuf:"bytes,1,rep,name=userDefinedGuides" json:"userDefinedGuides,omitempty"`
}

func (x *GuideStorageArchive) Reset() {
	*x = GuideStorageArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuideStorageArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuideStorageArchive) ProtoMessage() {}

func (x *GuideStorageArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuideStorageArchive.ProtoReflect.Descriptor instead.
func (*GuideStorageArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{50}
}

func (x *GuideStorageArchive) GetUserDefinedGuides() []*UserDefinedGuideArchive {
	if x != nil {
		return x.UserDefinedGuides
	}
	return nil
}

type TSDCanvasSelectionArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos               []*Reference `protobuf:"bytes,1,rep,name=infos" json:"infos,omitempty"`
	NonInteractiveInfos []*Reference `protobuf:"bytes,3,rep,name=non_interactive_infos,json=nonInteractiveInfos" json:"non_interactive_infos,omitempty"`
	// Deprecated: Do not use.
	Container *Reference `protobuf:"bytes,2,opt,name=container" json:"container,omitempty"`
}

func (x *TSDCanvasSelectionArchive) Reset() {
	*x = TSDCanvasSelectionArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSDCanvasSelectionArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSDCanvasSelectionArchive) ProtoMessage() {}

func (x *TSDCanvasSelectionArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSDCanvasSelectionArchive.ProtoReflect.Descriptor instead.
func (*TSDCanvasSelectionArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{51}
}

func (x *TSDCanvasSelectionArchive) GetInfos() []*Reference {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *TSDCanvasSelectionArchive) GetNonInteractiveInfos() []*Reference {
	if x != nil {
		return x.NonInteractiveInfos
	}
	return nil
}

// Deprecated: Do not use.
func (x *TSDCanvasSelectionArchive) GetContainer() *Reference {
	if x != nil {
		return x.Container
	}
	return nil
}

type DrawableSelectionArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos               []*Reference `protobuf:"bytes,2,rep,name=infos" json:"infos,omitempty"`
	NonInteractiveInfos []*Reference `protobuf:"bytes,3,rep,name=non_interactive_infos,json=nonInteractiveInfos" json:"non_interactive_infos,omitempty"`
}

func (x *DrawableSelectionArchive) Reset() {
	*x = DrawableSelectionArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrawableSelectionArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawableSelectionArchive) ProtoMessage() {}

func (x *DrawableSelectionArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawableSelectionArchive.ProtoReflect.Descriptor instead.
func (*DrawableSelectionArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{52}
}

func (x *DrawableSelectionArchive) GetInfos() []*Reference {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *DrawableSelectionArchive) GetNonInteractiveInfos() []*Reference {
	if x != nil {
		return x.NonInteractiveInfos
	}
	return nil
}

type GroupSelectionArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                               *DrawableSelectionArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	HasSelectedInfosInNonGroupContainer *bool                     `protobuf:"varint,2,opt,name=has_selected_infos_in_non_group_container,json=hasSelectedInfosInNonGroupContainer" json:"has_selected_infos_in_non_group_container,omitempty"`
}

func (x *GroupSelectionArchive) Reset() {
	*x = GroupSelectionArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupSelectionArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupSelectionArchive) ProtoMessage() {}

func (x *GroupSelectionArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupSelectionArchive.ProtoReflect.Descriptor instead.
func (*GroupSelectionArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{53}
}

func (x *GroupSelectionArchive) GetSuper() *DrawableSelectionArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *GroupSelectionArchive) GetHasSelectedInfosInNonGroupContainer() bool {
	if x != nil && x.HasSelectedInfosInNonGroupContainer != nil {
		return *x.HasSelectedInfosInNonGroupContainer
	}
	return false
}

type PathSelectionArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PathSelectionArchive) Reset() {
	*x = PathSelectionArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PathSelectionArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PathSelectionArchive) ProtoMessage() {}

func (x *PathSelectionArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PathSelectionArchive.ProtoReflect.Descriptor instead.
func (*PathSelectionArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{54}
}

type InfoHyperlinkSelectionArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InfoHyperlinkSelectionArchive) Reset() {
	*x = InfoHyperlinkSelectionArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfoHyperlinkSelectionArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoHyperlinkSelectionArchive) ProtoMessage() {}

func (x *InfoHyperlinkSelectionArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoHyperlinkSelectionArchive.ProtoReflect.Descriptor instead.
func (*InfoHyperlinkSelectionArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{55}
}

type CommentStorageArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text         *string      `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
	CreationDate *Date        `protobuf:"bytes,2,opt,name=creation_date,json=creationDate" json:"creation_date,omitempty"`
	Author       *Reference   `protobuf:"bytes,3,opt,name=author" json:"author,omitempty"`
	Replies      []*Reference `protobuf:"bytes,4,rep,name=replies" json:"replies,omitempty"`
}

func (x *CommentStorageArchive) Reset() {
	*x = CommentStorageArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentStorageArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentStorageArchive) ProtoMessage() {}

func (x *CommentStorageArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentStorageArchive.ProtoReflect.Descriptor instead.
func (*CommentStorageArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{56}
}

func (x *CommentStorageArchive) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *CommentStorageArchive) GetCreationDate() *Date {
	if x != nil {
		return x.CreationDate
	}
	return nil
}

func (x *CommentStorageArchive) GetAuthor() *Reference {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *CommentStorageArchive) GetReplies() []*Reference {
	if x != nil {
		return x.Replies
	}
	return nil
}

type ReplaceAnnotationAuthorCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super               *CommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	OldAnnotationAuthor *Reference      `protobuf:"bytes,2,opt,name=old_annotation_author,json=oldAnnotationAuthor" json:"old_annotation_author,omitempty"`
	NewAnnotationAuthor *Reference      `protobuf:"bytes,3,opt,name=new_annotation_author,json=newAnnotationAuthor" json:"new_annotation_author,omitempty"`
}

func (x *ReplaceAnnotationAuthorCommandArchive) Reset() {
	*x = ReplaceAnnotationAuthorCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplaceAnnotationAuthorCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceAnnotationAuthorCommandArchive) ProtoMessage() {}

func (x *ReplaceAnnotationAuthorCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceAnnotationAuthorCommandArchive.ProtoReflect.Descriptor instead.
func (*ReplaceAnnotationAuthorCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{57}
}

func (x *ReplaceAnnotationAuthorCommandArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *ReplaceAnnotationAuthorCommandArchive) GetOldAnnotationAuthor() *Reference {
	if x != nil {
		return x.OldAnnotationAuthor
	}
	return nil
}

func (x *ReplaceAnnotationAuthorCommandArchive) GetNewAnnotationAuthor() *Reference {
	if x != nil {
		return x.NewAnnotationAuthor
	}
	return nil
}

type PencilAnnotationArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PencilAnnotationStorage *Reference `protobuf:"bytes,1,opt,name=pencil_annotation_storage,json=pencilAnnotationStorage" json:"pencil_annotation_storage,omitempty"`
}

func (x *PencilAnnotationArchive) Reset() {
	*x = PencilAnnotationArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PencilAnnotationArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PencilAnnotationArchive) ProtoMessage() {}

func (x *PencilAnnotationArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PencilAnnotationArchive.ProtoReflect.Descriptor instead.
func (*PencilAnnotationArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{58}
}

func (x *PencilAnnotationArchive) GetPencilAnnotationStorage() *Reference {
	if x != nil {
		return x.PencilAnnotationStorage
	}
	return nil
}

type PencilAnnotationSelectionArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PencilAnnotation *Reference `protobuf:"bytes,1,opt,name=pencil_annotation,json=pencilAnnotation" json:"pencil_annotation,omitempty"`
}

func (x *PencilAnnotationSelectionArchive) Reset() {
	*x = PencilAnnotationSelectionArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PencilAnnotationSelectionArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PencilAnnotationSelectionArchive) ProtoMessage() {}

func (x *PencilAnnotationSelectionArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PencilAnnotationSelectionArchive.ProtoReflect.Descriptor instead.
func (*PencilAnnotationSelectionArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{59}
}

func (x *PencilAnnotationSelectionArchive) GetPencilAnnotation() *Reference {
	if x != nil {
		return x.PencilAnnotation
	}
	return nil
}

type PencilAnnotationStorageArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttachedLocation                *int32         `protobuf:"varint,1,opt,name=attached_location,json=attachedLocation" json:"attached_location,omitempty"`
	MarkupOffset                    *Point         `protobuf:"bytes,2,opt,name=markup_offset,json=markupOffset" json:"markup_offset,omitempty"`
	RasterizedImage                 *DataReference `protobuf:"bytes,3,opt,name=rasterized_image,json=rasterizedImage" json:"rasterized_image,omitempty"`
	LegacyEncodedDrawing            *DataReference `protobuf:"bytes,4,opt,name=legacy_encoded_drawing,json=legacyEncodedDrawing" json:"legacy_encoded_drawing,omitempty"`
	DrawingPath                     *Path          `protobuf:"bytes,5,opt,name=drawing_path,json=drawingPath" json:"drawing_path,omitempty"`
	StrokesBoundingBoxOrigin        *Point         `protobuf:"bytes,6,opt,name=strokes_bounding_box_origin,json=strokesBoundingBoxOrigin" json:"strokes_bounding_box_origin,omitempty"`
	StrokesBoundingBoxSize          *Size          `protobuf:"bytes,7,opt,name=strokes_bounding_box_size,json=strokesBoundingBoxSize" json:"strokes_bounding_box_size,omitempty"`
	AttachedType                    *int32         `protobuf:"varint,8,opt,name=attached_type,json=attachedType" json:"attached_type,omitempty"`
	OriginalAttachedSize            *Size          `protobuf:"bytes,9,opt,name=original_attached_size,json=originalAttachedSize" json:"original_attached_size,omitempty"`
	PercentOfPaContainedInParentRep *float64       `protobuf:"fixed64,10,opt,name=percent_of_pa_contained_in_parent_rep,json=percentOfPaContainedInParentRep" json:"percent_of_pa_contained_in_parent_rep,omitempty"`
	TextBaselinesTouchedCount       *uint64        `protobuf:"varint,11,opt,name=text_baselines_touched_count,json=textBaselinesTouchedCount" json:"text_baselines_touched_count,omitempty"`
	VisibleStrokesCount             *uint64        `protobuf:"varint,12,opt,name=visible_strokes_count,json=visibleStrokesCount" json:"visible_strokes_count,omitempty"`
	PenColor                        *Color         `protobuf:"bytes,13,opt,name=pen_color,json=penColor" json:"pen_color,omitempty"`
	ToolType                        *int32         `protobuf:"varint,14,opt,name=tool_type,json=toolType" json:"tool_type,omitempty"`
	CalloutSubStorages              []*Reference   `protobuf:"bytes,15,rep,name=callout_sub_storages,json=calloutSubStorages" json:"callout_sub_storages,omitempty"`
	CreationDate                    *Date          `protobuf:"bytes,16,opt,name=creation_date,json=creationDate" json:"creation_date,omitempty"`
	PencilAnnotationDrawingScale    *float64       `protobuf:"fixed64,17,opt,name=pencil_annotation_drawing_scale,json=pencilAnnotationDrawingScale" json:"pencil_annotation_drawing_scale,omitempty"`
	CompoundAnnotationType          *int32         `protobuf:"varint,18,opt,name=compound_annotation_type,json=compoundAnnotationType" json:"compound_annotation_type,omitempty"`
	SubStorages                     []*Reference   `protobuf:"bytes,19,rep,name=sub_storages,json=subStorages" json:"sub_storages,omitempty"`
	EncodedDrawing                  *DataReference `protobuf:"bytes,20,opt,name=encoded_drawing,json=encodedDrawing" json:"encoded_drawing,omitempty"`
	StrokePointsFrameOrigin         *Point         `protobuf:"bytes,21,opt,name=stroke_points_frame_origin,json=strokePointsFrameOrigin" json:"stroke_points_frame_origin,omitempty"`
	StrokePointsFrameSize           *Size          `protobuf:"bytes,22,opt,name=stroke_points_frame_size,json=strokePointsFrameSize" json:"stroke_points_frame_size,omitempty"`
	RenderedFrameOrigin             *Point         `protobuf:"bytes,23,opt,name=rendered_frame_origin,json=renderedFrameOrigin" json:"rendered_frame_origin,omitempty"`
	RenderedFrameSize               *Size          `protobuf:"bytes,24,opt,name=rendered_frame_size,json=renderedFrameSize" json:"rendered_frame_size,omitempty"`
}

func (x *PencilAnnotationStorageArchive) Reset() {
	*x = PencilAnnotationStorageArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PencilAnnotationStorageArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PencilAnnotationStorageArchive) ProtoMessage() {}

func (x *PencilAnnotationStorageArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PencilAnnotationStorageArchive.ProtoReflect.Descriptor instead.
func (*PencilAnnotationStorageArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{60}
}

func (x *PencilAnnotationStorageArchive) GetAttachedLocation() int32 {
	if x != nil && x.AttachedLocation != nil {
		return *x.AttachedLocation
	}
	return 0
}

func (x *PencilAnnotationStorageArchive) GetMarkupOffset() *Point {
	if x != nil {
		return x.MarkupOffset
	}
	return nil
}

func (x *PencilAnnotationStorageArchive) GetRasterizedImage() *DataReference {
	if x != nil {
		return x.RasterizedImage
	}
	return nil
}

func (x *PencilAnnotationStorageArchive) GetLegacyEncodedDrawing() *DataReference {
	if x != nil {
		return x.LegacyEncodedDrawing
	}
	return nil
}

func (x *PencilAnnotationStorageArchive) GetDrawingPath() *Path {
	if x != nil {
		return x.DrawingPath
	}
	return nil
}

func (x *PencilAnnotationStorageArchive) GetStrokesBoundingBoxOrigin() *Point {
	if x != nil {
		return x.StrokesBoundingBoxOrigin
	}
	return nil
}

func (x *PencilAnnotationStorageArchive) GetStrokesBoundingBoxSize() *Size {
	if x != nil {
		return x.StrokesBoundingBoxSize
	}
	return nil
}

func (x *PencilAnnotationStorageArchive) GetAttachedType() int32 {
	if x != nil && x.AttachedType != nil {
		return *x.AttachedType
	}
	return 0
}

func (x *PencilAnnotationStorageArchive) GetOriginalAttachedSize() *Size {
	if x != nil {
		return x.OriginalAttachedSize
	}
	return nil
}

func (x *PencilAnnotationStorageArchive) GetPercentOfPaContainedInParentRep() float64 {
	if x != nil && x.PercentOfPaContainedInParentRep != nil {
		return *x.PercentOfPaContainedInParentRep
	}
	return 0
}

func (x *PencilAnnotationStorageArchive) GetTextBaselinesTouchedCount() uint64 {
	if x != nil && x.TextBaselinesTouchedCount != nil {
		return *x.TextBaselinesTouchedCount
	}
	return 0
}

func (x *PencilAnnotationStorageArchive) GetVisibleStrokesCount() uint64 {
	if x != nil && x.VisibleStrokesCount != nil {
		return *x.VisibleStrokesCount
	}
	return 0
}

func (x *PencilAnnotationStorageArchive) GetPenColor() *Color {
	if x != nil {
		return x.PenColor
	}
	return nil
}

func (x *PencilAnnotationStorageArchive) GetToolType() int32 {
	if x != nil && x.ToolType != nil {
		return *x.ToolType
	}
	return 0
}

func (x *PencilAnnotationStorageArchive) GetCalloutSubStorages() []*Reference {
	if x != nil {
		return x.CalloutSubStorages
	}
	return nil
}

func (x *PencilAnnotationStorageArchive) GetCreationDate() *Date {
	if x != nil {
		return x.CreationDate
	}
	return nil
}

func (x *PencilAnnotationStorageArchive) GetPencilAnnotationDrawingScale() float64 {
	if x != nil && x.PencilAnnotationDrawingScale != nil {
		return *x.PencilAnnotationDrawingScale
	}
	return 0
}

func (x *PencilAnnotationStorageArchive) GetCompoundAnnotationType() int32 {
	if x != nil && x.CompoundAnnotationType != nil {
		return *x.CompoundAnnotationType
	}
	return 0
}

func (x *PencilAnnotationStorageArchive) GetSubStorages() []*Reference {
	if x != nil {
		return x.SubStorages
	}
	return nil
}

func (x *PencilAnnotationStorageArchive) GetEncodedDrawing() *DataReference {
	if x != nil {
		return x.EncodedDrawing
	}
	return nil
}

func (x *PencilAnnotationStorageArchive) GetStrokePointsFrameOrigin() *Point {
	if x != nil {
		return x.StrokePointsFrameOrigin
	}
	return nil
}

func (x *PencilAnnotationStorageArchive) GetStrokePointsFrameSize() *Size {
	if x != nil {
		return x.StrokePointsFrameSize
	}
	return nil
}

func (x *PencilAnnotationStorageArchive) GetRenderedFrameOrigin() *Point {
	if x != nil {
		return x.RenderedFrameOrigin
	}
	return nil
}

func (x *PencilAnnotationStorageArchive) GetRenderedFrameSize() *Size {
	if x != nil {
		return x.RenderedFrameSize
	}
	return nil
}

type SpecColorFillSetColorArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Color *Color `protobuf:"bytes,1,req,name=color" json:"color,omitempty"`
}

func (x *SpecColorFillSetColorArchive) Reset() {
	*x = SpecColorFillSetColorArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecColorFillSetColorArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecColorFillSetColorArchive) ProtoMessage() {}

func (x *SpecColorFillSetColorArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecColorFillSetColorArchive.ProtoReflect.Descriptor instead.
func (*SpecColorFillSetColorArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{61}
}

func (x *SpecColorFillSetColorArchive) GetColor() *Color {
	if x != nil {
		return x.Color
	}
	return nil
}

type SpecFrameSetAssetScaleArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetScale *float64 `protobuf:"fixed64,1,req,name=asset_scale,json=assetScale" json:"asset_scale,omitempty"`
}

func (x *SpecFrameSetAssetScaleArchive) Reset() {
	*x = SpecFrameSetAssetScaleArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecFrameSetAssetScaleArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecFrameSetAssetScaleArchive) ProtoMessage() {}

func (x *SpecFrameSetAssetScaleArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecFrameSetAssetScaleArchive.ProtoReflect.Descriptor instead.
func (*SpecFrameSetAssetScaleArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{62}
}

func (x *SpecFrameSetAssetScaleArchive) GetAssetScale() float64 {
	if x != nil && x.AssetScale != nil {
		return *x.AssetScale
	}
	return 0
}

type SpecGradientFillSetAngleArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Angle *float64 `protobuf:"fixed64,1,req,name=angle" json:"angle,omitempty"`
}

func (x *SpecGradientFillSetAngleArchive) Reset() {
	*x = SpecGradientFillSetAngleArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecGradientFillSetAngleArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecGradientFillSetAngleArchive) ProtoMessage() {}

func (x *SpecGradientFillSetAngleArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecGradientFillSetAngleArchive.ProtoReflect.Descriptor instead.
func (*SpecGradientFillSetAngleArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{63}
}

func (x *SpecGradientFillSetAngleArchive) GetAngle() float64 {
	if x != nil && x.Angle != nil {
		return *x.Angle
	}
	return 0
}

type SpecImageFillSetTechniqueArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Technique *int32 `protobuf:"varint,1,req,name=technique" json:"technique,omitempty"`
}

func (x *SpecImageFillSetTechniqueArchive) Reset() {
	*x = SpecImageFillSetTechniqueArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecImageFillSetTechniqueArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecImageFillSetTechniqueArchive) ProtoMessage() {}

func (x *SpecImageFillSetTechniqueArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecImageFillSetTechniqueArchive.ProtoReflect.Descriptor instead.
func (*SpecImageFillSetTechniqueArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{64}
}

func (x *SpecImageFillSetTechniqueArchive) GetTechnique() int32 {
	if x != nil && x.Technique != nil {
		return *x.Technique
	}
	return 0
}

type SpecReflectionSetOpacityArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Opacity *float64 `protobuf:"fixed64,1,req,name=opacity" json:"opacity,omitempty"`
}

func (x *SpecReflectionSetOpacityArchive) Reset() {
	*x = SpecReflectionSetOpacityArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecReflectionSetOpacityArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecReflectionSetOpacityArchive) ProtoMessage() {}

func (x *SpecReflectionSetOpacityArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecReflectionSetOpacityArchive.ProtoReflect.Descriptor instead.
func (*SpecReflectionSetOpacityArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{65}
}

func (x *SpecReflectionSetOpacityArchive) GetOpacity() float64 {
	if x != nil && x.Opacity != nil {
		return *x.Opacity
	}
	return 0
}

type SpecShadowSetAngleArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Angle *float64 `protobuf:"fixed64,1,req,name=angle" json:"angle,omitempty"`
}

func (x *SpecShadowSetAngleArchive) Reset() {
	*x = SpecShadowSetAngleArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecShadowSetAngleArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecShadowSetAngleArchive) ProtoMessage() {}

func (x *SpecShadowSetAngleArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecShadowSetAngleArchive.ProtoReflect.Descriptor instead.
func (*SpecShadowSetAngleArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{66}
}

func (x *SpecShadowSetAngleArchive) GetAngle() float64 {
	if x != nil && x.Angle != nil {
		return *x.Angle
	}
	return 0
}

type SpecShadowSetColorArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Color *Color `protobuf:"bytes,1,req,name=color" json:"color,omitempty"`
}

func (x *SpecShadowSetColorArchive) Reset() {
	*x = SpecShadowSetColorArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecShadowSetColorArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecShadowSetColorArchive) ProtoMessage() {}

func (x *SpecShadowSetColorArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecShadowSetColorArchive.ProtoReflect.Descriptor instead.
func (*SpecShadowSetColorArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{67}
}

func (x *SpecShadowSetColorArchive) GetColor() *Color {
	if x != nil {
		return x.Color
	}
	return nil
}

type SpecShadowSetOffsetArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset *float64 `protobuf:"fixed64,1,req,name=offset" json:"offset,omitempty"`
}

func (x *SpecShadowSetOffsetArchive) Reset() {
	*x = SpecShadowSetOffsetArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecShadowSetOffsetArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecShadowSetOffsetArchive) ProtoMessage() {}

func (x *SpecShadowSetOffsetArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecShadowSetOffsetArchive.ProtoReflect.Descriptor instead.
func (*SpecShadowSetOffsetArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{68}
}

func (x *SpecShadowSetOffsetArchive) GetOffset() float64 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

type SpecShadowSetOpacityArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Opacity *float64 `protobuf:"fixed64,1,req,name=opacity" json:"opacity,omitempty"`
}

func (x *SpecShadowSetOpacityArchive) Reset() {
	*x = SpecShadowSetOpacityArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecShadowSetOpacityArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecShadowSetOpacityArchive) ProtoMessage() {}

func (x *SpecShadowSetOpacityArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecShadowSetOpacityArchive.ProtoReflect.Descriptor instead.
func (*SpecShadowSetOpacityArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{69}
}

func (x *SpecShadowSetOpacityArchive) GetOpacity() float64 {
	if x != nil && x.Opacity != nil {
		return *x.Opacity
	}
	return 0
}

type SpecShadowSetRadiusArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Radius *int32 `protobuf:"varint,1,req,name=radius" json:"radius,omitempty"`
}

func (x *SpecShadowSetRadiusArchive) Reset() {
	*x = SpecShadowSetRadiusArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecShadowSetRadiusArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecShadowSetRadiusArchive) ProtoMessage() {}

func (x *SpecShadowSetRadiusArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecShadowSetRadiusArchive.ProtoReflect.Descriptor instead.
func (*SpecShadowSetRadiusArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{70}
}

func (x *SpecShadowSetRadiusArchive) GetRadius() int32 {
	if x != nil && x.Radius != nil {
		return *x.Radius
	}
	return 0
}

type SpecStrokeSetColorArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Color *Color `protobuf:"bytes,1,req,name=color" json:"color,omitempty"`
}

func (x *SpecStrokeSetColorArchive) Reset() {
	*x = SpecStrokeSetColorArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecStrokeSetColorArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecStrokeSetColorArchive) ProtoMessage() {}

func (x *SpecStrokeSetColorArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecStrokeSetColorArchive.ProtoReflect.Descriptor instead.
func (*SpecStrokeSetColorArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{71}
}

func (x *SpecStrokeSetColorArchive) GetColor() *Color {
	if x != nil {
		return x.Color
	}
	return nil
}

type SpecStrokeSetPatternArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LineCap    *int32                `protobuf:"varint,1,opt,name=line_cap,json=lineCap" json:"line_cap,omitempty"`
	LineJoin   *int32                `protobuf:"varint,2,opt,name=line_join,json=lineJoin" json:"line_join,omitempty"`
	MiterLimit *float64              `protobuf:"fixed64,3,opt,name=miter_limit,json=miterLimit" json:"miter_limit,omitempty"`
	Width      *float64              `protobuf:"fixed64,4,opt,name=width" json:"width,omitempty"`
	Color      *Color                `protobuf:"bytes,5,opt,name=color" json:"color,omitempty"`
	Pattern    *StrokePatternArchive `protobuf:"bytes,6,req,name=pattern" json:"pattern,omitempty"`
}

func (x *SpecStrokeSetPatternArchive) Reset() {
	*x = SpecStrokeSetPatternArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecStrokeSetPatternArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecStrokeSetPatternArchive) ProtoMessage() {}

func (x *SpecStrokeSetPatternArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecStrokeSetPatternArchive.ProtoReflect.Descriptor instead.
func (*SpecStrokeSetPatternArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{72}
}

func (x *SpecStrokeSetPatternArchive) GetLineCap() int32 {
	if x != nil && x.LineCap != nil {
		return *x.LineCap
	}
	return 0
}

func (x *SpecStrokeSetPatternArchive) GetLineJoin() int32 {
	if x != nil && x.LineJoin != nil {
		return *x.LineJoin
	}
	return 0
}

func (x *SpecStrokeSetPatternArchive) GetMiterLimit() float64 {
	if x != nil && x.MiterLimit != nil {
		return *x.MiterLimit
	}
	return 0
}

func (x *SpecStrokeSetPatternArchive) GetWidth() float64 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *SpecStrokeSetPatternArchive) GetColor() *Color {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *SpecStrokeSetPatternArchive) GetPattern() *StrokePatternArchive {
	if x != nil {
		return x.Pattern
	}
	return nil
}

type SpecStrokeSetWidthArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Width *float64 `protobuf:"fixed64,1,req,name=width" json:"width,omitempty"`
}

func (x *SpecStrokeSetWidthArchive) Reset() {
	*x = SpecStrokeSetWidthArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecStrokeSetWidthArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecStrokeSetWidthArchive) ProtoMessage() {}

func (x *SpecStrokeSetWidthArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecStrokeSetWidthArchive.ProtoReflect.Descriptor instead.
func (*SpecStrokeSetWidthArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{73}
}

func (x *SpecStrokeSetWidthArchive) GetWidth() float64 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

type Attribution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title           *string `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	DescriptionText *string `protobuf:"bytes,2,opt,name=description_text,json=descriptionText" json:"description_text,omitempty"`
	ExternalUrl     *string `protobuf:"bytes,3,opt,name=external_url,json=externalUrl" json:"external_url,omitempty"`
	AuthorName      *string `protobuf:"bytes,4,opt,name=author_name,json=authorName" json:"author_name,omitempty"`
	AuthorUrl       *string `protobuf:"bytes,5,opt,name=author_url,json=authorUrl" json:"author_url,omitempty"`
}

func (x *Attribution) Reset() {
	*x = Attribution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Attribution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attribution) ProtoMessage() {}

func (x *Attribution) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attribution.ProtoReflect.Descriptor instead.
func (*Attribution) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{74}
}

func (x *Attribution) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *Attribution) GetDescriptionText() string {
	if x != nil && x.DescriptionText != nil {
		return *x.DescriptionText
	}
	return ""
}

func (x *Attribution) GetExternalUrl() string {
	if x != nil && x.ExternalUrl != nil {
		return *x.ExternalUrl
	}
	return ""
}

func (x *Attribution) GetAuthorName() string {
	if x != nil && x.AuthorName != nil {
		return *x.AuthorName
	}
	return ""
}

func (x *Attribution) GetAuthorUrl() string {
	if x != nil && x.AuthorUrl != nil {
		return *x.AuthorUrl
	}
	return ""
}

type MovieFingerprint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tracks  []*MovieFingerprintTrack `protobuf:"bytes,1,rep,name=tracks" json:"tracks,omitempty"`
	Version []uint32                 `protobuf:"varint,2,rep,packed,name=version" json:"version,omitempty"`
}

func (x *MovieFingerprint) Reset() {
	*x = MovieFingerprint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MovieFingerprint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovieFingerprint) ProtoMessage() {}

func (x *MovieFingerprint) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovieFingerprint.ProtoReflect.Descriptor instead.
func (*MovieFingerprint) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{75}
}

func (x *MovieFingerprint) GetTracks() []*MovieFingerprintTrack {
	if x != nil {
		return x.Tracks
	}
	return nil
}

func (x *MovieFingerprint) GetVersion() []uint32 {
	if x != nil {
		return x.Version
	}
	return nil
}

type MovieFingerprintTrack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaType                  *string  `protobuf:"bytes,1,opt,name=media_type,json=mediaType" json:"media_type,omitempty"`
	Enabled                    *bool    `protobuf:"varint,2,opt,name=enabled" json:"enabled,omitempty"`
	TotalSampleDataLength      *int64   `protobuf:"varint,3,opt,name=total_sample_data_length,json=totalSampleDataLength" json:"total_sample_data_length,omitempty"`
	SampleDataDigestString     *string  `protobuf:"bytes,4,opt,name=sample_data_digest_string,json=sampleDataDigestString" json:"sample_data_digest_string,omitempty"`
	TimeRangeStartValue        *int64   `protobuf:"varint,5,opt,name=time_range_start_value,json=timeRangeStartValue" json:"time_range_start_value,omitempty"`
	TimeRangeStartTimescale    *int32   `protobuf:"varint,6,opt,name=time_range_start_timescale,json=timeRangeStartTimescale" json:"time_range_start_timescale,omitempty"`
	TimeRangeStartIsValid      *bool    `protobuf:"varint,7,opt,name=time_range_start_is_valid,json=timeRangeStartIsValid" json:"time_range_start_is_valid,omitempty"`
	TimeRangeDurationValue     *int64   `protobuf:"varint,8,opt,name=time_range_duration_value,json=timeRangeDurationValue" json:"time_range_duration_value,omitempty"`
	TimeRangeDurationTimescale *int32   `protobuf:"varint,9,opt,name=time_range_duration_timescale,json=timeRangeDurationTimescale" json:"time_range_duration_timescale,omitempty"`
	TimeRangeDurationIsValid   *bool    `protobuf:"varint,10,opt,name=time_range_duration_is_valid,json=timeRangeDurationIsValid" json:"time_range_duration_is_valid,omitempty"`
	NaturalSize                *Size    `protobuf:"bytes,11,opt,name=natural_size,json=naturalSize" json:"natural_size,omitempty"`
	PreferredTransformA        *float64 `protobuf:"fixed64,12,opt,name=preferred_transform_a,json=preferredTransformA" json:"preferred_transform_a,omitempty"`
	PreferredTransformB        *float64 `protobuf:"fixed64,13,opt,name=preferred_transform_b,json=preferredTransformB" json:"preferred_transform_b,omitempty"`
	PreferredTransformC        *float64 `protobuf:"fixed64,14,opt,name=preferred_transform_c,json=preferredTransformC" json:"preferred_transform_c,omitempty"`
	PreferredTransformD        *float64 `protobuf:"fixed64,15,opt,name=preferred_transform_d,json=preferredTransformD" json:"preferred_transform_d,omitempty"`
	PreferredTransformTx       *float64 `protobuf:"fixed64,16,opt,name=preferred_transform_tx,json=preferredTransformTx" json:"preferred_transform_tx,omitempty"`
	PreferredTransformTy       *float64 `protobuf:"fixed64,17,opt,name=preferred_transform_ty,json=preferredTransformTy" json:"preferred_transform_ty,omitempty"`
	PreferredVolume            *float64 `protobuf:"fixed64,18,opt,name=preferred_volume,json=preferredVolume" json:"preferred_volume,omitempty"`
	LanguageCode               *string  `protobuf:"bytes,19,opt,name=language_code,json=languageCode" json:"language_code,omitempty"`
	ExtendedLanguageTag        *string  `protobuf:"bytes,20,opt,name=extended_language_tag,json=extendedLanguageTag" json:"extended_language_tag,omitempty"`
}

func (x *MovieFingerprintTrack) Reset() {
	*x = MovieFingerprintTrack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MovieFingerprintTrack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovieFingerprintTrack) ProtoMessage() {}

func (x *MovieFingerprintTrack) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovieFingerprintTrack.ProtoReflect.Descriptor instead.
func (*MovieFingerprintTrack) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{76}
}

func (x *MovieFingerprintTrack) GetMediaType() string {
	if x != nil && x.MediaType != nil {
		return *x.MediaType
	}
	return ""
}

func (x *MovieFingerprintTrack) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *MovieFingerprintTrack) GetTotalSampleDataLength() int64 {
	if x != nil && x.TotalSampleDataLength != nil {
		return *x.TotalSampleDataLength
	}
	return 0
}

func (x *MovieFingerprintTrack) GetSampleDataDigestString() string {
	if x != nil && x.SampleDataDigestString != nil {
		return *x.SampleDataDigestString
	}
	return ""
}

func (x *MovieFingerprintTrack) GetTimeRangeStartValue() int64 {
	if x != nil && x.TimeRangeStartValue != nil {
		return *x.TimeRangeStartValue
	}
	return 0
}

func (x *MovieFingerprintTrack) GetTimeRangeStartTimescale() int32 {
	if x != nil && x.TimeRangeStartTimescale != nil {
		return *x.TimeRangeStartTimescale
	}
	return 0
}

func (x *MovieFingerprintTrack) GetTimeRangeStartIsValid() bool {
	if x != nil && x.TimeRangeStartIsValid != nil {
		return *x.TimeRangeStartIsValid
	}
	return false
}

func (x *MovieFingerprintTrack) GetTimeRangeDurationValue() int64 {
	if x != nil && x.TimeRangeDurationValue != nil {
		return *x.TimeRangeDurationValue
	}
	return 0
}

func (x *MovieFingerprintTrack) GetTimeRangeDurationTimescale() int32 {
	if x != nil && x.TimeRangeDurationTimescale != nil {
		return *x.TimeRangeDurationTimescale
	}
	return 0
}

func (x *MovieFingerprintTrack) GetTimeRangeDurationIsValid() bool {
	if x != nil && x.TimeRangeDurationIsValid != nil {
		return *x.TimeRangeDurationIsValid
	}
	return false
}

func (x *MovieFingerprintTrack) GetNaturalSize() *Size {
	if x != nil {
		return x.NaturalSize
	}
	return nil
}

func (x *MovieFingerprintTrack) GetPreferredTransformA() float64 {
	if x != nil && x.PreferredTransformA != nil {
		return *x.PreferredTransformA
	}
	return 0
}

func (x *MovieFingerprintTrack) GetPreferredTransformB() float64 {
	if x != nil && x.PreferredTransformB != nil {
		return *x.PreferredTransformB
	}
	return 0
}

func (x *MovieFingerprintTrack) GetPreferredTransformC() float64 {
	if x != nil && x.PreferredTransformC != nil {
		return *x.PreferredTransformC
	}
	return 0
}

func (x *MovieFingerprintTrack) GetPreferredTransformD() float64 {
	if x != nil && x.PreferredTransformD != nil {
		return *x.PreferredTransformD
	}
	return 0
}

func (x *MovieFingerprintTrack) GetPreferredTransformTx() float64 {
	if x != nil && x.PreferredTransformTx != nil {
		return *x.PreferredTransformTx
	}
	return 0
}

func (x *MovieFingerprintTrack) GetPreferredTransformTy() float64 {
	if x != nil && x.PreferredTransformTy != nil {
		return *x.PreferredTransformTy
	}
	return 0
}

func (x *MovieFingerprintTrack) GetPreferredVolume() float64 {
	if x != nil && x.PreferredVolume != nil {
		return *x.PreferredVolume
	}
	return 0
}

func (x *MovieFingerprintTrack) GetLanguageCode() string {
	if x != nil && x.LanguageCode != nil {
		return *x.LanguageCode
	}
	return ""
}

func (x *MovieFingerprintTrack) GetExtendedLanguageTag() string {
	if x != nil && x.ExtendedLanguageTag != nil {
		return *x.ExtendedLanguageTag
	}
	return ""
}

type EditableBezierPathSourceArchive_Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InControlPoint  *Point                                    `protobuf:"bytes,1,req,name=inControlPoint" json:"inControlPoint,omitempty"`
	NodePoint       *Point                                    `protobuf:"bytes,2,req,name=nodePoint" json:"nodePoint,omitempty"`
	OutControlPoint *Point                                    `protobuf:"bytes,3,req,name=outControlPoint" json:"outControlPoint,omitempty"`
	Type            *EditableBezierPathSourceArchive_NodeType `protobuf:"varint,4,req,name=type,enum=TSD.EditableBezierPathSourceArchive_NodeType" json:"type,omitempty"`
}

func (x *EditableBezierPathSourceArchive_Node) Reset() {
	*x = EditableBezierPathSourceArchive_Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditableBezierPathSourceArchive_Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditableBezierPathSourceArchive_Node) ProtoMessage() {}

func (x *EditableBezierPathSourceArchive_Node) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditableBezierPathSourceArchive_Node.ProtoReflect.Descriptor instead.
func (*EditableBezierPathSourceArchive_Node) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{7, 0}
}

func (x *EditableBezierPathSourceArchive_Node) GetInControlPoint() *Point {
	if x != nil {
		return x.InControlPoint
	}
	return nil
}

func (x *EditableBezierPathSourceArchive_Node) GetNodePoint() *Point {
	if x != nil {
		return x.NodePoint
	}
	return nil
}

func (x *EditableBezierPathSourceArchive_Node) GetOutControlPoint() *Point {
	if x != nil {
		return x.OutControlPoint
	}
	return nil
}

func (x *EditableBezierPathSourceArchive_Node) GetType() EditableBezierPathSourceArchive_NodeType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return EditableBezierPathSourceArchive_sharp
}

type EditableBezierPathSourceArchive_Subpath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes  []*EditableBezierPathSourceArchive_Node `protobuf:"bytes,1,rep,name=nodes" json:"nodes,omitempty"`
	Closed *bool                                   `protobuf:"varint,2,req,name=closed" json:"closed,omitempty"`
}

func (x *EditableBezierPathSourceArchive_Subpath) Reset() {
	*x = EditableBezierPathSourceArchive_Subpath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditableBezierPathSourceArchive_Subpath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditableBezierPathSourceArchive_Subpath) ProtoMessage() {}

func (x *EditableBezierPathSourceArchive_Subpath) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditableBezierPathSourceArchive_Subpath.ProtoReflect.Descriptor instead.
func (*EditableBezierPathSourceArchive_Subpath) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{7, 1}
}

func (x *EditableBezierPathSourceArchive_Subpath) GetNodes() []*EditableBezierPathSourceArchive_Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *EditableBezierPathSourceArchive_Subpath) GetClosed() bool {
	if x != nil && x.Closed != nil {
		return *x.Closed
	}
	return false
}

type GradientArchive_GradientStop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Color      *Color   `protobuf:"bytes,1,opt,name=color" json:"color,omitempty"`
	Fraction   *float32 `protobuf:"fixed32,2,opt,name=fraction" json:"fraction,omitempty"`
	Inflection *float32 `protobuf:"fixed32,3,opt,name=inflection" json:"inflection,omitempty"`
}

func (x *GradientArchive_GradientStop) Reset() {
	*x = GradientArchive_GradientStop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GradientArchive_GradientStop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GradientArchive_GradientStop) ProtoMessage() {}

func (x *GradientArchive_GradientStop) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GradientArchive_GradientStop.ProtoReflect.Descriptor instead.
func (*GradientArchive_GradientStop) Descriptor() ([]byte, []int) {
	return file_TSDArchives_proto_rawDescGZIP(), []int{11, 0}
}

func (x *GradientArchive_GradientStop) GetColor() *Color {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *GradientArchive_GradientStop) GetFraction() float32 {
	if x != nil && x.Fraction != nil {
		return *x.Fraction
	}
	return 0
}

func (x *GradientArchive_GradientStop) GetInflection() float32 {
	if x != nil && x.Inflection != nil {
		return *x.Inflection
	}
	return 0
}

var file_TSDArchives_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*CommandPropertyEntryArchive)(nil),
		ExtensionType: (*FillArchive)(nil),
		Field:         200,
		Name:          "TSD.fill",
		Tag:           "bytes,200,opt,name=fill",
		Filename:      "TSDArchives.proto",
	},
	{
		ExtendedType:  (*CommandPropertyEntryArchive)(nil),
		ExtensionType: (*StrokeArchive)(nil),
		Field:         201,
		Name:          "TSD.stroke",
		Tag:           "bytes,201,opt,name=stroke",
		Filename:      "TSDArchives.proto",
	},
	{
		ExtendedType:  (*TSSThemeArchive)(nil),
		ExtensionType: (*TSDThemePresetsArchive)(nil),
		Field:         100,
		Name:          "TSD.TSDThemePresetsArchive.extension",
		Tag:           "bytes,100,opt,name=extension",
		Filename:      "TSDArchives.proto",
	},
	{
		ExtendedType:  (*GroupArchive)(nil),
		ExtensionType: (*FreehandDrawingArchive)(nil),
		Field:         100,
		Name:          "TSD.FreehandDrawingArchive.freehand_drawing_archive",
		Tag:           "bytes,100,opt,name=freehand_drawing_archive",
		Filename:      "TSDArchives.proto",
	},
	{
		ExtendedType:  (*DataAttributes)(nil),
		ExtensionType: (*ImageDataAttributes)(nil),
		Field:         100,
		Name:          "TSD.ImageDataAttributes.image_data_attributes",
		Tag:           "bytes,100,opt,name=image_data_attributes",
		Filename:      "TSDArchives.proto",
	},
}

// Extension fields to CommandPropertyEntryArchive.
var (
	// optional TSD.FillArchive fill = 200;
	E_Fill = &file_TSDArchives_proto_extTypes[0]
	// optional TSD.StrokeArchive stroke = 201;
	E_Stroke = &file_TSDArchives_proto_extTypes[1]
)

// Extension fields to TSSThemeArchive.
var (
	// optional TSD.TSDThemePresetsArchive extension = 100;
	E_TSDThemePresetsArchive_Extension = &file_TSDArchives_proto_extTypes[2]
)

// Extension fields to GroupArchive.
var (
	// optional TSD.FreehandDrawingArchive freehand_drawing_archive = 100;
	E_FreehandDrawingArchive_FreehandDrawingArchive = &file_TSDArchives_proto_extTypes[3]
)

// Extension fields to DataAttributes.
var (
	// optional TSD.ImageDataAttributes image_data_attributes = 100;
	E_ImageDataAttributes_ImageDataAttributes = &file_TSDArchives_proto_extTypes[4]
)

var File_TSDArchives_proto protoreflect.FileDescriptor

var file_TSDArchives_proto_rawDesc = []byte{
	0x0a, 0x11, 0x54, 0x53, 0x44, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x03, 0x54, 0x53, 0x44, 0x1a, 0x11, 0x54, 0x53, 0x50, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x54, 0x53, 0x4b,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11,
	0x54, 0x53, 0x53, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x67, 0x0a, 0x11, 0x45, 0x64, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x74, 0x73, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x6f, 0x70, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x02, 0x52, 0x03, 0x74, 0x6f, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x02, 0x52, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x02, 0x28, 0x02, 0x52, 0x06, 0x62, 0x6f,
	0x74, 0x74, 0x6f, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20,
	0x02, 0x28, 0x02, 0x52, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x22, 0x84, 0x01, 0x0a, 0x0f, 0x47,
	0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x26,
	0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x53, 0x69, 0x7a, 0x65, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x6e, 0x67, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x61, 0x6e, 0x67, 0x6c,
	0x65, 0x22, 0xa8, 0x02, 0x0a, 0x16, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x43, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x54, 0x53, 0x44,
	0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x61, 0x74,
	0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x05, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x0b, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x53,
	0x69, 0x7a, 0x65, 0x52, 0x0b, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65,
	0x22, 0x7a, 0x0a, 0x13, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x54, 0x53, 0x44, 0x4c,
	0x65, 0x66, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x10, 0x00,
	0x12, 0x18, 0x0a, 0x14, 0x6b, 0x54, 0x53, 0x44, 0x52, 0x69, 0x67, 0x68, 0x74, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x6b, 0x54,
	0x53, 0x44, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x10, 0x0a, 0x12,
	0x0c, 0x0a, 0x08, 0x6b, 0x54, 0x53, 0x44, 0x53, 0x74, 0x61, 0x72, 0x10, 0x64, 0x12, 0x0d, 0x0a,
	0x08, 0x6b, 0x54, 0x53, 0x44, 0x50, 0x6c, 0x75, 0x73, 0x10, 0xc8, 0x01, 0x22, 0xb0, 0x02, 0x0a,
	0x17, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x50, 0x61, 0x74, 0x68, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x45, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x63, 0x61,
	0x6c, 0x61, 0x72, 0x50, 0x61, 0x74, 0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x50, 0x61, 0x74, 0x68, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x06, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x12, 0x2b, 0x0a, 0x0b, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x0b, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x63, 0x75, 0x72, 0x76, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x69, 0x73, 0x43, 0x75, 0x72, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
	0x75, 0x6f, 0x75, 0x73, 0x22, 0x59, 0x0a, 0x14, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x50, 0x61,
	0x74, 0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14,
	0x6b, 0x54, 0x53, 0x44, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x65, 0x63, 0x74, 0x61,
	0x6e, 0x67, 0x6c, 0x65, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x6b, 0x54, 0x53, 0x44, 0x52, 0x65,
	0x67, 0x75, 0x6c, 0x61, 0x72, 0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x0f,
	0x0a, 0x0b, 0x6b, 0x54, 0x53, 0x44, 0x43, 0x68, 0x65, 0x76, 0x72, 0x6f, 0x6e, 0x10, 0x02, 0x22,
	0x8a, 0x01, 0x0a, 0x17, 0x42, 0x65, 0x7a, 0x69, 0x65, 0x72, 0x50, 0x61, 0x74, 0x68, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x23, 0x0a, 0x0b, 0x70,
	0x61, 0x74, 0x68, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x70, 0x61, 0x74, 0x68, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x2b, 0x0a, 0x0b, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x53, 0x69, 0x7a, 0x65,
	0x52, 0x0b, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0xdc, 0x01, 0x0a,
	0x18, 0x43, 0x61, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x50, 0x61, 0x74, 0x68, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2c, 0x0a, 0x0c, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x0b, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2f, 0x0a, 0x0d, 0x74, 0x61, 0x69, 0x6c, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0c, 0x74, 0x61, 0x69, 0x6c,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x69, 0x6c,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x74, 0x61, 0x69,
	0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x5f,
	0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x63, 0x6f,
	0x72, 0x6e, 0x65, 0x72, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x61, 0x69, 0x6c, 0x22, 0xd5, 0x02, 0x0a, 0x1f,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12,
	0x32, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x54, 0x53, 0x44, 0x2e, 0x42, 0x65, 0x7a, 0x69, 0x65, 0x72, 0x50, 0x61, 0x74, 0x68, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x41, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x74, 0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x74, 0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x75,
	0x74, 0x73, 0x65, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0a, 0x6f, 0x75, 0x74, 0x73, 0x65, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x6f,
	0x75, 0x74, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08,
	0x6f, 0x75, 0x74, 0x73, 0x65, 0x74, 0x54, 0x6f, 0x22, 0x69, 0x0a, 0x1c, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x74, 0x68, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x54, 0x53, 0x44,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x51, 0x75, 0x61, 0x64, 0x72, 0x61, 0x74, 0x69, 0x63, 0x10, 0x00, 0x12, 0x24, 0x0a,
	0x20, 0x6b, 0x54, 0x53, 0x44, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x72, 0x74, 0x68, 0x6f, 0x67, 0x6f, 0x6e, 0x61,
	0x6c, 0x10, 0x01, 0x22, 0x8b, 0x04, 0x0a, 0x1f, 0x45, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x42, 0x65, 0x7a, 0x69, 0x65, 0x72, 0x50, 0x61, 0x74, 0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x48, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x70, 0x61,
	0x74, 0x68, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x54, 0x53, 0x44, 0x2e,
	0x45, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x7a, 0x69, 0x65, 0x72, 0x50, 0x61,
	0x74, 0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e,
	0x53, 0x75, 0x62, 0x70, 0x61, 0x74, 0x68, 0x52, 0x08, 0x73, 0x75, 0x62, 0x70, 0x61, 0x74, 0x68,
	0x73, 0x12, 0x2b, 0x0a, 0x0b, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x53, 0x69, 0x7a,
	0x65, 0x52, 0x0b, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x1a, 0xdd,
	0x01, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x0e, 0x69, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0e, 0x69, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x09, 0x6e,
	0x6f, 0x64, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x0f, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0f, 0x6f, 0x75, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x54, 0x53, 0x44, 0x2e,
	0x45, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x7a, 0x69, 0x65, 0x72, 0x50, 0x61,
	0x74, 0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x62,
	0x0a, 0x07, 0x53, 0x75, 0x62, 0x70, 0x61, 0x74, 0x68, 0x12, 0x3f, 0x0a, 0x05, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x45,
	0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x7a, 0x69, 0x65, 0x72, 0x50, 0x61, 0x74,
	0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x06, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x64, 0x22, 0x2d, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09,
	0x0a, 0x05, 0x73, 0x68, 0x61, 0x72, 0x70, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x62, 0x65, 0x7a,
	0x69, 0x65, 0x72, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x73, 0x6d, 0x6f, 0x6f, 0x74, 0x68, 0x10,
	0x03, 0x22, 0xad, 0x05, 0x0a, 0x11, 0x50, 0x61, 0x74, 0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x46, 0x6c, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x46, 0x6c, 0x69, 0x70, 0x12,
	0x22, 0x0a, 0x0c, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x46, 0x6c, 0x69, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x46,
	0x6c, 0x69, 0x70, 0x12, 0x47, 0x0a, 0x11, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x54, 0x53, 0x44, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x12,
	0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53,
	0x63, 0x61, 0x6c, 0x61, 0x72, 0x50, 0x61, 0x74, 0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x10, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x50, 0x61,
	0x74, 0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x12, 0x62, 0x65, 0x7a, 0x69,
	0x65, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x42, 0x65, 0x7a, 0x69, 0x65,
	0x72, 0x50, 0x61, 0x74, 0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x10, 0x62, 0x65, 0x7a, 0x69, 0x65, 0x72, 0x50, 0x61, 0x74, 0x68, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x4d, 0x0a, 0x13, 0x63, 0x61, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x50,
	0x61, 0x74, 0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x11, 0x63, 0x61, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x50, 0x61, 0x74, 0x68, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x63, 0x0a, 0x1b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x18,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x63, 0x0a, 0x1b, 0x65, 0x64, 0x69, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x65, 0x7a, 0x69, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x54, 0x53, 0x44, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x7a, 0x69,
	0x65, 0x72, 0x50, 0x61, 0x74, 0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x18, 0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x7a,
	0x69, 0x65, 0x72, 0x50, 0x61, 0x74, 0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x3c, 0x0a, 0x14, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65,
	0x6e, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x72, 0x61,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0d, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x22,
	0x8f, 0x01, 0x0a, 0x18, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x47, 0x72, 0x61,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x20, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1c,
	0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x33, 0x0a, 0x0f,
	0x62, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x53, 0x69, 0x7a, 0x65,
	0x52, 0x0f, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x53, 0x69, 0x7a,
	0x65, 0x22, 0xeb, 0x03, 0x0a, 0x0f, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65,
	0x6e, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x05,
	0x73, 0x74, 0x6f, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x54, 0x53,
	0x44, 0x2e, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x2e, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x05,
	0x73, 0x74, 0x6f, 0x70, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12,
	0x2a, 0x0a, 0x10, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x47, 0x72, 0x61, 0x64, 0x69,
	0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x64, 0x76, 0x61, 0x6e,
	0x63, 0x65, 0x64, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x61,
	0x6e, 0x67, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x47, 0x72,
	0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0d, 0x61,
	0x6e, 0x67, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x11,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x1a, 0x6c, 0x0a, 0x0c, 0x47, 0x72, 0x61,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x20, 0x0a, 0x05, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x66,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x66,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x66, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x69, 0x6e, 0x66,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x26, 0x0a, 0x0c, 0x47, 0x72, 0x61, 0x64, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x69, 0x6e, 0x65, 0x61,
	0x72, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x61, 0x64, 0x69, 0x61, 0x6c, 0x10, 0x01, 0x22,
	0x9b, 0x05, 0x0a, 0x10, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x6c, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x64, 0x61, 0x74, 0x61, 0x12, 0x53, 0x0a, 0x09, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x54, 0x53, 0x44, 0x2e,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x6c, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x3a, 0x0b, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65,
	0x52, 0x09, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x74,
	0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x04, 0x74, 0x69, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x08, 0x66,
	0x69, 0x6c, 0x6c, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x6c, 0x73, 0x69,
	0x7a, 0x65, 0x12, 0x44, 0x0a, 0x11, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x11, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x64, 0x61, 0x74, 0x61, 0x12, 0x52, 0x0a, 0x24, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x65, 0x74, 0x73, 0x55, 0x6e, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x41, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x24, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65,
	0x74, 0x73, 0x55, 0x6e, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x41, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x12, 0x32, 0x0a, 0x0e,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x12, 0x3d, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x11, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x4d, 0x0a, 0x1a, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x19, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x64, 0x61, 0x74, 0x61, 0x22, 0x5d,
	0x0a, 0x12, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x6c, 0x54, 0x65, 0x63, 0x68, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x53,
	0x69, 0x7a, 0x65, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x74, 0x72, 0x65, 0x74, 0x63, 0x68,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x69, 0x6c, 0x65, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b,
	0x53, 0x63, 0x61, 0x6c, 0x65, 0x54, 0x6f, 0x46, 0x69, 0x6c, 0x6c, 0x10, 0x03, 0x12, 0x0e, 0x0a,
	0x0a, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x54, 0x6f, 0x46, 0x69, 0x74, 0x10, 0x04, 0x22, 0x98, 0x01,
	0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x20, 0x0a,
	0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12,
	0x30, 0x0a, 0x08, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x08, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x12, 0x2b, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x6c,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2a, 0x08,
	0x08, 0x64, 0x10, 0x80, 0x80, 0x80, 0x80, 0x02, 0x22, 0xec, 0x01, 0x0a, 0x14, 0x53, 0x74, 0x72,
	0x6f, 0x6b, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x12, 0x3f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2b, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b,
	0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x02, 0x52,
	0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x22, 0x4d, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x6f,
	0x6b, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a,
	0x0a, 0x54, 0x53, 0x44, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x10, 0x00, 0x12, 0x13, 0x0a,
	0x0f, 0x54, 0x53, 0x44, 0x53, 0x6f, 0x6c, 0x69, 0x64, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x53, 0x44, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x10, 0x02, 0x22, 0xd0, 0x03, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x6f,
	0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x2c, 0x0a, 0x03, 0x63, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x61, 0x70, 0x52, 0x03, 0x63, 0x61, 0x70, 0x12,
	0x21, 0x0a, 0x04, 0x6a, 0x6f, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e,
	0x54, 0x53, 0x44, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x04, 0x6a, 0x6f,
	0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b,
	0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x3a, 0x0a, 0x0c, 0x73, 0x6d, 0x61, 0x72,
	0x74, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0b, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x53, 0x74,
	0x72, 0x6f, 0x6b, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a,
	0x10, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x0f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x53,
	0x74, 0x72, 0x6f, 0x6b, 0x65, 0x22, 0x33, 0x0a, 0x07, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x61, 0x70,
	0x12, 0x0b, 0x0a, 0x07, 0x42, 0x75, 0x74, 0x74, 0x43, 0x61, 0x70, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x61, 0x70, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53,
	0x71, 0x75, 0x61, 0x72, 0x65, 0x43, 0x61, 0x70, 0x10, 0x02, 0x22, 0xd2, 0x01, 0x0a, 0x12, 0x53,
	0x6d, 0x61, 0x72, 0x74, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x73, 0x65, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53,
	0x65, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22,
	0x4c, 0x0a, 0x0c, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x22, 0x3b, 0x0a,
	0x16, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xcc, 0x01, 0x0a, 0x0e, 0x4c,
	0x69, 0x6e, 0x65, 0x45, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x1d, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x35, 0x0a, 0x09,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0d, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x3a, 0x09,
	0x4d, 0x69, 0x74, 0x65, 0x72, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x65, 0x4a,
	0x6f, 0x69, 0x6e, 0x12, 0x27, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x73, 0x46, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x89, 0x04, 0x0a, 0x0d, 0x53, 0x68,
	0x61, 0x64, 0x6f, 0x77, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x19, 0x0a,
	0x05, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x3a, 0x03, 0x33, 0x31,
	0x35, 0x52, 0x05, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x3a, 0x01, 0x35, 0x52, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x19, 0x0a, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x3a, 0x01, 0x31, 0x52, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x1b,
	0x0a, 0x07, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x3a,
	0x01, 0x31, 0x52, 0x07, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0a, 0x69,
	0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x40, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x0d, 0x54,
	0x53, 0x44, 0x44, 0x72, 0x6f, 0x70, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x64, 0x72, 0x6f, 0x70, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x44, 0x72, 0x6f,
	0x70, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0a,
	0x64, 0x72, 0x6f, 0x70, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x53,
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0d, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x12, 0x3c, 0x0a, 0x0c, 0x63,
	0x75, 0x72, 0x76, 0x65, 0x64, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x43, 0x75, 0x72, 0x76, 0x65, 0x64, 0x53, 0x68,
	0x61, 0x64, 0x6f, 0x77, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0c, 0x63, 0x75, 0x72,
	0x76, 0x65, 0x64, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x22, 0x4a, 0x0a, 0x0a, 0x53, 0x68, 0x61,
	0x64, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x53, 0x44, 0x44, 0x72,
	0x6f, 0x70, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x53,
	0x44, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x10, 0x01,
	0x12, 0x13, 0x0a, 0x0f, 0x54, 0x53, 0x44, 0x43, 0x75, 0x72, 0x76, 0x65, 0x64, 0x53, 0x68, 0x61,
	0x64, 0x6f, 0x77, 0x10, 0x02, 0x22, 0x13, 0x0a, 0x11, 0x44, 0x72, 0x6f, 0x70, 0x53, 0x68, 0x61,
	0x64, 0x6f, 0x77, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x22, 0x4e, 0x0a, 0x14, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x12, 0x1b, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x3a, 0x03, 0x30, 0x2e, 0x32, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x19, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x3a,
	0x01, 0x30, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x30, 0x0a, 0x13, 0x43, 0x75,
	0x72, 0x76, 0x65, 0x64, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x75, 0x72, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x3a, 0x03, 0x30, 0x2e, 0x36, 0x52, 0x05, 0x63, 0x75, 0x72, 0x76, 0x65, 0x22, 0x32, 0x0a, 0x11,
	0x52, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x3a, 0x03, 0x30, 0x2e, 0x35, 0x52, 0x07, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x22, 0xda, 0x03, 0x0a, 0x17, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08,
	0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x61, 0x74, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x73, 0x61,
	0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x68, 0x61, 0x72, 0x70, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x70, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x64, 0x65, 0x6e, 0x6f, 0x69, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x64,
	0x65, 0x6e, 0x6f, 0x69, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x74, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6e, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x74, 0x69, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0b, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x1e, 0x0a, 0x09, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x02, 0x3a, 0x01, 0x31, 0x52, 0x08, 0x74, 0x6f, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x67, 0x61, 0x6d, 0x6d, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x67, 0x61, 0x6d, 0x6d, 0x61, 0x12, 0x1f, 0x0a, 0x07, 0x65, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x07, 0x65,
	0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x1b, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x73, 0x5f, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x19, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x61,
	0x67, 0x65, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xdf, 0x02,
	0x0a, 0x1b, 0x53, 0x68, 0x61, 0x70, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x24, 0x0a,
	0x04, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54, 0x53,
	0x44, 0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x04, 0x66,
	0x69, 0x6c, 0x6c, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x06, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x07, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x68, 0x61,
	0x64, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e,
	0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x06, 0x73,
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x12, 0x36, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x54, 0x53, 0x44, 0x2e,
	0x52, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a,
	0x0d, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x45,
	0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x4c,
	0x69, 0x6e, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x37, 0x0a, 0x0d, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x54, 0x53, 0x44, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x45, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x0b, 0x74, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x6e, 0x65, 0x45, 0x6e, 0x64, 0x22,
	0xb3, 0x01, 0x0a, 0x11, 0x53, 0x68, 0x61, 0x70, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x54, 0x53, 0x53, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x28,
	0x0a, 0x0e, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x10, 0x73, 0x68, 0x61, 0x70,
	0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x65, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x0f, 0x73, 0x68, 0x61, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0xc7, 0x01, 0x0a, 0x1b, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f,
	0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x06, 0x73, 0x74, 0x72, 0x6f, 0x6b,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x07, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x06, 0x73,
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53,
	0x44, 0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x06, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x12, 0x36, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x54, 0x53,
	0x44, 0x2e, 0x52, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xb3, 0x01, 0x0a, 0x11, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x54, 0x53, 0x53, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x28,
	0x0a, 0x0e, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x10, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x0f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0xb9, 0x05, 0x0a, 0x16, 0x54, 0x53, 0x44, 0x54, 0x68, 0x65,
	0x6d, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x12, 0x44, 0x0a, 0x15, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6c,
	0x6c, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x13, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x6c, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x12, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x10, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x6c, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x0e, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77,
	0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x73, 0x12, 0x3c, 0x0a, 0x12, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x6c,
	0x69, 0x6e, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x12,
	0x3e, 0x0a, 0x13, 0x73, 0x68, 0x61, 0x70, 0x65, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x11, 0x73, 0x68,
	0x61, 0x70, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x12,
	0x42, 0x0a, 0x15, 0x74, 0x65, 0x78, 0x74, 0x62, 0x6f, 0x78, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x13,
	0x74, 0x65, 0x78, 0x74, 0x62, 0x6f, 0x78, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x13, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x11, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x13, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x11, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x73, 0x12, 0x4b, 0x0a, 0x1a, 0x64, 0x72, 0x61, 0x77, 0x69, 0x6e, 0x67, 0x5f, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x17, 0x64, 0x72, 0x61, 0x77, 0x69, 0x6e, 0x67,
	0x4c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73,
	0x32, 0x4f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x2e,
	0x54, 0x53, 0x53, 0x2e, 0x54, 0x53, 0x53, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x44, 0x2e,
	0x54, 0x53, 0x44, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0xe0, 0x01, 0x0a, 0x24, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x46, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x05, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x05, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x66,
	0x69, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54, 0x53, 0x44, 0x2e,
	0x46, 0x69, 0x6c, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c,
	0x6c, 0x12, 0x2b, 0x0a, 0x08, 0x6f, 0x6c, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x04, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x07, 0x6f, 0x6c, 0x64, 0x46, 0x69, 0x6c, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x22, 0xe4, 0x04, 0x0a, 0x0f, 0x44, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c,
	0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x67, 0x65, 0x6f, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x54, 0x53, 0x44,
	0x2e, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x08, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x26, 0x0a, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x12, 0x65, 0x78, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x54, 0x53, 0x44, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x54, 0x65, 0x78,
	0x74, 0x57, 0x72, 0x61, 0x70, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x10, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x54, 0x65, 0x78, 0x74, 0x57, 0x72, 0x61, 0x70, 0x12, 0x23,
	0x0a, 0x0d, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x6b,
	0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x73, 0x70, 0x65, 0x63, 0x74, 0x5f,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x11, 0x61, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x4c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x19, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x12, 0x70, 0x65, 0x6e, 0x63, 0x69, 0x6c, 0x5f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x11,
	0x70, 0x65, 0x6e, 0x63, 0x69, 0x6c, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x24, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x63, 0x61, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65,
	0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x48, 0x69,
	0x64, 0x64, 0x65, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x61,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x22, 0x98, 0x01, 0x0a, 0x10,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x12, 0x30, 0x0a, 0x08, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x08, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x12, 0x26, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x08, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0xbc, 0x01, 0x0a, 0x0c, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x44, 0x72, 0x61,
	0x77, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12,
	0x4a, 0x0a, 0x1a, 0x66, 0x61, 0x6b, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x65, 0x5f, 0x66, 0x6f,
	0x72, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x16, 0x66, 0x61, 0x6b, 0x65, 0x53, 0x68, 0x61, 0x70, 0x65, 0x46, 0x6f,
	0x72, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2a, 0x08, 0x08, 0x64, 0x10,
	0x80, 0x80, 0x80, 0x80, 0x02, 0x22, 0x5e, 0x0a, 0x1f, 0x46, 0x72, 0x65, 0x65, 0x68, 0x61, 0x6e,
	0x64, 0x44, 0x72, 0x61, 0x77, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x6c,
	0x6f, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x75, 0x6c,
	0x64, 0x4c, 0x6f, 0x6f, 0x70, 0x22, 0xc1, 0x02, 0x0a, 0x16, 0x46, 0x72, 0x65, 0x65, 0x68, 0x61,
	0x6e, 0x64, 0x44, 0x72, 0x61, 0x77, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x12, 0x31, 0x0a, 0x0c, 0x73, 0x70, 0x61, 0x63, 0x65, 0x72, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x72, 0x53, 0x68,
	0x61, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x42, 0x0a,
	0x09, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x46, 0x72, 0x65, 0x65, 0x68, 0x61, 0x6e, 0x64, 0x44,
	0x72, 0x61, 0x77, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x09, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x6d, 0x70, 0x65,
	0x64, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6c,
	0x61, 0x73, 0x74, 0x43, 0x6c, 0x61, 0x6d, 0x70, 0x65, 0x64, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x32,
	0x68, 0x0a, 0x18, 0x66, 0x72, 0x65, 0x65, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x64, 0x72, 0x61, 0x77,
	0x69, 0x6e, 0x67, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x11, 0x2e, 0x54, 0x53,
	0x44, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x18, 0x64,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x46, 0x72, 0x65, 0x65, 0x68,
	0x61, 0x6e, 0x64, 0x44, 0x72, 0x61, 0x77, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x16, 0x66, 0x72, 0x65, 0x65, 0x68, 0x61, 0x6e, 0x64, 0x44, 0x72, 0x61, 0x77, 0x69,
	0x6e, 0x67, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x22, 0xd4, 0x02, 0x0a, 0x0c, 0x53, 0x68,
	0x61, 0x70, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x54, 0x53, 0x44, 0x2e,
	0x44, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x0a,
	0x70, 0x61, 0x74, 0x68, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x74, 0x68, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53,
	0x44, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x45, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x45, 0x6e,
	0x64, 0x12, 0x3b, 0x0a, 0x0d, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x65,
	0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x4c,
	0x69, 0x6e, 0x65, 0x45, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x0b, 0x74, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x6e, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x40,
	0x0a, 0x1b, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x1b, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x22, 0x9c, 0x02, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x6e, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x54, 0x53, 0x44, 0x2e,
	0x53, 0x68, 0x61, 0x70, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x31, 0x0a, 0x0c, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x12, 0x35, 0x0a,
	0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55,
	0x55, 0x49, 0x44, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x6f,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x11, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x55, 0x75, 0x69, 0x64, 0x22,
	0x9e, 0x09, 0x0a, 0x0c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x12, 0x2a, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x0c, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x0c, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x6d, 0x61, 0x73,
	0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0x38, 0x0a,
	0x0d, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e,
	0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x36, 0x0a,
	0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x0b, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x0b, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x35, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x41, 0x6c, 0x70,
	0x68, 0x61, 0x50, 0x61, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x41, 0x6c, 0x70, 0x68, 0x61, 0x50, 0x61, 0x74, 0x68, 0x12, 0x48, 0x0a, 0x10, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41,
	0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x10, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x11, 0x65, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x11, 0x65, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x11, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65,
	0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x11, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x52, 0x0a, 0x1a, 0x74, 0x68, 0x75, 0x6d, 0x62,
	0x6e, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x1a, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74,
	0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x52, 0x0a, 0x24, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x73, 0x55, 0x6e, 0x74, 0x61, 0x67, 0x67, 0x65,
	0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x41, 0x73, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x69, 0x63, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x24, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x65, 0x74, 0x73, 0x55, 0x6e, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x41, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x12,
	0x33, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x45, 0x0a, 0x16, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x15, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x54, 0x68,
	0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x15, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x14, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x2a, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x50, 0x61, 0x74, 0x68,
	0x52, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x65, 0x64, 0x50, 0x61, 0x74, 0x68, 0x12, 0x32, 0x0a, 0x0b,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x37, 0x0a, 0x18, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x5f, 0x70, 0x64, 0x66, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x15, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x54, 0x72, 0x61, 0x63, 0x65, 0x50,
	0x64, 0x66, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2a, 0x05, 0x08, 0x64, 0x10, 0xe8, 0x07,
	0x22, 0x71, 0x0a, 0x0b, 0x4d, 0x61, 0x73, 0x6b, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12,
	0x2a, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x54, 0x53, 0x44, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x0a, 0x70,
	0x61, 0x74, 0x68, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x74, 0x68, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x22, 0xa4, 0x02, 0x0a, 0x13, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0a, 0x70,
	0x69, 0x78, 0x65, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x09, 0x70, 0x69, 0x78, 0x65,
	0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x73, 0x5f, 0x73, 0x72, 0x67, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x49, 0x73, 0x53, 0x72, 0x67, 0x62, 0x12, 0x5c, 0x0a, 0x2c, 0x73, 0x68, 0x6f,
	0x75, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x73, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x69, 0x66,
	0x5f, 0x75, 0x6e, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x26, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x42, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72,
	0x65, 0x74, 0x65, 0x64, 0x41, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x49, 0x66, 0x55,
	0x6e, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x32, 0x61, 0x0a, 0x15, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x12, 0x13, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53,
	0x44, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x13, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0xc9, 0x0c, 0x0a, 0x0c, 0x4d,
	0x6f, 0x76, 0x69, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x54, 0x53, 0x44,
	0x2e, 0x44, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x09, 0x6d, 0x6f, 0x76, 0x69, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09,
	0x6d, 0x6f, 0x76, 0x69, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x52, 0x0a, 0x1a, 0x69, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x41, 0x75, 0x78, 0x69, 0x6c, 0x69, 0x61, 0x72, 0x79, 0x4d, 0x6f,
	0x76, 0x69, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x1a, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x41, 0x75, 0x78, 0x69, 0x6c,
	0x69, 0x61, 0x72, 0x79, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x63, 0x0a,
	0x2f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x75, 0x78, 0x69, 0x6c, 0x69,
	0x61, 0x72, 0x79, 0x5f, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x2a, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x41, 0x75, 0x78, 0x69, 0x6c, 0x69, 0x61, 0x72, 0x79, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x55, 0x52, 0x4c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x6f, 0x76, 0x69,
	0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x34, 0x0a, 0x13, 0x6c, 0x6f, 0x6f, 0x70, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x13, 0x6c, 0x6f, 0x6f, 0x70, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x73, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x0b, 0x6c, 0x6f, 0x6f, 0x70,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e,
	0x54, 0x53, 0x44, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x4c, 0x6f, 0x6f, 0x70, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x3a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x0a, 0x6c, 0x6f, 0x6f, 0x70, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x75,
	0x74, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x08, 0x61, 0x75, 0x74, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75,
	0x64, 0x69, 0x6f, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61,
	0x75, 0x64, 0x69, 0x6f, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x32, 0x0a, 0x14, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x6c,
	0x61, 0x79, 0x73, 0x41, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x73, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x73, 0x41, 0x63, 0x72, 0x6f,
	0x73, 0x73, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x0f, 0x70, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x12, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x4f,
	0x6e, 0x6c, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x12, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x4f, 0x6e, 0x6c,
	0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x57, 0x0a, 0x29, 0x70, 0x6f,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5f,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x24, 0x70,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x79,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12,
	0x3d, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6d, 0x6f, 0x76, 0x69,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x11, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x49,
	0x0a, 0x18, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x17, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4f, 0x0a, 0x1b, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x4f, 0x6e, 0x6c, 0x79, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x1a,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4f, 0x6e, 0x6c,
	0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x05, 0x73, 0x74,
	0x79, 0x6c, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x12, 0x2d, 0x0a, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x53, 0x69, 0x7a,
	0x65, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x2b, 0x0a, 0x0b, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x53, 0x69, 0x7a, 0x65, 0x52,
	0x0b, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x32, 0x0a, 0x0b,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x37, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x4d, 0x6f, 0x76, 0x69,
	0x65, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x0b, 0x66, 0x69,
	0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x0d, 0x69, 0x73, 0x5f,
	0x6c, 0x69, 0x76, 0x65, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0b, 0x69, 0x73, 0x4c, 0x69, 0x76, 0x65, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x22, 0x39, 0x0a, 0x0f, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x4c, 0x6f, 0x6f,
	0x70, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x10, 0x01, 0x12, 0x10, 0x0a,
	0x0c, 0x42, 0x61, 0x63, 0x6b, 0x41, 0x6e, 0x64, 0x46, 0x6f, 0x72, 0x74, 0x68, 0x10, 0x02, 0x2a,
	0x05, 0x08, 0x64, 0x10, 0xe8, 0x07, 0x22, 0xc9, 0x01, 0x0a, 0x17, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x69, 0x6f, 0x72, 0x54, 0x65, 0x78, 0x74, 0x57, 0x72, 0x61, 0x70, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x06, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x68, 0x74, 0x6d, 0x6c, 0x5f, 0x77, 0x72, 0x61, 0x70,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x48, 0x74, 0x6d, 0x6c, 0x57, 0x72,
	0x61, 0x70, 0x22, 0xd2, 0x01, 0x0a, 0x1a, 0x44, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x4b, 0x69, 0x6e, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x61, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x69, 0x73, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x65, 0x64, 0x54, 0x6f, 0x54,
	0x65, 0x78, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x69, 0x73, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x61, 0x62, 0x6f, 0x76, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x41,
	0x62, 0x6f, 0x76, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x69,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x57,
	0x69, 0x74, 0x68, 0x54, 0x65, 0x78, 0x74, 0x22, 0x9e, 0x01, 0x0a, 0x21, 0x46, 0x72, 0x65, 0x65,
	0x68, 0x61, 0x6e, 0x64, 0x44, 0x72, 0x61, 0x77, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a,
	0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x54,
	0x53, 0x44, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x1e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64,
	0x6f, 0x63, 0x5f, 0x77, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x72,
	0x5f, 0x73, 0x68, 0x61, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x44, 0x6f, 0x63, 0x57, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x72, 0x53, 0x68, 0x61, 0x70, 0x65, 0x22, 0x81, 0x08, 0x0a, 0x1d, 0x46, 0x72, 0x65,
	0x65, 0x68, 0x61, 0x6e, 0x64, 0x44, 0x72, 0x61, 0x77, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6f, 0x6c,
	0x6b, 0x69, 0x74, 0x55, 0x49, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x0d, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12,
	0x87, 0x01, 0x0a, 0x20, 0x6d, 0x6f, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x54, 0x53, 0x44,
	0x2e, 0x46, 0x72, 0x65, 0x65, 0x68, 0x61, 0x6e, 0x64, 0x44, 0x72, 0x61, 0x77, 0x69, 0x6e, 0x67,
	0x54, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x74, 0x55, 0x49, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x46,
	0x72, 0x65, 0x65, 0x68, 0x61, 0x6e, 0x64, 0x44, 0x72, 0x61, 0x77, 0x69, 0x6e, 0x67, 0x54, 0x6f,
	0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x03, 0x50, 0x65, 0x6e, 0x52, 0x1c, 0x6d, 0x6f, 0x73,
	0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x62, 0x6c,
	0x65, 0x54, 0x6f, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x65, 0x6e,
	0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0e, 0x70, 0x65, 0x6e, 0x54, 0x6f, 0x6f, 0x6c, 0x4f, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x12, 0x35, 0x0a, 0x17, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x5f,
	0x75, 0x6e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x70, 0x65, 0x6e, 0x54, 0x6f, 0x6f, 0x6c, 0x55, 0x6e, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x64, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x65,
	0x6e, 0x63, 0x69, 0x6c, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x70, 0x65, 0x6e, 0x63, 0x69, 0x6c, 0x54,
	0x6f, 0x6f, 0x6c, 0x4f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x3b, 0x0a, 0x1a, 0x70, 0x65,
	0x6e, 0x63, 0x69, 0x6c, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x75, 0x6e, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x64, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x17,
	0x70, 0x65, 0x6e, 0x63, 0x69, 0x6c, 0x54, 0x6f, 0x6f, 0x6c, 0x55, 0x6e, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x64, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x72, 0x61, 0x79, 0x6f,
	0x6e, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x63, 0x72, 0x61, 0x79, 0x6f, 0x6e, 0x54, 0x6f, 0x6f, 0x6c,
	0x4f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x3b, 0x0a, 0x1a, 0x63, 0x72, 0x61, 0x79, 0x6f,
	0x6e, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x75, 0x6e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x17, 0x63, 0x72, 0x61,
	0x79, 0x6f, 0x6e, 0x54, 0x6f, 0x6f, 0x6c, 0x55, 0x6e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x57,
	0x69, 0x64, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x74, 0x6f, 0x6f,
	0x6c, 0x5f, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0f, 0x66, 0x69, 0x6c, 0x6c, 0x54, 0x6f, 0x6f, 0x6c, 0x4f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x12, 0x37, 0x0a, 0x18, 0x65, 0x72, 0x61, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x5f,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x15, 0x65, 0x72, 0x61, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6f, 0x6c, 0x53, 0x63,
	0x61, 0x6c, 0x65, 0x64, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x46, 0x0a, 0x20, 0x65, 0x72, 0x61,
	0x73, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x65, 0x72, 0x61, 0x73, 0x65, 0x73, 0x5f,
	0x77, 0x68, 0x6f, 0x6c, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1c, 0x65, 0x72, 0x61, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6f, 0x6c, 0x45,
	0x72, 0x61, 0x73, 0x65, 0x73, 0x57, 0x68, 0x6f, 0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x12, 0x30, 0x0a, 0x0e, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x0c, 0x70, 0x65, 0x6e, 0x54, 0x6f, 0x6f, 0x6c, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x12, 0x36, 0x0a, 0x11, 0x70, 0x65, 0x6e, 0x63, 0x69, 0x6c, 0x5f, 0x74, 0x6f,
	0x6f, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x0f, 0x70, 0x65, 0x6e, 0x63,
	0x69, 0x6c, 0x54, 0x6f, 0x6f, 0x6c, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x36, 0x0a, 0x11, 0x63,
	0x72, 0x61, 0x79, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x52, 0x0f, 0x63, 0x72, 0x61, 0x79, 0x6f, 0x6e, 0x54, 0x6f, 0x6f, 0x6c, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x74, 0x6f, 0x6f, 0x6c,
	0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x0d, 0x66, 0x69, 0x6c, 0x6c, 0x54, 0x6f,
	0x6f, 0x6c, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x63, 0x0a, 0x17, 0x46, 0x72, 0x65, 0x65, 0x68,
	0x61, 0x6e, 0x64, 0x44, 0x72, 0x61, 0x77, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6f, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x65, 0x6e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x50,
	0x65, 0x6e, 0x63, 0x69, 0x6c, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x72, 0x61, 0x79, 0x6f,
	0x6e, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x69, 0x6c, 0x6c, 0x10, 0x03, 0x12, 0x0a, 0x0a,
	0x06, 0x45, 0x72, 0x61, 0x73, 0x65, 0x72, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x61, 0x72,
	0x71, 0x75, 0x65, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x10, 0x05, 0x22, 0x17, 0x0a, 0x15,
	0x53, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x43, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x22, 0xe0, 0x01, 0x0a, 0x0c, 0x47, 0x75, 0x69, 0x64, 0x65, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x47, 0x75, 0x69, 0x64, 0x65,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x47, 0x75, 0x69, 0x64, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x65, 0x22, 0x29, 0x0a,
	0x09, 0x47, 0x75, 0x69, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x6f,
	0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x65,
	0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x10, 0x01, 0x22, 0x9c, 0x01, 0x0a, 0x17, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x47, 0x75, 0x69, 0x64, 0x65, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x26, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x47, 0x75, 0x69, 0x64, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x2e, 0x47, 0x75, 0x69, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x29, 0x0a, 0x09,
	0x47, 0x75, 0x69, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x6f, 0x72,
	0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x65, 0x72,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x10, 0x01, 0x22, 0x61, 0x0a, 0x13, 0x47, 0x75, 0x69, 0x64, 0x65,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x4a,
	0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x47, 0x75, 0x69,
	0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x54, 0x53, 0x44, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x47, 0x75, 0x69, 0x64, 0x65,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x11, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x47, 0x75, 0x69, 0x64, 0x65, 0x73, 0x22, 0xb7, 0x01, 0x0a, 0x19, 0x54,
	0x53, 0x44, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x42,
	0x0a, 0x15, 0x6e, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x13, 0x6e,
	0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x12, 0x30, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x22, 0x84, 0x01, 0x0a, 0x18, 0x44, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x12, 0x24, 0x0a, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x42, 0x0a, 0x15, 0x6e, 0x6f, 0x6e, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x13, 0x6e, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0xa4, 0x01, 0x0a, 0x15,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x56, 0x0a, 0x29, 0x68, 0x61,
	0x73, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x23, 0x68,
	0x61, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x49,
	0x6e, 0x4e, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x22, 0x16, 0x0a, 0x14, 0x50, 0x61, 0x74, 0x68, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x22, 0x1f, 0x0a, 0x1d, 0x49, 0x6e,
	0x66, 0x6f, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x22, 0xad, 0x01, 0x0a, 0x15,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2e, 0x0a, 0x0d, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x12, 0x28, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x22, 0xda, 0x01, 0x0a, 0x25,
	0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x12, 0x42, 0x0a, 0x15, 0x6f, 0x6c, 0x64, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x13, 0x6f, 0x6c, 0x64, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x12, 0x42, 0x0a, 0x15, 0x6e, 0x65, 0x77, 0x5f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x13, 0x6e, 0x65, 0x77, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x22, 0x65, 0x0a, 0x17, 0x50, 0x65, 0x6e, 0x63,
	0x69, 0x6c, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x12, 0x4a, 0x0a, 0x19, 0x70, 0x65, 0x6e, 0x63, 0x69, 0x6c, 0x5f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x17, 0x70, 0x65, 0x6e, 0x63, 0x69, 0x6c, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x22,
	0x5f, 0x0a, 0x20, 0x50, 0x65, 0x6e, 0x63, 0x69, 0x6c, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x12, 0x3b, 0x0a, 0x11, 0x70, 0x65, 0x6e, 0x63, 0x69, 0x6c, 0x5f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x10,
	0x70, 0x65, 0x6e, 0x63, 0x69, 0x6c, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xa2, 0x0b, 0x0a, 0x1e, 0x50, 0x65, 0x6e, 0x63, 0x69, 0x6c, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2f, 0x0a, 0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x75, 0x70, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x3d, 0x0a, 0x10, 0x72, 0x61, 0x73, 0x74, 0x65, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x5f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x0f, 0x72, 0x61, 0x73, 0x74, 0x65, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x48, 0x0a, 0x16, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64,
	0x65, 0x64, 0x5f, 0x64, 0x72, 0x61, 0x77, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x14, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x45, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x64, 0x44, 0x72, 0x61, 0x77, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x0c, 0x64, 0x72,
	0x61, 0x77, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0b, 0x64, 0x72, 0x61,
	0x77, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x74, 0x68, 0x12, 0x49, 0x0a, 0x1b, 0x73, 0x74, 0x72, 0x6f,
	0x6b, 0x65, 0x73, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x6f, 0x78,
	0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x18, 0x73, 0x74, 0x72, 0x6f, 0x6b,
	0x65, 0x73, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x78, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x12, 0x44, 0x0a, 0x19, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x73, 0x5f, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x6f, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x53, 0x69, 0x7a,
	0x65, 0x52, 0x16, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x73, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x42, 0x6f, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3f,
	0x0a, 0x16, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x14, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x4e, 0x0a, 0x25, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x61,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1f,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4f, 0x66, 0x50, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x12,
	0x3f, 0x0a, 0x1c, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x73, 0x5f, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x74, 0x65, 0x78, 0x74, 0x42, 0x61, 0x73, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x73, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x32, 0x0a, 0x15, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x6f,
	0x6b, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x13, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x09, 0x70, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x52, 0x08, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x74, 0x6f, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x14, 0x63, 0x61,
	0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x12, 0x63, 0x61, 0x6c, 0x6c, 0x6f, 0x75,
	0x74, 0x53, 0x75, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x0d,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0c,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x45, 0x0a, 0x1f,
	0x70, 0x65, 0x6e, 0x63, 0x69, 0x6c, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x72, 0x61, 0x77, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1c, 0x70, 0x65, 0x6e, 0x63, 0x69, 0x6c, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x72, 0x61, 0x77, 0x69, 0x6e, 0x67, 0x53, 0x63,
	0x61, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a,
	0x0c, 0x73, 0x75, 0x62, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x73, 0x18, 0x13, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x3b, 0x0a, 0x0f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x5f, 0x64, 0x72, 0x61, 0x77,
	0x69, 0x6e, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x65,
	0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x44, 0x72, 0x61, 0x77, 0x69, 0x6e, 0x67, 0x12, 0x47, 0x0a,
	0x1a, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x17, 0x73,
	0x74, 0x72, 0x6f, 0x6b, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x42, 0x0a, 0x18, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x53,
	0x69, 0x7a, 0x65, 0x52, 0x15, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3e, 0x0a, 0x15, 0x72, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x13, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x64, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x39, 0x0a, 0x13, 0x72, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x53, 0x69,
	0x7a, 0x65, 0x52, 0x11, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x64, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x40, 0x0a, 0x1c, 0x53, 0x70, 0x65, 0x63, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x46, 0x69, 0x6c, 0x6c, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x40, 0x0a, 0x1d, 0x53, 0x70, 0x65, 0x63, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x63, 0x61, 0x6c,
	0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x01, 0x52, 0x0a, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x22, 0x37, 0x0a, 0x1f, 0x53, 0x70, 0x65,
	0x63, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x6c, 0x53, 0x65, 0x74,
	0x41, 0x6e, 0x67, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x01, 0x52, 0x05, 0x61, 0x6e, 0x67,
	0x6c, 0x65, 0x22, 0x40, 0x0a, 0x20, 0x53, 0x70, 0x65, 0x63, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x46,
	0x69, 0x6c, 0x6c, 0x53, 0x65, 0x74, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x22, 0x3b, 0x0a, 0x1f, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x66, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x01, 0x52, 0x07, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x22, 0x31, 0x0a, 0x19, 0x53, 0x70, 0x65, 0x63, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x53,
	0x65, 0x74, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x01, 0x52, 0x05, 0x61,
	0x6e, 0x67, 0x6c, 0x65, 0x22, 0x3d, 0x0a, 0x19, 0x53, 0x70, 0x65, 0x63, 0x53, 0x68, 0x61, 0x64,
	0x6f, 0x77, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x12, 0x20, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x22, 0x34, 0x0a, 0x1a, 0x53, 0x70, 0x65, 0x63, 0x53, 0x68, 0x61, 0x64, 0x6f,
	0x77, 0x53, 0x65, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x01, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x37, 0x0a, 0x1b, 0x53, 0x70, 0x65,
	0x63, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x01, 0x52, 0x07, 0x6f, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x22, 0x34, 0x0a, 0x1a, 0x53, 0x70, 0x65, 0x63, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77,
	0x53, 0x65, 0x74, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x22, 0x3d, 0x0a, 0x19, 0x53, 0x70, 0x65, 0x63,
	0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0xe3, 0x01, 0x0a, 0x1b, 0x53, 0x70, 0x65, 0x63,
	0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x53, 0x65, 0x74, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x63, 0x61, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6c, 0x69, 0x6e, 0x65, 0x43,
	0x61, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x33, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x44, 0x2e,
	0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x22, 0x31, 0x0a,
	0x19, 0x53, 0x70, 0x65, 0x63, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x53, 0x65, 0x74, 0x57, 0x69,
	0x64, 0x74, 0x68, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x02, 0x28, 0x01, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x22, 0xb1, 0x01, 0x0a, 0x0b, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x78,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x55, 0x72, 0x6c, 0x22, 0x64, 0x0a, 0x10, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x46, 0x69, 0x6e,
	0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x4d,
	0x6f, 0x76, 0x69, 0x65, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x52, 0x06, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x1c, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x10,
	0x01, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x9c, 0x08, 0x0a, 0x15, 0x4d,
	0x6f, 0x76, 0x69, 0x65, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x37, 0x0a,
	0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x39, 0x0a, 0x19, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x33, 0x0a, 0x16, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x13, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x74, 0x69, 0x6d, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x19, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x39, 0x0a,
	0x19, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x16, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x41, 0x0a, 0x1d, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x1a, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x1c, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x18, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x0c, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x0b, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d,
	0x5f, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x41, 0x12, 0x32, 0x0a,
	0x15, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x62, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x70, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d,
	0x42, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x13, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x6f, 0x72, 0x6d, 0x43, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x64, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x44, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d,
	0x5f, 0x74, 0x78, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x70, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x78, 0x12,
	0x34, 0x0a, 0x16, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x74, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x14, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x6f, 0x72, 0x6d, 0x54, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x65, 0x64, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x54, 0x61, 0x67, 0x2a, 0x37, 0x0a, 0x08, 0x4c, 0x69, 0x6e,
	0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x69, 0x74, 0x65, 0x72, 0x4a, 0x6f,
	0x69, 0x6e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4a, 0x6f, 0x69,
	0x6e, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x65, 0x76, 0x65, 0x6c, 0x4a, 0x6f, 0x69, 0x6e,
	0x10, 0x02, 0x3a, 0x47, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x6c, 0x12, 0x20, 0x2e, 0x54, 0x53, 0x53,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x18, 0xc8, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x6c, 0x3a, 0x4d, 0x0a, 0x06, 0x73,
	0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x20, 0x2e, 0x54, 0x53, 0x53, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x06, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x2f,
	0x6b, 0x70, 0x62,
}

var (
	file_TSDArchives_proto_rawDescOnce sync.Once
	file_TSDArchives_proto_rawDescData = file_TSDArchives_proto_rawDesc
)

func file_TSDArchives_proto_rawDescGZIP() []byte {
	file_TSDArchives_proto_rawDescOnce.Do(func() {
		file_TSDArchives_proto_rawDescData = protoimpl.X.CompressGZIP(file_TSDArchives_proto_rawDescData)
	})
	return file_TSDArchives_proto_rawDescData
}

var file_TSDArchives_proto_enumTypes = make([]protoimpl.EnumInfo, 14)
var file_TSDArchives_proto_msgTypes = make([]protoimpl.MessageInfo, 80)
var file_TSDArchives_proto_goTypes = []interface{}{
	(LineJoin)(0), // 0: TSD.LineJoin
	(PointPathSourceArchive_PointPathSourceType)(0),                   // 1: TSD.PointPathSourceArchive.PointPathSourceType
	(ScalarPathSourceArchive_ScalarPathSourceType)(0),                 // 2: TSD.ScalarPathSourceArchive.ScalarPathSourceType
	(ConnectionLinePathSourceArchive_ConnectionLinePathSourceType)(0), // 3: TSD.ConnectionLinePathSourceArchive.ConnectionLinePathSourceType
	(EditableBezierPathSourceArchive_NodeType)(0),                     // 4: TSD.EditableBezierPathSourceArchive.NodeType
	(GradientArchive_GradientType)(0),                                 // 5: TSD.GradientArchive.GradientType
	(ImageFillArchive_ImageFillTechnique)(0),                          // 6: TSD.ImageFillArchive.ImageFillTechnique
	(StrokePatternArchive_StrokePatternType)(0),                       // 7: TSD.StrokePatternArchive.StrokePatternType
	(StrokeArchive_LineCap)(0),                                        // 8: TSD.StrokeArchive.LineCap
	(ShadowArchive_ShadowType)(0),                                     // 9: TSD.ShadowArchive.ShadowType
	(MovieArchive_MovieLoopOption)(0),                                 // 10: TSD.MovieArchive.MovieLoopOption
	(FreehandDrawingToolkitUIState_FreehandDrawingToolType)(0),        // 11: TSD.FreehandDrawingToolkitUIState.FreehandDrawingToolType
	(GuideArchive_GuideType)(0),                                       // 12: TSD.GuideArchive.GuideType
	(UserDefinedGuideArchive_GuideType)(0),                            // 13: TSD.UserDefinedGuideArchive.GuideType
	(*EdgeInsetsArchive)(nil),                                         // 14: TSD.EdgeInsetsArchive
	(*GeometryArchive)(nil),                                           // 15: TSD.GeometryArchive
	(*PointPathSourceArchive)(nil),                                    // 16: TSD.PointPathSourceArchive
	(*ScalarPathSourceArchive)(nil),                                   // 17: TSD.ScalarPathSourceArchive
	(*BezierPathSourceArchive)(nil),                                   // 18: TSD.BezierPathSourceArchive
	(*CalloutPathSourceArchive)(nil),                                  // 19: TSD.CalloutPathSourceArchive
	(*ConnectionLinePathSourceArchive)(nil),                           // 20: TSD.ConnectionLinePathSourceArchive
	(*EditableBezierPathSourceArchive)(nil),                           // 21: TSD.EditableBezierPathSourceArchive
	(*PathSourceArchive)(nil),                                         // 22: TSD.PathSourceArchive
	(*AngleGradientArchive)(nil),                                      // 23: TSD.AngleGradientArchive
	(*TransformGradientArchive)(nil),                                  // 24: TSD.TransformGradientArchive
	(*GradientArchive)(nil),                                           // 25: TSD.GradientArchive
	(*ImageFillArchive)(nil),                                          // 26: TSD.ImageFillArchive
	(*FillArchive)(nil),                                               // 27: TSD.FillArchive
	(*StrokePatternArchive)(nil),                                      // 28: TSD.StrokePatternArchive
	(*StrokeArchive)(nil),                                             // 29: TSD.StrokeArchive
	(*SmartStrokeArchive)(nil),                                        // 30: TSD.SmartStrokeArchive
	(*FrameArchive)(nil),                                              // 31: TSD.FrameArchive
	(*PatternedStrokeArchive)(nil),                                    // 32: TSD.PatternedStrokeArchive
	(*LineEndArchive)(nil),                                            // 33: TSD.LineEndArchive
	(*ShadowArchive)(nil),                                             // 34: TSD.ShadowArchive
	(*DropShadowArchive)(nil),                                         // 35: TSD.DropShadowArchive
	(*ContactShadowArchive)(nil),                                      // 36: TSD.ContactShadowArchive
	(*CurvedShadowArchive)(nil),                                       // 37: TSD.CurvedShadowArchive
	(*ReflectionArchive)(nil),                                         // 38: TSD.ReflectionArchive
	(*ImageAdjustmentsArchive)(nil),                                   // 39: TSD.ImageAdjustmentsArchive
	(*ShapeStylePropertiesArchive)(nil),                               // 40: TSD.ShapeStylePropertiesArchive
	(*ShapeStyleArchive)(nil),                                         // 41: TSD.ShapeStyleArchive
	(*MediaStylePropertiesArchive)(nil),                               // 42: TSD.MediaStylePropertiesArchive
	(*MediaStyleArchive)(nil),                                         // 43: TSD.MediaStyleArchive
	(*TSDThemePresetsArchive)(nil),                                    // 44: TSD.TSDThemePresetsArchive
	(*ThemeReplaceFillPresetCommandArchive)(nil),                      // 45: TSD.ThemeReplaceFillPresetCommandArchive
	(*DrawableArchive)(nil),                                           // 46: TSD.DrawableArchive
	(*ContainerArchive)(nil),                                          // 47: TSD.ContainerArchive
	(*GroupArchive)(nil),                                              // 48: TSD.GroupArchive
	(*FreehandDrawingAnimationArchive)(nil),                           // 49: TSD.FreehandDrawingAnimationArchive
	(*FreehandDrawingArchive)(nil),                                    // 50: TSD.FreehandDrawingArchive
	(*ShapeArchive)(nil),                                              // 51: TSD.ShapeArchive
	(*ConnectionLineArchive)(nil),                                     // 52: TSD.ConnectionLineArchive
	(*ImageArchive)(nil),                                              // 53: TSD.ImageArchive
	(*MaskArchive)(nil),                                               // 54: TSD.MaskArchive
	(*ImageDataAttributes)(nil),                                       // 55: TSD.ImageDataAttributes
	(*MovieArchive)(nil),                                              // 56: TSD.MovieArchive
	(*ExteriorTextWrapArchive)(nil),                                   // 57: TSD.ExteriorTextWrapArchive
	(*DrawableContentDescription)(nil),                                // 58: TSD.DrawableContentDescription
	(*FreehandDrawingContentDescription)(nil),                         // 59: TSD.FreehandDrawingContentDescription
	(*FreehandDrawingToolkitUIState)(nil),                             // 60: TSD.FreehandDrawingToolkitUIState
	(*StandinCaptionArchive)(nil),                                     // 61: TSD.StandinCaptionArchive
	(*GuideArchive)(nil),                                              // 62: TSD.GuideArchive
	(*UserDefinedGuideArchive)(nil),                                   // 63: TSD.UserDefinedGuideArchive
	(*GuideStorageArchive)(nil),                                       // 64: TSD.GuideStorageArchive
	(*TSDCanvasSelectionArchive)(nil),                                 // 65: TSD.TSDCanvasSelectionArchive
	(*DrawableSelectionArchive)(nil),                                  // 66: TSD.DrawableSelectionArchive
	(*GroupSelectionArchive)(nil),                                     // 67: TSD.GroupSelectionArchive
	(*PathSelectionArchive)(nil),                                      // 68: TSD.PathSelectionArchive
	(*InfoHyperlinkSelectionArchive)(nil),                             // 69: TSD.InfoHyperlinkSelectionArchive
	(*CommentStorageArchive)(nil),                                     // 70: TSD.CommentStorageArchive
	(*ReplaceAnnotationAuthorCommandArchive)(nil),                     // 71: TSD.ReplaceAnnotationAuthorCommandArchive
	(*PencilAnnotationArchive)(nil),                                   // 72: TSD.PencilAnnotationArchive
	(*PencilAnnotationSelectionArchive)(nil),                          // 73: TSD.PencilAnnotationSelectionArchive
	(*PencilAnnotationStorageArchive)(nil),                            // 74: TSD.PencilAnnotationStorageArchive
	(*SpecColorFillSetColorArchive)(nil),                              // 75: TSD.SpecColorFillSetColorArchive
	(*SpecFrameSetAssetScaleArchive)(nil),                             // 76: TSD.SpecFrameSetAssetScaleArchive
	(*SpecGradientFillSetAngleArchive)(nil),                           // 77: TSD.SpecGradientFillSetAngleArchive
	(*SpecImageFillSetTechniqueArchive)(nil),                          // 78: TSD.SpecImageFillSetTechniqueArchive
	(*SpecReflectionSetOpacityArchive)(nil),                           // 79: TSD.SpecReflectionSetOpacityArchive
	(*SpecShadowSetAngleArchive)(nil),                                 // 80: TSD.SpecShadowSetAngleArchive
	(*SpecShadowSetColorArchive)(nil),                                 // 81: TSD.SpecShadowSetColorArchive
	(*SpecShadowSetOffsetArchive)(nil),                                // 82: TSD.SpecShadowSetOffsetArchive
	(*SpecShadowSetOpacityArchive)(nil),                               // 83: TSD.SpecShadowSetOpacityArchive
	(*SpecShadowSetRadiusArchive)(nil),                                // 84: TSD.SpecShadowSetRadiusArchive
	(*SpecStrokeSetColorArchive)(nil),                                 // 85: TSD.SpecStrokeSetColorArchive
	(*SpecStrokeSetPatternArchive)(nil),                               // 86: TSD.SpecStrokeSetPatternArchive
	(*SpecStrokeSetWidthArchive)(nil),                                 // 87: TSD.SpecStrokeSetWidthArchive
	(*Attribution)(nil),                                               // 88: TSD.Attribution
	(*MovieFingerprint)(nil),                                          // 89: TSD.MovieFingerprint
	(*MovieFingerprintTrack)(nil),                                     // 90: TSD.MovieFingerprintTrack
	(*EditableBezierPathSourceArchive_Node)(nil),                      // 91: TSD.EditableBezierPathSourceArchive.Node
	(*EditableBezierPathSourceArchive_Subpath)(nil),                   // 92: TSD.EditableBezierPathSourceArchive.Subpath
	(*GradientArchive_GradientStop)(nil),                              // 93: TSD.GradientArchive.GradientStop
	(*Point)(nil),                                                     // 94: TSP.Point
	(*Size)(nil),                                                      // 95: TSP.Size
	(*Path)(nil),                                                      // 96: TSP.Path
	(*DataReference)(nil),                                             // 97: TSP.DataReference
	(*Color)(nil),                                                     // 98: TSP.Color
	(*Reference)(nil),                                                 // 99: TSP.Reference
	(*ReferenceDictionary)(nil),                                       // 100: TSP.ReferenceDictionary
	(*StyleArchive)(nil),                                              // 101: TSS.StyleArchive
	(*CommandArchive)(nil),                                            // 102: TSK.CommandArchive
	(*UUID)(nil),                                                      // 103: TSP.UUID
	(*Date)(nil),                                                      // 104: TSP.Date
	(*CommandPropertyEntryArchive)(nil),                               // 105: TSS.CommandPropertyEntryArchive
	(*TSSThemeArchive)(nil),                                           // 106: TSS.TSSThemeArchive
	(*DataAttributes)(nil),                                            // 107: TSP.DataAttributes
}
var file_TSDArchives_proto_depIdxs = []int32{
	94,  // 0: TSD.GeometryArchive.position:type_name -> TSP.Point
	95,  // 1: TSD.GeometryArchive.size:type_name -> TSP.Size
	1,   // 2: TSD.PointPathSourceArchive.type:type_name -> TSD.PointPathSourceArchive.PointPathSourceType
	94,  // 3: TSD.PointPathSourceArchive.point:type_name -> TSP.Point
	95,  // 4: TSD.PointPathSourceArchive.naturalSize:type_name -> TSP.Size
	2,   // 5: TSD.ScalarPathSourceArchive.type:type_name -> TSD.ScalarPathSourceArchive.ScalarPathSourceType
	95,  // 6: TSD.ScalarPathSourceArchive.naturalSize:type_name -> TSP.Size
	95,  // 7: TSD.BezierPathSourceArchive.naturalSize:type_name -> TSP.Size
	96,  // 8: TSD.BezierPathSourceArchive.path:type_name -> TSP.Path
	95,  // 9: TSD.CalloutPathSourceArchive.natural_size:type_name -> TSP.Size
	94,  // 10: TSD.CalloutPathSourceArchive.tail_position:type_name -> TSP.Point
	18,  // 11: TSD.ConnectionLinePathSourceArchive.super:type_name -> TSD.BezierPathSourceArchive
	3,   // 12: TSD.ConnectionLinePathSourceArchive.type:type_name -> TSD.ConnectionLinePathSourceArchive.ConnectionLinePathSourceType
	92,  // 13: TSD.EditableBezierPathSourceArchive.subpaths:type_name -> TSD.EditableBezierPathSourceArchive.Subpath
	95,  // 14: TSD.EditableBezierPathSourceArchive.naturalSize:type_name -> TSP.Size
	16,  // 15: TSD.PathSourceArchive.point_path_source:type_name -> TSD.PointPathSourceArchive
	17,  // 16: TSD.PathSourceArchive.scalar_path_source:type_name -> TSD.ScalarPathSourceArchive
	18,  // 17: TSD.PathSourceArchive.bezier_path_source:type_name -> TSD.BezierPathSourceArchive
	19,  // 18: TSD.PathSourceArchive.callout_path_source:type_name -> TSD.CalloutPathSourceArchive
	20,  // 19: TSD.PathSourceArchive.connection_line_path_source:type_name -> TSD.ConnectionLinePathSourceArchive
	21,  // 20: TSD.PathSourceArchive.editable_bezier_path_source:type_name -> TSD.EditableBezierPathSourceArchive
	94,  // 21: TSD.TransformGradientArchive.start:type_name -> TSP.Point
	94,  // 22: TSD.TransformGradientArchive.end:type_name -> TSP.Point
	95,  // 23: TSD.TransformGradientArchive.baseNaturalSize:type_name -> TSP.Size
	5,   // 24: TSD.GradientArchive.type:type_name -> TSD.GradientArchive.GradientType
	93,  // 25: TSD.GradientArchive.stops:type_name -> TSD.GradientArchive.GradientStop
	23,  // 26: TSD.GradientArchive.anglegradient:type_name -> TSD.AngleGradientArchive
	24,  // 27: TSD.GradientArchive.transformgradient:type_name -> TSD.TransformGradientArchive
	97,  // 28: TSD.ImageFillArchive.imagedata:type_name -> TSP.DataReference
	6,   // 29: TSD.ImageFillArchive.technique:type_name -> TSD.ImageFillArchive.ImageFillTechnique
	98,  // 30: TSD.ImageFillArchive.tint:type_name -> TSP.Color
	95,  // 31: TSD.ImageFillArchive.fillsize:type_name -> TSP.Size
	97,  // 32: TSD.ImageFillArchive.originalimagedata:type_name -> TSP.DataReference
	98,  // 33: TSD.ImageFillArchive.referencecolor:type_name -> TSP.Color
	99,  // 34: TSD.ImageFillArchive.database_imagedata:type_name -> TSP.Reference
	99,  // 35: TSD.ImageFillArchive.database_originalimagedata:type_name -> TSP.Reference
	98,  // 36: TSD.FillArchive.color:type_name -> TSP.Color
	25,  // 37: TSD.FillArchive.gradient:type_name -> TSD.GradientArchive
	26,  // 38: TSD.FillArchive.image:type_name -> TSD.ImageFillArchive
	7,   // 39: TSD.StrokePatternArchive.type:type_name -> TSD.StrokePatternArchive.StrokePatternType
	98,  // 40: TSD.StrokeArchive.color:type_name -> TSP.Color
	8,   // 41: TSD.StrokeArchive.cap:type_name -> TSD.StrokeArchive.LineCap
	0,   // 42: TSD.StrokeArchive.join:type_name -> TSD.LineJoin
	28,  // 43: TSD.StrokeArchive.pattern:type_name -> TSD.StrokePatternArchive
	30,  // 44: TSD.StrokeArchive.smart_stroke:type_name -> TSD.SmartStrokeArchive
	31,  // 45: TSD.StrokeArchive.frame:type_name -> TSD.FrameArchive
	32,  // 46: TSD.StrokeArchive.patterned_stroke:type_name -> TSD.PatternedStrokeArchive
	100, // 47: TSD.SmartStrokeArchive.parameterValues:type_name -> TSP.ReferenceDictionary
	96,  // 48: TSD.LineEndArchive.path:type_name -> TSP.Path
	0,   // 49: TSD.LineEndArchive.line_join:type_name -> TSD.LineJoin
	94,  // 50: TSD.LineEndArchive.end_point:type_name -> TSP.Point
	98,  // 51: TSD.ShadowArchive.color:type_name -> TSP.Color
	9,   // 52: TSD.ShadowArchive.type:type_name -> TSD.ShadowArchive.ShadowType
	35,  // 53: TSD.ShadowArchive.dropShadow:type_name -> TSD.DropShadowArchive
	36,  // 54: TSD.ShadowArchive.contactShadow:type_name -> TSD.ContactShadowArchive
	37,  // 55: TSD.ShadowArchive.curvedShadow:type_name -> TSD.CurvedShadowArchive
	27,  // 56: TSD.ShapeStylePropertiesArchive.fill:type_name -> TSD.FillArchive
	29,  // 57: TSD.ShapeStylePropertiesArchive.stroke:type_name -> TSD.StrokeArchive
	34,  // 58: TSD.ShapeStylePropertiesArchive.shadow:type_name -> TSD.ShadowArchive
	38,  // 59: TSD.ShapeStylePropertiesArchive.reflection:type_name -> TSD.ReflectionArchive
	33,  // 60: TSD.ShapeStylePropertiesArchive.head_line_end:type_name -> TSD.LineEndArchive
	33,  // 61: TSD.ShapeStylePropertiesArchive.tail_line_end:type_name -> TSD.LineEndArchive
	101, // 62: TSD.ShapeStyleArchive.super:type_name -> TSS.StyleArchive
	40,  // 63: TSD.ShapeStyleArchive.shape_properties:type_name -> TSD.ShapeStylePropertiesArchive
	29,  // 64: TSD.MediaStylePropertiesArchive.stroke:type_name -> TSD.StrokeArchive
	34,  // 65: TSD.MediaStylePropertiesArchive.shadow:type_name -> TSD.ShadowArchive
	38,  // 66: TSD.MediaStylePropertiesArchive.reflection:type_name -> TSD.ReflectionArchive
	101, // 67: TSD.MediaStyleArchive.super:type_name -> TSS.StyleArchive
	42,  // 68: TSD.MediaStyleArchive.media_properties:type_name -> TSD.MediaStylePropertiesArchive
	27,  // 69: TSD.TSDThemePresetsArchive.gradient_fill_presets:type_name -> TSD.FillArchive
	27,  // 70: TSD.TSDThemePresetsArchive.image_fill_presets:type_name -> TSD.FillArchive
	34,  // 71: TSD.TSDThemePresetsArchive.shadow_presets:type_name -> TSD.ShadowArchive
	99,  // 72: TSD.TSDThemePresetsArchive.line_style_presets:type_name -> TSP.Reference
	99,  // 73: TSD.TSDThemePresetsArchive.shape_style_presets:type_name -> TSP.Reference
	99,  // 74: TSD.TSDThemePresetsArchive.textbox_style_presets:type_name -> TSP.Reference
	99,  // 75: TSD.TSDThemePresetsArchive.image_style_presets:type_name -> TSP.Reference
	99,  // 76: TSD.TSDThemePresetsArchive.movie_style_presets:type_name -> TSP.Reference
	99,  // 77: TSD.TSDThemePresetsArchive.drawing_line_style_presets:type_name -> TSP.Reference
	102, // 78: TSD.ThemeReplaceFillPresetCommandArchive.super:type_name -> TSK.CommandArchive
	99,  // 79: TSD.ThemeReplaceFillPresetCommandArchive.theme:type_name -> TSP.Reference
	27,  // 80: TSD.ThemeReplaceFillPresetCommandArchive.fill:type_name -> TSD.FillArchive
	27,  // 81: TSD.ThemeReplaceFillPresetCommandArchive.old_fill:type_name -> TSD.FillArchive
	15,  // 82: TSD.DrawableArchive.geometry:type_name -> TSD.GeometryArchive
	99,  // 83: TSD.DrawableArchive.parent:type_name -> TSP.Reference
	57,  // 84: TSD.DrawableArchive.exterior_text_wrap:type_name -> TSD.ExteriorTextWrapArchive
	99,  // 85: TSD.DrawableArchive.comment:type_name -> TSP.Reference
	99,  // 86: TSD.DrawableArchive.pencil_annotations:type_name -> TSP.Reference
	99,  // 87: TSD.DrawableArchive.title:type_name -> TSP.Reference
	99,  // 88: TSD.DrawableArchive.caption:type_name -> TSP.Reference
	15,  // 89: TSD.ContainerArchive.geometry:type_name -> TSD.GeometryArchive
	99,  // 90: TSD.ContainerArchive.parent:type_name -> TSP.Reference
	99,  // 91: TSD.ContainerArchive.children:type_name -> TSP.Reference
	46,  // 92: TSD.GroupArchive.super:type_name -> TSD.DrawableArchive
	99,  // 93: TSD.GroupArchive.children:type_name -> TSP.Reference
	99,  // 94: TSD.GroupArchive.fake_shape_for_empty_group:type_name -> TSP.Reference
	99,  // 95: TSD.FreehandDrawingArchive.spacer_shape:type_name -> TSP.Reference
	49,  // 96: TSD.FreehandDrawingArchive.animation:type_name -> TSD.FreehandDrawingAnimationArchive
	46,  // 97: TSD.ShapeArchive.super:type_name -> TSD.DrawableArchive
	99,  // 98: TSD.ShapeArchive.style:type_name -> TSP.Reference
	22,  // 99: TSD.ShapeArchive.pathsource:type_name -> TSD.PathSourceArchive
	33,  // 100: TSD.ShapeArchive.head_line_end:type_name -> TSD.LineEndArchive
	33,  // 101: TSD.ShapeArchive.tail_line_end:type_name -> TSD.LineEndArchive
	51,  // 102: TSD.ConnectionLineArchive.super:type_name -> TSD.ShapeArchive
	99,  // 103: TSD.ConnectionLineArchive.connected_from:type_name -> TSP.Reference
	99,  // 104: TSD.ConnectionLineArchive.connected_to:type_name -> TSP.Reference
	103, // 105: TSD.ConnectionLineArchive.connected_to_uuid:type_name -> TSP.UUID
	103, // 106: TSD.ConnectionLineArchive.connected_from_uuid:type_name -> TSP.UUID
	46,  // 107: TSD.ImageArchive.super:type_name -> TSD.DrawableArchive
	97,  // 108: TSD.ImageArchive.data:type_name -> TSP.DataReference
	99,  // 109: TSD.ImageArchive.style:type_name -> TSP.Reference
	95,  // 110: TSD.ImageArchive.originalSize:type_name -> TSP.Size
	99,  // 111: TSD.ImageArchive.mask:type_name -> TSP.Reference
	97,  // 112: TSD.ImageArchive.thumbnailData:type_name -> TSP.DataReference
	97,  // 113: TSD.ImageArchive.originalData:type_name -> TSP.DataReference
	95,  // 114: TSD.ImageArchive.naturalSize:type_name -> TSP.Size
	96,  // 115: TSD.ImageArchive.instantAlphaPath:type_name -> TSP.Path
	39,  // 116: TSD.ImageArchive.imageAdjustments:type_name -> TSD.ImageAdjustmentsArchive
	97,  // 117: TSD.ImageArchive.enhancedImageData:type_name -> TSP.DataReference
	97,  // 118: TSD.ImageArchive.adjustedImageData:type_name -> TSP.DataReference
	97,  // 119: TSD.ImageArchive.thumbnailAdjustedImageData:type_name -> TSP.DataReference
	99,  // 120: TSD.ImageArchive.database_data:type_name -> TSP.Reference
	99,  // 121: TSD.ImageArchive.database_thumbnailData:type_name -> TSP.Reference
	99,  // 122: TSD.ImageArchive.database_originalData:type_name -> TSP.Reference
	96,  // 123: TSD.ImageArchive.traced_path:type_name -> TSP.Path
	88,  // 124: TSD.ImageArchive.attribution:type_name -> TSD.Attribution
	46,  // 125: TSD.MaskArchive.super:type_name -> TSD.DrawableArchive
	22,  // 126: TSD.MaskArchive.pathsource:type_name -> TSD.PathSourceArchive
	95,  // 127: TSD.ImageDataAttributes.pixel_size:type_name -> TSP.Size
	46,  // 128: TSD.MovieArchive.super:type_name -> TSD.DrawableArchive
	97,  // 129: TSD.MovieArchive.movieData:type_name -> TSP.DataReference
	97,  // 130: TSD.MovieArchive.importedAuxiliaryMovieData:type_name -> TSP.DataReference
	10,  // 131: TSD.MovieArchive.loop_option:type_name -> TSD.MovieArchive.MovieLoopOption
	97,  // 132: TSD.MovieArchive.posterImageData:type_name -> TSP.DataReference
	97,  // 133: TSD.MovieArchive.audioOnlyImageData:type_name -> TSP.DataReference
	99,  // 134: TSD.MovieArchive.database_movieData:type_name -> TSP.Reference
	99,  // 135: TSD.MovieArchive.database_posterImageData:type_name -> TSP.Reference
	99,  // 136: TSD.MovieArchive.database_audioOnlyImageData:type_name -> TSP.Reference
	99,  // 137: TSD.MovieArchive.style:type_name -> TSP.Reference
	95,  // 138: TSD.MovieArchive.originalSize:type_name -> TSP.Size
	95,  // 139: TSD.MovieArchive.naturalSize:type_name -> TSP.Size
	88,  // 140: TSD.MovieArchive.attribution:type_name -> TSD.Attribution
	89,  // 141: TSD.MovieArchive.fingerprint:type_name -> TSD.MovieFingerprint
	58,  // 142: TSD.FreehandDrawingContentDescription.super:type_name -> TSD.DrawableContentDescription
	98,  // 143: TSD.FreehandDrawingToolkitUIState.current_color:type_name -> TSP.Color
	11,  // 144: TSD.FreehandDrawingToolkitUIState.most_recent_restorable_tool_type:type_name -> TSD.FreehandDrawingToolkitUIState.FreehandDrawingToolType
	98,  // 145: TSD.FreehandDrawingToolkitUIState.pen_tool_color:type_name -> TSP.Color
	98,  // 146: TSD.FreehandDrawingToolkitUIState.pencil_tool_color:type_name -> TSP.Color
	98,  // 147: TSD.FreehandDrawingToolkitUIState.crayon_tool_color:type_name -> TSP.Color
	98,  // 148: TSD.FreehandDrawingToolkitUIState.fill_tool_color:type_name -> TSP.Color
	12,  // 149: TSD.GuideArchive.type:type_name -> TSD.GuideArchive.GuideType
	13,  // 150: TSD.UserDefinedGuideArchive.type:type_name -> TSD.UserDefinedGuideArchive.GuideType
	63,  // 151: TSD.GuideStorageArchive.userDefinedGuides:type_name -> TSD.UserDefinedGuideArchive
	99,  // 152: TSD.TSDCanvasSelectionArchive.infos:type_name -> TSP.Reference
	99,  // 153: TSD.TSDCanvasSelectionArchive.non_interactive_infos:type_name -> TSP.Reference
	99,  // 154: TSD.TSDCanvasSelectionArchive.container:type_name -> TSP.Reference
	99,  // 155: TSD.DrawableSelectionArchive.infos:type_name -> TSP.Reference
	99,  // 156: TSD.DrawableSelectionArchive.non_interactive_infos:type_name -> TSP.Reference
	66,  // 157: TSD.GroupSelectionArchive.super:type_name -> TSD.DrawableSelectionArchive
	104, // 158: TSD.CommentStorageArchive.creation_date:type_name -> TSP.Date
	99,  // 159: TSD.CommentStorageArchive.author:type_name -> TSP.Reference
	99,  // 160: TSD.CommentStorageArchive.replies:type_name -> TSP.Reference
	102, // 161: TSD.ReplaceAnnotationAuthorCommandArchive.super:type_name -> TSK.CommandArchive
	99,  // 162: TSD.ReplaceAnnotationAuthorCommandArchive.old_annotation_author:type_name -> TSP.Reference
	99,  // 163: TSD.ReplaceAnnotationAuthorCommandArchive.new_annotation_author:type_name -> TSP.Reference
	99,  // 164: TSD.PencilAnnotationArchive.pencil_annotation_storage:type_name -> TSP.Reference
	99,  // 165: TSD.PencilAnnotationSelectionArchive.pencil_annotation:type_name -> TSP.Reference
	94,  // 166: TSD.PencilAnnotationStorageArchive.markup_offset:type_name -> TSP.Point
	97,  // 167: TSD.PencilAnnotationStorageArchive.rasterized_image:type_name -> TSP.DataReference
	97,  // 168: TSD.PencilAnnotationStorageArchive.legacy_encoded_drawing:type_name -> TSP.DataReference
	96,  // 169: TSD.PencilAnnotationStorageArchive.drawing_path:type_name -> TSP.Path
	94,  // 170: TSD.PencilAnnotationStorageArchive.strokes_bounding_box_origin:type_name -> TSP.Point
	95,  // 171: TSD.PencilAnnotationStorageArchive.strokes_bounding_box_size:type_name -> TSP.Size
	95,  // 172: TSD.PencilAnnotationStorageArchive.original_attached_size:type_name -> TSP.Size
	98,  // 173: TSD.PencilAnnotationStorageArchive.pen_color:type_name -> TSP.Color
	99,  // 174: TSD.PencilAnnotationStorageArchive.callout_sub_storages:type_name -> TSP.Reference
	104, // 175: TSD.PencilAnnotationStorageArchive.creation_date:type_name -> TSP.Date
	99,  // 176: TSD.PencilAnnotationStorageArchive.sub_storages:type_name -> TSP.Reference
	97,  // 177: TSD.PencilAnnotationStorageArchive.encoded_drawing:type_name -> TSP.DataReference
	94,  // 178: TSD.PencilAnnotationStorageArchive.stroke_points_frame_origin:type_name -> TSP.Point
	95,  // 179: TSD.PencilAnnotationStorageArchive.stroke_points_frame_size:type_name -> TSP.Size
	94,  // 180: TSD.PencilAnnotationStorageArchive.rendered_frame_origin:type_name -> TSP.Point
	95,  // 181: TSD.PencilAnnotationStorageArchive.rendered_frame_size:type_name -> TSP.Size
	98,  // 182: TSD.SpecColorFillSetColorArchive.color:type_name -> TSP.Color
	98,  // 183: TSD.SpecShadowSetColorArchive.color:type_name -> TSP.Color
	98,  // 184: TSD.SpecStrokeSetColorArchive.color:type_name -> TSP.Color
	98,  // 185: TSD.SpecStrokeSetPatternArchive.color:type_name -> TSP.Color
	28,  // 186: TSD.SpecStrokeSetPatternArchive.pattern:type_name -> TSD.StrokePatternArchive
	90,  // 187: TSD.MovieFingerprint.tracks:type_name -> TSD.MovieFingerprintTrack
	95,  // 188: TSD.MovieFingerprintTrack.natural_size:type_name -> TSP.Size
	94,  // 189: TSD.EditableBezierPathSourceArchive.Node.inControlPoint:type_name -> TSP.Point
	94,  // 190: TSD.EditableBezierPathSourceArchive.Node.nodePoint:type_name -> TSP.Point
	94,  // 191: TSD.EditableBezierPathSourceArchive.Node.outControlPoint:type_name -> TSP.Point
	4,   // 192: TSD.EditableBezierPathSourceArchive.Node.type:type_name -> TSD.EditableBezierPathSourceArchive.NodeType
	91,  // 193: TSD.EditableBezierPathSourceArchive.Subpath.nodes:type_name -> TSD.EditableBezierPathSourceArchive.Node
	98,  // 194: TSD.GradientArchive.GradientStop.color:type_name -> TSP.Color
	105, // 195: TSD.fill:extendee -> TSS.CommandPropertyEntryArchive
	105, // 196: TSD.stroke:extendee -> TSS.CommandPropertyEntryArchive
	106, // 197: TSD.TSDThemePresetsArchive.extension:extendee -> TSS.TSSThemeArchive
	48,  // 198: TSD.FreehandDrawingArchive.freehand_drawing_archive:extendee -> TSD.GroupArchive
	107, // 199: TSD.ImageDataAttributes.image_data_attributes:extendee -> TSP.DataAttributes
	27,  // 200: TSD.fill:type_name -> TSD.FillArchive
	29,  // 201: TSD.stroke:type_name -> TSD.StrokeArchive
	44,  // 202: TSD.TSDThemePresetsArchive.extension:type_name -> TSD.TSDThemePresetsArchive
	50,  // 203: TSD.FreehandDrawingArchive.freehand_drawing_archive:type_name -> TSD.FreehandDrawingArchive
	55,  // 204: TSD.ImageDataAttributes.image_data_attributes:type_name -> TSD.ImageDataAttributes
	205, // [205:205] is the sub-list for method output_type
	205, // [205:205] is the sub-list for method input_type
	200, // [200:205] is the sub-list for extension type_name
	195, // [195:200] is the sub-list for extension extendee
	0,   // [0:195] is the sub-list for field type_name
}

func init() { file_TSDArchives_proto_init() }
func file_TSDArchives_proto_init() {
	if File_TSDArchives_proto != nil {
		return
	}
	file_TSPMessages_proto_init()
	file_TSKArchives_proto_init()
	file_TSSArchives_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_TSDArchives_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgeInsetsArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeometryArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PointPathSourceArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScalarPathSourceArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BezierPathSourceArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalloutPathSourceArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionLinePathSourceArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditableBezierPathSourceArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PathSourceArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AngleGradientArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransformGradientArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GradientArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageFillArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FillArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StrokePatternArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StrokeArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmartStrokeArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FrameArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternedStrokeArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LineEndArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShadowArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropShadowArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactShadowArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurvedShadowArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReflectionArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageAdjustmentsArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShapeStylePropertiesArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShapeStyleArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaStylePropertiesArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaStyleArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSDThemePresetsArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThemeReplaceFillPresetCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrawableArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FreehandDrawingAnimationArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FreehandDrawingArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShapeArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionLineArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaskArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageDataAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MovieArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExteriorTextWrapArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrawableContentDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FreehandDrawingContentDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FreehandDrawingToolkitUIState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StandinCaptionArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuideArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDefinedGuideArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuideStorageArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSDCanvasSelectionArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrawableSelectionArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupSelectionArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PathSelectionArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfoHyperlinkSelectionArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommentStorageArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplaceAnnotationAuthorCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PencilAnnotationArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PencilAnnotationSelectionArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PencilAnnotationStorageArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecColorFillSetColorArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecFrameSetAssetScaleArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecGradientFillSetAngleArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecImageFillSetTechniqueArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecReflectionSetOpacityArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecShadowSetAngleArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecShadowSetColorArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecShadowSetOffsetArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecShadowSetOpacityArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecShadowSetRadiusArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecStrokeSetColorArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecStrokeSetPatternArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecStrokeSetWidthArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Attribution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MovieFingerprint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MovieFingerprintTrack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditableBezierPathSourceArchive_Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditableBezierPathSourceArchive_Subpath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GradientArchive_GradientStop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_TSDArchives_proto_rawDesc,
			NumEnums:      14,
			NumMessages:   80,
			NumExtensions: 5,
			NumServices:   0,
		},
		GoTypes:           file_TSDArchives_proto_goTypes,
		DependencyIndexes: file_TSDArchives_proto_depIdxs,
		EnumInfos:         file_TSDArchives_proto_enumTypes,
		MessageInfos:      file_TSDArchives_proto_msgTypes,
		ExtensionInfos:    file_TSDArchives_proto_extTypes,
	}.Build()
	File_TSDArchives_proto = out.File
	file_TSDArchives_proto_rawDesc = nil
	file_TSDArchives_proto_goTypes = nil
	file_TSDArchives_proto_depIdxs = nil
}
