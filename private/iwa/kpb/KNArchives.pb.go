// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: KNArchives.proto

package kpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType int32

const (
	TransitionAttributesArchive_TransitionCustomAttributesTimingCurveTypeLinear        TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType = 1
	TransitionAttributesArchive_TransitionCustomAttributesTimingCurveTypeEaseIn        TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType = 2
	TransitionAttributesArchive_TransitionCustomAttributesTimingCurveTypeEaseOut       TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType = 3
	TransitionAttributesArchive_TransitionCustomAttributesTimingCurveTypeEaseInEaseOut TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType = 4
	TransitionAttributesArchive_TransitionCustomAttributesTimingCurveTypeCustom        TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType = 5
)

// Enum value maps for TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType.
var (
	TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_name = map[int32]string{
		1: "TransitionCustomAttributesTimingCurveTypeLinear",
		2: "TransitionCustomAttributesTimingCurveTypeEaseIn",
		3: "TransitionCustomAttributesTimingCurveTypeEaseOut",
		4: "TransitionCustomAttributesTimingCurveTypeEaseInEaseOut",
		5: "TransitionCustomAttributesTimingCurveTypeCustom",
	}
	TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType_value = map[string]int32{
		"TransitionCustomAttributesTimingCurveTypeLinear":        1,
		"TransitionCustomAttributesTimingCurveTypeEaseIn":        2,
		"TransitionCustomAttributesTimingCurveTypeEaseOut":       3,
		"TransitionCustomAttributesTimingCurveTypeEaseInEaseOut": 4,
		"TransitionCustomAttributesTimingCurveTypeCustom":        5,
	}
)

func (x TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType) Enum() *TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType {
	p := new(TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType)
	*p = x
	return p
}

func (x TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType) Descriptor() protoreflect.EnumDescriptor {
	return file_KNArchives_proto_enumTypes[0].Descriptor()
}

func (TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType) Type() protoreflect.EnumType {
	return &file_KNArchives_proto_enumTypes[0]
}

func (x TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType(num)
	return nil
}

// Deprecated: Use TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType.Descriptor instead.
func (TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType) EnumDescriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{1, 0}
}

type TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType int32

const (
	TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryTypeByObject    TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType = 1
	TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryTypeByWord      TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType = 2
	TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryTypeByCharacter TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType = 3
	TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryTypeByLine      TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType = 4
)

// Enum value maps for TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType.
var (
	TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_name = map[int32]string{
		1: "TransitionCustomAttributesTextDeliveryTypeByObject",
		2: "TransitionCustomAttributesTextDeliveryTypeByWord",
		3: "TransitionCustomAttributesTextDeliveryTypeByCharacter",
		4: "TransitionCustomAttributesTextDeliveryTypeByLine",
	}
	TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType_value = map[string]int32{
		"TransitionCustomAttributesTextDeliveryTypeByObject":    1,
		"TransitionCustomAttributesTextDeliveryTypeByWord":      2,
		"TransitionCustomAttributesTextDeliveryTypeByCharacter": 3,
		"TransitionCustomAttributesTextDeliveryTypeByLine":      4,
	}
)

func (x TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType) Enum() *TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType {
	p := new(TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType)
	*p = x
	return p
}

func (x TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType) Descriptor() protoreflect.EnumDescriptor {
	return file_KNArchives_proto_enumTypes[1].Descriptor()
}

func (TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType) Type() protoreflect.EnumType {
	return &file_KNArchives_proto_enumTypes[1]
}

func (x TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType(num)
	return nil
}

// Deprecated: Use TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType.Descriptor instead.
func (TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType) EnumDescriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{1, 1}
}

type BuildAttributeValueArchive_BuildAttributeValueType int32

const (
	BuildAttributeValueArchive_k_integer     BuildAttributeValueArchive_BuildAttributeValueType = 0
	BuildAttributeValueArchive_k_double      BuildAttributeValueArchive_BuildAttributeValueType = 2
	BuildAttributeValueArchive_k_bool        BuildAttributeValueArchive_BuildAttributeValueType = 3
	BuildAttributeValueArchive_k_string      BuildAttributeValueArchive_BuildAttributeValueType = 4
	BuildAttributeValueArchive_k_path_source BuildAttributeValueArchive_BuildAttributeValueType = 5
	BuildAttributeValueArchive_k_color       BuildAttributeValueArchive_BuildAttributeValueType = 6
)

// Enum value maps for BuildAttributeValueArchive_BuildAttributeValueType.
var (
	BuildAttributeValueArchive_BuildAttributeValueType_name = map[int32]string{
		0: "k_integer",
		2: "k_double",
		3: "k_bool",
		4: "k_string",
		5: "k_path_source",
		6: "k_color",
	}
	BuildAttributeValueArchive_BuildAttributeValueType_value = map[string]int32{
		"k_integer":     0,
		"k_double":      2,
		"k_bool":        3,
		"k_string":      4,
		"k_path_source": 5,
		"k_color":       6,
	}
)

func (x BuildAttributeValueArchive_BuildAttributeValueType) Enum() *BuildAttributeValueArchive_BuildAttributeValueType {
	p := new(BuildAttributeValueArchive_BuildAttributeValueType)
	*p = x
	return p
}

func (x BuildAttributeValueArchive_BuildAttributeValueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BuildAttributeValueArchive_BuildAttributeValueType) Descriptor() protoreflect.EnumDescriptor {
	return file_KNArchives_proto_enumTypes[2].Descriptor()
}

func (BuildAttributeValueArchive_BuildAttributeValueType) Type() protoreflect.EnumType {
	return &file_KNArchives_proto_enumTypes[2]
}

func (x BuildAttributeValueArchive_BuildAttributeValueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BuildAttributeValueArchive_BuildAttributeValueType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BuildAttributeValueArchive_BuildAttributeValueType(num)
	return nil
}

// Deprecated: Use BuildAttributeValueArchive_BuildAttributeValueType.Descriptor instead.
func (BuildAttributeValueArchive_BuildAttributeValueType) EnumDescriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{5, 0}
}

type BuildAttributesArchive_BuildAttributesAcceleration int32

const (
	BuildAttributesArchive_kNone     BuildAttributesArchive_BuildAttributesAcceleration = 0
	BuildAttributesArchive_kEaseIn   BuildAttributesArchive_BuildAttributesAcceleration = 1
	BuildAttributesArchive_kEaseOut  BuildAttributesArchive_BuildAttributesAcceleration = 2
	BuildAttributesArchive_kEaseBoth BuildAttributesArchive_BuildAttributesAcceleration = 3
	BuildAttributesArchive_kCustom   BuildAttributesArchive_BuildAttributesAcceleration = 4
)

// Enum value maps for BuildAttributesArchive_BuildAttributesAcceleration.
var (
	BuildAttributesArchive_BuildAttributesAcceleration_name = map[int32]string{
		0: "kNone",
		1: "kEaseIn",
		2: "kEaseOut",
		3: "kEaseBoth",
		4: "kCustom",
	}
	BuildAttributesArchive_BuildAttributesAcceleration_value = map[string]int32{
		"kNone":     0,
		"kEaseIn":   1,
		"kEaseOut":  2,
		"kEaseBoth": 3,
		"kCustom":   4,
	}
)

func (x BuildAttributesArchive_BuildAttributesAcceleration) Enum() *BuildAttributesArchive_BuildAttributesAcceleration {
	p := new(BuildAttributesArchive_BuildAttributesAcceleration)
	*p = x
	return p
}

func (x BuildAttributesArchive_BuildAttributesAcceleration) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BuildAttributesArchive_BuildAttributesAcceleration) Descriptor() protoreflect.EnumDescriptor {
	return file_KNArchives_proto_enumTypes[3].Descriptor()
}

func (BuildAttributesArchive_BuildAttributesAcceleration) Type() protoreflect.EnumType {
	return &file_KNArchives_proto_enumTypes[3]
}

func (x BuildAttributesArchive_BuildAttributesAcceleration) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BuildAttributesArchive_BuildAttributesAcceleration) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BuildAttributesArchive_BuildAttributesAcceleration(num)
	return nil
}

// Deprecated: Use BuildAttributesArchive_BuildAttributesAcceleration.Descriptor instead.
func (BuildAttributesArchive_BuildAttributesAcceleration) EnumDescriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{7, 0}
}

type BuildAttributesArchive_BuildAttributesRotationDirection int32

const (
	BuildAttributesArchive_kClockwise        BuildAttributesArchive_BuildAttributesRotationDirection = 31
	BuildAttributesArchive_kCounterclockwise BuildAttributesArchive_BuildAttributesRotationDirection = 32
)

// Enum value maps for BuildAttributesArchive_BuildAttributesRotationDirection.
var (
	BuildAttributesArchive_BuildAttributesRotationDirection_name = map[int32]string{
		31: "kClockwise",
		32: "kCounterclockwise",
	}
	BuildAttributesArchive_BuildAttributesRotationDirection_value = map[string]int32{
		"kClockwise":        31,
		"kCounterclockwise": 32,
	}
)

func (x BuildAttributesArchive_BuildAttributesRotationDirection) Enum() *BuildAttributesArchive_BuildAttributesRotationDirection {
	p := new(BuildAttributesArchive_BuildAttributesRotationDirection)
	*p = x
	return p
}

func (x BuildAttributesArchive_BuildAttributesRotationDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BuildAttributesArchive_BuildAttributesRotationDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_KNArchives_proto_enumTypes[4].Descriptor()
}

func (BuildAttributesArchive_BuildAttributesRotationDirection) Type() protoreflect.EnumType {
	return &file_KNArchives_proto_enumTypes[4]
}

func (x BuildAttributesArchive_BuildAttributesRotationDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BuildAttributesArchive_BuildAttributesRotationDirection) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BuildAttributesArchive_BuildAttributesRotationDirection(num)
	return nil
}

// Deprecated: Use BuildAttributesArchive_BuildAttributesRotationDirection.Descriptor instead.
func (BuildAttributesArchive_BuildAttributesRotationDirection) EnumDescriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{7, 1}
}

type BuildAttributesArchive_BuildAttributesCurveStyle int32

const (
	BuildAttributesArchive_kStraight BuildAttributesArchive_BuildAttributesCurveStyle = 0
	BuildAttributesArchive_kCurved   BuildAttributesArchive_BuildAttributesCurveStyle = 1
)

// Enum value maps for BuildAttributesArchive_BuildAttributesCurveStyle.
var (
	BuildAttributesArchive_BuildAttributesCurveStyle_name = map[int32]string{
		0: "kStraight",
		1: "kCurved",
	}
	BuildAttributesArchive_BuildAttributesCurveStyle_value = map[string]int32{
		"kStraight": 0,
		"kCurved":   1,
	}
)

func (x BuildAttributesArchive_BuildAttributesCurveStyle) Enum() *BuildAttributesArchive_BuildAttributesCurveStyle {
	p := new(BuildAttributesArchive_BuildAttributesCurveStyle)
	*p = x
	return p
}

func (x BuildAttributesArchive_BuildAttributesCurveStyle) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BuildAttributesArchive_BuildAttributesCurveStyle) Descriptor() protoreflect.EnumDescriptor {
	return file_KNArchives_proto_enumTypes[5].Descriptor()
}

func (BuildAttributesArchive_BuildAttributesCurveStyle) Type() protoreflect.EnumType {
	return &file_KNArchives_proto_enumTypes[5]
}

func (x BuildAttributesArchive_BuildAttributesCurveStyle) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BuildAttributesArchive_BuildAttributesCurveStyle) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BuildAttributesArchive_BuildAttributesCurveStyle(num)
	return nil
}

// Deprecated: Use BuildAttributesArchive_BuildAttributesCurveStyle.Descriptor instead.
func (BuildAttributesArchive_BuildAttributesCurveStyle) EnumDescriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{7, 2}
}

type BuildAttributesArchive_BuildAttributesTextDelivery int32

const (
	BuildAttributesArchive_kTextDeliveryUndefined   BuildAttributesArchive_BuildAttributesTextDelivery = 0
	BuildAttributesArchive_kTextDeliveryByObject    BuildAttributesArchive_BuildAttributesTextDelivery = 1
	BuildAttributesArchive_kTextDeliveryByWord      BuildAttributesArchive_BuildAttributesTextDelivery = 2
	BuildAttributesArchive_kTextDeliveryByCharacter BuildAttributesArchive_BuildAttributesTextDelivery = 3
	BuildAttributesArchive_kTextDeliveryByLine      BuildAttributesArchive_BuildAttributesTextDelivery = 4
)

// Enum value maps for BuildAttributesArchive_BuildAttributesTextDelivery.
var (
	BuildAttributesArchive_BuildAttributesTextDelivery_name = map[int32]string{
		0: "kTextDeliveryUndefined",
		1: "kTextDeliveryByObject",
		2: "kTextDeliveryByWord",
		3: "kTextDeliveryByCharacter",
		4: "kTextDeliveryByLine",
	}
	BuildAttributesArchive_BuildAttributesTextDelivery_value = map[string]int32{
		"kTextDeliveryUndefined":   0,
		"kTextDeliveryByObject":    1,
		"kTextDeliveryByWord":      2,
		"kTextDeliveryByCharacter": 3,
		"kTextDeliveryByLine":      4,
	}
)

func (x BuildAttributesArchive_BuildAttributesTextDelivery) Enum() *BuildAttributesArchive_BuildAttributesTextDelivery {
	p := new(BuildAttributesArchive_BuildAttributesTextDelivery)
	*p = x
	return p
}

func (x BuildAttributesArchive_BuildAttributesTextDelivery) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BuildAttributesArchive_BuildAttributesTextDelivery) Descriptor() protoreflect.EnumDescriptor {
	return file_KNArchives_proto_enumTypes[6].Descriptor()
}

func (BuildAttributesArchive_BuildAttributesTextDelivery) Type() protoreflect.EnumType {
	return &file_KNArchives_proto_enumTypes[6]
}

func (x BuildAttributesArchive_BuildAttributesTextDelivery) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BuildAttributesArchive_BuildAttributesTextDelivery) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BuildAttributesArchive_BuildAttributesTextDelivery(num)
	return nil
}

// Deprecated: Use BuildAttributesArchive_BuildAttributesTextDelivery.Descriptor instead.
func (BuildAttributesArchive_BuildAttributesTextDelivery) EnumDescriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{7, 3}
}

type BuildAttributesArchive_BuildAttributesDeliveryOption int32

const (
	BuildAttributesArchive_kDeliveryOptionUndefined  BuildAttributesArchive_BuildAttributesDeliveryOption = 0
	BuildAttributesArchive_kDeliveryOptionForward    BuildAttributesArchive_BuildAttributesDeliveryOption = 1
	BuildAttributesArchive_kDeliveryOptionBackward   BuildAttributesArchive_BuildAttributesDeliveryOption = 2
	BuildAttributesArchive_kDeliveryOptionFromCenter BuildAttributesArchive_BuildAttributesDeliveryOption = 3
	BuildAttributesArchive_kDeliveryOptionFromEdges  BuildAttributesArchive_BuildAttributesDeliveryOption = 4
	BuildAttributesArchive_kDeliveryOptionRandom     BuildAttributesArchive_BuildAttributesDeliveryOption = 5
)

// Enum value maps for BuildAttributesArchive_BuildAttributesDeliveryOption.
var (
	BuildAttributesArchive_BuildAttributesDeliveryOption_name = map[int32]string{
		0: "kDeliveryOptionUndefined",
		1: "kDeliveryOptionForward",
		2: "kDeliveryOptionBackward",
		3: "kDeliveryOptionFromCenter",
		4: "kDeliveryOptionFromEdges",
		5: "kDeliveryOptionRandom",
	}
	BuildAttributesArchive_BuildAttributesDeliveryOption_value = map[string]int32{
		"kDeliveryOptionUndefined":  0,
		"kDeliveryOptionForward":    1,
		"kDeliveryOptionBackward":   2,
		"kDeliveryOptionFromCenter": 3,
		"kDeliveryOptionFromEdges":  4,
		"kDeliveryOptionRandom":     5,
	}
)

func (x BuildAttributesArchive_BuildAttributesDeliveryOption) Enum() *BuildAttributesArchive_BuildAttributesDeliveryOption {
	p := new(BuildAttributesArchive_BuildAttributesDeliveryOption)
	*p = x
	return p
}

func (x BuildAttributesArchive_BuildAttributesDeliveryOption) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BuildAttributesArchive_BuildAttributesDeliveryOption) Descriptor() protoreflect.EnumDescriptor {
	return file_KNArchives_proto_enumTypes[7].Descriptor()
}

func (BuildAttributesArchive_BuildAttributesDeliveryOption) Type() protoreflect.EnumType {
	return &file_KNArchives_proto_enumTypes[7]
}

func (x BuildAttributesArchive_BuildAttributesDeliveryOption) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BuildAttributesArchive_BuildAttributesDeliveryOption) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BuildAttributesArchive_BuildAttributesDeliveryOption(num)
	return nil
}

// Deprecated: Use BuildAttributesArchive_BuildAttributesDeliveryOption.Descriptor instead.
func (BuildAttributesArchive_BuildAttributesDeliveryOption) EnumDescriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{7, 4}
}

type BuildAttributesArchive_ActionBuildAttributesJiggleIntensity int32

const (
	BuildAttributesArchive_kJiggleIntensitySmall  BuildAttributesArchive_ActionBuildAttributesJiggleIntensity = 0
	BuildAttributesArchive_kJiggleIntensityMedium BuildAttributesArchive_ActionBuildAttributesJiggleIntensity = 1
	BuildAttributesArchive_kJiggleIntensityLarge  BuildAttributesArchive_ActionBuildAttributesJiggleIntensity = 2
)

// Enum value maps for BuildAttributesArchive_ActionBuildAttributesJiggleIntensity.
var (
	BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_name = map[int32]string{
		0: "kJiggleIntensitySmall",
		1: "kJiggleIntensityMedium",
		2: "kJiggleIntensityLarge",
	}
	BuildAttributesArchive_ActionBuildAttributesJiggleIntensity_value = map[string]int32{
		"kJiggleIntensitySmall":  0,
		"kJiggleIntensityMedium": 1,
		"kJiggleIntensityLarge":  2,
	}
)

func (x BuildAttributesArchive_ActionBuildAttributesJiggleIntensity) Enum() *BuildAttributesArchive_ActionBuildAttributesJiggleIntensity {
	p := new(BuildAttributesArchive_ActionBuildAttributesJiggleIntensity)
	*p = x
	return p
}

func (x BuildAttributesArchive_ActionBuildAttributesJiggleIntensity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BuildAttributesArchive_ActionBuildAttributesJiggleIntensity) Descriptor() protoreflect.EnumDescriptor {
	return file_KNArchives_proto_enumTypes[8].Descriptor()
}

func (BuildAttributesArchive_ActionBuildAttributesJiggleIntensity) Type() protoreflect.EnumType {
	return &file_KNArchives_proto_enumTypes[8]
}

func (x BuildAttributesArchive_ActionBuildAttributesJiggleIntensity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BuildAttributesArchive_ActionBuildAttributesJiggleIntensity) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BuildAttributesArchive_ActionBuildAttributesJiggleIntensity(num)
	return nil
}

// Deprecated: Use BuildAttributesArchive_ActionBuildAttributesJiggleIntensity.Descriptor instead.
func (BuildAttributesArchive_ActionBuildAttributesJiggleIntensity) EnumDescriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{7, 5}
}

type PlaceholderArchive_Kind int32

const (
	PlaceholderArchive_kKindPlaceholder            PlaceholderArchive_Kind = 0
	PlaceholderArchive_kKindSlideNumberPlaceholder PlaceholderArchive_Kind = 1
	PlaceholderArchive_kKindTitlePlaceholder       PlaceholderArchive_Kind = 2
	PlaceholderArchive_kKindBodyPlaceholder        PlaceholderArchive_Kind = 3
	PlaceholderArchive_kKindObjectPlaceholder      PlaceholderArchive_Kind = 4
)

// Enum value maps for PlaceholderArchive_Kind.
var (
	PlaceholderArchive_Kind_name = map[int32]string{
		0: "kKindPlaceholder",
		1: "kKindSlideNumberPlaceholder",
		2: "kKindTitlePlaceholder",
		3: "kKindBodyPlaceholder",
		4: "kKindObjectPlaceholder",
	}
	PlaceholderArchive_Kind_value = map[string]int32{
		"kKindPlaceholder":            0,
		"kKindSlideNumberPlaceholder": 1,
		"kKindTitlePlaceholder":       2,
		"kKindBodyPlaceholder":        3,
		"kKindObjectPlaceholder":      4,
	}
)

func (x PlaceholderArchive_Kind) Enum() *PlaceholderArchive_Kind {
	p := new(PlaceholderArchive_Kind)
	*p = x
	return p
}

func (x PlaceholderArchive_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlaceholderArchive_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_KNArchives_proto_enumTypes[9].Descriptor()
}

func (PlaceholderArchive_Kind) Type() protoreflect.EnumType {
	return &file_KNArchives_proto_enumTypes[9]
}

func (x PlaceholderArchive_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PlaceholderArchive_Kind) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PlaceholderArchive_Kind(num)
	return nil
}

// Deprecated: Use PlaceholderArchive_Kind.Descriptor instead.
func (PlaceholderArchive_Kind) EnumDescriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{9, 0}
}

type DesktopUILayoutArchive_SidebarViewMode int32

const (
	DesktopUILayoutArchive_kSidebarViewModeNavigator DesktopUILayoutArchive_SidebarViewMode = 0
	DesktopUILayoutArchive_kSidebarViewModeOutline   DesktopUILayoutArchive_SidebarViewMode = 1
)

// Enum value maps for DesktopUILayoutArchive_SidebarViewMode.
var (
	DesktopUILayoutArchive_SidebarViewMode_name = map[int32]string{
		0: "kSidebarViewModeNavigator",
		1: "kSidebarViewModeOutline",
	}
	DesktopUILayoutArchive_SidebarViewMode_value = map[string]int32{
		"kSidebarViewModeNavigator": 0,
		"kSidebarViewModeOutline":   1,
	}
)

func (x DesktopUILayoutArchive_SidebarViewMode) Enum() *DesktopUILayoutArchive_SidebarViewMode {
	p := new(DesktopUILayoutArchive_SidebarViewMode)
	*p = x
	return p
}

func (x DesktopUILayoutArchive_SidebarViewMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DesktopUILayoutArchive_SidebarViewMode) Descriptor() protoreflect.EnumDescriptor {
	return file_KNArchives_proto_enumTypes[10].Descriptor()
}

func (DesktopUILayoutArchive_SidebarViewMode) Type() protoreflect.EnumType {
	return &file_KNArchives_proto_enumTypes[10]
}

func (x DesktopUILayoutArchive_SidebarViewMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DesktopUILayoutArchive_SidebarViewMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DesktopUILayoutArchive_SidebarViewMode(num)
	return nil
}

// Deprecated: Use DesktopUILayoutArchive_SidebarViewMode.Descriptor instead.
func (DesktopUILayoutArchive_SidebarViewMode) EnumDescriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{15, 0}
}

type DesktopUILayoutArchive_InspectorPaneViewMode int32

const (
	DesktopUILayoutArchive_kInspectorPaneViewModeFormat  DesktopUILayoutArchive_InspectorPaneViewMode = 0
	DesktopUILayoutArchive_kInspectorPaneViewModeAnimate DesktopUILayoutArchive_InspectorPaneViewMode = 1
	DesktopUILayoutArchive_kInspectorPaneViewModeSetup   DesktopUILayoutArchive_InspectorPaneViewMode = 2
)

// Enum value maps for DesktopUILayoutArchive_InspectorPaneViewMode.
var (
	DesktopUILayoutArchive_InspectorPaneViewMode_name = map[int32]string{
		0: "kInspectorPaneViewModeFormat",
		1: "kInspectorPaneViewModeAnimate",
		2: "kInspectorPaneViewModeSetup",
	}
	DesktopUILayoutArchive_InspectorPaneViewMode_value = map[string]int32{
		"kInspectorPaneViewModeFormat":  0,
		"kInspectorPaneViewModeAnimate": 1,
		"kInspectorPaneViewModeSetup":   2,
	}
)

func (x DesktopUILayoutArchive_InspectorPaneViewMode) Enum() *DesktopUILayoutArchive_InspectorPaneViewMode {
	p := new(DesktopUILayoutArchive_InspectorPaneViewMode)
	*p = x
	return p
}

func (x DesktopUILayoutArchive_InspectorPaneViewMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DesktopUILayoutArchive_InspectorPaneViewMode) Descriptor() protoreflect.EnumDescriptor {
	return file_KNArchives_proto_enumTypes[11].Descriptor()
}

func (DesktopUILayoutArchive_InspectorPaneViewMode) Type() protoreflect.EnumType {
	return &file_KNArchives_proto_enumTypes[11]
}

func (x DesktopUILayoutArchive_InspectorPaneViewMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DesktopUILayoutArchive_InspectorPaneViewMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DesktopUILayoutArchive_InspectorPaneViewMode(num)
	return nil
}

// Deprecated: Use DesktopUILayoutArchive_InspectorPaneViewMode.Descriptor instead.
func (DesktopUILayoutArchive_InspectorPaneViewMode) EnumDescriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{15, 1}
}

type IOSSavedPlaybackStateArchive_PresentationType int32

const (
	IOSSavedPlaybackStateArchive_Manual        IOSSavedPlaybackStateArchive_PresentationType = 1
	IOSSavedPlaybackStateArchive_Record        IOSSavedPlaybackStateArchive_PresentationType = 2
	IOSSavedPlaybackStateArchive_PlayRecording IOSSavedPlaybackStateArchive_PresentationType = 3
	IOSSavedPlaybackStateArchive_Rehearse      IOSSavedPlaybackStateArchive_PresentationType = 4
	IOSSavedPlaybackStateArchive_Showcast      IOSSavedPlaybackStateArchive_PresentationType = 5
)

// Enum value maps for IOSSavedPlaybackStateArchive_PresentationType.
var (
	IOSSavedPlaybackStateArchive_PresentationType_name = map[int32]string{
		1: "Manual",
		2: "Record",
		3: "PlayRecording",
		4: "Rehearse",
		5: "Showcast",
	}
	IOSSavedPlaybackStateArchive_PresentationType_value = map[string]int32{
		"Manual":        1,
		"Record":        2,
		"PlayRecording": 3,
		"Rehearse":      4,
		"Showcast":      5,
	}
)

func (x IOSSavedPlaybackStateArchive_PresentationType) Enum() *IOSSavedPlaybackStateArchive_PresentationType {
	p := new(IOSSavedPlaybackStateArchive_PresentationType)
	*p = x
	return p
}

func (x IOSSavedPlaybackStateArchive_PresentationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IOSSavedPlaybackStateArchive_PresentationType) Descriptor() protoreflect.EnumDescriptor {
	return file_KNArchives_proto_enumTypes[12].Descriptor()
}

func (IOSSavedPlaybackStateArchive_PresentationType) Type() protoreflect.EnumType {
	return &file_KNArchives_proto_enumTypes[12]
}

func (x IOSSavedPlaybackStateArchive_PresentationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *IOSSavedPlaybackStateArchive_PresentationType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = IOSSavedPlaybackStateArchive_PresentationType(num)
	return nil
}

// Deprecated: Use IOSSavedPlaybackStateArchive_PresentationType.Descriptor instead.
func (IOSSavedPlaybackStateArchive_PresentationType) EnumDescriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{18, 0}
}

type ShowArchive_KNShowMode int32

const (
	ShowArchive_kKNShowModeNormal         ShowArchive_KNShowMode = 0
	ShowArchive_kKNShowModeAutoPlay       ShowArchive_KNShowMode = 1
	ShowArchive_kKNShowModeHyperlinksOnly ShowArchive_KNShowMode = 2
)

// Enum value maps for ShowArchive_KNShowMode.
var (
	ShowArchive_KNShowMode_name = map[int32]string{
		0: "kKNShowModeNormal",
		1: "kKNShowModeAutoPlay",
		2: "kKNShowModeHyperlinksOnly",
	}
	ShowArchive_KNShowMode_value = map[string]int32{
		"kKNShowModeNormal":         0,
		"kKNShowModeAutoPlay":       1,
		"kKNShowModeHyperlinksOnly": 2,
	}
)

func (x ShowArchive_KNShowMode) Enum() *ShowArchive_KNShowMode {
	p := new(ShowArchive_KNShowMode)
	*p = x
	return p
}

func (x ShowArchive_KNShowMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShowArchive_KNShowMode) Descriptor() protoreflect.EnumDescriptor {
	return file_KNArchives_proto_enumTypes[13].Descriptor()
}

func (ShowArchive_KNShowMode) Type() protoreflect.EnumType {
	return &file_KNArchives_proto_enumTypes[13]
}

func (x ShowArchive_KNShowMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ShowArchive_KNShowMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ShowArchive_KNShowMode(num)
	return nil
}

// Deprecated: Use ShowArchive_KNShowMode.Descriptor instead.
func (ShowArchive_KNShowMode) EnumDescriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{24, 0}
}

type RecordingArchive_RecordingSyncStateEnum int32

const (
	RecordingArchive_kRecordingSyncStateInSyncWithShow    RecordingArchive_RecordingSyncStateEnum = 0
	RecordingArchive_kRecordingSyncStateOutOfSyncWithShow RecordingArchive_RecordingSyncStateEnum = 1
)

// Enum value maps for RecordingArchive_RecordingSyncStateEnum.
var (
	RecordingArchive_RecordingSyncStateEnum_name = map[int32]string{
		0: "kRecordingSyncStateInSyncWithShow",
		1: "kRecordingSyncStateOutOfSyncWithShow",
	}
	RecordingArchive_RecordingSyncStateEnum_value = map[string]int32{
		"kRecordingSyncStateInSyncWithShow":    0,
		"kRecordingSyncStateOutOfSyncWithShow": 1,
	}
)

func (x RecordingArchive_RecordingSyncStateEnum) Enum() *RecordingArchive_RecordingSyncStateEnum {
	p := new(RecordingArchive_RecordingSyncStateEnum)
	*p = x
	return p
}

func (x RecordingArchive_RecordingSyncStateEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecordingArchive_RecordingSyncStateEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_KNArchives_proto_enumTypes[14].Descriptor()
}

func (RecordingArchive_RecordingSyncStateEnum) Type() protoreflect.EnumType {
	return &file_KNArchives_proto_enumTypes[14]
}

func (x RecordingArchive_RecordingSyncStateEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RecordingArchive_RecordingSyncStateEnum) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RecordingArchive_RecordingSyncStateEnum(num)
	return nil
}

// Deprecated: Use RecordingArchive_RecordingSyncStateEnum.Descriptor instead.
func (RecordingArchive_RecordingSyncStateEnum) EnumDescriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{30, 0}
}

type RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase int32

const (
	RecordingNavigationEventArchive_kRecordingNavigationEventAnimationNone  RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase = 0
	RecordingNavigationEventArchive_kRecordingNavigationEventAnimationStart RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase = 1
	RecordingNavigationEventArchive_kRecordingNavigationEventAnimationEnd   RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase = 2
)

// Enum value maps for RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase.
var (
	RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_name = map[int32]string{
		0: "kRecordingNavigationEventAnimationNone",
		1: "kRecordingNavigationEventAnimationStart",
		2: "kRecordingNavigationEventAnimationEnd",
	}
	RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase_value = map[string]int32{
		"kRecordingNavigationEventAnimationNone":  0,
		"kRecordingNavigationEventAnimationStart": 1,
		"kRecordingNavigationEventAnimationEnd":   2,
	}
)

func (x RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase) Enum() *RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase {
	p := new(RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase)
	*p = x
	return p
}

func (x RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase) Descriptor() protoreflect.EnumDescriptor {
	return file_KNArchives_proto_enumTypes[15].Descriptor()
}

func (RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase) Type() protoreflect.EnumType {
	return &file_KNArchives_proto_enumTypes[15]
}

func (x RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase(num)
	return nil
}

// Deprecated: Use RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase.Descriptor instead.
func (RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase) EnumDescriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{35, 0}
}

type RecordingPauseEventArchive_RecordingPauseEventType int32

const (
	RecordingPauseEventArchive_kRecordingPauseEventTypeResume           RecordingPauseEventArchive_RecordingPauseEventType = 0
	RecordingPauseEventArchive_kRecordingPauseEventTypePause            RecordingPauseEventArchive_RecordingPauseEventType = 1
	RecordingPauseEventArchive_kRecordingPauseEventTypeConcealWithBlack RecordingPauseEventArchive_RecordingPauseEventType = 2
	RecordingPauseEventArchive_kRecordingPauseEventTypeConcealWithWhite RecordingPauseEventArchive_RecordingPauseEventType = 3
)

// Enum value maps for RecordingPauseEventArchive_RecordingPauseEventType.
var (
	RecordingPauseEventArchive_RecordingPauseEventType_name = map[int32]string{
		0: "kRecordingPauseEventTypeResume",
		1: "kRecordingPauseEventTypePause",
		2: "kRecordingPauseEventTypeConcealWithBlack",
		3: "kRecordingPauseEventTypeConcealWithWhite",
	}
	RecordingPauseEventArchive_RecordingPauseEventType_value = map[string]int32{
		"kRecordingPauseEventTypeResume":           0,
		"kRecordingPauseEventTypePause":            1,
		"kRecordingPauseEventTypeConcealWithBlack": 2,
		"kRecordingPauseEventTypeConcealWithWhite": 3,
	}
)

func (x RecordingPauseEventArchive_RecordingPauseEventType) Enum() *RecordingPauseEventArchive_RecordingPauseEventType {
	p := new(RecordingPauseEventArchive_RecordingPauseEventType)
	*p = x
	return p
}

func (x RecordingPauseEventArchive_RecordingPauseEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecordingPauseEventArchive_RecordingPauseEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_KNArchives_proto_enumTypes[16].Descriptor()
}

func (RecordingPauseEventArchive_RecordingPauseEventType) Type() protoreflect.EnumType {
	return &file_KNArchives_proto_enumTypes[16]
}

func (x RecordingPauseEventArchive_RecordingPauseEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RecordingPauseEventArchive_RecordingPauseEventType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RecordingPauseEventArchive_RecordingPauseEventType(num)
	return nil
}

// Deprecated: Use RecordingPauseEventArchive_RecordingPauseEventType.Descriptor instead.
func (RecordingPauseEventArchive_RecordingPauseEventType) EnumDescriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{37, 0}
}

type RecordingMovieEventArchive_RecordingMovieEventType int32

const (
	RecordingMovieEventArchive_kRecordingMovieEventNone           RecordingMovieEventArchive_RecordingMovieEventType = 0
	RecordingMovieEventArchive_kRecordingMovieEventSeek           RecordingMovieEventArchive_RecordingMovieEventType = 1
	RecordingMovieEventArchive_kRecordingMovieEventSetRate        RecordingMovieEventArchive_RecordingMovieEventType = 2
	RecordingMovieEventArchive_kRecordingMovieEventStartPlayback  RecordingMovieEventArchive_RecordingMovieEventType = 3
	RecordingMovieEventArchive_kRecordingMovieEventStopPlayback   RecordingMovieEventArchive_RecordingMovieEventType = 4
	RecordingMovieEventArchive_kRecordingMovieEventBeginScrubbing RecordingMovieEventArchive_RecordingMovieEventType = 5
	RecordingMovieEventArchive_kRecordingMovieEventEndScrubbing   RecordingMovieEventArchive_RecordingMovieEventType = 6
)

// Enum value maps for RecordingMovieEventArchive_RecordingMovieEventType.
var (
	RecordingMovieEventArchive_RecordingMovieEventType_name = map[int32]string{
		0: "kRecordingMovieEventNone",
		1: "kRecordingMovieEventSeek",
		2: "kRecordingMovieEventSetRate",
		3: "kRecordingMovieEventStartPlayback",
		4: "kRecordingMovieEventStopPlayback",
		5: "kRecordingMovieEventBeginScrubbing",
		6: "kRecordingMovieEventEndScrubbing",
	}
	RecordingMovieEventArchive_RecordingMovieEventType_value = map[string]int32{
		"kRecordingMovieEventNone":           0,
		"kRecordingMovieEventSeek":           1,
		"kRecordingMovieEventSetRate":        2,
		"kRecordingMovieEventStartPlayback":  3,
		"kRecordingMovieEventStopPlayback":   4,
		"kRecordingMovieEventBeginScrubbing": 5,
		"kRecordingMovieEventEndScrubbing":   6,
	}
)

func (x RecordingMovieEventArchive_RecordingMovieEventType) Enum() *RecordingMovieEventArchive_RecordingMovieEventType {
	p := new(RecordingMovieEventArchive_RecordingMovieEventType)
	*p = x
	return p
}

func (x RecordingMovieEventArchive_RecordingMovieEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecordingMovieEventArchive_RecordingMovieEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_KNArchives_proto_enumTypes[17].Descriptor()
}

func (RecordingMovieEventArchive_RecordingMovieEventType) Type() protoreflect.EnumType {
	return &file_KNArchives_proto_enumTypes[17]
}

func (x RecordingMovieEventArchive_RecordingMovieEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RecordingMovieEventArchive_RecordingMovieEventType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RecordingMovieEventArchive_RecordingMovieEventType(num)
	return nil
}

// Deprecated: Use RecordingMovieEventArchive_RecordingMovieEventType.Descriptor instead.
func (RecordingMovieEventArchive_RecordingMovieEventType) EnumDescriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{38, 0}
}

type Soundtrack_SoundtrackMode int32

const (
	Soundtrack_kKNSoundtrackModePlayOnce  Soundtrack_SoundtrackMode = 0
	Soundtrack_kKNSoundtrackModeLoop      Soundtrack_SoundtrackMode = 1
	Soundtrack_kKNSoundtrackModeDoNotPlay Soundtrack_SoundtrackMode = 2
)

// Enum value maps for Soundtrack_SoundtrackMode.
var (
	Soundtrack_SoundtrackMode_name = map[int32]string{
		0: "kKNSoundtrackModePlayOnce",
		1: "kKNSoundtrackModeLoop",
		2: "kKNSoundtrackModeDoNotPlay",
	}
	Soundtrack_SoundtrackMode_value = map[string]int32{
		"kKNSoundtrackModePlayOnce":  0,
		"kKNSoundtrackModeLoop":      1,
		"kKNSoundtrackModeDoNotPlay": 2,
	}
)

func (x Soundtrack_SoundtrackMode) Enum() *Soundtrack_SoundtrackMode {
	p := new(Soundtrack_SoundtrackMode)
	*p = x
	return p
}

func (x Soundtrack_SoundtrackMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Soundtrack_SoundtrackMode) Descriptor() protoreflect.EnumDescriptor {
	return file_KNArchives_proto_enumTypes[18].Descriptor()
}

func (Soundtrack_SoundtrackMode) Type() protoreflect.EnumType {
	return &file_KNArchives_proto_enumTypes[18]
}

func (x Soundtrack_SoundtrackMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Soundtrack_SoundtrackMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Soundtrack_SoundtrackMode(num)
	return nil
}

// Deprecated: Use Soundtrack_SoundtrackMode.Descriptor instead.
func (Soundtrack_SoundtrackMode) EnumDescriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{41, 0}
}

type MixedIdOperationArgs_ArgsListKind int32

const (
	MixedIdOperationArgs_Add             MixedIdOperationArgs_ArgsListKind = 0
	MixedIdOperationArgs_Remove          MixedIdOperationArgs_ArgsListKind = 1
	MixedIdOperationArgs_ShowPlaceholder MixedIdOperationArgs_ArgsListKind = 2
	MixedIdOperationArgs_HidePlaceholder MixedIdOperationArgs_ArgsListKind = 3
)

// Enum value maps for MixedIdOperationArgs_ArgsListKind.
var (
	MixedIdOperationArgs_ArgsListKind_name = map[int32]string{
		0: "Add",
		1: "Remove",
		2: "ShowPlaceholder",
		3: "HidePlaceholder",
	}
	MixedIdOperationArgs_ArgsListKind_value = map[string]int32{
		"Add":             0,
		"Remove":          1,
		"ShowPlaceholder": 2,
		"HidePlaceholder": 3,
	}
)

func (x MixedIdOperationArgs_ArgsListKind) Enum() *MixedIdOperationArgs_ArgsListKind {
	p := new(MixedIdOperationArgs_ArgsListKind)
	*p = x
	return p
}

func (x MixedIdOperationArgs_ArgsListKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MixedIdOperationArgs_ArgsListKind) Descriptor() protoreflect.EnumDescriptor {
	return file_KNArchives_proto_enumTypes[19].Descriptor()
}

func (MixedIdOperationArgs_ArgsListKind) Type() protoreflect.EnumType {
	return &file_KNArchives_proto_enumTypes[19]
}

func (x MixedIdOperationArgs_ArgsListKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MixedIdOperationArgs_ArgsListKind) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MixedIdOperationArgs_ArgsListKind(num)
	return nil
}

// Deprecated: Use MixedIdOperationArgs_ArgsListKind.Descriptor instead.
func (MixedIdOperationArgs_ArgsListKind) EnumDescriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{45, 0}
}

type LiveVideoCaptureDeviceDescription_Position int32

const (
	LiveVideoCaptureDeviceDescription_Unspecified LiveVideoCaptureDeviceDescription_Position = 0
	LiveVideoCaptureDeviceDescription_Back        LiveVideoCaptureDeviceDescription_Position = 1
	LiveVideoCaptureDeviceDescription_Front       LiveVideoCaptureDeviceDescription_Position = 2
)

// Enum value maps for LiveVideoCaptureDeviceDescription_Position.
var (
	LiveVideoCaptureDeviceDescription_Position_name = map[int32]string{
		0: "Unspecified",
		1: "Back",
		2: "Front",
	}
	LiveVideoCaptureDeviceDescription_Position_value = map[string]int32{
		"Unspecified": 0,
		"Back":        1,
		"Front":       2,
	}
)

func (x LiveVideoCaptureDeviceDescription_Position) Enum() *LiveVideoCaptureDeviceDescription_Position {
	p := new(LiveVideoCaptureDeviceDescription_Position)
	*p = x
	return p
}

func (x LiveVideoCaptureDeviceDescription_Position) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LiveVideoCaptureDeviceDescription_Position) Descriptor() protoreflect.EnumDescriptor {
	return file_KNArchives_proto_enumTypes[20].Descriptor()
}

func (LiveVideoCaptureDeviceDescription_Position) Type() protoreflect.EnumType {
	return &file_KNArchives_proto_enumTypes[20]
}

func (x LiveVideoCaptureDeviceDescription_Position) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *LiveVideoCaptureDeviceDescription_Position) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = LiveVideoCaptureDeviceDescription_Position(num)
	return nil
}

// Deprecated: Use LiveVideoCaptureDeviceDescription_Position.Descriptor instead.
func (LiveVideoCaptureDeviceDescription_Position) EnumDescriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{49, 0}
}

type AnimationAttributesArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnimationType                      *string            `protobuf:"bytes,1,opt,name=animation_type,json=animationType" json:"animation_type,omitempty"`
	Effect                             *string            `protobuf:"bytes,2,opt,name=effect" json:"effect,omitempty"`
	Duration                           *float64           `protobuf:"fixed64,3,opt,name=duration" json:"duration,omitempty"`
	Direction                          *uint32            `protobuf:"varint,4,opt,name=direction" json:"direction,omitempty"`
	Delay                              *float64           `protobuf:"fixed64,5,opt,name=delay" json:"delay,omitempty"`
	IsAutomatic                        *bool              `protobuf:"varint,6,opt,name=is_automatic,json=isAutomatic" json:"is_automatic,omitempty"`
	Color                              *Color             `protobuf:"bytes,7,opt,name=color" json:"color,omitempty"`
	CustomEffectTimingCurve_1          *PathSourceArchive `protobuf:"bytes,8,opt,name=custom_effect_timing_curve_1,json=customEffectTimingCurve1" json:"custom_effect_timing_curve_1,omitempty"`
	CustomEffectTimingCurve_2          *PathSourceArchive `protobuf:"bytes,9,opt,name=custom_effect_timing_curve_2,json=customEffectTimingCurve2" json:"custom_effect_timing_curve_2,omitempty"`
	CustomEffectTimingCurve_3          *PathSourceArchive `protobuf:"bytes,10,opt,name=custom_effect_timing_curve_3,json=customEffectTimingCurve3" json:"custom_effect_timing_curve_3,omitempty"`
	RandomNumberSeed                   *uint32            `protobuf:"varint,11,opt,name=random_number_seed,json=randomNumberSeed" json:"random_number_seed,omitempty"`
	CustomDetail                       *float64           `protobuf:"fixed64,12,opt,name=custom_detail,json=customDetail" json:"custom_detail,omitempty"`
	CustomEffectTimingCurveThemeName_1 *string            `protobuf:"bytes,13,opt,name=custom_effect_timing_curve_theme_name_1,json=customEffectTimingCurveThemeName1" json:"custom_effect_timing_curve_theme_name_1,omitempty"`
	CustomEffectTimingCurveThemeName_2 *string            `protobuf:"bytes,14,opt,name=custom_effect_timing_curve_theme_name_2,json=customEffectTimingCurveThemeName2" json:"custom_effect_timing_curve_theme_name_2,omitempty"`
	CustomEffectTimingCurveThemeName_3 *string            `protobuf:"bytes,15,opt,name=custom_effect_timing_curve_theme_name_3,json=customEffectTimingCurveThemeName3" json:"custom_effect_timing_curve_theme_name_3,omitempty"`
	WritingDirectionIsRtl              *bool              `protobuf:"varint,16,opt,name=writing_direction_is_rtl,json=writingDirectionIsRtl" json:"writing_direction_is_rtl,omitempty"`
}

func (x *AnimationAttributesArchive) Reset() {
	*x = AnimationAttributesArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNArchives_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnimationAttributesArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnimationAttributesArchive) ProtoMessage() {}

func (x *AnimationAttributesArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNArchives_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnimationAttributesArchive.ProtoReflect.Descriptor instead.
func (*AnimationAttributesArchive) Descriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{0}
}

func (x *AnimationAttributesArchive) GetAnimationType() string {
	if x != nil && x.AnimationType != nil {
		return *x.AnimationType
	}
	return ""
}

func (x *AnimationAttributesArchive) GetEffect() string {
	if x != nil && x.Effect != nil {
		return *x.Effect
	}
	return ""
}

func (x *AnimationAttributesArchive) GetDuration() float64 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *AnimationAttributesArchive) GetDirection() uint32 {
	if x != nil && x.Direction != nil {
		return *x.Direction
	}
	return 0
}

func (x *AnimationAttributesArchive) GetDelay() float64 {
	if x != nil && x.Delay != nil {
		return *x.Delay
	}
	return 0
}

func (x *AnimationAttributesArchive) GetIsAutomatic() bool {
	if x != nil && x.IsAutomatic != nil {
		return *x.IsAutomatic
	}
	return false
}

func (x *AnimationAttributesArchive) GetColor() *Color {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *AnimationAttributesArchive) GetCustomEffectTimingCurve_1() *PathSourceArchive {
	if x != nil {
		return x.CustomEffectTimingCurve_1
	}
	return nil
}

func (x *AnimationAttributesArchive) GetCustomEffectTimingCurve_2() *PathSourceArchive {
	if x != nil {
		return x.CustomEffectTimingCurve_2
	}
	return nil
}

func (x *AnimationAttributesArchive) GetCustomEffectTimingCurve_3() *PathSourceArchive {
	if x != nil {
		return x.CustomEffectTimingCurve_3
	}
	return nil
}

func (x *AnimationAttributesArchive) GetRandomNumberSeed() uint32 {
	if x != nil && x.RandomNumberSeed != nil {
		return *x.RandomNumberSeed
	}
	return 0
}

func (x *AnimationAttributesArchive) GetCustomDetail() float64 {
	if x != nil && x.CustomDetail != nil {
		return *x.CustomDetail
	}
	return 0
}

func (x *AnimationAttributesArchive) GetCustomEffectTimingCurveThemeName_1() string {
	if x != nil && x.CustomEffectTimingCurveThemeName_1 != nil {
		return *x.CustomEffectTimingCurveThemeName_1
	}
	return ""
}

func (x *AnimationAttributesArchive) GetCustomEffectTimingCurveThemeName_2() string {
	if x != nil && x.CustomEffectTimingCurveThemeName_2 != nil {
		return *x.CustomEffectTimingCurveThemeName_2
	}
	return ""
}

func (x *AnimationAttributesArchive) GetCustomEffectTimingCurveThemeName_3() string {
	if x != nil && x.CustomEffectTimingCurveThemeName_3 != nil {
		return *x.CustomEffectTimingCurveThemeName_3
	}
	return ""
}

func (x *AnimationAttributesArchive) GetWritingDirectionIsRtl() bool {
	if x != nil && x.WritingDirectionIsRtl != nil {
		return *x.WritingDirectionIsRtl
	}
	return false
}

type TransitionAttributesArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnimationAttributes                 *AnimationAttributesArchive                                             `protobuf:"bytes,8,opt,name=animationAttributes" json:"animationAttributes,omitempty"`
	CustomTwist                         *float32                                                                `protobuf:"fixed32,9,opt,name=custom_twist,json=customTwist" json:"custom_twist,omitempty"`
	CustomMosaicSize                    *uint32                                                                 `protobuf:"varint,10,opt,name=custom_mosaic_size,json=customMosaicSize" json:"custom_mosaic_size,omitempty"`
	CustomMosaicType                    *uint32                                                                 `protobuf:"varint,11,opt,name=custom_mosaic_type,json=customMosaicType" json:"custom_mosaic_type,omitempty"`
	CustomBounce                        *bool                                                                   `protobuf:"varint,12,opt,name=custom_bounce,json=customBounce" json:"custom_bounce,omitempty"`
	CustomMagicMoveFadeUnmatchedObjects *bool                                                                   `protobuf:"varint,13,opt,name=custom_magic_move_fade_unmatched_objects,json=customMagicMoveFadeUnmatchedObjects" json:"custom_magic_move_fade_unmatched_objects,omitempty"`
	CustomTimingCurve                   *TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType  `protobuf:"varint,15,opt,name=custom_timing_curve,json=customTimingCurve,enum=KN.TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType" json:"custom_timing_curve,omitempty"`
	CustomTextDeliveryType              *TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType `protobuf:"varint,16,opt,name=custom_text_delivery_type,json=customTextDeliveryType,enum=KN.TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType" json:"custom_text_delivery_type,omitempty"`
	CustomMotionBlur                    *bool                                                                   `protobuf:"varint,17,opt,name=custom_motion_blur,json=customMotionBlur" json:"custom_motion_blur,omitempty"`
	CustomTravelDistance                *float32                                                                `protobuf:"fixed32,18,opt,name=custom_travel_distance,json=customTravelDistance" json:"custom_travel_distance,omitempty"`
	// Deprecated: Do not use.
	DatabaseAnimationType *string `protobuf:"bytes,1,opt,name=database_animation_type,json=databaseAnimationType" json:"database_animation_type,omitempty"`
	// Deprecated: Do not use.
	DatabaseEffect *string `protobuf:"bytes,2,opt,name=database_effect,json=databaseEffect" json:"database_effect,omitempty"`
	// Deprecated: Do not use.
	DatabaseDuration *float64 `protobuf:"fixed64,3,opt,name=database_duration,json=databaseDuration" json:"database_duration,omitempty"`
	// Deprecated: Do not use.
	DatabaseDirection *uint32 `protobuf:"varint,4,opt,name=database_direction,json=databaseDirection" json:"database_direction,omitempty"`
	// Deprecated: Do not use.
	DatabaseDelay *float32 `protobuf:"fixed32,5,opt,name=database_delay,json=databaseDelay" json:"database_delay,omitempty"`
	// Deprecated: Do not use.
	DatabaseIsAutomatic *bool `protobuf:"varint,6,opt,name=database_is_automatic,json=databaseIsAutomatic" json:"database_is_automatic,omitempty"`
	// Deprecated: Do not use.
	DatabaseColor *Color `protobuf:"bytes,7,opt,name=database_color,json=databaseColor" json:"database_color,omitempty"`
}

func (x *TransitionAttributesArchive) Reset() {
	*x = TransitionAttributesArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNArchives_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransitionAttributesArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransitionAttributesArchive) ProtoMessage() {}

func (x *TransitionAttributesArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNArchives_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransitionAttributesArchive.ProtoReflect.Descriptor instead.
func (*TransitionAttributesArchive) Descriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{1}
}

func (x *TransitionAttributesArchive) GetAnimationAttributes() *AnimationAttributesArchive {
	if x != nil {
		return x.AnimationAttributes
	}
	return nil
}

func (x *TransitionAttributesArchive) GetCustomTwist() float32 {
	if x != nil && x.CustomTwist != nil {
		return *x.CustomTwist
	}
	return 0
}

func (x *TransitionAttributesArchive) GetCustomMosaicSize() uint32 {
	if x != nil && x.CustomMosaicSize != nil {
		return *x.CustomMosaicSize
	}
	return 0
}

func (x *TransitionAttributesArchive) GetCustomMosaicType() uint32 {
	if x != nil && x.CustomMosaicType != nil {
		return *x.CustomMosaicType
	}
	return 0
}

func (x *TransitionAttributesArchive) GetCustomBounce() bool {
	if x != nil && x.CustomBounce != nil {
		return *x.CustomBounce
	}
	return false
}

func (x *TransitionAttributesArchive) GetCustomMagicMoveFadeUnmatchedObjects() bool {
	if x != nil && x.CustomMagicMoveFadeUnmatchedObjects != nil {
		return *x.CustomMagicMoveFadeUnmatchedObjects
	}
	return false
}

func (x *TransitionAttributesArchive) GetCustomTimingCurve() TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType {
	if x != nil && x.CustomTimingCurve != nil {
		return *x.CustomTimingCurve
	}
	return TransitionAttributesArchive_TransitionCustomAttributesTimingCurveTypeLinear
}

func (x *TransitionAttributesArchive) GetCustomTextDeliveryType() TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType {
	if x != nil && x.CustomTextDeliveryType != nil {
		return *x.CustomTextDeliveryType
	}
	return TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryTypeByObject
}

func (x *TransitionAttributesArchive) GetCustomMotionBlur() bool {
	if x != nil && x.CustomMotionBlur != nil {
		return *x.CustomMotionBlur
	}
	return false
}

func (x *TransitionAttributesArchive) GetCustomTravelDistance() float32 {
	if x != nil && x.CustomTravelDistance != nil {
		return *x.CustomTravelDistance
	}
	return 0
}

// Deprecated: Do not use.
func (x *TransitionAttributesArchive) GetDatabaseAnimationType() string {
	if x != nil && x.DatabaseAnimationType != nil {
		return *x.DatabaseAnimationType
	}
	return ""
}

// Deprecated: Do not use.
func (x *TransitionAttributesArchive) GetDatabaseEffect() string {
	if x != nil && x.DatabaseEffect != nil {
		return *x.DatabaseEffect
	}
	return ""
}

// Deprecated: Do not use.
func (x *TransitionAttributesArchive) GetDatabaseDuration() float64 {
	if x != nil && x.DatabaseDuration != nil {
		return *x.DatabaseDuration
	}
	return 0
}

// Deprecated: Do not use.
func (x *TransitionAttributesArchive) GetDatabaseDirection() uint32 {
	if x != nil && x.DatabaseDirection != nil {
		return *x.DatabaseDirection
	}
	return 0
}

// Deprecated: Do not use.
func (x *TransitionAttributesArchive) GetDatabaseDelay() float32 {
	if x != nil && x.DatabaseDelay != nil {
		return *x.DatabaseDelay
	}
	return 0
}

// Deprecated: Do not use.
func (x *TransitionAttributesArchive) GetDatabaseIsAutomatic() bool {
	if x != nil && x.DatabaseIsAutomatic != nil {
		return *x.DatabaseIsAutomatic
	}
	return false
}

// Deprecated: Do not use.
func (x *TransitionAttributesArchive) GetDatabaseColor() *Color {
	if x != nil {
		return x.DatabaseColor
	}
	return nil
}

type TransitionArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attributes *TransitionAttributesArchive `protobuf:"bytes,2,req,name=attributes" json:"attributes,omitempty"`
}

func (x *TransitionArchive) Reset() {
	*x = TransitionArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNArchives_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransitionArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransitionArchive) ProtoMessage() {}

func (x *TransitionArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNArchives_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransitionArchive.ProtoReflect.Descriptor instead.
func (*TransitionArchive) Descriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{2}
}

func (x *TransitionArchive) GetAttributes() *TransitionAttributesArchive {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type BuildChunkArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Build *Reference `protobuf:"bytes,1,opt,name=build" json:"build,omitempty"`
	// Deprecated: Do not use.
	Index                *uint32                      `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
	Delay                *float64                     `protobuf:"fixed64,3,opt,name=delay" json:"delay,omitempty"`
	Duration             *float64                     `protobuf:"fixed64,4,opt,name=duration" json:"duration,omitempty"`
	Automatic            *bool                        `protobuf:"varint,5,opt,name=automatic" json:"automatic,omitempty"`
	Referent             *bool                        `protobuf:"varint,6,opt,name=referent" json:"referent,omitempty"`
	BuildChunkIdentifier *BuildChunkIdentifierArchive `protobuf:"bytes,7,opt,name=build_chunk_identifier,json=buildChunkIdentifier" json:"build_chunk_identifier,omitempty"`
	BuildId              *UUID                        `protobuf:"bytes,8,opt,name=build_id,json=buildId" json:"build_id,omitempty"`
}

func (x *BuildChunkArchive) Reset() {
	*x = BuildChunkArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNArchives_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildChunkArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildChunkArchive) ProtoMessage() {}

func (x *BuildChunkArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNArchives_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildChunkArchive.ProtoReflect.Descriptor instead.
func (*BuildChunkArchive) Descriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{3}
}

func (x *BuildChunkArchive) GetBuild() *Reference {
	if x != nil {
		return x.Build
	}
	return nil
}

// Deprecated: Do not use.
func (x *BuildChunkArchive) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *BuildChunkArchive) GetDelay() float64 {
	if x != nil && x.Delay != nil {
		return *x.Delay
	}
	return 0
}

func (x *BuildChunkArchive) GetDuration() float64 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *BuildChunkArchive) GetAutomatic() bool {
	if x != nil && x.Automatic != nil {
		return *x.Automatic
	}
	return false
}

func (x *BuildChunkArchive) GetReferent() bool {
	if x != nil && x.Referent != nil {
		return *x.Referent
	}
	return false
}

func (x *BuildChunkArchive) GetBuildChunkIdentifier() *BuildChunkIdentifierArchive {
	if x != nil {
		return x.BuildChunkIdentifier
	}
	return nil
}

func (x *BuildChunkArchive) GetBuildId() *UUID {
	if x != nil {
		return x.BuildId
	}
	return nil
}

type BuildChunkIdentifierArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuildId      *UUID  `protobuf:"bytes,1,opt,name=build_id,json=buildId" json:"build_id,omitempty"`
	BuildChunkId *int32 `protobuf:"varint,2,opt,name=build_chunk_id,json=buildChunkId" json:"build_chunk_id,omitempty"`
}

func (x *BuildChunkIdentifierArchive) Reset() {
	*x = BuildChunkIdentifierArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNArchives_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildChunkIdentifierArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildChunkIdentifierArchive) ProtoMessage() {}

func (x *BuildChunkIdentifierArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNArchives_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildChunkIdentifierArchive.ProtoReflect.Descriptor instead.
func (*BuildChunkIdentifierArchive) Descriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{4}
}

func (x *BuildChunkIdentifierArchive) GetBuildId() *UUID {
	if x != nil {
		return x.BuildId
	}
	return nil
}

func (x *BuildChunkIdentifierArchive) GetBuildChunkId() int32 {
	if x != nil && x.BuildChunkId != nil {
		return *x.BuildChunkId
	}
	return 0
}

type BuildAttributeValueArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntegerValue    *uint32                                             `protobuf:"varint,1,opt,name=integer_value,json=integerValue" json:"integer_value,omitempty"`
	DoubleValue     *float64                                            `protobuf:"fixed64,2,opt,name=double_value,json=doubleValue" json:"double_value,omitempty"`
	BoolValue       *bool                                               `protobuf:"varint,3,opt,name=bool_value,json=boolValue" json:"bool_value,omitempty"`
	StringValue     *string                                             `protobuf:"bytes,4,opt,name=string_value,json=stringValue" json:"string_value,omitempty"`
	PathSourceValue *PathSourceArchive                                  `protobuf:"bytes,5,opt,name=path_source_value,json=pathSourceValue" json:"path_source_value,omitempty"`
	ColorValue      *Color                                              `protobuf:"bytes,6,opt,name=color_value,json=colorValue" json:"color_value,omitempty"`
	Type            *BuildAttributeValueArchive_BuildAttributeValueType `protobuf:"varint,7,opt,name=type,enum=KN.BuildAttributeValueArchive_BuildAttributeValueType" json:"type,omitempty"`
}

func (x *BuildAttributeValueArchive) Reset() {
	*x = BuildAttributeValueArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNArchives_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildAttributeValueArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildAttributeValueArchive) ProtoMessage() {}

func (x *BuildAttributeValueArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNArchives_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildAttributeValueArchive.ProtoReflect.Descriptor instead.
func (*BuildAttributeValueArchive) Descriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{5}
}

func (x *BuildAttributeValueArchive) GetIntegerValue() uint32 {
	if x != nil && x.IntegerValue != nil {
		return *x.IntegerValue
	}
	return 0
}

func (x *BuildAttributeValueArchive) GetDoubleValue() float64 {
	if x != nil && x.DoubleValue != nil {
		return *x.DoubleValue
	}
	return 0
}

func (x *BuildAttributeValueArchive) GetBoolValue() bool {
	if x != nil && x.BoolValue != nil {
		return *x.BoolValue
	}
	return false
}

func (x *BuildAttributeValueArchive) GetStringValue() string {
	if x != nil && x.StringValue != nil {
		return *x.StringValue
	}
	return ""
}

func (x *BuildAttributeValueArchive) GetPathSourceValue() *PathSourceArchive {
	if x != nil {
		return x.PathSourceValue
	}
	return nil
}

func (x *BuildAttributeValueArchive) GetColorValue() *Color {
	if x != nil {
		return x.ColorValue
	}
	return nil
}

func (x *BuildAttributeValueArchive) GetType() BuildAttributeValueArchive_BuildAttributeValueType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return BuildAttributeValueArchive_k_integer
}

type BuildAttributeTupleArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Property             *string                      `protobuf:"bytes,1,opt,name=property" json:"property,omitempty"`
	Value                *BuildAttributeValueArchive  `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	BuildId              *UUID                        `protobuf:"bytes,3,opt,name=build_id,json=buildId" json:"build_id,omitempty"`
	BuildChunkIdentifier *BuildChunkIdentifierArchive `protobuf:"bytes,4,opt,name=build_chunk_identifier,json=buildChunkIdentifier" json:"build_chunk_identifier,omitempty"`
}

func (x *BuildAttributeTupleArchive) Reset() {
	*x = BuildAttributeTupleArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNArchives_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildAttributeTupleArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildAttributeTupleArchive) ProtoMessage() {}

func (x *BuildAttributeTupleArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNArchives_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildAttributeTupleArchive.ProtoReflect.Descriptor instead.
func (*BuildAttributeTupleArchive) Descriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{6}
}

func (x *BuildAttributeTupleArchive) GetProperty() string {
	if x != nil && x.Property != nil {
		return *x.Property
	}
	return ""
}

func (x *BuildAttributeTupleArchive) GetValue() *BuildAttributeValueArchive {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *BuildAttributeTupleArchive) GetBuildId() *UUID {
	if x != nil {
		return x.BuildId
	}
	return nil
}

func (x *BuildAttributeTupleArchive) GetBuildChunkIdentifier() *BuildChunkIdentifierArchive {
	if x != nil {
		return x.BuildChunkIdentifier
	}
	return nil
}

type BuildAttributesArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnimationAttributes *AnimationAttributesArchive `protobuf:"bytes,18,opt,name=animationAttributes" json:"animationAttributes,omitempty"`
	EventTrigger        *uint32                     `protobuf:"varint,4,opt,name=eventTrigger" json:"eventTrigger,omitempty"`
	// Deprecated: Do not use.
	DelayAutomaticAfter *float64 `protobuf:"fixed64,6,opt,name=delayAutomaticAfter" json:"delayAutomaticAfter,omitempty"`
	// Deprecated: Do not use.
	DelayAutomaticWith          *float64                                                     `protobuf:"fixed64,7,opt,name=delayAutomaticWith" json:"delayAutomaticWith,omitempty"`
	CurveStyle                  *BuildAttributesArchive_BuildAttributesCurveStyle            `protobuf:"varint,14,opt,name=curveStyle,enum=KN.BuildAttributesArchive_BuildAttributesCurveStyle" json:"curveStyle,omitempty"`
	ChartRotation3D             *float64                                                     `protobuf:"fixed64,17,opt,name=ChartRotation3D" json:"ChartRotation3D,omitempty"`
	StartOffset                 *uint32                                                      `protobuf:"varint,27,opt,name=startOffset" json:"startOffset,omitempty"`
	EndOffset                   *uint32                                                      `protobuf:"varint,28,opt,name=endOffset" json:"endOffset,omitempty"`
	ActionRotationAngle         *float64                                                     `protobuf:"fixed64,9,opt,name=action_rotationAngle,json=actionRotationAngle" json:"action_rotationAngle,omitempty"`
	ActionRotationDirection     *BuildAttributesArchive_BuildAttributesRotationDirection     `protobuf:"varint,10,opt,name=action_rotationDirection,json=actionRotationDirection,enum=KN.BuildAttributesArchive_BuildAttributesRotationDirection" json:"action_rotationDirection,omitempty"`
	ActionScaleSize             *float64                                                     `protobuf:"fixed64,11,opt,name=action_scaleSize,json=actionScaleSize" json:"action_scaleSize,omitempty"`
	ActionColorAlpha            *float64                                                     `protobuf:"fixed64,12,opt,name=action_colorAlpha,json=actionColorAlpha" json:"action_colorAlpha,omitempty"`
	ActionAcceleration          *BuildAttributesArchive_BuildAttributesAcceleration          `protobuf:"varint,13,opt,name=action_acceleration,json=actionAcceleration,enum=KN.BuildAttributesArchive_BuildAttributesAcceleration" json:"action_acceleration,omitempty"`
	ActionMotionPathSource      *PathSourceArchive                                           `protobuf:"bytes,22,opt,name=action_motionPathSource,json=actionMotionPathSource" json:"action_motionPathSource,omitempty"`
	CustomBounce                *bool                                                        `protobuf:"varint,19,opt,name=custom_bounce,json=customBounce" json:"custom_bounce,omitempty"`
	CustomTextDelivery          *BuildAttributesArchive_BuildAttributesTextDelivery          `protobuf:"varint,20,opt,name=custom_textDelivery,json=customTextDelivery,enum=KN.BuildAttributesArchive_BuildAttributesTextDelivery" json:"custom_textDelivery,omitempty"`
	CustomDeliveryOption        *BuildAttributesArchive_BuildAttributesDeliveryOption        `protobuf:"varint,21,opt,name=custom_deliveryOption,json=customDeliveryOption,enum=KN.BuildAttributesArchive_BuildAttributesDeliveryOption" json:"custom_deliveryOption,omitempty"`
	CustomActionDecay           *bool                                                        `protobuf:"varint,23,opt,name=custom_action_decay,json=customActionDecay" json:"custom_action_decay,omitempty"`
	CustomActionRepeatCount     *uint32                                                      `protobuf:"varint,24,opt,name=custom_action_repeatCount,json=customActionRepeatCount" json:"custom_action_repeatCount,omitempty"`
	CustomActionScale           *float64                                                     `protobuf:"fixed64,25,opt,name=custom_action_scale,json=customActionScale" json:"custom_action_scale,omitempty"`
	CustomActionJiggleIntensity *BuildAttributesArchive_ActionBuildAttributesJiggleIntensity `protobuf:"varint,26,opt,name=custom_action_jiggleIntensity,json=customActionJiggleIntensity,enum=KN.BuildAttributesArchive_ActionBuildAttributesJiggleIntensity" json:"custom_action_jiggleIntensity,omitempty"`
	CustomMotionBlur            *bool                                                        `protobuf:"varint,29,opt,name=custom_motion_blur,json=customMotionBlur" json:"custom_motion_blur,omitempty"`
	CustomIncludeEndpoints      *bool                                                        `protobuf:"varint,30,opt,name=custom_include_endpoints,json=customIncludeEndpoints" json:"custom_include_endpoints,omitempty"`
	CustomShine                 *bool                                                        `protobuf:"varint,33,opt,name=custom_shine,json=customShine" json:"custom_shine,omitempty"`
	CustomScaleAmount           *float64                                                     `protobuf:"fixed64,34,opt,name=custom_scale_amount,json=customScaleAmount" json:"custom_scale_amount,omitempty"`
	CustomTravelDistance        *float64                                                     `protobuf:"fixed64,35,opt,name=custom_travel_distance,json=customTravelDistance" json:"custom_travel_distance,omitempty"`
	CustomCursor                *bool                                                        `protobuf:"varint,36,opt,name=custom_cursor,json=customCursor" json:"custom_cursor,omitempty"`
	CustomAlignToPath           *bool                                                        `protobuf:"varint,37,opt,name=custom_align_to_path,json=customAlignToPath" json:"custom_align_to_path,omitempty"`
	// Deprecated: Do not use.
	DatabaseAnimationType *string `protobuf:"bytes,1,opt,name=database_animationType,json=databaseAnimationType" json:"database_animationType,omitempty"`
	// Deprecated: Do not use.
	DatabaseEffect *string `protobuf:"bytes,2,opt,name=database_effect,json=databaseEffect" json:"database_effect,omitempty"`
	// Deprecated: Do not use.
	DatabaseDirection *uint32 `protobuf:"varint,3,opt,name=database_direction,json=databaseDirection" json:"database_direction,omitempty"`
	// Deprecated: Do not use.
	DatabaseDelay *float64 `protobuf:"fixed64,5,opt,name=database_delay,json=databaseDelay" json:"database_delay,omitempty"`
	// Deprecated: Do not use.
	DatabaseDuration *float64 `protobuf:"fixed64,8,opt,name=database_duration,json=databaseDuration" json:"database_duration,omitempty"`
	// Deprecated: Do not use.
	DatabaseColor *Color `protobuf:"bytes,16,opt,name=database_color,json=databaseColor" json:"database_color,omitempty"`
	// Deprecated: Do not use.
	MotionPathString *string `protobuf:"bytes,15,opt,name=motionPathString" json:"motionPathString,omitempty"`
}

func (x *BuildAttributesArchive) Reset() {
	*x = BuildAttributesArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNArchives_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildAttributesArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildAttributesArchive) ProtoMessage() {}

func (x *BuildAttributesArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNArchives_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildAttributesArchive.ProtoReflect.Descriptor instead.
func (*BuildAttributesArchive) Descriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{7}
}

func (x *BuildAttributesArchive) GetAnimationAttributes() *AnimationAttributesArchive {
	if x != nil {
		return x.AnimationAttributes
	}
	return nil
}

func (x *BuildAttributesArchive) GetEventTrigger() uint32 {
	if x != nil && x.EventTrigger != nil {
		return *x.EventTrigger
	}
	return 0
}

// Deprecated: Do not use.
func (x *BuildAttributesArchive) GetDelayAutomaticAfter() float64 {
	if x != nil && x.DelayAutomaticAfter != nil {
		return *x.DelayAutomaticAfter
	}
	return 0
}

// Deprecated: Do not use.
func (x *BuildAttributesArchive) GetDelayAutomaticWith() float64 {
	if x != nil && x.DelayAutomaticWith != nil {
		return *x.DelayAutomaticWith
	}
	return 0
}

func (x *BuildAttributesArchive) GetCurveStyle() BuildAttributesArchive_BuildAttributesCurveStyle {
	if x != nil && x.CurveStyle != nil {
		return *x.CurveStyle
	}
	return BuildAttributesArchive_kStraight
}

func (x *BuildAttributesArchive) GetChartRotation3D() float64 {
	if x != nil && x.ChartRotation3D != nil {
		return *x.ChartRotation3D
	}
	return 0
}

func (x *BuildAttributesArchive) GetStartOffset() uint32 {
	if x != nil && x.StartOffset != nil {
		return *x.StartOffset
	}
	return 0
}

func (x *BuildAttributesArchive) GetEndOffset() uint32 {
	if x != nil && x.EndOffset != nil {
		return *x.EndOffset
	}
	return 0
}

func (x *BuildAttributesArchive) GetActionRotationAngle() float64 {
	if x != nil && x.ActionRotationAngle != nil {
		return *x.ActionRotationAngle
	}
	return 0
}

func (x *BuildAttributesArchive) GetActionRotationDirection() BuildAttributesArchive_BuildAttributesRotationDirection {
	if x != nil && x.ActionRotationDirection != nil {
		return *x.ActionRotationDirection
	}
	return BuildAttributesArchive_kClockwise
}

func (x *BuildAttributesArchive) GetActionScaleSize() float64 {
	if x != nil && x.ActionScaleSize != nil {
		return *x.ActionScaleSize
	}
	return 0
}

func (x *BuildAttributesArchive) GetActionColorAlpha() float64 {
	if x != nil && x.ActionColorAlpha != nil {
		return *x.ActionColorAlpha
	}
	return 0
}

func (x *BuildAttributesArchive) GetActionAcceleration() BuildAttributesArchive_BuildAttributesAcceleration {
	if x != nil && x.ActionAcceleration != nil {
		return *x.ActionAcceleration
	}
	return BuildAttributesArchive_kNone
}

func (x *BuildAttributesArchive) GetActionMotionPathSource() *PathSourceArchive {
	if x != nil {
		return x.ActionMotionPathSource
	}
	return nil
}

func (x *BuildAttributesArchive) GetCustomBounce() bool {
	if x != nil && x.CustomBounce != nil {
		return *x.CustomBounce
	}
	return false
}

func (x *BuildAttributesArchive) GetCustomTextDelivery() BuildAttributesArchive_BuildAttributesTextDelivery {
	if x != nil && x.CustomTextDelivery != nil {
		return *x.CustomTextDelivery
	}
	return BuildAttributesArchive_kTextDeliveryUndefined
}

func (x *BuildAttributesArchive) GetCustomDeliveryOption() BuildAttributesArchive_BuildAttributesDeliveryOption {
	if x != nil && x.CustomDeliveryOption != nil {
		return *x.CustomDeliveryOption
	}
	return BuildAttributesArchive_kDeliveryOptionUndefined
}

func (x *BuildAttributesArchive) GetCustomActionDecay() bool {
	if x != nil && x.CustomActionDecay != nil {
		return *x.CustomActionDecay
	}
	return false
}

func (x *BuildAttributesArchive) GetCustomActionRepeatCount() uint32 {
	if x != nil && x.CustomActionRepeatCount != nil {
		return *x.CustomActionRepeatCount
	}
	return 0
}

func (x *BuildAttributesArchive) GetCustomActionScale() float64 {
	if x != nil && x.CustomActionScale != nil {
		return *x.CustomActionScale
	}
	return 0
}

func (x *BuildAttributesArchive) GetCustomActionJiggleIntensity() BuildAttributesArchive_ActionBuildAttributesJiggleIntensity {
	if x != nil && x.CustomActionJiggleIntensity != nil {
		return *x.CustomActionJiggleIntensity
	}
	return BuildAttributesArchive_kJiggleIntensitySmall
}

func (x *BuildAttributesArchive) GetCustomMotionBlur() bool {
	if x != nil && x.CustomMotionBlur != nil {
		return *x.CustomMotionBlur
	}
	return false
}

func (x *BuildAttributesArchive) GetCustomIncludeEndpoints() bool {
	if x != nil && x.CustomIncludeEndpoints != nil {
		return *x.CustomIncludeEndpoints
	}
	return false
}

func (x *BuildAttributesArchive) GetCustomShine() bool {
	if x != nil && x.CustomShine != nil {
		return *x.CustomShine
	}
	return false
}

func (x *BuildAttributesArchive) GetCustomScaleAmount() float64 {
	if x != nil && x.CustomScaleAmount != nil {
		return *x.CustomScaleAmount
	}
	return 0
}

func (x *BuildAttributesArchive) GetCustomTravelDistance() float64 {
	if x != nil && x.CustomTravelDistance != nil {
		return *x.CustomTravelDistance
	}
	return 0
}

func (x *BuildAttributesArchive) GetCustomCursor() bool {
	if x != nil && x.CustomCursor != nil {
		return *x.CustomCursor
	}
	return false
}

func (x *BuildAttributesArchive) GetCustomAlignToPath() bool {
	if x != nil && x.CustomAlignToPath != nil {
		return *x.CustomAlignToPath
	}
	return false
}

// Deprecated: Do not use.
func (x *BuildAttributesArchive) GetDatabaseAnimationType() string {
	if x != nil && x.DatabaseAnimationType != nil {
		return *x.DatabaseAnimationType
	}
	return ""
}

// Deprecated: Do not use.
func (x *BuildAttributesArchive) GetDatabaseEffect() string {
	if x != nil && x.DatabaseEffect != nil {
		return *x.DatabaseEffect
	}
	return ""
}

// Deprecated: Do not use.
func (x *BuildAttributesArchive) GetDatabaseDirection() uint32 {
	if x != nil && x.DatabaseDirection != nil {
		return *x.DatabaseDirection
	}
	return 0
}

// Deprecated: Do not use.
func (x *BuildAttributesArchive) GetDatabaseDelay() float64 {
	if x != nil && x.DatabaseDelay != nil {
		return *x.DatabaseDelay
	}
	return 0
}

// Deprecated: Do not use.
func (x *BuildAttributesArchive) GetDatabaseDuration() float64 {
	if x != nil && x.DatabaseDuration != nil {
		return *x.DatabaseDuration
	}
	return 0
}

// Deprecated: Do not use.
func (x *BuildAttributesArchive) GetDatabaseColor() *Color {
	if x != nil {
		return x.DatabaseColor
	}
	return nil
}

// Deprecated: Do not use.
func (x *BuildAttributesArchive) GetMotionPathString() string {
	if x != nil && x.MotionPathString != nil {
		return *x.MotionPathString
	}
	return ""
}

type BuildArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Drawable *Reference `protobuf:"bytes,1,opt,name=drawable" json:"drawable,omitempty"`
	Delivery *string    `protobuf:"bytes,2,req,name=delivery" json:"delivery,omitempty"`
	// Deprecated: Do not use.
	Duration    *float64                `protobuf:"fixed64,3,opt,name=duration" json:"duration,omitempty"`
	Attributes  *BuildAttributesArchive `protobuf:"bytes,4,req,name=attributes" json:"attributes,omitempty"`
	ChunkIdSeed *int32                  `protobuf:"varint,5,opt,name=chunk_id_seed,json=chunkIdSeed" json:"chunk_id_seed,omitempty"`
}

func (x *BuildArchive) Reset() {
	*x = BuildArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNArchives_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildArchive) ProtoMessage() {}

func (x *BuildArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNArchives_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildArchive.ProtoReflect.Descriptor instead.
func (*BuildArchive) Descriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{8}
}

func (x *BuildArchive) GetDrawable() *Reference {
	if x != nil {
		return x.Drawable
	}
	return nil
}

func (x *BuildArchive) GetDelivery() string {
	if x != nil && x.Delivery != nil {
		return *x.Delivery
	}
	return ""
}

// Deprecated: Do not use.
func (x *BuildArchive) GetDuration() float64 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *BuildArchive) GetAttributes() *BuildAttributesArchive {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *BuildArchive) GetChunkIdSeed() int32 {
	if x != nil && x.ChunkIdSeed != nil {
		return *x.ChunkIdSeed
	}
	return 0
}

type PlaceholderArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *ShapeInfoArchive        `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Kind  *PlaceholderArchive_Kind `protobuf:"varint,2,opt,name=kind,enum=KN.PlaceholderArchive_Kind,def=0" json:"kind,omitempty"`
}

// Default values for PlaceholderArchive fields.
const (
	Default_PlaceholderArchive_Kind = PlaceholderArchive_kKindPlaceholder
)

func (x *PlaceholderArchive) Reset() {
	*x = PlaceholderArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNArchives_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaceholderArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaceholderArchive) ProtoMessage() {}

func (x *PlaceholderArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNArchives_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaceholderArchive.ProtoReflect.Descriptor instead.
func (*PlaceholderArchive) Descriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{9}
}

func (x *PlaceholderArchive) GetSuper() *ShapeInfoArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *PlaceholderArchive) GetKind() PlaceholderArchive_Kind {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return Default_PlaceholderArchive_Kind
}

type NoteArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainedStorage *Reference `protobuf:"bytes,1,req,name=containedStorage" json:"containedStorage,omitempty"`
}

func (x *NoteArchive) Reset() {
	*x = NoteArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNArchives_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoteArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteArchive) ProtoMessage() {}

func (x *NoteArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNArchives_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteArchive.ProtoReflect.Descriptor instead.
func (*NoteArchive) Descriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{10}
}

func (x *NoteArchive) GetContainedStorage() *Reference {
	if x != nil {
		return x.ContainedStorage
	}
	return nil
}

type ClassicStylesheetRecordArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdentifierToStyleMap []*StylesheetArchive_IdentifiedStyleEntry `protobuf:"bytes,1,rep,name=identifier_to_style_map,json=identifierToStyleMap" json:"identifier_to_style_map,omitempty"`
	// Deprecated: Do not use.
	DeprecatedTheme *Reference `protobuf:"bytes,2,opt,name=deprecated_theme,json=deprecatedTheme" json:"deprecated_theme,omitempty"`
}

func (x *ClassicStylesheetRecordArchive) Reset() {
	*x = ClassicStylesheetRecordArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNArchives_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClassicStylesheetRecordArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClassicStylesheetRecordArchive) ProtoMessage() {}

func (x *ClassicStylesheetRecordArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNArchives_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClassicStylesheetRecordArchive.ProtoReflect.Descriptor instead.
func (*ClassicStylesheetRecordArchive) Descriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{11}
}

func (x *ClassicStylesheetRecordArchive) GetIdentifierToStyleMap() []*StylesheetArchive_IdentifiedStyleEntry {
	if x != nil {
		return x.IdentifierToStyleMap
	}
	return nil
}

// Deprecated: Do not use.
func (x *ClassicStylesheetRecordArchive) GetDeprecatedTheme() *Reference {
	if x != nil {
		return x.DeprecatedTheme
	}
	return nil
}

type ClassicThemeRecordArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid             *string      `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
	StylesheetRecord *Reference   `protobuf:"bytes,2,opt,name=stylesheetRecord" json:"stylesheetRecord,omitempty"`
	Templates        []*Reference `protobuf:"bytes,3,rep,name=templates" json:"templates,omitempty"`
}

func (x *ClassicThemeRecordArchive) Reset() {
	*x = ClassicThemeRecordArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNArchives_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClassicThemeRecordArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClassicThemeRecordArchive) ProtoMessage() {}

func (x *ClassicThemeRecordArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNArchives_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClassicThemeRecordArchive.ProtoReflect.Descriptor instead.
func (*ClassicThemeRecordArchive) Descriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{12}
}

func (x *ClassicThemeRecordArchive) GetUuid() string {
	if x != nil && x.Uuid != nil {
		return *x.Uuid
	}
	return ""
}

func (x *ClassicThemeRecordArchive) GetStylesheetRecord() *Reference {
	if x != nil {
		return x.StylesheetRecord
	}
	return nil
}

func (x *ClassicThemeRecordArchive) GetTemplates() []*Reference {
	if x != nil {
		return x.Templates
	}
	return nil
}

type SlideArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Style  *Reference   `protobuf:"bytes,1,req,name=style" json:"style,omitempty"`
	Builds []*Reference `protobuf:"bytes,2,rep,name=builds" json:"builds,omitempty"`
	// Deprecated: Do not use.
	BuildChunkArchives                                                 []*BuildChunkArchive               `protobuf:"bytes,3,rep,name=buildChunkArchives" json:"buildChunkArchives,omitempty"`
	BuildChunks                                                        []*Reference                       `protobuf:"bytes,43,rep,name=buildChunks" json:"buildChunks,omitempty"`
	Transition                                                         *TransitionArchive                 `protobuf:"bytes,4,req,name=transition" json:"transition,omitempty"`
	TitlePlaceholder                                                   *Reference                         `protobuf:"bytes,5,opt,name=titlePlaceholder" json:"titlePlaceholder,omitempty"`
	BodyPlaceholder                                                    *Reference                         `protobuf:"bytes,6,opt,name=bodyPlaceholder" json:"bodyPlaceholder,omitempty"`
	ObjectPlaceholder                                                  *Reference                         `protobuf:"bytes,30,opt,name=objectPlaceholder" json:"objectPlaceholder,omitempty"`
	SlideNumberPlaceholder                                             *Reference                         `protobuf:"bytes,20,opt,name=slideNumberPlaceholder" json:"slideNumberPlaceholder,omitempty"`
	OwnedDrawables                                                     []*Reference                       `protobuf:"bytes,7,rep,name=owned_drawables,json=ownedDrawables" json:"owned_drawables,omitempty"`
	DrawablesZOrder                                                    []*Reference                       `protobuf:"bytes,42,rep,name=drawables_z_order,json=drawablesZOrder" json:"drawables_z_order,omitempty"`
	SageTagToInfoMap                                                   []*SlideArchive_SageTagMapEntry    `protobuf:"bytes,28,rep,name=sage_tag_to_info_map,json=sageTagToInfoMap" json:"sage_tag_to_info_map,omitempty"`
	InstructionalTextMap                                               *SlideArchive_InstructionalTextMap `protobuf:"bytes,45,opt,name=instructional_text_map,json=instructionalTextMap" json:"instructional_text_map,omitempty"`
	Name                                                               *string                            `protobuf:"bytes,10,opt,name=name" json:"name,omitempty"`
	TitlePlaceholderGeometry                                           *GeometryArchive                   `protobuf:"bytes,11,opt,name=titlePlaceholderGeometry" json:"titlePlaceholderGeometry,omitempty"`
	TitlePlaceholderShapeStyleIndex                                    *uint32                            `protobuf:"varint,12,opt,name=titlePlaceholderShapeStyleIndex" json:"titlePlaceholderShapeStyleIndex,omitempty"`
	TitlePlaceholderTextStyleIndex                                     *uint32                            `protobuf:"varint,13,opt,name=titlePlaceholderTextStyleIndex" json:"titlePlaceholderTextStyleIndex,omitempty"`
	TitleLayoutProperties                                              *TSWPShapeStylePropertiesArchive   `protobuf:"bytes,24,opt,name=titleLayoutProperties" json:"titleLayoutProperties,omitempty"`
	BodyPlaceholderGeometry                                            *GeometryArchive                   `protobuf:"bytes,14,opt,name=bodyPlaceholderGeometry" json:"bodyPlaceholderGeometry,omitempty"`
	BodyPlaceholderShapeStyleIndex                                     *uint32                            `protobuf:"varint,15,opt,name=bodyPlaceholderShapeStyleIndex" json:"bodyPlaceholderShapeStyleIndex,omitempty"`
	BodyPlaceholderTextStyleIndex                                      *uint32                            `protobuf:"varint,16,opt,name=bodyPlaceholderTextStyleIndex" json:"bodyPlaceholderTextStyleIndex,omitempty"`
	BodyLayoutProperties                                               *TSWPShapeStylePropertiesArchive   `protobuf:"bytes,25,opt,name=bodyLayoutProperties" json:"bodyLayoutProperties,omitempty"`
	SlideNumberPlaceholderGeometry                                     *GeometryArchive                   `protobuf:"bytes,21,opt,name=slideNumberPlaceholderGeometry" json:"slideNumberPlaceholderGeometry,omitempty"`
	SlideNumberPlaceholderShapeStyleIndex                              *uint32                            `protobuf:"varint,22,opt,name=slideNumberPlaceholderShapeStyleIndex" json:"slideNumberPlaceholderShapeStyleIndex,omitempty"`
	SlideNumberPlaceholderTextStyleIndex                               *uint32                            `protobuf:"varint,23,opt,name=slideNumberPlaceholderTextStyleIndex" json:"slideNumberPlaceholderTextStyleIndex,omitempty"`
	SlideNumberLayoutProperties                                        *TSWPShapeStylePropertiesArchive   `protobuf:"bytes,26,opt,name=slideNumberLayoutProperties" json:"slideNumberLayoutProperties,omitempty"`
	ClassicStylesheetRecord                                            *Reference                         `protobuf:"bytes,29,opt,name=classicStylesheetRecord" json:"classicStylesheetRecord,omitempty"`
	BodyParagraphStyles                                                []*Reference                       `protobuf:"bytes,31,rep,name=bodyParagraphStyles" json:"bodyParagraphStyles,omitempty"`
	BodyListStyles                                                     []*Reference                       `protobuf:"bytes,35,rep,name=bodyListStyles" json:"bodyListStyles,omitempty"`
	ThumbnailTextForTitlePlaceholder                                   *string                            `protobuf:"bytes,37,opt,name=thumbnailTextForTitlePlaceholder" json:"thumbnailTextForTitlePlaceholder,omitempty"`
	ThumbnailTextForBodyPlaceholder                                    *string                            `protobuf:"bytes,38,opt,name=thumbnailTextForBodyPlaceholder" json:"thumbnailTextForBodyPlaceholder,omitempty"`
	SlideObjectsLayerWithTemplate                                      *bool                              `protobuf:"varint,41,opt,name=slide_objects_layer_with_template,json=slideObjectsLayerWithTemplate,def=0" json:"slide_objects_layer_with_template,omitempty"`
	TemplateSlide                                                      *Reference                         `protobuf:"bytes,17,opt,name=template_slide,json=templateSlide" json:"template_slide,omitempty"`
	StaticGuides                                                       []*GuideArchive                    `protobuf:"bytes,18,rep,name=staticGuides" json:"staticGuides,omitempty"`
	UserDefinedGuideStorage                                            *Reference                         `protobuf:"bytes,36,opt,name=userDefinedGuideStorage" json:"userDefinedGuideStorage,omitempty"`
	InDocument                                                         *bool                              `protobuf:"varint,19,req,name=inDocument" json:"inDocument,omitempty"`
	Note                                                               *Reference                         `protobuf:"bytes,27,opt,name=note" json:"note,omitempty"`
	InfosUsingObjectPlaceholderGeometry                                []*Reference                       `protobuf:"bytes,44,rep,name=infos_using_object_placeholder_geometry,json=infosUsingObjectPlaceholderGeometry" json:"infos_using_object_placeholder_geometry,omitempty"`
	DeprecatedObjectPlaceholderVisibleForExport                        *bool                              `protobuf:"varint,34,opt,name=deprecated_objectPlaceholderVisibleForExport,json=deprecatedObjectPlaceholderVisibleForExport" json:"deprecated_objectPlaceholderVisibleForExport,omitempty"`
	InfoUsingObjectPlaceholderGeometry                                 *Reference                         `protobuf:"bytes,39,opt,name=info_using_object_placeholder_geometry,json=infoUsingObjectPlaceholderGeometry" json:"info_using_object_placeholder_geometry,omitempty"`
	InfoUsingObjectPlaceholderGeometryMatchesObjectPlaceholderGeometry *bool                              `protobuf:"varint,40,opt,name=info_using_object_placeholder_geometry_matches_object_placeholder_geometry,json=infoUsingObjectPlaceholderGeometryMatchesObjectPlaceholderGeometry" json:"info_using_object_placeholder_geometry_matches_object_placeholder_geometry,omitempty"`
}

// Default values for SlideArchive fields.
const (
	Default_SlideArchive_SlideObjectsLayerWithTemplate = bool(false)
)

func (x *SlideArchive) Reset() {
	*x = SlideArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNArchives_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlideArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlideArchive) ProtoMessage() {}

func (x *SlideArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNArchives_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlideArchive.ProtoReflect.Descriptor instead.
func (*SlideArchive) Descriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{13}
}

func (x *SlideArchive) GetStyle() *Reference {
	if x != nil {
		return x.Style
	}
	return nil
}

func (x *SlideArchive) GetBuilds() []*Reference {
	if x != nil {
		return x.Builds
	}
	return nil
}

// Deprecated: Do not use.
func (x *SlideArchive) GetBuildChunkArchives() []*BuildChunkArchive {
	if x != nil {
		return x.BuildChunkArchives
	}
	return nil
}

func (x *SlideArchive) GetBuildChunks() []*Reference {
	if x != nil {
		return x.BuildChunks
	}
	return nil
}

func (x *SlideArchive) GetTransition() *TransitionArchive {
	if x != nil {
		return x.Transition
	}
	return nil
}

func (x *SlideArchive) GetTitlePlaceholder() *Reference {
	if x != nil {
		return x.TitlePlaceholder
	}
	return nil
}

func (x *SlideArchive) GetBodyPlaceholder() *Reference {
	if x != nil {
		return x.BodyPlaceholder
	}
	return nil
}

func (x *SlideArchive) GetObjectPlaceholder() *Reference {
	if x != nil {
		return x.ObjectPlaceholder
	}
	return nil
}

func (x *SlideArchive) GetSlideNumberPlaceholder() *Reference {
	if x != nil {
		return x.SlideNumberPlaceholder
	}
	return nil
}

func (x *SlideArchive) GetOwnedDrawables() []*Reference {
	if x != nil {
		return x.OwnedDrawables
	}
	return nil
}

func (x *SlideArchive) GetDrawablesZOrder() []*Reference {
	if x != nil {
		return x.DrawablesZOrder
	}
	return nil
}

func (x *SlideArchive) GetSageTagToInfoMap() []*SlideArchive_SageTagMapEntry {
	if x != nil {
		return x.SageTagToInfoMap
	}
	return nil
}

func (x *SlideArchive) GetInstructionalTextMap() *SlideArchive_InstructionalTextMap {
	if x != nil {
		return x.InstructionalTextMap
	}
	return nil
}

func (x *SlideArchive) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *SlideArchive) GetTitlePlaceholderGeometry() *GeometryArchive {
	if x != nil {
		return x.TitlePlaceholderGeometry
	}
	return nil
}

func (x *SlideArchive) GetTitlePlaceholderShapeStyleIndex() uint32 {
	if x != nil && x.TitlePlaceholderShapeStyleIndex != nil {
		return *x.TitlePlaceholderShapeStyleIndex
	}
	return 0
}

func (x *SlideArchive) GetTitlePlaceholderTextStyleIndex() uint32 {
	if x != nil && x.TitlePlaceholderTextStyleIndex != nil {
		return *x.TitlePlaceholderTextStyleIndex
	}
	return 0
}

func (x *SlideArchive) GetTitleLayoutProperties() *TSWPShapeStylePropertiesArchive {
	if x != nil {
		return x.TitleLayoutProperties
	}
	return nil
}

func (x *SlideArchive) GetBodyPlaceholderGeometry() *GeometryArchive {
	if x != nil {
		return x.BodyPlaceholderGeometry
	}
	return nil
}

func (x *SlideArchive) GetBodyPlaceholderShapeStyleIndex() uint32 {
	if x != nil && x.BodyPlaceholderShapeStyleIndex != nil {
		return *x.BodyPlaceholderShapeStyleIndex
	}
	return 0
}

func (x *SlideArchive) GetBodyPlaceholderTextStyleIndex() uint32 {
	if x != nil && x.BodyPlaceholderTextStyleIndex != nil {
		return *x.BodyPlaceholderTextStyleIndex
	}
	return 0
}

func (x *SlideArchive) GetBodyLayoutProperties() *TSWPShapeStylePropertiesArchive {
	if x != nil {
		return x.BodyLayoutProperties
	}
	return nil
}

func (x *SlideArchive) GetSlideNumberPlaceholderGeometry() *GeometryArchive {
	if x != nil {
		return x.SlideNumberPlaceholderGeometry
	}
	return nil
}

func (x *SlideArchive) GetSlideNumberPlaceholderShapeStyleIndex() uint32 {
	if x != nil && x.SlideNumberPlaceholderShapeStyleIndex != nil {
		return *x.SlideNumberPlaceholderShapeStyleIndex
	}
	return 0
}

func (x *SlideArchive) GetSlideNumberPlaceholderTextStyleIndex() uint32 {
	if x != nil && x.SlideNumberPlaceholderTextStyleIndex != nil {
		return *x.SlideNumberPlaceholderTextStyleIndex
	}
	return 0
}

func (x *SlideArchive) GetSlideNumberLayoutProperties() *TSWPShapeStylePropertiesArchive {
	if x != nil {
		return x.SlideNumberLayoutProperties
	}
	return nil
}

func (x *SlideArchive) GetClassicStylesheetRecord() *Reference {
	if x != nil {
		return x.ClassicStylesheetRecord
	}
	return nil
}

func (x *SlideArchive) GetBodyParagraphStyles() []*Reference {
	if x != nil {
		return x.BodyParagraphStyles
	}
	return nil
}

func (x *SlideArchive) GetBodyListStyles() []*Reference {
	if x != nil {
		return x.BodyListStyles
	}
	return nil
}

func (x *SlideArchive) GetThumbnailTextForTitlePlaceholder() string {
	if x != nil && x.ThumbnailTextForTitlePlaceholder != nil {
		return *x.ThumbnailTextForTitlePlaceholder
	}
	return ""
}

func (x *SlideArchive) GetThumbnailTextForBodyPlaceholder() string {
	if x != nil && x.ThumbnailTextForBodyPlaceholder != nil {
		return *x.ThumbnailTextForBodyPlaceholder
	}
	return ""
}

func (x *SlideArchive) GetSlideObjectsLayerWithTemplate() bool {
	if x != nil && x.SlideObjectsLayerWithTemplate != nil {
		return *x.SlideObjectsLayerWithTemplate
	}
	return Default_SlideArchive_SlideObjectsLayerWithTemplate
}

func (x *SlideArchive) GetTemplateSlide() *Reference {
	if x != nil {
		return x.TemplateSlide
	}
	return nil
}

func (x *SlideArchive) GetStaticGuides() []*GuideArchive {
	if x != nil {
		return x.StaticGuides
	}
	return nil
}

func (x *SlideArchive) GetUserDefinedGuideStorage() *Reference {
	if x != nil {
		return x.UserDefinedGuideStorage
	}
	return nil
}

func (x *SlideArchive) GetInDocument() bool {
	if x != nil && x.InDocument != nil {
		return *x.InDocument
	}
	return false
}

func (x *SlideArchive) GetNote() *Reference {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *SlideArchive) GetInfosUsingObjectPlaceholderGeometry() []*Reference {
	if x != nil {
		return x.InfosUsingObjectPlaceholderGeometry
	}
	return nil
}

func (x *SlideArchive) GetDeprecatedObjectPlaceholderVisibleForExport() bool {
	if x != nil && x.DeprecatedObjectPlaceholderVisibleForExport != nil {
		return *x.DeprecatedObjectPlaceholderVisibleForExport
	}
	return false
}

func (x *SlideArchive) GetInfoUsingObjectPlaceholderGeometry() *Reference {
	if x != nil {
		return x.InfoUsingObjectPlaceholderGeometry
	}
	return nil
}

func (x *SlideArchive) GetInfoUsingObjectPlaceholderGeometryMatchesObjectPlaceholderGeometry() bool {
	if x != nil && x.InfoUsingObjectPlaceholderGeometryMatchesObjectPlaceholderGeometry != nil {
		return *x.InfoUsingObjectPlaceholderGeometryMatchesObjectPlaceholderGeometry
	}
	return false
}

type SlideNodeArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Children                                   []*Reference     `protobuf:"bytes,1,rep,name=children" json:"children,omitempty"`
	Slide                                      *Reference       `protobuf:"bytes,2,opt,name=slide" json:"slide,omitempty"`
	Depth                                      *uint32          `protobuf:"varint,21,opt,name=depth,def=1" json:"depth,omitempty"`
	Thumbnails                                 []*DataReference `protobuf:"bytes,16,rep,name=thumbnails" json:"thumbnails,omitempty"`
	ThumbnailSizes                             []*Size          `protobuf:"bytes,10,rep,name=thumbnailSizes" json:"thumbnailSizes,omitempty"`
	ThumbnailsAreDirty                         *bool            `protobuf:"varint,14,opt,name=thumbnailsAreDirty" json:"thumbnailsAreDirty,omitempty"`
	DigestsForDatasNeedingDownloadForThumbnail []string         `protobuf:"bytes,25,rep,name=digests_for_datas_needing_download_for_thumbnail,json=digestsForDatasNeedingDownloadForThumbnail" json:"digests_for_datas_needing_download_for_thumbnail,omitempty"`
	IsHidden                                   *bool            `protobuf:"varint,4,req,name=isHidden" json:"isHidden,omitempty"`
	// Deprecated: Do not use.
	IsCollapsed *bool `protobuf:"varint,5,opt,name=isCollapsed" json:"isCollapsed,omitempty"`
	// Deprecated: Do not use.
	IsCollapsedInOutlineView *bool `protobuf:"varint,17,opt,name=isCollapsedInOutlineView" json:"isCollapsedInOutlineView,omitempty"`
	// Deprecated: Do not use.
	HasBodyInOutlineView *bool `protobuf:"varint,19,opt,name=hasBodyInOutlineView" json:"hasBodyInOutlineView,omitempty"`
	// Deprecated: Do not use.
	HasBuilds            *bool `protobuf:"varint,6,req,name=hasBuilds" json:"hasBuilds,omitempty"`
	HasTransition        *bool `protobuf:"varint,7,req,name=hasTransition" json:"hasTransition,omitempty"`
	HasNote              *bool `protobuf:"varint,8,opt,name=hasNote" json:"hasNote,omitempty"`
	IsSlideNumberVisible *bool `protobuf:"varint,18,opt,name=isSlideNumberVisible,def=0" json:"isSlideNumberVisible,omitempty"`
	// Deprecated: Do not use.
	UniqueIdentifier        *string `protobuf:"bytes,11,opt,name=uniqueIdentifier" json:"uniqueIdentifier,omitempty"`
	CopyFromSlideIdentifier *string `protobuf:"bytes,12,opt,name=copyFromSlideIdentifier" json:"copyFromSlideIdentifier,omitempty"`
	// Deprecated: Do not use.
	SlideSpecificHyperlinkCount *uint32 `protobuf:"varint,13,opt,name=slideSpecificHyperlinkCount" json:"slideSpecificHyperlinkCount,omitempty"`
	BuildEventCount             *uint32 `protobuf:"varint,15,opt,name=build_event_count,json=buildEventCount" json:"build_event_count,omitempty"`
	BuildEventCountCacheVersion *uint32 `protobuf:"varint,26,opt,name=build_event_count_cache_version,json=buildEventCountCacheVersion" json:"build_event_count_cache_version,omitempty"`
	// Deprecated: Do not use.
	BuildEventCountIsUpToDate     *bool   `protobuf:"varint,22,opt,name=build_event_count_is_up_to_date,json=buildEventCountIsUpToDate" json:"build_event_count_is_up_to_date,omitempty"`
	HasExplicitBuilds             *bool   `protobuf:"varint,20,opt,name=has_explicit_builds,json=hasExplicitBuilds" json:"has_explicit_builds,omitempty"`
	HasExplicitBuildsCacheVersion *uint32 `protobuf:"varint,27,opt,name=has_explicit_builds_cache_version,json=hasExplicitBuildsCacheVersion" json:"has_explicit_builds_cache_version,omitempty"`
	// Deprecated: Do not use.
	HasExplicitBuildsIsUpToDate *bool                                              `protobuf:"varint,23,opt,name=has_explicit_builds_is_up_to_date,json=hasExplicitBuildsIsUpToDate" json:"has_explicit_builds_is_up_to_date,omitempty"`
	SlideSpecificHyperlinkMap   []*SlideNodeArchive_SlideSpecificHyperlinkMapEntry `protobuf:"bytes,24,rep,name=slideSpecificHyperlinkMap" json:"slideSpecificHyperlinkMap,omitempty"`
	HasBackgroundAlpha          *bool                                              `protobuf:"varint,28,opt,name=has_background_alpha,json=hasBackgroundAlpha" json:"has_background_alpha,omitempty"`
	TemplateSlideId             *UUID                                              `protobuf:"bytes,29,opt,name=template_slide_id,json=templateSlideId" json:"template_slide_id,omitempty"`
	LiveVideoSourceIds          []*UUID                                            `protobuf:"bytes,30,rep,name=live_video_source_ids,json=liveVideoSourceIds" json:"live_video_source_ids,omitempty"`
	// Deprecated: Do not use.
	DatabaseThumbnail *Reference `protobuf:"bytes,3,opt,name=database_thumbnail,json=databaseThumbnail" json:"database_thumbnail,omitempty"`
	// Deprecated: Do not use.
	DatabaseThumbnails []*Reference `protobuf:"bytes,9,rep,name=database_thumbnails,json=databaseThumbnails" json:"database_thumbnails,omitempty"`
}

// Default values for SlideNodeArchive fields.
const (
	Default_SlideNodeArchive_Depth                = uint32(1)
	Default_SlideNodeArchive_IsSlideNumberVisible = bool(false)
)

func (x *SlideNodeArchive) Reset() {
	*x = SlideNodeArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNArchives_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlideNodeArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlideNodeArchive) ProtoMessage() {}

func (x *SlideNodeArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNArchives_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlideNodeArchive.ProtoReflect.Descriptor instead.
func (*SlideNodeArchive) Descriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{14}
}

func (x *SlideNodeArchive) GetChildren() []*Reference {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *SlideNodeArchive) GetSlide() *Reference {
	if x != nil {
		return x.Slide
	}
	return nil
}

func (x *SlideNodeArchive) GetDepth() uint32 {
	if x != nil && x.Depth != nil {
		return *x.Depth
	}
	return Default_SlideNodeArchive_Depth
}

func (x *SlideNodeArchive) GetThumbnails() []*DataReference {
	if x != nil {
		return x.Thumbnails
	}
	return nil
}

func (x *SlideNodeArchive) GetThumbnailSizes() []*Size {
	if x != nil {
		return x.ThumbnailSizes
	}
	return nil
}

func (x *SlideNodeArchive) GetThumbnailsAreDirty() bool {
	if x != nil && x.ThumbnailsAreDirty != nil {
		return *x.ThumbnailsAreDirty
	}
	return false
}

func (x *SlideNodeArchive) GetDigestsForDatasNeedingDownloadForThumbnail() []string {
	if x != nil {
		return x.DigestsForDatasNeedingDownloadForThumbnail
	}
	return nil
}

func (x *SlideNodeArchive) GetIsHidden() bool {
	if x != nil && x.IsHidden != nil {
		return *x.IsHidden
	}
	return false
}

// Deprecated: Do not use.
func (x *SlideNodeArchive) GetIsCollapsed() bool {
	if x != nil && x.IsCollapsed != nil {
		return *x.IsCollapsed
	}
	return false
}

// Deprecated: Do not use.
func (x *SlideNodeArchive) GetIsCollapsedInOutlineView() bool {
	if x != nil && x.IsCollapsedInOutlineView != nil {
		return *x.IsCollapsedInOutlineView
	}
	return false
}

// Deprecated: Do not use.
func (x *SlideNodeArchive) GetHasBodyInOutlineView() bool {
	if x != nil && x.HasBodyInOutlineView != nil {
		return *x.HasBodyInOutlineView
	}
	return false
}

// Deprecated: Do not use.
func (x *SlideNodeArchive) GetHasBuilds() bool {
	if x != nil && x.HasBuilds != nil {
		return *x.HasBuilds
	}
	return false
}

func (x *SlideNodeArchive) GetHasTransition() bool {
	if x != nil && x.HasTransition != nil {
		return *x.HasTransition
	}
	return false
}

func (x *SlideNodeArchive) GetHasNote() bool {
	if x != nil && x.HasNote != nil {
		return *x.HasNote
	}
	return false
}

func (x *SlideNodeArchive) GetIsSlideNumberVisible() bool {
	if x != nil && x.IsSlideNumberVisible != nil {
		return *x.IsSlideNumberVisible
	}
	return Default_SlideNodeArchive_IsSlideNumberVisible
}

// Deprecated: Do not use.
func (x *SlideNodeArchive) GetUniqueIdentifier() string {
	if x != nil && x.UniqueIdentifier != nil {
		return *x.UniqueIdentifier
	}
	return ""
}

func (x *SlideNodeArchive) GetCopyFromSlideIdentifier() string {
	if x != nil && x.CopyFromSlideIdentifier != nil {
		return *x.CopyFromSlideIdentifier
	}
	return ""
}

// Deprecated: Do not use.
func (x *SlideNodeArchive) GetSlideSpecificHyperlinkCount() uint32 {
	if x != nil && x.SlideSpecificHyperlinkCount != nil {
		return *x.SlideSpecificHyperlinkCount
	}
	return 0
}

func (x *SlideNodeArchive) GetBuildEventCount() uint32 {
	if x != nil && x.BuildEventCount != nil {
		return *x.BuildEventCount
	}
	return 0
}

func (x *SlideNodeArchive) GetBuildEventCountCacheVersion() uint32 {
	if x != nil && x.BuildEventCountCacheVersion != nil {
		return *x.BuildEventCountCacheVersion
	}
	return 0
}

// Deprecated: Do not use.
func (x *SlideNodeArchive) GetBuildEventCountIsUpToDate() bool {
	if x != nil && x.BuildEventCountIsUpToDate != nil {
		return *x.BuildEventCountIsUpToDate
	}
	return false
}

func (x *SlideNodeArchive) GetHasExplicitBuilds() bool {
	if x != nil && x.HasExplicitBuilds != nil {
		return *x.HasExplicitBuilds
	}
	return false
}

func (x *SlideNodeArchive) GetHasExplicitBuildsCacheVersion() uint32 {
	if x != nil && x.HasExplicitBuildsCacheVersion != nil {
		return *x.HasExplicitBuildsCacheVersion
	}
	return 0
}

// Deprecated: Do not use.
func (x *SlideNodeArchive) GetHasExplicitBuildsIsUpToDate() bool {
	if x != nil && x.HasExplicitBuildsIsUpToDate != nil {
		return *x.HasExplicitBuildsIsUpToDate
	}
	return false
}

func (x *SlideNodeArchive) GetSlideSpecificHyperlinkMap() []*SlideNodeArchive_SlideSpecificHyperlinkMapEntry {
	if x != nil {
		return x.SlideSpecificHyperlinkMap
	}
	return nil
}

func (x *SlideNodeArchive) GetHasBackgroundAlpha() bool {
	if x != nil && x.HasBackgroundAlpha != nil {
		return *x.HasBackgroundAlpha
	}
	return false
}

func (x *SlideNodeArchive) GetTemplateSlideId() *UUID {
	if x != nil {
		return x.TemplateSlideId
	}
	return nil
}

func (x *SlideNodeArchive) GetLiveVideoSourceIds() []*UUID {
	if x != nil {
		return x.LiveVideoSourceIds
	}
	return nil
}

// Deprecated: Do not use.
func (x *SlideNodeArchive) GetDatabaseThumbnail() *Reference {
	if x != nil {
		return x.DatabaseThumbnail
	}
	return nil
}

// Deprecated: Do not use.
func (x *SlideNodeArchive) GetDatabaseThumbnails() []*Reference {
	if x != nil {
		return x.DatabaseThumbnails
	}
	return nil
}

type DesktopUILayoutArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SidebarVisible          *bool                                         `protobuf:"varint,1,opt,name=sidebar_visible,json=sidebarVisible" json:"sidebar_visible,omitempty"`
	SidebarViewMode         *DesktopUILayoutArchive_SidebarViewMode       `protobuf:"varint,2,opt,name=sidebar_view_mode,json=sidebarViewMode,enum=KN.DesktopUILayoutArchive_SidebarViewMode" json:"sidebar_view_mode,omitempty"`
	NotesVisible            *bool                                         `protobuf:"varint,3,opt,name=notes_visible,json=notesVisible" json:"notes_visible,omitempty"`
	LightTableVisible       *bool                                         `protobuf:"varint,5,opt,name=light_table_visible,json=lightTableVisible" json:"light_table_visible,omitempty"`
	InspectorPaneVisible    *bool                                         `protobuf:"varint,6,opt,name=inspector_pane_visible,json=inspectorPaneVisible,def=1" json:"inspector_pane_visible,omitempty"`
	InspectorPaneViewMode   *DesktopUILayoutArchive_InspectorPaneViewMode `protobuf:"varint,7,opt,name=inspector_pane_view_mode,json=inspectorPaneViewMode,enum=KN.DesktopUILayoutArchive_InspectorPaneViewMode,def=0" json:"inspector_pane_view_mode,omitempty"`
	ShowingTemplateSlides   *bool                                         `protobuf:"varint,8,opt,name=showing_template_slides,json=showingTemplateSlides" json:"showing_template_slides,omitempty"`
	InspectorPaneAutohidden *bool                                         `protobuf:"varint,9,opt,name=inspector_pane_autohidden,json=inspectorPaneAutohidden" json:"inspector_pane_autohidden,omitempty"`
	ElementListVisible      *bool                                         `protobuf:"varint,10,opt,name=element_list_visible,json=elementListVisible" json:"element_list_visible,omitempty"`
}

// Default values for DesktopUILayoutArchive fields.
const (
	Default_DesktopUILayoutArchive_InspectorPaneVisible  = bool(true)
	Default_DesktopUILayoutArchive_InspectorPaneViewMode = DesktopUILayoutArchive_kInspectorPaneViewModeFormat
)

func (x *DesktopUILayoutArchive) Reset() {
	*x = DesktopUILayoutArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNArchives_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DesktopUILayoutArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DesktopUILayoutArchive) ProtoMessage() {}

func (x *DesktopUILayoutArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNArchives_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DesktopUILayoutArchive.ProtoReflect.Descriptor instead.
func (*DesktopUILayoutArchive) Descriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{15}
}

func (x *DesktopUILayoutArchive) GetSidebarVisible() bool {
	if x != nil && x.SidebarVisible != nil {
		return *x.SidebarVisible
	}
	return false
}

func (x *DesktopUILayoutArchive) GetSidebarViewMode() DesktopUILayoutArchive_SidebarViewMode {
	if x != nil && x.SidebarViewMode != nil {
		return *x.SidebarViewMode
	}
	return DesktopUILayoutArchive_kSidebarViewModeNavigator
}

func (x *DesktopUILayoutArchive) GetNotesVisible() bool {
	if x != nil && x.NotesVisible != nil {
		return *x.NotesVisible
	}
	return false
}

func (x *DesktopUILayoutArchive) GetLightTableVisible() bool {
	if x != nil && x.LightTableVisible != nil {
		return *x.LightTableVisible
	}
	return false
}

func (x *DesktopUILayoutArchive) GetInspectorPaneVisible() bool {
	if x != nil && x.InspectorPaneVisible != nil {
		return *x.InspectorPaneVisible
	}
	return Default_DesktopUILayoutArchive_InspectorPaneVisible
}

func (x *DesktopUILayoutArchive) GetInspectorPaneViewMode() DesktopUILayoutArchive_InspectorPaneViewMode {
	if x != nil && x.InspectorPaneViewMode != nil {
		return *x.InspectorPaneViewMode
	}
	return Default_DesktopUILayoutArchive_InspectorPaneViewMode
}

func (x *DesktopUILayoutArchive) GetShowingTemplateSlides() bool {
	if x != nil && x.ShowingTemplateSlides != nil {
		return *x.ShowingTemplateSlides
	}
	return false
}

func (x *DesktopUILayoutArchive) GetInspectorPaneAutohidden() bool {
	if x != nil && x.InspectorPaneAutohidden != nil {
		return *x.InspectorPaneAutohidden
	}
	return false
}

func (x *DesktopUILayoutArchive) GetElementListVisible() bool {
	if x != nil && x.ElementListVisible != nil {
		return *x.ElementListVisible
	}
	return false
}

type UIStateArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Do not use.
	SlideNodeToEdit                    *Reference `protobuf:"bytes,1,opt,name=slideNodeToEdit" json:"slideNodeToEdit,omitempty"`
	DeprecatedTemplateSlideNodeToApply *Reference `protobuf:"bytes,2,opt,name=deprecated_template_slide_node_to_apply,json=deprecatedTemplateSlideNodeToApply" json:"deprecated_template_slide_node_to_apply,omitempty"`
	DeprecatedSlideThumbnailSize       *Size      `protobuf:"bytes,3,opt,name=deprecated_slideThumbnailSize,json=deprecatedSlideThumbnailSize" json:"deprecated_slideThumbnailSize,omitempty"`
	CanvasViewScale                    *float32   `protobuf:"fixed32,4,opt,name=canvasViewScale" json:"canvasViewScale,omitempty"`
	CanvasOffset                       *Point     `protobuf:"bytes,5,opt,name=canvasOffset" json:"canvasOffset,omitempty"`
	// Deprecated: Do not use.
	SelectedSlideNodes []*Reference `protobuf:"bytes,6,rep,name=selectedSlideNodes" json:"selectedSlideNodes,omitempty"`
	// Deprecated: Do not use.
	IPhoneCanvasViewScale *float32 `protobuf:"fixed32,7,opt,name=iPhoneCanvasViewScale" json:"iPhoneCanvasViewScale,omitempty"`
	// Deprecated: Do not use.
	IPhoneCanvasOffset *Point `protobuf:"bytes,8,opt,name=iPhoneCanvasOffset" json:"iPhoneCanvasOffset,omitempty"`
	// Deprecated: Do not use.
	IPhone568CanvasViewScale *float32 `protobuf:"fixed32,9,opt,name=iPhone568CanvasViewScale" json:"iPhone568CanvasViewScale,omitempty"`
	// Deprecated: Do not use.
	IPhone568CanvasOffset              *Point                `protobuf:"bytes,10,opt,name=iPhone568CanvasOffset" json:"iPhone568CanvasOffset,omitempty"`
	DesktopUiLayout                    *Reference            `protobuf:"bytes,11,opt,name=desktop_ui_layout,json=desktopUiLayout" json:"desktop_ui_layout,omitempty"`
	DesktopSlideViewContentFitsWindow  *bool                 `protobuf:"varint,12,opt,name=desktop_slide_view_content_fits_window,json=desktopSlideViewContentFitsWindow" json:"desktop_slide_view_content_fits_window,omitempty"`
	DesktopCanvasViewScale             *float32              `protobuf:"fixed32,13,opt,name=desktop_canvas_view_scale,json=desktopCanvasViewScale" json:"desktop_canvas_view_scale,omitempty"`
	DesktopCanvasOffset                *Point                `protobuf:"bytes,21,opt,name=desktop_canvas_offset,json=desktopCanvasOffset" json:"desktop_canvas_offset,omitempty"`
	LightTableZoomScale                *float32              `protobuf:"fixed32,14,opt,name=light_table_zoom_scale,json=lightTableZoomScale" json:"light_table_zoom_scale,omitempty"`
	ChartUiState                       []*ChartUIState       `protobuf:"bytes,15,rep,name=chart_ui_state,json=chartUiState" json:"chart_ui_state,omitempty"`
	ShowSlideGuides                    *bool                 `protobuf:"varint,16,opt,name=show_slide_guides,json=showSlideGuides" json:"show_slide_guides,omitempty"`
	ShowTemplateGuides                 *bool                 `protobuf:"varint,17,opt,name=show_template_guides,json=showTemplateGuides" json:"show_template_guides,omitempty"`
	ShowsComments                      *bool                 `protobuf:"varint,18,opt,name=shows_comments,json=showsComments" json:"shows_comments,omitempty"`
	CommentsPrintingToggleEnabled      *bool                 `protobuf:"varint,39,opt,name=comments_printing_toggle_enabled,json=commentsPrintingToggleEnabled" json:"comments_printing_toggle_enabled,omitempty"`
	CollapsedSlideNodes                []*Reference          `protobuf:"bytes,19,rep,name=collapsed_slide_nodes,json=collapsedSlideNodes" json:"collapsed_slide_nodes,omitempty"`
	OutlineCollapsedSlideNodes         []*Reference          `protobuf:"bytes,28,rep,name=outline_collapsed_slide_nodes,json=outlineCollapsedSlideNodes" json:"outline_collapsed_slide_nodes,omitempty"`
	OutlineHasBodySlideNodes           []*Reference          `protobuf:"bytes,30,rep,name=outline_has_body_slide_nodes,json=outlineHasBodySlideNodes" json:"outline_has_body_slide_nodes,omitempty"`
	ShowsRuler                         *bool                 `protobuf:"varint,20,opt,name=shows_ruler,json=showsRuler" json:"shows_ruler,omitempty"`
	DesktopNavigatorViewWidth          *float32              `protobuf:"fixed32,22,opt,name=desktop_navigator_view_width,json=desktopNavigatorViewWidth" json:"desktop_navigator_view_width,omitempty"`
	DesktopOutlineViewWidth            *float32              `protobuf:"fixed32,23,opt,name=desktop_outline_view_width,json=desktopOutlineViewWidth" json:"desktop_outline_view_width,omitempty"`
	DesktopOutlineViewDefaultFixed     *bool                 `protobuf:"varint,31,opt,name=desktop_outline_view_default_fixed,json=desktopOutlineViewDefaultFixed" json:"desktop_outline_view_default_fixed,omitempty"`
	DesktopMainContentSize             *Size                 `protobuf:"bytes,24,opt,name=desktop_main_content_size,json=desktopMainContentSize" json:"desktop_main_content_size,omitempty"`
	DesktopPresenterNotesViewHeight    *float32              `protobuf:"fixed32,25,opt,name=desktop_presenter_notes_view_height,json=desktopPresenterNotesViewHeight" json:"desktop_presenter_notes_view_height,omitempty"`
	DesktopMainWindowOrigin            *Point                `protobuf:"bytes,26,opt,name=desktop_main_window_origin,json=desktopMainWindowOrigin" json:"desktop_main_window_origin,omitempty"`
	LightTableHidesSkippedSlides       *bool                 `protobuf:"varint,27,opt,name=light_table_hides_skipped_slides,json=lightTableHidesSkippedSlides" json:"light_table_hides_skipped_slides,omitempty"`
	SelectionPath                      *SelectionPathArchive `protobuf:"bytes,29,opt,name=selection_path,json=selectionPath" json:"selection_path,omitempty"`
	DesktopElementListViewWidth        *float32              `protobuf:"fixed32,32,opt,name=desktop_element_list_view_width,json=desktopElementListViewWidth" json:"desktop_element_list_view_width,omitempty"`
	ElementListExpandedGroups          []*Reference          `protobuf:"bytes,33,rep,name=element_list_expanded_groups,json=elementListExpandedGroups" json:"element_list_expanded_groups,omitempty"`
	ShowsMobileLightTable              *bool                 `protobuf:"varint,34,opt,name=shows_mobile_light_table,json=showsMobileLightTable" json:"shows_mobile_light_table,omitempty"`
	MobileLightTableZoomScale          *float32              `protobuf:"fixed32,35,opt,name=mobile_light_table_zoom_scale,json=mobileLightTableZoomScale" json:"mobile_light_table_zoom_scale,omitempty"`
	MobileLightTableHidesSkippedSlides *bool                 `protobuf:"varint,36,opt,name=mobile_light_table_hides_skipped_slides,json=mobileLightTableHidesSkippedSlides" json:"mobile_light_table_hides_skipped_slides,omitempty"`
	FreehandDrawingToolkitState        *Reference            `protobuf:"bytes,37,opt,name=freehand_drawing_toolkit_state,json=freehandDrawingToolkitState" json:"freehand_drawing_toolkit_state,omitempty"`
	SelectionPathTransformer           *Reference            `protobuf:"bytes,38,opt,name=selection_path_transformer,json=selectionPathTransformer" json:"selection_path_transformer,omitempty"`
	ShowsMobileOutline                 *bool                 `protobuf:"varint,40,opt,name=shows_mobile_outline,json=showsMobileOutline" json:"shows_mobile_outline,omitempty"`
	EditingDisabled                    *bool                 `protobuf:"varint,41,opt,name=editing_disabled,json=editingDisabled" json:"editing_disabled,omitempty"`
}

func (x *UIStateArchive) Reset() {
	*x = UIStateArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNArchives_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UIStateArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UIStateArchive) ProtoMessage() {}

func (x *UIStateArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNArchives_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UIStateArchive.ProtoReflect.Descriptor instead.
func (*UIStateArchive) Descriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{16}
}

// Deprecated: Do not use.
func (x *UIStateArchive) GetSlideNodeToEdit() *Reference {
	if x != nil {
		return x.SlideNodeToEdit
	}
	return nil
}

func (x *UIStateArchive) GetDeprecatedTemplateSlideNodeToApply() *Reference {
	if x != nil {
		return x.DeprecatedTemplateSlideNodeToApply
	}
	return nil
}

func (x *UIStateArchive) GetDeprecatedSlideThumbnailSize() *Size {
	if x != nil {
		return x.DeprecatedSlideThumbnailSize
	}
	return nil
}

func (x *UIStateArchive) GetCanvasViewScale() float32 {
	if x != nil && x.CanvasViewScale != nil {
		return *x.CanvasViewScale
	}
	return 0
}

func (x *UIStateArchive) GetCanvasOffset() *Point {
	if x != nil {
		return x.CanvasOffset
	}
	return nil
}

// Deprecated: Do not use.
func (x *UIStateArchive) GetSelectedSlideNodes() []*Reference {
	if x != nil {
		return x.SelectedSlideNodes
	}
	return nil
}

// Deprecated: Do not use.
func (x *UIStateArchive) GetIPhoneCanvasViewScale() float32 {
	if x != nil && x.IPhoneCanvasViewScale != nil {
		return *x.IPhoneCanvasViewScale
	}
	return 0
}

// Deprecated: Do not use.
func (x *UIStateArchive) GetIPhoneCanvasOffset() *Point {
	if x != nil {
		return x.IPhoneCanvasOffset
	}
	return nil
}

// Deprecated: Do not use.
func (x *UIStateArchive) GetIPhone568CanvasViewScale() float32 {
	if x != nil && x.IPhone568CanvasViewScale != nil {
		return *x.IPhone568CanvasViewScale
	}
	return 0
}

// Deprecated: Do not use.
func (x *UIStateArchive) GetIPhone568CanvasOffset() *Point {
	if x != nil {
		return x.IPhone568CanvasOffset
	}
	return nil
}

func (x *UIStateArchive) GetDesktopUiLayout() *Reference {
	if x != nil {
		return x.DesktopUiLayout
	}
	return nil
}

func (x *UIStateArchive) GetDesktopSlideViewContentFitsWindow() bool {
	if x != nil && x.DesktopSlideViewContentFitsWindow != nil {
		return *x.DesktopSlideViewContentFitsWindow
	}
	return false
}

func (x *UIStateArchive) GetDesktopCanvasViewScale() float32 {
	if x != nil && x.DesktopCanvasViewScale != nil {
		return *x.DesktopCanvasViewScale
	}
	return 0
}

func (x *UIStateArchive) GetDesktopCanvasOffset() *Point {
	if x != nil {
		return x.DesktopCanvasOffset
	}
	return nil
}

func (x *UIStateArchive) GetLightTableZoomScale() float32 {
	if x != nil && x.LightTableZoomScale != nil {
		return *x.LightTableZoomScale
	}
	return 0
}

func (x *UIStateArchive) GetChartUiState() []*ChartUIState {
	if x != nil {
		return x.ChartUiState
	}
	return nil
}

func (x *UIStateArchive) GetShowSlideGuides() bool {
	if x != nil && x.ShowSlideGuides != nil {
		return *x.ShowSlideGuides
	}
	return false
}

func (x *UIStateArchive) GetShowTemplateGuides() bool {
	if x != nil && x.ShowTemplateGuides != nil {
		return *x.ShowTemplateGuides
	}
	return false
}

func (x *UIStateArchive) GetShowsComments() bool {
	if x != nil && x.ShowsComments != nil {
		return *x.ShowsComments
	}
	return false
}

func (x *UIStateArchive) GetCommentsPrintingToggleEnabled() bool {
	if x != nil && x.CommentsPrintingToggleEnabled != nil {
		return *x.CommentsPrintingToggleEnabled
	}
	return false
}

func (x *UIStateArchive) GetCollapsedSlideNodes() []*Reference {
	if x != nil {
		return x.CollapsedSlideNodes
	}
	return nil
}

func (x *UIStateArchive) GetOutlineCollapsedSlideNodes() []*Reference {
	if x != nil {
		return x.OutlineCollapsedSlideNodes
	}
	return nil
}

func (x *UIStateArchive) GetOutlineHasBodySlideNodes() []*Reference {
	if x != nil {
		return x.OutlineHasBodySlideNodes
	}
	return nil
}

func (x *UIStateArchive) GetShowsRuler() bool {
	if x != nil && x.ShowsRuler != nil {
		return *x.ShowsRuler
	}
	return false
}

func (x *UIStateArchive) GetDesktopNavigatorViewWidth() float32 {
	if x != nil && x.DesktopNavigatorViewWidth != nil {
		return *x.DesktopNavigatorViewWidth
	}
	return 0
}

func (x *UIStateArchive) GetDesktopOutlineViewWidth() float32 {
	if x != nil && x.DesktopOutlineViewWidth != nil {
		return *x.DesktopOutlineViewWidth
	}
	return 0
}

func (x *UIStateArchive) GetDesktopOutlineViewDefaultFixed() bool {
	if x != nil && x.DesktopOutlineViewDefaultFixed != nil {
		return *x.DesktopOutlineViewDefaultFixed
	}
	return false
}

func (x *UIStateArchive) GetDesktopMainContentSize() *Size {
	if x != nil {
		return x.DesktopMainContentSize
	}
	return nil
}

func (x *UIStateArchive) GetDesktopPresenterNotesViewHeight() float32 {
	if x != nil && x.DesktopPresenterNotesViewHeight != nil {
		return *x.DesktopPresenterNotesViewHeight
	}
	return 0
}

func (x *UIStateArchive) GetDesktopMainWindowOrigin() *Point {
	if x != nil {
		return x.DesktopMainWindowOrigin
	}
	return nil
}

func (x *UIStateArchive) GetLightTableHidesSkippedSlides() bool {
	if x != nil && x.LightTableHidesSkippedSlides != nil {
		return *x.LightTableHidesSkippedSlides
	}
	return false
}

func (x *UIStateArchive) GetSelectionPath() *SelectionPathArchive {
	if x != nil {
		return x.SelectionPath
	}
	return nil
}

func (x *UIStateArchive) GetDesktopElementListViewWidth() float32 {
	if x != nil && x.DesktopElementListViewWidth != nil {
		return *x.DesktopElementListViewWidth
	}
	return 0
}

func (x *UIStateArchive) GetElementListExpandedGroups() []*Reference {
	if x != nil {
		return x.ElementListExpandedGroups
	}
	return nil
}

func (x *UIStateArchive) GetShowsMobileLightTable() bool {
	if x != nil && x.ShowsMobileLightTable != nil {
		return *x.ShowsMobileLightTable
	}
	return false
}

func (x *UIStateArchive) GetMobileLightTableZoomScale() float32 {
	if x != nil && x.MobileLightTableZoomScale != nil {
		return *x.MobileLightTableZoomScale
	}
	return 0
}

func (x *UIStateArchive) GetMobileLightTableHidesSkippedSlides() bool {
	if x != nil && x.MobileLightTableHidesSkippedSlides != nil {
		return *x.MobileLightTableHidesSkippedSlides
	}
	return false
}

func (x *UIStateArchive) GetFreehandDrawingToolkitState() *Reference {
	if x != nil {
		return x.FreehandDrawingToolkitState
	}
	return nil
}

func (x *UIStateArchive) GetSelectionPathTransformer() *Reference {
	if x != nil {
		return x.SelectionPathTransformer
	}
	return nil
}

func (x *UIStateArchive) GetShowsMobileOutline() bool {
	if x != nil && x.ShowsMobileOutline != nil {
		return *x.ShowsMobileOutline
	}
	return false
}

func (x *UIStateArchive) GetEditingDisabled() bool {
	if x != nil && x.EditingDisabled != nil {
		return *x.EditingDisabled
	}
	return false
}

type IOSRestorableViewStateRootArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SavedPlaybackState *IOSSavedPlaybackStateArchive `protobuf:"bytes,1,opt,name=saved_playback_state,json=savedPlaybackState" json:"saved_playback_state,omitempty"`
}

func (x *IOSRestorableViewStateRootArchive) Reset() {
	*x = IOSRestorableViewStateRootArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNArchives_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IOSRestorableViewStateRootArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IOSRestorableViewStateRootArchive) ProtoMessage() {}

func (x *IOSRestorableViewStateRootArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNArchives_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IOSRestorableViewStateRootArchive.ProtoReflect.Descriptor instead.
func (*IOSRestorableViewStateRootArchive) Descriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{17}
}

func (x *IOSRestorableViewStateRootArchive) GetSavedPlaybackState() *IOSSavedPlaybackStateArchive {
	if x != nil {
		return x.SavedPlaybackState
	}
	return nil
}

type IOSSavedPlaybackStateArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PresentationType             *IOSSavedPlaybackStateArchive_PresentationType `protobuf:"varint,1,opt,name=presentation_type,json=presentationType,enum=KN.IOSSavedPlaybackStateArchive_PresentationType" json:"presentation_type,omitempty"`
	SlideNodeIndex               *uint32                                        `protobuf:"varint,2,opt,name=slide_node_index,json=slideNodeIndex" json:"slide_node_index,omitempty"`
	EventIndex                   *uint32                                        `protobuf:"varint,3,opt,name=event_index,json=eventIndex" json:"event_index,omitempty"`
	BreadcrumbTrail              []string                                       `protobuf:"bytes,4,rep,name=breadcrumb_trail,json=breadcrumbTrail" json:"breadcrumb_trail,omitempty"`
	HadExternalDisplay           *bool                                          `protobuf:"varint,5,opt,name=had_external_display,json=hadExternalDisplay" json:"had_external_display,omitempty"`
	IsElapsedTimeStarted         *bool                                          `protobuf:"varint,6,opt,name=is_elapsed_time_started,json=isElapsedTimeStarted" json:"is_elapsed_time_started,omitempty"`
	ElapsedTimeStartTime         *float64                                       `protobuf:"fixed64,7,opt,name=elapsed_time_start_time,json=elapsedTimeStartTime" json:"elapsed_time_start_time,omitempty"`
	RecordingPlaybackCurrentTime *float64                                       `protobuf:"fixed64,8,opt,name=recording_playback_current_time,json=recordingPlaybackCurrentTime" json:"recording_playback_current_time,omitempty"`
	ShouldShowSlideNavigator     *bool                                          `protobuf:"varint,9,opt,name=should_show_slide_navigator,json=shouldShowSlideNavigator" json:"should_show_slide_navigator,omitempty"`
	IsMultiPresenterShow         *bool                                          `protobuf:"varint,10,opt,name=is_multi_presenter_show,json=isMultiPresenterShow" json:"is_multi_presenter_show,omitempty"`
}

func (x *IOSSavedPlaybackStateArchive) Reset() {
	*x = IOSSavedPlaybackStateArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNArchives_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IOSSavedPlaybackStateArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IOSSavedPlaybackStateArchive) ProtoMessage() {}

func (x *IOSSavedPlaybackStateArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNArchives_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IOSSavedPlaybackStateArchive.ProtoReflect.Descriptor instead.
func (*IOSSavedPlaybackStateArchive) Descriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{18}
}

func (x *IOSSavedPlaybackStateArchive) GetPresentationType() IOSSavedPlaybackStateArchive_PresentationType {
	if x != nil && x.PresentationType != nil {
		return *x.PresentationType
	}
	return IOSSavedPlaybackStateArchive_Manual
}

func (x *IOSSavedPlaybackStateArchive) GetSlideNodeIndex() uint32 {
	if x != nil && x.SlideNodeIndex != nil {
		return *x.SlideNodeIndex
	}
	return 0
}

func (x *IOSSavedPlaybackStateArchive) GetEventIndex() uint32 {
	if x != nil && x.EventIndex != nil {
		return *x.EventIndex
	}
	return 0
}

func (x *IOSSavedPlaybackStateArchive) GetBreadcrumbTrail() []string {
	if x != nil {
		return x.BreadcrumbTrail
	}
	return nil
}

func (x *IOSSavedPlaybackStateArchive) GetHadExternalDisplay() bool {
	if x != nil && x.HadExternalDisplay != nil {
		return *x.HadExternalDisplay
	}
	return false
}

func (x *IOSSavedPlaybackStateArchive) GetIsElapsedTimeStarted() bool {
	if x != nil && x.IsElapsedTimeStarted != nil {
		return *x.IsElapsedTimeStarted
	}
	return false
}

func (x *IOSSavedPlaybackStateArchive) GetElapsedTimeStartTime() float64 {
	if x != nil && x.ElapsedTimeStartTime != nil {
		return *x.ElapsedTimeStartTime
	}
	return 0
}

func (x *IOSSavedPlaybackStateArchive) GetRecordingPlaybackCurrentTime() float64 {
	if x != nil && x.RecordingPlaybackCurrentTime != nil {
		return *x.RecordingPlaybackCurrentTime
	}
	return 0
}

func (x *IOSSavedPlaybackStateArchive) GetShouldShowSlideNavigator() bool {
	if x != nil && x.ShouldShowSlideNavigator != nil {
		return *x.ShouldShowSlideNavigator
	}
	return false
}

func (x *IOSSavedPlaybackStateArchive) GetIsMultiPresenterShow() bool {
	if x != nil && x.IsMultiPresenterShow != nil {
		return *x.IsMultiPresenterShow
	}
	return false
}

type CanvasSelectionArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos                      []*Reference `protobuf:"bytes,1,rep,name=infos" json:"infos,omitempty"`
	NonInteractiveInfos        []*Reference `protobuf:"bytes,5,rep,name=non_interactive_infos,json=nonInteractiveInfos" json:"non_interactive_infos,omitempty"`
	InfosForActionGhostIndexes []*Reference `protobuf:"bytes,6,rep,name=infos_for_action_ghost_indexes,json=infosForActionGhostIndexes" json:"infos_for_action_ghost_indexes,omitempty"`
	ActionGhostIndexes         []*IndexSet  `protobuf:"bytes,3,rep,name=action_ghost_indexes,json=actionGhostIndexes" json:"action_ghost_indexes,omitempty"`
	BuildChunks                []*Reference `protobuf:"bytes,4,rep,name=build_chunks,json=buildChunks" json:"build_chunks,omitempty"`
	// Deprecated: Do not use.
	DatabaseActionGhostIndexes []uint32 `protobuf:"varint,2,rep,name=database_action_ghost_indexes,json=databaseActionGhostIndexes" json:"database_action_ghost_indexes,omitempty"`
}

func (x *CanvasSelectionArchive) Reset() {
	*x = CanvasSelectionArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNArchives_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CanvasSelectionArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CanvasSelectionArchive) ProtoMessage() {}

func (x *CanvasSelectionArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNArchives_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CanvasSelectionArchive.ProtoReflect.Descriptor instead.
func (*CanvasSelectionArchive) Descriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{19}
}

func (x *CanvasSelectionArchive) GetInfos() []*Reference {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *CanvasSelectionArchive) GetNonInteractiveInfos() []*Reference {
	if x != nil {
		return x.NonInteractiveInfos
	}
	return nil
}

func (x *CanvasSelectionArchive) GetInfosForActionGhostIndexes() []*Reference {
	if x != nil {
		return x.InfosForActionGhostIndexes
	}
	return nil
}

func (x *CanvasSelectionArchive) GetActionGhostIndexes() []*IndexSet {
	if x != nil {
		return x.ActionGhostIndexes
	}
	return nil
}

func (x *CanvasSelectionArchive) GetBuildChunks() []*Reference {
	if x != nil {
		return x.BuildChunks
	}
	return nil
}

// Deprecated: Do not use.
func (x *CanvasSelectionArchive) GetDatabaseActionGhostIndexes() []uint32 {
	if x != nil {
		return x.DatabaseActionGhostIndexes
	}
	return nil
}

type ActionGhostSelectionArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ActionGhostSelectionArchive) Reset() {
	*x = ActionGhostSelectionArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNArchives_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionGhostSelectionArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionGhostSelectionArchive) ProtoMessage() {}

func (x *ActionGhostSelectionArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNArchives_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionGhostSelectionArchive.ProtoReflect.Descriptor instead.
func (*ActionGhostSelectionArchive) Descriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{20}
}

type ThemeCustomTimingCurveArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  *string            `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Curve *PathSourceArchive `protobuf:"bytes,2,req,name=curve" json:"curve,omitempty"`
}

func (x *ThemeCustomTimingCurveArchive) Reset() {
	*x = ThemeCustomTimingCurveArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNArchives_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThemeCustomTimingCurveArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThemeCustomTimingCurveArchive) ProtoMessage() {}

func (x *ThemeCustomTimingCurveArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNArchives_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThemeCustomTimingCurveArchive.ProtoReflect.Descriptor instead.
func (*ThemeCustomTimingCurveArchive) Descriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{21}
}

func (x *ThemeCustomTimingCurveArchive) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ThemeCustomTimingCurveArchive) GetCurve() *PathSourceArchive {
	if x != nil {
		return x.Curve
	}
	return nil
}

type ThemeArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                                  *TSSThemeArchive                 `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Templates                              []*Reference                     `protobuf:"bytes,2,rep,name=templates" json:"templates,omitempty"`
	Uuid                                   *string                          `protobuf:"bytes,3,opt,name=uuid" json:"uuid,omitempty"`
	ClassicThemeRecords                    []*Reference                     `protobuf:"bytes,4,rep,name=classicThemeRecords" json:"classicThemeRecords,omitempty"`
	DefaultTemplateSlideNode               *Reference                       `protobuf:"bytes,5,opt,name=default_template_slide_node,json=defaultTemplateSlideNode" json:"default_template_slide_node,omitempty"`
	DefaultTemplateSlideNodeReference      *Reference                       `protobuf:"bytes,6,opt,name=default_template_slide_node_reference,json=defaultTemplateSlideNodeReference" json:"default_template_slide_node_reference,omitempty"`
	DefaultTemplateSlideNodeIsOurBestGuess *bool                            `protobuf:"varint,7,opt,name=default_template_slide_node_is_our_best_guess,json=defaultTemplateSlideNodeIsOurBestGuess" json:"default_template_slide_node_is_our_best_guess,omitempty"`
	CustomEffectTimingCurves               []*ThemeCustomTimingCurveArchive `protobuf:"bytes,8,rep,name=custom_effect_timing_curves,json=customEffectTimingCurves" json:"custom_effect_timing_curves,omitempty"`
	LiveVideoSourceCollection              *Reference                       `protobuf:"bytes,9,opt,name=live_video_source_collection,json=liveVideoSourceCollection" json:"live_video_source_collection,omitempty"`
}

func (x *ThemeArchive) Reset() {
	*x = ThemeArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNArchives_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThemeArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThemeArchive) ProtoMessage() {}

func (x *ThemeArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNArchives_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThemeArchive.ProtoReflect.Descriptor instead.
func (*ThemeArchive) Descriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{22}
}

func (x *ThemeArchive) GetSuper() *TSSThemeArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *ThemeArchive) GetTemplates() []*Reference {
	if x != nil {
		return x.Templates
	}
	return nil
}

func (x *ThemeArchive) GetUuid() string {
	if x != nil && x.Uuid != nil {
		return *x.Uuid
	}
	return ""
}

func (x *ThemeArchive) GetClassicThemeRecords() []*Reference {
	if x != nil {
		return x.ClassicThemeRecords
	}
	return nil
}

func (x *ThemeArchive) GetDefaultTemplateSlideNode() *Reference {
	if x != nil {
		return x.DefaultTemplateSlideNode
	}
	return nil
}

func (x *ThemeArchive) GetDefaultTemplateSlideNodeReference() *Reference {
	if x != nil {
		return x.DefaultTemplateSlideNodeReference
	}
	return nil
}

func (x *ThemeArchive) GetDefaultTemplateSlideNodeIsOurBestGuess() bool {
	if x != nil && x.DefaultTemplateSlideNodeIsOurBestGuess != nil {
		return *x.DefaultTemplateSlideNodeIsOurBestGuess
	}
	return false
}

func (x *ThemeArchive) GetCustomEffectTimingCurves() []*ThemeCustomTimingCurveArchive {
	if x != nil {
		return x.CustomEffectTimingCurves
	}
	return nil
}

func (x *ThemeArchive) GetLiveVideoSourceCollection() *Reference {
	if x != nil {
		return x.LiveVideoSourceCollection
	}
	return nil
}

type SlideTreeArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Do not use.
	RootSlideNode *Reference   `protobuf:"bytes,1,opt,name=rootSlideNode" json:"rootSlideNode,omitempty"`
	Slides        []*Reference `protobuf:"bytes,2,rep,name=slides" json:"slides,omitempty"`
}

func (x *SlideTreeArchive) Reset() {
	*x = SlideTreeArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNArchives_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlideTreeArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlideTreeArchive) ProtoMessage() {}

func (x *SlideTreeArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNArchives_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlideTreeArchive.ProtoReflect.Descriptor instead.
func (*SlideTreeArchive) Descriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{23}
}

// Deprecated: Do not use.
func (x *SlideTreeArchive) GetRootSlideNode() *Reference {
	if x != nil {
		return x.RootSlideNode
	}
	return nil
}

func (x *SlideTreeArchive) GetSlides() []*Reference {
	if x != nil {
		return x.Slides
	}
	return nil
}

type ShowArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UiState                    *Reference              `protobuf:"bytes,1,opt,name=uiState" json:"uiState,omitempty"`
	Theme                      *Reference              `protobuf:"bytes,2,req,name=theme" json:"theme,omitempty"`
	SlideTree                  *SlideTreeArchive       `protobuf:"bytes,3,req,name=slideTree" json:"slideTree,omitempty"`
	Size                       *Size                   `protobuf:"bytes,4,req,name=size" json:"size,omitempty"`
	Stylesheet                 *Reference              `protobuf:"bytes,5,req,name=stylesheet" json:"stylesheet,omitempty"`
	SlideNumbersVisible        *bool                   `protobuf:"varint,6,opt,name=slideNumbersVisible" json:"slideNumbersVisible,omitempty"`
	Recording                  *Reference              `protobuf:"bytes,7,opt,name=recording" json:"recording,omitempty"`
	LoopPresentation           *bool                   `protobuf:"varint,8,opt,name=loop_presentation,json=loopPresentation" json:"loop_presentation,omitempty"`
	Mode                       *ShowArchive_KNShowMode `protobuf:"varint,9,opt,name=mode,enum=KN.ShowArchive_KNShowMode,def=0" json:"mode,omitempty"`
	AutoplayTransitionDelay    *float64                `protobuf:"fixed64,10,opt,name=autoplay_transition_delay,json=autoplayTransitionDelay,def=5" json:"autoplay_transition_delay,omitempty"`
	AutoplayBuildDelay         *float64                `protobuf:"fixed64,11,opt,name=autoplay_build_delay,json=autoplayBuildDelay,def=2" json:"autoplay_build_delay,omitempty"`
	IdleTimerActive            *bool                   `protobuf:"varint,15,opt,name=idle_timer_active,json=idleTimerActive" json:"idle_timer_active,omitempty"`
	IdleTimerDelay             *float64                `protobuf:"fixed64,16,opt,name=idle_timer_delay,json=idleTimerDelay,def=900" json:"idle_timer_delay,omitempty"`
	Soundtrack                 *Reference              `protobuf:"bytes,17,opt,name=soundtrack" json:"soundtrack,omitempty"`
	AutomaticallyPlaysUponOpen *bool                   `protobuf:"varint,18,opt,name=automatically_plays_upon_open,json=automaticallyPlaysUponOpen" json:"automatically_plays_upon_open,omitempty"`
	SlideList                  *Reference              `protobuf:"bytes,19,opt,name=slideList" json:"slideList,omitempty"`
}

// Default values for ShowArchive fields.
const (
	Default_ShowArchive_Mode                    = ShowArchive_kKNShowModeNormal
	Default_ShowArchive_AutoplayTransitionDelay = float64(5)
	Default_ShowArchive_AutoplayBuildDelay      = float64(2)
	Default_ShowArchive_IdleTimerDelay          = float64(900)
)

func (x *ShowArchive) Reset() {
	*x = ShowArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNArchives_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowArchive) ProtoMessage() {}

func (x *ShowArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNArchives_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowArchive.ProtoReflect.Descriptor instead.
func (*ShowArchive) Descriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{24}
}

func (x *ShowArchive) GetUiState() *Reference {
	if x != nil {
		return x.UiState
	}
	return nil
}

func (x *ShowArchive) GetTheme() *Reference {
	if x != nil {
		return x.Theme
	}
	return nil
}

func (x *ShowArchive) GetSlideTree() *SlideTreeArchive {
	if x != nil {
		return x.SlideTree
	}
	return nil
}

func (x *ShowArchive) GetSize() *Size {
	if x != nil {
		return x.Size
	}
	return nil
}

func (x *ShowArchive) GetStylesheet() *Reference {
	if x != nil {
		return x.Stylesheet
	}
	return nil
}

func (x *ShowArchive) GetSlideNumbersVisible() bool {
	if x != nil && x.SlideNumbersVisible != nil {
		return *x.SlideNumbersVisible
	}
	return false
}

func (x *ShowArchive) GetRecording() *Reference {
	if x != nil {
		return x.Recording
	}
	return nil
}

func (x *ShowArchive) GetLoopPresentation() bool {
	if x != nil && x.LoopPresentation != nil {
		return *x.LoopPresentation
	}
	return false
}

func (x *ShowArchive) GetMode() ShowArchive_KNShowMode {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return Default_ShowArchive_Mode
}

func (x *ShowArchive) GetAutoplayTransitionDelay() float64 {
	if x != nil && x.AutoplayTransitionDelay != nil {
		return *x.AutoplayTransitionDelay
	}
	return Default_ShowArchive_AutoplayTransitionDelay
}

func (x *ShowArchive) GetAutoplayBuildDelay() float64 {
	if x != nil && x.AutoplayBuildDelay != nil {
		return *x.AutoplayBuildDelay
	}
	return Default_ShowArchive_AutoplayBuildDelay
}

func (x *ShowArchive) GetIdleTimerActive() bool {
	if x != nil && x.IdleTimerActive != nil {
		return *x.IdleTimerActive
	}
	return false
}

func (x *ShowArchive) GetIdleTimerDelay() float64 {
	if x != nil && x.IdleTimerDelay != nil {
		return *x.IdleTimerDelay
	}
	return Default_ShowArchive_IdleTimerDelay
}

func (x *ShowArchive) GetSoundtrack() *Reference {
	if x != nil {
		return x.Soundtrack
	}
	return nil
}

func (x *ShowArchive) GetAutomaticallyPlaysUponOpen() bool {
	if x != nil && x.AutomaticallyPlaysUponOpen != nil {
		return *x.AutomaticallyPlaysUponOpen
	}
	return false
}

func (x *ShowArchive) GetSlideList() *Reference {
	if x != nil {
		return x.SlideList
	}
	return nil
}

type KNDocumentArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                  *TSADocumentArchive `protobuf:"bytes,3,req,name=super" json:"super,omitempty"`
	Show                   *Reference          `protobuf:"bytes,2,req,name=show" json:"show,omitempty"`
	TablesCustomFormatList *Reference          `protobuf:"bytes,4,opt,name=tables_custom_format_list,json=tablesCustomFormatList" json:"tables_custom_format_list,omitempty"`
}

func (x *KNDocumentArchive) Reset() {
	*x = KNDocumentArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNArchives_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KNDocumentArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KNDocumentArchive) ProtoMessage() {}

func (x *KNDocumentArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNArchives_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KNDocumentArchive.ProtoReflect.Descriptor instead.
func (*KNDocumentArchive) Descriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{25}
}

func (x *KNDocumentArchive) GetSuper() *TSADocumentArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *KNDocumentArchive) GetShow() *Reference {
	if x != nil {
		return x.Show
	}
	return nil
}

func (x *KNDocumentArchive) GetTablesCustomFormatList() *Reference {
	if x != nil {
		return x.TablesCustomFormatList
	}
	return nil
}

type SlideStylePropertiesArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fill                             *FillArchive                 `protobuf:"bytes,1,opt,name=fill" json:"fill,omitempty"`
	Transition                       *TransitionAttributesArchive `protobuf:"bytes,2,opt,name=transition" json:"transition,omitempty"`
	TransitionNull                   *bool                        `protobuf:"varint,3,opt,name=transition_null,json=transitionNull" json:"transition_null,omitempty"`
	TitlePlaceholderVisibility       *bool                        `protobuf:"varint,4,opt,name=titlePlaceholderVisibility" json:"titlePlaceholderVisibility,omitempty"`
	BodyPlaceholderVisibility        *bool                        `protobuf:"varint,5,opt,name=bodyPlaceholderVisibility" json:"bodyPlaceholderVisibility,omitempty"`
	ObjectPlaceholderVisibility      *bool                        `protobuf:"varint,7,opt,name=objectPlaceholderVisibility" json:"objectPlaceholderVisibility,omitempty"`
	SlideNumberPlaceholderVisibility *bool                        `protobuf:"varint,6,opt,name=slideNumberPlaceholderVisibility" json:"slideNumberPlaceholderVisibility,omitempty"`
}

func (x *SlideStylePropertiesArchive) Reset() {
	*x = SlideStylePropertiesArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNArchives_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlideStylePropertiesArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlideStylePropertiesArchive) ProtoMessage() {}

func (x *SlideStylePropertiesArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNArchives_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlideStylePropertiesArchive.ProtoReflect.Descriptor instead.
func (*SlideStylePropertiesArchive) Descriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{26}
}

func (x *SlideStylePropertiesArchive) GetFill() *FillArchive {
	if x != nil {
		return x.Fill
	}
	return nil
}

func (x *SlideStylePropertiesArchive) GetTransition() *TransitionAttributesArchive {
	if x != nil {
		return x.Transition
	}
	return nil
}

func (x *SlideStylePropertiesArchive) GetTransitionNull() bool {
	if x != nil && x.TransitionNull != nil {
		return *x.TransitionNull
	}
	return false
}

func (x *SlideStylePropertiesArchive) GetTitlePlaceholderVisibility() bool {
	if x != nil && x.TitlePlaceholderVisibility != nil {
		return *x.TitlePlaceholderVisibility
	}
	return false
}

func (x *SlideStylePropertiesArchive) GetBodyPlaceholderVisibility() bool {
	if x != nil && x.BodyPlaceholderVisibility != nil {
		return *x.BodyPlaceholderVisibility
	}
	return false
}

func (x *SlideStylePropertiesArchive) GetObjectPlaceholderVisibility() bool {
	if x != nil && x.ObjectPlaceholderVisibility != nil {
		return *x.ObjectPlaceholderVisibility
	}
	return false
}

func (x *SlideStylePropertiesArchive) GetSlideNumberPlaceholderVisibility() bool {
	if x != nil && x.SlideNumberPlaceholderVisibility != nil {
		return *x.SlideNumberPlaceholderVisibility
	}
	return false
}

type SlideStyleArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super           *StyleArchive                `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	OverrideCount   *uint32                      `protobuf:"varint,10,opt,name=override_count,json=overrideCount,def=0" json:"override_count,omitempty"`
	SlideProperties *SlideStylePropertiesArchive `protobuf:"bytes,11,opt,name=slide_properties,json=slideProperties" json:"slide_properties,omitempty"`
}

// Default values for SlideStyleArchive fields.
const (
	Default_SlideStyleArchive_OverrideCount = uint32(0)
)

func (x *SlideStyleArchive) Reset() {
	*x = SlideStyleArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNArchives_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlideStyleArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlideStyleArchive) ProtoMessage() {}

func (x *SlideStyleArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNArchives_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlideStyleArchive.ProtoReflect.Descriptor instead.
func (*SlideStyleArchive) Descriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{27}
}

func (x *SlideStyleArchive) GetSuper() *StyleArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *SlideStyleArchive) GetOverrideCount() uint32 {
	if x != nil && x.OverrideCount != nil {
		return *x.OverrideCount
	}
	return Default_SlideStyleArchive_OverrideCount
}

func (x *SlideStyleArchive) GetSlideProperties() *SlideStylePropertiesArchive {
	if x != nil {
		return x.SlideProperties
	}
	return nil
}

type PasteboardNativeStorageArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Drawables                          []*Reference                                          `protobuf:"bytes,1,rep,name=drawables" json:"drawables,omitempty"`
	Builds                             []*Reference                                          `protobuf:"bytes,2,rep,name=builds" json:"builds,omitempty"`
	BuildChunks                        []*Reference                                          `protobuf:"bytes,3,rep,name=buildChunks" json:"buildChunks,omitempty"`
	SlideNodes                         []*Reference                                          `protobuf:"bytes,4,rep,name=slideNodes" json:"slideNodes,omitempty"`
	DisplayedSlideNodes                []*Reference                                          `protobuf:"bytes,12,rep,name=displayed_slide_nodes,json=displayedSlideNodes" json:"displayed_slide_nodes,omitempty"`
	TemplateSlideNodes                 []*Reference                                          `protobuf:"bytes,9,rep,name=template_slide_nodes,json=templateSlideNodes" json:"template_slide_nodes,omitempty"`
	CollapsedSlideNodes                []*Reference                                          `protobuf:"bytes,10,rep,name=collapsedSlideNodes" json:"collapsedSlideNodes,omitempty"`
	OutlineCollapsedSlideNodes         []*Reference                                          `protobuf:"bytes,11,rep,name=outlineCollapsedSlideNodes" json:"outlineCollapsedSlideNodes,omitempty"`
	OutlineHasBodySlideNodes           []*Reference                                          `protobuf:"bytes,13,rep,name=outlineHasBodySlideNodes" json:"outlineHasBodySlideNodes,omitempty"`
	OriginalShowSize                   *Size                                                 `protobuf:"bytes,5,opt,name=originalShowSize" json:"originalShowSize,omitempty"`
	TitleRanges                        []*Range                                              `protobuf:"bytes,6,rep,name=titleRanges" json:"titleRanges,omitempty"`
	GeometriesInRoot                   []*GeometryArchive                                    `protobuf:"bytes,7,rep,name=geometries_in_root,json=geometriesInRoot" json:"geometries_in_root,omitempty"`
	SlideNodeUniqueIdentifier          *string                                               `protobuf:"bytes,8,opt,name=slide_node_unique_identifier,json=slideNodeUniqueIdentifier" json:"slide_node_unique_identifier,omitempty"`
	CustomEffectTimingCurves           []*ThemeCustomTimingCurveArchive                      `protobuf:"bytes,14,rep,name=custom_effect_timing_curves,json=customEffectTimingCurves" json:"custom_effect_timing_curves,omitempty"`
	OriginalSlideNode_UUIDs            []string                                              `protobuf:"bytes,15,rep,name=original_slide_node_UUIDs,json=originalSlideNodeUUIDs" json:"original_slide_node_UUIDs,omitempty"`
	SlideNodesHaveDatasNeedingDownload *bool                                                 `protobuf:"varint,16,opt,name=slide_nodes_have_datas_needing_download,json=slideNodesHaveDatasNeedingDownload" json:"slide_nodes_have_datas_needing_download,omitempty"`
	Transition                         *TransitionArchive                                    `protobuf:"bytes,17,opt,name=transition" json:"transition,omitempty"`
	LiveVideoSources                   []*PasteboardNativeStorageArchive_LiveVideoSourcePair `protobuf:"bytes,18,rep,name=live_video_sources,json=liveVideoSources" json:"live_video_sources,omitempty"`
}

func (x *PasteboardNativeStorageArchive) Reset() {
	*x = PasteboardNativeStorageArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNArchives_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasteboardNativeStorageArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasteboardNativeStorageArchive) ProtoMessage() {}

func (x *PasteboardNativeStorageArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNArchives_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasteboardNativeStorageArchive.ProtoReflect.Descriptor instead.
func (*PasteboardNativeStorageArchive) Descriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{28}
}

func (x *PasteboardNativeStorageArchive) GetDrawables() []*Reference {
	if x != nil {
		return x.Drawables
	}
	return nil
}

func (x *PasteboardNativeStorageArchive) GetBuilds() []*Reference {
	if x != nil {
		return x.Builds
	}
	return nil
}

func (x *PasteboardNativeStorageArchive) GetBuildChunks() []*Reference {
	if x != nil {
		return x.BuildChunks
	}
	return nil
}

func (x *PasteboardNativeStorageArchive) GetSlideNodes() []*Reference {
	if x != nil {
		return x.SlideNodes
	}
	return nil
}

func (x *PasteboardNativeStorageArchive) GetDisplayedSlideNodes() []*Reference {
	if x != nil {
		return x.DisplayedSlideNodes
	}
	return nil
}

func (x *PasteboardNativeStorageArchive) GetTemplateSlideNodes() []*Reference {
	if x != nil {
		return x.TemplateSlideNodes
	}
	return nil
}

func (x *PasteboardNativeStorageArchive) GetCollapsedSlideNodes() []*Reference {
	if x != nil {
		return x.CollapsedSlideNodes
	}
	return nil
}

func (x *PasteboardNativeStorageArchive) GetOutlineCollapsedSlideNodes() []*Reference {
	if x != nil {
		return x.OutlineCollapsedSlideNodes
	}
	return nil
}

func (x *PasteboardNativeStorageArchive) GetOutlineHasBodySlideNodes() []*Reference {
	if x != nil {
		return x.OutlineHasBodySlideNodes
	}
	return nil
}

func (x *PasteboardNativeStorageArchive) GetOriginalShowSize() *Size {
	if x != nil {
		return x.OriginalShowSize
	}
	return nil
}

func (x *PasteboardNativeStorageArchive) GetTitleRanges() []*Range {
	if x != nil {
		return x.TitleRanges
	}
	return nil
}

func (x *PasteboardNativeStorageArchive) GetGeometriesInRoot() []*GeometryArchive {
	if x != nil {
		return x.GeometriesInRoot
	}
	return nil
}

func (x *PasteboardNativeStorageArchive) GetSlideNodeUniqueIdentifier() string {
	if x != nil && x.SlideNodeUniqueIdentifier != nil {
		return *x.SlideNodeUniqueIdentifier
	}
	return ""
}

func (x *PasteboardNativeStorageArchive) GetCustomEffectTimingCurves() []*ThemeCustomTimingCurveArchive {
	if x != nil {
		return x.CustomEffectTimingCurves
	}
	return nil
}

func (x *PasteboardNativeStorageArchive) GetOriginalSlideNode_UUIDs() []string {
	if x != nil {
		return x.OriginalSlideNode_UUIDs
	}
	return nil
}

func (x *PasteboardNativeStorageArchive) GetSlideNodesHaveDatasNeedingDownload() bool {
	if x != nil && x.SlideNodesHaveDatasNeedingDownload != nil {
		return *x.SlideNodesHaveDatasNeedingDownload
	}
	return false
}

func (x *PasteboardNativeStorageArchive) GetTransition() *TransitionArchive {
	if x != nil {
		return x.Transition
	}
	return nil
}

func (x *PasteboardNativeStorageArchive) GetLiveVideoSources() []*PasteboardNativeStorageArchive_LiveVideoSourcePair {
	if x != nil {
		return x.LiveVideoSources
	}
	return nil
}

type PrototypeForUndoTemplateChangeArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlideStyle          *Reference   `protobuf:"bytes,1,opt,name=slide_style,json=slideStyle" json:"slide_style,omitempty"`
	TemplateSlideId     *UUID        `protobuf:"bytes,2,req,name=template_slide_id,json=templateSlideId" json:"template_slide_id,omitempty"`
	DrawableInfoIdList  []*UUID      `protobuf:"bytes,3,rep,name=drawable_info_id_list,json=drawableInfoIdList" json:"drawable_info_id_list,omitempty"`
	Placeholders        []*Reference `protobuf:"bytes,4,rep,name=placeholders" json:"placeholders,omitempty"`
	PlaceholderTagsList []string     `protobuf:"bytes,5,rep,name=placeholder_tags_list,json=placeholderTagsList" json:"placeholder_tags_list,omitempty"`
}

func (x *PrototypeForUndoTemplateChangeArchive) Reset() {
	*x = PrototypeForUndoTemplateChangeArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNArchives_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrototypeForUndoTemplateChangeArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrototypeForUndoTemplateChangeArchive) ProtoMessage() {}

func (x *PrototypeForUndoTemplateChangeArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNArchives_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrototypeForUndoTemplateChangeArchive.ProtoReflect.Descriptor instead.
func (*PrototypeForUndoTemplateChangeArchive) Descriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{29}
}

func (x *PrototypeForUndoTemplateChangeArchive) GetSlideStyle() *Reference {
	if x != nil {
		return x.SlideStyle
	}
	return nil
}

func (x *PrototypeForUndoTemplateChangeArchive) GetTemplateSlideId() *UUID {
	if x != nil {
		return x.TemplateSlideId
	}
	return nil
}

func (x *PrototypeForUndoTemplateChangeArchive) GetDrawableInfoIdList() []*UUID {
	if x != nil {
		return x.DrawableInfoIdList
	}
	return nil
}

func (x *PrototypeForUndoTemplateChangeArchive) GetPlaceholders() []*Reference {
	if x != nil {
		return x.Placeholders
	}
	return nil
}

func (x *PrototypeForUndoTemplateChangeArchive) GetPlaceholderTagsList() []string {
	if x != nil {
		return x.PlaceholderTagsList
	}
	return nil
}

type RecordingArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventTracks []*Reference `protobuf:"bytes,1,rep,name=event_tracks,json=eventTracks" json:"event_tracks,omitempty"`
	MovieTrack  *Reference   `protobuf:"bytes,2,opt,name=movie_track,json=movieTrack" json:"movie_track,omitempty"`
	Duration    *float64     `protobuf:"fixed64,3,opt,name=duration" json:"duration,omitempty"`
	// Deprecated: Do not use.
	SyncStateEnum     *RecordingArchive_RecordingSyncStateEnum `protobuf:"varint,4,opt,name=sync_state_enum,json=syncStateEnum,enum=KN.RecordingArchive_RecordingSyncStateEnum,def=0" json:"sync_state_enum,omitempty"`
	ModificationDate  *Date                                    `protobuf:"bytes,5,opt,name=modification_date,json=modificationDate" json:"modification_date,omitempty"`
	SyncState         *RecordingSyncState                      `protobuf:"bytes,6,opt,name=sync_state,json=syncState" json:"sync_state,omitempty"`
	CorrectionHistory *RecordingCorrectionHistory              `protobuf:"bytes,7,opt,name=correction_history,json=correctionHistory" json:"correction_history,omitempty"`
}

// Default values for RecordingArchive fields.
const (
	Default_RecordingArchive_SyncStateEnum = RecordingArchive_kRecordingSyncStateInSyncWithShow
)

func (x *RecordingArchive) Reset() {
	*x = RecordingArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNArchives_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordingArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordingArchive) ProtoMessage() {}

func (x *RecordingArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNArchives_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordingArchive.ProtoReflect.Descriptor instead.
func (*RecordingArchive) Descriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{30}
}

func (x *RecordingArchive) GetEventTracks() []*Reference {
	if x != nil {
		return x.EventTracks
	}
	return nil
}

func (x *RecordingArchive) GetMovieTrack() *Reference {
	if x != nil {
		return x.MovieTrack
	}
	return nil
}

func (x *RecordingArchive) GetDuration() float64 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

// Deprecated: Do not use.
func (x *RecordingArchive) GetSyncStateEnum() RecordingArchive_RecordingSyncStateEnum {
	if x != nil && x.SyncStateEnum != nil {
		return *x.SyncStateEnum
	}
	return Default_RecordingArchive_SyncStateEnum
}

func (x *RecordingArchive) GetModificationDate() *Date {
	if x != nil {
		return x.ModificationDate
	}
	return nil
}

func (x *RecordingArchive) GetSyncState() *RecordingSyncState {
	if x != nil {
		return x.SyncState
	}
	return nil
}

func (x *RecordingArchive) GetCorrectionHistory() *RecordingCorrectionHistory {
	if x != nil {
		return x.CorrectionHistory
	}
	return nil
}

type RecordingSyncState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutOfSyncToken         *UUID `protobuf:"bytes,1,opt,name=out_of_sync_token,json=outOfSyncToken" json:"out_of_sync_token,omitempty"`
	CanClearOutOfSyncToken *bool `protobuf:"varint,2,opt,name=can_clear_out_of_sync_token,json=canClearOutOfSyncToken,def=0" json:"can_clear_out_of_sync_token,omitempty"`
}

// Default values for RecordingSyncState fields.
const (
	Default_RecordingSyncState_CanClearOutOfSyncToken = bool(false)
)

func (x *RecordingSyncState) Reset() {
	*x = RecordingSyncState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNArchives_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordingSyncState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordingSyncState) ProtoMessage() {}

func (x *RecordingSyncState) ProtoReflect() protoreflect.Message {
	mi := &file_KNArchives_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordingSyncState.ProtoReflect.Descriptor instead.
func (*RecordingSyncState) Descriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{31}
}

func (x *RecordingSyncState) GetOutOfSyncToken() *UUID {
	if x != nil {
		return x.OutOfSyncToken
	}
	return nil
}

func (x *RecordingSyncState) GetCanClearOutOfSyncToken() bool {
	if x != nil && x.CanClearOutOfSyncToken != nil {
		return *x.CanClearOutOfSyncToken
	}
	return Default_RecordingSyncState_CanClearOutOfSyncToken
}

type RecordingCorrectionHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DidAddMissingEventsForRadar_49654305 *bool `protobuf:"varint,1,opt,name=did_add_missing_events_for_radar_49654305,json=didAddMissingEventsForRadar49654305" json:"did_add_missing_events_for_radar_49654305,omitempty"`
}

func (x *RecordingCorrectionHistory) Reset() {
	*x = RecordingCorrectionHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNArchives_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordingCorrectionHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordingCorrectionHistory) ProtoMessage() {}

func (x *RecordingCorrectionHistory) ProtoReflect() protoreflect.Message {
	mi := &file_KNArchives_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordingCorrectionHistory.ProtoReflect.Descriptor instead.
func (*RecordingCorrectionHistory) Descriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{32}
}

func (x *RecordingCorrectionHistory) GetDidAddMissingEventsForRadar_49654305() bool {
	if x != nil && x.DidAddMissingEventsForRadar_49654305 != nil {
		return *x.DidAddMissingEventsForRadar_49654305
	}
	return false
}

type RecordingEventTrackArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   *string                  `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Events []*RecordingEventArchive `protobuf:"bytes,2,rep,name=events" json:"events,omitempty"`
}

func (x *RecordingEventTrackArchive) Reset() {
	*x = RecordingEventTrackArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNArchives_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordingEventTrackArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordingEventTrackArchive) ProtoMessage() {}

func (x *RecordingEventTrackArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNArchives_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordingEventTrackArchive.ProtoReflect.Descriptor instead.
func (*RecordingEventTrackArchive) Descriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{33}
}

func (x *RecordingEventTrackArchive) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *RecordingEventTrackArchive) GetEvents() []*RecordingEventArchive {
	if x != nil {
		return x.Events
	}
	return nil
}

type RecordingEventArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime              *float64                         `protobuf:"fixed64,1,opt,name=start_time,json=startTime,def=-1" json:"start_time,omitempty"`
	NavigationEventArchive *RecordingNavigationEventArchive `protobuf:"bytes,1000,opt,name=navigation_event_archive,json=navigationEventArchive" json:"navigation_event_archive,omitempty"`
	LaserEventArchive      *RecordingLaserEventArchive      `protobuf:"bytes,1001,opt,name=laser_event_archive,json=laserEventArchive" json:"laser_event_archive,omitempty"`
	PauseEventArchive      *RecordingPauseEventArchive      `protobuf:"bytes,1002,opt,name=pause_event_archive,json=pauseEventArchive" json:"pause_event_archive,omitempty"`
	MovieEventArchive      *RecordingMovieEventArchive      `protobuf:"bytes,1003,opt,name=movie_event_archive,json=movieEventArchive" json:"movie_event_archive,omitempty"`
}

// Default values for RecordingEventArchive fields.
const (
	Default_RecordingEventArchive_StartTime = float64(-1)
)

func (x *RecordingEventArchive) Reset() {
	*x = RecordingEventArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNArchives_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordingEventArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordingEventArchive) ProtoMessage() {}

func (x *RecordingEventArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNArchives_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordingEventArchive.ProtoReflect.Descriptor instead.
func (*RecordingEventArchive) Descriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{34}
}

func (x *RecordingEventArchive) GetStartTime() float64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return Default_RecordingEventArchive_StartTime
}

func (x *RecordingEventArchive) GetNavigationEventArchive() *RecordingNavigationEventArchive {
	if x != nil {
		return x.NavigationEventArchive
	}
	return nil
}

func (x *RecordingEventArchive) GetLaserEventArchive() *RecordingLaserEventArchive {
	if x != nil {
		return x.LaserEventArchive
	}
	return nil
}

func (x *RecordingEventArchive) GetPauseEventArchive() *RecordingPauseEventArchive {
	if x != nil {
		return x.PauseEventArchive
	}
	return nil
}

func (x *RecordingEventArchive) GetMovieEventArchive() *RecordingMovieEventArchive {
	if x != nil {
		return x.MovieEventArchive
	}
	return nil
}

type RecordingNavigationEventArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetSlideNodeId        *UUID                                                                   `protobuf:"bytes,4,opt,name=target_slide_node_id,json=targetSlideNodeId" json:"target_slide_node_id,omitempty"`
	TargetSlideNodeReference *Reference                                                              `protobuf:"bytes,1,opt,name=target_slide_node_reference,json=targetSlideNodeReference" json:"target_slide_node_reference,omitempty"`
	TargetEventIndex         *uint32                                                                 `protobuf:"varint,2,opt,name=target_event_index,json=targetEventIndex" json:"target_event_index,omitempty"`
	AnimationPhase           *RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase `protobuf:"varint,3,opt,name=animation_phase,json=animationPhase,enum=KN.RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase,def=0" json:"animation_phase,omitempty"`
}

// Default values for RecordingNavigationEventArchive fields.
const (
	Default_RecordingNavigationEventArchive_AnimationPhase = RecordingNavigationEventArchive_kRecordingNavigationEventAnimationNone
)

func (x *RecordingNavigationEventArchive) Reset() {
	*x = RecordingNavigationEventArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNArchives_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordingNavigationEventArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordingNavigationEventArchive) ProtoMessage() {}

func (x *RecordingNavigationEventArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNArchives_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordingNavigationEventArchive.ProtoReflect.Descriptor instead.
func (*RecordingNavigationEventArchive) Descriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{35}
}

func (x *RecordingNavigationEventArchive) GetTargetSlideNodeId() *UUID {
	if x != nil {
		return x.TargetSlideNodeId
	}
	return nil
}

func (x *RecordingNavigationEventArchive) GetTargetSlideNodeReference() *Reference {
	if x != nil {
		return x.TargetSlideNodeReference
	}
	return nil
}

func (x *RecordingNavigationEventArchive) GetTargetEventIndex() uint32 {
	if x != nil && x.TargetEventIndex != nil {
		return *x.TargetEventIndex
	}
	return 0
}

func (x *RecordingNavigationEventArchive) GetAnimationPhase() RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase {
	if x != nil && x.AnimationPhase != nil {
		return *x.AnimationPhase
	}
	return Default_RecordingNavigationEventArchive_AnimationPhase
}

type RecordingLaserEventArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Do not use.
	UnscaledLocation *Point `protobuf:"bytes,1,opt,name=unscaled_location,json=unscaledLocation" json:"unscaled_location,omitempty"`
	UnitLocation     *Point `protobuf:"bytes,2,opt,name=unit_location,json=unitLocation" json:"unit_location,omitempty"`
}

func (x *RecordingLaserEventArchive) Reset() {
	*x = RecordingLaserEventArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNArchives_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordingLaserEventArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordingLaserEventArchive) ProtoMessage() {}

func (x *RecordingLaserEventArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNArchives_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordingLaserEventArchive.ProtoReflect.Descriptor instead.
func (*RecordingLaserEventArchive) Descriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{36}
}

// Deprecated: Do not use.
func (x *RecordingLaserEventArchive) GetUnscaledLocation() *Point {
	if x != nil {
		return x.UnscaledLocation
	}
	return nil
}

func (x *RecordingLaserEventArchive) GetUnitLocation() *Point {
	if x != nil {
		return x.UnitLocation
	}
	return nil
}

type RecordingPauseEventArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PauseEventType *RecordingPauseEventArchive_RecordingPauseEventType `protobuf:"varint,1,opt,name=pause_event_type,json=pauseEventType,enum=KN.RecordingPauseEventArchive_RecordingPauseEventType,def=0" json:"pause_event_type,omitempty"`
}

// Default values for RecordingPauseEventArchive fields.
const (
	Default_RecordingPauseEventArchive_PauseEventType = RecordingPauseEventArchive_kRecordingPauseEventTypeResume
)

func (x *RecordingPauseEventArchive) Reset() {
	*x = RecordingPauseEventArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNArchives_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordingPauseEventArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordingPauseEventArchive) ProtoMessage() {}

func (x *RecordingPauseEventArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNArchives_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordingPauseEventArchive.ProtoReflect.Descriptor instead.
func (*RecordingPauseEventArchive) Descriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{37}
}

func (x *RecordingPauseEventArchive) GetPauseEventType() RecordingPauseEventArchive_RecordingPauseEventType {
	if x != nil && x.PauseEventType != nil {
		return *x.PauseEventType
	}
	return Default_RecordingPauseEventArchive_PauseEventType
}

type RecordingMovieEventArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MovieInfoReference                       *Reference                                          `protobuf:"bytes,1,opt,name=movie_info_reference,json=movieInfoReference" json:"movie_info_reference,omitempty"`
	MovieEventType                           *RecordingMovieEventArchive_RecordingMovieEventType `protobuf:"varint,2,opt,name=movie_event_type,json=movieEventType,enum=KN.RecordingMovieEventArchive_RecordingMovieEventType,def=1" json:"movie_event_type,omitempty"`
	MovieEventValue                          *float64                                            `protobuf:"fixed64,3,opt,name=movie_event_value,json=movieEventValue" json:"movie_event_value,omitempty"`
	MovieInfoThatPlayedAcrossSlidesReference *Reference                                          `protobuf:"bytes,4,opt,name=movie_info_that_played_across_slides_reference,json=movieInfoThatPlayedAcrossSlidesReference" json:"movie_info_that_played_across_slides_reference,omitempty"`
	MovieSlideNodeId                         *UUID                                               `protobuf:"bytes,5,opt,name=movie_slide_node_id,json=movieSlideNodeId" json:"movie_slide_node_id,omitempty"`
}

// Default values for RecordingMovieEventArchive fields.
const (
	Default_RecordingMovieEventArchive_MovieEventType = RecordingMovieEventArchive_kRecordingMovieEventSeek
)

func (x *RecordingMovieEventArchive) Reset() {
	*x = RecordingMovieEventArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNArchives_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordingMovieEventArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordingMovieEventArchive) ProtoMessage() {}

func (x *RecordingMovieEventArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNArchives_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordingMovieEventArchive.ProtoReflect.Descriptor instead.
func (*RecordingMovieEventArchive) Descriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{38}
}

func (x *RecordingMovieEventArchive) GetMovieInfoReference() *Reference {
	if x != nil {
		return x.MovieInfoReference
	}
	return nil
}

func (x *RecordingMovieEventArchive) GetMovieEventType() RecordingMovieEventArchive_RecordingMovieEventType {
	if x != nil && x.MovieEventType != nil {
		return *x.MovieEventType
	}
	return Default_RecordingMovieEventArchive_MovieEventType
}

func (x *RecordingMovieEventArchive) GetMovieEventValue() float64 {
	if x != nil && x.MovieEventValue != nil {
		return *x.MovieEventValue
	}
	return 0
}

func (x *RecordingMovieEventArchive) GetMovieInfoThatPlayedAcrossSlidesReference() *Reference {
	if x != nil {
		return x.MovieInfoThatPlayedAcrossSlidesReference
	}
	return nil
}

func (x *RecordingMovieEventArchive) GetMovieSlideNodeId() *UUID {
	if x != nil {
		return x.MovieSlideNodeId
	}
	return nil
}

type RecordingMovieTrackArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MovieSegments                       []*MovieSegmentArchive `protobuf:"bytes,1,rep,name=movie_segments,json=movieSegments" json:"movie_segments,omitempty"`
	IsMovieSegmentDataTrimmedToDuration *bool                  `protobuf:"varint,2,opt,name=is_movie_segment_data_trimmed_to_duration,json=isMovieSegmentDataTrimmedToDuration" json:"is_movie_segment_data_trimmed_to_duration,omitempty"`
}

func (x *RecordingMovieTrackArchive) Reset() {
	*x = RecordingMovieTrackArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNArchives_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordingMovieTrackArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordingMovieTrackArchive) ProtoMessage() {}

func (x *RecordingMovieTrackArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNArchives_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordingMovieTrackArchive.ProtoReflect.Descriptor instead.
func (*RecordingMovieTrackArchive) Descriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{39}
}

func (x *RecordingMovieTrackArchive) GetMovieSegments() []*MovieSegmentArchive {
	if x != nil {
		return x.MovieSegments
	}
	return nil
}

func (x *RecordingMovieTrackArchive) GetIsMovieSegmentDataTrimmedToDuration() bool {
	if x != nil && x.IsMovieSegmentDataTrimmedToDuration != nil {
		return *x.IsMovieSegmentDataTrimmedToDuration
	}
	return false
}

type MovieSegmentArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MovieData         *DataReference `protobuf:"bytes,3,opt,name=movie_data,json=movieData" json:"movie_data,omitempty"`
	StartTime         *float64       `protobuf:"fixed64,2,opt,name=start_time,json=startTime,def=-1" json:"start_time,omitempty"`
	DatabaseMovieData *Reference     `protobuf:"bytes,1,opt,name=database_movie_data,json=databaseMovieData" json:"database_movie_data,omitempty"`
}

// Default values for MovieSegmentArchive fields.
const (
	Default_MovieSegmentArchive_StartTime = float64(-1)
)

func (x *MovieSegmentArchive) Reset() {
	*x = MovieSegmentArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNArchives_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MovieSegmentArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovieSegmentArchive) ProtoMessage() {}

func (x *MovieSegmentArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNArchives_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovieSegmentArchive.ProtoReflect.Descriptor instead.
func (*MovieSegmentArchive) Descriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{40}
}

func (x *MovieSegmentArchive) GetMovieData() *DataReference {
	if x != nil {
		return x.MovieData
	}
	return nil
}

func (x *MovieSegmentArchive) GetStartTime() float64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return Default_MovieSegmentArchive_StartTime
}

func (x *MovieSegmentArchive) GetDatabaseMovieData() *Reference {
	if x != nil {
		return x.DatabaseMovieData
	}
	return nil
}

type Soundtrack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Volume     *float64                   `protobuf:"fixed64,1,opt,name=volume" json:"volume,omitempty"`
	Mode       *Soundtrack_SoundtrackMode `protobuf:"varint,2,opt,name=mode,enum=KN.Soundtrack_SoundtrackMode,def=0" json:"mode,omitempty"`
	MovieMedia []*DataReference           `protobuf:"bytes,3,rep,name=movie_media,json=movieMedia" json:"movie_media,omitempty"`
}

// Default values for Soundtrack fields.
const (
	Default_Soundtrack_Mode = Soundtrack_kKNSoundtrackModePlayOnce
)

func (x *Soundtrack) Reset() {
	*x = Soundtrack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNArchives_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Soundtrack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Soundtrack) ProtoMessage() {}

func (x *Soundtrack) ProtoReflect() protoreflect.Message {
	mi := &file_KNArchives_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Soundtrack.ProtoReflect.Descriptor instead.
func (*Soundtrack) Descriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{41}
}

func (x *Soundtrack) GetVolume() float64 {
	if x != nil && x.Volume != nil {
		return *x.Volume
	}
	return 0
}

func (x *Soundtrack) GetMode() Soundtrack_SoundtrackMode {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return Default_Soundtrack_Mode
}

func (x *Soundtrack) GetMovieMedia() []*DataReference {
	if x != nil {
		return x.MovieMedia
	}
	return nil
}

type SlideNumberAttachmentArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *TextualAttachmentArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
}

func (x *SlideNumberAttachmentArchive) Reset() {
	*x = SlideNumberAttachmentArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNArchives_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlideNumberAttachmentArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlideNumberAttachmentArchive) ProtoMessage() {}

func (x *SlideNumberAttachmentArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNArchives_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlideNumberAttachmentArchive.ProtoReflect.Descriptor instead.
func (*SlideNumberAttachmentArchive) Descriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{42}
}

func (x *SlideNumberAttachmentArchive) GetSuper() *TextualAttachmentArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

type SlideCollectionSelectionArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlideNodes                            []*Reference                                        `protobuf:"bytes,1,rep,name=slide_nodes,json=slideNodes" json:"slide_nodes,omitempty"`
	SlideNodeToEdit                       *Reference                                          `protobuf:"bytes,2,opt,name=slide_node_to_edit,json=slideNodeToEdit" json:"slide_node_to_edit,omitempty"`
	SelectedParagraphIndexesForSlideNodes []*SlideCollectionSelectionArchive_OutlineSelection `protobuf:"bytes,3,rep,name=selected_paragraph_indexes_for_slide_nodes,json=selectedParagraphIndexesForSlideNodes" json:"selected_paragraph_indexes_for_slide_nodes,omitempty"`
	RangeInSelectedParagraph              *Range                                              `protobuf:"bytes,4,opt,name=range_in_selected_paragraph,json=rangeInSelectedParagraph" json:"range_in_selected_paragraph,omitempty"`
}

func (x *SlideCollectionSelectionArchive) Reset() {
	*x = SlideCollectionSelectionArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNArchives_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlideCollectionSelectionArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlideCollectionSelectionArchive) ProtoMessage() {}

func (x *SlideCollectionSelectionArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNArchives_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlideCollectionSelectionArchive.ProtoReflect.Descriptor instead.
func (*SlideCollectionSelectionArchive) Descriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{43}
}

func (x *SlideCollectionSelectionArchive) GetSlideNodes() []*Reference {
	if x != nil {
		return x.SlideNodes
	}
	return nil
}

func (x *SlideCollectionSelectionArchive) GetSlideNodeToEdit() *Reference {
	if x != nil {
		return x.SlideNodeToEdit
	}
	return nil
}

func (x *SlideCollectionSelectionArchive) GetSelectedParagraphIndexesForSlideNodes() []*SlideCollectionSelectionArchive_OutlineSelection {
	if x != nil {
		return x.SelectedParagraphIndexesForSlideNodes
	}
	return nil
}

func (x *SlideCollectionSelectionArchive) GetRangeInSelectedParagraph() *Range {
	if x != nil {
		return x.RangeInSelectedParagraph
	}
	return nil
}

type PresenterNotesSelectionArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlideNode *Reference `protobuf:"bytes,1,opt,name=slide_node,json=slideNode" json:"slide_node,omitempty"`
}

func (x *PresenterNotesSelectionArchive) Reset() {
	*x = PresenterNotesSelectionArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNArchives_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PresenterNotesSelectionArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PresenterNotesSelectionArchive) ProtoMessage() {}

func (x *PresenterNotesSelectionArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNArchives_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PresenterNotesSelectionArchive.ProtoReflect.Descriptor instead.
func (*PresenterNotesSelectionArchive) Descriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{44}
}

func (x *PresenterNotesSelectionArchive) GetSlideNode() *Reference {
	if x != nil {
		return x.SlideNode
	}
	return nil
}

type MixedIdOperationArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArgsListTypes           []MixedIdOperationArgs_ArgsListKind `protobuf:"varint,1,rep,name=args_list_types,json=argsListTypes,enum=KN.MixedIdOperationArgs_ArgsListKind" json:"args_list_types,omitempty"`
	AddArgsList             []*AddIdOperationArgs               `protobuf:"bytes,2,rep,name=add_args_list,json=addArgsList" json:"add_args_list,omitempty"`
	ShowPlaceholderArgsList []*IdPlacementOperationArgs         `protobuf:"bytes,3,rep,name=show_placeholder_args_list,json=showPlaceholderArgsList" json:"show_placeholder_args_list,omitempty"`
	RemoveArgsList          []*RemoveIdOperationArgs            `protobuf:"bytes,4,rep,name=remove_args_list,json=removeArgsList" json:"remove_args_list,omitempty"`
	HidePlaceholderArgsList []*IdPlacementOperationArgs         `protobuf:"bytes,5,rep,name=hide_placeholder_args_list,json=hidePlaceholderArgsList" json:"hide_placeholder_args_list,omitempty"`
}

func (x *MixedIdOperationArgs) Reset() {
	*x = MixedIdOperationArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNArchives_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MixedIdOperationArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MixedIdOperationArgs) ProtoMessage() {}

func (x *MixedIdOperationArgs) ProtoReflect() protoreflect.Message {
	mi := &file_KNArchives_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MixedIdOperationArgs.ProtoReflect.Descriptor instead.
func (*MixedIdOperationArgs) Descriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{45}
}

func (x *MixedIdOperationArgs) GetArgsListTypes() []MixedIdOperationArgs_ArgsListKind {
	if x != nil {
		return x.ArgsListTypes
	}
	return nil
}

func (x *MixedIdOperationArgs) GetAddArgsList() []*AddIdOperationArgs {
	if x != nil {
		return x.AddArgsList
	}
	return nil
}

func (x *MixedIdOperationArgs) GetShowPlaceholderArgsList() []*IdPlacementOperationArgs {
	if x != nil {
		return x.ShowPlaceholderArgsList
	}
	return nil
}

func (x *MixedIdOperationArgs) GetRemoveArgsList() []*RemoveIdOperationArgs {
	if x != nil {
		return x.RemoveArgsList
	}
	return nil
}

func (x *MixedIdOperationArgs) GetHidePlaceholderArgsList() []*IdPlacementOperationArgs {
	if x != nil {
		return x.HidePlaceholderArgsList
	}
	return nil
}

type LiveVideoInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceId         *UUID    `protobuf:"bytes,1,opt,name=source_id,json=sourceId" json:"source_id,omitempty"`
	IsPlaceholder    *bool    `protobuf:"varint,2,opt,name=is_placeholder,json=isPlaceholder" json:"is_placeholder,omitempty"`
	Scale            *float64 `protobuf:"fixed64,3,opt,name=scale" json:"scale,omitempty"`
	NormalizedOffset *Point   `protobuf:"bytes,4,opt,name=normalized_offset,json=normalizedOffset" json:"normalized_offset,omitempty"`
	MaskKind         *int32   `protobuf:"varint,5,opt,name=mask_kind,json=maskKind" json:"mask_kind,omitempty"`
	MaskCornerRadius *float64 `protobuf:"fixed64,6,opt,name=mask_corner_radius,json=maskCornerRadius" json:"mask_corner_radius,omitempty"`
}

func (x *LiveVideoInfo) Reset() {
	*x = LiveVideoInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNArchives_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveVideoInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveVideoInfo) ProtoMessage() {}

func (x *LiveVideoInfo) ProtoReflect() protoreflect.Message {
	mi := &file_KNArchives_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveVideoInfo.ProtoReflect.Descriptor instead.
func (*LiveVideoInfo) Descriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{46}
}

func (x *LiveVideoInfo) GetSourceId() *UUID {
	if x != nil {
		return x.SourceId
	}
	return nil
}

func (x *LiveVideoInfo) GetIsPlaceholder() bool {
	if x != nil && x.IsPlaceholder != nil {
		return *x.IsPlaceholder
	}
	return false
}

func (x *LiveVideoInfo) GetScale() float64 {
	if x != nil && x.Scale != nil {
		return *x.Scale
	}
	return 0
}

func (x *LiveVideoInfo) GetNormalizedOffset() *Point {
	if x != nil {
		return x.NormalizedOffset
	}
	return nil
}

func (x *LiveVideoInfo) GetMaskKind() int32 {
	if x != nil && x.MaskKind != nil {
		return *x.MaskKind
	}
	return 0
}

func (x *LiveVideoInfo) GetMaskCornerRadius() float64 {
	if x != nil && x.MaskCornerRadius != nil {
		return *x.MaskCornerRadius
	}
	return 0
}

type LiveVideoSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                           *string                                        `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	CaptureDeviceDescription       *LiveVideoCaptureDeviceDescription             `protobuf:"bytes,2,opt,name=capture_device_description,json=captureDeviceDescription" json:"capture_device_description,omitempty"`
	CollaborationCommandUsageState *LiveVideoSourceCollaborationCommandUsageState `protobuf:"bytes,3,opt,name=collaboration_command_usage_state,json=collaborationCommandUsageState" json:"collaboration_command_usage_state,omitempty"`
	PosterImageData                *DataReference                                 `protobuf:"bytes,4,opt,name=poster_image_data,json=posterImageData" json:"poster_image_data,omitempty"`
	SymbolAbbreviationText         *string                                        `protobuf:"bytes,5,opt,name=symbol_abbreviation_text,json=symbolAbbreviationText" json:"symbol_abbreviation_text,omitempty"`
	SymbolImageIdentifier          *int32                                         `protobuf:"varint,6,opt,name=symbol_image_identifier,json=symbolImageIdentifier" json:"symbol_image_identifier,omitempty"`
	SymbolTintColorIdentifier      *int32                                         `protobuf:"varint,7,opt,name=symbol_tint_color_identifier,json=symbolTintColorIdentifier" json:"symbol_tint_color_identifier,omitempty"`
	IsDefaultSource                *bool                                          `protobuf:"varint,8,opt,name=is_default_source,json=isDefaultSource" json:"is_default_source,omitempty"`
}

func (x *LiveVideoSource) Reset() {
	*x = LiveVideoSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNArchives_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveVideoSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveVideoSource) ProtoMessage() {}

func (x *LiveVideoSource) ProtoReflect() protoreflect.Message {
	mi := &file_KNArchives_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveVideoSource.ProtoReflect.Descriptor instead.
func (*LiveVideoSource) Descriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{47}
}

func (x *LiveVideoSource) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *LiveVideoSource) GetCaptureDeviceDescription() *LiveVideoCaptureDeviceDescription {
	if x != nil {
		return x.CaptureDeviceDescription
	}
	return nil
}

func (x *LiveVideoSource) GetCollaborationCommandUsageState() *LiveVideoSourceCollaborationCommandUsageState {
	if x != nil {
		return x.CollaborationCommandUsageState
	}
	return nil
}

func (x *LiveVideoSource) GetPosterImageData() *DataReference {
	if x != nil {
		return x.PosterImageData
	}
	return nil
}

func (x *LiveVideoSource) GetSymbolAbbreviationText() string {
	if x != nil && x.SymbolAbbreviationText != nil {
		return *x.SymbolAbbreviationText
	}
	return ""
}

func (x *LiveVideoSource) GetSymbolImageIdentifier() int32 {
	if x != nil && x.SymbolImageIdentifier != nil {
		return *x.SymbolImageIdentifier
	}
	return 0
}

func (x *LiveVideoSource) GetSymbolTintColorIdentifier() int32 {
	if x != nil && x.SymbolTintColorIdentifier != nil {
		return *x.SymbolTintColorIdentifier
	}
	return 0
}

func (x *LiveVideoSource) GetIsDefaultSource() bool {
	if x != nil && x.IsDefaultSource != nil {
		return *x.IsDefaultSource
	}
	return false
}

type LiveVideoSourceCollaborationCommandUsageState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SingleCollaborationCommandUsageToken       *UUID `protobuf:"bytes,1,opt,name=single_collaboration_command_usage_token,json=singleCollaborationCommandUsageToken" json:"single_collaboration_command_usage_token,omitempty"`
	HasMultipleCollaborationCommandUsageTokens *bool `protobuf:"varint,2,opt,name=has_multiple_collaboration_command_usage_tokens,json=hasMultipleCollaborationCommandUsageTokens" json:"has_multiple_collaboration_command_usage_tokens,omitempty"`
}

func (x *LiveVideoSourceCollaborationCommandUsageState) Reset() {
	*x = LiveVideoSourceCollaborationCommandUsageState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNArchives_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveVideoSourceCollaborationCommandUsageState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveVideoSourceCollaborationCommandUsageState) ProtoMessage() {}

func (x *LiveVideoSourceCollaborationCommandUsageState) ProtoReflect() protoreflect.Message {
	mi := &file_KNArchives_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveVideoSourceCollaborationCommandUsageState.ProtoReflect.Descriptor instead.
func (*LiveVideoSourceCollaborationCommandUsageState) Descriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{48}
}

func (x *LiveVideoSourceCollaborationCommandUsageState) GetSingleCollaborationCommandUsageToken() *UUID {
	if x != nil {
		return x.SingleCollaborationCommandUsageToken
	}
	return nil
}

func (x *LiveVideoSourceCollaborationCommandUsageState) GetHasMultipleCollaborationCommandUsageTokens() bool {
	if x != nil && x.HasMultipleCollaborationCommandUsageTokens != nil {
		return *x.HasMultipleCollaborationCommandUsageTokens
	}
	return false
}

type LiveVideoCaptureDeviceDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UniqueId                   *string                                     `protobuf:"bytes,1,opt,name=unique_id,json=uniqueId" json:"unique_id,omitempty"`
	Position                   *LiveVideoCaptureDeviceDescription_Position `protobuf:"varint,2,opt,name=position,enum=KN.LiveVideoCaptureDeviceDescription_Position" json:"position,omitempty"`
	DeviceType                 *string                                     `protobuf:"bytes,3,opt,name=device_type,json=deviceType" json:"device_type,omitempty"`
	LocalizedName              *string                                     `protobuf:"bytes,4,opt,name=localized_name,json=localizedName" json:"localized_name,omitempty"`
	IsIosScreenRecordingDevice *bool                                       `protobuf:"varint,5,opt,name=is_ios_screen_recording_device,json=isIosScreenRecordingDevice" json:"is_ios_screen_recording_device,omitempty"`
	ModelId                    *string                                     `protobuf:"bytes,6,opt,name=model_id,json=modelId" json:"model_id,omitempty"`
	DefaultVideoResolution     *Size                                       `protobuf:"bytes,7,opt,name=default_video_resolution,json=defaultVideoResolution" json:"default_video_resolution,omitempty"`
}

func (x *LiveVideoCaptureDeviceDescription) Reset() {
	*x = LiveVideoCaptureDeviceDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNArchives_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveVideoCaptureDeviceDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveVideoCaptureDeviceDescription) ProtoMessage() {}

func (x *LiveVideoCaptureDeviceDescription) ProtoReflect() protoreflect.Message {
	mi := &file_KNArchives_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveVideoCaptureDeviceDescription.ProtoReflect.Descriptor instead.
func (*LiveVideoCaptureDeviceDescription) Descriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{49}
}

func (x *LiveVideoCaptureDeviceDescription) GetUniqueId() string {
	if x != nil && x.UniqueId != nil {
		return *x.UniqueId
	}
	return ""
}

func (x *LiveVideoCaptureDeviceDescription) GetPosition() LiveVideoCaptureDeviceDescription_Position {
	if x != nil && x.Position != nil {
		return *x.Position
	}
	return LiveVideoCaptureDeviceDescription_Unspecified
}

func (x *LiveVideoCaptureDeviceDescription) GetDeviceType() string {
	if x != nil && x.DeviceType != nil {
		return *x.DeviceType
	}
	return ""
}

func (x *LiveVideoCaptureDeviceDescription) GetLocalizedName() string {
	if x != nil && x.LocalizedName != nil {
		return *x.LocalizedName
	}
	return ""
}

func (x *LiveVideoCaptureDeviceDescription) GetIsIosScreenRecordingDevice() bool {
	if x != nil && x.IsIosScreenRecordingDevice != nil {
		return *x.IsIosScreenRecordingDevice
	}
	return false
}

func (x *LiveVideoCaptureDeviceDescription) GetModelId() string {
	if x != nil && x.ModelId != nil {
		return *x.ModelId
	}
	return ""
}

func (x *LiveVideoCaptureDeviceDescription) GetDefaultVideoResolution() *Size {
	if x != nil {
		return x.DefaultVideoResolution
	}
	return nil
}

type LiveVideoSourceCollection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sources       []*Reference `protobuf:"bytes,1,rep,name=sources" json:"sources,omitempty"`
	DefaultSource *Reference   `protobuf:"bytes,2,opt,name=default_source,json=defaultSource" json:"default_source,omitempty"`
}

func (x *LiveVideoSourceCollection) Reset() {
	*x = LiveVideoSourceCollection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNArchives_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveVideoSourceCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveVideoSourceCollection) ProtoMessage() {}

func (x *LiveVideoSourceCollection) ProtoReflect() protoreflect.Message {
	mi := &file_KNArchives_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveVideoSourceCollection.ProtoReflect.Descriptor instead.
func (*LiveVideoSourceCollection) Descriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{50}
}

func (x *LiveVideoSourceCollection) GetSources() []*Reference {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *LiveVideoSourceCollection) GetDefaultSource() *Reference {
	if x != nil {
		return x.DefaultSource
	}
	return nil
}

type SlideArchive_SageTagMapEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag  *string    `protobuf:"bytes,1,req,name=tag" json:"tag,omitempty"`
	Info *Reference `protobuf:"bytes,2,req,name=info" json:"info,omitempty"`
}

func (x *SlideArchive_SageTagMapEntry) Reset() {
	*x = SlideArchive_SageTagMapEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNArchives_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlideArchive_SageTagMapEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlideArchive_SageTagMapEntry) ProtoMessage() {}

func (x *SlideArchive_SageTagMapEntry) ProtoReflect() protoreflect.Message {
	mi := &file_KNArchives_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlideArchive_SageTagMapEntry.ProtoReflect.Descriptor instead.
func (*SlideArchive_SageTagMapEntry) Descriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{13, 0}
}

func (x *SlideArchive_SageTagMapEntry) GetTag() string {
	if x != nil && x.Tag != nil {
		return *x.Tag
	}
	return ""
}

func (x *SlideArchive_SageTagMapEntry) GetInfo() *Reference {
	if x != nil {
		return x.Info
	}
	return nil
}

type SlideArchive_InstructionalTextMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstructionalTextForInfos []*SlideArchive_InstructionalTextMap_InstructionalTextMapEntry `protobuf:"bytes,1,rep,name=instructional_text_for_infos,json=instructionalTextForInfos" json:"instructional_text_for_infos,omitempty"`
}

func (x *SlideArchive_InstructionalTextMap) Reset() {
	*x = SlideArchive_InstructionalTextMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNArchives_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlideArchive_InstructionalTextMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlideArchive_InstructionalTextMap) ProtoMessage() {}

func (x *SlideArchive_InstructionalTextMap) ProtoReflect() protoreflect.Message {
	mi := &file_KNArchives_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlideArchive_InstructionalTextMap.ProtoReflect.Descriptor instead.
func (*SlideArchive_InstructionalTextMap) Descriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{13, 1}
}

func (x *SlideArchive_InstructionalTextMap) GetInstructionalTextForInfos() []*SlideArchive_InstructionalTextMap_InstructionalTextMapEntry {
	if x != nil {
		return x.InstructionalTextForInfos
	}
	return nil
}

type SlideArchive_InstructionalTextMap_InstructionalTextMapEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info              *Reference `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
	InstructionalText *string    `protobuf:"bytes,2,req,name=instructional_text,json=instructionalText" json:"instructional_text,omitempty"`
}

func (x *SlideArchive_InstructionalTextMap_InstructionalTextMapEntry) Reset() {
	*x = SlideArchive_InstructionalTextMap_InstructionalTextMapEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNArchives_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlideArchive_InstructionalTextMap_InstructionalTextMapEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlideArchive_InstructionalTextMap_InstructionalTextMapEntry) ProtoMessage() {}

func (x *SlideArchive_InstructionalTextMap_InstructionalTextMapEntry) ProtoReflect() protoreflect.Message {
	mi := &file_KNArchives_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlideArchive_InstructionalTextMap_InstructionalTextMapEntry.ProtoReflect.Descriptor instead.
func (*SlideArchive_InstructionalTextMap_InstructionalTextMapEntry) Descriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{13, 1, 0}
}

func (x *SlideArchive_InstructionalTextMap_InstructionalTextMapEntry) GetInfo() *Reference {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *SlideArchive_InstructionalTextMap_InstructionalTextMapEntry) GetInstructionalText() string {
	if x != nil && x.InstructionalText != nil {
		return *x.InstructionalText
	}
	return ""
}

type SlideNodeArchive_SlideSpecificHyperlinkMapEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlideNodeIDString     *string  `protobuf:"bytes,1,req,name=slideNodeIDString" json:"slideNodeIDString,omitempty"`
	InfoOrStorageIDString []string `protobuf:"bytes,2,rep,name=infoOrStorageIDString" json:"infoOrStorageIDString,omitempty"`
}

func (x *SlideNodeArchive_SlideSpecificHyperlinkMapEntry) Reset() {
	*x = SlideNodeArchive_SlideSpecificHyperlinkMapEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNArchives_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlideNodeArchive_SlideSpecificHyperlinkMapEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlideNodeArchive_SlideSpecificHyperlinkMapEntry) ProtoMessage() {}

func (x *SlideNodeArchive_SlideSpecificHyperlinkMapEntry) ProtoReflect() protoreflect.Message {
	mi := &file_KNArchives_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlideNodeArchive_SlideSpecificHyperlinkMapEntry.ProtoReflect.Descriptor instead.
func (*SlideNodeArchive_SlideSpecificHyperlinkMapEntry) Descriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{14, 0}
}

func (x *SlideNodeArchive_SlideSpecificHyperlinkMapEntry) GetSlideNodeIDString() string {
	if x != nil && x.SlideNodeIDString != nil {
		return *x.SlideNodeIDString
	}
	return ""
}

func (x *SlideNodeArchive_SlideSpecificHyperlinkMapEntry) GetInfoOrStorageIDString() []string {
	if x != nil {
		return x.InfoOrStorageIDString
	}
	return nil
}

type PasteboardNativeStorageArchive_LiveVideoSourcePair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LiveVideoInfo   *Reference `protobuf:"bytes,1,opt,name=live_video_info,json=liveVideoInfo" json:"live_video_info,omitempty"`
	LiveVideoSource *Reference `protobuf:"bytes,2,opt,name=live_video_source,json=liveVideoSource" json:"live_video_source,omitempty"`
}

func (x *PasteboardNativeStorageArchive_LiveVideoSourcePair) Reset() {
	*x = PasteboardNativeStorageArchive_LiveVideoSourcePair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNArchives_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasteboardNativeStorageArchive_LiveVideoSourcePair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasteboardNativeStorageArchive_LiveVideoSourcePair) ProtoMessage() {}

func (x *PasteboardNativeStorageArchive_LiveVideoSourcePair) ProtoReflect() protoreflect.Message {
	mi := &file_KNArchives_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasteboardNativeStorageArchive_LiveVideoSourcePair.ProtoReflect.Descriptor instead.
func (*PasteboardNativeStorageArchive_LiveVideoSourcePair) Descriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{28, 0}
}

func (x *PasteboardNativeStorageArchive_LiveVideoSourcePair) GetLiveVideoInfo() *Reference {
	if x != nil {
		return x.LiveVideoInfo
	}
	return nil
}

func (x *PasteboardNativeStorageArchive_LiveVideoSourcePair) GetLiveVideoSource() *Reference {
	if x != nil {
		return x.LiveVideoSource
	}
	return nil
}

type SlideCollectionSelectionArchive_OutlineSelection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlideNode                *Reference `protobuf:"bytes,1,req,name=slide_node,json=slideNode" json:"slide_node,omitempty"`
	SelectedParagraphIndexes *IndexSet  `protobuf:"bytes,2,req,name=selected_paragraph_indexes,json=selectedParagraphIndexes" json:"selected_paragraph_indexes,omitempty"`
}

func (x *SlideCollectionSelectionArchive_OutlineSelection) Reset() {
	*x = SlideCollectionSelectionArchive_OutlineSelection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNArchives_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlideCollectionSelectionArchive_OutlineSelection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlideCollectionSelectionArchive_OutlineSelection) ProtoMessage() {}

func (x *SlideCollectionSelectionArchive_OutlineSelection) ProtoReflect() protoreflect.Message {
	mi := &file_KNArchives_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlideCollectionSelectionArchive_OutlineSelection.ProtoReflect.Descriptor instead.
func (*SlideCollectionSelectionArchive_OutlineSelection) Descriptor() ([]byte, []int) {
	return file_KNArchives_proto_rawDescGZIP(), []int{43, 0}
}

func (x *SlideCollectionSelectionArchive_OutlineSelection) GetSlideNode() *Reference {
	if x != nil {
		return x.SlideNode
	}
	return nil
}

func (x *SlideCollectionSelectionArchive_OutlineSelection) GetSelectedParagraphIndexes() *IndexSet {
	if x != nil {
		return x.SelectedParagraphIndexes
	}
	return nil
}

var file_KNArchives_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*MovieArchive)(nil),
		ExtensionType: (*LiveVideoInfo)(nil),
		Field:         100,
		Name:          "KN.LiveVideoInfo.live_video_info",
		Tag:           "bytes,100,opt,name=live_video_info",
		Filename:      "KNArchives.proto",
	},
}

// Extension fields to MovieArchive.
var (
	// optional KN.LiveVideoInfo live_video_info = 100;
	E_LiveVideoInfo_LiveVideoInfo = &file_KNArchives_proto_extTypes[0]
)

var File_KNArchives_proto protoreflect.FileDescriptor

var file_KNArchives_proto_rawDesc = []byte{
	0x0a, 0x10, 0x4b, 0x4e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x02, 0x4b, 0x4e, 0x1a, 0x11, 0x54, 0x53, 0x50, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x54, 0x53, 0x4b, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x54, 0x53,
	0x53, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x11, 0x54, 0x53, 0x44, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x12, 0x54, 0x53, 0x57, 0x50, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x54, 0x53, 0x41, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x54, 0x53, 0x43, 0x48, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x80, 0x07,
	0x0a, 0x1a, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x69,
	0x73, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x12, 0x20,
	0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x12, 0x56, 0x0a, 0x1c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x75, 0x72, 0x76, 0x65, 0x5f, 0x31,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x50, 0x61, 0x74,
	0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x18,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x69,
	0x6e, 0x67, 0x43, 0x75, 0x72, 0x76, 0x65, 0x31, 0x12, 0x56, 0x0a, 0x1c, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x75, 0x72, 0x76, 0x65, 0x5f, 0x32, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x54, 0x53, 0x44, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x18, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x72, 0x76, 0x65, 0x32,
	0x12, 0x56, 0x0a, 0x1c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x75, 0x72, 0x76, 0x65, 0x5f, 0x33,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x50, 0x61, 0x74,
	0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x18,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x69,
	0x6e, 0x67, 0x43, 0x75, 0x72, 0x76, 0x65, 0x33, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x61, 0x6e, 0x64,
	0x6f, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x53, 0x65, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x52, 0x0a, 0x27, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x69, 0x6e, 0x67, 0x5f, 0x63, 0x75, 0x72, 0x76, 0x65, 0x5f, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x31, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x21, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67,
	0x43, 0x75, 0x72, 0x76, 0x65, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x31, 0x12,
	0x52, 0x0a, 0x27, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x75, 0x72, 0x76, 0x65, 0x5f, 0x74, 0x68,
	0x65, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x32, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x21, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x69,
	0x6d, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x72, 0x76, 0x65, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x32, 0x12, 0x52, 0x0a, 0x27, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x75, 0x72, 0x76,
	0x65, 0x5f, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x33, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x21, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x72, 0x76, 0x65, 0x54, 0x68, 0x65,
	0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x33, 0x12, 0x37, 0x0a, 0x18, 0x77, 0x72, 0x69, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x73, 0x5f,
	0x72, 0x74, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x77, 0x72, 0x69, 0x74, 0x69,
	0x6e, 0x67, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x73, 0x52, 0x74, 0x6c,
	0x22, 0x85, 0x0d, 0x0a, 0x1b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x12, 0x50, 0x0a, 0x13, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x4b, 0x4e, 0x2e, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x13, 0x61,
	0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x77, 0x69,
	0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x54, 0x77, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x6d, 0x6f, 0x73, 0x61, 0x69, 0x63, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x6f, 0x73, 0x61, 0x69, 0x63, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6d, 0x6f,
	0x73, 0x61, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x6f, 0x73, 0x61, 0x69, 0x63, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x62, 0x6f, 0x75, 0x6e,
	0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x42, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x12, 0x55, 0x0a, 0x28, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x5f, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x66, 0x61, 0x64, 0x65,
	0x5f, 0x75, 0x6e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x23, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x4d, 0x61, 0x67, 0x69, 0x63, 0x4d, 0x6f, 0x76, 0x65, 0x46, 0x61, 0x64, 0x65, 0x55, 0x6e, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x79, 0x0a,
	0x13, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x63,
	0x75, 0x72, 0x76, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x49, 0x2e, 0x4b, 0x4e, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x72, 0x76,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d,
	0x69, 0x6e, 0x67, 0x43, 0x75, 0x72, 0x76, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x19, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4a, 0x2e, 0x4b,
	0x4e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x54, 0x65, 0x78, 0x74, 0x44, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x16, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x54, 0x65, 0x78, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x62, 0x6c, 0x75, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x75, 0x72, 0x12, 0x34,
	0x0a, 0x16, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x5f,
	0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x44, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x17, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x15, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2b, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0e, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x2f, 0x0a,
	0x11, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x42, 0x02, 0x18, 0x01, 0x52, 0x10, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31,
	0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01, 0x52, 0x11,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x29, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x65,
	0x6c, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0d, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x36, 0x0a, 0x15,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x69, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x13, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x49, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x69, 0x63, 0x12, 0x35, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0d, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0xbc, 0x02, 0x0a, 0x29,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67,
	0x43, 0x75, 0x72, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x2f, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x72,
	0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x10, 0x01, 0x12, 0x33,
	0x0a, 0x2f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x54, 0x69, 0x6d, 0x69,
	0x6e, 0x67, 0x43, 0x75, 0x72, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x45, 0x61, 0x73, 0x65, 0x49,
	0x6e, 0x10, 0x02, 0x12, 0x34, 0x0a, 0x30, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x72, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x45, 0x61, 0x73, 0x65, 0x4f, 0x75, 0x74, 0x10, 0x03, 0x12, 0x3a, 0x0a, 0x36, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x72,
	0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x45, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x45, 0x61, 0x73, 0x65,
	0x4f, 0x75, 0x74, 0x10, 0x04, 0x12, 0x33, 0x0a, 0x2f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x72, 0x76, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x10, 0x05, 0x22, 0x8b, 0x02, 0x0a, 0x2a, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x54, 0x65, 0x78, 0x74, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x32, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x54, 0x65, 0x78, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x42, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x10,
	0x01, 0x12, 0x34, 0x0a, 0x30, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x54,
	0x65, 0x78, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x79, 0x57, 0x6f, 0x72, 0x64, 0x10, 0x02, 0x12, 0x39, 0x0a, 0x35, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x54, 0x65, 0x78, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x42, 0x79, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x10, 0x03, 0x12, 0x34, 0x0a, 0x30, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x54, 0x65, 0x78, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x79, 0x4c, 0x69, 0x6e, 0x65, 0x10, 0x04, 0x22, 0x54, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x3f, 0x0a,
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x4b, 0x4e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0xbc,
	0x02, 0x0a, 0x11, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x18, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x69, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0x55, 0x0a, 0x16, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x4b, 0x4e, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x14, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x55, 0x55, 0x49, 0x44, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x22, 0x69, 0x0a,
	0x1b, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x24, 0x0a, 0x08,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x22, 0xd5, 0x03, 0x0a, 0x1a, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x42, 0x0a, 0x11, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x54,
	0x53, 0x44, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x0f, 0x70, 0x61, 0x74, 0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x4a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x36, 0x2e, 0x4b, 0x4e, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x70,
	0x0a, 0x17, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x6b, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x6b, 0x5f, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x6b, 0x5f, 0x62, 0x6f, 0x6f, 0x6c,
	0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x6b, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x10, 0x04,
	0x12, 0x11, 0x0a, 0x0d, 0x6b, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x6b, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x10, 0x06,
	0x22, 0xeb, 0x01, 0x0a, 0x1a, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x4b, 0x4e, 0x2e,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x24, 0x0a, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x07,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x55, 0x0a, 0x16, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4b, 0x4e, 0x2e, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x14, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x90,
	0x16, 0x0a, 0x16, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x50, 0x0a, 0x13, 0x61, 0x6e, 0x69,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x4b, 0x4e, 0x2e, 0x41, 0x6e, 0x69, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x13, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12,
	0x34, 0x0a, 0x13, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69,
	0x63, 0x41, 0x66, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x13, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63,
	0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x12, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x57, 0x69, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x42, 0x02, 0x18, 0x01, 0x52, 0x12, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x69, 0x63, 0x57, 0x69, 0x74, 0x68, 0x12, 0x54, 0x0a, 0x0a, 0x63, 0x75, 0x72,
	0x76, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e,
	0x4b, 0x4e, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x43, 0x75, 0x72, 0x76, 0x65, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x76, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x33, 0x44, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x33, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x65,
	0x6e, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x65, 0x6e, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x31, 0x0a, 0x14, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x67, 0x6c,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x76, 0x0a, 0x18,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b,
	0x2e, 0x4b, 0x4e, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x17, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x2b, 0x0a, 0x11, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x41,
	0x6c, 0x70, 0x68, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x12, 0x67, 0x0a, 0x13,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x4b, 0x4e, 0x2e, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x12, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x17, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x50, 0x61, 0x74,
	0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x16,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x42, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x12, 0x67, 0x0a, 0x13, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x4b, 0x4e, 0x2e, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x54, 0x65, 0x78, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x52, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x44, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x12, 0x6d, 0x0a, 0x15, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x4b, 0x4e, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x63, 0x61, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x63, 0x61, 0x79, 0x12, 0x3a, 0x0a, 0x19, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2e, 0x0a, 0x13, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12,
	0x83, 0x01, 0x0a, 0x1d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6a, 0x69, 0x67, 0x67, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x74,
	0x79, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x4b, 0x4e, 0x2e, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x4a, 0x69, 0x67, 0x67, 0x6c, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x52, 0x1b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x69, 0x67, 0x67, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x75, 0x72, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x6c, 0x75, 0x72, 0x12, 0x38, 0x0a, 0x18, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x73, 0x68, 0x69, 0x6e, 0x65, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x68, 0x69, 0x6e, 0x65,
	0x12, 0x2e, 0x0a, 0x13, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x34, 0x0a, 0x16, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x72, 0x61, 0x76, 0x65,
	0x6c, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x14, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x44, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x24, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x14, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x54, 0x6f, 0x50, 0x61, 0x74, 0x68, 0x12, 0x39, 0x0a, 0x16,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x15, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x12, 0x31, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x11, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x44, 0x65, 0x6c,
	0x61, 0x79, 0x12, 0x2f, 0x0a, 0x11, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0d, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x10, 0x6d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x10, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x74, 0x68, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x5f, 0x0a, 0x1b, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x41, 0x63, 0x63,
	0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x09, 0x0a, 0x05, 0x6b, 0x4e, 0x6f,
	0x6e, 0x65, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x6b, 0x45, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x6b, 0x45, 0x61, 0x73, 0x65, 0x4f, 0x75, 0x74, 0x10, 0x02, 0x12,
	0x0d, 0x0a, 0x09, 0x6b, 0x45, 0x61, 0x73, 0x65, 0x42, 0x6f, 0x74, 0x68, 0x10, 0x03, 0x12, 0x0b,
	0x0a, 0x07, 0x6b, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x10, 0x04, 0x22, 0x49, 0x0a, 0x20, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x0e, 0x0a, 0x0a, 0x6b, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x77, 0x69, 0x73, 0x65, 0x10, 0x1f, 0x12,
	0x15, 0x0a, 0x11, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x6c, 0x6f, 0x63, 0x6b,
	0x77, 0x69, 0x73, 0x65, 0x10, 0x20, 0x22, 0x37, 0x0a, 0x19, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x43, 0x75, 0x72, 0x76, 0x65, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x6b, 0x53, 0x74, 0x72, 0x61, 0x69, 0x67, 0x68, 0x74,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x6b, 0x43, 0x75, 0x72, 0x76, 0x65, 0x64, 0x10, 0x01, 0x22,
	0xa4, 0x01, 0x0a, 0x1b, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x54, 0x65, 0x78, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x12,
	0x1a, 0x0a, 0x16, 0x6b, 0x54, 0x65, 0x78, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x6b,
	0x54, 0x65, 0x78, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x42, 0x79, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x54, 0x65, 0x78, 0x74, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x42, 0x79, 0x57, 0x6f, 0x72, 0x64, 0x10, 0x02, 0x12,
	0x1c, 0x0a, 0x18, 0x6b, 0x54, 0x65, 0x78, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x42, 0x79, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x10, 0x03, 0x12, 0x17, 0x0a,
	0x13, 0x6b, 0x54, 0x65, 0x78, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x42, 0x79,
	0x4c, 0x69, 0x6e, 0x65, 0x10, 0x04, 0x22, 0xce, 0x01, 0x0a, 0x1d, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x63, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x10, 0x02, 0x12,
	0x1d, 0x0a, 0x19, 0x6b, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x10, 0x03, 0x12, 0x1c,
	0x0a, 0x18, 0x6b, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x45, 0x64, 0x67, 0x65, 0x73, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15,
	0x6b, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x10, 0x05, 0x22, 0x78, 0x0a, 0x24, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x4a, 0x69, 0x67, 0x67, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x12,
	0x19, 0x0a, 0x15, 0x6b, 0x4a, 0x69, 0x67, 0x67, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x74, 0x79, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x4a,
	0x69, 0x67, 0x67, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x4d, 0x65,
	0x64, 0x69, 0x75, 0x6d, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x4a, 0x69, 0x67, 0x67, 0x6c,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x10,
	0x02, 0x22, 0xd6, 0x01, 0x0a, 0x0c, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x64, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x64, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x0a, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x4b, 0x4e, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f,
	0x69, 0x64, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x53, 0x65, 0x65, 0x64, 0x22, 0x96, 0x02, 0x0a, 0x12, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x12, 0x2c, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12,
	0x41, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e,
	0x4b, 0x4e, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x3a, 0x10, 0x6b, 0x4b, 0x69, 0x6e,
	0x64, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x22, 0x8e, 0x01, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x10, 0x6b,
	0x4b, 0x69, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x10,
	0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x10, 0x02, 0x12, 0x18, 0x0a,
	0x14, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x6b, 0x4b, 0x69, 0x6e, 0x64,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x10, 0x04, 0x22, 0x49, 0x0a, 0x0b, 0x4e, 0x6f, 0x74, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x12, 0x3a, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x22, 0xc3,
	0x01, 0x0a, 0x1e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x63, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73,
	0x68, 0x65, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x12, 0x62, 0x0a, 0x17, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x74, 0x6f, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x54, 0x53, 0x53, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x68,
	0x65, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x14, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x6f, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x3d, 0x0a, 0x10, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x0f, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x54,
	0x68, 0x65, 0x6d, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x19, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x63,
	0x54, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x10, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73,
	0x68, 0x65, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x10, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x68, 0x65, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x2c, 0x0a, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x22, 0xf1, 0x19, 0x0a, 0x0c, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x12, 0x24, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x12,
	0x49, 0x0a, 0x12, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4b, 0x4e,
	0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x12, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x0b, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x2b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x0b, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x12, 0x35, 0x0a, 0x0a,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x4b, 0x4e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x10, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12,
	0x38, 0x0a, 0x0f, 0x62, 0x6f, 0x64, 0x79, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x62, 0x6f, 0x64, 0x79, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x11, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x11, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x16, 0x73, 0x6c, 0x69, 0x64, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x16, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12,
	0x37, 0x0a, 0x0f, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x5f, 0x64, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x44,
	0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x11, 0x64, 0x72, 0x61, 0x77,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x7a, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x2a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x0f, 0x64, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5a, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x14, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x61, 0x67,
	0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x1c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x4b, 0x4e, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x2e, 0x53, 0x61, 0x67, 0x65, 0x54, 0x61, 0x67, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x73, 0x61, 0x67, 0x65, 0x54, 0x61, 0x67, 0x54, 0x6f, 0x49,
	0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x12, 0x5b, 0x0a, 0x16, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x4b, 0x4e, 0x2e, 0x53, 0x6c, 0x69, 0x64,
	0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x61, 0x70, 0x52, 0x14, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x54, 0x65, 0x78, 0x74,
	0x4d, 0x61, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x18, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x47, 0x65, 0x6f, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x54, 0x53, 0x44, 0x2e,
	0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x18, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x48, 0x0a, 0x1f, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x68, 0x61,
	0x70, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x1f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x53, 0x68, 0x61, 0x70, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x46, 0x0a, 0x1e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x54, 0x65, 0x78,
	0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x5b, 0x0a, 0x15, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x54, 0x53, 0x57,
	0x50, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x53, 0x68, 0x61, 0x70, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x15, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x17, 0x62, 0x6f, 0x64, 0x79,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x47, 0x65, 0x6f, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x54, 0x53, 0x44, 0x2e,
	0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x17, 0x62, 0x6f, 0x64, 0x79, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x46, 0x0a, 0x1e, 0x62, 0x6f, 0x64, 0x79,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x68, 0x61, 0x70, 0x65,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x1e, 0x62, 0x6f, 0x64, 0x79, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x53, 0x68, 0x61, 0x70, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x44, 0x0a, 0x1d, 0x62, 0x6f, 0x64, 0x79, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x62, 0x6f, 0x64, 0x79, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x59, 0x0a, 0x14, 0x62, 0x6f, 0x64, 0x79, 0x4c, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x54, 0x53, 0x57, 0x50,
	0x53, 0x68, 0x61, 0x70, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x14, 0x62, 0x6f, 0x64,
	0x79, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x5c, 0x0a, 0x1e, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x47, 0x65, 0x6f, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x54, 0x53, 0x44, 0x2e,
	0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x1e, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12,
	0x54, 0x0a, 0x25, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x68, 0x61, 0x70, 0x65, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x25,
	0x73, 0x6c, 0x69, 0x64, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x68, 0x61, 0x70, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x52, 0x0a, 0x24, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x54,
	0x65, 0x78, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x24, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x67, 0x0a, 0x1b, 0x73, 0x6c, 0x69,
	0x64, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x53, 0x68, 0x61, 0x70, 0x65, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1b, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x48, 0x0a, 0x17, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x63, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x73, 0x68, 0x65, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x17, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x63, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x73, 0x68, 0x65, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x40, 0x0a, 0x13,
	0x62, 0x6f, 0x64, 0x79, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x13, 0x62, 0x6f, 0x64, 0x79, 0x50,
	0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x12, 0x36,
	0x0a, 0x0e, 0x62, 0x6f, 0x64, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73,
	0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x62, 0x6f, 0x64, 0x79, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x20, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e,
	0x61, 0x69, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x46, 0x6f, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x20, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x46,
	0x6f, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x12, 0x48, 0x0a, 0x1f, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x54,
	0x65, 0x78, 0x74, 0x46, 0x6f, 0x72, 0x42, 0x6f, 0x64, 0x79, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x74, 0x68, 0x75,
	0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x46, 0x6f, 0x72, 0x42, 0x6f, 0x64,
	0x79, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x21,
	0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x1d,
	0x73, 0x6c, 0x69, 0x64, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x4c, 0x61, 0x79, 0x65,
	0x72, 0x57, 0x69, 0x74, 0x68, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a,
	0x0e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53,
	0x6c, 0x69, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x47, 0x75,
	0x69, 0x64, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x54, 0x53, 0x44,
	0x2e, 0x47, 0x75, 0x69, 0x64, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0c, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x63, 0x47, 0x75, 0x69, 0x64, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x17, 0x75,
	0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x47, 0x75, 0x69, 0x64, 0x65, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x17, 0x75, 0x73,
	0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x47, 0x75, 0x69, 0x64, 0x65, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x6e, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x64, 0x0a, 0x27, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x5f, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x6f, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x18, 0x2c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x23, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12,
	0x61, 0x0a, 0x2c, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x56,
	0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x08, 0x52, 0x2b, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x62, 0x0a, 0x26, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x75, 0x73, 0x69, 0x6e, 0x67,
	0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x18, 0x27, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x22, 0x69, 0x6e, 0x66, 0x6f, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x47, 0x65,
	0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x96, 0x01, 0x0a, 0x4a, 0x69, 0x6e, 0x66, 0x6f, 0x5f,
	0x75, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x6f,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x18, 0x28, 0x20, 0x01, 0x28, 0x08, 0x52, 0x42, 0x69, 0x6e, 0x66,
	0x6f, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x1a,
	0x47, 0x0a, 0x0f, 0x53, 0x61, 0x67, 0x65, 0x54, 0x61, 0x67, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x03, 0x74, 0x61, 0x67, 0x12, 0x22, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x1a, 0x89, 0x02, 0x0a, 0x14, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x61,
	0x70, 0x12, 0x80, 0x01, 0x0a, 0x1c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x4b, 0x4e, 0x2e, 0x53, 0x6c,
	0x69, 0x64, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x61, 0x70, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x54, 0x65, 0x78,
	0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x19, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x46, 0x6f, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x1a, 0x6e, 0x0a, 0x19, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x22, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x11, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x54, 0x65, 0x78, 0x74, 0x22, 0xaa, 0x0e, 0x0a, 0x10, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x24, 0x0a, 0x05, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x05, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x05, 0x64,
	0x65, 0x70, 0x74, 0x68, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x31, 0x52, 0x05, 0x64,
	0x65, 0x70, 0x74, 0x68, 0x12, 0x32, 0x0a, 0x0a, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x74, 0x68,
	0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x31, 0x0a, 0x0e, 0x74, 0x68, 0x75, 0x6d,
	0x62, 0x6e, 0x61, 0x69, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x0e, 0x74, 0x68, 0x75,
	0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x74,
	0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x73, 0x41, 0x72, 0x65, 0x44, 0x69, 0x72, 0x74,
	0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61,
	0x69, 0x6c, 0x73, 0x41, 0x72, 0x65, 0x44, 0x69, 0x72, 0x74, 0x79, 0x12, 0x64, 0x0a, 0x30, 0x64,
	0x69, 0x67, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x5f, 0x6e, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18,
	0x19, 0x20, 0x03, 0x28, 0x09, 0x52, 0x2a, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x73, 0x46, 0x6f,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x6f, 0x72, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x04, 0x20,
	0x02, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x24, 0x0a,
	0x0b, 0x69, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x69, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x70,
	0x73, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x18, 0x69, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73,
	0x65, 0x64, 0x49, 0x6e, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x56, 0x69, 0x65, 0x77, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x18, 0x69, 0x73, 0x43, 0x6f, 0x6c,
	0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x49, 0x6e, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x56,
	0x69, 0x65, 0x77, 0x12, 0x36, 0x0a, 0x14, 0x68, 0x61, 0x73, 0x42, 0x6f, 0x64, 0x79, 0x49, 0x6e,
	0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x56, 0x69, 0x65, 0x77, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x14, 0x68, 0x61, 0x73, 0x42, 0x6f, 0x64, 0x79, 0x49, 0x6e,
	0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x56, 0x69, 0x65, 0x77, 0x12, 0x20, 0x0a, 0x09, 0x68,
	0x61, 0x73, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x18, 0x06, 0x20, 0x02, 0x28, 0x08, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x09, 0x68, 0x61, 0x73, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x12, 0x24, 0x0a,
	0x0d, 0x68, 0x61, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x02, 0x28, 0x08, 0x52, 0x0d, 0x68, 0x61, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x4e, 0x6f, 0x74, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x39, 0x0a,
	0x14, 0x69, 0x73, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x69,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x14, 0x69, 0x73, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x10, 0x75, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x10, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x17, 0x63, 0x6f, 0x70, 0x79,
	0x46, 0x72, 0x6f, 0x6d, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x63, 0x6f, 0x70, 0x79, 0x46,
	0x72, 0x6f, 0x6d, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x44, 0x0a, 0x1b, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01, 0x52, 0x1b, 0x73, 0x6c, 0x69,
	0x64, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c,
	0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x1f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x1f, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x73, 0x5f, 0x75, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x19, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x73, 0x55, 0x70, 0x54, 0x6f, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x68, 0x61, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x68, 0x61, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x73, 0x12, 0x48, 0x0a, 0x21, 0x68, 0x61, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x68,
	0x61, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x73,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x21,
	0x68, 0x61, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x73, 0x5f, 0x69, 0x73, 0x5f, 0x75, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x1b, 0x68, 0x61, 0x73,
	0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x49, 0x73,
	0x55, 0x70, 0x54, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x12, 0x71, 0x0a, 0x19, 0x73, 0x6c, 0x69, 0x64,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69,
	0x6e, 0x6b, 0x4d, 0x61, 0x70, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x4b, 0x4e,
	0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x48,
	0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x6b, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x19, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x48,
	0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x6b, 0x4d, 0x61, 0x70, 0x12, 0x30, 0x0a, 0x14, 0x68,
	0x61, 0x73, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x68, 0x61, 0x73, 0x42, 0x61,
	0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x12, 0x35, 0x0a,
	0x11, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55,
	0x55, 0x49, 0x44, 0x52, 0x0f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x6c, 0x69,
	0x64, 0x65, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x15, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x1e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x12,
	0x6c, 0x69, 0x76, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x64, 0x73, 0x12, 0x41, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74,
	0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x11, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x54, 0x68, 0x75, 0x6d,
	0x62, 0x6e, 0x61, 0x69, 0x6c, 0x12, 0x43, 0x0a, 0x13, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x12, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x73, 0x1a, 0x84, 0x01, 0x0a, 0x1e, 0x53,
	0x6c, 0x69, 0x64, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x48, 0x79, 0x70, 0x65,
	0x72, 0x6c, 0x69, 0x6e, 0x6b, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2c, 0x0a,
	0x11, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x11, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x49, 0x44, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x34, 0x0a, 0x15, 0x69,
	0x6e, 0x66, 0x6f, 0x4f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x44, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x69, 0x6e, 0x66, 0x6f,
	0x4f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x44, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x22, 0xa8, 0x06, 0x0a, 0x16, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x55, 0x49, 0x4c,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x73, 0x69, 0x64, 0x65, 0x62, 0x61, 0x72, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x69, 0x64, 0x65, 0x62, 0x61, 0x72, 0x56, 0x69,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x56, 0x0a, 0x11, 0x73, 0x69, 0x64, 0x65, 0x62, 0x61, 0x72,
	0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2a, 0x2e, 0x4b, 0x4e, 0x2e, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x55, 0x49, 0x4c,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x53, 0x69, 0x64,
	0x65, 0x62, 0x61, 0x72, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0f, 0x73, 0x69,
	0x64, 0x65, 0x62, 0x61, 0x72, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x56, 0x69, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x69, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x12, 0x3a, 0x0a, 0x16, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x70, 0x61, 0x6e, 0x65, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x14, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x50, 0x61, 0x6e, 0x65, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x87,
	0x01, 0x0a, 0x18, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x6e,
	0x65, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x30, 0x2e, 0x4b, 0x4e, 0x2e, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x55, 0x49,
	0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x49, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x61, 0x6e, 0x65, 0x56, 0x69, 0x65, 0x77, 0x4d,
	0x6f, 0x64, 0x65, 0x3a, 0x1c, 0x6b, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x50,
	0x61, 0x6e, 0x65, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x52, 0x15, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x61, 0x6e, 0x65,
	0x56, 0x69, 0x65, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x68, 0x6f, 0x77,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x6c, 0x69,
	0x64, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x73, 0x68, 0x6f, 0x77, 0x69,
	0x6e, 0x67, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x73,
	0x12, 0x3a, 0x0a, 0x19, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x61,
	0x6e, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x17, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x61,
	0x6e, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x30, 0x0a, 0x14,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x69, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x22, 0x4d,
	0x0a, 0x0f, 0x53, 0x69, 0x64, 0x65, 0x62, 0x61, 0x72, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x53, 0x69, 0x64, 0x65, 0x62, 0x61, 0x72, 0x56, 0x69, 0x65,
	0x77, 0x4d, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x10, 0x00,
	0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x53, 0x69, 0x64, 0x65, 0x62, 0x61, 0x72, 0x56, 0x69, 0x65, 0x77,
	0x4d, 0x6f, 0x64, 0x65, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x10, 0x01, 0x22, 0x7d, 0x0a,
	0x15, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x61, 0x6e, 0x65, 0x56, 0x69,
	0x65, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x49, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x50, 0x61, 0x6e, 0x65, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x6f, 0x64, 0x65,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x49, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x61, 0x6e, 0x65, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x6f,
	0x64, 0x65, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x6b,
	0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x61, 0x6e, 0x65, 0x56, 0x69, 0x65,
	0x77, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x10, 0x02, 0x22, 0x88, 0x15, 0x0a,
	0x0e, 0x55, 0x49, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12,
	0x3c, 0x0a, 0x0f, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x6f, 0x45, 0x64,
	0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0f, 0x73, 0x6c,
	0x69, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x6f, 0x45, 0x64, 0x69, 0x74, 0x12, 0x63, 0x0a,
	0x27, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x74, 0x6f, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x22,
	0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x6f, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x12, 0x4e, 0x0a, 0x1d, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x53, 0x69, 0x7a, 0x65, 0x52, 0x1c, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x53, 0x6c, 0x69, 0x64, 0x65, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x56, 0x69, 0x65, 0x77,
	0x53, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x63, 0x61, 0x6e,
	0x76, 0x61, 0x73, 0x56, 0x69, 0x65, 0x77, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x0c,
	0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0c,
	0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x42, 0x0a, 0x12,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x12, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x12, 0x38, 0x0a, 0x15, 0x69, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73,
	0x56, 0x69, 0x65, 0x77, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x15, 0x69, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x61, 0x6e, 0x76, 0x61,
	0x73, 0x56, 0x69, 0x65, 0x77, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x12, 0x69, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x42, 0x02, 0x18, 0x01, 0x52, 0x12, 0x69, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x61,
	0x6e, 0x76, 0x61, 0x73, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x3e, 0x0a, 0x18, 0x69, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x35, 0x36, 0x38, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x56, 0x69, 0x65,
	0x77, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x18, 0x69, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x35, 0x36, 0x38, 0x43, 0x61, 0x6e, 0x76, 0x61,
	0x73, 0x56, 0x69, 0x65, 0x77, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x44, 0x0a, 0x15, 0x69, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x35, 0x36, 0x38, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x02, 0x18, 0x01, 0x52, 0x15, 0x69, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x35, 0x36, 0x38, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x3a, 0x0a, 0x11, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x75, 0x69, 0x5f, 0x6c,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x64, 0x65, 0x73,
	0x6b, 0x74, 0x6f, 0x70, 0x55, 0x69, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x51, 0x0a, 0x26,
	0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f, 0x76, 0x69,
	0x65, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x74, 0x73, 0x5f,
	0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x21, 0x64, 0x65,
	0x73, 0x6b, 0x74, 0x6f, 0x70, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x56, 0x69, 0x65, 0x77, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x74, 0x73, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12,
	0x39, 0x0a, 0x19, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x63, 0x61, 0x6e, 0x76, 0x61,
	0x73, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x16, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x43, 0x61, 0x6e, 0x76, 0x61,
	0x73, 0x56, 0x69, 0x65, 0x77, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x15, 0x64, 0x65,
	0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x5f, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x13, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x43, 0x61,
	0x6e, 0x76, 0x61, 0x73, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x7a, 0x6f, 0x6f, 0x6d, 0x5f, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x5a, 0x6f, 0x6f, 0x6d, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12,
	0x38, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x72, 0x74, 0x5f, 0x75, 0x69, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x55, 0x49, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x55, 0x69, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x68, 0x6f,
	0x77, 0x5f, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x65, 0x73, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x68, 0x6f, 0x77, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x47,
	0x75, 0x69, 0x64, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x65, 0x73, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x12, 0x73, 0x68, 0x6f, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x47, 0x75, 0x69, 0x64, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x68, 0x6f, 0x77, 0x73,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x73, 0x68, 0x6f, 0x77, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x47,
	0x0a, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x15, 0x63, 0x6f, 0x6c, 0x6c, 0x61,
	0x70, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x13, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65,
	0x64, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x1d, 0x6f,
	0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64,
	0x5f, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x1c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x1a, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x61,
	0x70, 0x73, 0x65, 0x64, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x4e,
	0x0a, 0x1c, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x62, 0x6f,
	0x64, 0x79, 0x5f, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x1e,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x18, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x48, 0x61, 0x73,
	0x42, 0x6f, 0x64, 0x79, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x73, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x72, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x72, 0x12,
	0x3f, 0x0a, 0x1c, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x76, 0x69, 0x67,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x02, 0x52, 0x19, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x4e, 0x61,
	0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x56, 0x69, 0x65, 0x77, 0x57, 0x69, 0x64, 0x74, 0x68,
	0x12, 0x3b, 0x0a, 0x1a, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x17, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x4f, 0x75, 0x74,
	0x6c, 0x69, 0x6e, 0x65, 0x56, 0x69, 0x65, 0x77, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x4a, 0x0a,
	0x22, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x64, 0x65, 0x73, 0x6b, 0x74,
	0x6f, 0x70, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x56, 0x69, 0x65, 0x77, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x19, 0x64, 0x65, 0x73,
	0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x16, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70,
	0x4d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x4c, 0x0a, 0x23, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1f, 0x64, 0x65,
	0x73, 0x6b, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x6f,
	0x74, 0x65, 0x73, 0x56, 0x69, 0x65, 0x77, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x47, 0x0a,
	0x1a, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x77, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x17, 0x64,
	0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x4d, 0x61, 0x69, 0x6e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x46, 0x0a, 0x20, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x73, 0x5f, 0x73, 0x6b, 0x69, 0x70,
	0x70, 0x65, 0x64, 0x5f, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x1c, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x69, 0x64, 0x65,
	0x73, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x73, 0x12, 0x40,
	0x0a, 0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x44, 0x0a, 0x1f, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x18, 0x20, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1b, 0x64, 0x65, 0x73, 0x6b, 0x74,
	0x6f, 0x70, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x65,
	0x77, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x4f, 0x0a, 0x1c, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x19, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65,
	0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x73, 0x68, 0x6f, 0x77, 0x73,
	0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x73, 0x68, 0x6f, 0x77, 0x73,
	0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x40, 0x0a, 0x1d, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x7a, 0x6f, 0x6f, 0x6d, 0x5f, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x02, 0x52, 0x19, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4c,
	0x69, 0x67, 0x68, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x5a, 0x6f, 0x6f, 0x6d, 0x53, 0x63, 0x61,
	0x6c, 0x65, 0x12, 0x53, 0x0a, 0x27, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x73, 0x5f, 0x73,
	0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x73, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x22, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x67, 0x68, 0x74,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x69, 0x64, 0x65, 0x73, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65,
	0x64, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x1e, 0x66, 0x72, 0x65, 0x65, 0x68,
	0x61, 0x6e, 0x64, 0x5f, 0x64, 0x72, 0x61, 0x77, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x6f, 0x6c,
	0x6b, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x1b, 0x66, 0x72, 0x65, 0x65, 0x68, 0x61, 0x6e, 0x64, 0x44, 0x72, 0x61, 0x77, 0x69, 0x6e, 0x67,
	0x54, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x1a,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x18, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x68,
	0x6f, 0x77, 0x73, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x73, 0x68, 0x6f, 0x77, 0x73, 0x4d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x65, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x29, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x77, 0x0a, 0x21, 0x49, 0x4f, 0x53, 0x52, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x6f, 0x6f, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x52, 0x0a, 0x14,
	0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x4b, 0x4e, 0x2e,
	0x49, 0x4f, 0x53, 0x53, 0x61, 0x76, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x12, 0x73, 0x61,
	0x76, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x22, 0xac, 0x05, 0x0a, 0x1c, 0x49, 0x4f, 0x53, 0x53, 0x61, 0x76, 0x65, 0x64, 0x50, 0x6c, 0x61,
	0x79, 0x62, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x12, 0x5e, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x4b,
	0x4e, 0x2e, 0x49, 0x4f, 0x53, 0x53, 0x61, 0x76, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x62, 0x61,
	0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x10, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x6c, 0x69,
	0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x29, 0x0a, 0x10,
	0x62, 0x72, 0x65, 0x61, 0x64, 0x63, 0x72, 0x75, 0x6d, 0x62, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6c,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x72, 0x65, 0x61, 0x64, 0x63, 0x72, 0x75,
	0x6d, 0x62, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x12, 0x30, 0x0a, 0x14, 0x68, 0x61, 0x64, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x68, 0x61, 0x64, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x73, 0x5f,
	0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x45, 0x6c,
	0x61, 0x70, 0x73, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x12, 0x35, 0x0a, 0x17, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x14, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x1f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x1c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x62,
	0x61, 0x63, 0x6b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d,
	0x0a, 0x1b, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73, 0x6c,
	0x69, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x18, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x53,
	0x6c, 0x69, 0x64, 0x65, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x35, 0x0a,
	0x17, 0x69, 0x73, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14,
	0x69, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x53, 0x68, 0x6f, 0x77, 0x22, 0x59, 0x0a, 0x10, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x61, 0x6e, 0x75,
	0x61, 0x6c, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x10, 0x02,
	0x12, 0x11, 0x0a, 0x0d, 0x50, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x68, 0x65, 0x61, 0x72, 0x73, 0x65, 0x10,
	0x04, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x74, 0x10, 0x05, 0x22,
	0x91, 0x03, 0x0a, 0x16, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x12, 0x42, 0x0a, 0x15, 0x6e, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x13, 0x6e, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x12, 0x52, 0x0a, 0x1e, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x5f, 0x66, 0x6f,
	0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x1a, 0x69, 0x6e,
	0x66, 0x6f, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x68, 0x6f, 0x73,
	0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x14, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x53, 0x65, 0x74, 0x52, 0x12, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x68, 0x6f,
	0x73, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x0c, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x0b, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x12, 0x45, 0x0a, 0x1d,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x67, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01, 0x52, 0x1a, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x65, 0x73, 0x22, 0x1d, 0x0a, 0x1b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x68, 0x6f,
	0x73, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x22, 0x61, 0x0a, 0x1d, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x72, 0x76, 0x65, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x63, 0x75, 0x72, 0x76, 0x65,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x50, 0x61, 0x74,
	0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05,
	0x63, 0x75, 0x72, 0x76, 0x65, 0x22, 0x81, 0x05, 0x0a, 0x0c, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x54, 0x53, 0x53, 0x2e, 0x54, 0x53, 0x53, 0x54,
	0x68, 0x65, 0x6d, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x12, 0x2c, 0x0a, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x13, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x63, 0x54,
	0x68, 0x65, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x13, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x63, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x4d, 0x0a, 0x1b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x6c, 0x69, 0x64, 0x65,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x18, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x6c, 0x69, 0x64,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x60, 0x0a, 0x25, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x21, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x2d, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x6c, 0x69, 0x64,
	0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x73, 0x5f, 0x6f, 0x75, 0x72, 0x5f, 0x62, 0x65,
	0x73, 0x74, 0x5f, 0x67, 0x75, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x26,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53,
	0x6c, 0x69, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x73, 0x4f, 0x75, 0x72, 0x42, 0x65, 0x73,
	0x74, 0x47, 0x75, 0x65, 0x73, 0x73, 0x12, 0x60, 0x0a, 0x1b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x63,
	0x75, 0x72, 0x76, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x4b, 0x4e,
	0x2e, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x69,
	0x6e, 0x67, 0x43, 0x75, 0x72, 0x76, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x18,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x69,
	0x6e, 0x67, 0x43, 0x75, 0x72, 0x76, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x1c, 0x6c, 0x69, 0x76, 0x65,
	0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x19,
	0x6c, 0x69, 0x76, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x74, 0x0a, 0x10, 0x53, 0x6c, 0x69,
	0x64, 0x65, 0x54, 0x72, 0x65, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x38, 0x0a,
	0x0d, 0x72, 0x6f, 0x6f, 0x74, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0d, 0x72, 0x6f, 0x6f, 0x74, 0x53, 0x6c,
	0x69, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x6c, 0x69, 0x64, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x73, 0x22,
	0xfd, 0x06, 0x0a, 0x0b, 0x53, 0x68, 0x6f, 0x77, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12,
	0x28, 0x0a, 0x07, 0x75, 0x69, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x07, 0x75, 0x69, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x74, 0x68, 0x65,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x05, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x12,
	0x32, 0x0a, 0x09, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x54, 0x72, 0x65, 0x65, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4b, 0x4e, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x54, 0x72, 0x65,
	0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x09, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x54,
	0x72, 0x65, 0x65, 0x12, 0x1d, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x12, 0x2e, 0x0a, 0x0a, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x68, 0x65, 0x65, 0x74,
	0x18, 0x05, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x68, 0x65,
	0x65, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x13, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x56, 0x69, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x11, 0x6c, 0x6f, 0x6f, 0x70, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x6c,
	0x6f, 0x6f, 0x70, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x41, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x4b, 0x4e, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x4b,
	0x4e, 0x53, 0x68, 0x6f, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x3a, 0x11, 0x6b, 0x4b, 0x4e, 0x53, 0x68,
	0x6f, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x52, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x12, 0x3d, 0x0a, 0x19, 0x61, 0x75, 0x74, 0x6f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x01, 0x35, 0x52, 0x17, 0x61, 0x75, 0x74, 0x6f, 0x70, 0x6c,
	0x61, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x61,
	0x79, 0x12, 0x33, 0x0a, 0x14, 0x61, 0x75, 0x74, 0x6f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x3a,
	0x01, 0x32, 0x52, 0x12, 0x61, 0x75, 0x74, 0x6f, 0x70, 0x6c, 0x61, 0x79, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x69, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x2d, 0x0a, 0x10, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72,
	0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x03, 0x39, 0x30,
	0x30, 0x52, 0x0e, 0x69, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x61,
	0x79, 0x12, 0x2e, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x12, 0x41, 0x0a, 0x1d, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x6c, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x73, 0x5f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x6f, 0x70,
	0x65, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x73, 0x55, 0x70, 0x6f, 0x6e,
	0x4f, 0x70, 0x65, 0x6e, 0x12, 0x2c, 0x0a, 0x09, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x5b, 0x0a, 0x0a, 0x4b, 0x4e, 0x53, 0x68, 0x6f, 0x77, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x15, 0x0a, 0x11, 0x6b, 0x4b, 0x4e, 0x53, 0x68, 0x6f, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x4e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x4b, 0x4e, 0x53, 0x68,
	0x6f, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x10, 0x01,
	0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x4b, 0x4e, 0x53, 0x68, 0x6f, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x48,
	0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x10, 0x02, 0x22,
	0xb1, 0x01, 0x0a, 0x11, 0x4b, 0x4e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x54, 0x53, 0x41, 0x2e, 0x54, 0x53, 0x41, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x04, 0x73, 0x68, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x04, 0x73, 0x68, 0x6f, 0x77, 0x12, 0x49, 0x0a, 0x19, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x16, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0xb9, 0x03, 0x0a, 0x1b, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x6c, 0x12, 0x3f, 0x0a, 0x0a, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x4b, 0x4e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0a,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x75, 0x6c, 0x6c, 0x12, 0x3e, 0x0a, 0x1a, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x3c, 0x0a, 0x19, 0x62, 0x6f, 0x64, 0x79, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x62, 0x6f, 0x64, 0x79, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x12, 0x40, 0x0a, 0x1b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x4a, 0x0a, 0x20, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x56, 0x69, 0x73,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x20, 0x73,
	0x6c, 0x69, 0x64, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x22,
	0xb2, 0x01, 0x0a, 0x11, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x54, 0x53, 0x53, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x28,
	0x0a, 0x0e, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x10, 0x73, 0x6c, 0x69, 0x64,
	0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4b, 0x4e, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x0f, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x22, 0xc1, 0x0a, 0x0a, 0x1e, 0x50, 0x61, 0x73, 0x74, 0x65, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2c, 0x0a, 0x09, 0x64, 0x72, 0x61, 0x77, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x64, 0x72, 0x61, 0x77,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x06, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x12, 0x30, 0x0a,
	0x0b, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x0b, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x12,
	0x2e, 0x0a, 0x0a, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x0a, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12,
	0x42, 0x0a, 0x15, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f, 0x73, 0x6c, 0x69,
	0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x13,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x14, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f,
	0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x12, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x6c, 0x69, 0x64, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x13, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73,
	0x65, 0x64, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x13, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x53, 0x6c, 0x69,
	0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x1a, 0x6f, 0x75, 0x74, 0x6c, 0x69,
	0x6e, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x53, 0x6c, 0x69, 0x64, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x1a, 0x6f, 0x75, 0x74,
	0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x53, 0x6c, 0x69,
	0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x18, 0x6f, 0x75, 0x74, 0x6c, 0x69,
	0x6e, 0x65, 0x48, 0x61, 0x73, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x18, 0x6f, 0x75, 0x74, 0x6c, 0x69,
	0x6e, 0x65, 0x48, 0x61, 0x73, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x53,
	0x68, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2c, 0x0a, 0x0b, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0b, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x12, 0x67, 0x65, 0x6f, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x47, 0x65, 0x6f, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x10, 0x67, 0x65, 0x6f, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x49, 0x6e, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x3f, 0x0a, 0x1c,
	0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x19, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x55, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x60, 0x0a,
	0x1b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x75, 0x72, 0x76, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x4b, 0x4e, 0x2e, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x72, 0x76, 0x65, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x18, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x72, 0x76, 0x65, 0x73, 0x12,
	0x39, 0x0a, 0x19, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x6c, 0x69, 0x64,
	0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x55, 0x55, 0x49, 0x44, 0x73, 0x18, 0x0f, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x16, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x6c, 0x69, 0x64,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x55, 0x55, 0x49, 0x44, 0x73, 0x12, 0x53, 0x0a, 0x27, 0x73, 0x6c,
	0x69, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x68, 0x61, 0x76, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x22, 0x73, 0x6c, 0x69,
	0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x48, 0x61, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x4e, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x35, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4b, 0x4e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x64, 0x0a, 0x12, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x4b, 0x4e, 0x2e, 0x50, 0x61, 0x73, 0x74, 0x65, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x10, 0x6c, 0x69, 0x76, 0x65,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x1a, 0x89, 0x01, 0x0a,
	0x13, 0x4c, 0x69, 0x76, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x50, 0x61, 0x69, 0x72, 0x12, 0x36, 0x0a, 0x0f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x6c,
	0x69, 0x76, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3a, 0x0a, 0x11,
	0x6c, 0x69, 0x76, 0x65, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x6c, 0x69, 0x76, 0x65, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xb5, 0x02, 0x0a, 0x25, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x46, 0x6f, 0x72, 0x55, 0x6e, 0x64, 0x6f, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x12, 0x2f, 0x0a, 0x0b, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x11, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f,
	0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0f, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x15, 0x64, 0x72,
	0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x69, 0x64, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x55, 0x55, 0x49, 0x44, 0x52, 0x12, 0x64, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0c,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x12, 0x32, 0x0a, 0x15,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x67, 0x73,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x54, 0x61, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0xb7, 0x04, 0x0a, 0x10, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x2f, 0x0a, 0x0b, 0x6d, 0x6f, 0x76, 0x69,
	0x65, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x6d,
	0x6f, 0x76, 0x69, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7a, 0x0a, 0x0f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b,
	0x2e, 0x4b, 0x4e, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x79,
	0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x3a, 0x21, 0x6b, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x57, 0x69, 0x74, 0x68, 0x53, 0x68, 0x6f, 0x77, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x0d, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x75,
	0x6d, 0x12, 0x36, 0x0a, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x10, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x73, 0x79, 0x6e,
	0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x4b, 0x4e, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x6e, 0x63,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x4d, 0x0a, 0x12, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x4b,
	0x4e, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x72, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x11, 0x63, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22,
	0x69, 0x0a, 0x16, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x6e, 0x63,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x25, 0x0a, 0x21, 0x6b, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x57, 0x69, 0x74, 0x68, 0x53, 0x68, 0x6f, 0x77, 0x10, 0x00,
	0x12, 0x28, 0x0a, 0x24, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x79,
	0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x53, 0x79, 0x6e, 0x63,
	0x57, 0x69, 0x74, 0x68, 0x53, 0x68, 0x6f, 0x77, 0x10, 0x01, 0x22, 0x8e, 0x01, 0x0a, 0x12, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x34, 0x0a, 0x11, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x79, 0x6e, 0x63,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0e, 0x6f, 0x75, 0x74, 0x4f, 0x66, 0x53, 0x79,
	0x6e, 0x63, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x42, 0x0a, 0x1b, 0x63, 0x61, 0x6e, 0x5f, 0x63,
	0x6c, 0x65, 0x61, 0x72, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x79, 0x6e, 0x63,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x52, 0x16, 0x63, 0x61, 0x6e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x4f, 0x75, 0x74,
	0x4f, 0x66, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x74, 0x0a, 0x1a, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x56, 0x0a, 0x29, 0x64, 0x69, 0x64,
	0x5f, 0x61, 0x64, 0x64, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x72, 0x61, 0x64, 0x61, 0x72, 0x5f, 0x34, 0x39,
	0x36, 0x35, 0x34, 0x33, 0x30, 0x35, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x23, 0x64, 0x69,
	0x64, 0x41, 0x64, 0x64, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x46, 0x6f, 0x72, 0x52, 0x61, 0x64, 0x61, 0x72, 0x34, 0x39, 0x36, 0x35, 0x34, 0x33, 0x30,
	0x35, 0x22, 0x63, 0x0a, 0x1a, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4b, 0x4e, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x06,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x8d, 0x03, 0x0a, 0x15, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x12, 0x21, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x3a, 0x02, 0x2d, 0x31, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x5e, 0x0a, 0x18, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x18,
	0xe8, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4b, 0x4e, 0x2e, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x16, 0x6e, 0x61, 0x76,
	0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x12, 0x4f, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x4b, 0x4e, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x4c, 0x61, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x12, 0x4f, 0x0a, 0x13, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x18, 0xea, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x4b, 0x4e, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x50, 0x61, 0x75, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x11, 0x70, 0x61, 0x75, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x4f, 0x0a, 0x13, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x18, 0xeb, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x4b, 0x4e, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x11, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x22, 0xa7, 0x04, 0x0a, 0x1f, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x3a, 0x0a, 0x14, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55,
	0x55, 0x49, 0x44, 0x52, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x6c, 0x69, 0x64, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x1b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x18, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x9b, 0x01, 0x0a, 0x0f, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4a, 0x2e,
	0x4b, 0x4e, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x76, 0x69,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x76, 0x69,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x69, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x3a, 0x26, 0x6b, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x6e,
	0x65, 0x52, 0x0e, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x22, 0xac, 0x01, 0x0a, 0x26, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x4e,
	0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e,
	0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x26,
	0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x6b, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x10, 0x02,
	0x22, 0x8a, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x61,
	0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12,
	0x3b, 0x0a, 0x11, 0x75, 0x6e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x02, 0x18, 0x01, 0x52, 0x10, 0x75, 0x6e, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x0d,
	0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x0c, 0x75, 0x6e, 0x69, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xde, 0x02,
	0x0a, 0x1a, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x75, 0x73, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x80, 0x01, 0x0a,
	0x10, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x4b, 0x4e, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x75, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x50, 0x61, 0x75, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a,
	0x1e, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x75, 0x73, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x52,
	0x0e, 0x70, 0x61, 0x75, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22,
	0xbc, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x75,
	0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x6b,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x75, 0x73, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x10, 0x00, 0x12,
	0x21, 0x0a, 0x1d, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x75,
	0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65,
	0x10, 0x01, 0x12, 0x2c, 0x0a, 0x28, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x50, 0x61, 0x75, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x61, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x10, 0x02,
	0x12, 0x2c, 0x0a, 0x28, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61,
	0x75, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x61, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x57, 0x68, 0x69, 0x74, 0x65, 0x10, 0x03, 0x22, 0xc6,
	0x05, 0x0a, 0x1a, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x76, 0x69,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x40, 0x0a,
	0x14, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x12, 0x6d, 0x6f, 0x76,
	0x69, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x7a, 0x0a, 0x10, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x4b, 0x4e, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x3a, 0x18, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x76,
	0x69, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x65, 0x6b, 0x52, 0x0e, 0x6d, 0x6f, 0x76,
	0x69, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6d,
	0x6f, 0x76, 0x69, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x70, 0x0a, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x74, 0x68, 0x61, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x64, 0x5f, 0x61, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x73, 0x5f,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x28, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x54, 0x68, 0x61, 0x74, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x64, 0x41, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x73,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x13, 0x6d, 0x6f, 0x76,
	0x69, 0x65, 0x5f, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49,
	0x44, 0x52, 0x10, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x22, 0x91, 0x02, 0x0a, 0x17, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x18, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x76,
	0x69, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x1c, 0x0a,
	0x18, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x76, 0x69, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x65, 0x6b, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x6b,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21,
	0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63,
	0x6b, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x50,
	0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x10, 0x04, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x53, 0x63, 0x72, 0x75, 0x62, 0x62, 0x69, 0x6e, 0x67, 0x10,
	0x05, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x4d,
	0x6f, 0x76, 0x69, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x64, 0x53, 0x63, 0x72, 0x75,
	0x62, 0x62, 0x69, 0x6e, 0x67, 0x10, 0x06, 0x22, 0xb4, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x3e, 0x0a, 0x0e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x4b, 0x4e, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0d, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x56, 0x0a, 0x29, 0x69, 0x73, 0x5f, 0x6d, 0x6f, 0x76,
	0x69, 0x65, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x74, 0x72, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x23, 0x69, 0x73, 0x4d, 0x6f, 0x76,
	0x69, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x54, 0x72, 0x69,
	0x6d, 0x6d, 0x65, 0x64, 0x54, 0x6f, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xab,
	0x01, 0x0a, 0x13, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x31, 0x0a, 0x0a, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09,
	0x6d, 0x6f, 0x76, 0x69, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x02, 0x2d,
	0x31, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x13,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x11, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x93, 0x02, 0x0a,
	0x0a, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x4b, 0x4e, 0x2e, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x2e, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65,
	0x3a, 0x19, 0x6b, 0x4b, 0x4e, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x4d,
	0x6f, 0x64, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x4f, 0x6e, 0x63, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x12, 0x33, 0x0a, 0x0b, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x6d, 0x6f, 0x76, 0x69,
	0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x22, 0x6a, 0x0a, 0x0e, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x4b, 0x4e, 0x53,
	0x6f, 0x75, 0x6e, 0x64, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x50, 0x6c, 0x61,
	0x79, 0x4f, 0x6e, 0x63, 0x65, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x4b, 0x4e, 0x53, 0x6f,
	0x75, 0x6e, 0x64, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x6f, 0x70,
	0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x4b, 0x4e, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x44, 0x6f, 0x4e, 0x6f, 0x74, 0x50, 0x6c, 0x61, 0x79,
	0x10, 0x02, 0x22, 0x54, 0x0a, 0x1c, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x75, 0x61, 0x6c,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x22, 0xfd, 0x03, 0x0a, 0x1f, 0x53, 0x6c, 0x69,
	0x64, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2f, 0x0a, 0x0b,
	0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x0a, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x3b, 0x0a,
	0x12, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x65,
	0x64, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x73, 0x6c, 0x69, 0x64, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x54, 0x6f, 0x45, 0x64, 0x69, 0x74, 0x12, 0x8f, 0x01, 0x0a, 0x2a, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x73, 0x6c,
	0x69, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x4b, 0x4e, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x2e, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x25, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50,
	0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x46,
	0x6f, 0x72, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x1b,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x18, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x61,
	0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x1a, 0x8e, 0x01, 0x0a, 0x10, 0x4f, 0x75, 0x74, 0x6c,
	0x69, 0x6e, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x0a,
	0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x09, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x4b, 0x0a, 0x1a, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x65, 0x74, 0x52, 0x18,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x22, 0x4f, 0x0a, 0x1e, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2d, 0x0a, 0x0a, 0x73, 0x6c,
	0x69, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09,
	0x73, 0x6c, 0x69, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0xef, 0x03, 0x0a, 0x14, 0x4d, 0x69,
	0x78, 0x65, 0x64, 0x49, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72,
	0x67, 0x73, 0x12, 0x4d, 0x0a, 0x0f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x4b, 0x4e,
	0x2e, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x49, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x72, 0x67, 0x73, 0x2e, 0x41, 0x72, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x69,
	0x6e, 0x64, 0x52, 0x0d, 0x61, 0x72, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x3b, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x41,
	0x64, 0x64, 0x49, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x67,
	0x73, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x41, 0x72, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5a,
	0x0a, 0x1a, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x49, 0x64, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x67,
	0x73, 0x52, 0x17, 0x73, 0x68, 0x6f, 0x77, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x41, 0x72, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x10, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x49, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x67, 0x73,
	0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x72, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x5a, 0x0a, 0x1a, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x49, 0x64, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x72, 0x67, 0x73, 0x52, 0x17, 0x68, 0x69, 0x64, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x41, 0x72, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x4d, 0x0a, 0x0c,
	0x41, 0x72, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x07, 0x0a, 0x03,
	0x41, 0x64, 0x64, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x10,
	0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x68, 0x6f, 0x77, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x48, 0x69, 0x64, 0x65, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x10, 0x03, 0x22, 0xc6, 0x02, 0x0a, 0x0d,
	0x4c, 0x69, 0x76, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a,
	0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x08, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69,
	0x73, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x12, 0x37, 0x0a, 0x11, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x10, 0x6e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x61, 0x73, 0x6b, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x6d, 0x61, 0x73, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x73, 0x6b,
	0x5f, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6d, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x72, 0x6e, 0x65, 0x72,
	0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x32, 0x4c, 0x0a, 0x0f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x11, 0x2e, 0x54, 0x53, 0x44, 0x2e,
	0x4d, 0x6f, 0x76, 0x69, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4b, 0x4e, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x6c, 0x69, 0x76, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0xa7, 0x04, 0x0a, 0x0f, 0x4c, 0x69, 0x76, 0x65, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x63, 0x0a, 0x1a,
	0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x4b, 0x4e, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x18, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x7c, 0x0a, 0x21, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x4b,
	0x4e, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x1e, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x3e, 0x0a, 0x11, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0f,
	0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x38, 0x0a, 0x18, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x61, 0x62, 0x62, 0x72, 0x65, 0x76,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x16, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x41, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x3f, 0x0a, 0x1c, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x74, 0x69, 0x6e, 0x74,
	0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x54,
	0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69,
	0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xf7,
	0x01, 0x0a, 0x2d, 0x4c, 0x69, 0x76, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x61, 0x0a, 0x28, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x61,
	0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x24, 0x73,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x55, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x63, 0x0a, 0x2f, 0x68, 0x61, 0x73, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x2a, 0x68, 0x61,
	0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x22, 0xaa, 0x03, 0x0a, 0x21, 0x4c, 0x69, 0x76,
	0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e,
	0x4b, 0x4e, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x61, 0x70, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x42, 0x0a, 0x1e, 0x69, 0x73, 0x5f, 0x69, 0x6f, 0x73, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x69, 0x73, 0x49, 0x6f, 0x73, 0x53, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x43,
	0x0a, 0x18, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x16, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x30, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x0f, 0x0a, 0x0b, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x42, 0x61, 0x63, 0x6b, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x72,
	0x6f, 0x6e, 0x74, 0x10, 0x02, 0x22, 0x7c, 0x0a, 0x19, 0x4c, 0x69, 0x76, 0x65, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x0e,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x2f, 0x6b, 0x70, 0x62,
}

var (
	file_KNArchives_proto_rawDescOnce sync.Once
	file_KNArchives_proto_rawDescData = file_KNArchives_proto_rawDesc
)

func file_KNArchives_proto_rawDescGZIP() []byte {
	file_KNArchives_proto_rawDescOnce.Do(func() {
		file_KNArchives_proto_rawDescData = protoimpl.X.CompressGZIP(file_KNArchives_proto_rawDescData)
	})
	return file_KNArchives_proto_rawDescData
}

var file_KNArchives_proto_enumTypes = make([]protoimpl.EnumInfo, 21)
var file_KNArchives_proto_msgTypes = make([]protoimpl.MessageInfo, 57)
var file_KNArchives_proto_goTypes = []interface{}{
	(TransitionAttributesArchive_TransitionCustomAttributesTimingCurveType)(0),  // 0: KN.TransitionAttributesArchive.TransitionCustomAttributesTimingCurveType
	(TransitionAttributesArchive_TransitionCustomAttributesTextDeliveryType)(0), // 1: KN.TransitionAttributesArchive.TransitionCustomAttributesTextDeliveryType
	(BuildAttributeValueArchive_BuildAttributeValueType)(0),                     // 2: KN.BuildAttributeValueArchive.BuildAttributeValueType
	(BuildAttributesArchive_BuildAttributesAcceleration)(0),                     // 3: KN.BuildAttributesArchive.BuildAttributesAcceleration
	(BuildAttributesArchive_BuildAttributesRotationDirection)(0),                // 4: KN.BuildAttributesArchive.BuildAttributesRotationDirection
	(BuildAttributesArchive_BuildAttributesCurveStyle)(0),                       // 5: KN.BuildAttributesArchive.BuildAttributesCurveStyle
	(BuildAttributesArchive_BuildAttributesTextDelivery)(0),                     // 6: KN.BuildAttributesArchive.BuildAttributesTextDelivery
	(BuildAttributesArchive_BuildAttributesDeliveryOption)(0),                   // 7: KN.BuildAttributesArchive.BuildAttributesDeliveryOption
	(BuildAttributesArchive_ActionBuildAttributesJiggleIntensity)(0),            // 8: KN.BuildAttributesArchive.ActionBuildAttributesJiggleIntensity
	(PlaceholderArchive_Kind)(0),                                                // 9: KN.PlaceholderArchive.Kind
	(DesktopUILayoutArchive_SidebarViewMode)(0),                                 // 10: KN.DesktopUILayoutArchive.SidebarViewMode
	(DesktopUILayoutArchive_InspectorPaneViewMode)(0),                           // 11: KN.DesktopUILayoutArchive.InspectorPaneViewMode
	(IOSSavedPlaybackStateArchive_PresentationType)(0),                          // 12: KN.IOSSavedPlaybackStateArchive.PresentationType
	(ShowArchive_KNShowMode)(0),                                                 // 13: KN.ShowArchive.KNShowMode
	(RecordingArchive_RecordingSyncStateEnum)(0),                                // 14: KN.RecordingArchive.RecordingSyncStateEnum
	(RecordingNavigationEventArchive_RecordingNavigationEventAnimationPhase)(0), // 15: KN.RecordingNavigationEventArchive.RecordingNavigationEventAnimationPhase
	(RecordingPauseEventArchive_RecordingPauseEventType)(0),                     // 16: KN.RecordingPauseEventArchive.RecordingPauseEventType
	(RecordingMovieEventArchive_RecordingMovieEventType)(0),                     // 17: KN.RecordingMovieEventArchive.RecordingMovieEventType
	(Soundtrack_SoundtrackMode)(0),                                              // 18: KN.Soundtrack.SoundtrackMode
	(MixedIdOperationArgs_ArgsListKind)(0),                                      // 19: KN.MixedIdOperationArgs.ArgsListKind
	(LiveVideoCaptureDeviceDescription_Position)(0),                             // 20: KN.LiveVideoCaptureDeviceDescription.Position
	(*AnimationAttributesArchive)(nil),                                          // 21: KN.AnimationAttributesArchive
	(*TransitionAttributesArchive)(nil),                                         // 22: KN.TransitionAttributesArchive
	(*TransitionArchive)(nil),                                                   // 23: KN.TransitionArchive
	(*BuildChunkArchive)(nil),                                                   // 24: KN.BuildChunkArchive
	(*BuildChunkIdentifierArchive)(nil),                                         // 25: KN.BuildChunkIdentifierArchive
	(*BuildAttributeValueArchive)(nil),                                          // 26: KN.BuildAttributeValueArchive
	(*BuildAttributeTupleArchive)(nil),                                          // 27: KN.BuildAttributeTupleArchive
	(*BuildAttributesArchive)(nil),                                              // 28: KN.BuildAttributesArchive
	(*BuildArchive)(nil),                                                        // 29: KN.BuildArchive
	(*PlaceholderArchive)(nil),                                                  // 30: KN.PlaceholderArchive
	(*NoteArchive)(nil),                                                         // 31: KN.NoteArchive
	(*ClassicStylesheetRecordArchive)(nil),                                      // 32: KN.ClassicStylesheetRecordArchive
	(*ClassicThemeRecordArchive)(nil),                                           // 33: KN.ClassicThemeRecordArchive
	(*SlideArchive)(nil),                                                        // 34: KN.SlideArchive
	(*SlideNodeArchive)(nil),                                                    // 35: KN.SlideNodeArchive
	(*DesktopUILayoutArchive)(nil),                                              // 36: KN.DesktopUILayoutArchive
	(*UIStateArchive)(nil),                                                      // 37: KN.UIStateArchive
	(*IOSRestorableViewStateRootArchive)(nil),                                   // 38: KN.IOSRestorableViewStateRootArchive
	(*IOSSavedPlaybackStateArchive)(nil),                                        // 39: KN.IOSSavedPlaybackStateArchive
	(*CanvasSelectionArchive)(nil),                                              // 40: KN.CanvasSelectionArchive
	(*ActionGhostSelectionArchive)(nil),                                         // 41: KN.ActionGhostSelectionArchive
	(*ThemeCustomTimingCurveArchive)(nil),                                       // 42: KN.ThemeCustomTimingCurveArchive
	(*ThemeArchive)(nil),                                                        // 43: KN.ThemeArchive
	(*SlideTreeArchive)(nil),                                                    // 44: KN.SlideTreeArchive
	(*ShowArchive)(nil),                                                         // 45: KN.ShowArchive
	(*KNDocumentArchive)(nil),                                                   // 46: KN.KNDocumentArchive
	(*SlideStylePropertiesArchive)(nil),                                         // 47: KN.SlideStylePropertiesArchive
	(*SlideStyleArchive)(nil),                                                   // 48: KN.SlideStyleArchive
	(*PasteboardNativeStorageArchive)(nil),                                      // 49: KN.PasteboardNativeStorageArchive
	(*PrototypeForUndoTemplateChangeArchive)(nil),                               // 50: KN.PrototypeForUndoTemplateChangeArchive
	(*RecordingArchive)(nil),                                                    // 51: KN.RecordingArchive
	(*RecordingSyncState)(nil),                                                  // 52: KN.RecordingSyncState
	(*RecordingCorrectionHistory)(nil),                                          // 53: KN.RecordingCorrectionHistory
	(*RecordingEventTrackArchive)(nil),                                          // 54: KN.RecordingEventTrackArchive
	(*RecordingEventArchive)(nil),                                               // 55: KN.RecordingEventArchive
	(*RecordingNavigationEventArchive)(nil),                                     // 56: KN.RecordingNavigationEventArchive
	(*RecordingLaserEventArchive)(nil),                                          // 57: KN.RecordingLaserEventArchive
	(*RecordingPauseEventArchive)(nil),                                          // 58: KN.RecordingPauseEventArchive
	(*RecordingMovieEventArchive)(nil),                                          // 59: KN.RecordingMovieEventArchive
	(*RecordingMovieTrackArchive)(nil),                                          // 60: KN.RecordingMovieTrackArchive
	(*MovieSegmentArchive)(nil),                                                 // 61: KN.MovieSegmentArchive
	(*Soundtrack)(nil),                                                          // 62: KN.Soundtrack
	(*SlideNumberAttachmentArchive)(nil),                                        // 63: KN.SlideNumberAttachmentArchive
	(*SlideCollectionSelectionArchive)(nil),                                     // 64: KN.SlideCollectionSelectionArchive
	(*PresenterNotesSelectionArchive)(nil),                                      // 65: KN.PresenterNotesSelectionArchive
	(*MixedIdOperationArgs)(nil),                                                // 66: KN.MixedIdOperationArgs
	(*LiveVideoInfo)(nil),                                                       // 67: KN.LiveVideoInfo
	(*LiveVideoSource)(nil),                                                     // 68: KN.LiveVideoSource
	(*LiveVideoSourceCollaborationCommandUsageState)(nil),                       // 69: KN.LiveVideoSourceCollaborationCommandUsageState
	(*LiveVideoCaptureDeviceDescription)(nil),                                   // 70: KN.LiveVideoCaptureDeviceDescription
	(*LiveVideoSourceCollection)(nil),                                           // 71: KN.LiveVideoSourceCollection
	(*SlideArchive_SageTagMapEntry)(nil),                                        // 72: KN.SlideArchive.SageTagMapEntry
	(*SlideArchive_InstructionalTextMap)(nil),                                   // 73: KN.SlideArchive.InstructionalTextMap
	(*SlideArchive_InstructionalTextMap_InstructionalTextMapEntry)(nil),         // 74: KN.SlideArchive.InstructionalTextMap.InstructionalTextMapEntry
	(*SlideNodeArchive_SlideSpecificHyperlinkMapEntry)(nil),                     // 75: KN.SlideNodeArchive.SlideSpecificHyperlinkMapEntry
	(*PasteboardNativeStorageArchive_LiveVideoSourcePair)(nil),                  // 76: KN.PasteboardNativeStorageArchive.LiveVideoSourcePair
	(*SlideCollectionSelectionArchive_OutlineSelection)(nil),                    // 77: KN.SlideCollectionSelectionArchive.OutlineSelection
	(*Color)(nil),             // 78: TSP.Color
	(*PathSourceArchive)(nil), // 79: TSD.PathSourceArchive
	(*Reference)(nil),         // 80: TSP.Reference
	(*UUID)(nil),              // 81: TSP.UUID
	(*ShapeInfoArchive)(nil),  // 82: TSWP.ShapeInfoArchive
	(*StylesheetArchive_IdentifiedStyleEntry)(nil), // 83: TSS.StylesheetArchive.IdentifiedStyleEntry
	(*GeometryArchive)(nil),                        // 84: TSD.GeometryArchive
	(*TSWPShapeStylePropertiesArchive)(nil),        // 85: TSWP.TSWPShapeStylePropertiesArchive
	(*GuideArchive)(nil),                           // 86: TSD.GuideArchive
	(*DataReference)(nil),                          // 87: TSP.DataReference
	(*Size)(nil),                                   // 88: TSP.Size
	(*Point)(nil),                                  // 89: TSP.Point
	(*ChartUIState)(nil),                           // 90: TSCH.ChartUIState
	(*SelectionPathArchive)(nil),                   // 91: TSK.SelectionPathArchive
	(*IndexSet)(nil),                               // 92: TSP.IndexSet
	(*TSSThemeArchive)(nil),                        // 93: TSS.TSSThemeArchive
	(*TSADocumentArchive)(nil),                     // 94: TSA.TSADocumentArchive
	(*FillArchive)(nil),                            // 95: TSD.FillArchive
	(*StyleArchive)(nil),                           // 96: TSS.StyleArchive
	(*Range)(nil),                                  // 97: TSP.Range
	(*Date)(nil),                                   // 98: TSP.Date
	(*TextualAttachmentArchive)(nil),               // 99: TSWP.TextualAttachmentArchive
	(*AddIdOperationArgs)(nil),                     // 100: TSK.AddIdOperationArgs
	(*IdPlacementOperationArgs)(nil),               // 101: TSK.IdPlacementOperationArgs
	(*RemoveIdOperationArgs)(nil),                  // 102: TSK.RemoveIdOperationArgs
	(*MovieArchive)(nil),                           // 103: TSD.MovieArchive
}
var file_KNArchives_proto_depIdxs = []int32{
	78,  // 0: KN.AnimationAttributesArchive.color:type_name -> TSP.Color
	79,  // 1: KN.AnimationAttributesArchive.custom_effect_timing_curve_1:type_name -> TSD.PathSourceArchive
	79,  // 2: KN.AnimationAttributesArchive.custom_effect_timing_curve_2:type_name -> TSD.PathSourceArchive
	79,  // 3: KN.AnimationAttributesArchive.custom_effect_timing_curve_3:type_name -> TSD.PathSourceArchive
	21,  // 4: KN.TransitionAttributesArchive.animationAttributes:type_name -> KN.AnimationAttributesArchive
	0,   // 5: KN.TransitionAttributesArchive.custom_timing_curve:type_name -> KN.TransitionAttributesArchive.TransitionCustomAttributesTimingCurveType
	1,   // 6: KN.TransitionAttributesArchive.custom_text_delivery_type:type_name -> KN.TransitionAttributesArchive.TransitionCustomAttributesTextDeliveryType
	78,  // 7: KN.TransitionAttributesArchive.database_color:type_name -> TSP.Color
	22,  // 8: KN.TransitionArchive.attributes:type_name -> KN.TransitionAttributesArchive
	80,  // 9: KN.BuildChunkArchive.build:type_name -> TSP.Reference
	25,  // 10: KN.BuildChunkArchive.build_chunk_identifier:type_name -> KN.BuildChunkIdentifierArchive
	81,  // 11: KN.BuildChunkArchive.build_id:type_name -> TSP.UUID
	81,  // 12: KN.BuildChunkIdentifierArchive.build_id:type_name -> TSP.UUID
	79,  // 13: KN.BuildAttributeValueArchive.path_source_value:type_name -> TSD.PathSourceArchive
	78,  // 14: KN.BuildAttributeValueArchive.color_value:type_name -> TSP.Color
	2,   // 15: KN.BuildAttributeValueArchive.type:type_name -> KN.BuildAttributeValueArchive.BuildAttributeValueType
	26,  // 16: KN.BuildAttributeTupleArchive.value:type_name -> KN.BuildAttributeValueArchive
	81,  // 17: KN.BuildAttributeTupleArchive.build_id:type_name -> TSP.UUID
	25,  // 18: KN.BuildAttributeTupleArchive.build_chunk_identifier:type_name -> KN.BuildChunkIdentifierArchive
	21,  // 19: KN.BuildAttributesArchive.animationAttributes:type_name -> KN.AnimationAttributesArchive
	5,   // 20: KN.BuildAttributesArchive.curveStyle:type_name -> KN.BuildAttributesArchive.BuildAttributesCurveStyle
	4,   // 21: KN.BuildAttributesArchive.action_rotationDirection:type_name -> KN.BuildAttributesArchive.BuildAttributesRotationDirection
	3,   // 22: KN.BuildAttributesArchive.action_acceleration:type_name -> KN.BuildAttributesArchive.BuildAttributesAcceleration
	79,  // 23: KN.BuildAttributesArchive.action_motionPathSource:type_name -> TSD.PathSourceArchive
	6,   // 24: KN.BuildAttributesArchive.custom_textDelivery:type_name -> KN.BuildAttributesArchive.BuildAttributesTextDelivery
	7,   // 25: KN.BuildAttributesArchive.custom_deliveryOption:type_name -> KN.BuildAttributesArchive.BuildAttributesDeliveryOption
	8,   // 26: KN.BuildAttributesArchive.custom_action_jiggleIntensity:type_name -> KN.BuildAttributesArchive.ActionBuildAttributesJiggleIntensity
	78,  // 27: KN.BuildAttributesArchive.database_color:type_name -> TSP.Color
	80,  // 28: KN.BuildArchive.drawable:type_name -> TSP.Reference
	28,  // 29: KN.BuildArchive.attributes:type_name -> KN.BuildAttributesArchive
	82,  // 30: KN.PlaceholderArchive.super:type_name -> TSWP.ShapeInfoArchive
	9,   // 31: KN.PlaceholderArchive.kind:type_name -> KN.PlaceholderArchive.Kind
	80,  // 32: KN.NoteArchive.containedStorage:type_name -> TSP.Reference
	83,  // 33: KN.ClassicStylesheetRecordArchive.identifier_to_style_map:type_name -> TSS.StylesheetArchive.IdentifiedStyleEntry
	80,  // 34: KN.ClassicStylesheetRecordArchive.deprecated_theme:type_name -> TSP.Reference
	80,  // 35: KN.ClassicThemeRecordArchive.stylesheetRecord:type_name -> TSP.Reference
	80,  // 36: KN.ClassicThemeRecordArchive.templates:type_name -> TSP.Reference
	80,  // 37: KN.SlideArchive.style:type_name -> TSP.Reference
	80,  // 38: KN.SlideArchive.builds:type_name -> TSP.Reference
	24,  // 39: KN.SlideArchive.buildChunkArchives:type_name -> KN.BuildChunkArchive
	80,  // 40: KN.SlideArchive.buildChunks:type_name -> TSP.Reference
	23,  // 41: KN.SlideArchive.transition:type_name -> KN.TransitionArchive
	80,  // 42: KN.SlideArchive.titlePlaceholder:type_name -> TSP.Reference
	80,  // 43: KN.SlideArchive.bodyPlaceholder:type_name -> TSP.Reference
	80,  // 44: KN.SlideArchive.objectPlaceholder:type_name -> TSP.Reference
	80,  // 45: KN.SlideArchive.slideNumberPlaceholder:type_name -> TSP.Reference
	80,  // 46: KN.SlideArchive.owned_drawables:type_name -> TSP.Reference
	80,  // 47: KN.SlideArchive.drawables_z_order:type_name -> TSP.Reference
	72,  // 48: KN.SlideArchive.sage_tag_to_info_map:type_name -> KN.SlideArchive.SageTagMapEntry
	73,  // 49: KN.SlideArchive.instructional_text_map:type_name -> KN.SlideArchive.InstructionalTextMap
	84,  // 50: KN.SlideArchive.titlePlaceholderGeometry:type_name -> TSD.GeometryArchive
	85,  // 51: KN.SlideArchive.titleLayoutProperties:type_name -> TSWP.TSWPShapeStylePropertiesArchive
	84,  // 52: KN.SlideArchive.bodyPlaceholderGeometry:type_name -> TSD.GeometryArchive
	85,  // 53: KN.SlideArchive.bodyLayoutProperties:type_name -> TSWP.TSWPShapeStylePropertiesArchive
	84,  // 54: KN.SlideArchive.slideNumberPlaceholderGeometry:type_name -> TSD.GeometryArchive
	85,  // 55: KN.SlideArchive.slideNumberLayoutProperties:type_name -> TSWP.TSWPShapeStylePropertiesArchive
	80,  // 56: KN.SlideArchive.classicStylesheetRecord:type_name -> TSP.Reference
	80,  // 57: KN.SlideArchive.bodyParagraphStyles:type_name -> TSP.Reference
	80,  // 58: KN.SlideArchive.bodyListStyles:type_name -> TSP.Reference
	80,  // 59: KN.SlideArchive.template_slide:type_name -> TSP.Reference
	86,  // 60: KN.SlideArchive.staticGuides:type_name -> TSD.GuideArchive
	80,  // 61: KN.SlideArchive.userDefinedGuideStorage:type_name -> TSP.Reference
	80,  // 62: KN.SlideArchive.note:type_name -> TSP.Reference
	80,  // 63: KN.SlideArchive.infos_using_object_placeholder_geometry:type_name -> TSP.Reference
	80,  // 64: KN.SlideArchive.info_using_object_placeholder_geometry:type_name -> TSP.Reference
	80,  // 65: KN.SlideNodeArchive.children:type_name -> TSP.Reference
	80,  // 66: KN.SlideNodeArchive.slide:type_name -> TSP.Reference
	87,  // 67: KN.SlideNodeArchive.thumbnails:type_name -> TSP.DataReference
	88,  // 68: KN.SlideNodeArchive.thumbnailSizes:type_name -> TSP.Size
	75,  // 69: KN.SlideNodeArchive.slideSpecificHyperlinkMap:type_name -> KN.SlideNodeArchive.SlideSpecificHyperlinkMapEntry
	81,  // 70: KN.SlideNodeArchive.template_slide_id:type_name -> TSP.UUID
	81,  // 71: KN.SlideNodeArchive.live_video_source_ids:type_name -> TSP.UUID
	80,  // 72: KN.SlideNodeArchive.database_thumbnail:type_name -> TSP.Reference
	80,  // 73: KN.SlideNodeArchive.database_thumbnails:type_name -> TSP.Reference
	10,  // 74: KN.DesktopUILayoutArchive.sidebar_view_mode:type_name -> KN.DesktopUILayoutArchive.SidebarViewMode
	11,  // 75: KN.DesktopUILayoutArchive.inspector_pane_view_mode:type_name -> KN.DesktopUILayoutArchive.InspectorPaneViewMode
	80,  // 76: KN.UIStateArchive.slideNodeToEdit:type_name -> TSP.Reference
	80,  // 77: KN.UIStateArchive.deprecated_template_slide_node_to_apply:type_name -> TSP.Reference
	88,  // 78: KN.UIStateArchive.deprecated_slideThumbnailSize:type_name -> TSP.Size
	89,  // 79: KN.UIStateArchive.canvasOffset:type_name -> TSP.Point
	80,  // 80: KN.UIStateArchive.selectedSlideNodes:type_name -> TSP.Reference
	89,  // 81: KN.UIStateArchive.iPhoneCanvasOffset:type_name -> TSP.Point
	89,  // 82: KN.UIStateArchive.iPhone568CanvasOffset:type_name -> TSP.Point
	80,  // 83: KN.UIStateArchive.desktop_ui_layout:type_name -> TSP.Reference
	89,  // 84: KN.UIStateArchive.desktop_canvas_offset:type_name -> TSP.Point
	90,  // 85: KN.UIStateArchive.chart_ui_state:type_name -> TSCH.ChartUIState
	80,  // 86: KN.UIStateArchive.collapsed_slide_nodes:type_name -> TSP.Reference
	80,  // 87: KN.UIStateArchive.outline_collapsed_slide_nodes:type_name -> TSP.Reference
	80,  // 88: KN.UIStateArchive.outline_has_body_slide_nodes:type_name -> TSP.Reference
	88,  // 89: KN.UIStateArchive.desktop_main_content_size:type_name -> TSP.Size
	89,  // 90: KN.UIStateArchive.desktop_main_window_origin:type_name -> TSP.Point
	91,  // 91: KN.UIStateArchive.selection_path:type_name -> TSK.SelectionPathArchive
	80,  // 92: KN.UIStateArchive.element_list_expanded_groups:type_name -> TSP.Reference
	80,  // 93: KN.UIStateArchive.freehand_drawing_toolkit_state:type_name -> TSP.Reference
	80,  // 94: KN.UIStateArchive.selection_path_transformer:type_name -> TSP.Reference
	39,  // 95: KN.IOSRestorableViewStateRootArchive.saved_playback_state:type_name -> KN.IOSSavedPlaybackStateArchive
	12,  // 96: KN.IOSSavedPlaybackStateArchive.presentation_type:type_name -> KN.IOSSavedPlaybackStateArchive.PresentationType
	80,  // 97: KN.CanvasSelectionArchive.infos:type_name -> TSP.Reference
	80,  // 98: KN.CanvasSelectionArchive.non_interactive_infos:type_name -> TSP.Reference
	80,  // 99: KN.CanvasSelectionArchive.infos_for_action_ghost_indexes:type_name -> TSP.Reference
	92,  // 100: KN.CanvasSelectionArchive.action_ghost_indexes:type_name -> TSP.IndexSet
	80,  // 101: KN.CanvasSelectionArchive.build_chunks:type_name -> TSP.Reference
	79,  // 102: KN.ThemeCustomTimingCurveArchive.curve:type_name -> TSD.PathSourceArchive
	93,  // 103: KN.ThemeArchive.super:type_name -> TSS.TSSThemeArchive
	80,  // 104: KN.ThemeArchive.templates:type_name -> TSP.Reference
	80,  // 105: KN.ThemeArchive.classicThemeRecords:type_name -> TSP.Reference
	80,  // 106: KN.ThemeArchive.default_template_slide_node:type_name -> TSP.Reference
	80,  // 107: KN.ThemeArchive.default_template_slide_node_reference:type_name -> TSP.Reference
	42,  // 108: KN.ThemeArchive.custom_effect_timing_curves:type_name -> KN.ThemeCustomTimingCurveArchive
	80,  // 109: KN.ThemeArchive.live_video_source_collection:type_name -> TSP.Reference
	80,  // 110: KN.SlideTreeArchive.rootSlideNode:type_name -> TSP.Reference
	80,  // 111: KN.SlideTreeArchive.slides:type_name -> TSP.Reference
	80,  // 112: KN.ShowArchive.uiState:type_name -> TSP.Reference
	80,  // 113: KN.ShowArchive.theme:type_name -> TSP.Reference
	44,  // 114: KN.ShowArchive.slideTree:type_name -> KN.SlideTreeArchive
	88,  // 115: KN.ShowArchive.size:type_name -> TSP.Size
	80,  // 116: KN.ShowArchive.stylesheet:type_name -> TSP.Reference
	80,  // 117: KN.ShowArchive.recording:type_name -> TSP.Reference
	13,  // 118: KN.ShowArchive.mode:type_name -> KN.ShowArchive.KNShowMode
	80,  // 119: KN.ShowArchive.soundtrack:type_name -> TSP.Reference
	80,  // 120: KN.ShowArchive.slideList:type_name -> TSP.Reference
	94,  // 121: KN.KNDocumentArchive.super:type_name -> TSA.TSADocumentArchive
	80,  // 122: KN.KNDocumentArchive.show:type_name -> TSP.Reference
	80,  // 123: KN.KNDocumentArchive.tables_custom_format_list:type_name -> TSP.Reference
	95,  // 124: KN.SlideStylePropertiesArchive.fill:type_name -> TSD.FillArchive
	22,  // 125: KN.SlideStylePropertiesArchive.transition:type_name -> KN.TransitionAttributesArchive
	96,  // 126: KN.SlideStyleArchive.super:type_name -> TSS.StyleArchive
	47,  // 127: KN.SlideStyleArchive.slide_properties:type_name -> KN.SlideStylePropertiesArchive
	80,  // 128: KN.PasteboardNativeStorageArchive.drawables:type_name -> TSP.Reference
	80,  // 129: KN.PasteboardNativeStorageArchive.builds:type_name -> TSP.Reference
	80,  // 130: KN.PasteboardNativeStorageArchive.buildChunks:type_name -> TSP.Reference
	80,  // 131: KN.PasteboardNativeStorageArchive.slideNodes:type_name -> TSP.Reference
	80,  // 132: KN.PasteboardNativeStorageArchive.displayed_slide_nodes:type_name -> TSP.Reference
	80,  // 133: KN.PasteboardNativeStorageArchive.template_slide_nodes:type_name -> TSP.Reference
	80,  // 134: KN.PasteboardNativeStorageArchive.collapsedSlideNodes:type_name -> TSP.Reference
	80,  // 135: KN.PasteboardNativeStorageArchive.outlineCollapsedSlideNodes:type_name -> TSP.Reference
	80,  // 136: KN.PasteboardNativeStorageArchive.outlineHasBodySlideNodes:type_name -> TSP.Reference
	88,  // 137: KN.PasteboardNativeStorageArchive.originalShowSize:type_name -> TSP.Size
	97,  // 138: KN.PasteboardNativeStorageArchive.titleRanges:type_name -> TSP.Range
	84,  // 139: KN.PasteboardNativeStorageArchive.geometries_in_root:type_name -> TSD.GeometryArchive
	42,  // 140: KN.PasteboardNativeStorageArchive.custom_effect_timing_curves:type_name -> KN.ThemeCustomTimingCurveArchive
	23,  // 141: KN.PasteboardNativeStorageArchive.transition:type_name -> KN.TransitionArchive
	76,  // 142: KN.PasteboardNativeStorageArchive.live_video_sources:type_name -> KN.PasteboardNativeStorageArchive.LiveVideoSourcePair
	80,  // 143: KN.PrototypeForUndoTemplateChangeArchive.slide_style:type_name -> TSP.Reference
	81,  // 144: KN.PrototypeForUndoTemplateChangeArchive.template_slide_id:type_name -> TSP.UUID
	81,  // 145: KN.PrototypeForUndoTemplateChangeArchive.drawable_info_id_list:type_name -> TSP.UUID
	80,  // 146: KN.PrototypeForUndoTemplateChangeArchive.placeholders:type_name -> TSP.Reference
	80,  // 147: KN.RecordingArchive.event_tracks:type_name -> TSP.Reference
	80,  // 148: KN.RecordingArchive.movie_track:type_name -> TSP.Reference
	14,  // 149: KN.RecordingArchive.sync_state_enum:type_name -> KN.RecordingArchive.RecordingSyncStateEnum
	98,  // 150: KN.RecordingArchive.modification_date:type_name -> TSP.Date
	52,  // 151: KN.RecordingArchive.sync_state:type_name -> KN.RecordingSyncState
	53,  // 152: KN.RecordingArchive.correction_history:type_name -> KN.RecordingCorrectionHistory
	81,  // 153: KN.RecordingSyncState.out_of_sync_token:type_name -> TSP.UUID
	55,  // 154: KN.RecordingEventTrackArchive.events:type_name -> KN.RecordingEventArchive
	56,  // 155: KN.RecordingEventArchive.navigation_event_archive:type_name -> KN.RecordingNavigationEventArchive
	57,  // 156: KN.RecordingEventArchive.laser_event_archive:type_name -> KN.RecordingLaserEventArchive
	58,  // 157: KN.RecordingEventArchive.pause_event_archive:type_name -> KN.RecordingPauseEventArchive
	59,  // 158: KN.RecordingEventArchive.movie_event_archive:type_name -> KN.RecordingMovieEventArchive
	81,  // 159: KN.RecordingNavigationEventArchive.target_slide_node_id:type_name -> TSP.UUID
	80,  // 160: KN.RecordingNavigationEventArchive.target_slide_node_reference:type_name -> TSP.Reference
	15,  // 161: KN.RecordingNavigationEventArchive.animation_phase:type_name -> KN.RecordingNavigationEventArchive.RecordingNavigationEventAnimationPhase
	89,  // 162: KN.RecordingLaserEventArchive.unscaled_location:type_name -> TSP.Point
	89,  // 163: KN.RecordingLaserEventArchive.unit_location:type_name -> TSP.Point
	16,  // 164: KN.RecordingPauseEventArchive.pause_event_type:type_name -> KN.RecordingPauseEventArchive.RecordingPauseEventType
	80,  // 165: KN.RecordingMovieEventArchive.movie_info_reference:type_name -> TSP.Reference
	17,  // 166: KN.RecordingMovieEventArchive.movie_event_type:type_name -> KN.RecordingMovieEventArchive.RecordingMovieEventType
	80,  // 167: KN.RecordingMovieEventArchive.movie_info_that_played_across_slides_reference:type_name -> TSP.Reference
	81,  // 168: KN.RecordingMovieEventArchive.movie_slide_node_id:type_name -> TSP.UUID
	61,  // 169: KN.RecordingMovieTrackArchive.movie_segments:type_name -> KN.MovieSegmentArchive
	87,  // 170: KN.MovieSegmentArchive.movie_data:type_name -> TSP.DataReference
	80,  // 171: KN.MovieSegmentArchive.database_movie_data:type_name -> TSP.Reference
	18,  // 172: KN.Soundtrack.mode:type_name -> KN.Soundtrack.SoundtrackMode
	87,  // 173: KN.Soundtrack.movie_media:type_name -> TSP.DataReference
	99,  // 174: KN.SlideNumberAttachmentArchive.super:type_name -> TSWP.TextualAttachmentArchive
	80,  // 175: KN.SlideCollectionSelectionArchive.slide_nodes:type_name -> TSP.Reference
	80,  // 176: KN.SlideCollectionSelectionArchive.slide_node_to_edit:type_name -> TSP.Reference
	77,  // 177: KN.SlideCollectionSelectionArchive.selected_paragraph_indexes_for_slide_nodes:type_name -> KN.SlideCollectionSelectionArchive.OutlineSelection
	97,  // 178: KN.SlideCollectionSelectionArchive.range_in_selected_paragraph:type_name -> TSP.Range
	80,  // 179: KN.PresenterNotesSelectionArchive.slide_node:type_name -> TSP.Reference
	19,  // 180: KN.MixedIdOperationArgs.args_list_types:type_name -> KN.MixedIdOperationArgs.ArgsListKind
	100, // 181: KN.MixedIdOperationArgs.add_args_list:type_name -> TSK.AddIdOperationArgs
	101, // 182: KN.MixedIdOperationArgs.show_placeholder_args_list:type_name -> TSK.IdPlacementOperationArgs
	102, // 183: KN.MixedIdOperationArgs.remove_args_list:type_name -> TSK.RemoveIdOperationArgs
	101, // 184: KN.MixedIdOperationArgs.hide_placeholder_args_list:type_name -> TSK.IdPlacementOperationArgs
	81,  // 185: KN.LiveVideoInfo.source_id:type_name -> TSP.UUID
	89,  // 186: KN.LiveVideoInfo.normalized_offset:type_name -> TSP.Point
	70,  // 187: KN.LiveVideoSource.capture_device_description:type_name -> KN.LiveVideoCaptureDeviceDescription
	69,  // 188: KN.LiveVideoSource.collaboration_command_usage_state:type_name -> KN.LiveVideoSourceCollaborationCommandUsageState
	87,  // 189: KN.LiveVideoSource.poster_image_data:type_name -> TSP.DataReference
	81,  // 190: KN.LiveVideoSourceCollaborationCommandUsageState.single_collaboration_command_usage_token:type_name -> TSP.UUID
	20,  // 191: KN.LiveVideoCaptureDeviceDescription.position:type_name -> KN.LiveVideoCaptureDeviceDescription.Position
	88,  // 192: KN.LiveVideoCaptureDeviceDescription.default_video_resolution:type_name -> TSP.Size
	80,  // 193: KN.LiveVideoSourceCollection.sources:type_name -> TSP.Reference
	80,  // 194: KN.LiveVideoSourceCollection.default_source:type_name -> TSP.Reference
	80,  // 195: KN.SlideArchive.SageTagMapEntry.info:type_name -> TSP.Reference
	74,  // 196: KN.SlideArchive.InstructionalTextMap.instructional_text_for_infos:type_name -> KN.SlideArchive.InstructionalTextMap.InstructionalTextMapEntry
	80,  // 197: KN.SlideArchive.InstructionalTextMap.InstructionalTextMapEntry.info:type_name -> TSP.Reference
	80,  // 198: KN.PasteboardNativeStorageArchive.LiveVideoSourcePair.live_video_info:type_name -> TSP.Reference
	80,  // 199: KN.PasteboardNativeStorageArchive.LiveVideoSourcePair.live_video_source:type_name -> TSP.Reference
	80,  // 200: KN.SlideCollectionSelectionArchive.OutlineSelection.slide_node:type_name -> TSP.Reference
	92,  // 201: KN.SlideCollectionSelectionArchive.OutlineSelection.selected_paragraph_indexes:type_name -> TSP.IndexSet
	103, // 202: KN.LiveVideoInfo.live_video_info:extendee -> TSD.MovieArchive
	67,  // 203: KN.LiveVideoInfo.live_video_info:type_name -> KN.LiveVideoInfo
	204, // [204:204] is the sub-list for method output_type
	204, // [204:204] is the sub-list for method input_type
	203, // [203:204] is the sub-list for extension type_name
	202, // [202:203] is the sub-list for extension extendee
	0,   // [0:202] is the sub-list for field type_name
}

func init() { file_KNArchives_proto_init() }
func file_KNArchives_proto_init() {
	if File_KNArchives_proto != nil {
		return
	}
	file_TSPMessages_proto_init()
	file_TSKArchives_proto_init()
	file_TSSArchives_proto_init()
	file_TSDArchives_proto_init()
	file_TSWPArchives_proto_init()
	file_TSAArchives_proto_init()
	file_TSCHArchives_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_KNArchives_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnimationAttributesArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNArchives_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransitionAttributesArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNArchives_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransitionArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNArchives_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildChunkArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNArchives_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildChunkIdentifierArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNArchives_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildAttributeValueArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNArchives_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildAttributeTupleArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNArchives_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildAttributesArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNArchives_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNArchives_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaceholderArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNArchives_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoteArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNArchives_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClassicStylesheetRecordArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNArchives_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClassicThemeRecordArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNArchives_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlideArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNArchives_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlideNodeArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNArchives_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DesktopUILayoutArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNArchives_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UIStateArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNArchives_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IOSRestorableViewStateRootArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNArchives_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IOSSavedPlaybackStateArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNArchives_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CanvasSelectionArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNArchives_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionGhostSelectionArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNArchives_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThemeCustomTimingCurveArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNArchives_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThemeArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNArchives_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlideTreeArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNArchives_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNArchives_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KNDocumentArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNArchives_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlideStylePropertiesArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNArchives_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlideStyleArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNArchives_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasteboardNativeStorageArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNArchives_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrototypeForUndoTemplateChangeArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNArchives_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordingArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNArchives_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordingSyncState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNArchives_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordingCorrectionHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNArchives_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordingEventTrackArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNArchives_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordingEventArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNArchives_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordingNavigationEventArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNArchives_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordingLaserEventArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNArchives_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordingPauseEventArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNArchives_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordingMovieEventArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNArchives_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordingMovieTrackArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNArchives_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MovieSegmentArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNArchives_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Soundtrack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNArchives_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlideNumberAttachmentArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNArchives_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlideCollectionSelectionArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNArchives_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PresenterNotesSelectionArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNArchives_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MixedIdOperationArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNArchives_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveVideoInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNArchives_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveVideoSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNArchives_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveVideoSourceCollaborationCommandUsageState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNArchives_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveVideoCaptureDeviceDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNArchives_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveVideoSourceCollection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNArchives_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlideArchive_SageTagMapEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNArchives_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlideArchive_InstructionalTextMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNArchives_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlideArchive_InstructionalTextMap_InstructionalTextMapEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNArchives_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlideNodeArchive_SlideSpecificHyperlinkMapEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNArchives_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasteboardNativeStorageArchive_LiveVideoSourcePair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNArchives_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlideCollectionSelectionArchive_OutlineSelection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_KNArchives_proto_rawDesc,
			NumEnums:      21,
			NumMessages:   57,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_KNArchives_proto_goTypes,
		DependencyIndexes: file_KNArchives_proto_depIdxs,
		EnumInfos:         file_KNArchives_proto_enumTypes,
		MessageInfos:      file_KNArchives_proto_msgTypes,
		ExtensionInfos:    file_KNArchives_proto_extTypes,
	}.Build()
	File_KNArchives_proto = out.File
	file_KNArchives_proto_rawDesc = nil
	file_KNArchives_proto_goTypes = nil
	file_KNArchives_proto_depIdxs = nil
}
