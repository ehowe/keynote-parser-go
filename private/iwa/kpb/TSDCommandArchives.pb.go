// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: TSDCommandArchives.proto

package kpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CommentCommandVariant int32

const (
	CommentCommandVariant_BaseComment CommentCommandVariant = 0
	CommentCommandVariant_AddReply    CommentCommandVariant = 1
	CommentCommandVariant_EditReply   CommentCommandVariant = 2
	CommentCommandVariant_DeleteReply CommentCommandVariant = 3
)

// Enum value maps for CommentCommandVariant.
var (
	CommentCommandVariant_name = map[int32]string{
		0: "BaseComment",
		1: "AddReply",
		2: "EditReply",
		3: "DeleteReply",
	}
	CommentCommandVariant_value = map[string]int32{
		"BaseComment": 0,
		"AddReply":    1,
		"EditReply":   2,
		"DeleteReply": 3,
	}
)

func (x CommentCommandVariant) Enum() *CommentCommandVariant {
	p := new(CommentCommandVariant)
	*p = x
	return p
}

func (x CommentCommandVariant) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommentCommandVariant) Descriptor() protoreflect.EnumDescriptor {
	return file_TSDCommandArchives_proto_enumTypes[0].Descriptor()
}

func (CommentCommandVariant) Type() protoreflect.EnumType {
	return &file_TSDCommandArchives_proto_enumTypes[0]
}

func (x CommentCommandVariant) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CommentCommandVariant) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CommentCommandVariant(num)
	return nil
}

// Deprecated: Use CommentCommandVariant.Descriptor instead.
func (CommentCommandVariant) EnumDescriptor() ([]byte, []int) {
	return file_TSDCommandArchives_proto_rawDescGZIP(), []int{0}
}

type CaptionOrTitleKind int32

const (
	CaptionOrTitleKind_Caption CaptionOrTitleKind = 1
	CaptionOrTitleKind_Title   CaptionOrTitleKind = 2
)

// Enum value maps for CaptionOrTitleKind.
var (
	CaptionOrTitleKind_name = map[int32]string{
		1: "Caption",
		2: "Title",
	}
	CaptionOrTitleKind_value = map[string]int32{
		"Caption": 1,
		"Title":   2,
	}
)

func (x CaptionOrTitleKind) Enum() *CaptionOrTitleKind {
	p := new(CaptionOrTitleKind)
	*p = x
	return p
}

func (x CaptionOrTitleKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CaptionOrTitleKind) Descriptor() protoreflect.EnumDescriptor {
	return file_TSDCommandArchives_proto_enumTypes[1].Descriptor()
}

func (CaptionOrTitleKind) Type() protoreflect.EnumType {
	return &file_TSDCommandArchives_proto_enumTypes[1]
}

func (x CaptionOrTitleKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CaptionOrTitleKind) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CaptionOrTitleKind(num)
	return nil
}

// Deprecated: Use CaptionOrTitleKind.Descriptor instead.
func (CaptionOrTitleKind) EnumDescriptor() ([]byte, []int) {
	return file_TSDCommandArchives_proto_rawDescGZIP(), []int{1}
}

type GroupUngroupInformativeCommandArchive_CommandType int32

const (
	GroupUngroupInformativeCommandArchive_Group   GroupUngroupInformativeCommandArchive_CommandType = 0
	GroupUngroupInformativeCommandArchive_Ungroup GroupUngroupInformativeCommandArchive_CommandType = 1
)

// Enum value maps for GroupUngroupInformativeCommandArchive_CommandType.
var (
	GroupUngroupInformativeCommandArchive_CommandType_name = map[int32]string{
		0: "Group",
		1: "Ungroup",
	}
	GroupUngroupInformativeCommandArchive_CommandType_value = map[string]int32{
		"Group":   0,
		"Ungroup": 1,
	}
)

func (x GroupUngroupInformativeCommandArchive_CommandType) Enum() *GroupUngroupInformativeCommandArchive_CommandType {
	p := new(GroupUngroupInformativeCommandArchive_CommandType)
	*p = x
	return p
}

func (x GroupUngroupInformativeCommandArchive_CommandType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupUngroupInformativeCommandArchive_CommandType) Descriptor() protoreflect.EnumDescriptor {
	return file_TSDCommandArchives_proto_enumTypes[2].Descriptor()
}

func (GroupUngroupInformativeCommandArchive_CommandType) Type() protoreflect.EnumType {
	return &file_TSDCommandArchives_proto_enumTypes[2]
}

func (x GroupUngroupInformativeCommandArchive_CommandType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GroupUngroupInformativeCommandArchive_CommandType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GroupUngroupInformativeCommandArchive_CommandType(num)
	return nil
}

// Deprecated: Use GroupUngroupInformativeCommandArchive_CommandType.Descriptor instead.
func (GroupUngroupInformativeCommandArchive_CommandType) EnumDescriptor() ([]byte, []int) {
	return file_TSDCommandArchives_proto_rawDescGZIP(), []int{8, 0}
}

type MovieSetValueCommandArchive_LoopOption int32

const (
	MovieSetValueCommandArchive_None         MovieSetValueCommandArchive_LoopOption = 0
	MovieSetValueCommandArchive_Repeat       MovieSetValueCommandArchive_LoopOption = 1
	MovieSetValueCommandArchive_BackAndForth MovieSetValueCommandArchive_LoopOption = 2
)

// Enum value maps for MovieSetValueCommandArchive_LoopOption.
var (
	MovieSetValueCommandArchive_LoopOption_name = map[int32]string{
		0: "None",
		1: "Repeat",
		2: "BackAndForth",
	}
	MovieSetValueCommandArchive_LoopOption_value = map[string]int32{
		"None":         0,
		"Repeat":       1,
		"BackAndForth": 2,
	}
)

func (x MovieSetValueCommandArchive_LoopOption) Enum() *MovieSetValueCommandArchive_LoopOption {
	p := new(MovieSetValueCommandArchive_LoopOption)
	*p = x
	return p
}

func (x MovieSetValueCommandArchive_LoopOption) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MovieSetValueCommandArchive_LoopOption) Descriptor() protoreflect.EnumDescriptor {
	return file_TSDCommandArchives_proto_enumTypes[3].Descriptor()
}

func (MovieSetValueCommandArchive_LoopOption) Type() protoreflect.EnumType {
	return &file_TSDCommandArchives_proto_enumTypes[3]
}

func (x MovieSetValueCommandArchive_LoopOption) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MovieSetValueCommandArchive_LoopOption) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MovieSetValueCommandArchive_LoopOption(num)
	return nil
}

// Deprecated: Use MovieSetValueCommandArchive_LoopOption.Descriptor instead.
func (MovieSetValueCommandArchive_LoopOption) EnumDescriptor() ([]byte, []int) {
	return file_TSDCommandArchives_proto_rawDescGZIP(), []int{22, 0}
}

type DrawablesCommandGroupArchive_DrawablesCommandGroupType int32

const (
	DrawablesCommandGroupArchive_Constructive DrawablesCommandGroupArchive_DrawablesCommandGroupType = 1
	DrawablesCommandGroupArchive_Destructive  DrawablesCommandGroupArchive_DrawablesCommandGroupType = 2
	DrawablesCommandGroupArchive_InPlace      DrawablesCommandGroupArchive_DrawablesCommandGroupType = 3
)

// Enum value maps for DrawablesCommandGroupArchive_DrawablesCommandGroupType.
var (
	DrawablesCommandGroupArchive_DrawablesCommandGroupType_name = map[int32]string{
		1: "Constructive",
		2: "Destructive",
		3: "InPlace",
	}
	DrawablesCommandGroupArchive_DrawablesCommandGroupType_value = map[string]int32{
		"Constructive": 1,
		"Destructive":  2,
		"InPlace":      3,
	}
)

func (x DrawablesCommandGroupArchive_DrawablesCommandGroupType) Enum() *DrawablesCommandGroupArchive_DrawablesCommandGroupType {
	p := new(DrawablesCommandGroupArchive_DrawablesCommandGroupType)
	*p = x
	return p
}

func (x DrawablesCommandGroupArchive_DrawablesCommandGroupType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DrawablesCommandGroupArchive_DrawablesCommandGroupType) Descriptor() protoreflect.EnumDescriptor {
	return file_TSDCommandArchives_proto_enumTypes[4].Descriptor()
}

func (DrawablesCommandGroupArchive_DrawablesCommandGroupType) Type() protoreflect.EnumType {
	return &file_TSDCommandArchives_proto_enumTypes[4]
}

func (x DrawablesCommandGroupArchive_DrawablesCommandGroupType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DrawablesCommandGroupArchive_DrawablesCommandGroupType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DrawablesCommandGroupArchive_DrawablesCommandGroupType(num)
	return nil
}

// Deprecated: Use DrawablesCommandGroupArchive_DrawablesCommandGroupType.Descriptor instead.
func (DrawablesCommandGroupArchive_DrawablesCommandGroupType) EnumDescriptor() ([]byte, []int) {
	return file_TSDCommandArchives_proto_rawDescGZIP(), []int{31, 0}
}

type TSDUndoObjectArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stylesheet *Reference   `protobuf:"bytes,2,opt,name=stylesheet" json:"stylesheet,omitempty"`
	Objects    []*Reference `protobuf:"bytes,1,rep,name=objects" json:"objects,omitempty"`
	Keys       []string     `protobuf:"bytes,3,rep,name=keys" json:"keys,omitempty"`
	Counts     []uint32     `protobuf:"varint,4,rep,name=counts" json:"counts,omitempty"`
}

func (x *TSDUndoObjectArchive) Reset() {
	*x = TSDUndoObjectArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDCommandArchives_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSDUndoObjectArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSDUndoObjectArchive) ProtoMessage() {}

func (x *TSDUndoObjectArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDCommandArchives_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSDUndoObjectArchive.ProtoReflect.Descriptor instead.
func (*TSDUndoObjectArchive) Descriptor() ([]byte, []int) {
	return file_TSDCommandArchives_proto_rawDescGZIP(), []int{0}
}

func (x *TSDUndoObjectArchive) GetStylesheet() *Reference {
	if x != nil {
		return x.Stylesheet
	}
	return nil
}

func (x *TSDUndoObjectArchive) GetObjects() []*Reference {
	if x != nil {
		return x.Objects
	}
	return nil
}

func (x *TSDUndoObjectArchive) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *TSDUndoObjectArchive) GetCounts() []uint32 {
	if x != nil {
		return x.Counts
	}
	return nil
}

type GroupDrawablesCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super     *CommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Drawables []*Reference    `protobuf:"bytes,2,rep,name=drawables" json:"drawables,omitempty"`
	Group     *Reference      `protobuf:"bytes,3,opt,name=group" json:"group,omitempty"`
}

func (x *GroupDrawablesCommandArchive) Reset() {
	*x = GroupDrawablesCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDCommandArchives_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupDrawablesCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupDrawablesCommandArchive) ProtoMessage() {}

func (x *GroupDrawablesCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDCommandArchives_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupDrawablesCommandArchive.ProtoReflect.Descriptor instead.
func (*GroupDrawablesCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSDCommandArchives_proto_rawDescGZIP(), []int{1}
}

func (x *GroupDrawablesCommandArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *GroupDrawablesCommandArchive) GetDrawables() []*Reference {
	if x != nil {
		return x.Drawables
	}
	return nil
}

func (x *GroupDrawablesCommandArchive) GetGroup() *Reference {
	if x != nil {
		return x.Group
	}
	return nil
}

type UngroupGroupCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super     *CommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Drawables []*Reference    `protobuf:"bytes,2,rep,name=drawables" json:"drawables,omitempty"`
	Group     *Reference      `protobuf:"bytes,3,opt,name=group" json:"group,omitempty"`
}

func (x *UngroupGroupCommandArchive) Reset() {
	*x = UngroupGroupCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDCommandArchives_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UngroupGroupCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UngroupGroupCommandArchive) ProtoMessage() {}

func (x *UngroupGroupCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDCommandArchives_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UngroupGroupCommandArchive.ProtoReflect.Descriptor instead.
func (*UngroupGroupCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSDCommandArchives_proto_rawDescGZIP(), []int{2}
}

func (x *UngroupGroupCommandArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *UngroupGroupCommandArchive) GetDrawables() []*Reference {
	if x != nil {
		return x.Drawables
	}
	return nil
}

func (x *UngroupGroupCommandArchive) GetGroup() *Reference {
	if x != nil {
		return x.Group
	}
	return nil
}

type ContainerRemoveChildrenCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super           *CommandArchive          `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	ContainerIdPath *UUIDPath                `protobuf:"bytes,2,opt,name=container_id_path,json=containerIdPath" json:"container_id_path,omitempty"`
	ArgsList        []*RemoveIdOperationArgs `protobuf:"bytes,3,rep,name=args_list,json=argsList" json:"args_list,omitempty"`
	Children        []*Reference             `protobuf:"bytes,4,rep,name=children" json:"children,omitempty"`
}

func (x *ContainerRemoveChildrenCommandArchive) Reset() {
	*x = ContainerRemoveChildrenCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDCommandArchives_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerRemoveChildrenCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerRemoveChildrenCommandArchive) ProtoMessage() {}

func (x *ContainerRemoveChildrenCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDCommandArchives_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerRemoveChildrenCommandArchive.ProtoReflect.Descriptor instead.
func (*ContainerRemoveChildrenCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSDCommandArchives_proto_rawDescGZIP(), []int{3}
}

func (x *ContainerRemoveChildrenCommandArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *ContainerRemoveChildrenCommandArchive) GetContainerIdPath() *UUIDPath {
	if x != nil {
		return x.ContainerIdPath
	}
	return nil
}

func (x *ContainerRemoveChildrenCommandArchive) GetArgsList() []*RemoveIdOperationArgs {
	if x != nil {
		return x.ArgsList
	}
	return nil
}

func (x *ContainerRemoveChildrenCommandArchive) GetChildren() []*Reference {
	if x != nil {
		return x.Children
	}
	return nil
}

type ContainerRemoveDrawablesCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *ContainerRemoveChildrenCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
}

func (x *ContainerRemoveDrawablesCommandArchive) Reset() {
	*x = ContainerRemoveDrawablesCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDCommandArchives_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerRemoveDrawablesCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerRemoveDrawablesCommandArchive) ProtoMessage() {}

func (x *ContainerRemoveDrawablesCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDCommandArchives_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerRemoveDrawablesCommandArchive.ProtoReflect.Descriptor instead.
func (*ContainerRemoveDrawablesCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSDCommandArchives_proto_rawDescGZIP(), []int{4}
}

func (x *ContainerRemoveDrawablesCommandArchive) GetSuper() *ContainerRemoveChildrenCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

type ContainerInsertChildrenCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super            *CommandArchive       `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	ContainerIdPath  *UUIDPath             `protobuf:"bytes,2,opt,name=container_id_path,json=containerIdPath" json:"container_id_path,omitempty"`
	Children         []*Reference          `protobuf:"bytes,3,rep,name=children" json:"children,omitempty"`
	ArgsList         []*AddIdOperationArgs `protobuf:"bytes,4,rep,name=args_list,json=argsList" json:"args_list,omitempty"`
	CustomFormatKeys []*UUID               `protobuf:"bytes,5,rep,name=custom_format_keys,json=customFormatKeys" json:"custom_format_keys,omitempty"`
	UndoObject       *Reference            `protobuf:"bytes,6,opt,name=undo_object,json=undoObject" json:"undo_object,omitempty"`
}

func (x *ContainerInsertChildrenCommandArchive) Reset() {
	*x = ContainerInsertChildrenCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDCommandArchives_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerInsertChildrenCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerInsertChildrenCommandArchive) ProtoMessage() {}

func (x *ContainerInsertChildrenCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDCommandArchives_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerInsertChildrenCommandArchive.ProtoReflect.Descriptor instead.
func (*ContainerInsertChildrenCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSDCommandArchives_proto_rawDescGZIP(), []int{5}
}

func (x *ContainerInsertChildrenCommandArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *ContainerInsertChildrenCommandArchive) GetContainerIdPath() *UUIDPath {
	if x != nil {
		return x.ContainerIdPath
	}
	return nil
}

func (x *ContainerInsertChildrenCommandArchive) GetChildren() []*Reference {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *ContainerInsertChildrenCommandArchive) GetArgsList() []*AddIdOperationArgs {
	if x != nil {
		return x.ArgsList
	}
	return nil
}

func (x *ContainerInsertChildrenCommandArchive) GetCustomFormatKeys() []*UUID {
	if x != nil {
		return x.CustomFormatKeys
	}
	return nil
}

func (x *ContainerInsertChildrenCommandArchive) GetUndoObject() *Reference {
	if x != nil {
		return x.UndoObject
	}
	return nil
}

type ContainerInsertDrawablesCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super     *ContainerInsertChildrenCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Drawables []*Reference                           `protobuf:"bytes,2,rep,name=drawables" json:"drawables,omitempty"`
}

func (x *ContainerInsertDrawablesCommandArchive) Reset() {
	*x = ContainerInsertDrawablesCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDCommandArchives_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerInsertDrawablesCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerInsertDrawablesCommandArchive) ProtoMessage() {}

func (x *ContainerInsertDrawablesCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDCommandArchives_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerInsertDrawablesCommandArchive.ProtoReflect.Descriptor instead.
func (*ContainerInsertDrawablesCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSDCommandArchives_proto_rawDescGZIP(), []int{6}
}

func (x *ContainerInsertDrawablesCommandArchive) GetSuper() *ContainerInsertChildrenCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *ContainerInsertDrawablesCommandArchive) GetDrawables() []*Reference {
	if x != nil {
		return x.Drawables
	}
	return nil
}

type ContainerReorderChildrenCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super           *CommandArchive             `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	ContainerIdPath *UUIDPath                   `protobuf:"bytes,2,opt,name=container_id_path,json=containerIdPath" json:"container_id_path,omitempty"`
	ArgsList        []*RearrangeIdOperationArgs `protobuf:"bytes,3,rep,name=args_list,json=argsList" json:"args_list,omitempty"`
}

func (x *ContainerReorderChildrenCommandArchive) Reset() {
	*x = ContainerReorderChildrenCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDCommandArchives_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerReorderChildrenCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerReorderChildrenCommandArchive) ProtoMessage() {}

func (x *ContainerReorderChildrenCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDCommandArchives_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerReorderChildrenCommandArchive.ProtoReflect.Descriptor instead.
func (*ContainerReorderChildrenCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSDCommandArchives_proto_rawDescGZIP(), []int{7}
}

func (x *ContainerReorderChildrenCommandArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *ContainerReorderChildrenCommandArchive) GetContainerIdPath() *UUIDPath {
	if x != nil {
		return x.ContainerIdPath
	}
	return nil
}

func (x *ContainerReorderChildrenCommandArchive) GetArgsList() []*RearrangeIdOperationArgs {
	if x != nil {
		return x.ArgsList
	}
	return nil
}

type GroupUngroupInformativeCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super         *CommandArchive                                    `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	RemovedInfos  []*Reference                                       `protobuf:"bytes,2,rep,name=removed_infos,json=removedInfos" json:"removed_infos,omitempty"`
	InsertedInfos []*Reference                                       `protobuf:"bytes,3,rep,name=inserted_infos,json=insertedInfos" json:"inserted_infos,omitempty"`
	CommandType   *GroupUngroupInformativeCommandArchive_CommandType `protobuf:"varint,4,opt,name=command_type,json=commandType,enum=TSD.GroupUngroupInformativeCommandArchive_CommandType" json:"command_type,omitempty"`
}

func (x *GroupUngroupInformativeCommandArchive) Reset() {
	*x = GroupUngroupInformativeCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDCommandArchives_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupUngroupInformativeCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupUngroupInformativeCommandArchive) ProtoMessage() {}

func (x *GroupUngroupInformativeCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDCommandArchives_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupUngroupInformativeCommandArchive.ProtoReflect.Descriptor instead.
func (*GroupUngroupInformativeCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSDCommandArchives_proto_rawDescGZIP(), []int{8}
}

func (x *GroupUngroupInformativeCommandArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *GroupUngroupInformativeCommandArchive) GetRemovedInfos() []*Reference {
	if x != nil {
		return x.RemovedInfos
	}
	return nil
}

func (x *GroupUngroupInformativeCommandArchive) GetInsertedInfos() []*Reference {
	if x != nil {
		return x.InsertedInfos
	}
	return nil
}

func (x *GroupUngroupInformativeCommandArchive) GetCommandType() GroupUngroupInformativeCommandArchive_CommandType {
	if x != nil && x.CommandType != nil {
		return *x.CommandType
	}
	return GroupUngroupInformativeCommandArchive_Group
}

type InfoCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super      *CommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	InfoIdPath *UUIDPath       `protobuf:"bytes,2,opt,name=info_id_path,json=infoIdPath" json:"info_id_path,omitempty"`
}

func (x *InfoCommandArchive) Reset() {
	*x = InfoCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDCommandArchives_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfoCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoCommandArchive) ProtoMessage() {}

func (x *InfoCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDCommandArchives_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoCommandArchive.ProtoReflect.Descriptor instead.
func (*InfoCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSDCommandArchives_proto_rawDescGZIP(), []int{9}
}

func (x *InfoCommandArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *InfoCommandArchive) GetInfoIdPath() *UUIDPath {
	if x != nil {
		return x.InfoIdPath
	}
	return nil
}

type ConnectionLineConnectCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super              *InfoCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	ConnectedFromId    *UUID               `protobuf:"bytes,4,opt,name=connected_from_id,json=connectedFromId" json:"connected_from_id,omitempty"`
	ConnectedToId      *UUID               `protobuf:"bytes,5,opt,name=connected_to_id,json=connectedToId" json:"connected_to_id,omitempty"`
	OldConnectedToId   *UUID               `protobuf:"bytes,6,opt,name=old_connected_to_id,json=oldConnectedToId" json:"old_connected_to_id,omitempty"`
	OldConnectedFromId *UUID               `protobuf:"bytes,7,opt,name=old_connected_from_id,json=oldConnectedFromId" json:"old_connected_from_id,omitempty"`
}

func (x *ConnectionLineConnectCommandArchive) Reset() {
	*x = ConnectionLineConnectCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDCommandArchives_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionLineConnectCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionLineConnectCommandArchive) ProtoMessage() {}

func (x *ConnectionLineConnectCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDCommandArchives_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionLineConnectCommandArchive.ProtoReflect.Descriptor instead.
func (*ConnectionLineConnectCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSDCommandArchives_proto_rawDescGZIP(), []int{10}
}

func (x *ConnectionLineConnectCommandArchive) GetSuper() *InfoCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *ConnectionLineConnectCommandArchive) GetConnectedFromId() *UUID {
	if x != nil {
		return x.ConnectedFromId
	}
	return nil
}

func (x *ConnectionLineConnectCommandArchive) GetConnectedToId() *UUID {
	if x != nil {
		return x.ConnectedToId
	}
	return nil
}

func (x *ConnectionLineConnectCommandArchive) GetOldConnectedToId() *UUID {
	if x != nil {
		return x.OldConnectedToId
	}
	return nil
}

func (x *ConnectionLineConnectCommandArchive) GetOldConnectedFromId() *UUID {
	if x != nil {
		return x.OldConnectedFromId
	}
	return nil
}

type InfoGeometryCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                             *InfoCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	NewGeometry                       *GeometryArchive    `protobuf:"bytes,2,opt,name=newGeometry" json:"newGeometry,omitempty"`
	OldGeometry                       *GeometryArchive    `protobuf:"bytes,3,opt,name=oldGeometry" json:"oldGeometry,omitempty"`
	MatchObjectPlaceholderGeometry    *bool               `protobuf:"varint,4,opt,name=matchObjectPlaceholderGeometry" json:"matchObjectPlaceholderGeometry,omitempty"`
	OldMatchObjectPlaceholderGeometry *bool               `protobuf:"varint,5,opt,name=oldMatchObjectPlaceholderGeometry" json:"oldMatchObjectPlaceholderGeometry,omitempty"`
	ShouldTriggerRtuAnimation         *bool               `protobuf:"varint,6,opt,name=shouldTriggerRtuAnimation" json:"shouldTriggerRtuAnimation,omitempty"`
	InitiatedOnWeb                    *bool               `protobuf:"varint,7,opt,name=initiatedOnWeb" json:"initiatedOnWeb,omitempty"`
}

func (x *InfoGeometryCommandArchive) Reset() {
	*x = InfoGeometryCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDCommandArchives_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfoGeometryCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoGeometryCommandArchive) ProtoMessage() {}

func (x *InfoGeometryCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDCommandArchives_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoGeometryCommandArchive.ProtoReflect.Descriptor instead.
func (*InfoGeometryCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSDCommandArchives_proto_rawDescGZIP(), []int{11}
}

func (x *InfoGeometryCommandArchive) GetSuper() *InfoCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *InfoGeometryCommandArchive) GetNewGeometry() *GeometryArchive {
	if x != nil {
		return x.NewGeometry
	}
	return nil
}

func (x *InfoGeometryCommandArchive) GetOldGeometry() *GeometryArchive {
	if x != nil {
		return x.OldGeometry
	}
	return nil
}

func (x *InfoGeometryCommandArchive) GetMatchObjectPlaceholderGeometry() bool {
	if x != nil && x.MatchObjectPlaceholderGeometry != nil {
		return *x.MatchObjectPlaceholderGeometry
	}
	return false
}

func (x *InfoGeometryCommandArchive) GetOldMatchObjectPlaceholderGeometry() bool {
	if x != nil && x.OldMatchObjectPlaceholderGeometry != nil {
		return *x.OldMatchObjectPlaceholderGeometry
	}
	return false
}

func (x *InfoGeometryCommandArchive) GetShouldTriggerRtuAnimation() bool {
	if x != nil && x.ShouldTriggerRtuAnimation != nil {
		return *x.ShouldTriggerRtuAnimation
	}
	return false
}

func (x *InfoGeometryCommandArchive) GetInitiatedOnWeb() bool {
	if x != nil && x.InitiatedOnWeb != nil {
		return *x.InitiatedOnWeb
	}
	return false
}

type DrawablePathSourceCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super         *InfoCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	OldPathSource *PathSourceArchive  `protobuf:"bytes,2,opt,name=old_path_source,json=oldPathSource" json:"old_path_source,omitempty"`
	NewPathSource *PathSourceArchive  `protobuf:"bytes,3,opt,name=new_path_source,json=newPathSource" json:"new_path_source,omitempty"`
}

func (x *DrawablePathSourceCommandArchive) Reset() {
	*x = DrawablePathSourceCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDCommandArchives_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrawablePathSourceCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawablePathSourceCommandArchive) ProtoMessage() {}

func (x *DrawablePathSourceCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDCommandArchives_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawablePathSourceCommandArchive.ProtoReflect.Descriptor instead.
func (*DrawablePathSourceCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSDCommandArchives_proto_rawDescGZIP(), []int{12}
}

func (x *DrawablePathSourceCommandArchive) GetSuper() *InfoCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *DrawablePathSourceCommandArchive) GetOldPathSource() *PathSourceArchive {
	if x != nil {
		return x.OldPathSource
	}
	return nil
}

func (x *DrawablePathSourceCommandArchive) GetNewPathSource() *PathSourceArchive {
	if x != nil {
		return x.NewPathSource
	}
	return nil
}

type InstantAlphaCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super   *InfoCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Oldpath *Path               `protobuf:"bytes,2,opt,name=oldpath" json:"oldpath,omitempty"`
	Newpath *Path               `protobuf:"bytes,3,opt,name=newpath" json:"newpath,omitempty"`
}

func (x *InstantAlphaCommandArchive) Reset() {
	*x = InstantAlphaCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDCommandArchives_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstantAlphaCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstantAlphaCommandArchive) ProtoMessage() {}

func (x *InstantAlphaCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDCommandArchives_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstantAlphaCommandArchive.ProtoReflect.Descriptor instead.
func (*InstantAlphaCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSDCommandArchives_proto_rawDescGZIP(), []int{13}
}

func (x *InstantAlphaCommandArchive) GetSuper() *InfoCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *InstantAlphaCommandArchive) GetOldpath() *Path {
	if x != nil {
		return x.Oldpath
	}
	return nil
}

func (x *InstantAlphaCommandArchive) GetNewpath() *Path {
	if x != nil {
		return x.Newpath
	}
	return nil
}

type DrawableApplyThemeCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *ApplyThemeChildCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Info  *Reference                     `protobuf:"bytes,2,opt,name=info" json:"info,omitempty"`
	Style *Reference                     `protobuf:"bytes,3,opt,name=style" json:"style,omitempty"`
}

func (x *DrawableApplyThemeCommandArchive) Reset() {
	*x = DrawableApplyThemeCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDCommandArchives_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrawableApplyThemeCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawableApplyThemeCommandArchive) ProtoMessage() {}

func (x *DrawableApplyThemeCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDCommandArchives_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawableApplyThemeCommandArchive.ProtoReflect.Descriptor instead.
func (*DrawableApplyThemeCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSDCommandArchives_proto_rawDescGZIP(), []int{14}
}

func (x *DrawableApplyThemeCommandArchive) GetSuper() *ApplyThemeChildCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *DrawableApplyThemeCommandArchive) GetInfo() *Reference {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *DrawableApplyThemeCommandArchive) GetStyle() *Reference {
	if x != nil {
		return x.Style
	}
	return nil
}

type AbstractStyleCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *InfoCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
}

func (x *AbstractStyleCommandArchive) Reset() {
	*x = AbstractStyleCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDCommandArchives_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbstractStyleCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbstractStyleCommandArchive) ProtoMessage() {}

func (x *AbstractStyleCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDCommandArchives_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbstractStyleCommandArchive.ProtoReflect.Descriptor instead.
func (*AbstractStyleCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSDCommandArchives_proto_rawDescGZIP(), []int{15}
}

func (x *AbstractStyleCommandArchive) GetSuper() *InfoCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

type StyledInfoSetStyleCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super         *AbstractStyleCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	NewStyle      *Reference                   `protobuf:"bytes,2,opt,name=new_style,json=newStyle" json:"new_style,omitempty"`
	RollbackStyle *Reference                   `protobuf:"bytes,4,opt,name=rollback_style,json=rollbackStyle" json:"rollback_style,omitempty"`
}

func (x *StyledInfoSetStyleCommandArchive) Reset() {
	*x = StyledInfoSetStyleCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDCommandArchives_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StyledInfoSetStyleCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StyledInfoSetStyleCommandArchive) ProtoMessage() {}

func (x *StyledInfoSetStyleCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDCommandArchives_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StyledInfoSetStyleCommandArchive.ProtoReflect.Descriptor instead.
func (*StyledInfoSetStyleCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSDCommandArchives_proto_rawDescGZIP(), []int{16}
}

func (x *StyledInfoSetStyleCommandArchive) GetSuper() *AbstractStyleCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *StyledInfoSetStyleCommandArchive) GetNewStyle() *Reference {
	if x != nil {
		return x.NewStyle
	}
	return nil
}

func (x *StyledInfoSetStyleCommandArchive) GetRollbackStyle() *Reference {
	if x != nil {
		return x.RollbackStyle
	}
	return nil
}

type BaseApplyPresetCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super         *AbstractStyleCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	PresetStyle   *Reference                   `protobuf:"bytes,2,opt,name=preset_style,json=presetStyle" json:"preset_style,omitempty"`
	RollbackStyle *Reference                   `protobuf:"bytes,4,opt,name=rollback_style,json=rollbackStyle" json:"rollback_style,omitempty"`
}

func (x *BaseApplyPresetCommandArchive) Reset() {
	*x = BaseApplyPresetCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDCommandArchives_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseApplyPresetCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseApplyPresetCommandArchive) ProtoMessage() {}

func (x *BaseApplyPresetCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDCommandArchives_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseApplyPresetCommandArchive.ProtoReflect.Descriptor instead.
func (*BaseApplyPresetCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSDCommandArchives_proto_rawDescGZIP(), []int{17}
}

func (x *BaseApplyPresetCommandArchive) GetSuper() *AbstractStyleCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *BaseApplyPresetCommandArchive) GetPresetStyle() *Reference {
	if x != nil {
		return x.PresetStyle
	}
	return nil
}

func (x *BaseApplyPresetCommandArchive) GetRollbackStyle() *Reference {
	if x != nil {
		return x.RollbackStyle
	}
	return nil
}

type ShapeApplyPresetCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *BaseApplyPresetCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
}

func (x *ShapeApplyPresetCommandArchive) Reset() {
	*x = ShapeApplyPresetCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDCommandArchives_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShapeApplyPresetCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShapeApplyPresetCommandArchive) ProtoMessage() {}

func (x *ShapeApplyPresetCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDCommandArchives_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShapeApplyPresetCommandArchive.ProtoReflect.Descriptor instead.
func (*ShapeApplyPresetCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSDCommandArchives_proto_rawDescGZIP(), []int{18}
}

func (x *ShapeApplyPresetCommandArchive) GetSuper() *BaseApplyPresetCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

type MediaApplyPresetCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *BaseApplyPresetCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
}

func (x *MediaApplyPresetCommandArchive) Reset() {
	*x = MediaApplyPresetCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDCommandArchives_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaApplyPresetCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaApplyPresetCommandArchive) ProtoMessage() {}

func (x *MediaApplyPresetCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDCommandArchives_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaApplyPresetCommandArchive.ProtoReflect.Descriptor instead.
func (*MediaApplyPresetCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSDCommandArchives_proto_rawDescGZIP(), []int{19}
}

func (x *MediaApplyPresetCommandArchive) GetSuper() *BaseApplyPresetCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

type ShapeStyleSetValueCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super  *BaseStyleSetValueCommandArchive        `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Change *BaseShapeStylePropertyChangeSetArchive `protobuf:"bytes,4,opt,name=change" json:"change,omitempty"`
}

func (x *ShapeStyleSetValueCommandArchive) Reset() {
	*x = ShapeStyleSetValueCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDCommandArchives_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShapeStyleSetValueCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShapeStyleSetValueCommandArchive) ProtoMessage() {}

func (x *ShapeStyleSetValueCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDCommandArchives_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShapeStyleSetValueCommandArchive.ProtoReflect.Descriptor instead.
func (*ShapeStyleSetValueCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSDCommandArchives_proto_rawDescGZIP(), []int{20}
}

func (x *ShapeStyleSetValueCommandArchive) GetSuper() *BaseStyleSetValueCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *ShapeStyleSetValueCommandArchive) GetChange() *BaseShapeStylePropertyChangeSetArchive {
	if x != nil {
		return x.Change
	}
	return nil
}

type BaseStyleSetValueCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super          *AbstractStyleCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	OldStyle       *Reference                   `protobuf:"bytes,4,opt,name=old_style,json=oldStyle" json:"old_style,omitempty"`
	IsBorderChange *bool                        `protobuf:"varint,5,req,name=is_border_change,json=isBorderChange" json:"is_border_change,omitempty"`
}

func (x *BaseStyleSetValueCommandArchive) Reset() {
	*x = BaseStyleSetValueCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDCommandArchives_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseStyleSetValueCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseStyleSetValueCommandArchive) ProtoMessage() {}

func (x *BaseStyleSetValueCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDCommandArchives_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseStyleSetValueCommandArchive.ProtoReflect.Descriptor instead.
func (*BaseStyleSetValueCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSDCommandArchives_proto_rawDescGZIP(), []int{21}
}

func (x *BaseStyleSetValueCommandArchive) GetSuper() *AbstractStyleCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *BaseStyleSetValueCommandArchive) GetOldStyle() *Reference {
	if x != nil {
		return x.OldStyle
	}
	return nil
}

func (x *BaseStyleSetValueCommandArchive) GetIsBorderChange() bool {
	if x != nil && x.IsBorderChange != nil {
		return *x.IsBorderChange
	}
	return false
}

type MovieSetValueCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                     *InfoCommandArchive                        `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Property                  *int32                                     `protobuf:"varint,2,opt,name=property" json:"property,omitempty"`
	Value                     *MovieSetValueCommandArchive_PropertyValue `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
	OldValue                  *MovieSetValueCommandArchive_PropertyValue `protobuf:"bytes,4,opt,name=oldValue" json:"oldValue,omitempty"`
	Importedauxiliarymedia    *DataReference                             `protobuf:"bytes,5,opt,name=importedauxiliarymedia" json:"importedauxiliarymedia,omitempty"`
	Oldimportedauxiliarymedia *DataReference                             `protobuf:"bytes,6,opt,name=oldimportedauxiliarymedia" json:"oldimportedauxiliarymedia,omitempty"`
}

func (x *MovieSetValueCommandArchive) Reset() {
	*x = MovieSetValueCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDCommandArchives_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MovieSetValueCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovieSetValueCommandArchive) ProtoMessage() {}

func (x *MovieSetValueCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDCommandArchives_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovieSetValueCommandArchive.ProtoReflect.Descriptor instead.
func (*MovieSetValueCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSDCommandArchives_proto_rawDescGZIP(), []int{22}
}

func (x *MovieSetValueCommandArchive) GetSuper() *InfoCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *MovieSetValueCommandArchive) GetProperty() int32 {
	if x != nil && x.Property != nil {
		return *x.Property
	}
	return 0
}

func (x *MovieSetValueCommandArchive) GetValue() *MovieSetValueCommandArchive_PropertyValue {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *MovieSetValueCommandArchive) GetOldValue() *MovieSetValueCommandArchive_PropertyValue {
	if x != nil {
		return x.OldValue
	}
	return nil
}

func (x *MovieSetValueCommandArchive) GetImportedauxiliarymedia() *DataReference {
	if x != nil {
		return x.Importedauxiliarymedia
	}
	return nil
}

func (x *MovieSetValueCommandArchive) GetOldimportedauxiliarymedia() *DataReference {
	if x != nil {
		return x.Oldimportedauxiliarymedia
	}
	return nil
}

type MediaStyleSetValueCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super  *BaseStyleSetValueCommandArchive    `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Change *MediaStylePropertyChangeSetArchive `protobuf:"bytes,4,opt,name=change" json:"change,omitempty"`
}

func (x *MediaStyleSetValueCommandArchive) Reset() {
	*x = MediaStyleSetValueCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDCommandArchives_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaStyleSetValueCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaStyleSetValueCommandArchive) ProtoMessage() {}

func (x *MediaStyleSetValueCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDCommandArchives_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaStyleSetValueCommandArchive.ProtoReflect.Descriptor instead.
func (*MediaStyleSetValueCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSDCommandArchives_proto_rawDescGZIP(), []int{23}
}

func (x *MediaStyleSetValueCommandArchive) GetSuper() *BaseStyleSetValueCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *MediaStyleSetValueCommandArchive) GetChange() *MediaStylePropertyChangeSetArchive {
	if x != nil {
		return x.Change
	}
	return nil
}

type ImageMediaCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                         *InfoCommandArchive      `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	NewImageData                  *DataReference           `protobuf:"bytes,8,opt,name=newImageData" json:"newImageData,omitempty"`
	OldImageData                  *DataReference           `protobuf:"bytes,9,opt,name=oldImageData" json:"oldImageData,omitempty"`
	OldOriginalImageData          *DataReference           `protobuf:"bytes,10,opt,name=oldOriginalImageData" json:"oldOriginalImageData,omitempty"`
	OldNaturalSize                *Size                    `protobuf:"bytes,6,opt,name=oldNaturalSize" json:"oldNaturalSize,omitempty"`
	NewOriginalImageData          *DataReference           `protobuf:"bytes,11,opt,name=newOriginalImageData" json:"newOriginalImageData,omitempty"`
	OldImageAdjustments           *ImageAdjustmentsArchive `protobuf:"bytes,12,opt,name=oldImageAdjustments" json:"oldImageAdjustments,omitempty"`
	OldAdjustedImageData          *DataReference           `protobuf:"bytes,13,opt,name=oldAdjustedImageData" json:"oldAdjustedImageData,omitempty"`
	OldEnhancedImageData          *DataReference           `protobuf:"bytes,14,opt,name=oldEnhancedImageData" json:"oldEnhancedImageData,omitempty"`
	ImageAdjustments              *ImageAdjustmentsArchive `protobuf:"bytes,15,opt,name=imageAdjustments" json:"imageAdjustments,omitempty"`
	AdjustedImageData             *DataReference           `protobuf:"bytes,16,opt,name=adjustedImageData" json:"adjustedImageData,omitempty"`
	EnhancedImageData             *DataReference           `protobuf:"bytes,17,opt,name=enhancedImageData" json:"enhancedImageData,omitempty"`
	NewThumbnailImageData         *DataReference           `protobuf:"bytes,18,opt,name=newThumbnailImageData" json:"newThumbnailImageData,omitempty"`
	OldThumbnailImageData         *DataReference           `protobuf:"bytes,19,opt,name=oldThumbnailImageData" json:"oldThumbnailImageData,omitempty"`
	ThumbnailAdjustedImageData    *DataReference           `protobuf:"bytes,20,opt,name=thumbnailAdjustedImageData" json:"thumbnailAdjustedImageData,omitempty"`
	OldThumbnailAdjustedImageData *DataReference           `protobuf:"bytes,21,opt,name=oldThumbnailAdjustedImageData" json:"oldThumbnailAdjustedImageData,omitempty"`
	DatabaseNewImageData          *Reference               `protobuf:"bytes,3,opt,name=database_newImageData,json=databaseNewImageData" json:"database_newImageData,omitempty"`
	DatabaseOldImageData          *Reference               `protobuf:"bytes,4,opt,name=database_oldImageData,json=databaseOldImageData" json:"database_oldImageData,omitempty"`
	DatabaseOldOriginalImageData  *Reference               `protobuf:"bytes,5,opt,name=database_oldOriginalImageData,json=databaseOldOriginalImageData" json:"database_oldOriginalImageData,omitempty"`
	DatabaseNewOriginalImageData  *Reference               `protobuf:"bytes,7,opt,name=database_newOriginalImageData,json=databaseNewOriginalImageData" json:"database_newOriginalImageData,omitempty"`
}

func (x *ImageMediaCommandArchive) Reset() {
	*x = ImageMediaCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDCommandArchives_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageMediaCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageMediaCommandArchive) ProtoMessage() {}

func (x *ImageMediaCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDCommandArchives_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageMediaCommandArchive.ProtoReflect.Descriptor instead.
func (*ImageMediaCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSDCommandArchives_proto_rawDescGZIP(), []int{24}
}

func (x *ImageMediaCommandArchive) GetSuper() *InfoCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *ImageMediaCommandArchive) GetNewImageData() *DataReference {
	if x != nil {
		return x.NewImageData
	}
	return nil
}

func (x *ImageMediaCommandArchive) GetOldImageData() *DataReference {
	if x != nil {
		return x.OldImageData
	}
	return nil
}

func (x *ImageMediaCommandArchive) GetOldOriginalImageData() *DataReference {
	if x != nil {
		return x.OldOriginalImageData
	}
	return nil
}

func (x *ImageMediaCommandArchive) GetOldNaturalSize() *Size {
	if x != nil {
		return x.OldNaturalSize
	}
	return nil
}

func (x *ImageMediaCommandArchive) GetNewOriginalImageData() *DataReference {
	if x != nil {
		return x.NewOriginalImageData
	}
	return nil
}

func (x *ImageMediaCommandArchive) GetOldImageAdjustments() *ImageAdjustmentsArchive {
	if x != nil {
		return x.OldImageAdjustments
	}
	return nil
}

func (x *ImageMediaCommandArchive) GetOldAdjustedImageData() *DataReference {
	if x != nil {
		return x.OldAdjustedImageData
	}
	return nil
}

func (x *ImageMediaCommandArchive) GetOldEnhancedImageData() *DataReference {
	if x != nil {
		return x.OldEnhancedImageData
	}
	return nil
}

func (x *ImageMediaCommandArchive) GetImageAdjustments() *ImageAdjustmentsArchive {
	if x != nil {
		return x.ImageAdjustments
	}
	return nil
}

func (x *ImageMediaCommandArchive) GetAdjustedImageData() *DataReference {
	if x != nil {
		return x.AdjustedImageData
	}
	return nil
}

func (x *ImageMediaCommandArchive) GetEnhancedImageData() *DataReference {
	if x != nil {
		return x.EnhancedImageData
	}
	return nil
}

func (x *ImageMediaCommandArchive) GetNewThumbnailImageData() *DataReference {
	if x != nil {
		return x.NewThumbnailImageData
	}
	return nil
}

func (x *ImageMediaCommandArchive) GetOldThumbnailImageData() *DataReference {
	if x != nil {
		return x.OldThumbnailImageData
	}
	return nil
}

func (x *ImageMediaCommandArchive) GetThumbnailAdjustedImageData() *DataReference {
	if x != nil {
		return x.ThumbnailAdjustedImageData
	}
	return nil
}

func (x *ImageMediaCommandArchive) GetOldThumbnailAdjustedImageData() *DataReference {
	if x != nil {
		return x.OldThumbnailAdjustedImageData
	}
	return nil
}

func (x *ImageMediaCommandArchive) GetDatabaseNewImageData() *Reference {
	if x != nil {
		return x.DatabaseNewImageData
	}
	return nil
}

func (x *ImageMediaCommandArchive) GetDatabaseOldImageData() *Reference {
	if x != nil {
		return x.DatabaseOldImageData
	}
	return nil
}

func (x *ImageMediaCommandArchive) GetDatabaseOldOriginalImageData() *Reference {
	if x != nil {
		return x.DatabaseOldOriginalImageData
	}
	return nil
}

func (x *ImageMediaCommandArchive) GetDatabaseNewOriginalImageData() *Reference {
	if x != nil {
		return x.DatabaseNewOriginalImageData
	}
	return nil
}

type MediaOriginalSizeCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super           *InfoCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	NewOriginalSize *Size               `protobuf:"bytes,2,opt,name=newOriginalSize" json:"newOriginalSize,omitempty"`
	OldOriginalSize *Size               `protobuf:"bytes,3,opt,name=oldOriginalSize" json:"oldOriginalSize,omitempty"`
	PropertyName    *string             `protobuf:"bytes,4,req,name=propertyName" json:"propertyName,omitempty"`
}

func (x *MediaOriginalSizeCommandArchive) Reset() {
	*x = MediaOriginalSizeCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDCommandArchives_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaOriginalSizeCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaOriginalSizeCommandArchive) ProtoMessage() {}

func (x *MediaOriginalSizeCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDCommandArchives_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaOriginalSizeCommandArchive.ProtoReflect.Descriptor instead.
func (*MediaOriginalSizeCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSDCommandArchives_proto_rawDescGZIP(), []int{25}
}

func (x *MediaOriginalSizeCommandArchive) GetSuper() *InfoCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *MediaOriginalSizeCommandArchive) GetNewOriginalSize() *Size {
	if x != nil {
		return x.NewOriginalSize
	}
	return nil
}

func (x *MediaOriginalSizeCommandArchive) GetOldOriginalSize() *Size {
	if x != nil {
		return x.OldOriginalSize
	}
	return nil
}

func (x *MediaOriginalSizeCommandArchive) GetPropertyName() string {
	if x != nil && x.PropertyName != nil {
		return *x.PropertyName
	}
	return ""
}

type MediaInfoGeometryCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super           *InfoGeometryCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	NewOriginalSize *Size                       `protobuf:"bytes,2,req,name=newOriginalSize" json:"newOriginalSize,omitempty"`
	OldOriginalSize *Size                       `protobuf:"bytes,3,req,name=oldOriginalSize" json:"oldOriginalSize,omitempty"`
}

func (x *MediaInfoGeometryCommandArchive) Reset() {
	*x = MediaInfoGeometryCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDCommandArchives_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaInfoGeometryCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaInfoGeometryCommandArchive) ProtoMessage() {}

func (x *MediaInfoGeometryCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDCommandArchives_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaInfoGeometryCommandArchive.ProtoReflect.Descriptor instead.
func (*MediaInfoGeometryCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSDCommandArchives_proto_rawDescGZIP(), []int{26}
}

func (x *MediaInfoGeometryCommandArchive) GetSuper() *InfoGeometryCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *MediaInfoGeometryCommandArchive) GetNewOriginalSize() *Size {
	if x != nil {
		return x.NewOriginalSize
	}
	return nil
}

func (x *MediaInfoGeometryCommandArchive) GetOldOriginalSize() *Size {
	if x != nil {
		return x.OldOriginalSize
	}
	return nil
}

type ImageNaturalSizeCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super          *InfoCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	NewNaturalSize *Size               `protobuf:"bytes,2,opt,name=new_natural_size,json=newNaturalSize" json:"new_natural_size,omitempty"`
	OldNaturalSize *Size               `protobuf:"bytes,3,opt,name=old_natural_size,json=oldNaturalSize" json:"old_natural_size,omitempty"`
}

func (x *ImageNaturalSizeCommandArchive) Reset() {
	*x = ImageNaturalSizeCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDCommandArchives_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageNaturalSizeCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageNaturalSizeCommandArchive) ProtoMessage() {}

func (x *ImageNaturalSizeCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDCommandArchives_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageNaturalSizeCommandArchive.ProtoReflect.Descriptor instead.
func (*ImageNaturalSizeCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSDCommandArchives_proto_rawDescGZIP(), []int{27}
}

func (x *ImageNaturalSizeCommandArchive) GetSuper() *InfoCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *ImageNaturalSizeCommandArchive) GetNewNaturalSize() *Size {
	if x != nil {
		return x.NewNaturalSize
	}
	return nil
}

func (x *ImageNaturalSizeCommandArchive) GetOldNaturalSize() *Size {
	if x != nil {
		return x.OldNaturalSize
	}
	return nil
}

type ImageMaskCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super       *InfoCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	NewMaskInfo *Reference          `protobuf:"bytes,2,opt,name=newMaskInfo" json:"newMaskInfo,omitempty"`
	OldMaskInfo *Reference          `protobuf:"bytes,3,opt,name=oldMaskInfo" json:"oldMaskInfo,omitempty"`
}

func (x *ImageMaskCommandArchive) Reset() {
	*x = ImageMaskCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDCommandArchives_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageMaskCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageMaskCommandArchive) ProtoMessage() {}

func (x *ImageMaskCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDCommandArchives_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageMaskCommandArchive.ProtoReflect.Descriptor instead.
func (*ImageMaskCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSDCommandArchives_proto_rawDescGZIP(), []int{28}
}

func (x *ImageMaskCommandArchive) GetSuper() *InfoCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *ImageMaskCommandArchive) GetNewMaskInfo() *Reference {
	if x != nil {
		return x.NewMaskInfo
	}
	return nil
}

func (x *ImageMaskCommandArchive) GetOldMaskInfo() *Reference {
	if x != nil {
		return x.OldMaskInfo
	}
	return nil
}

type ImageAdjustmentsCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                              *InfoCommandArchive      `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	OldImageAdjustments                *ImageAdjustmentsArchive `protobuf:"bytes,2,opt,name=old_image_adjustments,json=oldImageAdjustments" json:"old_image_adjustments,omitempty"`
	NewImageAdjustments                *ImageAdjustmentsArchive `protobuf:"bytes,3,opt,name=new_image_adjustments,json=newImageAdjustments" json:"new_image_adjustments,omitempty"`
	AdjustedImageData                  *DataReference           `protobuf:"bytes,4,opt,name=adjustedImageData" json:"adjustedImageData,omitempty"`
	ReplacedAdjustedImageData          *DataReference           `protobuf:"bytes,5,opt,name=replacedAdjustedImageData" json:"replacedAdjustedImageData,omitempty"`
	EnhancedImageData                  *DataReference           `protobuf:"bytes,6,opt,name=enhancedImageData" json:"enhancedImageData,omitempty"`
	ReplacedEnhancedImageData          *DataReference           `protobuf:"bytes,7,opt,name=replacedEnhancedImageData" json:"replacedEnhancedImageData,omitempty"`
	ThumbnailAdjustedImageData         *DataReference           `protobuf:"bytes,8,opt,name=thumbnailAdjustedImageData" json:"thumbnailAdjustedImageData,omitempty"`
	ReplacedThumbnailAdjustedImageData *DataReference           `protobuf:"bytes,9,opt,name=replacedThumbnailAdjustedImageData" json:"replacedThumbnailAdjustedImageData,omitempty"`
}

func (x *ImageAdjustmentsCommandArchive) Reset() {
	*x = ImageAdjustmentsCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDCommandArchives_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageAdjustmentsCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageAdjustmentsCommandArchive) ProtoMessage() {}

func (x *ImageAdjustmentsCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDCommandArchives_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageAdjustmentsCommandArchive.ProtoReflect.Descriptor instead.
func (*ImageAdjustmentsCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSDCommandArchives_proto_rawDescGZIP(), []int{29}
}

func (x *ImageAdjustmentsCommandArchive) GetSuper() *InfoCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *ImageAdjustmentsCommandArchive) GetOldImageAdjustments() *ImageAdjustmentsArchive {
	if x != nil {
		return x.OldImageAdjustments
	}
	return nil
}

func (x *ImageAdjustmentsCommandArchive) GetNewImageAdjustments() *ImageAdjustmentsArchive {
	if x != nil {
		return x.NewImageAdjustments
	}
	return nil
}

func (x *ImageAdjustmentsCommandArchive) GetAdjustedImageData() *DataReference {
	if x != nil {
		return x.AdjustedImageData
	}
	return nil
}

func (x *ImageAdjustmentsCommandArchive) GetReplacedAdjustedImageData() *DataReference {
	if x != nil {
		return x.ReplacedAdjustedImageData
	}
	return nil
}

func (x *ImageAdjustmentsCommandArchive) GetEnhancedImageData() *DataReference {
	if x != nil {
		return x.EnhancedImageData
	}
	return nil
}

func (x *ImageAdjustmentsCommandArchive) GetReplacedEnhancedImageData() *DataReference {
	if x != nil {
		return x.ReplacedEnhancedImageData
	}
	return nil
}

func (x *ImageAdjustmentsCommandArchive) GetThumbnailAdjustedImageData() *DataReference {
	if x != nil {
		return x.ThumbnailAdjustedImageData
	}
	return nil
}

func (x *ImageAdjustmentsCommandArchive) GetReplacedThumbnailAdjustedImageData() *DataReference {
	if x != nil {
		return x.ReplacedThumbnailAdjustedImageData
	}
	return nil
}

type MediaFlagsCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super               *InfoCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	WasMediaReplaced    *bool               `protobuf:"varint,5,opt,name=was_media_replaced,json=wasMediaReplaced" json:"was_media_replaced,omitempty"`
	IsPlaceholder       *bool               `protobuf:"varint,6,opt,name=is_placeholder,json=isPlaceholder" json:"is_placeholder,omitempty"`
	OldWasMediaReplaced *bool               `protobuf:"varint,7,opt,name=old_was_media_replaced,json=oldWasMediaReplaced" json:"old_was_media_replaced,omitempty"`
	OldIsPlaceholder    *bool               `protobuf:"varint,8,opt,name=old_is_placeholder,json=oldIsPlaceholder" json:"old_is_placeholder,omitempty"`
	PropertyName        *string             `protobuf:"bytes,4,req,name=property_name,json=propertyName" json:"property_name,omitempty"`
}

func (x *MediaFlagsCommandArchive) Reset() {
	*x = MediaFlagsCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDCommandArchives_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaFlagsCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaFlagsCommandArchive) ProtoMessage() {}

func (x *MediaFlagsCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDCommandArchives_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaFlagsCommandArchive.ProtoReflect.Descriptor instead.
func (*MediaFlagsCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSDCommandArchives_proto_rawDescGZIP(), []int{30}
}

func (x *MediaFlagsCommandArchive) GetSuper() *InfoCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *MediaFlagsCommandArchive) GetWasMediaReplaced() bool {
	if x != nil && x.WasMediaReplaced != nil {
		return *x.WasMediaReplaced
	}
	return false
}

func (x *MediaFlagsCommandArchive) GetIsPlaceholder() bool {
	if x != nil && x.IsPlaceholder != nil {
		return *x.IsPlaceholder
	}
	return false
}

func (x *MediaFlagsCommandArchive) GetOldWasMediaReplaced() bool {
	if x != nil && x.OldWasMediaReplaced != nil {
		return *x.OldWasMediaReplaced
	}
	return false
}

func (x *MediaFlagsCommandArchive) GetOldIsPlaceholder() bool {
	if x != nil && x.OldIsPlaceholder != nil {
		return *x.OldIsPlaceholder
	}
	return false
}

func (x *MediaFlagsCommandArchive) GetPropertyName() string {
	if x != nil && x.PropertyName != nil {
		return *x.PropertyName
	}
	return ""
}

type DrawablesCommandGroupArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super             *CommandGroupArchive                                    `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	ObsoleteSelection *TSDCanvasSelectionArchive                              `protobuf:"bytes,2,opt,name=obsolete_selection,json=obsoleteSelection" json:"obsolete_selection,omitempty"`
	Modelforselection *Reference                                              `protobuf:"bytes,3,opt,name=modelforselection" json:"modelforselection,omitempty"`
	Type              *DrawablesCommandGroupArchive_DrawablesCommandGroupType `protobuf:"varint,4,opt,name=type,enum=TSD.DrawablesCommandGroupArchive_DrawablesCommandGroupType" json:"type,omitempty"`
	ForDrag           *bool                                                   `protobuf:"varint,5,opt,name=forDrag" json:"forDrag,omitempty"`
	Archivedselection *Reference                                              `protobuf:"bytes,6,opt,name=archivedselection" json:"archivedselection,omitempty"`
}

func (x *DrawablesCommandGroupArchive) Reset() {
	*x = DrawablesCommandGroupArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDCommandArchives_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrawablesCommandGroupArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawablesCommandGroupArchive) ProtoMessage() {}

func (x *DrawablesCommandGroupArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDCommandArchives_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawablesCommandGroupArchive.ProtoReflect.Descriptor instead.
func (*DrawablesCommandGroupArchive) Descriptor() ([]byte, []int) {
	return file_TSDCommandArchives_proto_rawDescGZIP(), []int{31}
}

func (x *DrawablesCommandGroupArchive) GetSuper() *CommandGroupArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *DrawablesCommandGroupArchive) GetObsoleteSelection() *TSDCanvasSelectionArchive {
	if x != nil {
		return x.ObsoleteSelection
	}
	return nil
}

func (x *DrawablesCommandGroupArchive) GetModelforselection() *Reference {
	if x != nil {
		return x.Modelforselection
	}
	return nil
}

func (x *DrawablesCommandGroupArchive) GetType() DrawablesCommandGroupArchive_DrawablesCommandGroupType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return DrawablesCommandGroupArchive_Constructive
}

func (x *DrawablesCommandGroupArchive) GetForDrag() bool {
	if x != nil && x.ForDrag != nil {
		return *x.ForDrag
	}
	return false
}

func (x *DrawablesCommandGroupArchive) GetArchivedselection() *Reference {
	if x != nil {
		return x.Archivedselection
	}
	return nil
}

type ExteriorTextWrapCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super               *InfoCommandArchive      `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	OldExteriorTextWrap *ExteriorTextWrapArchive `protobuf:"bytes,3,opt,name=old_exterior_text_wrap,json=oldExteriorTextWrap" json:"old_exterior_text_wrap,omitempty"`
	Type                *uint32                  `protobuf:"varint,4,opt,name=type" json:"type,omitempty"`
	Direction           *uint32                  `protobuf:"varint,5,opt,name=direction" json:"direction,omitempty"`
	FitType             *uint32                  `protobuf:"varint,6,opt,name=fit_type,json=fitType" json:"fit_type,omitempty"`
	Margin              *float32                 `protobuf:"fixed32,7,opt,name=margin" json:"margin,omitempty"`
	AlphaThreshold      *float32                 `protobuf:"fixed32,8,opt,name=alpha_threshold,json=alphaThreshold" json:"alpha_threshold,omitempty"`
	IsHtmlWrap          *bool                    `protobuf:"varint,9,opt,name=is_html_wrap,json=isHtmlWrap" json:"is_html_wrap,omitempty"`
}

func (x *ExteriorTextWrapCommandArchive) Reset() {
	*x = ExteriorTextWrapCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDCommandArchives_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExteriorTextWrapCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExteriorTextWrapCommandArchive) ProtoMessage() {}

func (x *ExteriorTextWrapCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDCommandArchives_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExteriorTextWrapCommandArchive.ProtoReflect.Descriptor instead.
func (*ExteriorTextWrapCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSDCommandArchives_proto_rawDescGZIP(), []int{32}
}

func (x *ExteriorTextWrapCommandArchive) GetSuper() *InfoCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *ExteriorTextWrapCommandArchive) GetOldExteriorTextWrap() *ExteriorTextWrapArchive {
	if x != nil {
		return x.OldExteriorTextWrap
	}
	return nil
}

func (x *ExteriorTextWrapCommandArchive) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *ExteriorTextWrapCommandArchive) GetDirection() uint32 {
	if x != nil && x.Direction != nil {
		return *x.Direction
	}
	return 0
}

func (x *ExteriorTextWrapCommandArchive) GetFitType() uint32 {
	if x != nil && x.FitType != nil {
		return *x.FitType
	}
	return 0
}

func (x *ExteriorTextWrapCommandArchive) GetMargin() float32 {
	if x != nil && x.Margin != nil {
		return *x.Margin
	}
	return 0
}

func (x *ExteriorTextWrapCommandArchive) GetAlphaThreshold() float32 {
	if x != nil && x.AlphaThreshold != nil {
		return *x.AlphaThreshold
	}
	return 0
}

func (x *ExteriorTextWrapCommandArchive) GetIsHtmlWrap() bool {
	if x != nil && x.IsHtmlWrap != nil {
		return *x.IsHtmlWrap
	}
	return false
}

type DrawableHyperlinkCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super           *InfoCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	OldhyperlinkUrl *string             `protobuf:"bytes,2,opt,name=oldhyperlink_url,json=oldhyperlinkUrl" json:"oldhyperlink_url,omitempty"`
	NewhyperlinkUrl *string             `protobuf:"bytes,3,opt,name=newhyperlink_url,json=newhyperlinkUrl" json:"newhyperlink_url,omitempty"`
}

func (x *DrawableHyperlinkCommandArchive) Reset() {
	*x = DrawableHyperlinkCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDCommandArchives_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrawableHyperlinkCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawableHyperlinkCommandArchive) ProtoMessage() {}

func (x *DrawableHyperlinkCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDCommandArchives_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawableHyperlinkCommandArchive.ProtoReflect.Descriptor instead.
func (*DrawableHyperlinkCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSDCommandArchives_proto_rawDescGZIP(), []int{33}
}

func (x *DrawableHyperlinkCommandArchive) GetSuper() *InfoCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *DrawableHyperlinkCommandArchive) GetOldhyperlinkUrl() string {
	if x != nil && x.OldhyperlinkUrl != nil {
		return *x.OldhyperlinkUrl
	}
	return ""
}

func (x *DrawableHyperlinkCommandArchive) GetNewhyperlinkUrl() string {
	if x != nil && x.NewhyperlinkUrl != nil {
		return *x.NewhyperlinkUrl
	}
	return ""
}

type CommentInvalidatingCommandSelectionBehaviorArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                       *CommandSelectionBehaviorArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	AnnotationDisplayingCommand *Reference                       `protobuf:"bytes,2,opt,name=annotation_displaying_command,json=annotationDisplayingCommand" json:"annotation_displaying_command,omitempty"`
	BeginEditingOnUndo          *bool                            `protobuf:"varint,3,opt,name=begin_editing_on_undo,json=beginEditingOnUndo" json:"begin_editing_on_undo,omitempty"`
	BeginEditingOnRedo          *bool                            `protobuf:"varint,4,opt,name=begin_editing_on_redo,json=beginEditingOnRedo" json:"begin_editing_on_redo,omitempty"`
	ShouldInvalidateOnUndo      *bool                            `protobuf:"varint,5,opt,name=should_invalidate_on_undo,json=shouldInvalidateOnUndo" json:"should_invalidate_on_undo,omitempty"`
	ShouldInvalidateOnRedo      *bool                            `protobuf:"varint,6,opt,name=should_invalidate_on_redo,json=shouldInvalidateOnRedo" json:"should_invalidate_on_redo,omitempty"`
}

func (x *CommentInvalidatingCommandSelectionBehaviorArchive) Reset() {
	*x = CommentInvalidatingCommandSelectionBehaviorArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDCommandArchives_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentInvalidatingCommandSelectionBehaviorArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentInvalidatingCommandSelectionBehaviorArchive) ProtoMessage() {}

func (x *CommentInvalidatingCommandSelectionBehaviorArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDCommandArchives_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentInvalidatingCommandSelectionBehaviorArchive.ProtoReflect.Descriptor instead.
func (*CommentInvalidatingCommandSelectionBehaviorArchive) Descriptor() ([]byte, []int) {
	return file_TSDCommandArchives_proto_rawDescGZIP(), []int{34}
}

func (x *CommentInvalidatingCommandSelectionBehaviorArchive) GetSuper() *CommandSelectionBehaviorArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommentInvalidatingCommandSelectionBehaviorArchive) GetAnnotationDisplayingCommand() *Reference {
	if x != nil {
		return x.AnnotationDisplayingCommand
	}
	return nil
}

func (x *CommentInvalidatingCommandSelectionBehaviorArchive) GetBeginEditingOnUndo() bool {
	if x != nil && x.BeginEditingOnUndo != nil {
		return *x.BeginEditingOnUndo
	}
	return false
}

func (x *CommentInvalidatingCommandSelectionBehaviorArchive) GetBeginEditingOnRedo() bool {
	if x != nil && x.BeginEditingOnRedo != nil {
		return *x.BeginEditingOnRedo
	}
	return false
}

func (x *CommentInvalidatingCommandSelectionBehaviorArchive) GetShouldInvalidateOnUndo() bool {
	if x != nil && x.ShouldInvalidateOnUndo != nil {
		return *x.ShouldInvalidateOnUndo
	}
	return false
}

func (x *CommentInvalidatingCommandSelectionBehaviorArchive) GetShouldInvalidateOnRedo() bool {
	if x != nil && x.ShouldInvalidateOnRedo != nil {
		return *x.ShouldInvalidateOnRedo
	}
	return false
}

type ImageReplaceCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                         *InfoCommandArchive      `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	NewImageData                  *DataReference           `protobuf:"bytes,2,opt,name=new_image_data,json=newImageData" json:"new_image_data,omitempty"`
	NewOriginalImageData          *DataReference           `protobuf:"bytes,3,opt,name=new_original_image_data,json=newOriginalImageData" json:"new_original_image_data,omitempty"`
	OldImageData                  *DataReference           `protobuf:"bytes,4,opt,name=old_image_data,json=oldImageData" json:"old_image_data,omitempty"`
	OldOriginalImageData          *DataReference           `protobuf:"bytes,5,opt,name=old_original_image_data,json=oldOriginalImageData" json:"old_original_image_data,omitempty"`
	InstantAlphaPath              *Path                    `protobuf:"bytes,6,opt,name=instant_alpha_path,json=instantAlphaPath" json:"instant_alpha_path,omitempty"`
	OldInstantAlphaPath           *Path                    `protobuf:"bytes,7,opt,name=old_instant_alpha_path,json=oldInstantAlphaPath" json:"old_instant_alpha_path,omitempty"`
	NaturalSizeFor_IAPath         *Size                    `protobuf:"bytes,8,opt,name=natural_size_for_IAPath,json=naturalSizeForIAPath" json:"natural_size_for_IAPath,omitempty"`
	OldNaturalSizeFor_IAPath      *Size                    `protobuf:"bytes,9,opt,name=old_natural_size_for_IAPath,json=oldNaturalSizeForIAPath" json:"old_natural_size_for_IAPath,omitempty"`
	TargetImageGeometry           *GeometryArchive         `protobuf:"bytes,10,opt,name=target_image_geometry,json=targetImageGeometry" json:"target_image_geometry,omitempty"`
	OldTargetImageGeometry        *GeometryArchive         `protobuf:"bytes,12,opt,name=old_target_image_geometry,json=oldTargetImageGeometry" json:"old_target_image_geometry,omitempty"`
	TargetMaskGeometry            *GeometryArchive         `protobuf:"bytes,13,opt,name=target_mask_geometry,json=targetMaskGeometry" json:"target_mask_geometry,omitempty"`
	OldTargetMaskGeometry         *GeometryArchive         `protobuf:"bytes,14,opt,name=old_target_mask_geometry,json=oldTargetMaskGeometry" json:"old_target_mask_geometry,omitempty"`
	ImageAdjustments              *ImageAdjustmentsArchive `protobuf:"bytes,15,opt,name=image_adjustments,json=imageAdjustments" json:"image_adjustments,omitempty"`
	AdjustedImageData             *DataReference           `protobuf:"bytes,16,opt,name=adjusted_image_data,json=adjustedImageData" json:"adjusted_image_data,omitempty"`
	EnhancedImageData             *DataReference           `protobuf:"bytes,17,opt,name=enhanced_image_data,json=enhancedImageData" json:"enhanced_image_data,omitempty"`
	OldImageAdjustments           *ImageAdjustmentsArchive `protobuf:"bytes,18,opt,name=old_image_adjustments,json=oldImageAdjustments" json:"old_image_adjustments,omitempty"`
	OldAdjustedImageData          *DataReference           `protobuf:"bytes,19,opt,name=old_adjusted_image_data,json=oldAdjustedImageData" json:"old_adjusted_image_data,omitempty"`
	OldEnhancedImageData          *DataReference           `protobuf:"bytes,20,opt,name=old_enhanced_image_data,json=oldEnhancedImageData" json:"old_enhanced_image_data,omitempty"`
	ThumbnailImageData            *DataReference           `protobuf:"bytes,21,opt,name=thumbnail_image_data,json=thumbnailImageData" json:"thumbnail_image_data,omitempty"`
	OldThumbnailImageData         *DataReference           `protobuf:"bytes,22,opt,name=old_thumbnail_image_data,json=oldThumbnailImageData" json:"old_thumbnail_image_data,omitempty"`
	ThumbnailAdjustedImageData    *DataReference           `protobuf:"bytes,23,opt,name=thumbnail_adjusted_image_data,json=thumbnailAdjustedImageData" json:"thumbnail_adjusted_image_data,omitempty"`
	OldThumbnailAdjustedImageData *DataReference           `protobuf:"bytes,24,opt,name=old_thumbnail_adjusted_image_data,json=oldThumbnailAdjustedImageData" json:"old_thumbnail_adjusted_image_data,omitempty"`
	NaturalSize                   *Size                    `protobuf:"bytes,25,opt,name=natural_size,json=naturalSize" json:"natural_size,omitempty"`
	OldNaturalSize                *Size                    `protobuf:"bytes,26,opt,name=old_natural_size,json=oldNaturalSize" json:"old_natural_size,omitempty"`
}

func (x *ImageReplaceCommandArchive) Reset() {
	*x = ImageReplaceCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDCommandArchives_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageReplaceCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageReplaceCommandArchive) ProtoMessage() {}

func (x *ImageReplaceCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDCommandArchives_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageReplaceCommandArchive.ProtoReflect.Descriptor instead.
func (*ImageReplaceCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSDCommandArchives_proto_rawDescGZIP(), []int{35}
}

func (x *ImageReplaceCommandArchive) GetSuper() *InfoCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *ImageReplaceCommandArchive) GetNewImageData() *DataReference {
	if x != nil {
		return x.NewImageData
	}
	return nil
}

func (x *ImageReplaceCommandArchive) GetNewOriginalImageData() *DataReference {
	if x != nil {
		return x.NewOriginalImageData
	}
	return nil
}

func (x *ImageReplaceCommandArchive) GetOldImageData() *DataReference {
	if x != nil {
		return x.OldImageData
	}
	return nil
}

func (x *ImageReplaceCommandArchive) GetOldOriginalImageData() *DataReference {
	if x != nil {
		return x.OldOriginalImageData
	}
	return nil
}

func (x *ImageReplaceCommandArchive) GetInstantAlphaPath() *Path {
	if x != nil {
		return x.InstantAlphaPath
	}
	return nil
}

func (x *ImageReplaceCommandArchive) GetOldInstantAlphaPath() *Path {
	if x != nil {
		return x.OldInstantAlphaPath
	}
	return nil
}

func (x *ImageReplaceCommandArchive) GetNaturalSizeFor_IAPath() *Size {
	if x != nil {
		return x.NaturalSizeFor_IAPath
	}
	return nil
}

func (x *ImageReplaceCommandArchive) GetOldNaturalSizeFor_IAPath() *Size {
	if x != nil {
		return x.OldNaturalSizeFor_IAPath
	}
	return nil
}

func (x *ImageReplaceCommandArchive) GetTargetImageGeometry() *GeometryArchive {
	if x != nil {
		return x.TargetImageGeometry
	}
	return nil
}

func (x *ImageReplaceCommandArchive) GetOldTargetImageGeometry() *GeometryArchive {
	if x != nil {
		return x.OldTargetImageGeometry
	}
	return nil
}

func (x *ImageReplaceCommandArchive) GetTargetMaskGeometry() *GeometryArchive {
	if x != nil {
		return x.TargetMaskGeometry
	}
	return nil
}

func (x *ImageReplaceCommandArchive) GetOldTargetMaskGeometry() *GeometryArchive {
	if x != nil {
		return x.OldTargetMaskGeometry
	}
	return nil
}

func (x *ImageReplaceCommandArchive) GetImageAdjustments() *ImageAdjustmentsArchive {
	if x != nil {
		return x.ImageAdjustments
	}
	return nil
}

func (x *ImageReplaceCommandArchive) GetAdjustedImageData() *DataReference {
	if x != nil {
		return x.AdjustedImageData
	}
	return nil
}

func (x *ImageReplaceCommandArchive) GetEnhancedImageData() *DataReference {
	if x != nil {
		return x.EnhancedImageData
	}
	return nil
}

func (x *ImageReplaceCommandArchive) GetOldImageAdjustments() *ImageAdjustmentsArchive {
	if x != nil {
		return x.OldImageAdjustments
	}
	return nil
}

func (x *ImageReplaceCommandArchive) GetOldAdjustedImageData() *DataReference {
	if x != nil {
		return x.OldAdjustedImageData
	}
	return nil
}

func (x *ImageReplaceCommandArchive) GetOldEnhancedImageData() *DataReference {
	if x != nil {
		return x.OldEnhancedImageData
	}
	return nil
}

func (x *ImageReplaceCommandArchive) GetThumbnailImageData() *DataReference {
	if x != nil {
		return x.ThumbnailImageData
	}
	return nil
}

func (x *ImageReplaceCommandArchive) GetOldThumbnailImageData() *DataReference {
	if x != nil {
		return x.OldThumbnailImageData
	}
	return nil
}

func (x *ImageReplaceCommandArchive) GetThumbnailAdjustedImageData() *DataReference {
	if x != nil {
		return x.ThumbnailAdjustedImageData
	}
	return nil
}

func (x *ImageReplaceCommandArchive) GetOldThumbnailAdjustedImageData() *DataReference {
	if x != nil {
		return x.OldThumbnailAdjustedImageData
	}
	return nil
}

func (x *ImageReplaceCommandArchive) GetNaturalSize() *Size {
	if x != nil {
		return x.NaturalSize
	}
	return nil
}

func (x *ImageReplaceCommandArchive) GetOldNaturalSize() *Size {
	if x != nil {
		return x.OldNaturalSize
	}
	return nil
}

type DrawableLockCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super     *InfoCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Locked    *bool               `protobuf:"varint,2,opt,name=locked" json:"locked,omitempty"`
	WasLocked *bool               `protobuf:"varint,3,opt,name=was_locked,json=wasLocked" json:"was_locked,omitempty"`
}

func (x *DrawableLockCommandArchive) Reset() {
	*x = DrawableLockCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDCommandArchives_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrawableLockCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawableLockCommandArchive) ProtoMessage() {}

func (x *DrawableLockCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDCommandArchives_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawableLockCommandArchive.ProtoReflect.Descriptor instead.
func (*DrawableLockCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSDCommandArchives_proto_rawDescGZIP(), []int{36}
}

func (x *DrawableLockCommandArchive) GetSuper() *InfoCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *DrawableLockCommandArchive) GetLocked() bool {
	if x != nil && x.Locked != nil {
		return *x.Locked
	}
	return false
}

func (x *DrawableLockCommandArchive) GetWasLocked() bool {
	if x != nil && x.WasLocked != nil {
		return *x.WasLocked
	}
	return false
}

type DrawableInfoCommentCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super          *InfoCommandArchive    `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	OldComment     *Reference             `protobuf:"bytes,2,opt,name=old_comment,json=oldComment" json:"old_comment,omitempty"`
	NewComment     *Reference             `protobuf:"bytes,3,opt,name=new_comment,json=newComment" json:"new_comment,omitempty"`
	ForwardVariant *CommentCommandVariant `protobuf:"varint,4,opt,name=forward_variant,json=forwardVariant,enum=TSD.CommentCommandVariant" json:"forward_variant,omitempty"`
	InverseVariant *CommentCommandVariant `protobuf:"varint,5,opt,name=inverse_variant,json=inverseVariant,enum=TSD.CommentCommandVariant" json:"inverse_variant,omitempty"`
}

func (x *DrawableInfoCommentCommandArchive) Reset() {
	*x = DrawableInfoCommentCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDCommandArchives_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrawableInfoCommentCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawableInfoCommentCommandArchive) ProtoMessage() {}

func (x *DrawableInfoCommentCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDCommandArchives_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawableInfoCommentCommandArchive.ProtoReflect.Descriptor instead.
func (*DrawableInfoCommentCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSDCommandArchives_proto_rawDescGZIP(), []int{37}
}

func (x *DrawableInfoCommentCommandArchive) GetSuper() *InfoCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *DrawableInfoCommentCommandArchive) GetOldComment() *Reference {
	if x != nil {
		return x.OldComment
	}
	return nil
}

func (x *DrawableInfoCommentCommandArchive) GetNewComment() *Reference {
	if x != nil {
		return x.NewComment
	}
	return nil
}

func (x *DrawableInfoCommentCommandArchive) GetForwardVariant() CommentCommandVariant {
	if x != nil && x.ForwardVariant != nil {
		return *x.ForwardVariant
	}
	return CommentCommandVariant_BaseComment
}

func (x *DrawableInfoCommentCommandArchive) GetInverseVariant() CommentCommandVariant {
	if x != nil && x.InverseVariant != nil {
		return *x.InverseVariant
	}
	return CommentCommandVariant_BaseComment
}

type DrawablePencilAnnotationCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                    *InfoCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	PencilAnnotationToAdd    *Reference          `protobuf:"bytes,2,opt,name=pencil_annotation_to_add,json=pencilAnnotationToAdd" json:"pencil_annotation_to_add,omitempty"`
	PencilAnnotationToRemove *Reference          `protobuf:"bytes,3,opt,name=pencil_annotation_to_remove,json=pencilAnnotationToRemove" json:"pencil_annotation_to_remove,omitempty"`
}

func (x *DrawablePencilAnnotationCommandArchive) Reset() {
	*x = DrawablePencilAnnotationCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDCommandArchives_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrawablePencilAnnotationCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawablePencilAnnotationCommandArchive) ProtoMessage() {}

func (x *DrawablePencilAnnotationCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDCommandArchives_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawablePencilAnnotationCommandArchive.ProtoReflect.Descriptor instead.
func (*DrawablePencilAnnotationCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSDCommandArchives_proto_rawDescGZIP(), []int{38}
}

func (x *DrawablePencilAnnotationCommandArchive) GetSuper() *InfoCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *DrawablePencilAnnotationCommandArchive) GetPencilAnnotationToAdd() *Reference {
	if x != nil {
		return x.PencilAnnotationToAdd
	}
	return nil
}

func (x *DrawablePencilAnnotationCommandArchive) GetPencilAnnotationToRemove() *Reference {
	if x != nil {
		return x.PencilAnnotationToRemove
	}
	return nil
}

type AbstractGuideCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super     *CommandArchive            `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	OldGuides []*UserDefinedGuideArchive `protobuf:"bytes,7,rep,name=old_guides,json=oldGuides" json:"old_guides,omitempty"`
	NewGuides []*UserDefinedGuideArchive `protobuf:"bytes,8,rep,name=new_guides,json=newGuides" json:"new_guides,omitempty"`
}

func (x *AbstractGuideCommandArchive) Reset() {
	*x = AbstractGuideCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDCommandArchives_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbstractGuideCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbstractGuideCommandArchive) ProtoMessage() {}

func (x *AbstractGuideCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDCommandArchives_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbstractGuideCommandArchive.ProtoReflect.Descriptor instead.
func (*AbstractGuideCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSDCommandArchives_proto_rawDescGZIP(), []int{39}
}

func (x *AbstractGuideCommandArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *AbstractGuideCommandArchive) GetOldGuides() []*UserDefinedGuideArchive {
	if x != nil {
		return x.OldGuides
	}
	return nil
}

func (x *AbstractGuideCommandArchive) GetNewGuides() []*UserDefinedGuideArchive {
	if x != nil {
		return x.NewGuides
	}
	return nil
}

type GuideCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super         *AbstractGuideCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	StorageIdPath *UUIDPath                    `protobuf:"bytes,2,req,name=storage_id_path,json=storageIdPath" json:"storage_id_path,omitempty"`
}

func (x *GuideCommandArchive) Reset() {
	*x = GuideCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDCommandArchives_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuideCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuideCommandArchive) ProtoMessage() {}

func (x *GuideCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDCommandArchives_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuideCommandArchive.ProtoReflect.Descriptor instead.
func (*GuideCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSDCommandArchives_proto_rawDescGZIP(), []int{40}
}

func (x *GuideCommandArchive) GetSuper() *AbstractGuideCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *GuideCommandArchive) GetStorageIdPath() *UUIDPath {
	if x != nil {
		return x.StorageIdPath
	}
	return nil
}

type DrawableAspectRatioLockedCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                *InfoCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	AspectRatioLocked    *bool               `protobuf:"varint,2,opt,name=aspect_ratio_locked,json=aspectRatioLocked" json:"aspect_ratio_locked,omitempty"`
	WasAspectRatioLocked *bool               `protobuf:"varint,3,opt,name=was_aspect_ratio_locked,json=wasAspectRatioLocked" json:"was_aspect_ratio_locked,omitempty"`
}

func (x *DrawableAspectRatioLockedCommandArchive) Reset() {
	*x = DrawableAspectRatioLockedCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDCommandArchives_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrawableAspectRatioLockedCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawableAspectRatioLockedCommandArchive) ProtoMessage() {}

func (x *DrawableAspectRatioLockedCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDCommandArchives_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawableAspectRatioLockedCommandArchive.ProtoReflect.Descriptor instead.
func (*DrawableAspectRatioLockedCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSDCommandArchives_proto_rawDescGZIP(), []int{41}
}

func (x *DrawableAspectRatioLockedCommandArchive) GetSuper() *InfoCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *DrawableAspectRatioLockedCommandArchive) GetAspectRatioLocked() bool {
	if x != nil && x.AspectRatioLocked != nil {
		return *x.AspectRatioLocked
	}
	return false
}

func (x *DrawableAspectRatioLockedCommandArchive) GetWasAspectRatioLocked() bool {
	if x != nil && x.WasAspectRatioLocked != nil {
		return *x.WasAspectRatioLocked
	}
	return false
}

type DrawableAccessibilityDescriptionCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                       *InfoCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	AccessibilityDescription    *string             `protobuf:"bytes,2,opt,name=accessibility_description,json=accessibilityDescription" json:"accessibility_description,omitempty"`
	OldAccessibilityDescription *string             `protobuf:"bytes,3,opt,name=old_accessibility_description,json=oldAccessibilityDescription" json:"old_accessibility_description,omitempty"`
}

func (x *DrawableAccessibilityDescriptionCommandArchive) Reset() {
	*x = DrawableAccessibilityDescriptionCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDCommandArchives_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrawableAccessibilityDescriptionCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawableAccessibilityDescriptionCommandArchive) ProtoMessage() {}

func (x *DrawableAccessibilityDescriptionCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDCommandArchives_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawableAccessibilityDescriptionCommandArchive.ProtoReflect.Descriptor instead.
func (*DrawableAccessibilityDescriptionCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSDCommandArchives_proto_rawDescGZIP(), []int{42}
}

func (x *DrawableAccessibilityDescriptionCommandArchive) GetSuper() *InfoCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *DrawableAccessibilityDescriptionCommandArchive) GetAccessibilityDescription() string {
	if x != nil && x.AccessibilityDescription != nil {
		return *x.AccessibilityDescription
	}
	return ""
}

func (x *DrawableAccessibilityDescriptionCommandArchive) GetOldAccessibilityDescription() string {
	if x != nil && x.OldAccessibilityDescription != nil {
		return *x.OldAccessibilityDescription
	}
	return ""
}

type PasteStyleCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super         *AbstractStyleCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	NewStyle      *Reference                   `protobuf:"bytes,2,opt,name=new_style,json=newStyle" json:"new_style,omitempty"`
	RollbackStyle *Reference                   `protobuf:"bytes,5,opt,name=rollback_style,json=rollbackStyle" json:"rollback_style,omitempty"`
	TailEndOnLeft *bool                        `protobuf:"varint,4,opt,name=tail_end_on_left,json=tailEndOnLeft" json:"tail_end_on_left,omitempty"`
}

func (x *PasteStyleCommandArchive) Reset() {
	*x = PasteStyleCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDCommandArchives_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasteStyleCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasteStyleCommandArchive) ProtoMessage() {}

func (x *PasteStyleCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDCommandArchives_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasteStyleCommandArchive.ProtoReflect.Descriptor instead.
func (*PasteStyleCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSDCommandArchives_proto_rawDescGZIP(), []int{43}
}

func (x *PasteStyleCommandArchive) GetSuper() *AbstractStyleCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *PasteStyleCommandArchive) GetNewStyle() *Reference {
	if x != nil {
		return x.NewStyle
	}
	return nil
}

func (x *PasteStyleCommandArchive) GetRollbackStyle() *Reference {
	if x != nil {
		return x.RollbackStyle
	}
	return nil
}

func (x *PasteStyleCommandArchive) GetTailEndOnLeft() bool {
	if x != nil && x.TailEndOnLeft != nil {
		return *x.TailEndOnLeft
	}
	return false
}

type ImageInfoAbstractGeometryCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                *InfoCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	NewImageGeometry     *GeometryArchive    `protobuf:"bytes,2,opt,name=new_image_geometry,json=newImageGeometry" json:"new_image_geometry,omitempty"`
	OldImageGeometry     *GeometryArchive    `protobuf:"bytes,3,opt,name=old_image_geometry,json=oldImageGeometry" json:"old_image_geometry,omitempty"`
	NewMaskGeometry      *GeometryArchive    `protobuf:"bytes,4,opt,name=new_mask_geometry,json=newMaskGeometry" json:"new_mask_geometry,omitempty"`
	OldMaskGeometry      *GeometryArchive    `protobuf:"bytes,5,opt,name=old_mask_geometry,json=oldMaskGeometry" json:"old_mask_geometry,omitempty"`
	NewMaskPathSource    *PathSourceArchive  `protobuf:"bytes,6,opt,name=new_mask_path_source,json=newMaskPathSource" json:"new_mask_path_source,omitempty"`
	OldMaskPathSource    *PathSourceArchive  `protobuf:"bytes,7,opt,name=old_mask_path_source,json=oldMaskPathSource" json:"old_mask_path_source,omitempty"`
	NewImageOriginalSize *Size               `protobuf:"bytes,8,opt,name=new_image_original_size,json=newImageOriginalSize" json:"new_image_original_size,omitempty"`
	OldImageOriginalSize *Size               `protobuf:"bytes,9,opt,name=old_image_original_size,json=oldImageOriginalSize" json:"old_image_original_size,omitempty"`
}

func (x *ImageInfoAbstractGeometryCommandArchive) Reset() {
	*x = ImageInfoAbstractGeometryCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDCommandArchives_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageInfoAbstractGeometryCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageInfoAbstractGeometryCommandArchive) ProtoMessage() {}

func (x *ImageInfoAbstractGeometryCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDCommandArchives_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageInfoAbstractGeometryCommandArchive.ProtoReflect.Descriptor instead.
func (*ImageInfoAbstractGeometryCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSDCommandArchives_proto_rawDescGZIP(), []int{44}
}

func (x *ImageInfoAbstractGeometryCommandArchive) GetSuper() *InfoCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *ImageInfoAbstractGeometryCommandArchive) GetNewImageGeometry() *GeometryArchive {
	if x != nil {
		return x.NewImageGeometry
	}
	return nil
}

func (x *ImageInfoAbstractGeometryCommandArchive) GetOldImageGeometry() *GeometryArchive {
	if x != nil {
		return x.OldImageGeometry
	}
	return nil
}

func (x *ImageInfoAbstractGeometryCommandArchive) GetNewMaskGeometry() *GeometryArchive {
	if x != nil {
		return x.NewMaskGeometry
	}
	return nil
}

func (x *ImageInfoAbstractGeometryCommandArchive) GetOldMaskGeometry() *GeometryArchive {
	if x != nil {
		return x.OldMaskGeometry
	}
	return nil
}

func (x *ImageInfoAbstractGeometryCommandArchive) GetNewMaskPathSource() *PathSourceArchive {
	if x != nil {
		return x.NewMaskPathSource
	}
	return nil
}

func (x *ImageInfoAbstractGeometryCommandArchive) GetOldMaskPathSource() *PathSourceArchive {
	if x != nil {
		return x.OldMaskPathSource
	}
	return nil
}

func (x *ImageInfoAbstractGeometryCommandArchive) GetNewImageOriginalSize() *Size {
	if x != nil {
		return x.NewImageOriginalSize
	}
	return nil
}

func (x *ImageInfoAbstractGeometryCommandArchive) GetOldImageOriginalSize() *Size {
	if x != nil {
		return x.OldImageOriginalSize
	}
	return nil
}

type ImageInfoGeometryCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *ImageInfoAbstractGeometryCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
}

func (x *ImageInfoGeometryCommandArchive) Reset() {
	*x = ImageInfoGeometryCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDCommandArchives_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageInfoGeometryCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageInfoGeometryCommandArchive) ProtoMessage() {}

func (x *ImageInfoGeometryCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDCommandArchives_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageInfoGeometryCommandArchive.ProtoReflect.Descriptor instead.
func (*ImageInfoGeometryCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSDCommandArchives_proto_rawDescGZIP(), []int{45}
}

func (x *ImageInfoGeometryCommandArchive) GetSuper() *ImageInfoAbstractGeometryCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

type ImageInfoMaskGeometryCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *ImageInfoAbstractGeometryCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
}

func (x *ImageInfoMaskGeometryCommandArchive) Reset() {
	*x = ImageInfoMaskGeometryCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDCommandArchives_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageInfoMaskGeometryCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageInfoMaskGeometryCommandArchive) ProtoMessage() {}

func (x *ImageInfoMaskGeometryCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDCommandArchives_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageInfoMaskGeometryCommandArchive.ProtoReflect.Descriptor instead.
func (*ImageInfoMaskGeometryCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSDCommandArchives_proto_rawDescGZIP(), []int{46}
}

func (x *ImageInfoMaskGeometryCommandArchive) GetSuper() *ImageInfoAbstractGeometryCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

type InfoCollectionSelectionTransformerHelperArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InfoUuidPathList []*UUIDPath `protobuf:"bytes,1,rep,name=info_uuid_path_list,json=infoUuidPathList" json:"info_uuid_path_list,omitempty"`
}

func (x *InfoCollectionSelectionTransformerHelperArchive) Reset() {
	*x = InfoCollectionSelectionTransformerHelperArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDCommandArchives_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfoCollectionSelectionTransformerHelperArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoCollectionSelectionTransformerHelperArchive) ProtoMessage() {}

func (x *InfoCollectionSelectionTransformerHelperArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDCommandArchives_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoCollectionSelectionTransformerHelperArchive.ProtoReflect.Descriptor instead.
func (*InfoCollectionSelectionTransformerHelperArchive) Descriptor() ([]byte, []int) {
	return file_TSDCommandArchives_proto_rawDescGZIP(), []int{47}
}

func (x *InfoCollectionSelectionTransformerHelperArchive) GetInfoUuidPathList() []*UUIDPath {
	if x != nil {
		return x.InfoUuidPathList
	}
	return nil
}

type DrawableSelectionTransformerArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransformerHelper              *InfoCollectionSelectionTransformerHelperArchive `protobuf:"bytes,1,req,name=transformer_helper,json=transformerHelper" json:"transformer_helper,omitempty"`
	UntransformedDrawableSelection *Reference                                       `protobuf:"bytes,2,req,name=untransformed_drawable_selection,json=untransformedDrawableSelection" json:"untransformed_drawable_selection,omitempty"`
}

func (x *DrawableSelectionTransformerArchive) Reset() {
	*x = DrawableSelectionTransformerArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDCommandArchives_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrawableSelectionTransformerArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawableSelectionTransformerArchive) ProtoMessage() {}

func (x *DrawableSelectionTransformerArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDCommandArchives_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawableSelectionTransformerArchive.ProtoReflect.Descriptor instead.
func (*DrawableSelectionTransformerArchive) Descriptor() ([]byte, []int) {
	return file_TSDCommandArchives_proto_rawDescGZIP(), []int{48}
}

func (x *DrawableSelectionTransformerArchive) GetTransformerHelper() *InfoCollectionSelectionTransformerHelperArchive {
	if x != nil {
		return x.TransformerHelper
	}
	return nil
}

func (x *DrawableSelectionTransformerArchive) GetUntransformedDrawableSelection() *Reference {
	if x != nil {
		return x.UntransformedDrawableSelection
	}
	return nil
}

type InfoHyperlinkSelectionTransformerArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InfoHyperlinkSelectionTransformerArchive) Reset() {
	*x = InfoHyperlinkSelectionTransformerArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDCommandArchives_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfoHyperlinkSelectionTransformerArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoHyperlinkSelectionTransformerArchive) ProtoMessage() {}

func (x *InfoHyperlinkSelectionTransformerArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDCommandArchives_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoHyperlinkSelectionTransformerArchive.ProtoReflect.Descriptor instead.
func (*InfoHyperlinkSelectionTransformerArchive) Descriptor() ([]byte, []int) {
	return file_TSDCommandArchives_proto_rawDescGZIP(), []int{49}
}

type TSDCanvasSelectionTransformerArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransformerHelper *InfoCollectionSelectionTransformerHelperArchive `protobuf:"bytes,1,req,name=transformer_helper,json=transformerHelper" json:"transformer_helper,omitempty"`
}

func (x *TSDCanvasSelectionTransformerArchive) Reset() {
	*x = TSDCanvasSelectionTransformerArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDCommandArchives_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSDCanvasSelectionTransformerArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSDCanvasSelectionTransformerArchive) ProtoMessage() {}

func (x *TSDCanvasSelectionTransformerArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDCommandArchives_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSDCanvasSelectionTransformerArchive.ProtoReflect.Descriptor instead.
func (*TSDCanvasSelectionTransformerArchive) Descriptor() ([]byte, []int) {
	return file_TSDCommandArchives_proto_rawDescGZIP(), []int{50}
}

func (x *TSDCanvasSelectionTransformerArchive) GetTransformerHelper() *InfoCollectionSelectionTransformerHelperArchive {
	if x != nil {
		return x.TransformerHelper
	}
	return nil
}

type PathSelectionTransformerArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PathSelectionTransformerArchive) Reset() {
	*x = PathSelectionTransformerArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDCommandArchives_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PathSelectionTransformerArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PathSelectionTransformerArchive) ProtoMessage() {}

func (x *PathSelectionTransformerArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDCommandArchives_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PathSelectionTransformerArchive.ProtoReflect.Descriptor instead.
func (*PathSelectionTransformerArchive) Descriptor() ([]byte, []int) {
	return file_TSDCommandArchives_proto_rawDescGZIP(), []int{51}
}

type ShapeSelectionTransformerArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *DrawableSelectionTransformerArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
}

func (x *ShapeSelectionTransformerArchive) Reset() {
	*x = ShapeSelectionTransformerArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDCommandArchives_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShapeSelectionTransformerArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShapeSelectionTransformerArchive) ProtoMessage() {}

func (x *ShapeSelectionTransformerArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDCommandArchives_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShapeSelectionTransformerArchive.ProtoReflect.Descriptor instead.
func (*ShapeSelectionTransformerArchive) Descriptor() ([]byte, []int) {
	return file_TSDCommandArchives_proto_rawDescGZIP(), []int{52}
}

func (x *ShapeSelectionTransformerArchive) GetSuper() *DrawableSelectionTransformerArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

type GroupSelectionTransformerArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *DrawableSelectionTransformerArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
}

func (x *GroupSelectionTransformerArchive) Reset() {
	*x = GroupSelectionTransformerArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDCommandArchives_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupSelectionTransformerArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupSelectionTransformerArchive) ProtoMessage() {}

func (x *GroupSelectionTransformerArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDCommandArchives_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupSelectionTransformerArchive.ProtoReflect.Descriptor instead.
func (*GroupSelectionTransformerArchive) Descriptor() ([]byte, []int) {
	return file_TSDCommandArchives_proto_rawDescGZIP(), []int{53}
}

func (x *GroupSelectionTransformerArchive) GetSuper() *DrawableSelectionTransformerArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

type PencilAnnotationSelectionTransformerArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PencilAnnotationUuid *UUID `protobuf:"bytes,1,req,name=pencil_annotation_uuid,json=pencilAnnotationUuid" json:"pencil_annotation_uuid,omitempty"`
}

func (x *PencilAnnotationSelectionTransformerArchive) Reset() {
	*x = PencilAnnotationSelectionTransformerArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDCommandArchives_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PencilAnnotationSelectionTransformerArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PencilAnnotationSelectionTransformerArchive) ProtoMessage() {}

func (x *PencilAnnotationSelectionTransformerArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDCommandArchives_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PencilAnnotationSelectionTransformerArchive.ProtoReflect.Descriptor instead.
func (*PencilAnnotationSelectionTransformerArchive) Descriptor() ([]byte, []int) {
	return file_TSDCommandArchives_proto_rawDescGZIP(), []int{54}
}

func (x *PencilAnnotationSelectionTransformerArchive) GetPencilAnnotationUuid() *UUID {
	if x != nil {
		return x.PencilAnnotationUuid
	}
	return nil
}

type FreehandDrawingOpacityCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super      *InfoCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Opacity    *float64            `protobuf:"fixed64,2,opt,name=opacity" json:"opacity,omitempty"`
	OldOpacity *float64            `protobuf:"fixed64,3,opt,name=old_opacity,json=oldOpacity" json:"old_opacity,omitempty"`
}

func (x *FreehandDrawingOpacityCommandArchive) Reset() {
	*x = FreehandDrawingOpacityCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDCommandArchives_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FreehandDrawingOpacityCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FreehandDrawingOpacityCommandArchive) ProtoMessage() {}

func (x *FreehandDrawingOpacityCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDCommandArchives_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FreehandDrawingOpacityCommandArchive.ProtoReflect.Descriptor instead.
func (*FreehandDrawingOpacityCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSDCommandArchives_proto_rawDescGZIP(), []int{55}
}

func (x *FreehandDrawingOpacityCommandArchive) GetSuper() *InfoCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *FreehandDrawingOpacityCommandArchive) GetOpacity() float64 {
	if x != nil && x.Opacity != nil {
		return *x.Opacity
	}
	return 0
}

func (x *FreehandDrawingOpacityCommandArchive) GetOldOpacity() float64 {
	if x != nil && x.OldOpacity != nil {
		return *x.OldOpacity
	}
	return 0
}

type FreehandDrawingAnimationCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super        *InfoCommandArchive              `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Animation    *FreehandDrawingAnimationArchive `protobuf:"bytes,2,opt,name=animation" json:"animation,omitempty"`
	OldAnimation *FreehandDrawingAnimationArchive `protobuf:"bytes,3,opt,name=old_animation,json=oldAnimation" json:"old_animation,omitempty"`
}

func (x *FreehandDrawingAnimationCommandArchive) Reset() {
	*x = FreehandDrawingAnimationCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDCommandArchives_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FreehandDrawingAnimationCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FreehandDrawingAnimationCommandArchive) ProtoMessage() {}

func (x *FreehandDrawingAnimationCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDCommandArchives_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FreehandDrawingAnimationCommandArchive.ProtoReflect.Descriptor instead.
func (*FreehandDrawingAnimationCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSDCommandArchives_proto_rawDescGZIP(), []int{56}
}

func (x *FreehandDrawingAnimationCommandArchive) GetSuper() *InfoCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *FreehandDrawingAnimationCommandArchive) GetAnimation() *FreehandDrawingAnimationArchive {
	if x != nil {
		return x.Animation
	}
	return nil
}

func (x *FreehandDrawingAnimationCommandArchive) GetOldAnimation() *FreehandDrawingAnimationArchive {
	if x != nil {
		return x.OldAnimation
	}
	return nil
}

type InsertCaptionOrTitleCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                   *CommandArchive     `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	DrawableInfoIdPath      *UUIDPath           `protobuf:"bytes,2,opt,name=drawable_info_id_path,json=drawableInfoIdPath" json:"drawable_info_id_path,omitempty"`
	CaptionOrTitleInfo      *Reference          `protobuf:"bytes,3,opt,name=caption_or_title_info,json=captionOrTitleInfo" json:"caption_or_title_info,omitempty"`
	AddedCaptionOrTitleUuid *UUID               `protobuf:"bytes,4,opt,name=added_caption_or_title_uuid,json=addedCaptionOrTitleUuid" json:"added_caption_or_title_uuid,omitempty"`
	CaptionOrTitleKind      *CaptionOrTitleKind `protobuf:"varint,5,opt,name=caption_or_title_kind,json=captionOrTitleKind,enum=TSD.CaptionOrTitleKind" json:"caption_or_title_kind,omitempty"`
	UndoObject              *Reference          `protobuf:"bytes,6,opt,name=undo_object,json=undoObject" json:"undo_object,omitempty"`
}

func (x *InsertCaptionOrTitleCommandArchive) Reset() {
	*x = InsertCaptionOrTitleCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDCommandArchives_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertCaptionOrTitleCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertCaptionOrTitleCommandArchive) ProtoMessage() {}

func (x *InsertCaptionOrTitleCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDCommandArchives_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertCaptionOrTitleCommandArchive.ProtoReflect.Descriptor instead.
func (*InsertCaptionOrTitleCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSDCommandArchives_proto_rawDescGZIP(), []int{57}
}

func (x *InsertCaptionOrTitleCommandArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *InsertCaptionOrTitleCommandArchive) GetDrawableInfoIdPath() *UUIDPath {
	if x != nil {
		return x.DrawableInfoIdPath
	}
	return nil
}

func (x *InsertCaptionOrTitleCommandArchive) GetCaptionOrTitleInfo() *Reference {
	if x != nil {
		return x.CaptionOrTitleInfo
	}
	return nil
}

func (x *InsertCaptionOrTitleCommandArchive) GetAddedCaptionOrTitleUuid() *UUID {
	if x != nil {
		return x.AddedCaptionOrTitleUuid
	}
	return nil
}

func (x *InsertCaptionOrTitleCommandArchive) GetCaptionOrTitleKind() CaptionOrTitleKind {
	if x != nil && x.CaptionOrTitleKind != nil {
		return *x.CaptionOrTitleKind
	}
	return CaptionOrTitleKind_Caption
}

func (x *InsertCaptionOrTitleCommandArchive) GetUndoObject() *Reference {
	if x != nil {
		return x.UndoObject
	}
	return nil
}

type RemoveCaptionOrTitleCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                     *CommandArchive     `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	DrawableInfoIdPath        *UUIDPath           `protobuf:"bytes,2,opt,name=drawable_info_id_path,json=drawableInfoIdPath" json:"drawable_info_id_path,omitempty"`
	RemovedCaptionOrTitleInfo *Reference          `protobuf:"bytes,3,opt,name=removed_caption_or_title_info,json=removedCaptionOrTitleInfo" json:"removed_caption_or_title_info,omitempty"`
	RemovedCaptionOrTitleUuid *UUID               `protobuf:"bytes,4,opt,name=removed_caption_or_title_uuid,json=removedCaptionOrTitleUuid" json:"removed_caption_or_title_uuid,omitempty"`
	CaptionOrTitleKind        *CaptionOrTitleKind `protobuf:"varint,5,opt,name=caption_or_title_kind,json=captionOrTitleKind,enum=TSD.CaptionOrTitleKind" json:"caption_or_title_kind,omitempty"`
}

func (x *RemoveCaptionOrTitleCommandArchive) Reset() {
	*x = RemoveCaptionOrTitleCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDCommandArchives_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveCaptionOrTitleCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveCaptionOrTitleCommandArchive) ProtoMessage() {}

func (x *RemoveCaptionOrTitleCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDCommandArchives_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveCaptionOrTitleCommandArchive.ProtoReflect.Descriptor instead.
func (*RemoveCaptionOrTitleCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSDCommandArchives_proto_rawDescGZIP(), []int{58}
}

func (x *RemoveCaptionOrTitleCommandArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *RemoveCaptionOrTitleCommandArchive) GetDrawableInfoIdPath() *UUIDPath {
	if x != nil {
		return x.DrawableInfoIdPath
	}
	return nil
}

func (x *RemoveCaptionOrTitleCommandArchive) GetRemovedCaptionOrTitleInfo() *Reference {
	if x != nil {
		return x.RemovedCaptionOrTitleInfo
	}
	return nil
}

func (x *RemoveCaptionOrTitleCommandArchive) GetRemovedCaptionOrTitleUuid() *UUID {
	if x != nil {
		return x.RemovedCaptionOrTitleUuid
	}
	return nil
}

func (x *RemoveCaptionOrTitleCommandArchive) GetCaptionOrTitleKind() CaptionOrTitleKind {
	if x != nil && x.CaptionOrTitleKind != nil {
		return *x.CaptionOrTitleKind
	}
	return CaptionOrTitleKind_Caption
}

type SetCaptionOrTitleVisibilityCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super              *InfoCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	CaptionOrTitleKind *CaptionOrTitleKind `protobuf:"varint,2,opt,name=caption_or_title_kind,json=captionOrTitleKind,enum=TSD.CaptionOrTitleKind" json:"caption_or_title_kind,omitempty"`
	Hidden             *bool               `protobuf:"varint,3,opt,name=hidden" json:"hidden,omitempty"`
	WasHidden          *bool               `protobuf:"varint,4,opt,name=was_hidden,json=wasHidden" json:"was_hidden,omitempty"`
}

func (x *SetCaptionOrTitleVisibilityCommandArchive) Reset() {
	*x = SetCaptionOrTitleVisibilityCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDCommandArchives_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetCaptionOrTitleVisibilityCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCaptionOrTitleVisibilityCommandArchive) ProtoMessage() {}

func (x *SetCaptionOrTitleVisibilityCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDCommandArchives_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCaptionOrTitleVisibilityCommandArchive.ProtoReflect.Descriptor instead.
func (*SetCaptionOrTitleVisibilityCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSDCommandArchives_proto_rawDescGZIP(), []int{59}
}

func (x *SetCaptionOrTitleVisibilityCommandArchive) GetSuper() *InfoCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *SetCaptionOrTitleVisibilityCommandArchive) GetCaptionOrTitleKind() CaptionOrTitleKind {
	if x != nil && x.CaptionOrTitleKind != nil {
		return *x.CaptionOrTitleKind
	}
	return CaptionOrTitleKind_Caption
}

func (x *SetCaptionOrTitleVisibilityCommandArchive) GetHidden() bool {
	if x != nil && x.Hidden != nil {
		return *x.Hidden
	}
	return false
}

func (x *SetCaptionOrTitleVisibilityCommandArchive) GetWasHidden() bool {
	if x != nil && x.WasHidden != nil {
		return *x.WasHidden
	}
	return false
}

type MovieSetValueCommandArchive_PropertyValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Starttime         *float64                                `protobuf:"fixed64,1,opt,name=starttime" json:"starttime,omitempty"`
	Endtime           *float64                                `protobuf:"fixed64,2,opt,name=endtime" json:"endtime,omitempty"`
	Postertime        *float64                                `protobuf:"fixed64,3,opt,name=postertime" json:"postertime,omitempty"`
	Posterimagedata   *DataReference                          `protobuf:"bytes,4,opt,name=posterimagedata" json:"posterimagedata,omitempty"`
	Autoplay          *bool                                   `protobuf:"varint,5,opt,name=autoplay" json:"autoplay,omitempty"`
	LoopOption        *MovieSetValueCommandArchive_LoopOption `protobuf:"varint,6,opt,name=loopOption,enum=TSD.MovieSetValueCommandArchive_LoopOption" json:"loopOption,omitempty"`
	Volume            *float32                                `protobuf:"fixed32,7,opt,name=volume" json:"volume,omitempty"`
	Media             *DataReference                          `protobuf:"bytes,8,opt,name=media" json:"media,omitempty"`
	PlaysAcrossSlides *bool                                   `protobuf:"varint,9,opt,name=playsAcrossSlides" json:"playsAcrossSlides,omitempty"`
}

func (x *MovieSetValueCommandArchive_PropertyValue) Reset() {
	*x = MovieSetValueCommandArchive_PropertyValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDCommandArchives_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MovieSetValueCommandArchive_PropertyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovieSetValueCommandArchive_PropertyValue) ProtoMessage() {}

func (x *MovieSetValueCommandArchive_PropertyValue) ProtoReflect() protoreflect.Message {
	mi := &file_TSDCommandArchives_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovieSetValueCommandArchive_PropertyValue.ProtoReflect.Descriptor instead.
func (*MovieSetValueCommandArchive_PropertyValue) Descriptor() ([]byte, []int) {
	return file_TSDCommandArchives_proto_rawDescGZIP(), []int{22, 0}
}

func (x *MovieSetValueCommandArchive_PropertyValue) GetStarttime() float64 {
	if x != nil && x.Starttime != nil {
		return *x.Starttime
	}
	return 0
}

func (x *MovieSetValueCommandArchive_PropertyValue) GetEndtime() float64 {
	if x != nil && x.Endtime != nil {
		return *x.Endtime
	}
	return 0
}

func (x *MovieSetValueCommandArchive_PropertyValue) GetPostertime() float64 {
	if x != nil && x.Postertime != nil {
		return *x.Postertime
	}
	return 0
}

func (x *MovieSetValueCommandArchive_PropertyValue) GetPosterimagedata() *DataReference {
	if x != nil {
		return x.Posterimagedata
	}
	return nil
}

func (x *MovieSetValueCommandArchive_PropertyValue) GetAutoplay() bool {
	if x != nil && x.Autoplay != nil {
		return *x.Autoplay
	}
	return false
}

func (x *MovieSetValueCommandArchive_PropertyValue) GetLoopOption() MovieSetValueCommandArchive_LoopOption {
	if x != nil && x.LoopOption != nil {
		return *x.LoopOption
	}
	return MovieSetValueCommandArchive_None
}

func (x *MovieSetValueCommandArchive_PropertyValue) GetVolume() float32 {
	if x != nil && x.Volume != nil {
		return *x.Volume
	}
	return 0
}

func (x *MovieSetValueCommandArchive_PropertyValue) GetMedia() *DataReference {
	if x != nil {
		return x.Media
	}
	return nil
}

func (x *MovieSetValueCommandArchive_PropertyValue) GetPlaysAcrossSlides() bool {
	if x != nil && x.PlaysAcrossSlides != nil {
		return *x.PlaysAcrossSlides
	}
	return false
}

var File_TSDCommandArchives_proto protoreflect.FileDescriptor

var file_TSDCommandArchives_proto_rawDesc = []byte{
	0x0a, 0x18, 0x54, 0x53, 0x44, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x54, 0x53, 0x44, 0x1a,
	0x11, 0x54, 0x53, 0x50, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x11, 0x54, 0x53, 0x4b, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x54, 0x53, 0x53, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x54, 0x53, 0x44, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x54, 0x53, 0x44,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x5f, 0x73, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x9c, 0x01, 0x0a, 0x14, 0x54, 0x53, 0x44, 0x55, 0x6e, 0x64, 0x6f, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a, 0x0a, 0x73,
	0x74, 0x79, 0x6c, 0x65, 0x73, 0x68, 0x65, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x0a, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x68, 0x65, 0x65, 0x74, 0x12, 0x28, 0x0a, 0x07, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x22, 0x9d, 0x01, 0x0a, 0x1c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x72, 0x61, 0x77, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x2c, 0x0a,
	0x09, 0x64, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x09, 0x64, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x05, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x22, 0x9b, 0x01, 0x0a, 0x1a, 0x55, 0x6e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x09, 0x64,
	0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09,
	0x64, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x05, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22,
	0xf2, 0x01, 0x0a, 0x25, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0f,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x37, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49,
	0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x67, 0x73, 0x52, 0x08,
	0x61, 0x72, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x72, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x72, 0x65, 0x6e, 0x22, 0x6a, 0x0a, 0x26, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x40,
	0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x54, 0x53, 0x44, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x22, 0xd9, 0x02, 0x0a, 0x25, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x50, 0x61, 0x74, 0x68, 0x52,
	0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x2a, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x34, 0x0a, 0x09,
	0x61, 0x72, 0x67, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x41, 0x64, 0x64, 0x49, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x67, 0x73, 0x52, 0x08, 0x61, 0x72, 0x67, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x37, 0x0a, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x2f, 0x0a, 0x0b, 0x75,
	0x6e, 0x64, 0x6f, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x0a, 0x75, 0x6e, 0x64, 0x6f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x98, 0x01, 0x0a,
	0x26, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x44, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x40, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x43, 0x68, 0x69, 0x6c,
	0x64, 0x72, 0x65, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x09, 0x64, 0x72, 0x61,
	0x77, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x64, 0x72,
	0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0xca, 0x01, 0x0a, 0x26, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x68, 0x69, 0x6c,
	0x64, 0x72, 0x65, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x39, 0x0a,
	0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55,
	0x55, 0x49, 0x44, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x49, 0x64, 0x50, 0x61, 0x74, 0x68, 0x12, 0x3a, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x73,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x54, 0x53,
	0x4b, 0x2e, 0x52, 0x65, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x67, 0x73, 0x52, 0x08, 0x61, 0x72, 0x67, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0xc0, 0x02, 0x0a, 0x25, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x6e,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29,
	0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x0d, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x35,
	0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x59, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x54, 0x53,
	0x44, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x6e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x25, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x09, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x10, 0x01, 0x22, 0x70, 0x0a, 0x12, 0x49, 0x6e, 0x66, 0x6f, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a,
	0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54,
	0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x0c, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0a, 0x69,
	0x6e, 0x66, 0x6f, 0x49, 0x64, 0x50, 0x61, 0x74, 0x68, 0x22, 0xb6, 0x02, 0x0a, 0x23, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x12, 0x2d, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x12, 0x35, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0d, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x13, 0x6f, 0x6c,
	0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55,
	0x49, 0x44, 0x52, 0x10, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x54, 0x6f, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x15, 0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x12,
	0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d,
	0x49, 0x64, 0x22, 0xb7, 0x03, 0x0a, 0x1a, 0x49, 0x6e, 0x66, 0x6f, 0x47, 0x65, 0x6f, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x12, 0x2d, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x12, 0x36, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x47, 0x65, 0x6f, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0b, 0x6e, 0x65, 0x77,
	0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x36, 0x0a, 0x0b, 0x6f, 0x6c, 0x64, 0x47,
	0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x54, 0x53, 0x44, 0x2e, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x0b, 0x6f, 0x6c, 0x64, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x12, 0x46, 0x0a, 0x1e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x4c, 0x0a, 0x21, 0x6f, 0x6c, 0x64, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x21, 0x6f, 0x6c, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x47, 0x65,
	0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x3c, 0x0a, 0x19, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x74, 0x75, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x73, 0x68, 0x6f, 0x75, 0x6c,
	0x64, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x74, 0x75, 0x41, 0x6e, 0x69, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65,
	0x64, 0x4f, 0x6e, 0x57, 0x65, 0x62, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x57, 0x65, 0x62, 0x22, 0xd1, 0x01, 0x0a,
	0x20, 0x44, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x12, 0x2d, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x12, 0x3e, 0x0a, 0x0f, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x54, 0x53, 0x44, 0x2e,
	0x50, 0x61, 0x74, 0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x0d, 0x6f, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x3e, 0x0a, 0x0f, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x54, 0x53, 0x44, 0x2e,
	0x50, 0x61, 0x74, 0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x0d, 0x6e, 0x65, 0x77, 0x50, 0x61, 0x74, 0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x22, 0x95, 0x01, 0x0a, 0x1a, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x41, 0x6c, 0x70, 0x68,
	0x61, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12,
	0x2d, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x54, 0x53, 0x44, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x23,
	0x0a, 0x07, 0x6f, 0x6c, 0x64, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x07, 0x6f, 0x6c, 0x64, 0x70,
	0x61, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x07, 0x6e, 0x65, 0x77, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x52,
	0x07, 0x6e, 0x65, 0x77, 0x70, 0x61, 0x74, 0x68, 0x22, 0xa6, 0x01, 0x0a, 0x20, 0x44, 0x72, 0x61,
	0x77, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x38, 0x0a,
	0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x54,
	0x53, 0x53, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x43, 0x68, 0x69,
	0x6c, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x05, 0x73,
	0x74, 0x79, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x22, 0x4c, 0x0a, 0x1b, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x12, 0x2d, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x22,
	0xbe, 0x01, 0x0a, 0x20, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65,
	0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x12, 0x36, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x09,
	0x6e, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x08, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x0e, 0x72, 0x6f, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x0d, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x22, 0xc1, 0x01, 0x0a, 0x1d, 0x42, 0x61, 0x73, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x12, 0x36, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x0c, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x0b, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x35, 0x0a,
	0x0e, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x22, 0x5a, 0x0a, 0x1e, 0x53, 0x68, 0x61, 0x70, 0x65, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x22, 0x5a, 0x0a, 0x1e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x22, 0xa6, 0x01, 0x0a,
	0x20, 0x53, 0x68, 0x61, 0x70, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x12, 0x3a, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x46, 0x0a,
	0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x54, 0x53, 0x44, 0x53, 0x4f, 0x53, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x53, 0x68, 0x61, 0x70, 0x65,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x53, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x06, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xb0, 0x01, 0x0a, 0x1f, 0x42, 0x61, 0x73, 0x65, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x36, 0x0a, 0x05, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x41,
	0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x12, 0x2b, 0x0a, 0x09, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x6f, 0x6c, 0x64, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x69, 0x73, 0x5f, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x42, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xcf, 0x06, 0x0a, 0x1b, 0x4d, 0x6f, 0x76,
	0x69, 0x65, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x49, 0x6e,
	0x66, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4a, 0x0a, 0x08, 0x6f, 0x6c, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x54, 0x53,
	0x44, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6f, 0x6c, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4a, 0x0a, 0x16, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x61, 0x75, 0x78, 0x69, 0x6c, 0x69, 0x61, 0x72, 0x79, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x16, 0x69, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x61, 0x75, 0x78, 0x69, 0x6c, 0x69, 0x61, 0x72, 0x79, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x12, 0x50, 0x0a, 0x19, 0x6f, 0x6c, 0x64, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x61, 0x75, 0x78, 0x69, 0x6c, 0x69, 0x61, 0x72, 0x79, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x19, 0x6f, 0x6c, 0x64, 0x69, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x61, 0x75, 0x78, 0x69, 0x6c, 0x69, 0x61, 0x72, 0x79, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x1a, 0xfe, 0x02, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a,
	0x0f, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x70, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x75, 0x74, 0x6f, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61,
	0x75, 0x74, 0x6f, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x4b, 0x0a, 0x0a, 0x6c, 0x6f, 0x6f, 0x70, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x54, 0x53,
	0x44, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x4c, 0x6f,
	0x6f, 0x70, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6c, 0x6f, 0x6f, 0x70, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x05,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x73, 0x41,
	0x63, 0x72, 0x6f, 0x73, 0x73, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x73, 0x41, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x53, 0x6c,
	0x69, 0x64, 0x65, 0x73, 0x22, 0x34, 0x0a, 0x0a, 0x4c, 0x6f, 0x6f, 0x70, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x61, 0x63, 0x6b,
	0x41, 0x6e, 0x64, 0x46, 0x6f, 0x72, 0x74, 0x68, 0x10, 0x02, 0x22, 0xa2, 0x01, 0x0a, 0x20, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12,
	0x3a, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x54, 0x53, 0x44, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x53, 0x65,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x06, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x54, 0x53,
	0x44, 0x53, 0x4f, 0x53, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x74,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22,
	0xa0, 0x0b, 0x0a, 0x18, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2d, 0x0a, 0x05,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x54, 0x53,
	0x44, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x0c, 0x6e,
	0x65, 0x77, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x0c, 0x6f, 0x6c, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x6f,
	0x6c, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x46, 0x0a, 0x14, 0x6f,
	0x6c, 0x64, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x14, 0x6f,
	0x6c, 0x64, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x0e, 0x6f, 0x6c, 0x64, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x61,
	0x6c, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x0e, 0x6f, 0x6c, 0x64, 0x4e, 0x61, 0x74, 0x75, 0x72,
	0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x46, 0x0a, 0x14, 0x6e, 0x65, 0x77, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x14, 0x6e, 0x65, 0x77, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4e,
	0x0a, 0x13, 0x6f, 0x6c, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x54, 0x53,
	0x44, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x13, 0x6f, 0x6c, 0x64, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x46,
	0x0a, 0x14, 0x6f, 0x6c, 0x64, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x14, 0x6f, 0x6c, 0x64, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x46, 0x0a, 0x14, 0x6f, 0x6c, 0x64, 0x45, 0x6e, 0x68,
	0x61, 0x6e, 0x63, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x14, 0x6f, 0x6c, 0x64, 0x45, 0x6e, 0x68,
	0x61, 0x6e, 0x63, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x48,
	0x0a, 0x10, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x10, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x64, 0x6a,
	0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x11, 0x61, 0x64, 0x6a, 0x75,
	0x73, 0x74, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x11, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65,
	0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x11, 0x65, 0x6e,
	0x68, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x11, 0x65, 0x6e, 0x68, 0x61, 0x6e,
	0x63, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x48, 0x0a, 0x15,
	0x6e, 0x65, 0x77, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x15, 0x6e, 0x65, 0x77, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x48, 0x0a, 0x15, 0x6f, 0x6c, 0x64, 0x54, 0x68, 0x75,
	0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x15, 0x6f, 0x6c, 0x64, 0x54, 0x68,
	0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x52, 0x0a, 0x1a, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x6a,
	0x75, 0x73, 0x74, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x1a, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e,
	0x61, 0x69, 0x6c, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x58, 0x0a, 0x1d, 0x6f, 0x6c, 0x64, 0x54, 0x68, 0x75, 0x6d, 0x62,
	0x6e, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x1d, 0x6f, 0x6c, 0x64, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x6a,
	0x75, 0x73, 0x74, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x43,
	0x0a, 0x15, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x65, 0x77, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x14, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x65, 0x77, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x15, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x6f, 0x6c, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x14, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4f, 0x6c, 0x64, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x53, 0x0a, 0x1d, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x6c, 0x64, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x1c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4f, 0x6c, 0x64, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x53, 0x0a,
	0x1d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x65, 0x77, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x1c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x65,
	0x77, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x22, 0xde, 0x01, 0x0a, 0x1f, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x49, 0x6e, 0x66, 0x6f,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x0f, 0x6e, 0x65, 0x77, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x0f, 0x6e, 0x65, 0x77, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x33, 0x0a, 0x0f, 0x6f, 0x6c,
	0x64, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x0f,
	0x6f, 0x6c, 0x64, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0xc2, 0x01, 0x0a, 0x1f, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x6e, 0x66,
	0x6f, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x49, 0x6e, 0x66,
	0x6f, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x33,
	0x0a, 0x0f, 0x6e, 0x65, 0x77, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x53, 0x69,
	0x7a, 0x65, 0x52, 0x0f, 0x6e, 0x65, 0x77, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x33, 0x0a, 0x0f, 0x6f, 0x6c, 0x64, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x0f, 0x6f, 0x6c, 0x64, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xb9, 0x01, 0x0a, 0x1e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x54, 0x53, 0x44,
	0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x10, 0x6e, 0x65,
	0x77, 0x5f, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x53, 0x69, 0x7a, 0x65, 0x52,
	0x0e, 0x6e, 0x65, 0x77, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x33, 0x0a, 0x10, 0x6f, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x53, 0x69, 0x7a, 0x65, 0x52, 0x0e, 0x6f, 0x6c, 0x64, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c,
	0x53, 0x69, 0x7a, 0x65, 0x22, 0xac, 0x01, 0x0a, 0x17, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x61,
	0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x12, 0x2d, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12,
	0x30, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x4d, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x4d, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x30, 0x0a, 0x0b, 0x6f, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x6f, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0xd3, 0x05, 0x0a, 0x1e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x64, 0x6a,
	0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x49, 0x6e, 0x66, 0x6f,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x15, 0x6f, 0x6c, 0x64, 0x5f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x13, 0x6f, 0x6c, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x64, 0x6a, 0x75,
	0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x50, 0x0a, 0x15, 0x6e, 0x65, 0x77, 0x5f, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x13, 0x6e, 0x65, 0x77, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x64,
	0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x11, 0x61, 0x64, 0x6a,
	0x75, 0x73, 0x74, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x11, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74,
	0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x50, 0x0a, 0x19, 0x72,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x19, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x41, 0x64, 0x6a, 0x75,
	0x73, 0x74, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a,
	0x11, 0x65, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x11, 0x65, 0x6e,
	0x68, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x50, 0x0a, 0x19, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x45, 0x6e, 0x68, 0x61, 0x6e,
	0x63, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x19, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64,
	0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x52, 0x0a, 0x1a, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x41, 0x64,
	0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x1a, 0x74, 0x68, 0x75, 0x6d, 0x62,
	0x6e, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x62, 0x0a, 0x22, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x64, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74,
	0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x22, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x54,
	0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0xa6, 0x02, 0x0a, 0x18, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x49, 0x6e, 0x66, 0x6f,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x77, 0x61, 0x73, 0x5f, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x77, 0x61, 0x73, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x16, 0x6f, 0x6c,
	0x64, 0x5f, 0x77, 0x61, 0x73, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x72, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x6f, 0x6c, 0x64, 0x57,
	0x61, 0x73, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x12,
	0x2c, 0x0a, 0x12, 0x6f, 0x6c, 0x64, 0x5f, 0x69, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x6f, 0x6c, 0x64,
	0x49, 0x73, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0xd1, 0x03, 0x0a, 0x1c, 0x44, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x12, 0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x5f,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x54, 0x53, 0x44, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x11, 0x6f, 0x62, 0x73, 0x6f, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x11, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x66, 0x6f, 0x72, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x11, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x66, 0x6f, 0x72, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x4f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b,
	0x2e, 0x54, 0x53, 0x44, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x44, 0x72, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x44, 0x72, 0x61, 0x67, 0x12, 0x3c, 0x0a, 0x11, 0x61,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x11, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4b, 0x0a, 0x19, 0x44, 0x72, 0x61,
	0x77, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x6e, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x10, 0x03, 0x22, 0xd2, 0x02, 0x0a, 0x1e, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x69, 0x6f, 0x72, 0x54, 0x65, 0x78, 0x74, 0x57, 0x72, 0x61, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x49,
	0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x16, 0x6f, 0x6c, 0x64, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x77, 0x72,
	0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x54, 0x65, 0x78, 0x74, 0x57, 0x72, 0x61, 0x70, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x13, 0x6f, 0x6c, 0x64, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x69, 0x6f, 0x72, 0x54, 0x65, 0x78, 0x74, 0x57, 0x72, 0x61, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a,
	0x08, 0x66, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f,
	0x68, 0x74, 0x6d, 0x6c, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x69, 0x73, 0x48, 0x74, 0x6d, 0x6c, 0x57, 0x72, 0x61, 0x70, 0x22, 0xa6, 0x01, 0x0a, 0x1f,
	0x44, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x6e,
	0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12,
	0x2d, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x54, 0x53, 0x44, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x29,
	0x0a, 0x10, 0x6f, 0x6c, 0x64, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x6c, 0x64, 0x68, 0x79, 0x70,
	0x65, 0x72, 0x6c, 0x69, 0x6e, 0x6b, 0x55, 0x72, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x6e, 0x65, 0x77,
	0x68, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e, 0x65, 0x77, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x6e,
	0x6b, 0x55, 0x72, 0x6c, 0x22, 0xa0, 0x03, 0x0a, 0x32, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x54, 0x53, 0x4b,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x52, 0x0a, 0x1d, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x1b,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x62,
	0x65, 0x67, 0x69, 0x6e, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x6e, 0x5f,
	0x75, 0x6e, 0x64, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x62, 0x65, 0x67, 0x69,
	0x6e, 0x45, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x6e, 0x55, 0x6e, 0x64, 0x6f, 0x12, 0x31,
	0x0a, 0x15, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x64, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x62,
	0x65, 0x67, 0x69, 0x6e, 0x45, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x6e, 0x52, 0x65, 0x64,
	0x6f, 0x12, 0x39, 0x0a, 0x19, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x64, 0x6f, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x55, 0x6e, 0x64, 0x6f, 0x12, 0x39, 0x0a, 0x19,
	0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x64, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x16, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x4f, 0x6e, 0x52, 0x65, 0x64, 0x6f, 0x22, 0xf1, 0x0d, 0x0a, 0x1a, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x49, 0x6e, 0x66, 0x6f,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x5f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x49, 0x0a, 0x17, 0x6e, 0x65, 0x77, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x14, 0x6e, 0x65, 0x77, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x0e, 0x6f, 0x6c,
	0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x6f, 0x6c, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x49, 0x0a, 0x17, 0x6f, 0x6c, 0x64, 0x5f, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x14, 0x6f, 0x6c, 0x64, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x37, 0x0a, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x41,
	0x6c, 0x70, 0x68, 0x61, 0x50, 0x61, 0x74, 0x68, 0x12, 0x3e, 0x0a, 0x16, 0x6f, 0x6c, 0x64, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x50,
	0x61, 0x74, 0x68, 0x52, 0x13, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x41,
	0x6c, 0x70, 0x68, 0x61, 0x50, 0x61, 0x74, 0x68, 0x12, 0x40, 0x0a, 0x17, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x49, 0x41, 0x50,
	0x61, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x53, 0x69, 0x7a, 0x65, 0x52, 0x14, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x53, 0x69, 0x7a,
	0x65, 0x46, 0x6f, 0x72, 0x49, 0x41, 0x50, 0x61, 0x74, 0x68, 0x12, 0x47, 0x0a, 0x1b, 0x6f, 0x6c,
	0x64, 0x5f, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x66,
	0x6f, 0x72, 0x5f, 0x49, 0x41, 0x50, 0x61, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x17, 0x6f, 0x6c, 0x64, 0x4e,
	0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x46, 0x6f, 0x72, 0x49, 0x41, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x48, 0x0a, 0x15, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x4f, 0x0a,
	0x19, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x16, 0x6f, 0x6c, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x46,
	0x0a, 0x14, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x67, 0x65,
	0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x54,
	0x53, 0x44, 0x2e, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x47, 0x65,
	0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x4d, 0x0a, 0x18, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x47,
	0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x15,
	0x6f, 0x6c, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x47, 0x65, 0x6f,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x49, 0x0a, 0x11, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x61,
	0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x64, 0x6a, 0x75,
	0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x10,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x42, 0x0a, 0x13, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x11, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x13, 0x65, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x64,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x11, 0x65, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x50, 0x0a, 0x15, 0x6f, 0x6c, 0x64, 0x5f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x13, 0x6f, 0x6c, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41,
	0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x49, 0x0a, 0x17, 0x6f, 0x6c,
	0x64, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x14, 0x6f, 0x6c, 0x64, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x49, 0x0a, 0x17, 0x6f, 0x6c, 0x64, 0x5f, 0x65, 0x6e, 0x68,
	0x61, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x14, 0x6f, 0x6c, 0x64, 0x45,
	0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x44, 0x0a, 0x14, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x12, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4b, 0x0a, 0x18, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x68,
	0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x15, 0x6f, 0x6c,
	0x64, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x55, 0x0a, 0x1d, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c,
	0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x1a,
	0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65,
	0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x5c, 0x0a, 0x21, 0x6f, 0x6c,
	0x64, 0x5f, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x64, 0x6a, 0x75,
	0x73, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x1d, 0x6f, 0x6c, 0x64, 0x54, 0x68,
	0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x0c, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x0b, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x33, 0x0a, 0x10, 0x6f, 0x6c, 0x64, 0x5f, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x0e, 0x6f, 0x6c, 0x64,
	0x4e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x1a,
	0x44, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x54, 0x53, 0x44, 0x2e,
	0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x61, 0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x77, 0x61, 0x73, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x22, 0xbe, 0x02, 0x0a, 0x21, 0x44, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x49, 0x6e, 0x66, 0x6f,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x0b, 0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x6f, 0x6c, 0x64, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x6e, 0x65, 0x77,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x0f, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x52, 0x0e, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x0f,
	0x69, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x74, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x74, 0x22, 0xef, 0x01, 0x0a, 0x26, 0x44, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x65,
	0x6e, 0x63, 0x69, 0x6c, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2d, 0x0a, 0x05,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x54, 0x53,
	0x44, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x18, 0x70,
	0x65, 0x6e, 0x63, 0x69, 0x6c, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x15, 0x70,
	0x65, 0x6e, 0x63, 0x69, 0x6c, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x6f, 0x41, 0x64, 0x64, 0x12, 0x4d, 0x0a, 0x1b, 0x70, 0x65, 0x6e, 0x63, 0x69, 0x6c, 0x5f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x18, 0x70, 0x65, 0x6e, 0x63, 0x69,
	0x6c, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x22, 0xc2, 0x01, 0x0a, 0x1b, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x47, 0x75, 0x69, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x3b,
	0x0a, 0x0a, 0x6f, 0x6c, 0x64, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x47, 0x75, 0x69, 0x64, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x09, 0x6f, 0x6c, 0x64, 0x47, 0x75, 0x69, 0x64, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x6e,
	0x65, 0x77, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x47, 0x75, 0x69, 0x64, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x09, 0x6e,
	0x65, 0x77, 0x47, 0x75, 0x69, 0x64, 0x65, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x13, 0x47, 0x75, 0x69,
	0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x12, 0x36, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x47, 0x75,
	0x69, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x0f, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x50, 0x61, 0x74, 0x68,
	0x52, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x50, 0x61, 0x74, 0x68, 0x22,
	0xbf, 0x01, 0x0a, 0x27, 0x44, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x54, 0x53, 0x44,
	0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x61, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x77, 0x61,
	0x73, 0x5f, 0x61, 0x73, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x5f, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x77, 0x61, 0x73,
	0x41, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x4c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x22, 0xe0, 0x01, 0x0a, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x19, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x42, 0x0a, 0x1d, 0x6f, 0x6c, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x6f, 0x6c, 0x64, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xdf, 0x01, 0x0a, 0x18, 0x50, 0x61, 0x73, 0x74, 0x65, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x12, 0x36, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x09, 0x6e, 0x65, 0x77,
	0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x6e, 0x65,
	0x77, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x0e, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0d,
	0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x27, 0x0a,
	0x10, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x66,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x74, 0x61, 0x69, 0x6c, 0x45, 0x6e, 0x64,
	0x4f, 0x6e, 0x4c, 0x65, 0x66, 0x74, 0x22, 0xfa, 0x04, 0x0a, 0x27, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x47, 0x65, 0x6f, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x12, 0x42, 0x0a, 0x12, 0x6e, 0x65, 0x77, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x67,
	0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x54, 0x53, 0x44, 0x2e, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x10, 0x6e, 0x65, 0x77, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x47, 0x65, 0x6f,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x42, 0x0a, 0x12, 0x6f, 0x6c, 0x64, 0x5f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x10, 0x6f, 0x6c, 0x64, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x40, 0x0a, 0x11, 0x6e, 0x65, 0x77,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x47, 0x65, 0x6f, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0f, 0x6e, 0x65, 0x77, 0x4d,
	0x61, 0x73, 0x6b, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x40, 0x0a, 0x11, 0x6f,
	0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x47, 0x65, 0x6f,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0f, 0x6f, 0x6c,
	0x64, 0x4d, 0x61, 0x73, 0x6b, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x47, 0x0a,
	0x14, 0x6e, 0x65, 0x77, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x54, 0x53,
	0x44, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x11, 0x6e, 0x65, 0x77, 0x4d, 0x61, 0x73, 0x6b, 0x50, 0x61, 0x74, 0x68,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x47, 0x0a, 0x14, 0x6f, 0x6c, 0x64, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x11, 0x6f, 0x6c,
	0x64, 0x4d, 0x61, 0x73, 0x6b, 0x50, 0x61, 0x74, 0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x40, 0x0a, 0x17, 0x6e, 0x65, 0x77, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x14, 0x6e, 0x65, 0x77,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x40, 0x0a, 0x17, 0x6f, 0x6c, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x14, 0x6f,
	0x6c, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x53,
	0x69, 0x7a, 0x65, 0x22, 0x65, 0x0a, 0x1f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x42, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x47, 0x65, 0x6f,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x22, 0x69, 0x0a, 0x23, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x73, 0x6b, 0x47, 0x65, 0x6f, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x12, 0x42, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x22, 0x6f, 0x0a, 0x2f, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x48, 0x65, 0x6c, 0x70, 0x65,
	0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x3c, 0x0a, 0x13, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x75, 0x75, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44,
	0x50, 0x61, 0x74, 0x68, 0x52, 0x10, 0x69, 0x6e, 0x66, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x50, 0x61,
	0x74, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xe4, 0x01, 0x0a, 0x23, 0x44, 0x72, 0x61, 0x77, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x63,
	0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x5f, 0x68, 0x65,
	0x6c, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x54, 0x53, 0x44,
	0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x65, 0x72, 0x48, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x48, 0x65, 0x6c,
	0x70, 0x65, 0x72, 0x12, 0x58, 0x0a, 0x20, 0x75, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x65, 0x64, 0x5f, 0x64, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x1e, 0x75,
	0x6e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x44, 0x72, 0x61, 0x77,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2a, 0x0a,
	0x28, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d,
	0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x24, 0x54, 0x53,
	0x44, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x12, 0x63, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65,
	0x72, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x54, 0x53, 0x44, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x48, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65,
	0x72, 0x48, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x22, 0x21, 0x0a, 0x1f, 0x50, 0x61, 0x74, 0x68, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x22, 0x62, 0x0a, 0x20, 0x53, 0x68,
	0x61, 0x70, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x3e,
	0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x54, 0x53, 0x44, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x22, 0x62,
	0x0a, 0x20, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x12, 0x3e, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x22, 0x6e, 0x0a, 0x2b, 0x50, 0x65, 0x6e, 0x63, 0x69, 0x6c, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x12, 0x3f, 0x0a, 0x16, 0x70, 0x65, 0x6e, 0x63, 0x69, 0x6c, 0x5f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x14, 0x70, 0x65,
	0x6e, 0x63, 0x69, 0x6c, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75,
	0x69, 0x64, 0x22, 0x90, 0x01, 0x0a, 0x24, 0x46, 0x72, 0x65, 0x65, 0x68, 0x61, 0x6e, 0x64, 0x44,
	0x72, 0x61, 0x77, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x54, 0x53, 0x44,
	0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x6f, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x6c, 0x64, 0x5f, 0x6f, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x6f, 0x6c, 0x64, 0x4f, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x22, 0xe6, 0x01, 0x0a, 0x26, 0x46, 0x72, 0x65, 0x65, 0x68, 0x61,
	0x6e, 0x64, 0x44, 0x72, 0x61, 0x77, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x12, 0x2d, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12,
	0x42, 0x0a, 0x09, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x46, 0x72, 0x65, 0x65, 0x68, 0x61, 0x6e,
	0x64, 0x44, 0x72, 0x61, 0x77, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x09, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x0d, 0x6f, 0x6c, 0x64, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x54, 0x53, 0x44,
	0x2e, 0x46, 0x72, 0x65, 0x65, 0x68, 0x61, 0x6e, 0x64, 0x44, 0x72, 0x61, 0x77, 0x69, 0x6e, 0x67,
	0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x0c, 0x6f, 0x6c, 0x64, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9a,
	0x03, 0x0a, 0x22, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x43, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x12, 0x40, 0x0a, 0x15, 0x64, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x5f, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x50, 0x61, 0x74, 0x68, 0x52, 0x12,
	0x64, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x64, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x41, 0x0a, 0x15, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x72,
	0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x12, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x47, 0x0a, 0x1b, 0x61, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x63,
	0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x72, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x17, 0x61, 0x64, 0x64, 0x65, 0x64, 0x43, 0x61, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x4a,
	0x0a, 0x15, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x72, 0x5f, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x54, 0x53, 0x44, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x12, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x2f, 0x0a, 0x0b, 0x75, 0x6e,
	0x64, 0x6f, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x0a, 0x75, 0x6e, 0x64, 0x6f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0xfc, 0x02, 0x0a, 0x22,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x40, 0x0a,
	0x15, 0x64, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x69,
	0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x50, 0x61, 0x74, 0x68, 0x52, 0x12, 0x64, 0x72, 0x61,
	0x77, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x64, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x50, 0x0a, 0x1d, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6f, 0x72, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x19, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x43,
	0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x4b, 0x0a, 0x1d, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x72, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55,
	0x55, 0x49, 0x44, 0x52, 0x19, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x43, 0x61, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x4a,
	0x0a, 0x15, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x72, 0x5f, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x54, 0x53, 0x44, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x12, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x22, 0xdd, 0x01, 0x0a, 0x29, 0x53,
	0x65, 0x74, 0x43, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x49, 0x6e,
	0x66, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x15, 0x63, 0x61, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6f, 0x72, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x43, 0x61, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52,
	0x12, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x4b,
	0x69, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x77,
	0x61, 0x73, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x77, 0x61, 0x73, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x2a, 0x56, 0x0a, 0x15, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x74, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x64, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x10,
	0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x10, 0x03, 0x2a, 0x2c, 0x0a, 0x12, 0x43, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x61, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x10, 0x02,
	0x42, 0x07, 0x5a, 0x05, 0x2e, 0x2f, 0x6b, 0x70, 0x62,
}

var (
	file_TSDCommandArchives_proto_rawDescOnce sync.Once
	file_TSDCommandArchives_proto_rawDescData = file_TSDCommandArchives_proto_rawDesc
)

func file_TSDCommandArchives_proto_rawDescGZIP() []byte {
	file_TSDCommandArchives_proto_rawDescOnce.Do(func() {
		file_TSDCommandArchives_proto_rawDescData = protoimpl.X.CompressGZIP(file_TSDCommandArchives_proto_rawDescData)
	})
	return file_TSDCommandArchives_proto_rawDescData
}

var file_TSDCommandArchives_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_TSDCommandArchives_proto_msgTypes = make([]protoimpl.MessageInfo, 61)
var file_TSDCommandArchives_proto_goTypes = []interface{}{
	(CommentCommandVariant)(0),                                  // 0: TSD.CommentCommandVariant
	(CaptionOrTitleKind)(0),                                     // 1: TSD.CaptionOrTitleKind
	(GroupUngroupInformativeCommandArchive_CommandType)(0),      // 2: TSD.GroupUngroupInformativeCommandArchive.CommandType
	(MovieSetValueCommandArchive_LoopOption)(0),                 // 3: TSD.MovieSetValueCommandArchive.LoopOption
	(DrawablesCommandGroupArchive_DrawablesCommandGroupType)(0), // 4: TSD.DrawablesCommandGroupArchive.DrawablesCommandGroupType
	(*TSDUndoObjectArchive)(nil),                                // 5: TSD.TSDUndoObjectArchive
	(*GroupDrawablesCommandArchive)(nil),                        // 6: TSD.GroupDrawablesCommandArchive
	(*UngroupGroupCommandArchive)(nil),                          // 7: TSD.UngroupGroupCommandArchive
	(*ContainerRemoveChildrenCommandArchive)(nil),               // 8: TSD.ContainerRemoveChildrenCommandArchive
	(*ContainerRemoveDrawablesCommandArchive)(nil),              // 9: TSD.ContainerRemoveDrawablesCommandArchive
	(*ContainerInsertChildrenCommandArchive)(nil),               // 10: TSD.ContainerInsertChildrenCommandArchive
	(*ContainerInsertDrawablesCommandArchive)(nil),              // 11: TSD.ContainerInsertDrawablesCommandArchive
	(*ContainerReorderChildrenCommandArchive)(nil),              // 12: TSD.ContainerReorderChildrenCommandArchive
	(*GroupUngroupInformativeCommandArchive)(nil),               // 13: TSD.GroupUngroupInformativeCommandArchive
	(*InfoCommandArchive)(nil),                                  // 14: TSD.InfoCommandArchive
	(*ConnectionLineConnectCommandArchive)(nil),                 // 15: TSD.ConnectionLineConnectCommandArchive
	(*InfoGeometryCommandArchive)(nil),                          // 16: TSD.InfoGeometryCommandArchive
	(*DrawablePathSourceCommandArchive)(nil),                    // 17: TSD.DrawablePathSourceCommandArchive
	(*InstantAlphaCommandArchive)(nil),                          // 18: TSD.InstantAlphaCommandArchive
	(*DrawableApplyThemeCommandArchive)(nil),                    // 19: TSD.DrawableApplyThemeCommandArchive
	(*AbstractStyleCommandArchive)(nil),                         // 20: TSD.AbstractStyleCommandArchive
	(*StyledInfoSetStyleCommandArchive)(nil),                    // 21: TSD.StyledInfoSetStyleCommandArchive
	(*BaseApplyPresetCommandArchive)(nil),                       // 22: TSD.BaseApplyPresetCommandArchive
	(*ShapeApplyPresetCommandArchive)(nil),                      // 23: TSD.ShapeApplyPresetCommandArchive
	(*MediaApplyPresetCommandArchive)(nil),                      // 24: TSD.MediaApplyPresetCommandArchive
	(*ShapeStyleSetValueCommandArchive)(nil),                    // 25: TSD.ShapeStyleSetValueCommandArchive
	(*BaseStyleSetValueCommandArchive)(nil),                     // 26: TSD.BaseStyleSetValueCommandArchive
	(*MovieSetValueCommandArchive)(nil),                         // 27: TSD.MovieSetValueCommandArchive
	(*MediaStyleSetValueCommandArchive)(nil),                    // 28: TSD.MediaStyleSetValueCommandArchive
	(*ImageMediaCommandArchive)(nil),                            // 29: TSD.ImageMediaCommandArchive
	(*MediaOriginalSizeCommandArchive)(nil),                     // 30: TSD.MediaOriginalSizeCommandArchive
	(*MediaInfoGeometryCommandArchive)(nil),                     // 31: TSD.MediaInfoGeometryCommandArchive
	(*ImageNaturalSizeCommandArchive)(nil),                      // 32: TSD.ImageNaturalSizeCommandArchive
	(*ImageMaskCommandArchive)(nil),                             // 33: TSD.ImageMaskCommandArchive
	(*ImageAdjustmentsCommandArchive)(nil),                      // 34: TSD.ImageAdjustmentsCommandArchive
	(*MediaFlagsCommandArchive)(nil),                            // 35: TSD.MediaFlagsCommandArchive
	(*DrawablesCommandGroupArchive)(nil),                        // 36: TSD.DrawablesCommandGroupArchive
	(*ExteriorTextWrapCommandArchive)(nil),                      // 37: TSD.ExteriorTextWrapCommandArchive
	(*DrawableHyperlinkCommandArchive)(nil),                     // 38: TSD.DrawableHyperlinkCommandArchive
	(*CommentInvalidatingCommandSelectionBehaviorArchive)(nil),  // 39: TSD.CommentInvalidatingCommandSelectionBehaviorArchive
	(*ImageReplaceCommandArchive)(nil),                          // 40: TSD.ImageReplaceCommandArchive
	(*DrawableLockCommandArchive)(nil),                          // 41: TSD.DrawableLockCommandArchive
	(*DrawableInfoCommentCommandArchive)(nil),                   // 42: TSD.DrawableInfoCommentCommandArchive
	(*DrawablePencilAnnotationCommandArchive)(nil),              // 43: TSD.DrawablePencilAnnotationCommandArchive
	(*AbstractGuideCommandArchive)(nil),                         // 44: TSD.AbstractGuideCommandArchive
	(*GuideCommandArchive)(nil),                                 // 45: TSD.GuideCommandArchive
	(*DrawableAspectRatioLockedCommandArchive)(nil),             // 46: TSD.DrawableAspectRatioLockedCommandArchive
	(*DrawableAccessibilityDescriptionCommandArchive)(nil),      // 47: TSD.DrawableAccessibilityDescriptionCommandArchive
	(*PasteStyleCommandArchive)(nil),                            // 48: TSD.PasteStyleCommandArchive
	(*ImageInfoAbstractGeometryCommandArchive)(nil),             // 49: TSD.ImageInfoAbstractGeometryCommandArchive
	(*ImageInfoGeometryCommandArchive)(nil),                     // 50: TSD.ImageInfoGeometryCommandArchive
	(*ImageInfoMaskGeometryCommandArchive)(nil),                 // 51: TSD.ImageInfoMaskGeometryCommandArchive
	(*InfoCollectionSelectionTransformerHelperArchive)(nil),     // 52: TSD.InfoCollectionSelectionTransformerHelperArchive
	(*DrawableSelectionTransformerArchive)(nil),                 // 53: TSD.DrawableSelectionTransformerArchive
	(*InfoHyperlinkSelectionTransformerArchive)(nil),            // 54: TSD.InfoHyperlinkSelectionTransformerArchive
	(*TSDCanvasSelectionTransformerArchive)(nil),                // 55: TSD.TSDCanvasSelectionTransformerArchive
	(*PathSelectionTransformerArchive)(nil),                     // 56: TSD.PathSelectionTransformerArchive
	(*ShapeSelectionTransformerArchive)(nil),                    // 57: TSD.ShapeSelectionTransformerArchive
	(*GroupSelectionTransformerArchive)(nil),                    // 58: TSD.GroupSelectionTransformerArchive
	(*PencilAnnotationSelectionTransformerArchive)(nil),         // 59: TSD.PencilAnnotationSelectionTransformerArchive
	(*FreehandDrawingOpacityCommandArchive)(nil),                // 60: TSD.FreehandDrawingOpacityCommandArchive
	(*FreehandDrawingAnimationCommandArchive)(nil),              // 61: TSD.FreehandDrawingAnimationCommandArchive
	(*InsertCaptionOrTitleCommandArchive)(nil),                  // 62: TSD.InsertCaptionOrTitleCommandArchive
	(*RemoveCaptionOrTitleCommandArchive)(nil),                  // 63: TSD.RemoveCaptionOrTitleCommandArchive
	(*SetCaptionOrTitleVisibilityCommandArchive)(nil),           // 64: TSD.SetCaptionOrTitleVisibilityCommandArchive
	(*MovieSetValueCommandArchive_PropertyValue)(nil),           // 65: TSD.MovieSetValueCommandArchive.PropertyValue
	(*Reference)(nil),                                           // 66: TSP.Reference
	(*CommandArchive)(nil),                                      // 67: TSK.CommandArchive
	(*UUIDPath)(nil),                                            // 68: TSP.UUIDPath
	(*RemoveIdOperationArgs)(nil),                               // 69: TSK.RemoveIdOperationArgs
	(*AddIdOperationArgs)(nil),                                  // 70: TSK.AddIdOperationArgs
	(*UUID)(nil),                                                // 71: TSP.UUID
	(*RearrangeIdOperationArgs)(nil),                            // 72: TSK.RearrangeIdOperationArgs
	(*GeometryArchive)(nil),                                     // 73: TSD.GeometryArchive
	(*PathSourceArchive)(nil),                                   // 74: TSD.PathSourceArchive
	(*Path)(nil),                                                // 75: TSP.Path
	(*ApplyThemeChildCommandArchive)(nil),                       // 76: TSS.ApplyThemeChildCommandArchive
	(*BaseShapeStylePropertyChangeSetArchive)(nil),              // 77: TSDSOS.BaseShapeStylePropertyChangeSetArchive
	(*DataReference)(nil),                                       // 78: TSP.DataReference
	(*MediaStylePropertyChangeSetArchive)(nil),                  // 79: TSDSOS.MediaStylePropertyChangeSetArchive
	(*Size)(nil),                            // 80: TSP.Size
	(*ImageAdjustmentsArchive)(nil),         // 81: TSD.ImageAdjustmentsArchive
	(*CommandGroupArchive)(nil),             // 82: TSK.CommandGroupArchive
	(*TSDCanvasSelectionArchive)(nil),       // 83: TSD.TSDCanvasSelectionArchive
	(*ExteriorTextWrapArchive)(nil),         // 84: TSD.ExteriorTextWrapArchive
	(*CommandSelectionBehaviorArchive)(nil), // 85: TSK.CommandSelectionBehaviorArchive
	(*UserDefinedGuideArchive)(nil),         // 86: TSD.UserDefinedGuideArchive
	(*FreehandDrawingAnimationArchive)(nil), // 87: TSD.FreehandDrawingAnimationArchive
}
var file_TSDCommandArchives_proto_depIdxs = []int32{
	66,  // 0: TSD.TSDUndoObjectArchive.stylesheet:type_name -> TSP.Reference
	66,  // 1: TSD.TSDUndoObjectArchive.objects:type_name -> TSP.Reference
	67,  // 2: TSD.GroupDrawablesCommandArchive.super:type_name -> TSK.CommandArchive
	66,  // 3: TSD.GroupDrawablesCommandArchive.drawables:type_name -> TSP.Reference
	66,  // 4: TSD.GroupDrawablesCommandArchive.group:type_name -> TSP.Reference
	67,  // 5: TSD.UngroupGroupCommandArchive.super:type_name -> TSK.CommandArchive
	66,  // 6: TSD.UngroupGroupCommandArchive.drawables:type_name -> TSP.Reference
	66,  // 7: TSD.UngroupGroupCommandArchive.group:type_name -> TSP.Reference
	67,  // 8: TSD.ContainerRemoveChildrenCommandArchive.super:type_name -> TSK.CommandArchive
	68,  // 9: TSD.ContainerRemoveChildrenCommandArchive.container_id_path:type_name -> TSP.UUIDPath
	69,  // 10: TSD.ContainerRemoveChildrenCommandArchive.args_list:type_name -> TSK.RemoveIdOperationArgs
	66,  // 11: TSD.ContainerRemoveChildrenCommandArchive.children:type_name -> TSP.Reference
	8,   // 12: TSD.ContainerRemoveDrawablesCommandArchive.super:type_name -> TSD.ContainerRemoveChildrenCommandArchive
	67,  // 13: TSD.ContainerInsertChildrenCommandArchive.super:type_name -> TSK.CommandArchive
	68,  // 14: TSD.ContainerInsertChildrenCommandArchive.container_id_path:type_name -> TSP.UUIDPath
	66,  // 15: TSD.ContainerInsertChildrenCommandArchive.children:type_name -> TSP.Reference
	70,  // 16: TSD.ContainerInsertChildrenCommandArchive.args_list:type_name -> TSK.AddIdOperationArgs
	71,  // 17: TSD.ContainerInsertChildrenCommandArchive.custom_format_keys:type_name -> TSP.UUID
	66,  // 18: TSD.ContainerInsertChildrenCommandArchive.undo_object:type_name -> TSP.Reference
	10,  // 19: TSD.ContainerInsertDrawablesCommandArchive.super:type_name -> TSD.ContainerInsertChildrenCommandArchive
	66,  // 20: TSD.ContainerInsertDrawablesCommandArchive.drawables:type_name -> TSP.Reference
	67,  // 21: TSD.ContainerReorderChildrenCommandArchive.super:type_name -> TSK.CommandArchive
	68,  // 22: TSD.ContainerReorderChildrenCommandArchive.container_id_path:type_name -> TSP.UUIDPath
	72,  // 23: TSD.ContainerReorderChildrenCommandArchive.args_list:type_name -> TSK.RearrangeIdOperationArgs
	67,  // 24: TSD.GroupUngroupInformativeCommandArchive.super:type_name -> TSK.CommandArchive
	66,  // 25: TSD.GroupUngroupInformativeCommandArchive.removed_infos:type_name -> TSP.Reference
	66,  // 26: TSD.GroupUngroupInformativeCommandArchive.inserted_infos:type_name -> TSP.Reference
	2,   // 27: TSD.GroupUngroupInformativeCommandArchive.command_type:type_name -> TSD.GroupUngroupInformativeCommandArchive.CommandType
	67,  // 28: TSD.InfoCommandArchive.super:type_name -> TSK.CommandArchive
	68,  // 29: TSD.InfoCommandArchive.info_id_path:type_name -> TSP.UUIDPath
	14,  // 30: TSD.ConnectionLineConnectCommandArchive.super:type_name -> TSD.InfoCommandArchive
	71,  // 31: TSD.ConnectionLineConnectCommandArchive.connected_from_id:type_name -> TSP.UUID
	71,  // 32: TSD.ConnectionLineConnectCommandArchive.connected_to_id:type_name -> TSP.UUID
	71,  // 33: TSD.ConnectionLineConnectCommandArchive.old_connected_to_id:type_name -> TSP.UUID
	71,  // 34: TSD.ConnectionLineConnectCommandArchive.old_connected_from_id:type_name -> TSP.UUID
	14,  // 35: TSD.InfoGeometryCommandArchive.super:type_name -> TSD.InfoCommandArchive
	73,  // 36: TSD.InfoGeometryCommandArchive.newGeometry:type_name -> TSD.GeometryArchive
	73,  // 37: TSD.InfoGeometryCommandArchive.oldGeometry:type_name -> TSD.GeometryArchive
	14,  // 38: TSD.DrawablePathSourceCommandArchive.super:type_name -> TSD.InfoCommandArchive
	74,  // 39: TSD.DrawablePathSourceCommandArchive.old_path_source:type_name -> TSD.PathSourceArchive
	74,  // 40: TSD.DrawablePathSourceCommandArchive.new_path_source:type_name -> TSD.PathSourceArchive
	14,  // 41: TSD.InstantAlphaCommandArchive.super:type_name -> TSD.InfoCommandArchive
	75,  // 42: TSD.InstantAlphaCommandArchive.oldpath:type_name -> TSP.Path
	75,  // 43: TSD.InstantAlphaCommandArchive.newpath:type_name -> TSP.Path
	76,  // 44: TSD.DrawableApplyThemeCommandArchive.super:type_name -> TSS.ApplyThemeChildCommandArchive
	66,  // 45: TSD.DrawableApplyThemeCommandArchive.info:type_name -> TSP.Reference
	66,  // 46: TSD.DrawableApplyThemeCommandArchive.style:type_name -> TSP.Reference
	14,  // 47: TSD.AbstractStyleCommandArchive.super:type_name -> TSD.InfoCommandArchive
	20,  // 48: TSD.StyledInfoSetStyleCommandArchive.super:type_name -> TSD.AbstractStyleCommandArchive
	66,  // 49: TSD.StyledInfoSetStyleCommandArchive.new_style:type_name -> TSP.Reference
	66,  // 50: TSD.StyledInfoSetStyleCommandArchive.rollback_style:type_name -> TSP.Reference
	20,  // 51: TSD.BaseApplyPresetCommandArchive.super:type_name -> TSD.AbstractStyleCommandArchive
	66,  // 52: TSD.BaseApplyPresetCommandArchive.preset_style:type_name -> TSP.Reference
	66,  // 53: TSD.BaseApplyPresetCommandArchive.rollback_style:type_name -> TSP.Reference
	22,  // 54: TSD.ShapeApplyPresetCommandArchive.super:type_name -> TSD.BaseApplyPresetCommandArchive
	22,  // 55: TSD.MediaApplyPresetCommandArchive.super:type_name -> TSD.BaseApplyPresetCommandArchive
	26,  // 56: TSD.ShapeStyleSetValueCommandArchive.super:type_name -> TSD.BaseStyleSetValueCommandArchive
	77,  // 57: TSD.ShapeStyleSetValueCommandArchive.change:type_name -> TSDSOS.BaseShapeStylePropertyChangeSetArchive
	20,  // 58: TSD.BaseStyleSetValueCommandArchive.super:type_name -> TSD.AbstractStyleCommandArchive
	66,  // 59: TSD.BaseStyleSetValueCommandArchive.old_style:type_name -> TSP.Reference
	14,  // 60: TSD.MovieSetValueCommandArchive.super:type_name -> TSD.InfoCommandArchive
	65,  // 61: TSD.MovieSetValueCommandArchive.value:type_name -> TSD.MovieSetValueCommandArchive.PropertyValue
	65,  // 62: TSD.MovieSetValueCommandArchive.oldValue:type_name -> TSD.MovieSetValueCommandArchive.PropertyValue
	78,  // 63: TSD.MovieSetValueCommandArchive.importedauxiliarymedia:type_name -> TSP.DataReference
	78,  // 64: TSD.MovieSetValueCommandArchive.oldimportedauxiliarymedia:type_name -> TSP.DataReference
	26,  // 65: TSD.MediaStyleSetValueCommandArchive.super:type_name -> TSD.BaseStyleSetValueCommandArchive
	79,  // 66: TSD.MediaStyleSetValueCommandArchive.change:type_name -> TSDSOS.MediaStylePropertyChangeSetArchive
	14,  // 67: TSD.ImageMediaCommandArchive.super:type_name -> TSD.InfoCommandArchive
	78,  // 68: TSD.ImageMediaCommandArchive.newImageData:type_name -> TSP.DataReference
	78,  // 69: TSD.ImageMediaCommandArchive.oldImageData:type_name -> TSP.DataReference
	78,  // 70: TSD.ImageMediaCommandArchive.oldOriginalImageData:type_name -> TSP.DataReference
	80,  // 71: TSD.ImageMediaCommandArchive.oldNaturalSize:type_name -> TSP.Size
	78,  // 72: TSD.ImageMediaCommandArchive.newOriginalImageData:type_name -> TSP.DataReference
	81,  // 73: TSD.ImageMediaCommandArchive.oldImageAdjustments:type_name -> TSD.ImageAdjustmentsArchive
	78,  // 74: TSD.ImageMediaCommandArchive.oldAdjustedImageData:type_name -> TSP.DataReference
	78,  // 75: TSD.ImageMediaCommandArchive.oldEnhancedImageData:type_name -> TSP.DataReference
	81,  // 76: TSD.ImageMediaCommandArchive.imageAdjustments:type_name -> TSD.ImageAdjustmentsArchive
	78,  // 77: TSD.ImageMediaCommandArchive.adjustedImageData:type_name -> TSP.DataReference
	78,  // 78: TSD.ImageMediaCommandArchive.enhancedImageData:type_name -> TSP.DataReference
	78,  // 79: TSD.ImageMediaCommandArchive.newThumbnailImageData:type_name -> TSP.DataReference
	78,  // 80: TSD.ImageMediaCommandArchive.oldThumbnailImageData:type_name -> TSP.DataReference
	78,  // 81: TSD.ImageMediaCommandArchive.thumbnailAdjustedImageData:type_name -> TSP.DataReference
	78,  // 82: TSD.ImageMediaCommandArchive.oldThumbnailAdjustedImageData:type_name -> TSP.DataReference
	66,  // 83: TSD.ImageMediaCommandArchive.database_newImageData:type_name -> TSP.Reference
	66,  // 84: TSD.ImageMediaCommandArchive.database_oldImageData:type_name -> TSP.Reference
	66,  // 85: TSD.ImageMediaCommandArchive.database_oldOriginalImageData:type_name -> TSP.Reference
	66,  // 86: TSD.ImageMediaCommandArchive.database_newOriginalImageData:type_name -> TSP.Reference
	14,  // 87: TSD.MediaOriginalSizeCommandArchive.super:type_name -> TSD.InfoCommandArchive
	80,  // 88: TSD.MediaOriginalSizeCommandArchive.newOriginalSize:type_name -> TSP.Size
	80,  // 89: TSD.MediaOriginalSizeCommandArchive.oldOriginalSize:type_name -> TSP.Size
	16,  // 90: TSD.MediaInfoGeometryCommandArchive.super:type_name -> TSD.InfoGeometryCommandArchive
	80,  // 91: TSD.MediaInfoGeometryCommandArchive.newOriginalSize:type_name -> TSP.Size
	80,  // 92: TSD.MediaInfoGeometryCommandArchive.oldOriginalSize:type_name -> TSP.Size
	14,  // 93: TSD.ImageNaturalSizeCommandArchive.super:type_name -> TSD.InfoCommandArchive
	80,  // 94: TSD.ImageNaturalSizeCommandArchive.new_natural_size:type_name -> TSP.Size
	80,  // 95: TSD.ImageNaturalSizeCommandArchive.old_natural_size:type_name -> TSP.Size
	14,  // 96: TSD.ImageMaskCommandArchive.super:type_name -> TSD.InfoCommandArchive
	66,  // 97: TSD.ImageMaskCommandArchive.newMaskInfo:type_name -> TSP.Reference
	66,  // 98: TSD.ImageMaskCommandArchive.oldMaskInfo:type_name -> TSP.Reference
	14,  // 99: TSD.ImageAdjustmentsCommandArchive.super:type_name -> TSD.InfoCommandArchive
	81,  // 100: TSD.ImageAdjustmentsCommandArchive.old_image_adjustments:type_name -> TSD.ImageAdjustmentsArchive
	81,  // 101: TSD.ImageAdjustmentsCommandArchive.new_image_adjustments:type_name -> TSD.ImageAdjustmentsArchive
	78,  // 102: TSD.ImageAdjustmentsCommandArchive.adjustedImageData:type_name -> TSP.DataReference
	78,  // 103: TSD.ImageAdjustmentsCommandArchive.replacedAdjustedImageData:type_name -> TSP.DataReference
	78,  // 104: TSD.ImageAdjustmentsCommandArchive.enhancedImageData:type_name -> TSP.DataReference
	78,  // 105: TSD.ImageAdjustmentsCommandArchive.replacedEnhancedImageData:type_name -> TSP.DataReference
	78,  // 106: TSD.ImageAdjustmentsCommandArchive.thumbnailAdjustedImageData:type_name -> TSP.DataReference
	78,  // 107: TSD.ImageAdjustmentsCommandArchive.replacedThumbnailAdjustedImageData:type_name -> TSP.DataReference
	14,  // 108: TSD.MediaFlagsCommandArchive.super:type_name -> TSD.InfoCommandArchive
	82,  // 109: TSD.DrawablesCommandGroupArchive.super:type_name -> TSK.CommandGroupArchive
	83,  // 110: TSD.DrawablesCommandGroupArchive.obsolete_selection:type_name -> TSD.TSDCanvasSelectionArchive
	66,  // 111: TSD.DrawablesCommandGroupArchive.modelforselection:type_name -> TSP.Reference
	4,   // 112: TSD.DrawablesCommandGroupArchive.type:type_name -> TSD.DrawablesCommandGroupArchive.DrawablesCommandGroupType
	66,  // 113: TSD.DrawablesCommandGroupArchive.archivedselection:type_name -> TSP.Reference
	14,  // 114: TSD.ExteriorTextWrapCommandArchive.super:type_name -> TSD.InfoCommandArchive
	84,  // 115: TSD.ExteriorTextWrapCommandArchive.old_exterior_text_wrap:type_name -> TSD.ExteriorTextWrapArchive
	14,  // 116: TSD.DrawableHyperlinkCommandArchive.super:type_name -> TSD.InfoCommandArchive
	85,  // 117: TSD.CommentInvalidatingCommandSelectionBehaviorArchive.super:type_name -> TSK.CommandSelectionBehaviorArchive
	66,  // 118: TSD.CommentInvalidatingCommandSelectionBehaviorArchive.annotation_displaying_command:type_name -> TSP.Reference
	14,  // 119: TSD.ImageReplaceCommandArchive.super:type_name -> TSD.InfoCommandArchive
	78,  // 120: TSD.ImageReplaceCommandArchive.new_image_data:type_name -> TSP.DataReference
	78,  // 121: TSD.ImageReplaceCommandArchive.new_original_image_data:type_name -> TSP.DataReference
	78,  // 122: TSD.ImageReplaceCommandArchive.old_image_data:type_name -> TSP.DataReference
	78,  // 123: TSD.ImageReplaceCommandArchive.old_original_image_data:type_name -> TSP.DataReference
	75,  // 124: TSD.ImageReplaceCommandArchive.instant_alpha_path:type_name -> TSP.Path
	75,  // 125: TSD.ImageReplaceCommandArchive.old_instant_alpha_path:type_name -> TSP.Path
	80,  // 126: TSD.ImageReplaceCommandArchive.natural_size_for_IAPath:type_name -> TSP.Size
	80,  // 127: TSD.ImageReplaceCommandArchive.old_natural_size_for_IAPath:type_name -> TSP.Size
	73,  // 128: TSD.ImageReplaceCommandArchive.target_image_geometry:type_name -> TSD.GeometryArchive
	73,  // 129: TSD.ImageReplaceCommandArchive.old_target_image_geometry:type_name -> TSD.GeometryArchive
	73,  // 130: TSD.ImageReplaceCommandArchive.target_mask_geometry:type_name -> TSD.GeometryArchive
	73,  // 131: TSD.ImageReplaceCommandArchive.old_target_mask_geometry:type_name -> TSD.GeometryArchive
	81,  // 132: TSD.ImageReplaceCommandArchive.image_adjustments:type_name -> TSD.ImageAdjustmentsArchive
	78,  // 133: TSD.ImageReplaceCommandArchive.adjusted_image_data:type_name -> TSP.DataReference
	78,  // 134: TSD.ImageReplaceCommandArchive.enhanced_image_data:type_name -> TSP.DataReference
	81,  // 135: TSD.ImageReplaceCommandArchive.old_image_adjustments:type_name -> TSD.ImageAdjustmentsArchive
	78,  // 136: TSD.ImageReplaceCommandArchive.old_adjusted_image_data:type_name -> TSP.DataReference
	78,  // 137: TSD.ImageReplaceCommandArchive.old_enhanced_image_data:type_name -> TSP.DataReference
	78,  // 138: TSD.ImageReplaceCommandArchive.thumbnail_image_data:type_name -> TSP.DataReference
	78,  // 139: TSD.ImageReplaceCommandArchive.old_thumbnail_image_data:type_name -> TSP.DataReference
	78,  // 140: TSD.ImageReplaceCommandArchive.thumbnail_adjusted_image_data:type_name -> TSP.DataReference
	78,  // 141: TSD.ImageReplaceCommandArchive.old_thumbnail_adjusted_image_data:type_name -> TSP.DataReference
	80,  // 142: TSD.ImageReplaceCommandArchive.natural_size:type_name -> TSP.Size
	80,  // 143: TSD.ImageReplaceCommandArchive.old_natural_size:type_name -> TSP.Size
	14,  // 144: TSD.DrawableLockCommandArchive.super:type_name -> TSD.InfoCommandArchive
	14,  // 145: TSD.DrawableInfoCommentCommandArchive.super:type_name -> TSD.InfoCommandArchive
	66,  // 146: TSD.DrawableInfoCommentCommandArchive.old_comment:type_name -> TSP.Reference
	66,  // 147: TSD.DrawableInfoCommentCommandArchive.new_comment:type_name -> TSP.Reference
	0,   // 148: TSD.DrawableInfoCommentCommandArchive.forward_variant:type_name -> TSD.CommentCommandVariant
	0,   // 149: TSD.DrawableInfoCommentCommandArchive.inverse_variant:type_name -> TSD.CommentCommandVariant
	14,  // 150: TSD.DrawablePencilAnnotationCommandArchive.super:type_name -> TSD.InfoCommandArchive
	66,  // 151: TSD.DrawablePencilAnnotationCommandArchive.pencil_annotation_to_add:type_name -> TSP.Reference
	66,  // 152: TSD.DrawablePencilAnnotationCommandArchive.pencil_annotation_to_remove:type_name -> TSP.Reference
	67,  // 153: TSD.AbstractGuideCommandArchive.super:type_name -> TSK.CommandArchive
	86,  // 154: TSD.AbstractGuideCommandArchive.old_guides:type_name -> TSD.UserDefinedGuideArchive
	86,  // 155: TSD.AbstractGuideCommandArchive.new_guides:type_name -> TSD.UserDefinedGuideArchive
	44,  // 156: TSD.GuideCommandArchive.super:type_name -> TSD.AbstractGuideCommandArchive
	68,  // 157: TSD.GuideCommandArchive.storage_id_path:type_name -> TSP.UUIDPath
	14,  // 158: TSD.DrawableAspectRatioLockedCommandArchive.super:type_name -> TSD.InfoCommandArchive
	14,  // 159: TSD.DrawableAccessibilityDescriptionCommandArchive.super:type_name -> TSD.InfoCommandArchive
	20,  // 160: TSD.PasteStyleCommandArchive.super:type_name -> TSD.AbstractStyleCommandArchive
	66,  // 161: TSD.PasteStyleCommandArchive.new_style:type_name -> TSP.Reference
	66,  // 162: TSD.PasteStyleCommandArchive.rollback_style:type_name -> TSP.Reference
	14,  // 163: TSD.ImageInfoAbstractGeometryCommandArchive.super:type_name -> TSD.InfoCommandArchive
	73,  // 164: TSD.ImageInfoAbstractGeometryCommandArchive.new_image_geometry:type_name -> TSD.GeometryArchive
	73,  // 165: TSD.ImageInfoAbstractGeometryCommandArchive.old_image_geometry:type_name -> TSD.GeometryArchive
	73,  // 166: TSD.ImageInfoAbstractGeometryCommandArchive.new_mask_geometry:type_name -> TSD.GeometryArchive
	73,  // 167: TSD.ImageInfoAbstractGeometryCommandArchive.old_mask_geometry:type_name -> TSD.GeometryArchive
	74,  // 168: TSD.ImageInfoAbstractGeometryCommandArchive.new_mask_path_source:type_name -> TSD.PathSourceArchive
	74,  // 169: TSD.ImageInfoAbstractGeometryCommandArchive.old_mask_path_source:type_name -> TSD.PathSourceArchive
	80,  // 170: TSD.ImageInfoAbstractGeometryCommandArchive.new_image_original_size:type_name -> TSP.Size
	80,  // 171: TSD.ImageInfoAbstractGeometryCommandArchive.old_image_original_size:type_name -> TSP.Size
	49,  // 172: TSD.ImageInfoGeometryCommandArchive.super:type_name -> TSD.ImageInfoAbstractGeometryCommandArchive
	49,  // 173: TSD.ImageInfoMaskGeometryCommandArchive.super:type_name -> TSD.ImageInfoAbstractGeometryCommandArchive
	68,  // 174: TSD.InfoCollectionSelectionTransformerHelperArchive.info_uuid_path_list:type_name -> TSP.UUIDPath
	52,  // 175: TSD.DrawableSelectionTransformerArchive.transformer_helper:type_name -> TSD.InfoCollectionSelectionTransformerHelperArchive
	66,  // 176: TSD.DrawableSelectionTransformerArchive.untransformed_drawable_selection:type_name -> TSP.Reference
	52,  // 177: TSD.TSDCanvasSelectionTransformerArchive.transformer_helper:type_name -> TSD.InfoCollectionSelectionTransformerHelperArchive
	53,  // 178: TSD.ShapeSelectionTransformerArchive.super:type_name -> TSD.DrawableSelectionTransformerArchive
	53,  // 179: TSD.GroupSelectionTransformerArchive.super:type_name -> TSD.DrawableSelectionTransformerArchive
	71,  // 180: TSD.PencilAnnotationSelectionTransformerArchive.pencil_annotation_uuid:type_name -> TSP.UUID
	14,  // 181: TSD.FreehandDrawingOpacityCommandArchive.super:type_name -> TSD.InfoCommandArchive
	14,  // 182: TSD.FreehandDrawingAnimationCommandArchive.super:type_name -> TSD.InfoCommandArchive
	87,  // 183: TSD.FreehandDrawingAnimationCommandArchive.animation:type_name -> TSD.FreehandDrawingAnimationArchive
	87,  // 184: TSD.FreehandDrawingAnimationCommandArchive.old_animation:type_name -> TSD.FreehandDrawingAnimationArchive
	67,  // 185: TSD.InsertCaptionOrTitleCommandArchive.super:type_name -> TSK.CommandArchive
	68,  // 186: TSD.InsertCaptionOrTitleCommandArchive.drawable_info_id_path:type_name -> TSP.UUIDPath
	66,  // 187: TSD.InsertCaptionOrTitleCommandArchive.caption_or_title_info:type_name -> TSP.Reference
	71,  // 188: TSD.InsertCaptionOrTitleCommandArchive.added_caption_or_title_uuid:type_name -> TSP.UUID
	1,   // 189: TSD.InsertCaptionOrTitleCommandArchive.caption_or_title_kind:type_name -> TSD.CaptionOrTitleKind
	66,  // 190: TSD.InsertCaptionOrTitleCommandArchive.undo_object:type_name -> TSP.Reference
	67,  // 191: TSD.RemoveCaptionOrTitleCommandArchive.super:type_name -> TSK.CommandArchive
	68,  // 192: TSD.RemoveCaptionOrTitleCommandArchive.drawable_info_id_path:type_name -> TSP.UUIDPath
	66,  // 193: TSD.RemoveCaptionOrTitleCommandArchive.removed_caption_or_title_info:type_name -> TSP.Reference
	71,  // 194: TSD.RemoveCaptionOrTitleCommandArchive.removed_caption_or_title_uuid:type_name -> TSP.UUID
	1,   // 195: TSD.RemoveCaptionOrTitleCommandArchive.caption_or_title_kind:type_name -> TSD.CaptionOrTitleKind
	14,  // 196: TSD.SetCaptionOrTitleVisibilityCommandArchive.super:type_name -> TSD.InfoCommandArchive
	1,   // 197: TSD.SetCaptionOrTitleVisibilityCommandArchive.caption_or_title_kind:type_name -> TSD.CaptionOrTitleKind
	78,  // 198: TSD.MovieSetValueCommandArchive.PropertyValue.posterimagedata:type_name -> TSP.DataReference
	3,   // 199: TSD.MovieSetValueCommandArchive.PropertyValue.loopOption:type_name -> TSD.MovieSetValueCommandArchive.LoopOption
	78,  // 200: TSD.MovieSetValueCommandArchive.PropertyValue.media:type_name -> TSP.DataReference
	201, // [201:201] is the sub-list for method output_type
	201, // [201:201] is the sub-list for method input_type
	201, // [201:201] is the sub-list for extension type_name
	201, // [201:201] is the sub-list for extension extendee
	0,   // [0:201] is the sub-list for field type_name
}

func init() { file_TSDCommandArchives_proto_init() }
func file_TSDCommandArchives_proto_init() {
	if File_TSDCommandArchives_proto != nil {
		return
	}
	file_TSPMessages_proto_init()
	file_TSKArchives_proto_init()
	file_TSSArchives_proto_init()
	file_TSDArchives_proto_init()
	file_TSDArchives_sos_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_TSDCommandArchives_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSDUndoObjectArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDCommandArchives_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupDrawablesCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDCommandArchives_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UngroupGroupCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDCommandArchives_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerRemoveChildrenCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDCommandArchives_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerRemoveDrawablesCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDCommandArchives_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerInsertChildrenCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDCommandArchives_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerInsertDrawablesCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDCommandArchives_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerReorderChildrenCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDCommandArchives_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupUngroupInformativeCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDCommandArchives_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfoCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDCommandArchives_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionLineConnectCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDCommandArchives_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfoGeometryCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDCommandArchives_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrawablePathSourceCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDCommandArchives_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstantAlphaCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDCommandArchives_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrawableApplyThemeCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDCommandArchives_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbstractStyleCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDCommandArchives_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StyledInfoSetStyleCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDCommandArchives_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseApplyPresetCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDCommandArchives_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShapeApplyPresetCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDCommandArchives_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaApplyPresetCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDCommandArchives_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShapeStyleSetValueCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDCommandArchives_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseStyleSetValueCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDCommandArchives_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MovieSetValueCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDCommandArchives_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaStyleSetValueCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDCommandArchives_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageMediaCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDCommandArchives_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaOriginalSizeCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDCommandArchives_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaInfoGeometryCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDCommandArchives_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageNaturalSizeCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDCommandArchives_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageMaskCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDCommandArchives_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageAdjustmentsCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDCommandArchives_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaFlagsCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDCommandArchives_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrawablesCommandGroupArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDCommandArchives_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExteriorTextWrapCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDCommandArchives_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrawableHyperlinkCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDCommandArchives_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommentInvalidatingCommandSelectionBehaviorArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDCommandArchives_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageReplaceCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDCommandArchives_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrawableLockCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDCommandArchives_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrawableInfoCommentCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDCommandArchives_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrawablePencilAnnotationCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDCommandArchives_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbstractGuideCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDCommandArchives_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuideCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDCommandArchives_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrawableAspectRatioLockedCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDCommandArchives_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrawableAccessibilityDescriptionCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDCommandArchives_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasteStyleCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDCommandArchives_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageInfoAbstractGeometryCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDCommandArchives_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageInfoGeometryCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDCommandArchives_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageInfoMaskGeometryCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDCommandArchives_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfoCollectionSelectionTransformerHelperArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDCommandArchives_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrawableSelectionTransformerArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDCommandArchives_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfoHyperlinkSelectionTransformerArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDCommandArchives_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSDCanvasSelectionTransformerArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDCommandArchives_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PathSelectionTransformerArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDCommandArchives_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShapeSelectionTransformerArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDCommandArchives_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupSelectionTransformerArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDCommandArchives_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PencilAnnotationSelectionTransformerArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDCommandArchives_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FreehandDrawingOpacityCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDCommandArchives_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FreehandDrawingAnimationCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDCommandArchives_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertCaptionOrTitleCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDCommandArchives_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveCaptionOrTitleCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDCommandArchives_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetCaptionOrTitleVisibilityCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDCommandArchives_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MovieSetValueCommandArchive_PropertyValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_TSDCommandArchives_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   61,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_TSDCommandArchives_proto_goTypes,
		DependencyIndexes: file_TSDCommandArchives_proto_depIdxs,
		EnumInfos:         file_TSDCommandArchives_proto_enumTypes,
		MessageInfos:      file_TSDCommandArchives_proto_msgTypes,
	}.Build()
	File_TSDCommandArchives_proto = out.File
	file_TSDCommandArchives_proto_rawDesc = nil
	file_TSDCommandArchives_proto_goTypes = nil
	file_TSDCommandArchives_proto_depIdxs = nil
}
