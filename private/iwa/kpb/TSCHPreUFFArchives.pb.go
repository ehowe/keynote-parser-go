// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: TSCHPreUFFArchives.proto

package kpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChartInfoArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                               *DrawableArchive      `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	ChartModel                          *ChartModelArchive    `protobuf:"bytes,2,req,name=chart_model,json=chartModel" json:"chart_model,omitempty"`
	Style                               *Reference            `protobuf:"bytes,3,opt,name=style" json:"style,omitempty"`
	ChartType                           *ChartType            `protobuf:"varint,4,req,name=chart_type,json=chartType,enum=TSCH.ChartType" json:"chart_type,omitempty"`
	LegendModel                         *LegendModelArchive   `protobuf:"bytes,5,opt,name=legend_model,json=legendModel" json:"legend_model,omitempty"`
	InnerChartFrame                     *RectArchive          `protobuf:"bytes,6,req,name=inner_chart_frame,json=innerChartFrame" json:"inner_chart_frame,omitempty"`
	ValueAxisStyles                     []*Reference          `protobuf:"bytes,7,rep,name=value_axis_styles,json=valueAxisStyles" json:"value_axis_styles,omitempty"`
	CategoryAxisStyles                  []*Reference          `protobuf:"bytes,8,rep,name=category_axis_styles,json=categoryAxisStyles" json:"category_axis_styles,omitempty"`
	ValueAxisNonstyles                  []*Reference          `protobuf:"bytes,9,rep,name=value_axis_nonstyles,json=valueAxisNonstyles" json:"value_axis_nonstyles,omitempty"`
	CategoryAxisNonstyles               []*Reference          `protobuf:"bytes,10,rep,name=category_axis_nonstyles,json=categoryAxisNonstyles" json:"category_axis_nonstyles,omitempty"`
	SeriesThemeStyles                   []*Reference          `protobuf:"bytes,11,rep,name=series_theme_styles,json=seriesThemeStyles" json:"series_theme_styles,omitempty"`
	SeriesPrivateStyles                 *SparseReferenceArray `protobuf:"bytes,12,opt,name=series_private_styles,json=seriesPrivateStyles" json:"series_private_styles,omitempty"`
	SeriesNonStyles                     *SparseReferenceArray `protobuf:"bytes,13,opt,name=series_non_styles,json=seriesNonStyles" json:"series_non_styles,omitempty"`
	NonStyle                            *Reference            `protobuf:"bytes,14,opt,name=non_style,json=nonStyle" json:"non_style,omitempty"`
	Mediator                            *Reference            `protobuf:"bytes,15,opt,name=mediator" json:"mediator,omitempty"`
	CdePreviewOrigin                    *Point                `protobuf:"bytes,16,opt,name=cde_preview_origin,json=cdePreviewOrigin" json:"cde_preview_origin,omitempty"`
	ChartStylePreset                    *Reference            `protobuf:"bytes,17,opt,name=chart_style_preset,json=chartStylePreset" json:"chart_style_preset,omitempty"`
	ParagraphStyles                     []*Reference          `protobuf:"bytes,18,rep,name=paragraph_styles,json=paragraphStyles" json:"paragraph_styles,omitempty"`
	LastRowSectedInTheCde               *int32                `protobuf:"varint,19,opt,name=last_row_sected_in_the_cde,json=lastRowSectedInTheCde" json:"last_row_sected_in_the_cde,omitempty"`
	LastColumnSectedInTheCde            *int32                `protobuf:"varint,20,opt,name=last_column_sected_in_the_cde,json=lastColumnSectedInTheCde" json:"last_column_sected_in_the_cde,omitempty"`
	ChartStylePresetIndex               *int32                `protobuf:"varint,21,opt,name=chart_style_preset_index,json=chartStylePresetIndex" json:"chart_style_preset_index,omitempty"`
	NeedsCalcEngineDeferredImportAction *bool                 `protobuf:"varint,22,opt,name=needs_calc_engine_deferred_import_action,json=needsCalcEngineDeferredImportAction" json:"needs_calc_engine_deferred_import_action,omitempty"`
}

func (x *ChartInfoArchive) Reset() {
	*x = ChartInfoArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHPreUFFArchives_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartInfoArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartInfoArchive) ProtoMessage() {}

func (x *ChartInfoArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHPreUFFArchives_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartInfoArchive.ProtoReflect.Descriptor instead.
func (*ChartInfoArchive) Descriptor() ([]byte, []int) {
	return file_TSCHPreUFFArchives_proto_rawDescGZIP(), []int{0}
}

func (x *ChartInfoArchive) GetSuper() *DrawableArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *ChartInfoArchive) GetChartModel() *ChartModelArchive {
	if x != nil {
		return x.ChartModel
	}
	return nil
}

func (x *ChartInfoArchive) GetStyle() *Reference {
	if x != nil {
		return x.Style
	}
	return nil
}

func (x *ChartInfoArchive) GetChartType() ChartType {
	if x != nil && x.ChartType != nil {
		return *x.ChartType
	}
	return ChartType_undefinedChartType
}

func (x *ChartInfoArchive) GetLegendModel() *LegendModelArchive {
	if x != nil {
		return x.LegendModel
	}
	return nil
}

func (x *ChartInfoArchive) GetInnerChartFrame() *RectArchive {
	if x != nil {
		return x.InnerChartFrame
	}
	return nil
}

func (x *ChartInfoArchive) GetValueAxisStyles() []*Reference {
	if x != nil {
		return x.ValueAxisStyles
	}
	return nil
}

func (x *ChartInfoArchive) GetCategoryAxisStyles() []*Reference {
	if x != nil {
		return x.CategoryAxisStyles
	}
	return nil
}

func (x *ChartInfoArchive) GetValueAxisNonstyles() []*Reference {
	if x != nil {
		return x.ValueAxisNonstyles
	}
	return nil
}

func (x *ChartInfoArchive) GetCategoryAxisNonstyles() []*Reference {
	if x != nil {
		return x.CategoryAxisNonstyles
	}
	return nil
}

func (x *ChartInfoArchive) GetSeriesThemeStyles() []*Reference {
	if x != nil {
		return x.SeriesThemeStyles
	}
	return nil
}

func (x *ChartInfoArchive) GetSeriesPrivateStyles() *SparseReferenceArray {
	if x != nil {
		return x.SeriesPrivateStyles
	}
	return nil
}

func (x *ChartInfoArchive) GetSeriesNonStyles() *SparseReferenceArray {
	if x != nil {
		return x.SeriesNonStyles
	}
	return nil
}

func (x *ChartInfoArchive) GetNonStyle() *Reference {
	if x != nil {
		return x.NonStyle
	}
	return nil
}

func (x *ChartInfoArchive) GetMediator() *Reference {
	if x != nil {
		return x.Mediator
	}
	return nil
}

func (x *ChartInfoArchive) GetCdePreviewOrigin() *Point {
	if x != nil {
		return x.CdePreviewOrigin
	}
	return nil
}

func (x *ChartInfoArchive) GetChartStylePreset() *Reference {
	if x != nil {
		return x.ChartStylePreset
	}
	return nil
}

func (x *ChartInfoArchive) GetParagraphStyles() []*Reference {
	if x != nil {
		return x.ParagraphStyles
	}
	return nil
}

func (x *ChartInfoArchive) GetLastRowSectedInTheCde() int32 {
	if x != nil && x.LastRowSectedInTheCde != nil {
		return *x.LastRowSectedInTheCde
	}
	return 0
}

func (x *ChartInfoArchive) GetLastColumnSectedInTheCde() int32 {
	if x != nil && x.LastColumnSectedInTheCde != nil {
		return *x.LastColumnSectedInTheCde
	}
	return 0
}

func (x *ChartInfoArchive) GetChartStylePresetIndex() int32 {
	if x != nil && x.ChartStylePresetIndex != nil {
		return *x.ChartStylePresetIndex
	}
	return 0
}

func (x *ChartInfoArchive) GetNeedsCalcEngineDeferredImportAction() bool {
	if x != nil && x.NeedsCalcEngineDeferredImportAction != nil {
		return *x.NeedsCalcEngineDeferredImportAction
	}
	return false
}

type LegendModelArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info     *Reference   `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
	Frame    *RectArchive `protobuf:"bytes,2,req,name=frame" json:"frame,omitempty"`
	Style    *Reference   `protobuf:"bytes,3,req,name=style" json:"style,omitempty"`
	NonStyle *Reference   `protobuf:"bytes,4,req,name=non_style,json=nonStyle" json:"non_style,omitempty"`
}

func (x *LegendModelArchive) Reset() {
	*x = LegendModelArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHPreUFFArchives_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LegendModelArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LegendModelArchive) ProtoMessage() {}

func (x *LegendModelArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHPreUFFArchives_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LegendModelArchive.ProtoReflect.Descriptor instead.
func (*LegendModelArchive) Descriptor() ([]byte, []int) {
	return file_TSCHPreUFFArchives_proto_rawDescGZIP(), []int{1}
}

func (x *LegendModelArchive) GetInfo() *Reference {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *LegendModelArchive) GetFrame() *RectArchive {
	if x != nil {
		return x.Frame
	}
	return nil
}

func (x *LegendModelArchive) GetStyle() *Reference {
	if x != nil {
		return x.Style
	}
	return nil
}

func (x *LegendModelArchive) GetNonStyle() *Reference {
	if x != nil {
		return x.NonStyle
	}
	return nil
}

type ChartModelArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info              *Reference                  `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
	Grid              *Reference                  `protobuf:"bytes,2,req,name=grid" json:"grid,omitempty"`
	SeriesTypes       []uint32                    `protobuf:"varint,3,rep,name=series_types,json=seriesTypes" json:"series_types,omitempty"`
	ScatterFormat     *uint32                     `protobuf:"varint,4,opt,name=scatter_format,json=scatterFormat" json:"scatter_format,omitempty"`
	InlineGrid        *TSCHPreUFFChartGridArchive `protobuf:"bytes,5,opt,name=inline_grid,json=inlineGrid" json:"inline_grid,omitempty"`
	MultidatasetIndex *uint32                     `protobuf:"varint,6,opt,name=multidataset_index,json=multidatasetIndex" json:"multidataset_index,omitempty"`
}

func (x *ChartModelArchive) Reset() {
	*x = ChartModelArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHPreUFFArchives_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartModelArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartModelArchive) ProtoMessage() {}

func (x *ChartModelArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHPreUFFArchives_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartModelArchive.ProtoReflect.Descriptor instead.
func (*ChartModelArchive) Descriptor() ([]byte, []int) {
	return file_TSCHPreUFFArchives_proto_rawDescGZIP(), []int{2}
}

func (x *ChartModelArchive) GetInfo() *Reference {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *ChartModelArchive) GetGrid() *Reference {
	if x != nil {
		return x.Grid
	}
	return nil
}

func (x *ChartModelArchive) GetSeriesTypes() []uint32 {
	if x != nil {
		return x.SeriesTypes
	}
	return nil
}

func (x *ChartModelArchive) GetScatterFormat() uint32 {
	if x != nil && x.ScatterFormat != nil {
		return *x.ScatterFormat
	}
	return 0
}

func (x *ChartModelArchive) GetInlineGrid() *TSCHPreUFFChartGridArchive {
	if x != nil {
		return x.InlineGrid
	}
	return nil
}

func (x *ChartModelArchive) GetMultidatasetIndex() uint32 {
	if x != nil && x.MultidatasetIndex != nil {
		return *x.MultidatasetIndex
	}
	return 0
}

type TSCHPreUFFChartGridArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direction  *int32                                 `protobuf:"varint,1,req,name=direction" json:"direction,omitempty"`
	RowName    []string                               `protobuf:"bytes,2,rep,name=row_name,json=rowName" json:"row_name,omitempty"`
	ColumnName []string                               `protobuf:"bytes,3,rep,name=column_name,json=columnName" json:"column_name,omitempty"`
	ValueRow   []*TSCHPreUFFChartGridArchive_ValueRow `protobuf:"bytes,4,rep,name=value_row,json=valueRow" json:"value_row,omitempty"`
	Dirty      *bool                                  `protobuf:"varint,6,req,name=dirty" json:"dirty,omitempty"`
}

func (x *TSCHPreUFFChartGridArchive) Reset() {
	*x = TSCHPreUFFChartGridArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHPreUFFArchives_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSCHPreUFFChartGridArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSCHPreUFFChartGridArchive) ProtoMessage() {}

func (x *TSCHPreUFFChartGridArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHPreUFFArchives_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSCHPreUFFChartGridArchive.ProtoReflect.Descriptor instead.
func (*TSCHPreUFFChartGridArchive) Descriptor() ([]byte, []int) {
	return file_TSCHPreUFFArchives_proto_rawDescGZIP(), []int{3}
}

func (x *TSCHPreUFFChartGridArchive) GetDirection() int32 {
	if x != nil && x.Direction != nil {
		return *x.Direction
	}
	return 0
}

func (x *TSCHPreUFFChartGridArchive) GetRowName() []string {
	if x != nil {
		return x.RowName
	}
	return nil
}

func (x *TSCHPreUFFChartGridArchive) GetColumnName() []string {
	if x != nil {
		return x.ColumnName
	}
	return nil
}

func (x *TSCHPreUFFChartGridArchive) GetValueRow() []*TSCHPreUFFChartGridArchive_ValueRow {
	if x != nil {
		return x.ValueRow
	}
	return nil
}

func (x *TSCHPreUFFChartGridArchive) GetDirty() bool {
	if x != nil && x.Dirty != nil {
		return *x.Dirty
	}
	return false
}

type ChartsNumberFormatArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValueType                                *NumberValueType     `protobuf:"varint,1,req,name=value_type,json=valueType,enum=TSCH.NumberValueType" json:"value_type,omitempty"`
	FormatString                             *string              `protobuf:"bytes,2,opt,name=format_string,json=formatString" json:"format_string,omitempty"`
	DecimalPlaces                            *uint32              `protobuf:"varint,3,req,name=decimal_places,json=decimalPlaces" json:"decimal_places,omitempty"`
	CurrencyCode                             *string              `protobuf:"bytes,4,opt,name=currency_code,json=currencyCode" json:"currency_code,omitempty"`
	NegativeStyle                            *NegativeNumberStyle `protobuf:"varint,5,req,name=negative_style,json=negativeStyle,enum=TSCH.NegativeNumberStyle" json:"negative_style,omitempty"`
	ShowThousandsSeparator                   *bool                `protobuf:"varint,6,req,name=show_thousands_separator,json=showThousandsSeparator" json:"show_thousands_separator,omitempty"`
	FractionAccuracy                         *FractionAccuracy    `protobuf:"varint,7,req,name=fraction_accuracy,json=fractionAccuracy,enum=TSCH.FractionAccuracy" json:"fraction_accuracy,omitempty"`
	SuffixString                             *string              `protobuf:"bytes,8,opt,name=suffix_string,json=suffixString" json:"suffix_string,omitempty"`
	Base                                     *uint32              `protobuf:"varint,9,req,name=base" json:"base,omitempty"`
	BasePlaces                               *uint32              `protobuf:"varint,10,req,name=base_places,json=basePlaces" json:"base_places,omitempty"`
	BaseUseMinusSign                         *bool                `protobuf:"varint,11,req,name=base_use_minus_sign,json=baseUseMinusSign" json:"base_use_minus_sign,omitempty"`
	UseAccountingStyle                       *bool                `protobuf:"varint,12,req,name=use_accounting_style,json=useAccountingStyle" json:"use_accounting_style,omitempty"`
	IsCustom                                 *bool                `protobuf:"varint,13,req,name=is_custom,json=isCustom" json:"is_custom,omitempty"`
	ScaleFactor                              *float64             `protobuf:"fixed64,14,req,name=scale_factor,json=scaleFactor" json:"scale_factor,omitempty"`
	InterstitialStrings                      []string             `protobuf:"bytes,15,rep,name=interstitial_strings,json=interstitialStrings" json:"interstitial_strings,omitempty"`
	InterstitialStringInsertionIndexes       *IndexSet            `protobuf:"bytes,16,req,name=interstitial_string_insertion_indexes,json=interstitialStringInsertionIndexes" json:"interstitial_string_insertion_indexes,omitempty"`
	IndexFromRightOfLastDigitPlaceholder     *uint32              `protobuf:"varint,17,req,name=index_from_right_of_last_digit_placeholder,json=indexFromRightOfLastDigitPlaceholder" json:"index_from_right_of_last_digit_placeholder,omitempty"`
	IsTextFormat                             *bool                `protobuf:"varint,18,req,name=is_text_format,json=isTextFormat" json:"is_text_format,omitempty"`
	MinimumIntegerWidth                      *uint32              `protobuf:"varint,19,req,name=minimum_integer_width,json=minimumIntegerWidth" json:"minimum_integer_width,omitempty"`
	DecimalWidth                             *uint32              `protobuf:"varint,20,req,name=decimal_width,json=decimalWidth" json:"decimal_width,omitempty"`
	NumberOfNonSpaceIntegerPlaceholderDigits *uint32              `protobuf:"varint,21,req,name=number_of_non_space_integer_placeholder_digits,json=numberOfNonSpaceIntegerPlaceholderDigits" json:"number_of_non_space_integer_placeholder_digits,omitempty"`
	NumberOfNonSpaceDecimalPlaceholderDigits *uint32              `protobuf:"varint,22,req,name=number_of_non_space_decimal_placeholder_digits,json=numberOfNonSpaceDecimalPlaceholderDigits" json:"number_of_non_space_decimal_placeholder_digits,omitempty"`
	FormatName                               *string              `protobuf:"bytes,23,opt,name=format_name,json=formatName" json:"format_name,omitempty"`
	PrefixString                             *string              `protobuf:"bytes,24,opt,name=prefix_string,json=prefixString" json:"prefix_string,omitempty"`
}

func (x *ChartsNumberFormatArchive) Reset() {
	*x = ChartsNumberFormatArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHPreUFFArchives_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartsNumberFormatArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartsNumberFormatArchive) ProtoMessage() {}

func (x *ChartsNumberFormatArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHPreUFFArchives_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartsNumberFormatArchive.ProtoReflect.Descriptor instead.
func (*ChartsNumberFormatArchive) Descriptor() ([]byte, []int) {
	return file_TSCHPreUFFArchives_proto_rawDescGZIP(), []int{4}
}

func (x *ChartsNumberFormatArchive) GetValueType() NumberValueType {
	if x != nil && x.ValueType != nil {
		return *x.ValueType
	}
	return NumberValueType_numberValueTypeDecimal
}

func (x *ChartsNumberFormatArchive) GetFormatString() string {
	if x != nil && x.FormatString != nil {
		return *x.FormatString
	}
	return ""
}

func (x *ChartsNumberFormatArchive) GetDecimalPlaces() uint32 {
	if x != nil && x.DecimalPlaces != nil {
		return *x.DecimalPlaces
	}
	return 0
}

func (x *ChartsNumberFormatArchive) GetCurrencyCode() string {
	if x != nil && x.CurrencyCode != nil {
		return *x.CurrencyCode
	}
	return ""
}

func (x *ChartsNumberFormatArchive) GetNegativeStyle() NegativeNumberStyle {
	if x != nil && x.NegativeStyle != nil {
		return *x.NegativeStyle
	}
	return NegativeNumberStyle_negativeNumberStyleMinus
}

func (x *ChartsNumberFormatArchive) GetShowThousandsSeparator() bool {
	if x != nil && x.ShowThousandsSeparator != nil {
		return *x.ShowThousandsSeparator
	}
	return false
}

func (x *ChartsNumberFormatArchive) GetFractionAccuracy() FractionAccuracy {
	if x != nil && x.FractionAccuracy != nil {
		return *x.FractionAccuracy
	}
	return FractionAccuracy_fractionAccuracyConflicting
}

func (x *ChartsNumberFormatArchive) GetSuffixString() string {
	if x != nil && x.SuffixString != nil {
		return *x.SuffixString
	}
	return ""
}

func (x *ChartsNumberFormatArchive) GetBase() uint32 {
	if x != nil && x.Base != nil {
		return *x.Base
	}
	return 0
}

func (x *ChartsNumberFormatArchive) GetBasePlaces() uint32 {
	if x != nil && x.BasePlaces != nil {
		return *x.BasePlaces
	}
	return 0
}

func (x *ChartsNumberFormatArchive) GetBaseUseMinusSign() bool {
	if x != nil && x.BaseUseMinusSign != nil {
		return *x.BaseUseMinusSign
	}
	return false
}

func (x *ChartsNumberFormatArchive) GetUseAccountingStyle() bool {
	if x != nil && x.UseAccountingStyle != nil {
		return *x.UseAccountingStyle
	}
	return false
}

func (x *ChartsNumberFormatArchive) GetIsCustom() bool {
	if x != nil && x.IsCustom != nil {
		return *x.IsCustom
	}
	return false
}

func (x *ChartsNumberFormatArchive) GetScaleFactor() float64 {
	if x != nil && x.ScaleFactor != nil {
		return *x.ScaleFactor
	}
	return 0
}

func (x *ChartsNumberFormatArchive) GetInterstitialStrings() []string {
	if x != nil {
		return x.InterstitialStrings
	}
	return nil
}

func (x *ChartsNumberFormatArchive) GetInterstitialStringInsertionIndexes() *IndexSet {
	if x != nil {
		return x.InterstitialStringInsertionIndexes
	}
	return nil
}

func (x *ChartsNumberFormatArchive) GetIndexFromRightOfLastDigitPlaceholder() uint32 {
	if x != nil && x.IndexFromRightOfLastDigitPlaceholder != nil {
		return *x.IndexFromRightOfLastDigitPlaceholder
	}
	return 0
}

func (x *ChartsNumberFormatArchive) GetIsTextFormat() bool {
	if x != nil && x.IsTextFormat != nil {
		return *x.IsTextFormat
	}
	return false
}

func (x *ChartsNumberFormatArchive) GetMinimumIntegerWidth() uint32 {
	if x != nil && x.MinimumIntegerWidth != nil {
		return *x.MinimumIntegerWidth
	}
	return 0
}

func (x *ChartsNumberFormatArchive) GetDecimalWidth() uint32 {
	if x != nil && x.DecimalWidth != nil {
		return *x.DecimalWidth
	}
	return 0
}

func (x *ChartsNumberFormatArchive) GetNumberOfNonSpaceIntegerPlaceholderDigits() uint32 {
	if x != nil && x.NumberOfNonSpaceIntegerPlaceholderDigits != nil {
		return *x.NumberOfNonSpaceIntegerPlaceholderDigits
	}
	return 0
}

func (x *ChartsNumberFormatArchive) GetNumberOfNonSpaceDecimalPlaceholderDigits() uint32 {
	if x != nil && x.NumberOfNonSpaceDecimalPlaceholderDigits != nil {
		return *x.NumberOfNonSpaceDecimalPlaceholderDigits
	}
	return 0
}

func (x *ChartsNumberFormatArchive) GetFormatName() string {
	if x != nil && x.FormatName != nil {
		return *x.FormatName
	}
	return ""
}

func (x *ChartsNumberFormatArchive) GetPrefixString() string {
	if x != nil && x.PrefixString != nil {
		return *x.PrefixString
	}
	return ""
}

type TSCHPreUFFChartStyleArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                                                              *StyleArchive                  `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Tschchartinfodefaultbackgroundfill                                 *FillArchive                   `protobuf:"bytes,10,opt,name=tschchartinfodefaultbackgroundfill" json:"tschchartinfodefaultbackgroundfill,omitempty"`
	Tschchartinfodefaultbackgroundstroke                               *StrokeArchive                 `protobuf:"bytes,11,opt,name=tschchartinfodefaultbackgroundstroke" json:"tschchartinfodefaultbackgroundstroke,omitempty"`
	Tschchartinfodefaultgridbackgroundfill                             *FillArchive                   `protobuf:"bytes,12,opt,name=tschchartinfodefaultgridbackgroundfill" json:"tschchartinfodefaultgridbackgroundfill,omitempty"`
	Tschchartinfodefaultintersetgap                                    *float32                       `protobuf:"fixed32,13,opt,name=tschchartinfodefaultintersetgap" json:"tschchartinfodefaultintersetgap,omitempty"`
	Tschchartinfodefaultinterbargap                                    *float32                       `protobuf:"fixed32,14,opt,name=tschchartinfodefaultinterbargap" json:"tschchartinfodefaultinterbargap,omitempty"`
	Tschchartinfodefaultshowborder                                     *bool                          `protobuf:"varint,15,opt,name=tschchartinfodefaultshowborder" json:"tschchartinfodefaultshowborder,omitempty"`
	Tschchartinfodefaultborderstroke                                   *StrokeArchive                 `protobuf:"bytes,16,opt,name=tschchartinfodefaultborderstroke" json:"tschchartinfodefaultborderstroke,omitempty"`
	Tschchartinfodefaulttitlecolor                                     *Color                         `protobuf:"bytes,18,opt,name=tschchartinfodefaulttitlecolor" json:"tschchartinfodefaulttitlecolor,omitempty"`
	Tschchartinfodefaultgridbackgroundopacity                          *float32                       `protobuf:"fixed32,19,opt,name=tschchartinfodefaultgridbackgroundopacity" json:"tschchartinfodefaultgridbackgroundopacity,omitempty"`
	Tschchartinfodefaultcombinelayers                                  *bool                          `protobuf:"varint,20,opt,name=tschchartinfodefaultcombinelayers" json:"tschchartinfodefaultcombinelayers,omitempty"`
	Tschchartinfodefaultbordershadow                                   *ShadowArchive                 `protobuf:"bytes,21,opt,name=tschchartinfodefaultbordershadow" json:"tschchartinfodefaultbordershadow,omitempty"`
	Tschchartinfodefaultborderopacity                                  *float32                       `protobuf:"fixed32,22,opt,name=tschchartinfodefaultborderopacity" json:"tschchartinfodefaultborderopacity,omitempty"`
	Tschchartinfodefaulttitleparagraphstyleindex                       *int32                         `protobuf:"varint,23,opt,name=tschchartinfodefaulttitleparagraphstyleindex" json:"tschchartinfodefaulttitleparagraphstyleindex,omitempty"`
	Tschchartinfodefaultdeprecatedmainfontfamily                       *string                        `protobuf:"bytes,24,opt,name=tschchartinfodefaultdeprecatedmainfontfamily" json:"tschchartinfodefaultdeprecatedmainfontfamily,omitempty"`
	Tschchartinfodefaultdeprecatedmainfontnamedsize                    *int32                         `protobuf:"varint,25,opt,name=tschchartinfodefaultdeprecatedmainfontnamedsize" json:"tschchartinfodefaultdeprecatedmainfontnamedsize,omitempty"`
	Tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex *int32                         `protobuf:"varint,30,opt,name=tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex" json:"tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex,omitempty"`
	Tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex *int32                         `protobuf:"varint,31,opt,name=tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex" json:"tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex,omitempty"`
	Tschchartinfodefaultdeprecatedtrendlineequationshadow              *ShadowArchive                 `protobuf:"bytes,32,opt,name=tschchartinfodefaultdeprecatedtrendlineequationshadow" json:"tschchartinfodefaultdeprecatedtrendlineequationshadow,omitempty"`
	Tschchartinfodefaultdeprecatedtrendlinersquaredshadow              *ShadowArchive                 `protobuf:"bytes,33,opt,name=tschchartinfodefaultdeprecatedtrendlinersquaredshadow" json:"tschchartinfodefaultdeprecatedtrendlinersquaredshadow,omitempty"`
	Tschchartinfodefaultdeprecatedtrendlineequationopacity             *float32                       `protobuf:"fixed32,34,opt,name=tschchartinfodefaultdeprecatedtrendlineequationopacity" json:"tschchartinfodefaultdeprecatedtrendlineequationopacity,omitempty"`
	Tschchartinfodefaultdeprecatedtrendlinersquaredopacity             *float32                       `protobuf:"fixed32,35,opt,name=tschchartinfodefaultdeprecatedtrendlinersquaredopacity" json:"tschchartinfodefaultdeprecatedtrendlinersquaredopacity,omitempty"`
	Tschchartinfobardeprecated3Dshadow                                 *ShadowArchive                 `protobuf:"bytes,308,opt,name=tschchartinfobardeprecated3dshadow" json:"tschchartinfobardeprecated3dshadow,omitempty"`
	Tschchartinfocolumndeprecated3Dshadow                              *ShadowArchive                 `protobuf:"bytes,309,opt,name=tschchartinfocolumndeprecated3dshadow" json:"tschchartinfocolumndeprecated3dshadow,omitempty"`
	Tschchartinfolinedeprecated3Dshadow                                *ShadowArchive                 `protobuf:"bytes,310,opt,name=tschchartinfolinedeprecated3dshadow" json:"tschchartinfolinedeprecated3dshadow,omitempty"`
	Tschchartinfoareadeprecated3Dshadow                                *ShadowArchive                 `protobuf:"bytes,311,opt,name=tschchartinfoareadeprecated3dshadow" json:"tschchartinfoareadeprecated3dshadow,omitempty"`
	Tschchartinfopiedeprecated3Dshadow                                 *ShadowArchive                 `protobuf:"bytes,312,opt,name=tschchartinfopiedeprecated3dshadow" json:"tschchartinfopiedeprecated3dshadow,omitempty"`
	Tschchartinfodefault3Dlightingpackage                              *Chart3DLightingPackageArchive `protobuf:"bytes,313,opt,name=tschchartinfodefault3dlightingpackage" json:"tschchartinfodefault3dlightingpackage,omitempty"`
	Tschchartinfocolumn3Dlightingpackage                               *Chart3DLightingPackageArchive `protobuf:"bytes,314,opt,name=tschchartinfocolumn3dlightingpackage" json:"tschchartinfocolumn3dlightingpackage,omitempty"`
	Tschchartinfobar3Dlightingpackage                                  *Chart3DLightingPackageArchive `protobuf:"bytes,315,opt,name=tschchartinfobar3dlightingpackage" json:"tschchartinfobar3dlightingpackage,omitempty"`
	Tschchartinfoline3Dlightingpackage                                 *Chart3DLightingPackageArchive `protobuf:"bytes,316,opt,name=tschchartinfoline3dlightingpackage" json:"tschchartinfoline3dlightingpackage,omitempty"`
	Tschchartinfoarea3Dlightingpackage                                 *Chart3DLightingPackageArchive `protobuf:"bytes,317,opt,name=tschchartinfoarea3dlightingpackage" json:"tschchartinfoarea3dlightingpackage,omitempty"`
	Tschchartinfopie3Dlightingpackage                                  *Chart3DLightingPackageArchive `protobuf:"bytes,318,opt,name=tschchartinfopie3dlightingpackage" json:"tschchartinfopie3dlightingpackage,omitempty"`
	Tschchartinfodefaultdeprecated3Dbeveledges                         *bool                          `protobuf:"varint,326,opt,name=tschchartinfodefaultdeprecated3dbeveledges" json:"tschchartinfodefaultdeprecated3dbeveledges,omitempty"`
	Tschchartinfopiedeprecated3Dbeveledges                             *bool                          `protobuf:"varint,327,opt,name=tschchartinfopiedeprecated3dbeveledges" json:"tschchartinfopiedeprecated3dbeveledges,omitempty"`
	Tschchartinfobardeprecated3Dbeveledges                             *bool                          `protobuf:"varint,328,opt,name=tschchartinfobardeprecated3dbeveledges" json:"tschchartinfobardeprecated3dbeveledges,omitempty"`
	Tschchartinfocolumndeprecated3Dbeveledges                          *bool                          `protobuf:"varint,329,opt,name=tschchartinfocolumndeprecated3dbeveledges" json:"tschchartinfocolumndeprecated3dbeveledges,omitempty"`
	Tschchartinfodefaultdeprecated3Dbarshape                           *int32                         `protobuf:"varint,330,opt,name=tschchartinfodefaultdeprecated3dbarshape" json:"tschchartinfodefaultdeprecated3dbarshape,omitempty"`
	Tschchartinfodefault3Dchartopacity                                 *float32                       `protobuf:"fixed32,335,opt,name=tschchartinfodefault3dchartopacity" json:"tschchartinfodefault3dchartopacity,omitempty"`
}

func (x *TSCHPreUFFChartStyleArchive) Reset() {
	*x = TSCHPreUFFChartStyleArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHPreUFFArchives_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSCHPreUFFChartStyleArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSCHPreUFFChartStyleArchive) ProtoMessage() {}

func (x *TSCHPreUFFChartStyleArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHPreUFFArchives_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSCHPreUFFChartStyleArchive.ProtoReflect.Descriptor instead.
func (*TSCHPreUFFChartStyleArchive) Descriptor() ([]byte, []int) {
	return file_TSCHPreUFFArchives_proto_rawDescGZIP(), []int{5}
}

func (x *TSCHPreUFFChartStyleArchive) GetSuper() *StyleArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *TSCHPreUFFChartStyleArchive) GetTschchartinfodefaultbackgroundfill() *FillArchive {
	if x != nil {
		return x.Tschchartinfodefaultbackgroundfill
	}
	return nil
}

func (x *TSCHPreUFFChartStyleArchive) GetTschchartinfodefaultbackgroundstroke() *StrokeArchive {
	if x != nil {
		return x.Tschchartinfodefaultbackgroundstroke
	}
	return nil
}

func (x *TSCHPreUFFChartStyleArchive) GetTschchartinfodefaultgridbackgroundfill() *FillArchive {
	if x != nil {
		return x.Tschchartinfodefaultgridbackgroundfill
	}
	return nil
}

func (x *TSCHPreUFFChartStyleArchive) GetTschchartinfodefaultintersetgap() float32 {
	if x != nil && x.Tschchartinfodefaultintersetgap != nil {
		return *x.Tschchartinfodefaultintersetgap
	}
	return 0
}

func (x *TSCHPreUFFChartStyleArchive) GetTschchartinfodefaultinterbargap() float32 {
	if x != nil && x.Tschchartinfodefaultinterbargap != nil {
		return *x.Tschchartinfodefaultinterbargap
	}
	return 0
}

func (x *TSCHPreUFFChartStyleArchive) GetTschchartinfodefaultshowborder() bool {
	if x != nil && x.Tschchartinfodefaultshowborder != nil {
		return *x.Tschchartinfodefaultshowborder
	}
	return false
}

func (x *TSCHPreUFFChartStyleArchive) GetTschchartinfodefaultborderstroke() *StrokeArchive {
	if x != nil {
		return x.Tschchartinfodefaultborderstroke
	}
	return nil
}

func (x *TSCHPreUFFChartStyleArchive) GetTschchartinfodefaulttitlecolor() *Color {
	if x != nil {
		return x.Tschchartinfodefaulttitlecolor
	}
	return nil
}

func (x *TSCHPreUFFChartStyleArchive) GetTschchartinfodefaultgridbackgroundopacity() float32 {
	if x != nil && x.Tschchartinfodefaultgridbackgroundopacity != nil {
		return *x.Tschchartinfodefaultgridbackgroundopacity
	}
	return 0
}

func (x *TSCHPreUFFChartStyleArchive) GetTschchartinfodefaultcombinelayers() bool {
	if x != nil && x.Tschchartinfodefaultcombinelayers != nil {
		return *x.Tschchartinfodefaultcombinelayers
	}
	return false
}

func (x *TSCHPreUFFChartStyleArchive) GetTschchartinfodefaultbordershadow() *ShadowArchive {
	if x != nil {
		return x.Tschchartinfodefaultbordershadow
	}
	return nil
}

func (x *TSCHPreUFFChartStyleArchive) GetTschchartinfodefaultborderopacity() float32 {
	if x != nil && x.Tschchartinfodefaultborderopacity != nil {
		return *x.Tschchartinfodefaultborderopacity
	}
	return 0
}

func (x *TSCHPreUFFChartStyleArchive) GetTschchartinfodefaulttitleparagraphstyleindex() int32 {
	if x != nil && x.Tschchartinfodefaulttitleparagraphstyleindex != nil {
		return *x.Tschchartinfodefaulttitleparagraphstyleindex
	}
	return 0
}

func (x *TSCHPreUFFChartStyleArchive) GetTschchartinfodefaultdeprecatedmainfontfamily() string {
	if x != nil && x.Tschchartinfodefaultdeprecatedmainfontfamily != nil {
		return *x.Tschchartinfodefaultdeprecatedmainfontfamily
	}
	return ""
}

func (x *TSCHPreUFFChartStyleArchive) GetTschchartinfodefaultdeprecatedmainfontnamedsize() int32 {
	if x != nil && x.Tschchartinfodefaultdeprecatedmainfontnamedsize != nil {
		return *x.Tschchartinfodefaultdeprecatedmainfontnamedsize
	}
	return 0
}

func (x *TSCHPreUFFChartStyleArchive) GetTschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex() int32 {
	if x != nil && x.Tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex != nil {
		return *x.Tschchartinfodefaultdeprecatedtrendlineequationparagraphstyleindex
	}
	return 0
}

func (x *TSCHPreUFFChartStyleArchive) GetTschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex() int32 {
	if x != nil && x.Tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex != nil {
		return *x.Tschchartinfodefaultdeprecatedtrendlinersquaredparagraphstyleindex
	}
	return 0
}

func (x *TSCHPreUFFChartStyleArchive) GetTschchartinfodefaultdeprecatedtrendlineequationshadow() *ShadowArchive {
	if x != nil {
		return x.Tschchartinfodefaultdeprecatedtrendlineequationshadow
	}
	return nil
}

func (x *TSCHPreUFFChartStyleArchive) GetTschchartinfodefaultdeprecatedtrendlinersquaredshadow() *ShadowArchive {
	if x != nil {
		return x.Tschchartinfodefaultdeprecatedtrendlinersquaredshadow
	}
	return nil
}

func (x *TSCHPreUFFChartStyleArchive) GetTschchartinfodefaultdeprecatedtrendlineequationopacity() float32 {
	if x != nil && x.Tschchartinfodefaultdeprecatedtrendlineequationopacity != nil {
		return *x.Tschchartinfodefaultdeprecatedtrendlineequationopacity
	}
	return 0
}

func (x *TSCHPreUFFChartStyleArchive) GetTschchartinfodefaultdeprecatedtrendlinersquaredopacity() float32 {
	if x != nil && x.Tschchartinfodefaultdeprecatedtrendlinersquaredopacity != nil {
		return *x.Tschchartinfodefaultdeprecatedtrendlinersquaredopacity
	}
	return 0
}

func (x *TSCHPreUFFChartStyleArchive) GetTschchartinfobardeprecated3Dshadow() *ShadowArchive {
	if x != nil {
		return x.Tschchartinfobardeprecated3Dshadow
	}
	return nil
}

func (x *TSCHPreUFFChartStyleArchive) GetTschchartinfocolumndeprecated3Dshadow() *ShadowArchive {
	if x != nil {
		return x.Tschchartinfocolumndeprecated3Dshadow
	}
	return nil
}

func (x *TSCHPreUFFChartStyleArchive) GetTschchartinfolinedeprecated3Dshadow() *ShadowArchive {
	if x != nil {
		return x.Tschchartinfolinedeprecated3Dshadow
	}
	return nil
}

func (x *TSCHPreUFFChartStyleArchive) GetTschchartinfoareadeprecated3Dshadow() *ShadowArchive {
	if x != nil {
		return x.Tschchartinfoareadeprecated3Dshadow
	}
	return nil
}

func (x *TSCHPreUFFChartStyleArchive) GetTschchartinfopiedeprecated3Dshadow() *ShadowArchive {
	if x != nil {
		return x.Tschchartinfopiedeprecated3Dshadow
	}
	return nil
}

func (x *TSCHPreUFFChartStyleArchive) GetTschchartinfodefault3Dlightingpackage() *Chart3DLightingPackageArchive {
	if x != nil {
		return x.Tschchartinfodefault3Dlightingpackage
	}
	return nil
}

func (x *TSCHPreUFFChartStyleArchive) GetTschchartinfocolumn3Dlightingpackage() *Chart3DLightingPackageArchive {
	if x != nil {
		return x.Tschchartinfocolumn3Dlightingpackage
	}
	return nil
}

func (x *TSCHPreUFFChartStyleArchive) GetTschchartinfobar3Dlightingpackage() *Chart3DLightingPackageArchive {
	if x != nil {
		return x.Tschchartinfobar3Dlightingpackage
	}
	return nil
}

func (x *TSCHPreUFFChartStyleArchive) GetTschchartinfoline3Dlightingpackage() *Chart3DLightingPackageArchive {
	if x != nil {
		return x.Tschchartinfoline3Dlightingpackage
	}
	return nil
}

func (x *TSCHPreUFFChartStyleArchive) GetTschchartinfoarea3Dlightingpackage() *Chart3DLightingPackageArchive {
	if x != nil {
		return x.Tschchartinfoarea3Dlightingpackage
	}
	return nil
}

func (x *TSCHPreUFFChartStyleArchive) GetTschchartinfopie3Dlightingpackage() *Chart3DLightingPackageArchive {
	if x != nil {
		return x.Tschchartinfopie3Dlightingpackage
	}
	return nil
}

func (x *TSCHPreUFFChartStyleArchive) GetTschchartinfodefaultdeprecated3Dbeveledges() bool {
	if x != nil && x.Tschchartinfodefaultdeprecated3Dbeveledges != nil {
		return *x.Tschchartinfodefaultdeprecated3Dbeveledges
	}
	return false
}

func (x *TSCHPreUFFChartStyleArchive) GetTschchartinfopiedeprecated3Dbeveledges() bool {
	if x != nil && x.Tschchartinfopiedeprecated3Dbeveledges != nil {
		return *x.Tschchartinfopiedeprecated3Dbeveledges
	}
	return false
}

func (x *TSCHPreUFFChartStyleArchive) GetTschchartinfobardeprecated3Dbeveledges() bool {
	if x != nil && x.Tschchartinfobardeprecated3Dbeveledges != nil {
		return *x.Tschchartinfobardeprecated3Dbeveledges
	}
	return false
}

func (x *TSCHPreUFFChartStyleArchive) GetTschchartinfocolumndeprecated3Dbeveledges() bool {
	if x != nil && x.Tschchartinfocolumndeprecated3Dbeveledges != nil {
		return *x.Tschchartinfocolumndeprecated3Dbeveledges
	}
	return false
}

func (x *TSCHPreUFFChartStyleArchive) GetTschchartinfodefaultdeprecated3Dbarshape() int32 {
	if x != nil && x.Tschchartinfodefaultdeprecated3Dbarshape != nil {
		return *x.Tschchartinfodefaultdeprecated3Dbarshape
	}
	return 0
}

func (x *TSCHPreUFFChartStyleArchive) GetTschchartinfodefault3Dchartopacity() float32 {
	if x != nil && x.Tschchartinfodefault3Dchartopacity != nil {
		return *x.Tschchartinfodefault3Dchartopacity
	}
	return 0
}

type TSCHPreUFFChartNonStyleArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                                                *StyleArchive                  `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Tschchartinfodefaulttitle                            *string                        `protobuf:"bytes,10,opt,name=tschchartinfodefaulttitle" json:"tschchartinfodefaulttitle,omitempty"`
	Tschchartinfodefaultshowlegend                       *bool                          `protobuf:"varint,11,opt,name=tschchartinfodefaultshowlegend" json:"tschchartinfodefaultshowlegend,omitempty"`
	Tschchartinfodefaultpiestartangle                    *float32                       `protobuf:"fixed32,12,opt,name=tschchartinfodefaultpiestartangle" json:"tschchartinfodefaultpiestartangle,omitempty"`
	Tschchartinfodefaultshowtitle                        *bool                          `protobuf:"varint,13,opt,name=tschchartinfodefaultshowtitle" json:"tschchartinfodefaultshowtitle,omitempty"`
	Tschchartinfodefaultdeprecatedagainmainfontnamedsize *int32                         `protobuf:"varint,25,opt,name=tschchartinfodefaultdeprecatedagainmainfontnamedsize" json:"tschchartinfodefaultdeprecatedagainmainfontnamedsize,omitempty"`
	Tschchartinfodefault3Drotation                       *Chart3DVectorArchive          `protobuf:"bytes,300,opt,name=tschchartinfodefault3drotation" json:"tschchartinfodefault3drotation,omitempty"`
	Tschchartinfodefault3Dscale                          *Chart3DVectorArchive          `protobuf:"bytes,301,opt,name=tschchartinfodefault3dscale" json:"tschchartinfodefault3dscale,omitempty"`
	Tschchartinfocolumn3Dscale                           *Chart3DVectorArchive          `protobuf:"bytes,302,opt,name=tschchartinfocolumn3dscale" json:"tschchartinfocolumn3dscale,omitempty"`
	Tschchartinfobar3Dscale                              *Chart3DVectorArchive          `protobuf:"bytes,303,opt,name=tschchartinfobar3dscale" json:"tschchartinfobar3dscale,omitempty"`
	Tschchartinfoline3Dscale                             *Chart3DVectorArchive          `protobuf:"bytes,304,opt,name=tschchartinfoline3dscale" json:"tschchartinfoline3dscale,omitempty"`
	Tschchartinfoarea3Dscale                             *Chart3DVectorArchive          `protobuf:"bytes,305,opt,name=tschchartinfoarea3dscale" json:"tschchartinfoarea3dscale,omitempty"`
	Tschchartinfopie3Dscale                              *Chart3DVectorArchive          `protobuf:"bytes,306,opt,name=tschchartinfopie3dscale" json:"tschchartinfopie3dscale,omitempty"`
	Tschchartinfodefault3Dviewport                       *Chart3DVectorArchive          `protobuf:"bytes,313,opt,name=tschchartinfodefault3dviewport" json:"tschchartinfodefault3dviewport,omitempty"`
	Tschchartinfodefaultdeprecated3Dlightingpackage      *Chart3DLightingPackageArchive `protobuf:"bytes,320,opt,name=tschchartinfodefaultdeprecated3dlightingpackage" json:"tschchartinfodefaultdeprecated3dlightingpackage,omitempty"`
	Tschchartinfocolumndeprecated3Dlightingpackage       *Chart3DLightingPackageArchive `protobuf:"bytes,321,opt,name=tschchartinfocolumndeprecated3dlightingpackage" json:"tschchartinfocolumndeprecated3dlightingpackage,omitempty"`
	Tschchartinfobardeprecated3Dlightingpackage          *Chart3DLightingPackageArchive `protobuf:"bytes,322,opt,name=tschchartinfobardeprecated3dlightingpackage" json:"tschchartinfobardeprecated3dlightingpackage,omitempty"`
	Tschchartinfolinedeprecated3Dlightingpackage         *Chart3DLightingPackageArchive `protobuf:"bytes,323,opt,name=tschchartinfolinedeprecated3dlightingpackage" json:"tschchartinfolinedeprecated3dlightingpackage,omitempty"`
	Tschchartinfoareadeprecated3Dlightingpackage         *Chart3DLightingPackageArchive `protobuf:"bytes,324,opt,name=tschchartinfoareadeprecated3dlightingpackage" json:"tschchartinfoareadeprecated3dlightingpackage,omitempty"`
	Tschchartinfopiedeprecated3Dlightingpackage          *Chart3DLightingPackageArchive `protobuf:"bytes,325,opt,name=tschchartinfopiedeprecated3dlightingpackage" json:"tschchartinfopiedeprecated3dlightingpackage,omitempty"`
	Tschchartinfodefaultskiphiddendata                   *bool                          `protobuf:"varint,326,opt,name=tschchartinfodefaultskiphiddendata" json:"tschchartinfodefaultskiphiddendata,omitempty"`
	Tschchartinfodefault3Dbeveledges                     *bool                          `protobuf:"varint,327,opt,name=tschchartinfodefault3dbeveledges" json:"tschchartinfodefault3dbeveledges,omitempty"`
	Tschchartinfodefault3Dbarshape                       *int32                         `protobuf:"varint,336,opt,name=tschchartinfodefault3dbarshape" json:"tschchartinfodefault3dbarshape,omitempty"`
	Tschchartinfodefault3Dintersetdepthgap               *float32                       `protobuf:"fixed32,331,opt,name=tschchartinfodefault3dintersetdepthgap" json:"tschchartinfodefault3dintersetdepthgap,omitempty"`
}

func (x *TSCHPreUFFChartNonStyleArchive) Reset() {
	*x = TSCHPreUFFChartNonStyleArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHPreUFFArchives_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSCHPreUFFChartNonStyleArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSCHPreUFFChartNonStyleArchive) ProtoMessage() {}

func (x *TSCHPreUFFChartNonStyleArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHPreUFFArchives_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSCHPreUFFChartNonStyleArchive.ProtoReflect.Descriptor instead.
func (*TSCHPreUFFChartNonStyleArchive) Descriptor() ([]byte, []int) {
	return file_TSCHPreUFFArchives_proto_rawDescGZIP(), []int{6}
}

func (x *TSCHPreUFFChartNonStyleArchive) GetSuper() *StyleArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *TSCHPreUFFChartNonStyleArchive) GetTschchartinfodefaulttitle() string {
	if x != nil && x.Tschchartinfodefaulttitle != nil {
		return *x.Tschchartinfodefaulttitle
	}
	return ""
}

func (x *TSCHPreUFFChartNonStyleArchive) GetTschchartinfodefaultshowlegend() bool {
	if x != nil && x.Tschchartinfodefaultshowlegend != nil {
		return *x.Tschchartinfodefaultshowlegend
	}
	return false
}

func (x *TSCHPreUFFChartNonStyleArchive) GetTschchartinfodefaultpiestartangle() float32 {
	if x != nil && x.Tschchartinfodefaultpiestartangle != nil {
		return *x.Tschchartinfodefaultpiestartangle
	}
	return 0
}

func (x *TSCHPreUFFChartNonStyleArchive) GetTschchartinfodefaultshowtitle() bool {
	if x != nil && x.Tschchartinfodefaultshowtitle != nil {
		return *x.Tschchartinfodefaultshowtitle
	}
	return false
}

func (x *TSCHPreUFFChartNonStyleArchive) GetTschchartinfodefaultdeprecatedagainmainfontnamedsize() int32 {
	if x != nil && x.Tschchartinfodefaultdeprecatedagainmainfontnamedsize != nil {
		return *x.Tschchartinfodefaultdeprecatedagainmainfontnamedsize
	}
	return 0
}

func (x *TSCHPreUFFChartNonStyleArchive) GetTschchartinfodefault3Drotation() *Chart3DVectorArchive {
	if x != nil {
		return x.Tschchartinfodefault3Drotation
	}
	return nil
}

func (x *TSCHPreUFFChartNonStyleArchive) GetTschchartinfodefault3Dscale() *Chart3DVectorArchive {
	if x != nil {
		return x.Tschchartinfodefault3Dscale
	}
	return nil
}

func (x *TSCHPreUFFChartNonStyleArchive) GetTschchartinfocolumn3Dscale() *Chart3DVectorArchive {
	if x != nil {
		return x.Tschchartinfocolumn3Dscale
	}
	return nil
}

func (x *TSCHPreUFFChartNonStyleArchive) GetTschchartinfobar3Dscale() *Chart3DVectorArchive {
	if x != nil {
		return x.Tschchartinfobar3Dscale
	}
	return nil
}

func (x *TSCHPreUFFChartNonStyleArchive) GetTschchartinfoline3Dscale() *Chart3DVectorArchive {
	if x != nil {
		return x.Tschchartinfoline3Dscale
	}
	return nil
}

func (x *TSCHPreUFFChartNonStyleArchive) GetTschchartinfoarea3Dscale() *Chart3DVectorArchive {
	if x != nil {
		return x.Tschchartinfoarea3Dscale
	}
	return nil
}

func (x *TSCHPreUFFChartNonStyleArchive) GetTschchartinfopie3Dscale() *Chart3DVectorArchive {
	if x != nil {
		return x.Tschchartinfopie3Dscale
	}
	return nil
}

func (x *TSCHPreUFFChartNonStyleArchive) GetTschchartinfodefault3Dviewport() *Chart3DVectorArchive {
	if x != nil {
		return x.Tschchartinfodefault3Dviewport
	}
	return nil
}

func (x *TSCHPreUFFChartNonStyleArchive) GetTschchartinfodefaultdeprecated3Dlightingpackage() *Chart3DLightingPackageArchive {
	if x != nil {
		return x.Tschchartinfodefaultdeprecated3Dlightingpackage
	}
	return nil
}

func (x *TSCHPreUFFChartNonStyleArchive) GetTschchartinfocolumndeprecated3Dlightingpackage() *Chart3DLightingPackageArchive {
	if x != nil {
		return x.Tschchartinfocolumndeprecated3Dlightingpackage
	}
	return nil
}

func (x *TSCHPreUFFChartNonStyleArchive) GetTschchartinfobardeprecated3Dlightingpackage() *Chart3DLightingPackageArchive {
	if x != nil {
		return x.Tschchartinfobardeprecated3Dlightingpackage
	}
	return nil
}

func (x *TSCHPreUFFChartNonStyleArchive) GetTschchartinfolinedeprecated3Dlightingpackage() *Chart3DLightingPackageArchive {
	if x != nil {
		return x.Tschchartinfolinedeprecated3Dlightingpackage
	}
	return nil
}

func (x *TSCHPreUFFChartNonStyleArchive) GetTschchartinfoareadeprecated3Dlightingpackage() *Chart3DLightingPackageArchive {
	if x != nil {
		return x.Tschchartinfoareadeprecated3Dlightingpackage
	}
	return nil
}

func (x *TSCHPreUFFChartNonStyleArchive) GetTschchartinfopiedeprecated3Dlightingpackage() *Chart3DLightingPackageArchive {
	if x != nil {
		return x.Tschchartinfopiedeprecated3Dlightingpackage
	}
	return nil
}

func (x *TSCHPreUFFChartNonStyleArchive) GetTschchartinfodefaultskiphiddendata() bool {
	if x != nil && x.Tschchartinfodefaultskiphiddendata != nil {
		return *x.Tschchartinfodefaultskiphiddendata
	}
	return false
}

func (x *TSCHPreUFFChartNonStyleArchive) GetTschchartinfodefault3Dbeveledges() bool {
	if x != nil && x.Tschchartinfodefault3Dbeveledges != nil {
		return *x.Tschchartinfodefault3Dbeveledges
	}
	return false
}

func (x *TSCHPreUFFChartNonStyleArchive) GetTschchartinfodefault3Dbarshape() int32 {
	if x != nil && x.Tschchartinfodefault3Dbarshape != nil {
		return *x.Tschchartinfodefault3Dbarshape
	}
	return 0
}

func (x *TSCHPreUFFChartNonStyleArchive) GetTschchartinfodefault3Dintersetdepthgap() float32 {
	if x != nil && x.Tschchartinfodefault3Dintersetdepthgap != nil {
		return *x.Tschchartinfodefault3Dintersetdepthgap
	}
	return 0
}

type TSCHPreUFFLegendStyleArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                                          *StyleArchive  `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Tschlegendmodeldefaultfill                     *FillArchive   `protobuf:"bytes,10,opt,name=tschlegendmodeldefaultfill" json:"tschlegendmodeldefaultfill,omitempty"`
	Tschlegendmodeldefaultstroke                   *StrokeArchive `protobuf:"bytes,11,opt,name=tschlegendmodeldefaultstroke" json:"tschlegendmodeldefaultstroke,omitempty"`
	Tschlegendmodeldefaultshadow                   *ShadowArchive `protobuf:"bytes,14,opt,name=tschlegendmodeldefaultshadow" json:"tschlegendmodeldefaultshadow,omitempty"`
	Tschlegendmodeldefaultopacity                  *float32       `protobuf:"fixed32,15,opt,name=tschlegendmodeldefaultopacity" json:"tschlegendmodeldefaultopacity,omitempty"`
	Tschlegendmodeldefaultlabelparagraphstyleindex *int32         `protobuf:"varint,16,opt,name=tschlegendmodeldefaultlabelparagraphstyleindex" json:"tschlegendmodeldefaultlabelparagraphstyleindex,omitempty"`
}

func (x *TSCHPreUFFLegendStyleArchive) Reset() {
	*x = TSCHPreUFFLegendStyleArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHPreUFFArchives_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSCHPreUFFLegendStyleArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSCHPreUFFLegendStyleArchive) ProtoMessage() {}

func (x *TSCHPreUFFLegendStyleArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHPreUFFArchives_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSCHPreUFFLegendStyleArchive.ProtoReflect.Descriptor instead.
func (*TSCHPreUFFLegendStyleArchive) Descriptor() ([]byte, []int) {
	return file_TSCHPreUFFArchives_proto_rawDescGZIP(), []int{7}
}

func (x *TSCHPreUFFLegendStyleArchive) GetSuper() *StyleArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *TSCHPreUFFLegendStyleArchive) GetTschlegendmodeldefaultfill() *FillArchive {
	if x != nil {
		return x.Tschlegendmodeldefaultfill
	}
	return nil
}

func (x *TSCHPreUFFLegendStyleArchive) GetTschlegendmodeldefaultstroke() *StrokeArchive {
	if x != nil {
		return x.Tschlegendmodeldefaultstroke
	}
	return nil
}

func (x *TSCHPreUFFLegendStyleArchive) GetTschlegendmodeldefaultshadow() *ShadowArchive {
	if x != nil {
		return x.Tschlegendmodeldefaultshadow
	}
	return nil
}

func (x *TSCHPreUFFLegendStyleArchive) GetTschlegendmodeldefaultopacity() float32 {
	if x != nil && x.Tschlegendmodeldefaultopacity != nil {
		return *x.Tschlegendmodeldefaultopacity
	}
	return 0
}

func (x *TSCHPreUFFLegendStyleArchive) GetTschlegendmodeldefaultlabelparagraphstyleindex() int32 {
	if x != nil && x.Tschlegendmodeldefaultlabelparagraphstyleindex != nil {
		return *x.Tschlegendmodeldefaultlabelparagraphstyleindex
	}
	return 0
}

type TSCHPreUFFLegendNonStyleArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *StyleArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
}

func (x *TSCHPreUFFLegendNonStyleArchive) Reset() {
	*x = TSCHPreUFFLegendNonStyleArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHPreUFFArchives_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSCHPreUFFLegendNonStyleArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSCHPreUFFLegendNonStyleArchive) ProtoMessage() {}

func (x *TSCHPreUFFLegendNonStyleArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHPreUFFArchives_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSCHPreUFFLegendNonStyleArchive.ProtoReflect.Descriptor instead.
func (*TSCHPreUFFLegendNonStyleArchive) Descriptor() ([]byte, []int) {
	return file_TSCHPreUFFArchives_proto_rawDescGZIP(), []int{8}
}

func (x *TSCHPreUFFLegendNonStyleArchive) GetSuper() *StyleArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

type TSCHPreUFFChartAxisStyleArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                                         *StyleArchive  `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Tschchartaxisvalueshowmajorgridlines          *bool          `protobuf:"varint,10,opt,name=tschchartaxisvalueshowmajorgridlines" json:"tschchartaxisvalueshowmajorgridlines,omitempty"`
	Tschchartaxisvalueshowminorgridlines          *bool          `protobuf:"varint,11,opt,name=tschchartaxisvalueshowminorgridlines" json:"tschchartaxisvalueshowminorgridlines,omitempty"`
	Tschchartaxisvaluemajorgridlinestroke         *StrokeArchive `protobuf:"bytes,12,opt,name=tschchartaxisvaluemajorgridlinestroke" json:"tschchartaxisvaluemajorgridlinestroke,omitempty"`
	Tschchartaxisvalueminorgridlinestroke         *StrokeArchive `protobuf:"bytes,13,opt,name=tschchartaxisvalueminorgridlinestroke" json:"tschchartaxisvalueminorgridlinestroke,omitempty"`
	Tschchartaxisvaluetickmarklocation            *int32         `protobuf:"varint,14,opt,name=tschchartaxisvaluetickmarklocation" json:"tschchartaxisvaluetickmarklocation,omitempty"`
	Tschchartaxisvalueshowmajortickmarks          *bool          `protobuf:"varint,15,opt,name=tschchartaxisvalueshowmajortickmarks" json:"tschchartaxisvalueshowmajortickmarks,omitempty"`
	Tschchartaxisvalueshowminortickmarks          *bool          `protobuf:"varint,16,opt,name=tschchartaxisvalueshowminortickmarks" json:"tschchartaxisvalueshowminortickmarks,omitempty"`
	Tschchartaxisvaluelabelsorientation           *float32       `protobuf:"fixed32,17,opt,name=tschchartaxisvaluelabelsorientation" json:"tschchartaxisvaluelabelsorientation,omitempty"`
	Tschchartaxisvalueshowminimumlabel            *bool          `protobuf:"varint,18,opt,name=tschchartaxisvalueshowminimumlabel" json:"tschchartaxisvalueshowminimumlabel,omitempty"`
	Tschchartaxisvaluemajorgridlineshadow         *ShadowArchive `protobuf:"bytes,21,opt,name=tschchartaxisvaluemajorgridlineshadow" json:"tschchartaxisvaluemajorgridlineshadow,omitempty"`
	Tschchartaxisvalueminorgridlineshadow         *ShadowArchive `protobuf:"bytes,22,opt,name=tschchartaxisvalueminorgridlineshadow" json:"tschchartaxisvalueminorgridlineshadow,omitempty"`
	Tschchartaxisvaluemajorgridlineopacity        *float32       `protobuf:"fixed32,23,opt,name=tschchartaxisvaluemajorgridlineopacity" json:"tschchartaxisvaluemajorgridlineopacity,omitempty"`
	Tschchartaxisvalueminorgridlineopacity        *float32       `protobuf:"fixed32,24,opt,name=tschchartaxisvalueminorgridlineopacity" json:"tschchartaxisvalueminorgridlineopacity,omitempty"`
	Tschchartaxisvalueshowaxis                    *bool          `protobuf:"varint,25,opt,name=tschchartaxisvalueshowaxis" json:"tschchartaxisvalueshowaxis,omitempty"`
	Tschchartaxiscategoryshowmajorgridlines       *bool          `protobuf:"varint,50,opt,name=tschchartaxiscategoryshowmajorgridlines" json:"tschchartaxiscategoryshowmajorgridlines,omitempty"`
	Tschchartaxiscategoryshowminorgridlines       *bool          `protobuf:"varint,51,opt,name=tschchartaxiscategoryshowminorgridlines" json:"tschchartaxiscategoryshowminorgridlines,omitempty"`
	Tschchartaxiscategorymajorgridlinestroke      *StrokeArchive `protobuf:"bytes,52,opt,name=tschchartaxiscategorymajorgridlinestroke" json:"tschchartaxiscategorymajorgridlinestroke,omitempty"`
	Tschchartaxiscategoryminorgridlinestroke      *StrokeArchive `protobuf:"bytes,53,opt,name=tschchartaxiscategoryminorgridlinestroke" json:"tschchartaxiscategoryminorgridlinestroke,omitempty"`
	Tschchartaxiscategorytickmarklocation         *int32         `protobuf:"varint,54,opt,name=tschchartaxiscategorytickmarklocation" json:"tschchartaxiscategorytickmarklocation,omitempty"`
	Tschchartaxiscategoryshowmajortickmarks       *bool          `protobuf:"varint,55,opt,name=tschchartaxiscategoryshowmajortickmarks" json:"tschchartaxiscategoryshowmajortickmarks,omitempty"`
	Tschchartaxiscategoryshowminortickmarks       *bool          `protobuf:"varint,56,opt,name=tschchartaxiscategoryshowminortickmarks" json:"tschchartaxiscategoryshowminortickmarks,omitempty"`
	Tschchartaxiscategorylabelsorientation        *float32       `protobuf:"fixed32,57,opt,name=tschchartaxiscategorylabelsorientation" json:"tschchartaxiscategorylabelsorientation,omitempty"`
	Tschchartaxiscategoryhorizontalspacing        *int32         `protobuf:"varint,58,opt,name=tschchartaxiscategoryhorizontalspacing" json:"tschchartaxiscategoryhorizontalspacing,omitempty"`
	Tschchartaxiscategoryverticalspacing          *int32         `protobuf:"varint,59,opt,name=tschchartaxiscategoryverticalspacing" json:"tschchartaxiscategoryverticalspacing,omitempty"`
	Tschchartaxiscategoryshowlastlabel            *bool          `protobuf:"varint,60,opt,name=tschchartaxiscategoryshowlastlabel" json:"tschchartaxiscategoryshowlastlabel,omitempty"`
	Tschchartaxiscategorymajorgridlineshadow      *ShadowArchive `protobuf:"bytes,63,opt,name=tschchartaxiscategorymajorgridlineshadow" json:"tschchartaxiscategorymajorgridlineshadow,omitempty"`
	Tschchartaxiscategoryminorgridlineshadow      *ShadowArchive `protobuf:"bytes,64,opt,name=tschchartaxiscategoryminorgridlineshadow" json:"tschchartaxiscategoryminorgridlineshadow,omitempty"`
	Tschchartaxiscategorymajorgridlineopacity     *float32       `protobuf:"fixed32,65,opt,name=tschchartaxiscategorymajorgridlineopacity" json:"tschchartaxiscategorymajorgridlineopacity,omitempty"`
	Tschchartaxiscategoryminorgridlineopacity     *float32       `protobuf:"fixed32,66,opt,name=tschchartaxiscategoryminorgridlineopacity" json:"tschchartaxiscategoryminorgridlineopacity,omitempty"`
	Tschchartaxiscategoryshowaxis                 *bool          `protobuf:"varint,67,opt,name=tschchartaxiscategoryshowaxis" json:"tschchartaxiscategoryshowaxis,omitempty"`
	Tschchartaxisdefaultlabelsorientation         *float32       `protobuf:"fixed32,102,opt,name=tschchartaxisdefaultlabelsorientation" json:"tschchartaxisdefaultlabelsorientation,omitempty"`
	Tschchartaxisdefaulttitleparagraphstyleindex  *int32         `protobuf:"varint,110,opt,name=tschchartaxisdefaulttitleparagraphstyleindex" json:"tschchartaxisdefaulttitleparagraphstyleindex,omitempty"`
	Tschchartaxisdefaultlabelparagraphstyleindex  *int32         `protobuf:"varint,111,opt,name=tschchartaxisdefaultlabelparagraphstyleindex" json:"tschchartaxisdefaultlabelparagraphstyleindex,omitempty"`
	Tschchartaxisvaluetitleparagraphstyleindex    *int32         `protobuf:"varint,112,opt,name=tschchartaxisvaluetitleparagraphstyleindex" json:"tschchartaxisvaluetitleparagraphstyleindex,omitempty"`
	Tschchartaxisvaluelabelparagraphstyleindex    *int32         `protobuf:"varint,113,opt,name=tschchartaxisvaluelabelparagraphstyleindex" json:"tschchartaxisvaluelabelparagraphstyleindex,omitempty"`
	Tschchartaxiscategorytitleparagraphstyleindex *int32         `protobuf:"varint,114,opt,name=tschchartaxiscategorytitleparagraphstyleindex" json:"tschchartaxiscategorytitleparagraphstyleindex,omitempty"`
	Tschchartaxiscategorylabelparagraphstyleindex *int32         `protobuf:"varint,115,opt,name=tschchartaxiscategorylabelparagraphstyleindex" json:"tschchartaxiscategorylabelparagraphstyleindex,omitempty"`
	Tschchartaxisvalue3Dgridlinestroke            *StrokeArchive `protobuf:"bytes,331,opt,name=tschchartaxisvalue3dgridlinestroke" json:"tschchartaxisvalue3dgridlinestroke,omitempty"`
	Tschchartaxiscategory3Dgridlinestroke         *StrokeArchive `protobuf:"bytes,332,opt,name=tschchartaxiscategory3dgridlinestroke" json:"tschchartaxiscategory3dgridlinestroke,omitempty"`
	Tschchartaxisvalue3Dgridlineopacity           *float32       `protobuf:"fixed32,333,opt,name=tschchartaxisvalue3dgridlineopacity" json:"tschchartaxisvalue3dgridlineopacity,omitempty"`
	Tschchartaxiscategory3Dgridlineopacity        *float32       `protobuf:"fixed32,334,opt,name=tschchartaxiscategory3dgridlineopacity" json:"tschchartaxiscategory3dgridlineopacity,omitempty"`
}

func (x *TSCHPreUFFChartAxisStyleArchive) Reset() {
	*x = TSCHPreUFFChartAxisStyleArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHPreUFFArchives_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSCHPreUFFChartAxisStyleArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSCHPreUFFChartAxisStyleArchive) ProtoMessage() {}

func (x *TSCHPreUFFChartAxisStyleArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHPreUFFArchives_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSCHPreUFFChartAxisStyleArchive.ProtoReflect.Descriptor instead.
func (*TSCHPreUFFChartAxisStyleArchive) Descriptor() ([]byte, []int) {
	return file_TSCHPreUFFArchives_proto_rawDescGZIP(), []int{9}
}

func (x *TSCHPreUFFChartAxisStyleArchive) GetSuper() *StyleArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *TSCHPreUFFChartAxisStyleArchive) GetTschchartaxisvalueshowmajorgridlines() bool {
	if x != nil && x.Tschchartaxisvalueshowmajorgridlines != nil {
		return *x.Tschchartaxisvalueshowmajorgridlines
	}
	return false
}

func (x *TSCHPreUFFChartAxisStyleArchive) GetTschchartaxisvalueshowminorgridlines() bool {
	if x != nil && x.Tschchartaxisvalueshowminorgridlines != nil {
		return *x.Tschchartaxisvalueshowminorgridlines
	}
	return false
}

func (x *TSCHPreUFFChartAxisStyleArchive) GetTschchartaxisvaluemajorgridlinestroke() *StrokeArchive {
	if x != nil {
		return x.Tschchartaxisvaluemajorgridlinestroke
	}
	return nil
}

func (x *TSCHPreUFFChartAxisStyleArchive) GetTschchartaxisvalueminorgridlinestroke() *StrokeArchive {
	if x != nil {
		return x.Tschchartaxisvalueminorgridlinestroke
	}
	return nil
}

func (x *TSCHPreUFFChartAxisStyleArchive) GetTschchartaxisvaluetickmarklocation() int32 {
	if x != nil && x.Tschchartaxisvaluetickmarklocation != nil {
		return *x.Tschchartaxisvaluetickmarklocation
	}
	return 0
}

func (x *TSCHPreUFFChartAxisStyleArchive) GetTschchartaxisvalueshowmajortickmarks() bool {
	if x != nil && x.Tschchartaxisvalueshowmajortickmarks != nil {
		return *x.Tschchartaxisvalueshowmajortickmarks
	}
	return false
}

func (x *TSCHPreUFFChartAxisStyleArchive) GetTschchartaxisvalueshowminortickmarks() bool {
	if x != nil && x.Tschchartaxisvalueshowminortickmarks != nil {
		return *x.Tschchartaxisvalueshowminortickmarks
	}
	return false
}

func (x *TSCHPreUFFChartAxisStyleArchive) GetTschchartaxisvaluelabelsorientation() float32 {
	if x != nil && x.Tschchartaxisvaluelabelsorientation != nil {
		return *x.Tschchartaxisvaluelabelsorientation
	}
	return 0
}

func (x *TSCHPreUFFChartAxisStyleArchive) GetTschchartaxisvalueshowminimumlabel() bool {
	if x != nil && x.Tschchartaxisvalueshowminimumlabel != nil {
		return *x.Tschchartaxisvalueshowminimumlabel
	}
	return false
}

func (x *TSCHPreUFFChartAxisStyleArchive) GetTschchartaxisvaluemajorgridlineshadow() *ShadowArchive {
	if x != nil {
		return x.Tschchartaxisvaluemajorgridlineshadow
	}
	return nil
}

func (x *TSCHPreUFFChartAxisStyleArchive) GetTschchartaxisvalueminorgridlineshadow() *ShadowArchive {
	if x != nil {
		return x.Tschchartaxisvalueminorgridlineshadow
	}
	return nil
}

func (x *TSCHPreUFFChartAxisStyleArchive) GetTschchartaxisvaluemajorgridlineopacity() float32 {
	if x != nil && x.Tschchartaxisvaluemajorgridlineopacity != nil {
		return *x.Tschchartaxisvaluemajorgridlineopacity
	}
	return 0
}

func (x *TSCHPreUFFChartAxisStyleArchive) GetTschchartaxisvalueminorgridlineopacity() float32 {
	if x != nil && x.Tschchartaxisvalueminorgridlineopacity != nil {
		return *x.Tschchartaxisvalueminorgridlineopacity
	}
	return 0
}

func (x *TSCHPreUFFChartAxisStyleArchive) GetTschchartaxisvalueshowaxis() bool {
	if x != nil && x.Tschchartaxisvalueshowaxis != nil {
		return *x.Tschchartaxisvalueshowaxis
	}
	return false
}

func (x *TSCHPreUFFChartAxisStyleArchive) GetTschchartaxiscategoryshowmajorgridlines() bool {
	if x != nil && x.Tschchartaxiscategoryshowmajorgridlines != nil {
		return *x.Tschchartaxiscategoryshowmajorgridlines
	}
	return false
}

func (x *TSCHPreUFFChartAxisStyleArchive) GetTschchartaxiscategoryshowminorgridlines() bool {
	if x != nil && x.Tschchartaxiscategoryshowminorgridlines != nil {
		return *x.Tschchartaxiscategoryshowminorgridlines
	}
	return false
}

func (x *TSCHPreUFFChartAxisStyleArchive) GetTschchartaxiscategorymajorgridlinestroke() *StrokeArchive {
	if x != nil {
		return x.Tschchartaxiscategorymajorgridlinestroke
	}
	return nil
}

func (x *TSCHPreUFFChartAxisStyleArchive) GetTschchartaxiscategoryminorgridlinestroke() *StrokeArchive {
	if x != nil {
		return x.Tschchartaxiscategoryminorgridlinestroke
	}
	return nil
}

func (x *TSCHPreUFFChartAxisStyleArchive) GetTschchartaxiscategorytickmarklocation() int32 {
	if x != nil && x.Tschchartaxiscategorytickmarklocation != nil {
		return *x.Tschchartaxiscategorytickmarklocation
	}
	return 0
}

func (x *TSCHPreUFFChartAxisStyleArchive) GetTschchartaxiscategoryshowmajortickmarks() bool {
	if x != nil && x.Tschchartaxiscategoryshowmajortickmarks != nil {
		return *x.Tschchartaxiscategoryshowmajortickmarks
	}
	return false
}

func (x *TSCHPreUFFChartAxisStyleArchive) GetTschchartaxiscategoryshowminortickmarks() bool {
	if x != nil && x.Tschchartaxiscategoryshowminortickmarks != nil {
		return *x.Tschchartaxiscategoryshowminortickmarks
	}
	return false
}

func (x *TSCHPreUFFChartAxisStyleArchive) GetTschchartaxiscategorylabelsorientation() float32 {
	if x != nil && x.Tschchartaxiscategorylabelsorientation != nil {
		return *x.Tschchartaxiscategorylabelsorientation
	}
	return 0
}

func (x *TSCHPreUFFChartAxisStyleArchive) GetTschchartaxiscategoryhorizontalspacing() int32 {
	if x != nil && x.Tschchartaxiscategoryhorizontalspacing != nil {
		return *x.Tschchartaxiscategoryhorizontalspacing
	}
	return 0
}

func (x *TSCHPreUFFChartAxisStyleArchive) GetTschchartaxiscategoryverticalspacing() int32 {
	if x != nil && x.Tschchartaxiscategoryverticalspacing != nil {
		return *x.Tschchartaxiscategoryverticalspacing
	}
	return 0
}

func (x *TSCHPreUFFChartAxisStyleArchive) GetTschchartaxiscategoryshowlastlabel() bool {
	if x != nil && x.Tschchartaxiscategoryshowlastlabel != nil {
		return *x.Tschchartaxiscategoryshowlastlabel
	}
	return false
}

func (x *TSCHPreUFFChartAxisStyleArchive) GetTschchartaxiscategorymajorgridlineshadow() *ShadowArchive {
	if x != nil {
		return x.Tschchartaxiscategorymajorgridlineshadow
	}
	return nil
}

func (x *TSCHPreUFFChartAxisStyleArchive) GetTschchartaxiscategoryminorgridlineshadow() *ShadowArchive {
	if x != nil {
		return x.Tschchartaxiscategoryminorgridlineshadow
	}
	return nil
}

func (x *TSCHPreUFFChartAxisStyleArchive) GetTschchartaxiscategorymajorgridlineopacity() float32 {
	if x != nil && x.Tschchartaxiscategorymajorgridlineopacity != nil {
		return *x.Tschchartaxiscategorymajorgridlineopacity
	}
	return 0
}

func (x *TSCHPreUFFChartAxisStyleArchive) GetTschchartaxiscategoryminorgridlineopacity() float32 {
	if x != nil && x.Tschchartaxiscategoryminorgridlineopacity != nil {
		return *x.Tschchartaxiscategoryminorgridlineopacity
	}
	return 0
}

func (x *TSCHPreUFFChartAxisStyleArchive) GetTschchartaxiscategoryshowaxis() bool {
	if x != nil && x.Tschchartaxiscategoryshowaxis != nil {
		return *x.Tschchartaxiscategoryshowaxis
	}
	return false
}

func (x *TSCHPreUFFChartAxisStyleArchive) GetTschchartaxisdefaultlabelsorientation() float32 {
	if x != nil && x.Tschchartaxisdefaultlabelsorientation != nil {
		return *x.Tschchartaxisdefaultlabelsorientation
	}
	return 0
}

func (x *TSCHPreUFFChartAxisStyleArchive) GetTschchartaxisdefaulttitleparagraphstyleindex() int32 {
	if x != nil && x.Tschchartaxisdefaulttitleparagraphstyleindex != nil {
		return *x.Tschchartaxisdefaulttitleparagraphstyleindex
	}
	return 0
}

func (x *TSCHPreUFFChartAxisStyleArchive) GetTschchartaxisdefaultlabelparagraphstyleindex() int32 {
	if x != nil && x.Tschchartaxisdefaultlabelparagraphstyleindex != nil {
		return *x.Tschchartaxisdefaultlabelparagraphstyleindex
	}
	return 0
}

func (x *TSCHPreUFFChartAxisStyleArchive) GetTschchartaxisvaluetitleparagraphstyleindex() int32 {
	if x != nil && x.Tschchartaxisvaluetitleparagraphstyleindex != nil {
		return *x.Tschchartaxisvaluetitleparagraphstyleindex
	}
	return 0
}

func (x *TSCHPreUFFChartAxisStyleArchive) GetTschchartaxisvaluelabelparagraphstyleindex() int32 {
	if x != nil && x.Tschchartaxisvaluelabelparagraphstyleindex != nil {
		return *x.Tschchartaxisvaluelabelparagraphstyleindex
	}
	return 0
}

func (x *TSCHPreUFFChartAxisStyleArchive) GetTschchartaxiscategorytitleparagraphstyleindex() int32 {
	if x != nil && x.Tschchartaxiscategorytitleparagraphstyleindex != nil {
		return *x.Tschchartaxiscategorytitleparagraphstyleindex
	}
	return 0
}

func (x *TSCHPreUFFChartAxisStyleArchive) GetTschchartaxiscategorylabelparagraphstyleindex() int32 {
	if x != nil && x.Tschchartaxiscategorylabelparagraphstyleindex != nil {
		return *x.Tschchartaxiscategorylabelparagraphstyleindex
	}
	return 0
}

func (x *TSCHPreUFFChartAxisStyleArchive) GetTschchartaxisvalue3Dgridlinestroke() *StrokeArchive {
	if x != nil {
		return x.Tschchartaxisvalue3Dgridlinestroke
	}
	return nil
}

func (x *TSCHPreUFFChartAxisStyleArchive) GetTschchartaxiscategory3Dgridlinestroke() *StrokeArchive {
	if x != nil {
		return x.Tschchartaxiscategory3Dgridlinestroke
	}
	return nil
}

func (x *TSCHPreUFFChartAxisStyleArchive) GetTschchartaxisvalue3Dgridlineopacity() float32 {
	if x != nil && x.Tschchartaxisvalue3Dgridlineopacity != nil {
		return *x.Tschchartaxisvalue3Dgridlineopacity
	}
	return 0
}

func (x *TSCHPreUFFChartAxisStyleArchive) GetTschchartaxiscategory3Dgridlineopacity() float32 {
	if x != nil && x.Tschchartaxiscategory3Dgridlineopacity != nil {
		return *x.Tschchartaxiscategory3Dgridlineopacity
	}
	return 0
}

type TSCHPreUFFChartAxisNonStyleArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                                    *StyleArchive                `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Tschchartaxisdefaultusermin              *ChartsNSNumberDoubleArchive `protobuf:"bytes,11,opt,name=tschchartaxisdefaultusermin" json:"tschchartaxisdefaultusermin,omitempty"`
	Tschchartaxisdefaultusermax              *ChartsNSNumberDoubleArchive `protobuf:"bytes,12,opt,name=tschchartaxisdefaultusermax" json:"tschchartaxisdefaultusermax,omitempty"`
	Tschchartaxisdefaultnumberformat         *ChartsNumberFormatArchive   `protobuf:"bytes,13,opt,name=tschchartaxisdefaultnumberformat" json:"tschchartaxisdefaultnumberformat,omitempty"`
	Tschchartaxisdefaultshowlabels           *bool                        `protobuf:"varint,14,opt,name=tschchartaxisdefaultshowlabels" json:"tschchartaxisdefaultshowlabels,omitempty"`
	Tschchartaxisvaluenumberofminorgridlines *int32                       `protobuf:"varint,50,opt,name=tschchartaxisvaluenumberofminorgridlines" json:"tschchartaxisvaluenumberofminorgridlines,omitempty"`
	Tschchartaxisvaluescale                  *int32                       `protobuf:"varint,51,opt,name=tschchartaxisvaluescale" json:"tschchartaxisvaluescale,omitempty"`
	Tschchartaxisvaluenumberofdecades        *int32                       `protobuf:"varint,52,opt,name=tschchartaxisvaluenumberofdecades" json:"tschchartaxisvaluenumberofdecades,omitempty"`
	Tschchartaxisvalueshowlabels             *bool                        `protobuf:"varint,53,opt,name=tschchartaxisvalueshowlabels" json:"tschchartaxisvalueshowlabels,omitempty"`
	Tschchartaxisvalueshowtitle              *bool                        `protobuf:"varint,54,opt,name=tschchartaxisvalueshowtitle" json:"tschchartaxisvalueshowtitle,omitempty"`
	Tschchartaxisvaluenumberofmajorgridlines *int32                       `protobuf:"varint,55,opt,name=tschchartaxisvaluenumberofmajorgridlines" json:"tschchartaxisvaluenumberofmajorgridlines,omitempty"`
	Tschchartaxisvaluetitle                  *string                      `protobuf:"bytes,56,opt,name=tschchartaxisvaluetitle" json:"tschchartaxisvaluetitle,omitempty"`
	Tschchartaxiscategoryshowlabels          *bool                        `protobuf:"varint,100,opt,name=tschchartaxiscategoryshowlabels" json:"tschchartaxiscategoryshowlabels,omitempty"`
	Tschchartaxiscategoryshowserieslabels    *bool                        `protobuf:"varint,101,opt,name=tschchartaxiscategoryshowserieslabels" json:"tschchartaxiscategoryshowserieslabels,omitempty"`
	Tschchartaxiscategoryshowtitle           *bool                        `protobuf:"varint,102,opt,name=tschchartaxiscategoryshowtitle" json:"tschchartaxiscategoryshowtitle,omitempty"`
	Tschchartaxiscategorytitle               *string                      `protobuf:"bytes,103,opt,name=tschchartaxiscategorytitle" json:"tschchartaxiscategorytitle,omitempty"`
	Tschchartaxisdefaultnumberformattype     *int32                       `protobuf:"varint,120,opt,name=tschchartaxisdefaultnumberformattype" json:"tschchartaxisdefaultnumberformattype,omitempty"`
	Tschchartaxisdefault3Dlabelposition      *int32                       `protobuf:"varint,336,opt,name=tschchartaxisdefault3dlabelposition" json:"tschchartaxisdefault3dlabelposition,omitempty"`
	Tschchartaxiscategoryplottoedges         *bool                        `protobuf:"varint,116,opt,name=tschchartaxiscategoryplottoedges" json:"tschchartaxiscategoryplottoedges,omitempty"`
}

func (x *TSCHPreUFFChartAxisNonStyleArchive) Reset() {
	*x = TSCHPreUFFChartAxisNonStyleArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHPreUFFArchives_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSCHPreUFFChartAxisNonStyleArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSCHPreUFFChartAxisNonStyleArchive) ProtoMessage() {}

func (x *TSCHPreUFFChartAxisNonStyleArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHPreUFFArchives_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSCHPreUFFChartAxisNonStyleArchive.ProtoReflect.Descriptor instead.
func (*TSCHPreUFFChartAxisNonStyleArchive) Descriptor() ([]byte, []int) {
	return file_TSCHPreUFFArchives_proto_rawDescGZIP(), []int{10}
}

func (x *TSCHPreUFFChartAxisNonStyleArchive) GetSuper() *StyleArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *TSCHPreUFFChartAxisNonStyleArchive) GetTschchartaxisdefaultusermin() *ChartsNSNumberDoubleArchive {
	if x != nil {
		return x.Tschchartaxisdefaultusermin
	}
	return nil
}

func (x *TSCHPreUFFChartAxisNonStyleArchive) GetTschchartaxisdefaultusermax() *ChartsNSNumberDoubleArchive {
	if x != nil {
		return x.Tschchartaxisdefaultusermax
	}
	return nil
}

func (x *TSCHPreUFFChartAxisNonStyleArchive) GetTschchartaxisdefaultnumberformat() *ChartsNumberFormatArchive {
	if x != nil {
		return x.Tschchartaxisdefaultnumberformat
	}
	return nil
}

func (x *TSCHPreUFFChartAxisNonStyleArchive) GetTschchartaxisdefaultshowlabels() bool {
	if x != nil && x.Tschchartaxisdefaultshowlabels != nil {
		return *x.Tschchartaxisdefaultshowlabels
	}
	return false
}

func (x *TSCHPreUFFChartAxisNonStyleArchive) GetTschchartaxisvaluenumberofminorgridlines() int32 {
	if x != nil && x.Tschchartaxisvaluenumberofminorgridlines != nil {
		return *x.Tschchartaxisvaluenumberofminorgridlines
	}
	return 0
}

func (x *TSCHPreUFFChartAxisNonStyleArchive) GetTschchartaxisvaluescale() int32 {
	if x != nil && x.Tschchartaxisvaluescale != nil {
		return *x.Tschchartaxisvaluescale
	}
	return 0
}

func (x *TSCHPreUFFChartAxisNonStyleArchive) GetTschchartaxisvaluenumberofdecades() int32 {
	if x != nil && x.Tschchartaxisvaluenumberofdecades != nil {
		return *x.Tschchartaxisvaluenumberofdecades
	}
	return 0
}

func (x *TSCHPreUFFChartAxisNonStyleArchive) GetTschchartaxisvalueshowlabels() bool {
	if x != nil && x.Tschchartaxisvalueshowlabels != nil {
		return *x.Tschchartaxisvalueshowlabels
	}
	return false
}

func (x *TSCHPreUFFChartAxisNonStyleArchive) GetTschchartaxisvalueshowtitle() bool {
	if x != nil && x.Tschchartaxisvalueshowtitle != nil {
		return *x.Tschchartaxisvalueshowtitle
	}
	return false
}

func (x *TSCHPreUFFChartAxisNonStyleArchive) GetTschchartaxisvaluenumberofmajorgridlines() int32 {
	if x != nil && x.Tschchartaxisvaluenumberofmajorgridlines != nil {
		return *x.Tschchartaxisvaluenumberofmajorgridlines
	}
	return 0
}

func (x *TSCHPreUFFChartAxisNonStyleArchive) GetTschchartaxisvaluetitle() string {
	if x != nil && x.Tschchartaxisvaluetitle != nil {
		return *x.Tschchartaxisvaluetitle
	}
	return ""
}

func (x *TSCHPreUFFChartAxisNonStyleArchive) GetTschchartaxiscategoryshowlabels() bool {
	if x != nil && x.Tschchartaxiscategoryshowlabels != nil {
		return *x.Tschchartaxiscategoryshowlabels
	}
	return false
}

func (x *TSCHPreUFFChartAxisNonStyleArchive) GetTschchartaxiscategoryshowserieslabels() bool {
	if x != nil && x.Tschchartaxiscategoryshowserieslabels != nil {
		return *x.Tschchartaxiscategoryshowserieslabels
	}
	return false
}

func (x *TSCHPreUFFChartAxisNonStyleArchive) GetTschchartaxiscategoryshowtitle() bool {
	if x != nil && x.Tschchartaxiscategoryshowtitle != nil {
		return *x.Tschchartaxiscategoryshowtitle
	}
	return false
}

func (x *TSCHPreUFFChartAxisNonStyleArchive) GetTschchartaxiscategorytitle() string {
	if x != nil && x.Tschchartaxiscategorytitle != nil {
		return *x.Tschchartaxiscategorytitle
	}
	return ""
}

func (x *TSCHPreUFFChartAxisNonStyleArchive) GetTschchartaxisdefaultnumberformattype() int32 {
	if x != nil && x.Tschchartaxisdefaultnumberformattype != nil {
		return *x.Tschchartaxisdefaultnumberformattype
	}
	return 0
}

func (x *TSCHPreUFFChartAxisNonStyleArchive) GetTschchartaxisdefault3Dlabelposition() int32 {
	if x != nil && x.Tschchartaxisdefault3Dlabelposition != nil {
		return *x.Tschchartaxisdefault3Dlabelposition
	}
	return 0
}

func (x *TSCHPreUFFChartAxisNonStyleArchive) GetTschchartaxiscategoryplottoedges() bool {
	if x != nil && x.Tschchartaxiscategoryplottoedges != nil {
		return *x.Tschchartaxiscategoryplottoedges
	}
	return false
}

type TSCHPreUFFChartSeriesStyleArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                                                      *StyleArchive                 `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Tschchartseriesdefaulttrendlineequationparagraphstyleindex *int32                        `protobuf:"varint,201,opt,name=tschchartseriesdefaulttrendlineequationparagraphstyleindex" json:"tschchartseriesdefaulttrendlineequationparagraphstyleindex,omitempty"`
	Tschchartseriesdefaulttrendlinersquaredparagraphstyleindex *int32                        `protobuf:"varint,202,opt,name=tschchartseriesdefaulttrendlinersquaredparagraphstyleindex" json:"tschchartseriesdefaulttrendlinersquaredparagraphstyleindex,omitempty"`
	Tschchartseriesdefaulttrendlineequationopacity             *float32                      `protobuf:"fixed32,205,opt,name=tschchartseriesdefaulttrendlineequationopacity" json:"tschchartseriesdefaulttrendlineequationopacity,omitempty"`
	Tschchartseriesdefaulttrendlinersquaredopacity             *float32                      `protobuf:"fixed32,206,opt,name=tschchartseriesdefaulttrendlinersquaredopacity" json:"tschchartseriesdefaulttrendlinersquaredopacity,omitempty"`
	Tschchartseriesbarfill                                     *FillArchive                  `protobuf:"bytes,10,opt,name=tschchartseriesbarfill" json:"tschchartseriesbarfill,omitempty"`
	Tschchartseriesbarstroke                                   *StrokeArchive                `protobuf:"bytes,11,opt,name=tschchartseriesbarstroke" json:"tschchartseriesbarstroke,omitempty"`
	Tschchartseriesbarvaluelabelposition                       *int32                        `protobuf:"varint,13,opt,name=tschchartseriesbarvaluelabelposition" json:"tschchartseriesbarvaluelabelposition,omitempty"`
	Tschchartserieslinestroke                                  *StrokeArchive                `protobuf:"bytes,16,opt,name=tschchartserieslinestroke" json:"tschchartserieslinestroke,omitempty"`
	Tschchartserieslinesymbolfill                              *FillArchive                  `protobuf:"bytes,17,opt,name=tschchartserieslinesymbolfill" json:"tschchartserieslinesymbolfill,omitempty"`
	Tschchartserieslinesymbolstroke                            *StrokeArchive                `protobuf:"bytes,18,opt,name=tschchartserieslinesymbolstroke" json:"tschchartserieslinesymbolstroke,omitempty"`
	Tschchartserieslinesymbolsize                              *float32                      `protobuf:"fixed32,20,opt,name=tschchartserieslinesymbolsize" json:"tschchartserieslinesymbolsize,omitempty"`
	Tschchartserieslinevaluelabelposition                      *int32                        `protobuf:"varint,22,opt,name=tschchartserieslinevaluelabelposition" json:"tschchartserieslinevaluelabelposition,omitempty"`
	Tschchartseriesareafill                                    *FillArchive                  `protobuf:"bytes,25,opt,name=tschchartseriesareafill" json:"tschchartseriesareafill,omitempty"`
	Tschchartseriesareastroke                                  *StrokeArchive                `protobuf:"bytes,26,opt,name=tschchartseriesareastroke" json:"tschchartseriesareastroke,omitempty"`
	Tschchartseriesareavaluelabelposition                      *int32                        `protobuf:"varint,28,opt,name=tschchartseriesareavaluelabelposition" json:"tschchartseriesareavaluelabelposition,omitempty"`
	Tschchartseriesareasymbolfill                              *FillArchive                  `protobuf:"bytes,29,opt,name=tschchartseriesareasymbolfill" json:"tschchartseriesareasymbolfill,omitempty"`
	Tschchartseriesareasymbolstroke                            *StrokeArchive                `protobuf:"bytes,30,opt,name=tschchartseriesareasymbolstroke" json:"tschchartseriesareasymbolstroke,omitempty"`
	Tschchartseriesareasymbolsize                              *float32                      `protobuf:"fixed32,32,opt,name=tschchartseriesareasymbolsize" json:"tschchartseriesareasymbolsize,omitempty"`
	Tschchartseriespiefill                                     *FillArchive                  `protobuf:"bytes,35,opt,name=tschchartseriespiefill" json:"tschchartseriespiefill,omitempty"`
	Tschchartseriespiestroke                                   *StrokeArchive                `protobuf:"bytes,36,opt,name=tschchartseriespiestroke" json:"tschchartseriespiestroke,omitempty"`
	Tschchartseriesscatterstroke                               *StrokeArchive                `protobuf:"bytes,40,opt,name=tschchartseriesscatterstroke" json:"tschchartseriesscatterstroke,omitempty"`
	Tschchartseriesscattersymbolfill                           *FillArchive                  `protobuf:"bytes,41,opt,name=tschchartseriesscattersymbolfill" json:"tschchartseriesscattersymbolfill,omitempty"`
	Tschchartseriesscattersymbolstroke                         *StrokeArchive                `protobuf:"bytes,42,opt,name=tschchartseriesscattersymbolstroke" json:"tschchartseriesscattersymbolstroke,omitempty"`
	Tschchartseriesscattersymbolsize                           *float32                      `protobuf:"fixed32,44,opt,name=tschchartseriesscattersymbolsize" json:"tschchartseriesscattersymbolsize,omitempty"`
	Tschchartseriesscattervaluelabelposition                   *int32                        `protobuf:"varint,46,opt,name=tschchartseriesscattervaluelabelposition" json:"tschchartseriesscattervaluelabelposition,omitempty"`
	Tschchartseriesdefaultfill                                 *FillArchive                  `protobuf:"bytes,50,opt,name=tschchartseriesdefaultfill" json:"tschchartseriesdefaultfill,omitempty"`
	Tschchartseriesdefaultvaluelabelposition                   *int32                        `protobuf:"varint,52,opt,name=tschchartseriesdefaultvaluelabelposition" json:"tschchartseriesdefaultvaluelabelposition,omitempty"`
	Tschchartseriespiedeprecatedserieslabelson                 *bool                         `protobuf:"varint,60,opt,name=tschchartseriespiedeprecatedserieslabelson" json:"tschchartseriespiedeprecatedserieslabelson,omitempty"`
	Tschchartseriescolumnfill                                  *FillArchive                  `protobuf:"bytes,62,opt,name=tschchartseriescolumnfill" json:"tschchartseriescolumnfill,omitempty"`
	Tschchartseriespieshadow                                   *ShadowArchive                `protobuf:"bytes,100,opt,name=tschchartseriespieshadow" json:"tschchartseriespieshadow,omitempty"`
	Tschchartseriesbarshadow                                   *ShadowArchive                `protobuf:"bytes,101,opt,name=tschchartseriesbarshadow" json:"tschchartseriesbarshadow,omitempty"`
	Tschchartseriesareashadow                                  *ShadowArchive                `protobuf:"bytes,102,opt,name=tschchartseriesareashadow" json:"tschchartseriesareashadow,omitempty"`
	Tschchartseriesscattershadow                               *ShadowArchive                `protobuf:"bytes,103,opt,name=tschchartseriesscattershadow" json:"tschchartseriesscattershadow,omitempty"`
	Tschchartseriesmixedlineshadow                             *ShadowArchive                `protobuf:"bytes,104,opt,name=tschchartseriesmixedlineshadow" json:"tschchartseriesmixedlineshadow,omitempty"`
	Tschchartseriesmixedareashadow                             *ShadowArchive                `protobuf:"bytes,105,opt,name=tschchartseriesmixedareashadow" json:"tschchartseriesmixedareashadow,omitempty"`
	Tschchartseriesmixedcolumnshadow                           *ShadowArchive                `protobuf:"bytes,106,opt,name=tschchartseriesmixedcolumnshadow" json:"tschchartseriesmixedcolumnshadow,omitempty"`
	Tschchartserieslineshadow                                  *ShadowArchive                `protobuf:"bytes,107,opt,name=tschchartserieslineshadow" json:"tschchartserieslineshadow,omitempty"`
	Tschchartseriesdefaultshadow                               *ShadowArchive                `protobuf:"bytes,108,opt,name=tschchartseriesdefaultshadow" json:"tschchartseriesdefaultshadow,omitempty"`
	Tschchartseriesbubblesymbolfill                            *FillArchive                  `protobuf:"bytes,207,opt,name=tschchartseriesbubblesymbolfill" json:"tschchartseriesbubblesymbolfill,omitempty"`
	Tschchartseriesbubblestroke                                *StrokeArchive                `protobuf:"bytes,211,opt,name=tschchartseriesbubblestroke" json:"tschchartseriesbubblestroke,omitempty"`
	Tschchartseriesbubblesymbolstroke                          *StrokeArchive                `protobuf:"bytes,212,opt,name=tschchartseriesbubblesymbolstroke" json:"tschchartseriesbubblesymbolstroke,omitempty"`
	Tschchartseriesbubblevaluelabelposition                    *int32                        `protobuf:"varint,213,opt,name=tschchartseriesbubblevaluelabelposition" json:"tschchartseriesbubblevaluelabelposition,omitempty"`
	Tschchartseriesbubbleshadow                                *ShadowArchive                `protobuf:"bytes,214,opt,name=tschchartseriesbubbleshadow" json:"tschchartseriesbubbleshadow,omitempty"`
	Tschchartseriesbubblesymbolfilluseseriesstroke             *bool                         `protobuf:"varint,215,opt,name=tschchartseriesbubblesymbolfilluseseriesstroke" json:"tschchartseriesbubblesymbolfilluseseriesstroke,omitempty"`
	Tschchartseries3Dbarshadow                                 *ShadowArchive                `protobuf:"bytes,306,opt,name=tschchartseries3dbarshadow" json:"tschchartseries3dbarshadow,omitempty"`
	Tschchartseries3Dcolumnshadow                              *ShadowArchive                `protobuf:"bytes,307,opt,name=tschchartseries3dcolumnshadow" json:"tschchartseries3dcolumnshadow,omitempty"`
	Tschchartseries3Dlineshadow                                *ShadowArchive                `protobuf:"bytes,308,opt,name=tschchartseries3dlineshadow" json:"tschchartseries3dlineshadow,omitempty"`
	Tschchartseries3Dareashadow                                *ShadowArchive                `protobuf:"bytes,309,opt,name=tschchartseries3dareashadow" json:"tschchartseries3dareashadow,omitempty"`
	Tschchartseries3Dpieshadow                                 *ShadowArchive                `protobuf:"bytes,310,opt,name=tschchartseries3dpieshadow" json:"tschchartseries3dpieshadow,omitempty"`
	Tschchartseriesdefaultlabelparagraphstyleindex             *int32                        `protobuf:"varint,110,opt,name=tschchartseriesdefaultlabelparagraphstyleindex" json:"tschchartseriesdefaultlabelparagraphstyleindex,omitempty"`
	Tschchartseriesbarlabelparagraphstyleindex                 *int32                        `protobuf:"varint,111,opt,name=tschchartseriesbarlabelparagraphstyleindex" json:"tschchartseriesbarlabelparagraphstyleindex,omitempty"`
	Tschchartserieslinelabelparagraphstyleindex                *int32                        `protobuf:"varint,112,opt,name=tschchartserieslinelabelparagraphstyleindex" json:"tschchartserieslinelabelparagraphstyleindex,omitempty"`
	Tschchartseriesarealabelparagraphstyleindex                *int32                        `protobuf:"varint,113,opt,name=tschchartseriesarealabelparagraphstyleindex" json:"tschchartseriesarealabelparagraphstyleindex,omitempty"`
	Tschchartseriespielabelparagraphstyleindex                 *int32                        `protobuf:"varint,114,opt,name=tschchartseriespielabelparagraphstyleindex" json:"tschchartseriespielabelparagraphstyleindex,omitempty"`
	Tschchartseriesmixedlabelparagraphstyleindex               *int32                        `protobuf:"varint,115,opt,name=tschchartseriesmixedlabelparagraphstyleindex" json:"tschchartseriesmixedlabelparagraphstyleindex,omitempty"`
	Tschchartseriesdefaultopacity                              *float32                      `protobuf:"fixed32,116,opt,name=tschchartseriesdefaultopacity" json:"tschchartseriesdefaultopacity,omitempty"`
	Tschchartserieslinesymbolfilluseseriesstroke               *bool                         `protobuf:"varint,117,opt,name=tschchartserieslinesymbolfilluseseriesstroke" json:"tschchartserieslinesymbolfilluseseriesstroke,omitempty"`
	Tschchartseriesareasymbolfilluseseriesstroke               *bool                         `protobuf:"varint,118,opt,name=tschchartseriesareasymbolfilluseseriesstroke" json:"tschchartseriesareasymbolfilluseseriesstroke,omitempty"`
	Tschchartseriesscattersymbolfilluseseriesstroke            *bool                         `protobuf:"varint,119,opt,name=tschchartseriesscattersymbolfilluseseriesstroke" json:"tschchartseriesscattersymbolfilluseseriesstroke,omitempty"`
	Tschchartseriesmixedlinesymbolfilluseseriesstroke          *bool                         `protobuf:"varint,120,opt,name=tschchartseriesmixedlinesymbolfilluseseriesstroke" json:"tschchartseriesmixedlinesymbolfilluseseriesstroke,omitempty"`
	Tschchartseriesmixedareasymbolfilluseseriesstroke          *bool                         `protobuf:"varint,121,opt,name=tschchartseriesmixedareasymbolfilluseseriesstroke" json:"tschchartseriesmixedareasymbolfilluseseriesstroke,omitempty"`
	Tschchartserieslinesymbolfilluseseriesfill                 *bool                         `protobuf:"varint,122,opt,name=tschchartserieslinesymbolfilluseseriesfill" json:"tschchartserieslinesymbolfilluseseriesfill,omitempty"`
	Tschchartseriesareasymbolfilluseseriesfill                 *bool                         `protobuf:"varint,123,opt,name=tschchartseriesareasymbolfilluseseriesfill" json:"tschchartseriesareasymbolfilluseseriesfill,omitempty"`
	Tschchartseriesmixedlinesymbolfilluseseriesfill            *bool                         `protobuf:"varint,124,opt,name=tschchartseriesmixedlinesymbolfilluseseriesfill" json:"tschchartseriesmixedlinesymbolfilluseseriesfill,omitempty"`
	Tschchartseriesmixedareasymbolfilluseseriesfill            *bool                         `protobuf:"varint,125,opt,name=tschchartseriesmixedareasymbolfilluseseriesfill" json:"tschchartseriesmixedareasymbolfilluseseriesfill,omitempty"`
	Tschchartseriesmixedcolumnfill                             *FillArchive                  `protobuf:"bytes,130,opt,name=tschchartseriesmixedcolumnfill" json:"tschchartseriesmixedcolumnfill,omitempty"`
	Tschchartseriesmixedareafill                               *FillArchive                  `protobuf:"bytes,131,opt,name=tschchartseriesmixedareafill" json:"tschchartseriesmixedareafill,omitempty"`
	Tschchartseriesmixedcolumnstroke                           *StrokeArchive                `protobuf:"bytes,132,opt,name=tschchartseriesmixedcolumnstroke" json:"tschchartseriesmixedcolumnstroke,omitempty"`
	Tschchartseriesmixedlinestroke                             *StrokeArchive                `protobuf:"bytes,133,opt,name=tschchartseriesmixedlinestroke" json:"tschchartseriesmixedlinestroke,omitempty"`
	Tschchartseriesmixedareastroke                             *StrokeArchive                `protobuf:"bytes,134,opt,name=tschchartseriesmixedareastroke" json:"tschchartseriesmixedareastroke,omitempty"`
	Tschchartseriesmixedlinesymbolsize                         *float32                      `protobuf:"fixed32,135,opt,name=tschchartseriesmixedlinesymbolsize" json:"tschchartseriesmixedlinesymbolsize,omitempty"`
	Tschchartseriesmixedareasymbolsize                         *float32                      `protobuf:"fixed32,136,opt,name=tschchartseriesmixedareasymbolsize" json:"tschchartseriesmixedareasymbolsize,omitempty"`
	Tschchartseriesmixedlinesymbolfill                         *FillArchive                  `protobuf:"bytes,137,opt,name=tschchartseriesmixedlinesymbolfill" json:"tschchartseriesmixedlinesymbolfill,omitempty"`
	Tschchartseriesmixedareasymbolfill                         *FillArchive                  `protobuf:"bytes,138,opt,name=tschchartseriesmixedareasymbolfill" json:"tschchartseriesmixedareasymbolfill,omitempty"`
	Tschchartseriesmixedlinesymbolstroke                       *StrokeArchive                `protobuf:"bytes,139,opt,name=tschchartseriesmixedlinesymbolstroke" json:"tschchartseriesmixedlinesymbolstroke,omitempty"`
	Tschchartseriesmixedareasymbolstroke                       *StrokeArchive                `protobuf:"bytes,140,opt,name=tschchartseriesmixedareasymbolstroke" json:"tschchartseriesmixedareasymbolstroke,omitempty"`
	Tschchartseriesmixedcolumnvaluelabelposition               *int32                        `protobuf:"varint,141,opt,name=tschchartseriesmixedcolumnvaluelabelposition" json:"tschchartseriesmixedcolumnvaluelabelposition,omitempty"`
	Tschchartseriesmixedlinevaluelabelposition                 *int32                        `protobuf:"varint,142,opt,name=tschchartseriesmixedlinevaluelabelposition" json:"tschchartseriesmixedlinevaluelabelposition,omitempty"`
	Tschchartseriesmixedareavaluelabelposition                 *int32                        `protobuf:"varint,143,opt,name=tschchartseriesmixedareavaluelabelposition" json:"tschchartseriesmixedareavaluelabelposition,omitempty"`
	Tschchartseriesdefaultoutsidelabelparagraphstyleindex      *int32                        `protobuf:"varint,150,opt,name=tschchartseriesdefaultoutsidelabelparagraphstyleindex" json:"tschchartseriesdefaultoutsidelabelparagraphstyleindex,omitempty"`
	Tschchartseriesbaroutsidelabelparagraphstyleindex          *int32                        `protobuf:"varint,151,opt,name=tschchartseriesbaroutsidelabelparagraphstyleindex" json:"tschchartseriesbaroutsidelabelparagraphstyleindex,omitempty"`
	Tschchartseriesareaoutsidelabelparagraphstyleindex         *int32                        `protobuf:"varint,153,opt,name=tschchartseriesareaoutsidelabelparagraphstyleindex" json:"tschchartseriesareaoutsidelabelparagraphstyleindex,omitempty"`
	Tschchartseriespieoutsidelabelparagraphstyleindex          *int32                        `protobuf:"varint,154,opt,name=tschchartseriespieoutsidelabelparagraphstyleindex" json:"tschchartseriespieoutsidelabelparagraphstyleindex,omitempty"`
	Tschchartseriesmixedoutsidelabelparagraphstyleindex        *int32                        `protobuf:"varint,155,opt,name=tschchartseriesmixedoutsidelabelparagraphstyleindex" json:"tschchartseriesmixedoutsidelabelparagraphstyleindex,omitempty"`
	Tschchartseriesstackedbarvaluelabelposition                *int32                        `protobuf:"varint,156,opt,name=tschchartseriesstackedbarvaluelabelposition" json:"tschchartseriesstackedbarvaluelabelposition,omitempty"`
	Tschchartseriesstackedareavaluelabelposition               *int32                        `protobuf:"varint,157,opt,name=tschchartseriesstackedareavaluelabelposition" json:"tschchartseriesstackedareavaluelabelposition,omitempty"`
	Tschchartseriesdefaulttrendlinestroke                      *StrokeArchive                `protobuf:"bytes,167,opt,name=tschchartseriesdefaulttrendlinestroke" json:"tschchartseriesdefaulttrendlinestroke,omitempty"`
	Tschchartseriesdefaulttrendlineshadow                      *ShadowArchive                `protobuf:"bytes,168,opt,name=tschchartseriesdefaulttrendlineshadow" json:"tschchartseriesdefaulttrendlineshadow,omitempty"`
	Tschchartseriesdefaulterrorbarshadow                       *ShadowArchive                `protobuf:"bytes,180,opt,name=tschchartseriesdefaulterrorbarshadow" json:"tschchartseriesdefaulterrorbarshadow,omitempty"`
	Tschchartseriesdefaulterrorbarstroke                       *StrokeArchive                `protobuf:"bytes,181,opt,name=tschchartseriesdefaulterrorbarstroke" json:"tschchartseriesdefaulterrorbarstroke,omitempty"`
	Tschchartseriesdefaulterrorbarstrokescatterx               *StrokeArchive                `protobuf:"bytes,182,opt,name=tschchartseriesdefaulterrorbarstrokescatterx" json:"tschchartseriesdefaulterrorbarstrokescatterx,omitempty"`
	Tschchartseriesdefaulterrorbarlineend                      *LineEndArchive               `protobuf:"bytes,183,opt,name=tschchartseriesdefaulterrorbarlineend" json:"tschchartseriesdefaulterrorbarlineend,omitempty"`
	Tschchartseriesdefaulterrorbarlineendscatterx              *LineEndArchive               `protobuf:"bytes,184,opt,name=tschchartseriesdefaulterrorbarlineendscatterx" json:"tschchartseriesdefaulterrorbarlineendscatterx,omitempty"`
	Tschchartseriesdefaultdeprecated3Dfill                     *DEPRECATEDChart3DFillArchive `protobuf:"bytes,300,opt,name=tschchartseriesdefaultdeprecated3dfill" json:"tschchartseriesdefaultdeprecated3dfill,omitempty"`
	Tschchartseriesbardeprecated3Dfill                         *DEPRECATEDChart3DFillArchive `protobuf:"bytes,301,opt,name=tschchartseriesbardeprecated3dfill" json:"tschchartseriesbardeprecated3dfill,omitempty"`
	Tschchartseriescolumndeprecated3Dfill                      *DEPRECATEDChart3DFillArchive `protobuf:"bytes,302,opt,name=tschchartseriescolumndeprecated3dfill" json:"tschchartseriescolumndeprecated3dfill,omitempty"`
	Tschchartserieslinedeprecated3Dfill                        *DEPRECATEDChart3DFillArchive `protobuf:"bytes,303,opt,name=tschchartserieslinedeprecated3dfill" json:"tschchartserieslinedeprecated3dfill,omitempty"`
	Tschchartseriesareadeprecated3Dfill                        *DEPRECATEDChart3DFillArchive `protobuf:"bytes,304,opt,name=tschchartseriesareadeprecated3dfill" json:"tschchartseriesareadeprecated3dfill,omitempty"`
	Tschchartseriespiedeprecated3Dfill                         *DEPRECATEDChart3DFillArchive `protobuf:"bytes,305,opt,name=tschchartseriespiedeprecated3dfill" json:"tschchartseriespiedeprecated3dfill,omitempty"`
	Tschchartseries3Dbarfill                                   *FillArchive                  `protobuf:"bytes,320,opt,name=tschchartseries3dbarfill" json:"tschchartseries3dbarfill,omitempty"`
	Tschchartseries3Dcolumnfill                                *FillArchive                  `protobuf:"bytes,321,opt,name=tschchartseries3dcolumnfill" json:"tschchartseries3dcolumnfill,omitempty"`
	Tschchartseries3Dlinefill                                  *FillArchive                  `protobuf:"bytes,322,opt,name=tschchartseries3dlinefill" json:"tschchartseries3dlinefill,omitempty"`
	Tschchartseries3Dareafill                                  *FillArchive                  `protobuf:"bytes,323,opt,name=tschchartseries3dareafill" json:"tschchartseries3dareafill,omitempty"`
	Tschchartseries3Dpiefill                                   *FillArchive                  `protobuf:"bytes,324,opt,name=tschchartseries3dpiefill" json:"tschchartseries3dpiefill,omitempty"`
}

func (x *TSCHPreUFFChartSeriesStyleArchive) Reset() {
	*x = TSCHPreUFFChartSeriesStyleArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHPreUFFArchives_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSCHPreUFFChartSeriesStyleArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSCHPreUFFChartSeriesStyleArchive) ProtoMessage() {}

func (x *TSCHPreUFFChartSeriesStyleArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHPreUFFArchives_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSCHPreUFFChartSeriesStyleArchive.ProtoReflect.Descriptor instead.
func (*TSCHPreUFFChartSeriesStyleArchive) Descriptor() ([]byte, []int) {
	return file_TSCHPreUFFArchives_proto_rawDescGZIP(), []int{11}
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetSuper() *StyleArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesdefaulttrendlineequationparagraphstyleindex() int32 {
	if x != nil && x.Tschchartseriesdefaulttrendlineequationparagraphstyleindex != nil {
		return *x.Tschchartseriesdefaulttrendlineequationparagraphstyleindex
	}
	return 0
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesdefaulttrendlinersquaredparagraphstyleindex() int32 {
	if x != nil && x.Tschchartseriesdefaulttrendlinersquaredparagraphstyleindex != nil {
		return *x.Tschchartseriesdefaulttrendlinersquaredparagraphstyleindex
	}
	return 0
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesdefaulttrendlineequationopacity() float32 {
	if x != nil && x.Tschchartseriesdefaulttrendlineequationopacity != nil {
		return *x.Tschchartseriesdefaulttrendlineequationopacity
	}
	return 0
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesdefaulttrendlinersquaredopacity() float32 {
	if x != nil && x.Tschchartseriesdefaulttrendlinersquaredopacity != nil {
		return *x.Tschchartseriesdefaulttrendlinersquaredopacity
	}
	return 0
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesbarfill() *FillArchive {
	if x != nil {
		return x.Tschchartseriesbarfill
	}
	return nil
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesbarstroke() *StrokeArchive {
	if x != nil {
		return x.Tschchartseriesbarstroke
	}
	return nil
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesbarvaluelabelposition() int32 {
	if x != nil && x.Tschchartseriesbarvaluelabelposition != nil {
		return *x.Tschchartseriesbarvaluelabelposition
	}
	return 0
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartserieslinestroke() *StrokeArchive {
	if x != nil {
		return x.Tschchartserieslinestroke
	}
	return nil
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartserieslinesymbolfill() *FillArchive {
	if x != nil {
		return x.Tschchartserieslinesymbolfill
	}
	return nil
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartserieslinesymbolstroke() *StrokeArchive {
	if x != nil {
		return x.Tschchartserieslinesymbolstroke
	}
	return nil
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartserieslinesymbolsize() float32 {
	if x != nil && x.Tschchartserieslinesymbolsize != nil {
		return *x.Tschchartserieslinesymbolsize
	}
	return 0
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartserieslinevaluelabelposition() int32 {
	if x != nil && x.Tschchartserieslinevaluelabelposition != nil {
		return *x.Tschchartserieslinevaluelabelposition
	}
	return 0
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesareafill() *FillArchive {
	if x != nil {
		return x.Tschchartseriesareafill
	}
	return nil
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesareastroke() *StrokeArchive {
	if x != nil {
		return x.Tschchartseriesareastroke
	}
	return nil
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesareavaluelabelposition() int32 {
	if x != nil && x.Tschchartseriesareavaluelabelposition != nil {
		return *x.Tschchartseriesareavaluelabelposition
	}
	return 0
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesareasymbolfill() *FillArchive {
	if x != nil {
		return x.Tschchartseriesareasymbolfill
	}
	return nil
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesareasymbolstroke() *StrokeArchive {
	if x != nil {
		return x.Tschchartseriesareasymbolstroke
	}
	return nil
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesareasymbolsize() float32 {
	if x != nil && x.Tschchartseriesareasymbolsize != nil {
		return *x.Tschchartseriesareasymbolsize
	}
	return 0
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriespiefill() *FillArchive {
	if x != nil {
		return x.Tschchartseriespiefill
	}
	return nil
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriespiestroke() *StrokeArchive {
	if x != nil {
		return x.Tschchartseriespiestroke
	}
	return nil
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesscatterstroke() *StrokeArchive {
	if x != nil {
		return x.Tschchartseriesscatterstroke
	}
	return nil
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesscattersymbolfill() *FillArchive {
	if x != nil {
		return x.Tschchartseriesscattersymbolfill
	}
	return nil
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesscattersymbolstroke() *StrokeArchive {
	if x != nil {
		return x.Tschchartseriesscattersymbolstroke
	}
	return nil
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesscattersymbolsize() float32 {
	if x != nil && x.Tschchartseriesscattersymbolsize != nil {
		return *x.Tschchartseriesscattersymbolsize
	}
	return 0
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesscattervaluelabelposition() int32 {
	if x != nil && x.Tschchartseriesscattervaluelabelposition != nil {
		return *x.Tschchartseriesscattervaluelabelposition
	}
	return 0
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesdefaultfill() *FillArchive {
	if x != nil {
		return x.Tschchartseriesdefaultfill
	}
	return nil
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesdefaultvaluelabelposition() int32 {
	if x != nil && x.Tschchartseriesdefaultvaluelabelposition != nil {
		return *x.Tschchartseriesdefaultvaluelabelposition
	}
	return 0
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriespiedeprecatedserieslabelson() bool {
	if x != nil && x.Tschchartseriespiedeprecatedserieslabelson != nil {
		return *x.Tschchartseriespiedeprecatedserieslabelson
	}
	return false
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriescolumnfill() *FillArchive {
	if x != nil {
		return x.Tschchartseriescolumnfill
	}
	return nil
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriespieshadow() *ShadowArchive {
	if x != nil {
		return x.Tschchartseriespieshadow
	}
	return nil
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesbarshadow() *ShadowArchive {
	if x != nil {
		return x.Tschchartseriesbarshadow
	}
	return nil
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesareashadow() *ShadowArchive {
	if x != nil {
		return x.Tschchartseriesareashadow
	}
	return nil
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesscattershadow() *ShadowArchive {
	if x != nil {
		return x.Tschchartseriesscattershadow
	}
	return nil
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesmixedlineshadow() *ShadowArchive {
	if x != nil {
		return x.Tschchartseriesmixedlineshadow
	}
	return nil
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesmixedareashadow() *ShadowArchive {
	if x != nil {
		return x.Tschchartseriesmixedareashadow
	}
	return nil
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesmixedcolumnshadow() *ShadowArchive {
	if x != nil {
		return x.Tschchartseriesmixedcolumnshadow
	}
	return nil
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartserieslineshadow() *ShadowArchive {
	if x != nil {
		return x.Tschchartserieslineshadow
	}
	return nil
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesdefaultshadow() *ShadowArchive {
	if x != nil {
		return x.Tschchartseriesdefaultshadow
	}
	return nil
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesbubblesymbolfill() *FillArchive {
	if x != nil {
		return x.Tschchartseriesbubblesymbolfill
	}
	return nil
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesbubblestroke() *StrokeArchive {
	if x != nil {
		return x.Tschchartseriesbubblestroke
	}
	return nil
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesbubblesymbolstroke() *StrokeArchive {
	if x != nil {
		return x.Tschchartseriesbubblesymbolstroke
	}
	return nil
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesbubblevaluelabelposition() int32 {
	if x != nil && x.Tschchartseriesbubblevaluelabelposition != nil {
		return *x.Tschchartseriesbubblevaluelabelposition
	}
	return 0
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesbubbleshadow() *ShadowArchive {
	if x != nil {
		return x.Tschchartseriesbubbleshadow
	}
	return nil
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesbubblesymbolfilluseseriesstroke() bool {
	if x != nil && x.Tschchartseriesbubblesymbolfilluseseriesstroke != nil {
		return *x.Tschchartseriesbubblesymbolfilluseseriesstroke
	}
	return false
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseries3Dbarshadow() *ShadowArchive {
	if x != nil {
		return x.Tschchartseries3Dbarshadow
	}
	return nil
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseries3Dcolumnshadow() *ShadowArchive {
	if x != nil {
		return x.Tschchartseries3Dcolumnshadow
	}
	return nil
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseries3Dlineshadow() *ShadowArchive {
	if x != nil {
		return x.Tschchartseries3Dlineshadow
	}
	return nil
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseries3Dareashadow() *ShadowArchive {
	if x != nil {
		return x.Tschchartseries3Dareashadow
	}
	return nil
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseries3Dpieshadow() *ShadowArchive {
	if x != nil {
		return x.Tschchartseries3Dpieshadow
	}
	return nil
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesdefaultlabelparagraphstyleindex() int32 {
	if x != nil && x.Tschchartseriesdefaultlabelparagraphstyleindex != nil {
		return *x.Tschchartseriesdefaultlabelparagraphstyleindex
	}
	return 0
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesbarlabelparagraphstyleindex() int32 {
	if x != nil && x.Tschchartseriesbarlabelparagraphstyleindex != nil {
		return *x.Tschchartseriesbarlabelparagraphstyleindex
	}
	return 0
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartserieslinelabelparagraphstyleindex() int32 {
	if x != nil && x.Tschchartserieslinelabelparagraphstyleindex != nil {
		return *x.Tschchartserieslinelabelparagraphstyleindex
	}
	return 0
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesarealabelparagraphstyleindex() int32 {
	if x != nil && x.Tschchartseriesarealabelparagraphstyleindex != nil {
		return *x.Tschchartseriesarealabelparagraphstyleindex
	}
	return 0
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriespielabelparagraphstyleindex() int32 {
	if x != nil && x.Tschchartseriespielabelparagraphstyleindex != nil {
		return *x.Tschchartseriespielabelparagraphstyleindex
	}
	return 0
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesmixedlabelparagraphstyleindex() int32 {
	if x != nil && x.Tschchartseriesmixedlabelparagraphstyleindex != nil {
		return *x.Tschchartseriesmixedlabelparagraphstyleindex
	}
	return 0
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesdefaultopacity() float32 {
	if x != nil && x.Tschchartseriesdefaultopacity != nil {
		return *x.Tschchartseriesdefaultopacity
	}
	return 0
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartserieslinesymbolfilluseseriesstroke() bool {
	if x != nil && x.Tschchartserieslinesymbolfilluseseriesstroke != nil {
		return *x.Tschchartserieslinesymbolfilluseseriesstroke
	}
	return false
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesareasymbolfilluseseriesstroke() bool {
	if x != nil && x.Tschchartseriesareasymbolfilluseseriesstroke != nil {
		return *x.Tschchartseriesareasymbolfilluseseriesstroke
	}
	return false
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesscattersymbolfilluseseriesstroke() bool {
	if x != nil && x.Tschchartseriesscattersymbolfilluseseriesstroke != nil {
		return *x.Tschchartseriesscattersymbolfilluseseriesstroke
	}
	return false
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesmixedlinesymbolfilluseseriesstroke() bool {
	if x != nil && x.Tschchartseriesmixedlinesymbolfilluseseriesstroke != nil {
		return *x.Tschchartseriesmixedlinesymbolfilluseseriesstroke
	}
	return false
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesmixedareasymbolfilluseseriesstroke() bool {
	if x != nil && x.Tschchartseriesmixedareasymbolfilluseseriesstroke != nil {
		return *x.Tschchartseriesmixedareasymbolfilluseseriesstroke
	}
	return false
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartserieslinesymbolfilluseseriesfill() bool {
	if x != nil && x.Tschchartserieslinesymbolfilluseseriesfill != nil {
		return *x.Tschchartserieslinesymbolfilluseseriesfill
	}
	return false
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesareasymbolfilluseseriesfill() bool {
	if x != nil && x.Tschchartseriesareasymbolfilluseseriesfill != nil {
		return *x.Tschchartseriesareasymbolfilluseseriesfill
	}
	return false
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesmixedlinesymbolfilluseseriesfill() bool {
	if x != nil && x.Tschchartseriesmixedlinesymbolfilluseseriesfill != nil {
		return *x.Tschchartseriesmixedlinesymbolfilluseseriesfill
	}
	return false
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesmixedareasymbolfilluseseriesfill() bool {
	if x != nil && x.Tschchartseriesmixedareasymbolfilluseseriesfill != nil {
		return *x.Tschchartseriesmixedareasymbolfilluseseriesfill
	}
	return false
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesmixedcolumnfill() *FillArchive {
	if x != nil {
		return x.Tschchartseriesmixedcolumnfill
	}
	return nil
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesmixedareafill() *FillArchive {
	if x != nil {
		return x.Tschchartseriesmixedareafill
	}
	return nil
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesmixedcolumnstroke() *StrokeArchive {
	if x != nil {
		return x.Tschchartseriesmixedcolumnstroke
	}
	return nil
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesmixedlinestroke() *StrokeArchive {
	if x != nil {
		return x.Tschchartseriesmixedlinestroke
	}
	return nil
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesmixedareastroke() *StrokeArchive {
	if x != nil {
		return x.Tschchartseriesmixedareastroke
	}
	return nil
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesmixedlinesymbolsize() float32 {
	if x != nil && x.Tschchartseriesmixedlinesymbolsize != nil {
		return *x.Tschchartseriesmixedlinesymbolsize
	}
	return 0
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesmixedareasymbolsize() float32 {
	if x != nil && x.Tschchartseriesmixedareasymbolsize != nil {
		return *x.Tschchartseriesmixedareasymbolsize
	}
	return 0
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesmixedlinesymbolfill() *FillArchive {
	if x != nil {
		return x.Tschchartseriesmixedlinesymbolfill
	}
	return nil
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesmixedareasymbolfill() *FillArchive {
	if x != nil {
		return x.Tschchartseriesmixedareasymbolfill
	}
	return nil
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesmixedlinesymbolstroke() *StrokeArchive {
	if x != nil {
		return x.Tschchartseriesmixedlinesymbolstroke
	}
	return nil
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesmixedareasymbolstroke() *StrokeArchive {
	if x != nil {
		return x.Tschchartseriesmixedareasymbolstroke
	}
	return nil
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesmixedcolumnvaluelabelposition() int32 {
	if x != nil && x.Tschchartseriesmixedcolumnvaluelabelposition != nil {
		return *x.Tschchartseriesmixedcolumnvaluelabelposition
	}
	return 0
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesmixedlinevaluelabelposition() int32 {
	if x != nil && x.Tschchartseriesmixedlinevaluelabelposition != nil {
		return *x.Tschchartseriesmixedlinevaluelabelposition
	}
	return 0
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesmixedareavaluelabelposition() int32 {
	if x != nil && x.Tschchartseriesmixedareavaluelabelposition != nil {
		return *x.Tschchartseriesmixedareavaluelabelposition
	}
	return 0
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesdefaultoutsidelabelparagraphstyleindex() int32 {
	if x != nil && x.Tschchartseriesdefaultoutsidelabelparagraphstyleindex != nil {
		return *x.Tschchartseriesdefaultoutsidelabelparagraphstyleindex
	}
	return 0
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesbaroutsidelabelparagraphstyleindex() int32 {
	if x != nil && x.Tschchartseriesbaroutsidelabelparagraphstyleindex != nil {
		return *x.Tschchartseriesbaroutsidelabelparagraphstyleindex
	}
	return 0
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesareaoutsidelabelparagraphstyleindex() int32 {
	if x != nil && x.Tschchartseriesareaoutsidelabelparagraphstyleindex != nil {
		return *x.Tschchartseriesareaoutsidelabelparagraphstyleindex
	}
	return 0
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriespieoutsidelabelparagraphstyleindex() int32 {
	if x != nil && x.Tschchartseriespieoutsidelabelparagraphstyleindex != nil {
		return *x.Tschchartseriespieoutsidelabelparagraphstyleindex
	}
	return 0
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesmixedoutsidelabelparagraphstyleindex() int32 {
	if x != nil && x.Tschchartseriesmixedoutsidelabelparagraphstyleindex != nil {
		return *x.Tschchartseriesmixedoutsidelabelparagraphstyleindex
	}
	return 0
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesstackedbarvaluelabelposition() int32 {
	if x != nil && x.Tschchartseriesstackedbarvaluelabelposition != nil {
		return *x.Tschchartseriesstackedbarvaluelabelposition
	}
	return 0
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesstackedareavaluelabelposition() int32 {
	if x != nil && x.Tschchartseriesstackedareavaluelabelposition != nil {
		return *x.Tschchartseriesstackedareavaluelabelposition
	}
	return 0
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesdefaulttrendlinestroke() *StrokeArchive {
	if x != nil {
		return x.Tschchartseriesdefaulttrendlinestroke
	}
	return nil
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesdefaulttrendlineshadow() *ShadowArchive {
	if x != nil {
		return x.Tschchartseriesdefaulttrendlineshadow
	}
	return nil
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesdefaulterrorbarshadow() *ShadowArchive {
	if x != nil {
		return x.Tschchartseriesdefaulterrorbarshadow
	}
	return nil
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesdefaulterrorbarstroke() *StrokeArchive {
	if x != nil {
		return x.Tschchartseriesdefaulterrorbarstroke
	}
	return nil
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesdefaulterrorbarstrokescatterx() *StrokeArchive {
	if x != nil {
		return x.Tschchartseriesdefaulterrorbarstrokescatterx
	}
	return nil
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesdefaulterrorbarlineend() *LineEndArchive {
	if x != nil {
		return x.Tschchartseriesdefaulterrorbarlineend
	}
	return nil
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesdefaulterrorbarlineendscatterx() *LineEndArchive {
	if x != nil {
		return x.Tschchartseriesdefaulterrorbarlineendscatterx
	}
	return nil
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesdefaultdeprecated3Dfill() *DEPRECATEDChart3DFillArchive {
	if x != nil {
		return x.Tschchartseriesdefaultdeprecated3Dfill
	}
	return nil
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesbardeprecated3Dfill() *DEPRECATEDChart3DFillArchive {
	if x != nil {
		return x.Tschchartseriesbardeprecated3Dfill
	}
	return nil
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriescolumndeprecated3Dfill() *DEPRECATEDChart3DFillArchive {
	if x != nil {
		return x.Tschchartseriescolumndeprecated3Dfill
	}
	return nil
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartserieslinedeprecated3Dfill() *DEPRECATEDChart3DFillArchive {
	if x != nil {
		return x.Tschchartserieslinedeprecated3Dfill
	}
	return nil
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriesareadeprecated3Dfill() *DEPRECATEDChart3DFillArchive {
	if x != nil {
		return x.Tschchartseriesareadeprecated3Dfill
	}
	return nil
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseriespiedeprecated3Dfill() *DEPRECATEDChart3DFillArchive {
	if x != nil {
		return x.Tschchartseriespiedeprecated3Dfill
	}
	return nil
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseries3Dbarfill() *FillArchive {
	if x != nil {
		return x.Tschchartseries3Dbarfill
	}
	return nil
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseries3Dcolumnfill() *FillArchive {
	if x != nil {
		return x.Tschchartseries3Dcolumnfill
	}
	return nil
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseries3Dlinefill() *FillArchive {
	if x != nil {
		return x.Tschchartseries3Dlinefill
	}
	return nil
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseries3Dareafill() *FillArchive {
	if x != nil {
		return x.Tschchartseries3Dareafill
	}
	return nil
}

func (x *TSCHPreUFFChartSeriesStyleArchive) GetTschchartseries3Dpiefill() *FillArchive {
	if x != nil {
		return x.Tschchartseries3Dpiefill
	}
	return nil
}

type TSCHPreUFFChartSeriesNonStyleArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                                                    *StyleArchive                         `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Tschchartseriesdefaultnumberformat                       *ChartsNumberFormatArchive            `protobuf:"bytes,10,opt,name=tschchartseriesdefaultnumberformat" json:"tschchartseriesdefaultnumberformat,omitempty"`
	Tschchartseriesdefaultnumberformattype                   *int32                                `protobuf:"varint,11,opt,name=tschchartseriesdefaultnumberformattype" json:"tschchartseriesdefaultnumberformattype,omitempty"`
	Tschchartseriesbarshowvaluelabels                        *bool                                 `protobuf:"varint,12,opt,name=tschchartseriesbarshowvaluelabels" json:"tschchartseriesbarshowvaluelabels,omitempty"`
	Tschchartserieslinesymboltype                            *int32                                `protobuf:"varint,19,opt,name=tschchartserieslinesymboltype" json:"tschchartserieslinesymboltype,omitempty"`
	Tschchartserieslineshowsymbol                            *bool                                 `protobuf:"varint,20,opt,name=tschchartserieslineshowsymbol" json:"tschchartserieslineshowsymbol,omitempty"`
	Tschchartserieslineshowvaluelabels                       *bool                                 `protobuf:"varint,21,opt,name=tschchartserieslineshowvaluelabels" json:"tschchartserieslineshowvaluelabels,omitempty"`
	Tschchartseriesareashowvaluelabels                       *bool                                 `protobuf:"varint,27,opt,name=tschchartseriesareashowvaluelabels" json:"tschchartseriesareashowvaluelabels,omitempty"`
	Tschchartserieslinelinetype                              *int32                                `protobuf:"varint,30,opt,name=tschchartserieslinelinetype" json:"tschchartserieslinelinetype,omitempty"`
	Tschchartseriesareasymboltype                            *int32                                `protobuf:"varint,31,opt,name=tschchartseriesareasymboltype" json:"tschchartseriesareasymboltype,omitempty"`
	Tschchartseriesareashowsymbol                            *bool                                 `protobuf:"varint,32,opt,name=tschchartseriesareashowsymbol" json:"tschchartseriesareashowsymbol,omitempty"`
	Tschchartseriespieshowvaluelabels                        *bool                                 `protobuf:"varint,37,opt,name=tschchartseriespieshowvaluelabels" json:"tschchartseriespieshowvaluelabels,omitempty"`
	Tschchartseriesscattershowvaluelabels                    *bool                                 `protobuf:"varint,45,opt,name=tschchartseriesscattershowvaluelabels" json:"tschchartseriesscattershowvaluelabels,omitempty"`
	Tschchartseriespiewedgeexplosion                         *float32                              `protobuf:"fixed32,50,opt,name=tschchartseriespiewedgeexplosion" json:"tschchartseriespiewedgeexplosion,omitempty"`
	Tschchartseriesdefaultshowvaluelabels                    *bool                                 `protobuf:"varint,51,opt,name=tschchartseriesdefaultshowvaluelabels" json:"tschchartseriesdefaultshowvaluelabels,omitempty"`
	Tschchartseriespienumberformat                           *ChartsNumberFormatArchive            `protobuf:"bytes,52,opt,name=tschchartseriespienumberformat" json:"tschchartseriespienumberformat,omitempty"`
	Tschchartseriespienumberformattype                       *int32                                `protobuf:"varint,53,opt,name=tschchartseriespienumberformattype" json:"tschchartseriespienumberformattype,omitempty"`
	Tschchartseriespielabelexplosion                         *float32                              `protobuf:"fixed32,54,opt,name=tschchartseriespielabelexplosion" json:"tschchartseriespielabelexplosion,omitempty"`
	Tschchartseriesmixedlineshowsymbol                       *bool                                 `protobuf:"varint,58,opt,name=tschchartseriesmixedlineshowsymbol" json:"tschchartseriesmixedlineshowsymbol,omitempty"`
	Tschchartseriesmixedareashowsymbol                       *bool                                 `protobuf:"varint,59,opt,name=tschchartseriesmixedareashowsymbol" json:"tschchartseriesmixedareashowsymbol,omitempty"`
	Tschchartseriesmixedlinesymboltype                       *int32                                `protobuf:"varint,60,opt,name=tschchartseriesmixedlinesymboltype" json:"tschchartseriesmixedlinesymboltype,omitempty"`
	Tschchartseriesmixedareasymboltype                       *int32                                `protobuf:"varint,61,opt,name=tschchartseriesmixedareasymboltype" json:"tschchartseriesmixedareasymboltype,omitempty"`
	Tschchartseriesmixedshowvaluelabels                      *bool                                 `protobuf:"varint,62,opt,name=tschchartseriesmixedshowvaluelabels" json:"tschchartseriesmixedshowvaluelabels,omitempty"`
	Tschchartseriesmixedlinelinetype                         *int32                                `protobuf:"varint,63,opt,name=tschchartseriesmixedlinelinetype" json:"tschchartseriesmixedlinelinetype,omitempty"`
	Tschchartseriesdefaultyaxisordinal                       *int32                                `protobuf:"varint,65,opt,name=tschchartseriesdefaultyaxisordinal" json:"tschchartseriesdefaultyaxisordinal,omitempty"`
	Tschchartseriespieshowserieslabels                       *bool                                 `protobuf:"varint,66,opt,name=tschchartseriespieshowserieslabels" json:"tschchartseriespieshowserieslabels,omitempty"`
	Tschchartseriesscattershowsymbol                         *bool                                 `protobuf:"varint,69,opt,name=tschchartseriesscattershowsymbol" json:"tschchartseriesscattershowsymbol,omitempty"`
	Tschchartseriesscattersymboltype                         *int32                                `protobuf:"varint,70,opt,name=tschchartseriesscattersymboltype" json:"tschchartseriesscattersymboltype,omitempty"`
	Tschchartseriesscatterlinetype                           *int32                                `protobuf:"varint,71,opt,name=tschchartseriesscatterlinetype" json:"tschchartseriesscatterlinetype,omitempty"`
	Tschchartseriesscattershowline                           *bool                                 `protobuf:"varint,72,opt,name=tschchartseriesscattershowline" json:"tschchartseriesscattershowline,omitempty"`
	Tschchartseriesstackedpercentnumberformat                *ChartsNumberFormatArchive            `protobuf:"bytes,90,opt,name=tschchartseriesstackedpercentnumberformat" json:"tschchartseriesstackedpercentnumberformat,omitempty"`
	Tschchartseriesdefaultseriestype                         *int32                                `protobuf:"varint,126,opt,name=tschchartseriesdefaultseriestype" json:"tschchartseriesdefaultseriestype,omitempty"`
	Tschchartseriesdefaulttrendlinetype                      *int32                                `protobuf:"varint,160,opt,name=tschchartseriesdefaulttrendlinetype" json:"tschchartseriesdefaulttrendlinetype,omitempty"`
	Tschchartseriesdefaulttrendlineorder                     *int32                                `protobuf:"varint,161,opt,name=tschchartseriesdefaulttrendlineorder" json:"tschchartseriesdefaulttrendlineorder,omitempty"`
	Tschchartseriesdefaulttrendlineperiod                    *int32                                `protobuf:"varint,162,opt,name=tschchartseriesdefaulttrendlineperiod" json:"tschchartseriesdefaulttrendlineperiod,omitempty"`
	Tschchartseriesdefaulttrendlineshowlabel                 *bool                                 `protobuf:"varint,163,opt,name=tschchartseriesdefaulttrendlineshowlabel" json:"tschchartseriesdefaulttrendlineshowlabel,omitempty"`
	Tschchartseriesdefaulttrendlinelabelstring               *string                               `protobuf:"bytes,164,opt,name=tschchartseriesdefaulttrendlinelabelstring" json:"tschchartseriesdefaulttrendlinelabelstring,omitempty"`
	Tschchartseriesdefaulttrendlineshowequation              *bool                                 `protobuf:"varint,165,opt,name=tschchartseriesdefaulttrendlineshowequation" json:"tschchartseriesdefaulttrendlineshowequation,omitempty"`
	Tschchartseriesdefaulttrendlineshowr2Value               *bool                                 `protobuf:"varint,166,opt,name=tschchartseriesdefaulttrendlineshowr2value" json:"tschchartseriesdefaulttrendlineshowr2value,omitempty"`
	Tschchartseriesdefaulterrorbarsetting                    *int32                                `protobuf:"varint,170,opt,name=tschchartseriesdefaulterrorbarsetting" json:"tschchartseriesdefaulterrorbarsetting,omitempty"`
	Tschchartseriesdefaulterrorbarsettingscatterx            *int32                                `protobuf:"varint,171,opt,name=tschchartseriesdefaulterrorbarsettingscatterx" json:"tschchartseriesdefaulterrorbarsettingscatterx,omitempty"`
	Tschchartseriesdefaulterrorbartype                       *int32                                `protobuf:"varint,172,opt,name=tschchartseriesdefaulterrorbartype" json:"tschchartseriesdefaulterrorbartype,omitempty"`
	Tschchartseriesdefaulterrorbartypescatterx               *int32                                `protobuf:"varint,173,opt,name=tschchartseriesdefaulterrorbartypescatterx" json:"tschchartseriesdefaulterrorbartypescatterx,omitempty"`
	Tschchartseriesdefaulterrorbarfixedvalue                 *float32                              `protobuf:"fixed32,174,opt,name=tschchartseriesdefaulterrorbarfixedvalue" json:"tschchartseriesdefaulterrorbarfixedvalue,omitempty"`
	Tschchartseriesdefaulterrorbarfixedvaluescatterx         *float32                              `protobuf:"fixed32,175,opt,name=tschchartseriesdefaulterrorbarfixedvaluescatterx" json:"tschchartseriesdefaulterrorbarfixedvaluescatterx,omitempty"`
	Tschchartseriesdefaulterrorbarpercentvalue               *float32                              `protobuf:"fixed32,176,opt,name=tschchartseriesdefaulterrorbarpercentvalue" json:"tschchartseriesdefaulterrorbarpercentvalue,omitempty"`
	Tschchartseriesdefaulterrorbarpercentvaluescatterx       *float32                              `protobuf:"fixed32,177,opt,name=tschchartseriesdefaulterrorbarpercentvaluescatterx" json:"tschchartseriesdefaulterrorbarpercentvaluescatterx,omitempty"`
	Tschchartseriesdefaulterrorbarstddevvalue                *float32                              `protobuf:"fixed32,178,opt,name=tschchartseriesdefaulterrorbarstddevvalue" json:"tschchartseriesdefaulterrorbarstddevvalue,omitempty"`
	Tschchartseriesdefaulterrorbarstddevvaluescatterx        *float32                              `protobuf:"fixed32,179,opt,name=tschchartseriesdefaulterrorbarstddevvaluescatterx" json:"tschchartseriesdefaulterrorbarstddevvaluescatterx,omitempty"`
	Tschchartseriesdefaulterrorbarcustompositivedata         *ChartsNSArrayOfNSNumberDoubleArchive `protobuf:"bytes,190,opt,name=tschchartseriesdefaulterrorbarcustompositivedata" json:"tschchartseriesdefaulterrorbarcustompositivedata,omitempty"`
	Tschchartseriesdefaulterrorbarcustompositivedatascatterx *ChartsNSArrayOfNSNumberDoubleArchive `protobuf:"bytes,191,opt,name=tschchartseriesdefaulterrorbarcustompositivedatascatterx" json:"tschchartseriesdefaulterrorbarcustompositivedatascatterx,omitempty"`
	Tschchartseriesdefaulterrorbarcustomnegativedata         *ChartsNSArrayOfNSNumberDoubleArchive `protobuf:"bytes,192,opt,name=tschchartseriesdefaulterrorbarcustomnegativedata" json:"tschchartseriesdefaulterrorbarcustomnegativedata,omitempty"`
	Tschchartseriesdefaulterrorbarcustomnegativedatascatterx *ChartsNSArrayOfNSNumberDoubleArchive `protobuf:"bytes,193,opt,name=tschchartseriesdefaulterrorbarcustomnegativedatascatterx" json:"tschchartseriesdefaulterrorbarcustomnegativedatascatterx,omitempty"`
	Tschchartseriesdefaulttrendlineequationoffsetx           *float32                              `protobuf:"fixed32,194,opt,name=tschchartseriesdefaulttrendlineequationoffsetx" json:"tschchartseriesdefaulttrendlineequationoffsetx,omitempty"`
	Tschchartseriesdefaulttrendlineequationoffsety           *float32                              `protobuf:"fixed32,195,opt,name=tschchartseriesdefaulttrendlineequationoffsety" json:"tschchartseriesdefaulttrendlineequationoffsety,omitempty"`
	Tschchartseriesdefaulttrendlinersquaredoffsetx           *float32                              `protobuf:"fixed32,196,opt,name=tschchartseriesdefaulttrendlinersquaredoffsetx" json:"tschchartseriesdefaulttrendlinersquaredoffsetx,omitempty"`
	Tschchartseriesdefaulttrendlinersquaredoffsety           *float32                              `protobuf:"fixed32,197,opt,name=tschchartseriesdefaulttrendlinersquaredoffsety" json:"tschchartseriesdefaulttrendlinersquaredoffsety,omitempty"`
	Tschchartseriesdefaultshowtrendline                      *bool                                 `protobuf:"varint,198,opt,name=tschchartseriesdefaultshowtrendline" json:"tschchartseriesdefaultshowtrendline,omitempty"`
	Tschchartseriesdefaultshowerrorbar                       *bool                                 `protobuf:"varint,199,opt,name=tschchartseriesdefaultshowerrorbar" json:"tschchartseriesdefaultshowerrorbar,omitempty"`
	Tschchartseriesdefaultshowerrorbarscatterx               *bool                                 `protobuf:"varint,200,opt,name=tschchartseriesdefaultshowerrorbarscatterx" json:"tschchartseriesdefaultshowerrorbarscatterx,omitempty"`
	Tschchartseriesbubblesizedimension                       *int32                                `protobuf:"varint,208,opt,name=tschchartseriesbubblesizedimension" json:"tschchartseriesbubblesizedimension,omitempty"`
	Tschchartseriesbubbleshowvaluelabels                     *bool                                 `protobuf:"varint,209,opt,name=tschchartseriesbubbleshowvaluelabels" json:"tschchartseriesbubbleshowvaluelabels,omitempty"`
	Tschchartseriesbubblelinetype                            *int32                                `protobuf:"varint,210,opt,name=tschchartseriesbubblelinetype" json:"tschchartseriesbubblelinetype,omitempty"`
	Tschchartseriesbubbleshownegativedata                    *bool                                 `protobuf:"varint,216,opt,name=tschchartseriesbubbleshownegativedata" json:"tschchartseriesbubbleshownegativedata,omitempty"`
	Tschchartseriesbubbleadjustmentscale                     *float32                              `protobuf:"fixed32,217,opt,name=tschchartseriesbubbleadjustmentscale" json:"tschchartseriesbubbleadjustmentscale,omitempty"`
}

func (x *TSCHPreUFFChartSeriesNonStyleArchive) Reset() {
	*x = TSCHPreUFFChartSeriesNonStyleArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHPreUFFArchives_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSCHPreUFFChartSeriesNonStyleArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSCHPreUFFChartSeriesNonStyleArchive) ProtoMessage() {}

func (x *TSCHPreUFFChartSeriesNonStyleArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHPreUFFArchives_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSCHPreUFFChartSeriesNonStyleArchive.ProtoReflect.Descriptor instead.
func (*TSCHPreUFFChartSeriesNonStyleArchive) Descriptor() ([]byte, []int) {
	return file_TSCHPreUFFArchives_proto_rawDescGZIP(), []int{12}
}

func (x *TSCHPreUFFChartSeriesNonStyleArchive) GetSuper() *StyleArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *TSCHPreUFFChartSeriesNonStyleArchive) GetTschchartseriesdefaultnumberformat() *ChartsNumberFormatArchive {
	if x != nil {
		return x.Tschchartseriesdefaultnumberformat
	}
	return nil
}

func (x *TSCHPreUFFChartSeriesNonStyleArchive) GetTschchartseriesdefaultnumberformattype() int32 {
	if x != nil && x.Tschchartseriesdefaultnumberformattype != nil {
		return *x.Tschchartseriesdefaultnumberformattype
	}
	return 0
}

func (x *TSCHPreUFFChartSeriesNonStyleArchive) GetTschchartseriesbarshowvaluelabels() bool {
	if x != nil && x.Tschchartseriesbarshowvaluelabels != nil {
		return *x.Tschchartseriesbarshowvaluelabels
	}
	return false
}

func (x *TSCHPreUFFChartSeriesNonStyleArchive) GetTschchartserieslinesymboltype() int32 {
	if x != nil && x.Tschchartserieslinesymboltype != nil {
		return *x.Tschchartserieslinesymboltype
	}
	return 0
}

func (x *TSCHPreUFFChartSeriesNonStyleArchive) GetTschchartserieslineshowsymbol() bool {
	if x != nil && x.Tschchartserieslineshowsymbol != nil {
		return *x.Tschchartserieslineshowsymbol
	}
	return false
}

func (x *TSCHPreUFFChartSeriesNonStyleArchive) GetTschchartserieslineshowvaluelabels() bool {
	if x != nil && x.Tschchartserieslineshowvaluelabels != nil {
		return *x.Tschchartserieslineshowvaluelabels
	}
	return false
}

func (x *TSCHPreUFFChartSeriesNonStyleArchive) GetTschchartseriesareashowvaluelabels() bool {
	if x != nil && x.Tschchartseriesareashowvaluelabels != nil {
		return *x.Tschchartseriesareashowvaluelabels
	}
	return false
}

func (x *TSCHPreUFFChartSeriesNonStyleArchive) GetTschchartserieslinelinetype() int32 {
	if x != nil && x.Tschchartserieslinelinetype != nil {
		return *x.Tschchartserieslinelinetype
	}
	return 0
}

func (x *TSCHPreUFFChartSeriesNonStyleArchive) GetTschchartseriesareasymboltype() int32 {
	if x != nil && x.Tschchartseriesareasymboltype != nil {
		return *x.Tschchartseriesareasymboltype
	}
	return 0
}

func (x *TSCHPreUFFChartSeriesNonStyleArchive) GetTschchartseriesareashowsymbol() bool {
	if x != nil && x.Tschchartseriesareashowsymbol != nil {
		return *x.Tschchartseriesareashowsymbol
	}
	return false
}

func (x *TSCHPreUFFChartSeriesNonStyleArchive) GetTschchartseriespieshowvaluelabels() bool {
	if x != nil && x.Tschchartseriespieshowvaluelabels != nil {
		return *x.Tschchartseriespieshowvaluelabels
	}
	return false
}

func (x *TSCHPreUFFChartSeriesNonStyleArchive) GetTschchartseriesscattershowvaluelabels() bool {
	if x != nil && x.Tschchartseriesscattershowvaluelabels != nil {
		return *x.Tschchartseriesscattershowvaluelabels
	}
	return false
}

func (x *TSCHPreUFFChartSeriesNonStyleArchive) GetTschchartseriespiewedgeexplosion() float32 {
	if x != nil && x.Tschchartseriespiewedgeexplosion != nil {
		return *x.Tschchartseriespiewedgeexplosion
	}
	return 0
}

func (x *TSCHPreUFFChartSeriesNonStyleArchive) GetTschchartseriesdefaultshowvaluelabels() bool {
	if x != nil && x.Tschchartseriesdefaultshowvaluelabels != nil {
		return *x.Tschchartseriesdefaultshowvaluelabels
	}
	return false
}

func (x *TSCHPreUFFChartSeriesNonStyleArchive) GetTschchartseriespienumberformat() *ChartsNumberFormatArchive {
	if x != nil {
		return x.Tschchartseriespienumberformat
	}
	return nil
}

func (x *TSCHPreUFFChartSeriesNonStyleArchive) GetTschchartseriespienumberformattype() int32 {
	if x != nil && x.Tschchartseriespienumberformattype != nil {
		return *x.Tschchartseriespienumberformattype
	}
	return 0
}

func (x *TSCHPreUFFChartSeriesNonStyleArchive) GetTschchartseriespielabelexplosion() float32 {
	if x != nil && x.Tschchartseriespielabelexplosion != nil {
		return *x.Tschchartseriespielabelexplosion
	}
	return 0
}

func (x *TSCHPreUFFChartSeriesNonStyleArchive) GetTschchartseriesmixedlineshowsymbol() bool {
	if x != nil && x.Tschchartseriesmixedlineshowsymbol != nil {
		return *x.Tschchartseriesmixedlineshowsymbol
	}
	return false
}

func (x *TSCHPreUFFChartSeriesNonStyleArchive) GetTschchartseriesmixedareashowsymbol() bool {
	if x != nil && x.Tschchartseriesmixedareashowsymbol != nil {
		return *x.Tschchartseriesmixedareashowsymbol
	}
	return false
}

func (x *TSCHPreUFFChartSeriesNonStyleArchive) GetTschchartseriesmixedlinesymboltype() int32 {
	if x != nil && x.Tschchartseriesmixedlinesymboltype != nil {
		return *x.Tschchartseriesmixedlinesymboltype
	}
	return 0
}

func (x *TSCHPreUFFChartSeriesNonStyleArchive) GetTschchartseriesmixedareasymboltype() int32 {
	if x != nil && x.Tschchartseriesmixedareasymboltype != nil {
		return *x.Tschchartseriesmixedareasymboltype
	}
	return 0
}

func (x *TSCHPreUFFChartSeriesNonStyleArchive) GetTschchartseriesmixedshowvaluelabels() bool {
	if x != nil && x.Tschchartseriesmixedshowvaluelabels != nil {
		return *x.Tschchartseriesmixedshowvaluelabels
	}
	return false
}

func (x *TSCHPreUFFChartSeriesNonStyleArchive) GetTschchartseriesmixedlinelinetype() int32 {
	if x != nil && x.Tschchartseriesmixedlinelinetype != nil {
		return *x.Tschchartseriesmixedlinelinetype
	}
	return 0
}

func (x *TSCHPreUFFChartSeriesNonStyleArchive) GetTschchartseriesdefaultyaxisordinal() int32 {
	if x != nil && x.Tschchartseriesdefaultyaxisordinal != nil {
		return *x.Tschchartseriesdefaultyaxisordinal
	}
	return 0
}

func (x *TSCHPreUFFChartSeriesNonStyleArchive) GetTschchartseriespieshowserieslabels() bool {
	if x != nil && x.Tschchartseriespieshowserieslabels != nil {
		return *x.Tschchartseriespieshowserieslabels
	}
	return false
}

func (x *TSCHPreUFFChartSeriesNonStyleArchive) GetTschchartseriesscattershowsymbol() bool {
	if x != nil && x.Tschchartseriesscattershowsymbol != nil {
		return *x.Tschchartseriesscattershowsymbol
	}
	return false
}

func (x *TSCHPreUFFChartSeriesNonStyleArchive) GetTschchartseriesscattersymboltype() int32 {
	if x != nil && x.Tschchartseriesscattersymboltype != nil {
		return *x.Tschchartseriesscattersymboltype
	}
	return 0
}

func (x *TSCHPreUFFChartSeriesNonStyleArchive) GetTschchartseriesscatterlinetype() int32 {
	if x != nil && x.Tschchartseriesscatterlinetype != nil {
		return *x.Tschchartseriesscatterlinetype
	}
	return 0
}

func (x *TSCHPreUFFChartSeriesNonStyleArchive) GetTschchartseriesscattershowline() bool {
	if x != nil && x.Tschchartseriesscattershowline != nil {
		return *x.Tschchartseriesscattershowline
	}
	return false
}

func (x *TSCHPreUFFChartSeriesNonStyleArchive) GetTschchartseriesstackedpercentnumberformat() *ChartsNumberFormatArchive {
	if x != nil {
		return x.Tschchartseriesstackedpercentnumberformat
	}
	return nil
}

func (x *TSCHPreUFFChartSeriesNonStyleArchive) GetTschchartseriesdefaultseriestype() int32 {
	if x != nil && x.Tschchartseriesdefaultseriestype != nil {
		return *x.Tschchartseriesdefaultseriestype
	}
	return 0
}

func (x *TSCHPreUFFChartSeriesNonStyleArchive) GetTschchartseriesdefaulttrendlinetype() int32 {
	if x != nil && x.Tschchartseriesdefaulttrendlinetype != nil {
		return *x.Tschchartseriesdefaulttrendlinetype
	}
	return 0
}

func (x *TSCHPreUFFChartSeriesNonStyleArchive) GetTschchartseriesdefaulttrendlineorder() int32 {
	if x != nil && x.Tschchartseriesdefaulttrendlineorder != nil {
		return *x.Tschchartseriesdefaulttrendlineorder
	}
	return 0
}

func (x *TSCHPreUFFChartSeriesNonStyleArchive) GetTschchartseriesdefaulttrendlineperiod() int32 {
	if x != nil && x.Tschchartseriesdefaulttrendlineperiod != nil {
		return *x.Tschchartseriesdefaulttrendlineperiod
	}
	return 0
}

func (x *TSCHPreUFFChartSeriesNonStyleArchive) GetTschchartseriesdefaulttrendlineshowlabel() bool {
	if x != nil && x.Tschchartseriesdefaulttrendlineshowlabel != nil {
		return *x.Tschchartseriesdefaulttrendlineshowlabel
	}
	return false
}

func (x *TSCHPreUFFChartSeriesNonStyleArchive) GetTschchartseriesdefaulttrendlinelabelstring() string {
	if x != nil && x.Tschchartseriesdefaulttrendlinelabelstring != nil {
		return *x.Tschchartseriesdefaulttrendlinelabelstring
	}
	return ""
}

func (x *TSCHPreUFFChartSeriesNonStyleArchive) GetTschchartseriesdefaulttrendlineshowequation() bool {
	if x != nil && x.Tschchartseriesdefaulttrendlineshowequation != nil {
		return *x.Tschchartseriesdefaulttrendlineshowequation
	}
	return false
}

func (x *TSCHPreUFFChartSeriesNonStyleArchive) GetTschchartseriesdefaulttrendlineshowr2Value() bool {
	if x != nil && x.Tschchartseriesdefaulttrendlineshowr2Value != nil {
		return *x.Tschchartseriesdefaulttrendlineshowr2Value
	}
	return false
}

func (x *TSCHPreUFFChartSeriesNonStyleArchive) GetTschchartseriesdefaulterrorbarsetting() int32 {
	if x != nil && x.Tschchartseriesdefaulterrorbarsetting != nil {
		return *x.Tschchartseriesdefaulterrorbarsetting
	}
	return 0
}

func (x *TSCHPreUFFChartSeriesNonStyleArchive) GetTschchartseriesdefaulterrorbarsettingscatterx() int32 {
	if x != nil && x.Tschchartseriesdefaulterrorbarsettingscatterx != nil {
		return *x.Tschchartseriesdefaulterrorbarsettingscatterx
	}
	return 0
}

func (x *TSCHPreUFFChartSeriesNonStyleArchive) GetTschchartseriesdefaulterrorbartype() int32 {
	if x != nil && x.Tschchartseriesdefaulterrorbartype != nil {
		return *x.Tschchartseriesdefaulterrorbartype
	}
	return 0
}

func (x *TSCHPreUFFChartSeriesNonStyleArchive) GetTschchartseriesdefaulterrorbartypescatterx() int32 {
	if x != nil && x.Tschchartseriesdefaulterrorbartypescatterx != nil {
		return *x.Tschchartseriesdefaulterrorbartypescatterx
	}
	return 0
}

func (x *TSCHPreUFFChartSeriesNonStyleArchive) GetTschchartseriesdefaulterrorbarfixedvalue() float32 {
	if x != nil && x.Tschchartseriesdefaulterrorbarfixedvalue != nil {
		return *x.Tschchartseriesdefaulterrorbarfixedvalue
	}
	return 0
}

func (x *TSCHPreUFFChartSeriesNonStyleArchive) GetTschchartseriesdefaulterrorbarfixedvaluescatterx() float32 {
	if x != nil && x.Tschchartseriesdefaulterrorbarfixedvaluescatterx != nil {
		return *x.Tschchartseriesdefaulterrorbarfixedvaluescatterx
	}
	return 0
}

func (x *TSCHPreUFFChartSeriesNonStyleArchive) GetTschchartseriesdefaulterrorbarpercentvalue() float32 {
	if x != nil && x.Tschchartseriesdefaulterrorbarpercentvalue != nil {
		return *x.Tschchartseriesdefaulterrorbarpercentvalue
	}
	return 0
}

func (x *TSCHPreUFFChartSeriesNonStyleArchive) GetTschchartseriesdefaulterrorbarpercentvaluescatterx() float32 {
	if x != nil && x.Tschchartseriesdefaulterrorbarpercentvaluescatterx != nil {
		return *x.Tschchartseriesdefaulterrorbarpercentvaluescatterx
	}
	return 0
}

func (x *TSCHPreUFFChartSeriesNonStyleArchive) GetTschchartseriesdefaulterrorbarstddevvalue() float32 {
	if x != nil && x.Tschchartseriesdefaulterrorbarstddevvalue != nil {
		return *x.Tschchartseriesdefaulterrorbarstddevvalue
	}
	return 0
}

func (x *TSCHPreUFFChartSeriesNonStyleArchive) GetTschchartseriesdefaulterrorbarstddevvaluescatterx() float32 {
	if x != nil && x.Tschchartseriesdefaulterrorbarstddevvaluescatterx != nil {
		return *x.Tschchartseriesdefaulterrorbarstddevvaluescatterx
	}
	return 0
}

func (x *TSCHPreUFFChartSeriesNonStyleArchive) GetTschchartseriesdefaulterrorbarcustompositivedata() *ChartsNSArrayOfNSNumberDoubleArchive {
	if x != nil {
		return x.Tschchartseriesdefaulterrorbarcustompositivedata
	}
	return nil
}

func (x *TSCHPreUFFChartSeriesNonStyleArchive) GetTschchartseriesdefaulterrorbarcustompositivedatascatterx() *ChartsNSArrayOfNSNumberDoubleArchive {
	if x != nil {
		return x.Tschchartseriesdefaulterrorbarcustompositivedatascatterx
	}
	return nil
}

func (x *TSCHPreUFFChartSeriesNonStyleArchive) GetTschchartseriesdefaulterrorbarcustomnegativedata() *ChartsNSArrayOfNSNumberDoubleArchive {
	if x != nil {
		return x.Tschchartseriesdefaulterrorbarcustomnegativedata
	}
	return nil
}

func (x *TSCHPreUFFChartSeriesNonStyleArchive) GetTschchartseriesdefaulterrorbarcustomnegativedatascatterx() *ChartsNSArrayOfNSNumberDoubleArchive {
	if x != nil {
		return x.Tschchartseriesdefaulterrorbarcustomnegativedatascatterx
	}
	return nil
}

func (x *TSCHPreUFFChartSeriesNonStyleArchive) GetTschchartseriesdefaulttrendlineequationoffsetx() float32 {
	if x != nil && x.Tschchartseriesdefaulttrendlineequationoffsetx != nil {
		return *x.Tschchartseriesdefaulttrendlineequationoffsetx
	}
	return 0
}

func (x *TSCHPreUFFChartSeriesNonStyleArchive) GetTschchartseriesdefaulttrendlineequationoffsety() float32 {
	if x != nil && x.Tschchartseriesdefaulttrendlineequationoffsety != nil {
		return *x.Tschchartseriesdefaulttrendlineequationoffsety
	}
	return 0
}

func (x *TSCHPreUFFChartSeriesNonStyleArchive) GetTschchartseriesdefaulttrendlinersquaredoffsetx() float32 {
	if x != nil && x.Tschchartseriesdefaulttrendlinersquaredoffsetx != nil {
		return *x.Tschchartseriesdefaulttrendlinersquaredoffsetx
	}
	return 0
}

func (x *TSCHPreUFFChartSeriesNonStyleArchive) GetTschchartseriesdefaulttrendlinersquaredoffsety() float32 {
	if x != nil && x.Tschchartseriesdefaulttrendlinersquaredoffsety != nil {
		return *x.Tschchartseriesdefaulttrendlinersquaredoffsety
	}
	return 0
}

func (x *TSCHPreUFFChartSeriesNonStyleArchive) GetTschchartseriesdefaultshowtrendline() bool {
	if x != nil && x.Tschchartseriesdefaultshowtrendline != nil {
		return *x.Tschchartseriesdefaultshowtrendline
	}
	return false
}

func (x *TSCHPreUFFChartSeriesNonStyleArchive) GetTschchartseriesdefaultshowerrorbar() bool {
	if x != nil && x.Tschchartseriesdefaultshowerrorbar != nil {
		return *x.Tschchartseriesdefaultshowerrorbar
	}
	return false
}

func (x *TSCHPreUFFChartSeriesNonStyleArchive) GetTschchartseriesdefaultshowerrorbarscatterx() bool {
	if x != nil && x.Tschchartseriesdefaultshowerrorbarscatterx != nil {
		return *x.Tschchartseriesdefaultshowerrorbarscatterx
	}
	return false
}

func (x *TSCHPreUFFChartSeriesNonStyleArchive) GetTschchartseriesbubblesizedimension() int32 {
	if x != nil && x.Tschchartseriesbubblesizedimension != nil {
		return *x.Tschchartseriesbubblesizedimension
	}
	return 0
}

func (x *TSCHPreUFFChartSeriesNonStyleArchive) GetTschchartseriesbubbleshowvaluelabels() bool {
	if x != nil && x.Tschchartseriesbubbleshowvaluelabels != nil {
		return *x.Tschchartseriesbubbleshowvaluelabels
	}
	return false
}

func (x *TSCHPreUFFChartSeriesNonStyleArchive) GetTschchartseriesbubblelinetype() int32 {
	if x != nil && x.Tschchartseriesbubblelinetype != nil {
		return *x.Tschchartseriesbubblelinetype
	}
	return 0
}

func (x *TSCHPreUFFChartSeriesNonStyleArchive) GetTschchartseriesbubbleshownegativedata() bool {
	if x != nil && x.Tschchartseriesbubbleshownegativedata != nil {
		return *x.Tschchartseriesbubbleshownegativedata
	}
	return false
}

func (x *TSCHPreUFFChartSeriesNonStyleArchive) GetTschchartseriesbubbleadjustmentscale() float32 {
	if x != nil && x.Tschchartseriesbubbleadjustmentscale != nil {
		return *x.Tschchartseriesbubbleadjustmentscale
	}
	return 0
}

type TSCHPreUFFChartGridArchive_ValueRow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []float64 `protobuf:"fixed64,1,rep,name=value" json:"value,omitempty"`
}

func (x *TSCHPreUFFChartGridArchive_ValueRow) Reset() {
	*x = TSCHPreUFFChartGridArchive_ValueRow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHPreUFFArchives_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSCHPreUFFChartGridArchive_ValueRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSCHPreUFFChartGridArchive_ValueRow) ProtoMessage() {}

func (x *TSCHPreUFFChartGridArchive_ValueRow) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHPreUFFArchives_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSCHPreUFFChartGridArchive_ValueRow.ProtoReflect.Descriptor instead.
func (*TSCHPreUFFChartGridArchive_ValueRow) Descriptor() ([]byte, []int) {
	return file_TSCHPreUFFArchives_proto_rawDescGZIP(), []int{3, 0}
}

func (x *TSCHPreUFFChartGridArchive_ValueRow) GetValue() []float64 {
	if x != nil {
		return x.Value
	}
	return nil
}

var File_TSCHPreUFFArchives_proto protoreflect.FileDescriptor

var file_TSCHPreUFFArchives_proto_rawDesc = []byte{
	0x0a, 0x18, 0x54, 0x53, 0x43, 0x48, 0x50, 0x72, 0x65, 0x55, 0x46, 0x46, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x54, 0x53, 0x43, 0x48,
	0x2e, 0x50, 0x72, 0x65, 0x55, 0x46, 0x46, 0x1a, 0x11, 0x54, 0x53, 0x50, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x54, 0x53, 0x44, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x54,
	0x53, 0x53, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x19, 0x54, 0x53, 0x43, 0x48, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x5f, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x54, 0x53, 0x43,
	0x48, 0x33, 0x44, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xce, 0x0a, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x44, 0x72, 0x61, 0x77,
	0x61, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x12, 0x3f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x50,
	0x72, 0x65, 0x55, 0x46, 0x46, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x6c, 0x65, 0x67,
	0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x50, 0x72, 0x65, 0x55, 0x46, 0x46, 0x2e, 0x4c, 0x65,
	0x67, 0x65, 0x6e, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x0b, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x3d, 0x0a,
	0x11, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x74, 0x5f, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e,
	0x52, 0x65, 0x63, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0f, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x11,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x61, 0x78, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x78,
	0x69, 0x73, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x14, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x5f, 0x61, 0x78, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x12, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x41, 0x78, 0x69, 0x73, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x14, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x61, 0x78, 0x69, 0x73, 0x5f, 0x6e, 0x6f, 0x6e, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x12, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x41,
	0x78, 0x69, 0x73, 0x4e, 0x6f, 0x6e, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x17,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x61, 0x78, 0x69, 0x73, 0x5f, 0x6e, 0x6f,
	0x6e, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x15, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x41, 0x78, 0x69, 0x73, 0x4e, 0x6f, 0x6e, 0x73, 0x74,
	0x79, 0x6c, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x13, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x74,
	0x68, 0x65, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x11, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x15, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x53, 0x70, 0x61, 0x72, 0x73, 0x65,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x13,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x6e, 0x6f,
	0x6e, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x53, 0x70, 0x61, 0x72, 0x73, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x4e, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x09, 0x6e, 0x6f,
	0x6e, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x6e,
	0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x38, 0x0a, 0x12, 0x63, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x10, 0x63, 0x64, 0x65,
	0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x3c, 0x0a,
	0x12, 0x63, 0x68, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x12, 0x39, 0x0a, 0x10, 0x70,
	0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x18,
	0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x1a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72,
	0x6f, 0x77, 0x5f, 0x73, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x65,
	0x5f, 0x63, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x6c, 0x61, 0x73, 0x74,
	0x52, 0x6f, 0x77, 0x53, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x54, 0x68, 0x65, 0x43, 0x64,
	0x65, 0x12, 0x3f, 0x0a, 0x1d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x5f, 0x73, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x65, 0x5f, 0x63,
	0x64, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x54, 0x68, 0x65, 0x43,
	0x64, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x63, 0x68, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x63, 0x68, 0x61, 0x72, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x55, 0x0a, 0x28, 0x6e,
	0x65, 0x65, 0x64, 0x73, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x5f, 0x64, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x23, 0x6e,
	0x65, 0x65, 0x64, 0x73, 0x43, 0x61, 0x6c, 0x63, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x44, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xb4, 0x01, 0x0a, 0x12, 0x4c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x0a,
	0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x54,
	0x53, 0x43, 0x48, 0x2e, 0x52, 0x65, 0x63, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x09,
	0x6e, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x08, 0x6e, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x22, 0x9e, 0x02, 0x0a, 0x11, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12,
	0x22, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x04, 0x67, 0x72, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x04, 0x67, 0x72, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x12, 0x48, 0x0a, 0x0b, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x67, 0x72, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x50, 0x72,
	0x65, 0x55, 0x46, 0x46, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x50, 0x72, 0x65, 0x55, 0x46, 0x46, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x47, 0x72, 0x69, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x0a, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xfd, 0x01, 0x0a, 0x1a, 0x54,
	0x53, 0x43, 0x48, 0x50, 0x72, 0x65, 0x55, 0x46, 0x46, 0x43, 0x68, 0x61, 0x72, 0x74, 0x47, 0x72,
	0x69, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x77, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x77, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x72, 0x6f, 0x77,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x50, 0x72,
	0x65, 0x55, 0x46, 0x46, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x50, 0x72, 0x65, 0x55, 0x46, 0x46, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x47, 0x72, 0x69, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x6f, 0x77, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x6f, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x69, 0x72, 0x74, 0x79, 0x18, 0x06, 0x20, 0x02, 0x28,
	0x08, 0x52, 0x05, 0x64, 0x69, 0x72, 0x74, 0x79, 0x1a, 0x20, 0x0a, 0x08, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x6f, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xf6, 0x09, 0x0a, 0x19, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x54,
	0x53, 0x43, 0x48, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0d, 0x64, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x40, 0x0a, 0x0e, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x4e,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x52, 0x0d, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x12, 0x38, 0x0a, 0x18, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x74, 0x68, 0x6f, 0x75, 0x73, 0x61,
	0x6e, 0x64, 0x73, 0x5f, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20,
	0x02, 0x28, 0x08, 0x52, 0x16, 0x73, 0x68, 0x6f, 0x77, 0x54, 0x68, 0x6f, 0x75, 0x73, 0x61, 0x6e,
	0x64, 0x73, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x43, 0x0a, 0x11, 0x66,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79,
	0x18, 0x07, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x46, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x52, 0x10,
	0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x09, 0x20,
	0x02, 0x28, 0x0d, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0a,
	0x62, 0x61, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x73, 0x5f, 0x73, 0x69, 0x67,
	0x6e, 0x18, 0x0b, 0x20, 0x02, 0x28, 0x08, 0x52, 0x10, 0x62, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65,
	0x4d, 0x69, 0x6e, 0x75, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x75, 0x73, 0x65,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x18, 0x0c, 0x20, 0x02, 0x28, 0x08, 0x52, 0x12, 0x75, 0x73, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x73, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x0d, 0x20, 0x02, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0e, 0x20, 0x02, 0x28, 0x01, 0x52, 0x0b,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x31, 0x0a, 0x14, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x74, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x74, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x60,
	0x0a, 0x25, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x74, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x10, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x65, 0x74, 0x52, 0x22, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x74, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73,
	0x12, 0x58, 0x0a, 0x2a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x11,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x24, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52,
	0x69, 0x67, 0x68, 0x74, 0x4f, 0x66, 0x4c, 0x61, 0x73, 0x74, 0x44, 0x69, 0x67, 0x69, 0x74, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x12, 0x20, 0x02,
	0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x54, 0x65, 0x78, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x12, 0x32, 0x0a, 0x15, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x65, 0x72, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x13, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x13, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x57,
	0x69, 0x64, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x5f,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x14, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x60, 0x0a, 0x2e, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x73, 0x18, 0x15, 0x20, 0x02, 0x28,
	0x0d, 0x52, 0x28, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4e, 0x6f, 0x6e, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x44, 0x69, 0x67, 0x69, 0x74, 0x73, 0x12, 0x60, 0x0a, 0x2e, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x73, 0x18, 0x16, 0x20,
	0x02, 0x28, 0x0d, 0x52, 0x28, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4e, 0x6f, 0x6e,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x44, 0x69, 0x67, 0x69, 0x74, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x22, 0xab, 0x1f, 0x0a, 0x1b, 0x54, 0x53, 0x43, 0x48, 0x50, 0x72, 0x65, 0x55,
	0x46, 0x46, 0x43, 0x68, 0x61, 0x72, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x54, 0x53, 0x53, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x60, 0x0a, 0x22,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x66, 0x69,
	0x6c, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x46,
	0x69, 0x6c, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x22, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x66, 0x69, 0x6c, 0x6c, 0x12, 0x66,
	0x0a, 0x24, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54,
	0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x24, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x68, 0x0a, 0x26, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x67, 0x72,
	0x69, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x66, 0x69, 0x6c, 0x6c,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x46, 0x69, 0x6c,
	0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x26, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x67, 0x72,
	0x69, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x66, 0x69, 0x6c, 0x6c,
	0x12, 0x48, 0x0a, 0x1f, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66,
	0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x74,
	0x67, 0x61, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1f, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x74, 0x67, 0x61, 0x70, 0x12, 0x48, 0x0a, 0x1f, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x62, 0x61, 0x72, 0x67, 0x61, 0x70, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x1f, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e,
	0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x62, 0x61,
	0x72, 0x67, 0x61, 0x70, 0x12, 0x46, 0x0a, 0x1e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x68, 0x6f, 0x77,
	0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x73, 0x68, 0x6f, 0x77, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x5e, 0x0a, 0x20,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72,
	0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x20, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x52, 0x0a, 0x1e,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x52, 0x1e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x12, 0x5c, 0x0a, 0x29, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66,
	0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x67, 0x72, 0x69, 0x64, 0x62, 0x61, 0x63, 0x6b,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x29, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e,
	0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x67, 0x72, 0x69, 0x64, 0x62, 0x61, 0x63,
	0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x4c,
	0x0a, 0x21, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x21, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x63,
	0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x5e, 0x0a, 0x20,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x68, 0x61,
	0x64, 0x6f, 0x77, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x20, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x12, 0x4c, 0x0a, 0x21,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x02, 0x52, 0x21, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x62, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x62, 0x0a, 0x2c, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x2c, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x70, 0x61, 0x72, 0x61, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x62,
	0x0a, 0x2c, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x6d, 0x61, 0x69, 0x6e, 0x66, 0x6f, 0x6e, 0x74, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x2c, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69,
	0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x6d, 0x61, 0x69, 0x6e, 0x66, 0x6f, 0x6e, 0x74, 0x66, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x12, 0x68, 0x0a, 0x2f, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69,
	0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x6d, 0x61, 0x69, 0x6e, 0x66, 0x6f, 0x6e, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x64, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x2f, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x6d, 0x61, 0x69, 0x6e, 0x66,
	0x6f, 0x6e, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x8e, 0x01, 0x0a,
	0x42, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x74,
	0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x65, 0x71, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x42, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x64,
	0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69,
	0x6e, 0x65, 0x65, 0x71, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x8e, 0x01,
	0x0a, 0x42, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65,
	0x64, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x42, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c,
	0x69, 0x6e, 0x65, 0x72, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x64, 0x70, 0x61, 0x72, 0x61, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x88,
	0x01, 0x0a, 0x35, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x65, 0x71, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x35, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66,
	0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x65, 0x71, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x12, 0x88, 0x01, 0x0a, 0x35, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x74, 0x72, 0x65, 0x6e,
	0x64, 0x6c, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x64, 0x73, 0x68, 0x61,
	0x64, 0x6f, 0x77, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e,
	0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x35, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x74, 0x72, 0x65,
	0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x64, 0x73, 0x68,
	0x61, 0x64, 0x6f, 0x77, 0x12, 0x76, 0x0a, 0x36, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x64, 0x65, 0x70, 0x72,
	0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x65,
	0x71, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x36, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69,
	0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x65, 0x71, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x76, 0x0a, 0x36,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x74, 0x72,
	0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x64, 0x6f,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x23, 0x20, 0x01, 0x28, 0x02, 0x52, 0x36, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x74, 0x72, 0x65, 0x6e,
	0x64, 0x6c, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x64, 0x6f, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x12, 0x63, 0x0a, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x61, 0x72, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x33, 0x64, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x18, 0xb4, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x69, 0x6e, 0x66, 0x6f, 0x62, 0x61, 0x72, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x33, 0x64, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x12, 0x69, 0x0a, 0x25, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x33, 0x64, 0x73, 0x68, 0x61, 0x64,
	0x6f, 0x77, 0x18, 0xb5, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e,
	0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x25, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x33, 0x64, 0x73, 0x68,
	0x61, 0x64, 0x6f, 0x77, 0x12, 0x65, 0x0a, 0x23, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x69, 0x6e, 0x66, 0x6f, 0x6c, 0x69, 0x6e, 0x65, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x33, 0x64, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x18, 0xb6, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x23, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x69, 0x6e, 0x66, 0x6f, 0x6c, 0x69, 0x6e, 0x65, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x33, 0x64, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x12, 0x65, 0x0a, 0x23, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x61, 0x72, 0x65, 0x61,
	0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x33, 0x64, 0x73, 0x68, 0x61, 0x64,
	0x6f, 0x77, 0x18, 0xb7, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e,
	0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x23, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x61, 0x72, 0x65, 0x61,
	0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x33, 0x64, 0x73, 0x68, 0x61, 0x64,
	0x6f, 0x77, 0x12, 0x63, 0x0a, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69,
	0x6e, 0x66, 0x6f, 0x70, 0x69, 0x65, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x33, 0x64, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x18, 0xb8, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e,
	0x66, 0x6f, 0x70, 0x69, 0x65, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x33,
	0x64, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x12, 0x7a, 0x0a, 0x25, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x33,
	0x64, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x18, 0xb9, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x25, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x33, 0x64, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x12, 0x78, 0x0a, 0x24, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x69, 0x6e, 0x66, 0x6f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x33, 0x64, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x69, 0x6e, 0x67, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0xba, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x33,
	0x44, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x24, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x33, 0x64, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x72, 0x0a,
	0x21, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x61,
	0x72, 0x33, 0x64, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x18, 0xbb, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x54, 0x53, 0x43, 0x48,
	0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x21,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x61, 0x72,
	0x33, 0x64, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x12, 0x74, 0x0a, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e,
	0x66, 0x6f, 0x6c, 0x69, 0x6e, 0x65, 0x33, 0x64, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0xbc, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x4c, 0x69, 0x67,
	0x68, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e,
	0x66, 0x6f, 0x6c, 0x69, 0x6e, 0x65, 0x33, 0x64, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x74, 0x0a, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x61, 0x72, 0x65, 0x61, 0x33, 0x64, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0xbd, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72,
	0x74, 0x33, 0x44, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x61, 0x72, 0x65, 0x61, 0x33, 0x64, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x72, 0x0a,
	0x21, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x70, 0x69,
	0x65, 0x33, 0x64, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x18, 0xbe, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x54, 0x53, 0x43, 0x48,
	0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x21,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x70, 0x69, 0x65,
	0x33, 0x64, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x12, 0x5f, 0x0a, 0x2a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e,
	0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x33, 0x64, 0x62, 0x65, 0x76, 0x65, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x73, 0x18,
	0xc6, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x2a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x64, 0x65, 0x70, 0x72,
	0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x33, 0x64, 0x62, 0x65, 0x76, 0x65, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x73, 0x12, 0x57, 0x0a, 0x26, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69,
	0x6e, 0x66, 0x6f, 0x70, 0x69, 0x65, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x33, 0x64, 0x62, 0x65, 0x76, 0x65, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x73, 0x18, 0xc7, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x26, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e,
	0x66, 0x6f, 0x70, 0x69, 0x65, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x33,
	0x64, 0x62, 0x65, 0x76, 0x65, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x26, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x61, 0x72, 0x64,
	0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x33, 0x64, 0x62, 0x65, 0x76, 0x65, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x73, 0x18, 0xc8, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x26, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x61, 0x72, 0x64, 0x65,
	0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x33, 0x64, 0x62, 0x65, 0x76, 0x65, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x73, 0x12, 0x5d, 0x0a, 0x29, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x64, 0x65, 0x70, 0x72, 0x65,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x33, 0x64, 0x62, 0x65, 0x76, 0x65, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x73, 0x18, 0xc9, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x29, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x64, 0x65, 0x70,
	0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x33, 0x64, 0x62, 0x65, 0x76, 0x65, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x73, 0x12, 0x5b, 0x0a, 0x28, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x64, 0x65, 0x70, 0x72, 0x65,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x33, 0x64, 0x62, 0x61, 0x72, 0x73, 0x68, 0x61, 0x70, 0x65, 0x18,
	0xca, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x28, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x64, 0x65, 0x70, 0x72,
	0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x33, 0x64, 0x62, 0x61, 0x72, 0x73, 0x68, 0x61, 0x70, 0x65,
	0x12, 0x4f, 0x0a, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66,
	0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x33, 0x64, 0x63, 0x68, 0x61, 0x72, 0x74, 0x6f,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0xcf, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x22, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x33, 0x64, 0x63, 0x68, 0x61, 0x72, 0x74, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x22, 0xc5, 0x12, 0x0a, 0x1e, 0x54, 0x53, 0x43, 0x48, 0x50, 0x72, 0x65, 0x55, 0x46, 0x46,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x4e, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x54, 0x53, 0x53, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x3c, 0x0a,
	0x19, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x19, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x46, 0x0a, 0x1e, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x73, 0x68, 0x6f, 0x77, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e,
	0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x68, 0x6f, 0x77, 0x6c, 0x65, 0x67,
	0x65, 0x6e, 0x64, 0x12, 0x4c, 0x0a, 0x21, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x70, 0x69, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x21,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x70, 0x69, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x61, 0x6e, 0x67, 0x6c,
	0x65, 0x12, 0x44, 0x0a, 0x1d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e,
	0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x68, 0x6f, 0x77, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x68,
	0x6f, 0x77, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x72, 0x0a, 0x34, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x64,
	0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x6d, 0x61,
	0x69, 0x6e, 0x66, 0x6f, 0x6e, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x34, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x64, 0x65, 0x70, 0x72, 0x65,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x6d, 0x61, 0x69, 0x6e, 0x66, 0x6f,
	0x6e, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x63, 0x0a, 0x1e, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x33, 0x64, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xac, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72,
	0x74, 0x33, 0x44, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x1e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x33, 0x64, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x5d, 0x0a, 0x1b, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66,
	0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x33, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18,
	0xad, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x33, 0x44, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x1b, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66,
	0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x33, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x12,
	0x5b, 0x0a, 0x1a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x33, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0xae, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72,
	0x74, 0x33, 0x44, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x1a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x33, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x55, 0x0a, 0x17,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x61, 0x72,
	0x33, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0xaf, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x17, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x61, 0x72, 0x33, 0x64, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x12, 0x57, 0x0a, 0x18, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x69, 0x6e, 0x66, 0x6f, 0x6c, 0x69, 0x6e, 0x65, 0x33, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18,
	0xb0, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x33, 0x44, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x18, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66,
	0x6f, 0x6c, 0x69, 0x6e, 0x65, 0x33, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x57, 0x0a, 0x18,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x61, 0x72, 0x65,
	0x61, 0x33, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0xb1, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x18, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x61, 0x72, 0x65, 0x61, 0x33, 0x64,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x55, 0x0a, 0x17, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x70, 0x69, 0x65, 0x33, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x18, 0xb2, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x17, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e,
	0x66, 0x6f, 0x70, 0x69, 0x65, 0x33, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x63, 0x0a, 0x1e,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x33, 0x64, 0x76, 0x69, 0x65, 0x77, 0x70, 0x6f, 0x72, 0x74, 0x18, 0xb9,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x33, 0x44, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x1e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x33, 0x64, 0x76, 0x69, 0x65, 0x77, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x8e, 0x01, 0x0a, 0x2f, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69,
	0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x33, 0x64, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0xc0, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x54,
	0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x4c, 0x69, 0x67, 0x68, 0x74,
	0x69, 0x6e, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x2f, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x33, 0x64, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x12, 0x8c, 0x01, 0x0a, 0x2e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x69, 0x6e, 0x66, 0x6f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x33, 0x64, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0xc1, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x54,
	0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x4c, 0x69, 0x67, 0x68, 0x74,
	0x69, 0x6e, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x2e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x33, 0x64, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x12, 0x86, 0x01, 0x0a, 0x2b, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69,
	0x6e, 0x66, 0x6f, 0x62, 0x61, 0x72, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x33, 0x64, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x18, 0xc2, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x2b, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x61, 0x72, 0x64,
	0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x33, 0x64, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x69, 0x6e, 0x67, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x2c, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x6c, 0x69, 0x6e, 0x65,
	0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x33, 0x64, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x69, 0x6e, 0x67, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0xc3, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x33,
	0x44, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x2c, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x6c, 0x69, 0x6e, 0x65, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x33, 0x64, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x2c, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x61, 0x72, 0x65, 0x61, 0x64, 0x65, 0x70, 0x72, 0x65,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x33, 0x64, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0xc4, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x4c, 0x69, 0x67, 0x68,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x2c, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66,
	0x6f, 0x61, 0x72, 0x65, 0x61, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x33,
	0x64, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x12, 0x86, 0x01, 0x0a, 0x2b, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e,
	0x66, 0x6f, 0x70, 0x69, 0x65, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x33,
	0x64, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x18, 0xc5, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x2b, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x70, 0x69, 0x65, 0x64, 0x65,
	0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x33, 0x64, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69,
	0x6e, 0x67, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x4f, 0x0a, 0x22, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x73, 0x6b, 0x69, 0x70, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x61, 0x18,
	0xc6, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x6b, 0x69, 0x70,
	0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4b, 0x0a, 0x20, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x33, 0x64, 0x62, 0x65, 0x76, 0x65, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x73, 0x18, 0xc7,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x20, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x33, 0x64, 0x62, 0x65, 0x76,
	0x65, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x1e, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x33,
	0x64, 0x62, 0x61, 0x72, 0x73, 0x68, 0x61, 0x70, 0x65, 0x18, 0xd0, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x1e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x33, 0x64, 0x62, 0x61, 0x72, 0x73, 0x68, 0x61, 0x70, 0x65,
	0x12, 0x57, 0x0a, 0x26, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66,
	0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x33, 0x64, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x65, 0x74, 0x64, 0x65, 0x70, 0x74, 0x68, 0x67, 0x61, 0x70, 0x18, 0xcb, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x26, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x33, 0x64, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65,
	0x74, 0x64, 0x65, 0x70, 0x74, 0x68, 0x67, 0x61, 0x70, 0x22, 0xf7, 0x03, 0x0a, 0x1c, 0x54, 0x53,
	0x43, 0x48, 0x50, 0x72, 0x65, 0x55, 0x46, 0x46, 0x4c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x54, 0x53, 0x53, 0x2e,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x1a, 0x74, 0x73, 0x63, 0x68, 0x6c, 0x65, 0x67, 0x65, 0x6e,
	0x64, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x66, 0x69, 0x6c,
	0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x46, 0x69,
	0x6c, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1a, 0x74, 0x73, 0x63, 0x68, 0x6c,
	0x65, 0x67, 0x65, 0x6e, 0x64, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x66, 0x69, 0x6c, 0x6c, 0x12, 0x56, 0x0a, 0x1c, 0x74, 0x73, 0x63, 0x68, 0x6c, 0x65, 0x67,
	0x65, 0x6e, 0x64, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73,
	0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53,
	0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x1c, 0x74, 0x73, 0x63, 0x68, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x56, 0x0a,
	0x1c, 0x74, 0x73, 0x63, 0x68, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1c, 0x74, 0x73, 0x63, 0x68, 0x6c, 0x65, 0x67,
	0x65, 0x6e, 0x64, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73,
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x12, 0x44, 0x0a, 0x1d, 0x74, 0x73, 0x63, 0x68, 0x6c, 0x65, 0x67,
	0x65, 0x6e, 0x64, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x6f,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1d, 0x74, 0x73,
	0x63, 0x68, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x66, 0x0a, 0x2e, 0x74,
	0x73, 0x63, 0x68, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x2e, 0x74, 0x73, 0x63, 0x68, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x22, 0x4a, 0x0a, 0x1f, 0x54, 0x53, 0x43, 0x48, 0x50, 0x72, 0x65, 0x55, 0x46,
	0x46, 0x4c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x4e, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x54, 0x53, 0x53, 0x2e, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x22,
	0x9e, 0x1e, 0x0a, 0x1f, 0x54, 0x53, 0x43, 0x48, 0x50, 0x72, 0x65, 0x55, 0x46, 0x46, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x41, 0x78, 0x69, 0x73, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x54, 0x53, 0x53, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x52, 0x0a, 0x24,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x67, 0x72, 0x69, 0x64, 0x6c,
	0x69, 0x6e, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x24, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x68,
	0x6f, 0x77, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73,
	0x12, 0x52, 0x0a, 0x24, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69,
	0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x67,
	0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x24,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x67, 0x72, 0x69, 0x64, 0x6c,
	0x69, 0x6e, 0x65, 0x73, 0x12, 0x68, 0x0a, 0x25, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x61, 0x78, 0x69, 0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x67,
	0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x25, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x6a, 0x6f, 0x72,
	0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x68,
	0x0a, 0x25, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x25, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x4e, 0x0a, 0x22, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x74, 0x69,
	0x63, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61,
	0x78, 0x69, 0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x74, 0x69, 0x63, 0x6b, 0x6d, 0x61, 0x72, 0x6b,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x24, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x68,
	0x6f, 0x77, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x74, 0x69, 0x63, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x24, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x61, 0x78, 0x69, 0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x6d, 0x61,
	0x6a, 0x6f, 0x72, 0x74, 0x69, 0x63, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x52, 0x0a, 0x24,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x74, 0x69, 0x63, 0x6b, 0x6d,
	0x61, 0x72, 0x6b, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x24, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x68,
	0x6f, 0x77, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x74, 0x69, 0x63, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73,
	0x12, 0x50, 0x0a, 0x23, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69,
	0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x6f, 0x72, 0x69, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x02, 0x52, 0x23, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61,
	0x78, 0x69, 0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x6d, 0x69, 0x6e, 0x69,
	0x6d, 0x75, 0x6d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x22,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x12, 0x68, 0x0a, 0x25, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61,
	0x78, 0x69, 0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x67, 0x72, 0x69,
	0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x25, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x61, 0x78, 0x69, 0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x67, 0x72,
	0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x12, 0x68, 0x0a, 0x25,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73,
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53,
	0x44, 0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x25, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x12, 0x56, 0x0a, 0x26, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x6a, 0x6f,
	0x72, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x02, 0x52, 0x26, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x61, 0x78, 0x69, 0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x67,
	0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x56,
	0x0a, 0x26, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e,
	0x65, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x02, 0x52, 0x26,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x6f,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x3e, 0x0a, 0x1a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x68, 0x6f, 0x77,
	0x61, 0x78, 0x69, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x68,
	0x6f, 0x77, 0x61, 0x78, 0x69, 0x73, 0x12, 0x58, 0x0a, 0x27, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x73,
	0x68, 0x6f, 0x77, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x73, 0x18, 0x32, 0x20, 0x01, 0x28, 0x08, 0x52, 0x27, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x73, 0x68,
	0x6f, 0x77, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73,
	0x12, 0x58, 0x0a, 0x27, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69,
	0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x73, 0x68, 0x6f, 0x77, 0x6d, 0x69, 0x6e,
	0x6f, 0x72, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x27, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x73, 0x68, 0x6f, 0x77, 0x6d, 0x69, 0x6e, 0x6f,
	0x72, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x6e, 0x0a, 0x28, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54,
	0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x28, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x67, 0x72, 0x69, 0x64,
	0x6c, 0x69, 0x6e, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x6e, 0x0a, 0x28, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54,
	0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x28, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x67, 0x72, 0x69, 0x64,
	0x6c, 0x69, 0x6e, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x54, 0x0a, 0x25, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x74, 0x69, 0x63, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x36, 0x20, 0x01, 0x28, 0x05, 0x52, 0x25, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x74, 0x69, 0x63, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x58, 0x0a, 0x27, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69,
	0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x73, 0x68, 0x6f, 0x77, 0x6d, 0x61, 0x6a,
	0x6f, 0x72, 0x74, 0x69, 0x63, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x37, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x27, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x73, 0x68, 0x6f, 0x77, 0x6d, 0x61, 0x6a, 0x6f,
	0x72, 0x74, 0x69, 0x63, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x58, 0x0a, 0x27, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x73, 0x68, 0x6f, 0x77, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x74, 0x69, 0x63, 0x6b,
	0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x38, 0x20, 0x01, 0x28, 0x08, 0x52, 0x27, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x73, 0x68, 0x6f, 0x77, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x74, 0x69, 0x63, 0x6b, 0x6d,
	0x61, 0x72, 0x6b, 0x73, 0x12, 0x56, 0x0a, 0x26, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x61, 0x78, 0x69, 0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x39,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x26, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61,
	0x78, 0x69, 0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x26,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x73,
	0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x26, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x73, 0x70, 0x61,
	0x63, 0x69, 0x6e, 0x67, 0x12, 0x52, 0x0a, 0x24, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x61, 0x78, 0x69, 0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x73, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x18, 0x3b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x24, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69,
	0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x73, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x4e, 0x0a, 0x22, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x73, 0x68, 0x6f, 0x77, 0x6c, 0x61, 0x73, 0x74, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x3c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61,
	0x78, 0x69, 0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x73, 0x68, 0x6f, 0x77, 0x6c,
	0x61, 0x73, 0x74, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x6e, 0x0a, 0x28, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x68,
	0x61, 0x64, 0x6f, 0x77, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44,
	0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x28,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x12, 0x6e, 0x0a, 0x28, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x68,
	0x61, 0x64, 0x6f, 0x77, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44,
	0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x28,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x12, 0x5c, 0x0a, 0x29, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x6f, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x41, 0x20, 0x01, 0x28, 0x02, 0x52, 0x29, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x6f,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x5c, 0x0a, 0x29, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x6d,
	0x69, 0x6e, 0x6f, 0x72, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x6f, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x42, 0x20, 0x01, 0x28, 0x02, 0x52, 0x29, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x6f, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x12, 0x44, 0x0a, 0x1d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x61, 0x78, 0x69, 0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x73, 0x68, 0x6f,
	0x77, 0x61, 0x78, 0x69, 0x73, 0x18, 0x43, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x73, 0x68, 0x6f, 0x77, 0x61, 0x78, 0x69, 0x73, 0x12, 0x54, 0x0a, 0x25, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x66, 0x20, 0x01, 0x28, 0x02, 0x52, 0x25, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x62, 0x0a, 0x2c, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69,
	0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x70, 0x61, 0x72,
	0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x6e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x2c, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x61, 0x78, 0x69, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x62, 0x0a, 0x2c, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x61, 0x78, 0x69, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x2c, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74,
	0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x5e, 0x0a, 0x2a, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x70, 0x20, 0x01, 0x28, 0x05, 0x52, 0x2a, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74,
	0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x5e, 0x0a, 0x2a, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x71, 0x20, 0x01, 0x28, 0x05, 0x52, 0x2a, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74,
	0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x64, 0x0a, 0x2d, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73,
	0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x72, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x2d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x70, 0x61, 0x72, 0x61, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x64,
	0x0a, 0x2d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x61, 0x72, 0x61,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x73, 0x20, 0x01, 0x28, 0x05, 0x52, 0x2d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x61, 0x78, 0x69, 0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x63, 0x0a, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x61, 0x78, 0x69, 0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x33, 0x64, 0x67, 0x72, 0x69, 0x64,
	0x6c, 0x69, 0x6e, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0xcb, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x61, 0x78, 0x69, 0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x33, 0x64, 0x67, 0x72, 0x69, 0x64, 0x6c,
	0x69, 0x6e, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x69, 0x0a, 0x25, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x33, 0x64, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x74, 0x72, 0x6f,
	0x6b, 0x65, 0x18, 0xcc, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e,
	0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x25, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x33, 0x64, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x74,
	0x72, 0x6f, 0x6b, 0x65, 0x12, 0x51, 0x0a, 0x23, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x61, 0x78, 0x69, 0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x33, 0x64, 0x67, 0x72, 0x69, 0x64,
	0x6c, 0x69, 0x6e, 0x65, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0xcd, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x23, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69,
	0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x33, 0x64, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x57, 0x0a, 0x26, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x33, 0x64, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x18, 0xce, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x26, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x33,
	0x64, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x22, 0xee, 0x0b, 0x0a, 0x22, 0x54, 0x53, 0x43, 0x48, 0x50, 0x72, 0x65, 0x55, 0x46, 0x46, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x41, 0x78, 0x69, 0x73, 0x4e, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x54, 0x53, 0x53, 0x2e, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x12, 0x63, 0x0a, 0x1b, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69,
	0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x75, 0x73, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x4e, 0x53, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1b, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x75, 0x73,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x12, 0x63, 0x0a, 0x1b, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x75, 0x73, 0x65,
	0x72, 0x6d, 0x61, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x54, 0x53, 0x43,
	0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x4e, 0x53, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1b, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x75, 0x73, 0x65, 0x72, 0x6d, 0x61, 0x78, 0x12, 0x72, 0x0a, 0x20, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x50, 0x72, 0x65, 0x55,
	0x46, 0x46, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x20, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x46,
	0x0a, 0x1e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x68, 0x6f, 0x77, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x61, 0x78, 0x69, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x68, 0x6f, 0x77,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x5a, 0x0a, 0x28, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x6f, 0x66, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x18, 0x32, 0x20, 0x01, 0x28, 0x05, 0x52, 0x28, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x6f, 0x66, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61,
	0x78, 0x69, 0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x17, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78,
	0x69, 0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x4c, 0x0a, 0x21,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x6f, 0x66, 0x64, 0x65, 0x63, 0x61, 0x64, 0x65,
	0x73, 0x18, 0x34, 0x20, 0x01, 0x28, 0x05, 0x52, 0x21, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x6f, 0x66, 0x64, 0x65, 0x63, 0x61, 0x64, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x1c, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x68, 0x6f, 0x77, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x35, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x1c, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x40,
	0x0a, 0x1b, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x36, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1b, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78,
	0x69, 0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x5a, 0x0a, 0x28, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69,
	0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x6f, 0x66, 0x6d, 0x61,
	0x6a, 0x6f, 0x72, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x37, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x28, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69,
	0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x6f, 0x66, 0x6d, 0x61,
	0x6a, 0x6f, 0x72, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x17,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x48, 0x0a, 0x1f, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x73,
	0x68, 0x6f, 0x77, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x64, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1f, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x73, 0x68, 0x6f, 0x77, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x12, 0x54, 0x0a, 0x25, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69,
	0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x73, 0x68, 0x6f, 0x77, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x65, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x25, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x73, 0x68, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x46, 0x0a, 0x1e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x73,
	0x68, 0x6f, 0x77, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x73, 0x68, 0x6f, 0x77, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x3e,
	0x0a, 0x1a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x67, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69,
	0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x52,
	0x0a, 0x24, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x74, 0x79, 0x70, 0x65, 0x18, 0x78, 0x20, 0x01, 0x28, 0x05, 0x52, 0x24, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x51, 0x0a, 0x23, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61,
	0x78, 0x69, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x33, 0x64, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xd0, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x23, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x33, 0x64, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x20, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x70, 0x6c,
	0x6f, 0x74, 0x74, 0x6f, 0x65, 0x64, 0x67, 0x65, 0x73, 0x18, 0x74, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x20, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x70, 0x6c, 0x6f, 0x74, 0x74, 0x6f, 0x65, 0x64, 0x67, 0x65,
	0x73, 0x22, 0xa2, 0x4e, 0x0a, 0x21, 0x54, 0x53, 0x43, 0x48, 0x50, 0x72, 0x65, 0x55, 0x46, 0x46,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x54, 0x53, 0x53, 0x2e, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x12, 0x7f, 0x0a, 0x3a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c,
	0x69, 0x6e, 0x65, 0x65, 0x71, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xc9,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x3a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x72, 0x65,
	0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x65, 0x71, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x61,
	0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x7f, 0x0a, 0x3a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x72, 0x65, 0x6e, 0x64,
	0x6c, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x64, 0x70, 0x61, 0x72, 0x61,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0xca, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x3a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x72,
	0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x67, 0x0a, 0x2e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x72, 0x65, 0x6e,
	0x64, 0x6c, 0x69, 0x6e, 0x65, 0x65, 0x71, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6f, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x18, 0xcd, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x2e, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x65, 0x71, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x67, 0x0a, 0x2e, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x72, 0x73,
	0x71, 0x75, 0x61, 0x72, 0x65, 0x64, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0xce, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x2e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x72, 0x65, 0x6e,
	0x64, 0x6c, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x64, 0x6f, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x12, 0x48, 0x0a, 0x16, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x62, 0x61, 0x72, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x16, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x62, 0x61, 0x72, 0x66, 0x69, 0x6c, 0x6c, 0x12, 0x4e,
	0x0a, 0x18, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x62, 0x61, 0x72, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x18, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x62, 0x61, 0x72, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x52,
	0x0a, 0x24, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x62, 0x61, 0x72, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x24, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x62, 0x61, 0x72,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x19, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f,
	0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x19, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x74,
	0x72, 0x6f, 0x6b, 0x65, 0x12, 0x56, 0x0a, 0x1d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54, 0x53,
	0x44, 0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1d, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x12, 0x5c, 0x0a, 0x1f,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6c,
	0x69, 0x6e, 0x65, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f,
	0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1f, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x44, 0x0a, 0x1d, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x1d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x54, 0x0a, 0x25, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x6c, 0x69, 0x6e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x25, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x6c, 0x69, 0x6e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x17, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x61, 0x72, 0x65, 0x61, 0x66, 0x69, 0x6c,
	0x6c, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x46, 0x69,
	0x6c, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x17, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x61, 0x72, 0x65, 0x61, 0x66, 0x69,
	0x6c, 0x6c, 0x12, 0x50, 0x0a, 0x19, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x61, 0x72, 0x65, 0x61, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f,
	0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x19, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x61, 0x72, 0x65, 0x61, 0x73, 0x74,
	0x72, 0x6f, 0x6b, 0x65, 0x12, 0x54, 0x0a, 0x25, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x61, 0x72, 0x65, 0x61, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x25, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x61, 0x72, 0x65, 0x61, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x1d, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x61, 0x72, 0x65,
	0x61, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x1d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x61, 0x72, 0x65, 0x61, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x66, 0x69,
	0x6c, 0x6c, 0x12, 0x5c, 0x0a, 0x1f, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x61, 0x72, 0x65, 0x61, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73,
	0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53,
	0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x1f, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x61, 0x72, 0x65, 0x61, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65,
	0x12, 0x44, 0x0a, 0x1d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x61, 0x72, 0x65, 0x61, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x61, 0x72, 0x65, 0x61, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x48, 0x0a, 0x16, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x70, 0x69, 0x65, 0x66, 0x69, 0x6c, 0x6c,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x46, 0x69, 0x6c,
	0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x16, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x70, 0x69, 0x65, 0x66, 0x69, 0x6c, 0x6c,
	0x12, 0x4e, 0x0a, 0x18, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x70, 0x69, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x18, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x70, 0x69, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65,
	0x12, 0x56, 0x0a, 0x1c, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72,
	0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1c, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x63, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x5c, 0x0a, 0x20, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x63, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x29, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x20, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x12, 0x62, 0x0a, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x2a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x4a, 0x0a, 0x20, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x63, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x2c,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x20, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x5a, 0x0a, 0x28, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x28, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x1a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x66, 0x69, 0x6c, 0x6c,
	0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x46, 0x69, 0x6c,
	0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x66, 0x69, 0x6c, 0x6c, 0x12, 0x5a, 0x0a, 0x28, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x34, 0x20, 0x01, 0x28, 0x05, 0x52, 0x28, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x5e, 0x0a, 0x2a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x70, 0x69, 0x65, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x6f, 0x6e, 0x18, 0x3c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x2a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x70, 0x69, 0x65, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x6f, 0x6e,
	0x12, 0x4e, 0x0a, 0x19, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x3e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x19, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x66, 0x69, 0x6c, 0x6c,
	0x12, 0x4e, 0x0a, 0x18, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x70, 0x69, 0x65, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x18, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x70, 0x69, 0x65, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77,
	0x12, 0x4e, 0x0a, 0x18, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x62, 0x61, 0x72, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x18, 0x65, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x18, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x62, 0x61, 0x72, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77,
	0x12, 0x50, 0x0a, 0x19, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x61, 0x72, 0x65, 0x61, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x18, 0x66, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x19, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x61, 0x72, 0x65, 0x61, 0x73, 0x68, 0x61, 0x64,
	0x6f, 0x77, 0x12, 0x56, 0x0a, 0x1c, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x73, 0x68, 0x61, 0x64,
	0x6f, 0x77, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53,
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1c, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x63, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x12, 0x5a, 0x0a, 0x1e, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78,
	0x65, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x18, 0x68, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x12, 0x5a, 0x0a, 0x1e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x61, 0x72,
	0x65, 0x61, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x1e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x61, 0x72, 0x65, 0x61, 0x73, 0x68, 0x61, 0x64,
	0x6f, 0x77, 0x12, 0x5e, 0x0a, 0x20, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54,
	0x53, 0x44, 0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x20, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x68, 0x61, 0x64,
	0x6f, 0x77, 0x12, 0x50, 0x0a, 0x19, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x18,
	0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x68, 0x61, 0x64,
	0x6f, 0x77, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x19, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x68,
	0x61, 0x64, 0x6f, 0x77, 0x12, 0x56, 0x0a, 0x1c, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x68,
	0x61, 0x64, 0x6f, 0x77, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44,
	0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1c,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x12, 0x5b, 0x0a, 0x1f,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x62,
	0x75, 0x62, 0x62, 0x6c, 0x65, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x18,
	0xcf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x46, 0x69, 0x6c,
	0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1f, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x12, 0x55, 0x0a, 0x1b, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x62, 0x75, 0x62, 0x62,
	0x6c, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0xd3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x1b, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65,
	0x12, 0x61, 0x0a, 0x21, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73,
	0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0xd4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54,
	0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x21, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x74, 0x72,
	0x6f, 0x6b, 0x65, 0x12, 0x59, 0x0a, 0x27, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xd5,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x27, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55,
	0x0a, 0x1b, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x18, 0xd6, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f,
	0x77, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1b, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x73,
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x12, 0x67, 0x0a, 0x2e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0xd7, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x2e,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x62,
	0x75, 0x62, 0x62, 0x6c, 0x65, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x75,
	0x73, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x53,
	0x0a, 0x1a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x33, 0x64, 0x62, 0x61, 0x72, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x18, 0xb2, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x33, 0x64, 0x62, 0x61, 0x72, 0x73, 0x68, 0x61,
	0x64, 0x6f, 0x77, 0x12, 0x59, 0x0a, 0x1d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x33, 0x64, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x68,
	0x61, 0x64, 0x6f, 0x77, 0x18, 0xb3, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53,
	0x44, 0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x1d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x33, 0x64, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x12, 0x55,
	0x0a, 0x1b, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x33, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x18, 0xb4, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f,
	0x77, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1b, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x33, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73,
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x12, 0x55, 0x0a, 0x1b, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x33, 0x64, 0x61, 0x72, 0x65, 0x61, 0x73, 0x68,
	0x61, 0x64, 0x6f, 0x77, 0x18, 0xb5, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53,
	0x44, 0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x1b, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x33, 0x64, 0x61, 0x72, 0x65, 0x61, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x12, 0x53, 0x0a, 0x1a,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x33,
	0x64, 0x70, 0x69, 0x65, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x18, 0xb6, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x33, 0x64, 0x70, 0x69, 0x65, 0x73, 0x68, 0x61, 0x64, 0x6f,
	0x77, 0x12, 0x66, 0x0a, 0x2e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x2e, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73,
	0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x5e, 0x0a, 0x2a, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x62, 0x61, 0x72, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x2a, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x62, 0x61,
	0x72, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73,
	0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x60, 0x0a, 0x2b, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6c, 0x69, 0x6e, 0x65,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74,
	0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x70, 0x20, 0x01, 0x28, 0x05, 0x52, 0x2b,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6c,
	0x69, 0x6e, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x60, 0x0a, 0x2b, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x61, 0x72,
	0x65, 0x61, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x71, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x2b, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x61, 0x72, 0x65, 0x61, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x5e, 0x0a,
	0x2a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x70, 0x69, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x72, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x2a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x70, 0x69, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x62, 0x0a,
	0x2c, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x6d, 0x69, 0x78, 0x65, 0x64, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x73, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x2c, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x61,
	0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x44, 0x0a, 0x1d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x6f, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x18, 0x74, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x62, 0x0a, 0x2c, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x75, 0x20, 0x01, 0x28, 0x08, 0x52, 0x2c, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x65, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x62, 0x0a, 0x2c, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x61, 0x72,
	0x65, 0x61, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x65, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x76, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x2c, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x61, 0x72, 0x65, 0x61, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x66, 0x69, 0x6c, 0x6c,
	0x75, 0x73, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12,
	0x68, 0x0a, 0x2f, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x66,
	0x69, 0x6c, 0x6c, 0x75, 0x73, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x74, 0x72, 0x6f,
	0x6b, 0x65, 0x18, 0x77, 0x20, 0x01, 0x28, 0x08, 0x52, 0x2f, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x65, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x6c, 0x0a, 0x31, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65,
	0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x75,
	0x73, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x78,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x31, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x6c, 0x0a, 0x31, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x61,
	0x72, 0x65, 0x61, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x65,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x79, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x31, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x61, 0x72, 0x65, 0x61, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73,
	0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x5e, 0x0a, 0x2a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x66,
	0x69, 0x6c, 0x6c, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x2a, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x66, 0x69, 0x6c, 0x6c, 0x12, 0x5e, 0x0a, 0x2a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x61, 0x72, 0x65, 0x61, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x66,
	0x69, 0x6c, 0x6c, 0x18, 0x7b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x2a, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x61, 0x72, 0x65, 0x61, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x66, 0x69, 0x6c, 0x6c, 0x12, 0x68, 0x0a, 0x2f, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x65, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x7c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x2f,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d,
	0x69, 0x78, 0x65, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x66, 0x69,
	0x6c, 0x6c, 0x75, 0x73, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x66, 0x69, 0x6c, 0x6c, 0x12,
	0x68, 0x0a, 0x2f, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x61, 0x72, 0x65, 0x61, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x66, 0x69,
	0x6c, 0x6c, 0x18, 0x7d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x2f, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x61, 0x72,
	0x65, 0x61, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x65, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x66, 0x69, 0x6c, 0x6c, 0x12, 0x59, 0x0a, 0x1e, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65,
	0x64, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x82, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x1e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x66, 0x69, 0x6c, 0x6c, 0x12, 0x55, 0x0a, 0x1c, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x61, 0x72, 0x65, 0x61,
	0x66, 0x69, 0x6c, 0x6c, 0x18, 0x83, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54, 0x53,
	0x44, 0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1c, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69,
	0x78, 0x65, 0x64, 0x61, 0x72, 0x65, 0x61, 0x66, 0x69, 0x6c, 0x6c, 0x12, 0x5f, 0x0a, 0x20, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69,
	0x78, 0x65, 0x64, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18,
	0x84, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72,
	0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x20, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x5b, 0x0a, 0x1e,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d,
	0x69, 0x78, 0x65, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x85,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f,
	0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1e, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x6c,
	0x69, 0x6e, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x5b, 0x0a, 0x1e, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65,
	0x64, 0x61, 0x72, 0x65, 0x61, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x86, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x61, 0x72, 0x65, 0x61,
	0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x4f, 0x0a, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x87, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x4f, 0x0a, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x61,
	0x72, 0x65, 0x61, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x88, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x61, 0x72, 0x65, 0x61, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x61, 0x0a, 0x22, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64,
	0x6c, 0x69, 0x6e, 0x65, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x89,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x46, 0x69, 0x6c, 0x6c,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x12, 0x61, 0x0a, 0x22, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69,
	0x78, 0x65, 0x64, 0x61, 0x72, 0x65, 0x61, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x66, 0x69, 0x6c,
	0x6c, 0x18, 0x8a, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x46,
	0x69, 0x6c, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x22, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64,
	0x61, 0x72, 0x65, 0x61, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x12, 0x67,
	0x0a, 0x24, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x8b, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x24, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x67, 0x0a, 0x24, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x61,
	0x72, 0x65, 0x61, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18,
	0x8c, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72,
	0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x24, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64,
	0x61, 0x72, 0x65, 0x61, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65,
	0x12, 0x63, 0x0a, 0x2c, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x8d, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x2c, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5f, 0x0a, 0x2a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x6c, 0x69, 0x6e,
	0x65, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x2a, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64,
	0x6c, 0x69, 0x6e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5f, 0x0a, 0x2a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x61, 0x72,
	0x65, 0x61, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x8f, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x2a, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65,
	0x64, 0x61, 0x72, 0x65, 0x61, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x75, 0x0a, 0x35, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x61, 0x72,
	0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x35, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x6f,
	0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x6d,
	0x0a, 0x31, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x62, 0x61, 0x72, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x31, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x62, 0x61, 0x72, 0x6f, 0x75,
	0x74, 0x73, 0x69, 0x64, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x6f, 0x0a,
	0x32, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x61, 0x72, 0x65, 0x61, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x99, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x32, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x61, 0x72, 0x65, 0x61, 0x6f,
	0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x6d,
	0x0a, 0x31, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x70, 0x69, 0x65, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x9a, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x31, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x70, 0x69, 0x65, 0x6f, 0x75,
	0x74, 0x73, 0x69, 0x64, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x71, 0x0a,
	0x33, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x6d, 0x69, 0x78, 0x65, 0x64, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x9b, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x33, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65,
	0x64, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x61, 0x72,
	0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x61, 0x0a, 0x2b, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x62, 0x61, 0x72, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x9c, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x2b, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x62, 0x61,
	0x72, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x63, 0x0a, 0x2c, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x61, 0x72, 0x65,
	0x61, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x9d, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x2c, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x65, 0x64, 0x61, 0x72, 0x65, 0x61, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x69, 0x0a, 0x25, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x6b,
	0x65, 0x18, 0xa7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53,
	0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x25, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x74, 0x72,
	0x6f, 0x6b, 0x65, 0x12, 0x69, 0x0a, 0x25, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x72, 0x65,
	0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x18, 0xa8, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x25, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74,
	0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x12, 0x67,
	0x0a, 0x24, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72,
	0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x18, 0xb4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x54, 0x53, 0x44, 0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x24, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61,
	0x72, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x12, 0x67, 0x0a, 0x24, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18,
	0xb5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72,
	0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x24, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65,
	0x12, 0x77, 0x0a, 0x2c, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62,
	0x61, 0x72, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x78,
	0x18, 0xb6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74,
	0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x2c, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x73, 0x74, 0x72, 0x6f, 0x6b,
	0x65, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x78, 0x12, 0x6a, 0x0a, 0x25, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x65,
	0x6e, 0x64, 0x18, 0xb7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x44, 0x2e,
	0x4c, 0x69, 0x6e, 0x65, 0x45, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x25,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x6c, 0x69,
	0x6e, 0x65, 0x65, 0x6e, 0x64, 0x12, 0x7a, 0x0a, 0x2d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x65, 0x6e, 0x64, 0x73, 0x63,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x78, 0x18, 0xb8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x54, 0x53, 0x44, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x45, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x2d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62,
	0x61, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x65, 0x6e, 0x64, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x78, 0x12, 0x7b, 0x0a, 0x26, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x64, 0x65, 0x70, 0x72, 0x65,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x33, 0x64, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0xac, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43,
	0x41, 0x54, 0x45, 0x44, 0x43, 0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x46, 0x69, 0x6c, 0x6c, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x26, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x64, 0x65,
	0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x33, 0x64, 0x66, 0x69, 0x6c, 0x6c, 0x12, 0x73,
	0x0a, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x62, 0x61, 0x72, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x33, 0x64,
	0x66, 0x69, 0x6c, 0x6c, 0x18, 0xad, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x54, 0x53,
	0x43, 0x48, 0x2e, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x33, 0x44, 0x46, 0x69, 0x6c, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x62, 0x61, 0x72, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x33, 0x64, 0x66,
	0x69, 0x6c, 0x6c, 0x12, 0x79, 0x0a, 0x25, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x64, 0x65, 0x70, 0x72,
	0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x33, 0x64, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0xae, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x44, 0x45, 0x50, 0x52, 0x45,
	0x43, 0x41, 0x54, 0x45, 0x44, 0x43, 0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x46, 0x69, 0x6c, 0x6c,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x25, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x64, 0x65,
	0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x33, 0x64, 0x66, 0x69, 0x6c, 0x6c, 0x12, 0x75,
	0x0a, 0x23, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x6c, 0x69, 0x6e, 0x65, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x33,
	0x64, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0xaf, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x54,
	0x53, 0x43, 0x48, 0x2e, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x33, 0x44, 0x46, 0x69, 0x6c, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x23, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x6c, 0x69, 0x6e, 0x65, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x33,
	0x64, 0x66, 0x69, 0x6c, 0x6c, 0x12, 0x75, 0x0a, 0x23, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x61, 0x72, 0x65, 0x61, 0x64, 0x65, 0x70, 0x72,
	0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x33, 0x64, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0xb0, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x44, 0x45, 0x50, 0x52, 0x45,
	0x43, 0x41, 0x54, 0x45, 0x44, 0x43, 0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x46, 0x69, 0x6c, 0x6c,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x23, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x61, 0x72, 0x65, 0x61, 0x64, 0x65, 0x70, 0x72,
	0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x33, 0x64, 0x66, 0x69, 0x6c, 0x6c, 0x12, 0x73, 0x0a, 0x22,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x70,
	0x69, 0x65, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x33, 0x64, 0x66, 0x69,
	0x6c, 0x6c, 0x18, 0xb1, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x54, 0x53, 0x43, 0x48,
	0x2e, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x33, 0x44, 0x46, 0x69, 0x6c, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x22, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x70, 0x69,
	0x65, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x33, 0x64, 0x66, 0x69, 0x6c,
	0x6c, 0x12, 0x4d, 0x0a, 0x18, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x33, 0x64, 0x62, 0x61, 0x72, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0xc0, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x18, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x33, 0x64, 0x62, 0x61, 0x72, 0x66, 0x69, 0x6c, 0x6c,
	0x12, 0x53, 0x0a, 0x1b, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x33, 0x64, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x66, 0x69, 0x6c, 0x6c, 0x18,
	0xc1, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x46, 0x69, 0x6c,
	0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1b, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x33, 0x64, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x66, 0x69, 0x6c, 0x6c, 0x12, 0x4f, 0x0a, 0x19, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x33, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x66, 0x69,
	0x6c, 0x6c, 0x18, 0xc2, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54, 0x53, 0x44, 0x2e,
	0x46, 0x69, 0x6c, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x19, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x33, 0x64, 0x6c, 0x69,
	0x6e, 0x65, 0x66, 0x69, 0x6c, 0x6c, 0x12, 0x4f, 0x0a, 0x19, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x33, 0x64, 0x61, 0x72, 0x65, 0x61, 0x66,
	0x69, 0x6c, 0x6c, 0x18, 0xc3, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54, 0x53, 0x44,
	0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x19, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x33, 0x64, 0x61,
	0x72, 0x65, 0x61, 0x66, 0x69, 0x6c, 0x6c, 0x12, 0x4d, 0x0a, 0x18, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x33, 0x64, 0x70, 0x69, 0x65, 0x66,
	0x69, 0x6c, 0x6c, 0x18, 0xc4, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54, 0x53, 0x44,
	0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x18, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x33, 0x64, 0x70,
	0x69, 0x65, 0x66, 0x69, 0x6c, 0x6c, 0x22, 0xd7, 0x2e, 0x0a, 0x24, 0x54, 0x53, 0x43, 0x48, 0x50,
	0x72, 0x65, 0x55, 0x46, 0x46, 0x43, 0x68, 0x61, 0x72, 0x74, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x4e, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12,
	0x27, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x54, 0x53, 0x53, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x76, 0x0a, 0x22, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x50, 0x72, 0x65, 0x55,
	0x46, 0x46, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x22, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x12, 0x56, 0x0a, 0x26, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x26, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4c, 0x0a, 0x21, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x62, 0x61, 0x72, 0x73, 0x68,
	0x6f, 0x77, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x21, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x62, 0x61, 0x72, 0x73, 0x68, 0x6f, 0x77, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x44, 0x0a, 0x1d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1d, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x1d,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6c,
	0x69, 0x6e, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x12, 0x4e, 0x0a, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x22,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6c,
	0x69, 0x6e, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x12, 0x4e, 0x0a, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x61, 0x72, 0x65, 0x61, 0x73, 0x68, 0x6f, 0x77, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x22,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x61,
	0x72, 0x65, 0x61, 0x73, 0x68, 0x6f, 0x77, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x12, 0x40, 0x0a, 0x1b, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x6c, 0x69, 0x6e, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1b, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6c, 0x69, 0x6e, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x1d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x61, 0x72, 0x65, 0x61, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1d, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x61, 0x72, 0x65, 0x61,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x1d, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x61, 0x72, 0x65,
	0x61, 0x73, 0x68, 0x6f, 0x77, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x61, 0x72, 0x65, 0x61, 0x73, 0x68, 0x6f, 0x77, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x12, 0x4c, 0x0a, 0x21, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x70, 0x69, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x52, 0x21, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x70, 0x69, 0x65, 0x73,
	0x68, 0x6f, 0x77, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x54,
	0x0a, 0x25, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x73, 0x68, 0x6f, 0x77, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x25, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x63,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x73, 0x68, 0x6f, 0x77, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x12, 0x4a, 0x0a, 0x20, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x70, 0x69, 0x65, 0x77, 0x65, 0x64, 0x67, 0x65, 0x65,
	0x78, 0x70, 0x6c, 0x6f, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x32, 0x20, 0x01, 0x28, 0x02, 0x52, 0x20,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x70,
	0x69, 0x65, 0x77, 0x65, 0x64, 0x67, 0x65, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x54, 0x0a, 0x25, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x68, 0x6f, 0x77, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x25, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x68, 0x6f, 0x77, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x6e, 0x0a, 0x1e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x70, 0x69, 0x65, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x50, 0x72, 0x65, 0x55, 0x46, 0x46, 0x2e, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x70, 0x69, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x4e, 0x0a, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x70, 0x69, 0x65, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x79, 0x70, 0x65, 0x18, 0x35, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x70, 0x69, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x20, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x70, 0x69, 0x65, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x36, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x20, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x70, 0x69, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x68,
	0x6f, 0x77, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x22,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d,
	0x69, 0x78, 0x65, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x12, 0x4e, 0x0a, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x61, 0x72, 0x65, 0x61, 0x73, 0x68,
	0x6f, 0x77, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x22,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d,
	0x69, 0x78, 0x65, 0x64, 0x61, 0x72, 0x65, 0x61, 0x73, 0x68, 0x6f, 0x77, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x12, 0x4e, 0x0a, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x22,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d,
	0x69, 0x78, 0x65, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x4e, 0x0a, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x61, 0x72, 0x65, 0x61, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x22,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d,
	0x69, 0x78, 0x65, 0x64, 0x61, 0x72, 0x65, 0x61, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x50, 0x0a, 0x23, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x73, 0x68, 0x6f, 0x77, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x23, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x6d, 0x69, 0x78, 0x65, 0x64, 0x73, 0x68, 0x6f, 0x77, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x12, 0x4a, 0x0a, 0x20, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x20,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d,
	0x69, 0x78, 0x65, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x4e, 0x0a, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x79, 0x61, 0x78, 0x69, 0x73, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x41, 0x20, 0x01, 0x28, 0x05, 0x52, 0x22, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x79, 0x61, 0x78, 0x69, 0x73, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c,
	0x12, 0x4e, 0x0a, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x70, 0x69, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x42, 0x20, 0x01, 0x28, 0x08, 0x52, 0x22, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x70, 0x69, 0x65,
	0x73, 0x68, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x12, 0x4a, 0x0a, 0x20, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x73, 0x68, 0x6f, 0x77, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x45, 0x20, 0x01, 0x28, 0x08, 0x52, 0x20, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x63, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x73, 0x68, 0x6f, 0x77, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x4a, 0x0a, 0x20,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73,
	0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x46, 0x20, 0x01, 0x28, 0x05, 0x52, 0x20, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x1e, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x63, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x47, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x1e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x46, 0x0a, 0x1e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x73, 0x68, 0x6f, 0x77, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x48, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x73, 0x68, 0x6f, 0x77, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x29, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x65, 0x64, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x54,
	0x53, 0x43, 0x48, 0x2e, 0x50, 0x72, 0x65, 0x55, 0x46, 0x46, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x29, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12,
	0x4a, 0x0a, 0x20, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x7e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x20, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x74, 0x79, 0x70, 0x65, 0x12, 0x51, 0x0a, 0x23, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x23, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x53,
	0x0a, 0x24, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e,
	0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0xa1, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x24, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x25, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x72, 0x65,
	0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0xa2, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x25, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x72, 0x65, 0x6e, 0x64,
	0x6c, 0x69, 0x6e, 0x65, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x5b, 0x0a, 0x28, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x68, 0x6f,
	0x77, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0xa3, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x28, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x68,
	0x6f, 0x77, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x5f, 0x0a, 0x2a, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0xa4, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x2a, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x61, 0x0a, 0x2b, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x65,
	0x71, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xa5, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x2b,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73,
	0x68, 0x6f, 0x77, 0x65, 0x71, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5f, 0x0a, 0x2a, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x68,
	0x6f, 0x77, 0x72, 0x32, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0xa6, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x2a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x68, 0x6f, 0x77, 0x72, 0x32, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x55, 0x0a, 0x25,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x25, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x65, 0x0a, 0x2d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x62, 0x61, 0x72, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x63, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x78, 0x18, 0xab, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x2d, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x78, 0x12, 0x4f, 0x0a, 0x22, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x74, 0x79, 0x70, 0x65,
	0x18, 0xac, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x74, 0x79, 0x70, 0x65, 0x12, 0x5f, 0x0a, 0x2a, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x78, 0x18, 0xad, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x2a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x78, 0x12, 0x5b, 0x0a, 0x28,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0xae, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x28, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x6b, 0x0a, 0x30, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x78, 0x18, 0xaf, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x30, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x62, 0x61, 0x72, 0x66, 0x69, 0x78, 0x65, 0x64, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x63,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x78, 0x12, 0x5f, 0x0a, 0x2a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0xb0, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x2a, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x6f, 0x0a, 0x32, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x78, 0x18, 0xb1, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x32, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x62, 0x61, 0x72, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x78, 0x12, 0x5d, 0x0a, 0x29, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x73, 0x74, 0x64, 0x64, 0x65, 0x76,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0xb2, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x29, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x73, 0x74, 0x64, 0x64,
	0x65, 0x76, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x6d, 0x0a, 0x31, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x73, 0x74, 0x64, 0x64, 0x65, 0x76, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x78, 0x18, 0xb3, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x31, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x62, 0x61, 0x72, 0x73, 0x74, 0x64, 0x64, 0x65, 0x76, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x63,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x78, 0x12, 0x97, 0x01, 0x0a, 0x30, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x64, 0x61, 0x74, 0x61, 0x18, 0xbe, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x4e, 0x53, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4f, 0x66, 0x4e, 0x53, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x30,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x64, 0x61, 0x74, 0x61,
	0x12, 0xa7, 0x01, 0x0a, 0x38, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x62, 0x61, 0x72, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76,
	0x65, 0x64, 0x61, 0x74, 0x61, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x78, 0x18, 0xbf, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x4e, 0x53, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4f, 0x66, 0x4e, 0x53, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x38, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x78, 0x12, 0x97, 0x01, 0x0a, 0x30, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x64, 0x61, 0x74, 0x61, 0x18,
	0xc0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x4e, 0x53, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4f, 0x66, 0x4e, 0x53, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x30, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62,
	0x61, 0x72, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x64, 0x61, 0x74, 0x61, 0x12, 0xa7, 0x01, 0x0a, 0x38, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x6e, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x64, 0x61, 0x74, 0x61, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x78, 0x18, 0xc1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x4e, 0x53, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4f, 0x66, 0x4e,
	0x53, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x38, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x62, 0x61, 0x72, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x64, 0x61, 0x74, 0x61, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x78, 0x12, 0x67,
	0x0a, 0x2e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e,
	0x65, 0x65, 0x71, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x78,
	0x18, 0xc2, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x2e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74,
	0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x65, 0x71, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x78, 0x12, 0x67, 0x0a, 0x2e, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x65, 0x71, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x79, 0x18, 0xc3, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x2e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e,
	0x65, 0x65, 0x71, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x79,
	0x12, 0x67, 0x0a, 0x2e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c,
	0x69, 0x6e, 0x65, 0x72, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x64, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x78, 0x18, 0xc4, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x2e, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x71, 0x75, 0x61, 0x72,
	0x65, 0x64, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x78, 0x12, 0x67, 0x0a, 0x2e, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x71, 0x75,
	0x61, 0x72, 0x65, 0x64, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x79, 0x18, 0xc5, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x2e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c,
	0x69, 0x6e, 0x65, 0x72, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x64, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x79, 0x12, 0x51, 0x0a, 0x23, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x68, 0x6f, 0x77,
	0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0xc6, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x23, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x68, 0x6f, 0x77, 0x74, 0x72, 0x65, 0x6e,
	0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x4f, 0x0a, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73,
	0x68, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x18, 0xc7, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x68, 0x6f, 0x77, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x12, 0x5f, 0x0a, 0x2a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x73, 0x68, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x73, 0x63, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x78, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x2a, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x73, 0x68, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x73,
	0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x78, 0x12, 0x4f, 0x0a, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65,
	0x73, 0x69, 0x7a, 0x65, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xd0, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x64,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x24, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x62, 0x75, 0x62, 0x62, 0x6c,
	0x65, 0x73, 0x68, 0x6f, 0x77, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0xd1, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x24, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x73, 0x68,
	0x6f, 0x77, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x45, 0x0a,
	0x1d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0xd2,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x55, 0x0a, 0x25, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x73, 0x68, 0x6f,
	0x77, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x64, 0x61, 0x74, 0x61, 0x18, 0xd8, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x25, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x6e,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x64, 0x61, 0x74, 0x61, 0x12, 0x53, 0x0a, 0x24, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x62, 0x75,
	0x62, 0x62, 0x6c, 0x65, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x18, 0xd9, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x24, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x62, 0x75, 0x62, 0x62, 0x6c,
	0x65, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x42, 0x07, 0x5a, 0x05, 0x2e, 0x2f, 0x6b, 0x70, 0x62,
}

var (
	file_TSCHPreUFFArchives_proto_rawDescOnce sync.Once
	file_TSCHPreUFFArchives_proto_rawDescData = file_TSCHPreUFFArchives_proto_rawDesc
)

func file_TSCHPreUFFArchives_proto_rawDescGZIP() []byte {
	file_TSCHPreUFFArchives_proto_rawDescOnce.Do(func() {
		file_TSCHPreUFFArchives_proto_rawDescData = protoimpl.X.CompressGZIP(file_TSCHPreUFFArchives_proto_rawDescData)
	})
	return file_TSCHPreUFFArchives_proto_rawDescData
}

var file_TSCHPreUFFArchives_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_TSCHPreUFFArchives_proto_goTypes = []interface{}{
	(*ChartInfoArchive)(nil),                     // 0: TSCH.PreUFF.ChartInfoArchive
	(*LegendModelArchive)(nil),                   // 1: TSCH.PreUFF.LegendModelArchive
	(*ChartModelArchive)(nil),                    // 2: TSCH.PreUFF.ChartModelArchive
	(*TSCHPreUFFChartGridArchive)(nil),           // 3: TSCH.PreUFF.TSCHPreUFFChartGridArchive
	(*ChartsNumberFormatArchive)(nil),            // 4: TSCH.PreUFF.ChartsNumberFormatArchive
	(*TSCHPreUFFChartStyleArchive)(nil),          // 5: TSCH.PreUFF.TSCHPreUFFChartStyleArchive
	(*TSCHPreUFFChartNonStyleArchive)(nil),       // 6: TSCH.PreUFF.TSCHPreUFFChartNonStyleArchive
	(*TSCHPreUFFLegendStyleArchive)(nil),         // 7: TSCH.PreUFF.TSCHPreUFFLegendStyleArchive
	(*TSCHPreUFFLegendNonStyleArchive)(nil),      // 8: TSCH.PreUFF.TSCHPreUFFLegendNonStyleArchive
	(*TSCHPreUFFChartAxisStyleArchive)(nil),      // 9: TSCH.PreUFF.TSCHPreUFFChartAxisStyleArchive
	(*TSCHPreUFFChartAxisNonStyleArchive)(nil),   // 10: TSCH.PreUFF.TSCHPreUFFChartAxisNonStyleArchive
	(*TSCHPreUFFChartSeriesStyleArchive)(nil),    // 11: TSCH.PreUFF.TSCHPreUFFChartSeriesStyleArchive
	(*TSCHPreUFFChartSeriesNonStyleArchive)(nil), // 12: TSCH.PreUFF.TSCHPreUFFChartSeriesNonStyleArchive
	(*TSCHPreUFFChartGridArchive_ValueRow)(nil),  // 13: TSCH.PreUFF.TSCHPreUFFChartGridArchive.ValueRow
	(*DrawableArchive)(nil),                      // 14: TSD.DrawableArchive
	(*Reference)(nil),                            // 15: TSP.Reference
	(ChartType)(0),                               // 16: TSCH.ChartType
	(*RectArchive)(nil),                          // 17: TSCH.RectArchive
	(*SparseReferenceArray)(nil),                 // 18: TSP.SparseReferenceArray
	(*Point)(nil),                                // 19: TSP.Point
	(NumberValueType)(0),                         // 20: TSCH.NumberValueType
	(NegativeNumberStyle)(0),                     // 21: TSCH.NegativeNumberStyle
	(FractionAccuracy)(0),                        // 22: TSCH.FractionAccuracy
	(*IndexSet)(nil),                             // 23: TSP.IndexSet
	(*StyleArchive)(nil),                         // 24: TSS.StyleArchive
	(*FillArchive)(nil),                          // 25: TSD.FillArchive
	(*StrokeArchive)(nil),                        // 26: TSD.StrokeArchive
	(*Color)(nil),                                // 27: TSP.Color
	(*ShadowArchive)(nil),                        // 28: TSD.ShadowArchive
	(*Chart3DLightingPackageArchive)(nil),        // 29: TSCH.Chart3DLightingPackageArchive
	(*Chart3DVectorArchive)(nil),                 // 30: TSCH.Chart3DVectorArchive
	(*ChartsNSNumberDoubleArchive)(nil),          // 31: TSCH.ChartsNSNumberDoubleArchive
	(*LineEndArchive)(nil),                       // 32: TSD.LineEndArchive
	(*DEPRECATEDChart3DFillArchive)(nil),         // 33: TSCH.DEPRECATEDChart3DFillArchive
	(*ChartsNSArrayOfNSNumberDoubleArchive)(nil), // 34: TSCH.ChartsNSArrayOfNSNumberDoubleArchive
}
var file_TSCHPreUFFArchives_proto_depIdxs = []int32{
	14,  // 0: TSCH.PreUFF.ChartInfoArchive.super:type_name -> TSD.DrawableArchive
	2,   // 1: TSCH.PreUFF.ChartInfoArchive.chart_model:type_name -> TSCH.PreUFF.ChartModelArchive
	15,  // 2: TSCH.PreUFF.ChartInfoArchive.style:type_name -> TSP.Reference
	16,  // 3: TSCH.PreUFF.ChartInfoArchive.chart_type:type_name -> TSCH.ChartType
	1,   // 4: TSCH.PreUFF.ChartInfoArchive.legend_model:type_name -> TSCH.PreUFF.LegendModelArchive
	17,  // 5: TSCH.PreUFF.ChartInfoArchive.inner_chart_frame:type_name -> TSCH.RectArchive
	15,  // 6: TSCH.PreUFF.ChartInfoArchive.value_axis_styles:type_name -> TSP.Reference
	15,  // 7: TSCH.PreUFF.ChartInfoArchive.category_axis_styles:type_name -> TSP.Reference
	15,  // 8: TSCH.PreUFF.ChartInfoArchive.value_axis_nonstyles:type_name -> TSP.Reference
	15,  // 9: TSCH.PreUFF.ChartInfoArchive.category_axis_nonstyles:type_name -> TSP.Reference
	15,  // 10: TSCH.PreUFF.ChartInfoArchive.series_theme_styles:type_name -> TSP.Reference
	18,  // 11: TSCH.PreUFF.ChartInfoArchive.series_private_styles:type_name -> TSP.SparseReferenceArray
	18,  // 12: TSCH.PreUFF.ChartInfoArchive.series_non_styles:type_name -> TSP.SparseReferenceArray
	15,  // 13: TSCH.PreUFF.ChartInfoArchive.non_style:type_name -> TSP.Reference
	15,  // 14: TSCH.PreUFF.ChartInfoArchive.mediator:type_name -> TSP.Reference
	19,  // 15: TSCH.PreUFF.ChartInfoArchive.cde_preview_origin:type_name -> TSP.Point
	15,  // 16: TSCH.PreUFF.ChartInfoArchive.chart_style_preset:type_name -> TSP.Reference
	15,  // 17: TSCH.PreUFF.ChartInfoArchive.paragraph_styles:type_name -> TSP.Reference
	15,  // 18: TSCH.PreUFF.LegendModelArchive.info:type_name -> TSP.Reference
	17,  // 19: TSCH.PreUFF.LegendModelArchive.frame:type_name -> TSCH.RectArchive
	15,  // 20: TSCH.PreUFF.LegendModelArchive.style:type_name -> TSP.Reference
	15,  // 21: TSCH.PreUFF.LegendModelArchive.non_style:type_name -> TSP.Reference
	15,  // 22: TSCH.PreUFF.ChartModelArchive.info:type_name -> TSP.Reference
	15,  // 23: TSCH.PreUFF.ChartModelArchive.grid:type_name -> TSP.Reference
	3,   // 24: TSCH.PreUFF.ChartModelArchive.inline_grid:type_name -> TSCH.PreUFF.TSCHPreUFFChartGridArchive
	13,  // 25: TSCH.PreUFF.TSCHPreUFFChartGridArchive.value_row:type_name -> TSCH.PreUFF.TSCHPreUFFChartGridArchive.ValueRow
	20,  // 26: TSCH.PreUFF.ChartsNumberFormatArchive.value_type:type_name -> TSCH.NumberValueType
	21,  // 27: TSCH.PreUFF.ChartsNumberFormatArchive.negative_style:type_name -> TSCH.NegativeNumberStyle
	22,  // 28: TSCH.PreUFF.ChartsNumberFormatArchive.fraction_accuracy:type_name -> TSCH.FractionAccuracy
	23,  // 29: TSCH.PreUFF.ChartsNumberFormatArchive.interstitial_string_insertion_indexes:type_name -> TSP.IndexSet
	24,  // 30: TSCH.PreUFF.TSCHPreUFFChartStyleArchive.super:type_name -> TSS.StyleArchive
	25,  // 31: TSCH.PreUFF.TSCHPreUFFChartStyleArchive.tschchartinfodefaultbackgroundfill:type_name -> TSD.FillArchive
	26,  // 32: TSCH.PreUFF.TSCHPreUFFChartStyleArchive.tschchartinfodefaultbackgroundstroke:type_name -> TSD.StrokeArchive
	25,  // 33: TSCH.PreUFF.TSCHPreUFFChartStyleArchive.tschchartinfodefaultgridbackgroundfill:type_name -> TSD.FillArchive
	26,  // 34: TSCH.PreUFF.TSCHPreUFFChartStyleArchive.tschchartinfodefaultborderstroke:type_name -> TSD.StrokeArchive
	27,  // 35: TSCH.PreUFF.TSCHPreUFFChartStyleArchive.tschchartinfodefaulttitlecolor:type_name -> TSP.Color
	28,  // 36: TSCH.PreUFF.TSCHPreUFFChartStyleArchive.tschchartinfodefaultbordershadow:type_name -> TSD.ShadowArchive
	28,  // 37: TSCH.PreUFF.TSCHPreUFFChartStyleArchive.tschchartinfodefaultdeprecatedtrendlineequationshadow:type_name -> TSD.ShadowArchive
	28,  // 38: TSCH.PreUFF.TSCHPreUFFChartStyleArchive.tschchartinfodefaultdeprecatedtrendlinersquaredshadow:type_name -> TSD.ShadowArchive
	28,  // 39: TSCH.PreUFF.TSCHPreUFFChartStyleArchive.tschchartinfobardeprecated3dshadow:type_name -> TSD.ShadowArchive
	28,  // 40: TSCH.PreUFF.TSCHPreUFFChartStyleArchive.tschchartinfocolumndeprecated3dshadow:type_name -> TSD.ShadowArchive
	28,  // 41: TSCH.PreUFF.TSCHPreUFFChartStyleArchive.tschchartinfolinedeprecated3dshadow:type_name -> TSD.ShadowArchive
	28,  // 42: TSCH.PreUFF.TSCHPreUFFChartStyleArchive.tschchartinfoareadeprecated3dshadow:type_name -> TSD.ShadowArchive
	28,  // 43: TSCH.PreUFF.TSCHPreUFFChartStyleArchive.tschchartinfopiedeprecated3dshadow:type_name -> TSD.ShadowArchive
	29,  // 44: TSCH.PreUFF.TSCHPreUFFChartStyleArchive.tschchartinfodefault3dlightingpackage:type_name -> TSCH.Chart3DLightingPackageArchive
	29,  // 45: TSCH.PreUFF.TSCHPreUFFChartStyleArchive.tschchartinfocolumn3dlightingpackage:type_name -> TSCH.Chart3DLightingPackageArchive
	29,  // 46: TSCH.PreUFF.TSCHPreUFFChartStyleArchive.tschchartinfobar3dlightingpackage:type_name -> TSCH.Chart3DLightingPackageArchive
	29,  // 47: TSCH.PreUFF.TSCHPreUFFChartStyleArchive.tschchartinfoline3dlightingpackage:type_name -> TSCH.Chart3DLightingPackageArchive
	29,  // 48: TSCH.PreUFF.TSCHPreUFFChartStyleArchive.tschchartinfoarea3dlightingpackage:type_name -> TSCH.Chart3DLightingPackageArchive
	29,  // 49: TSCH.PreUFF.TSCHPreUFFChartStyleArchive.tschchartinfopie3dlightingpackage:type_name -> TSCH.Chart3DLightingPackageArchive
	24,  // 50: TSCH.PreUFF.TSCHPreUFFChartNonStyleArchive.super:type_name -> TSS.StyleArchive
	30,  // 51: TSCH.PreUFF.TSCHPreUFFChartNonStyleArchive.tschchartinfodefault3drotation:type_name -> TSCH.Chart3DVectorArchive
	30,  // 52: TSCH.PreUFF.TSCHPreUFFChartNonStyleArchive.tschchartinfodefault3dscale:type_name -> TSCH.Chart3DVectorArchive
	30,  // 53: TSCH.PreUFF.TSCHPreUFFChartNonStyleArchive.tschchartinfocolumn3dscale:type_name -> TSCH.Chart3DVectorArchive
	30,  // 54: TSCH.PreUFF.TSCHPreUFFChartNonStyleArchive.tschchartinfobar3dscale:type_name -> TSCH.Chart3DVectorArchive
	30,  // 55: TSCH.PreUFF.TSCHPreUFFChartNonStyleArchive.tschchartinfoline3dscale:type_name -> TSCH.Chart3DVectorArchive
	30,  // 56: TSCH.PreUFF.TSCHPreUFFChartNonStyleArchive.tschchartinfoarea3dscale:type_name -> TSCH.Chart3DVectorArchive
	30,  // 57: TSCH.PreUFF.TSCHPreUFFChartNonStyleArchive.tschchartinfopie3dscale:type_name -> TSCH.Chart3DVectorArchive
	30,  // 58: TSCH.PreUFF.TSCHPreUFFChartNonStyleArchive.tschchartinfodefault3dviewport:type_name -> TSCH.Chart3DVectorArchive
	29,  // 59: TSCH.PreUFF.TSCHPreUFFChartNonStyleArchive.tschchartinfodefaultdeprecated3dlightingpackage:type_name -> TSCH.Chart3DLightingPackageArchive
	29,  // 60: TSCH.PreUFF.TSCHPreUFFChartNonStyleArchive.tschchartinfocolumndeprecated3dlightingpackage:type_name -> TSCH.Chart3DLightingPackageArchive
	29,  // 61: TSCH.PreUFF.TSCHPreUFFChartNonStyleArchive.tschchartinfobardeprecated3dlightingpackage:type_name -> TSCH.Chart3DLightingPackageArchive
	29,  // 62: TSCH.PreUFF.TSCHPreUFFChartNonStyleArchive.tschchartinfolinedeprecated3dlightingpackage:type_name -> TSCH.Chart3DLightingPackageArchive
	29,  // 63: TSCH.PreUFF.TSCHPreUFFChartNonStyleArchive.tschchartinfoareadeprecated3dlightingpackage:type_name -> TSCH.Chart3DLightingPackageArchive
	29,  // 64: TSCH.PreUFF.TSCHPreUFFChartNonStyleArchive.tschchartinfopiedeprecated3dlightingpackage:type_name -> TSCH.Chart3DLightingPackageArchive
	24,  // 65: TSCH.PreUFF.TSCHPreUFFLegendStyleArchive.super:type_name -> TSS.StyleArchive
	25,  // 66: TSCH.PreUFF.TSCHPreUFFLegendStyleArchive.tschlegendmodeldefaultfill:type_name -> TSD.FillArchive
	26,  // 67: TSCH.PreUFF.TSCHPreUFFLegendStyleArchive.tschlegendmodeldefaultstroke:type_name -> TSD.StrokeArchive
	28,  // 68: TSCH.PreUFF.TSCHPreUFFLegendStyleArchive.tschlegendmodeldefaultshadow:type_name -> TSD.ShadowArchive
	24,  // 69: TSCH.PreUFF.TSCHPreUFFLegendNonStyleArchive.super:type_name -> TSS.StyleArchive
	24,  // 70: TSCH.PreUFF.TSCHPreUFFChartAxisStyleArchive.super:type_name -> TSS.StyleArchive
	26,  // 71: TSCH.PreUFF.TSCHPreUFFChartAxisStyleArchive.tschchartaxisvaluemajorgridlinestroke:type_name -> TSD.StrokeArchive
	26,  // 72: TSCH.PreUFF.TSCHPreUFFChartAxisStyleArchive.tschchartaxisvalueminorgridlinestroke:type_name -> TSD.StrokeArchive
	28,  // 73: TSCH.PreUFF.TSCHPreUFFChartAxisStyleArchive.tschchartaxisvaluemajorgridlineshadow:type_name -> TSD.ShadowArchive
	28,  // 74: TSCH.PreUFF.TSCHPreUFFChartAxisStyleArchive.tschchartaxisvalueminorgridlineshadow:type_name -> TSD.ShadowArchive
	26,  // 75: TSCH.PreUFF.TSCHPreUFFChartAxisStyleArchive.tschchartaxiscategorymajorgridlinestroke:type_name -> TSD.StrokeArchive
	26,  // 76: TSCH.PreUFF.TSCHPreUFFChartAxisStyleArchive.tschchartaxiscategoryminorgridlinestroke:type_name -> TSD.StrokeArchive
	28,  // 77: TSCH.PreUFF.TSCHPreUFFChartAxisStyleArchive.tschchartaxiscategorymajorgridlineshadow:type_name -> TSD.ShadowArchive
	28,  // 78: TSCH.PreUFF.TSCHPreUFFChartAxisStyleArchive.tschchartaxiscategoryminorgridlineshadow:type_name -> TSD.ShadowArchive
	26,  // 79: TSCH.PreUFF.TSCHPreUFFChartAxisStyleArchive.tschchartaxisvalue3dgridlinestroke:type_name -> TSD.StrokeArchive
	26,  // 80: TSCH.PreUFF.TSCHPreUFFChartAxisStyleArchive.tschchartaxiscategory3dgridlinestroke:type_name -> TSD.StrokeArchive
	24,  // 81: TSCH.PreUFF.TSCHPreUFFChartAxisNonStyleArchive.super:type_name -> TSS.StyleArchive
	31,  // 82: TSCH.PreUFF.TSCHPreUFFChartAxisNonStyleArchive.tschchartaxisdefaultusermin:type_name -> TSCH.ChartsNSNumberDoubleArchive
	31,  // 83: TSCH.PreUFF.TSCHPreUFFChartAxisNonStyleArchive.tschchartaxisdefaultusermax:type_name -> TSCH.ChartsNSNumberDoubleArchive
	4,   // 84: TSCH.PreUFF.TSCHPreUFFChartAxisNonStyleArchive.tschchartaxisdefaultnumberformat:type_name -> TSCH.PreUFF.ChartsNumberFormatArchive
	24,  // 85: TSCH.PreUFF.TSCHPreUFFChartSeriesStyleArchive.super:type_name -> TSS.StyleArchive
	25,  // 86: TSCH.PreUFF.TSCHPreUFFChartSeriesStyleArchive.tschchartseriesbarfill:type_name -> TSD.FillArchive
	26,  // 87: TSCH.PreUFF.TSCHPreUFFChartSeriesStyleArchive.tschchartseriesbarstroke:type_name -> TSD.StrokeArchive
	26,  // 88: TSCH.PreUFF.TSCHPreUFFChartSeriesStyleArchive.tschchartserieslinestroke:type_name -> TSD.StrokeArchive
	25,  // 89: TSCH.PreUFF.TSCHPreUFFChartSeriesStyleArchive.tschchartserieslinesymbolfill:type_name -> TSD.FillArchive
	26,  // 90: TSCH.PreUFF.TSCHPreUFFChartSeriesStyleArchive.tschchartserieslinesymbolstroke:type_name -> TSD.StrokeArchive
	25,  // 91: TSCH.PreUFF.TSCHPreUFFChartSeriesStyleArchive.tschchartseriesareafill:type_name -> TSD.FillArchive
	26,  // 92: TSCH.PreUFF.TSCHPreUFFChartSeriesStyleArchive.tschchartseriesareastroke:type_name -> TSD.StrokeArchive
	25,  // 93: TSCH.PreUFF.TSCHPreUFFChartSeriesStyleArchive.tschchartseriesareasymbolfill:type_name -> TSD.FillArchive
	26,  // 94: TSCH.PreUFF.TSCHPreUFFChartSeriesStyleArchive.tschchartseriesareasymbolstroke:type_name -> TSD.StrokeArchive
	25,  // 95: TSCH.PreUFF.TSCHPreUFFChartSeriesStyleArchive.tschchartseriespiefill:type_name -> TSD.FillArchive
	26,  // 96: TSCH.PreUFF.TSCHPreUFFChartSeriesStyleArchive.tschchartseriespiestroke:type_name -> TSD.StrokeArchive
	26,  // 97: TSCH.PreUFF.TSCHPreUFFChartSeriesStyleArchive.tschchartseriesscatterstroke:type_name -> TSD.StrokeArchive
	25,  // 98: TSCH.PreUFF.TSCHPreUFFChartSeriesStyleArchive.tschchartseriesscattersymbolfill:type_name -> TSD.FillArchive
	26,  // 99: TSCH.PreUFF.TSCHPreUFFChartSeriesStyleArchive.tschchartseriesscattersymbolstroke:type_name -> TSD.StrokeArchive
	25,  // 100: TSCH.PreUFF.TSCHPreUFFChartSeriesStyleArchive.tschchartseriesdefaultfill:type_name -> TSD.FillArchive
	25,  // 101: TSCH.PreUFF.TSCHPreUFFChartSeriesStyleArchive.tschchartseriescolumnfill:type_name -> TSD.FillArchive
	28,  // 102: TSCH.PreUFF.TSCHPreUFFChartSeriesStyleArchive.tschchartseriespieshadow:type_name -> TSD.ShadowArchive
	28,  // 103: TSCH.PreUFF.TSCHPreUFFChartSeriesStyleArchive.tschchartseriesbarshadow:type_name -> TSD.ShadowArchive
	28,  // 104: TSCH.PreUFF.TSCHPreUFFChartSeriesStyleArchive.tschchartseriesareashadow:type_name -> TSD.ShadowArchive
	28,  // 105: TSCH.PreUFF.TSCHPreUFFChartSeriesStyleArchive.tschchartseriesscattershadow:type_name -> TSD.ShadowArchive
	28,  // 106: TSCH.PreUFF.TSCHPreUFFChartSeriesStyleArchive.tschchartseriesmixedlineshadow:type_name -> TSD.ShadowArchive
	28,  // 107: TSCH.PreUFF.TSCHPreUFFChartSeriesStyleArchive.tschchartseriesmixedareashadow:type_name -> TSD.ShadowArchive
	28,  // 108: TSCH.PreUFF.TSCHPreUFFChartSeriesStyleArchive.tschchartseriesmixedcolumnshadow:type_name -> TSD.ShadowArchive
	28,  // 109: TSCH.PreUFF.TSCHPreUFFChartSeriesStyleArchive.tschchartserieslineshadow:type_name -> TSD.ShadowArchive
	28,  // 110: TSCH.PreUFF.TSCHPreUFFChartSeriesStyleArchive.tschchartseriesdefaultshadow:type_name -> TSD.ShadowArchive
	25,  // 111: TSCH.PreUFF.TSCHPreUFFChartSeriesStyleArchive.tschchartseriesbubblesymbolfill:type_name -> TSD.FillArchive
	26,  // 112: TSCH.PreUFF.TSCHPreUFFChartSeriesStyleArchive.tschchartseriesbubblestroke:type_name -> TSD.StrokeArchive
	26,  // 113: TSCH.PreUFF.TSCHPreUFFChartSeriesStyleArchive.tschchartseriesbubblesymbolstroke:type_name -> TSD.StrokeArchive
	28,  // 114: TSCH.PreUFF.TSCHPreUFFChartSeriesStyleArchive.tschchartseriesbubbleshadow:type_name -> TSD.ShadowArchive
	28,  // 115: TSCH.PreUFF.TSCHPreUFFChartSeriesStyleArchive.tschchartseries3dbarshadow:type_name -> TSD.ShadowArchive
	28,  // 116: TSCH.PreUFF.TSCHPreUFFChartSeriesStyleArchive.tschchartseries3dcolumnshadow:type_name -> TSD.ShadowArchive
	28,  // 117: TSCH.PreUFF.TSCHPreUFFChartSeriesStyleArchive.tschchartseries3dlineshadow:type_name -> TSD.ShadowArchive
	28,  // 118: TSCH.PreUFF.TSCHPreUFFChartSeriesStyleArchive.tschchartseries3dareashadow:type_name -> TSD.ShadowArchive
	28,  // 119: TSCH.PreUFF.TSCHPreUFFChartSeriesStyleArchive.tschchartseries3dpieshadow:type_name -> TSD.ShadowArchive
	25,  // 120: TSCH.PreUFF.TSCHPreUFFChartSeriesStyleArchive.tschchartseriesmixedcolumnfill:type_name -> TSD.FillArchive
	25,  // 121: TSCH.PreUFF.TSCHPreUFFChartSeriesStyleArchive.tschchartseriesmixedareafill:type_name -> TSD.FillArchive
	26,  // 122: TSCH.PreUFF.TSCHPreUFFChartSeriesStyleArchive.tschchartseriesmixedcolumnstroke:type_name -> TSD.StrokeArchive
	26,  // 123: TSCH.PreUFF.TSCHPreUFFChartSeriesStyleArchive.tschchartseriesmixedlinestroke:type_name -> TSD.StrokeArchive
	26,  // 124: TSCH.PreUFF.TSCHPreUFFChartSeriesStyleArchive.tschchartseriesmixedareastroke:type_name -> TSD.StrokeArchive
	25,  // 125: TSCH.PreUFF.TSCHPreUFFChartSeriesStyleArchive.tschchartseriesmixedlinesymbolfill:type_name -> TSD.FillArchive
	25,  // 126: TSCH.PreUFF.TSCHPreUFFChartSeriesStyleArchive.tschchartseriesmixedareasymbolfill:type_name -> TSD.FillArchive
	26,  // 127: TSCH.PreUFF.TSCHPreUFFChartSeriesStyleArchive.tschchartseriesmixedlinesymbolstroke:type_name -> TSD.StrokeArchive
	26,  // 128: TSCH.PreUFF.TSCHPreUFFChartSeriesStyleArchive.tschchartseriesmixedareasymbolstroke:type_name -> TSD.StrokeArchive
	26,  // 129: TSCH.PreUFF.TSCHPreUFFChartSeriesStyleArchive.tschchartseriesdefaulttrendlinestroke:type_name -> TSD.StrokeArchive
	28,  // 130: TSCH.PreUFF.TSCHPreUFFChartSeriesStyleArchive.tschchartseriesdefaulttrendlineshadow:type_name -> TSD.ShadowArchive
	28,  // 131: TSCH.PreUFF.TSCHPreUFFChartSeriesStyleArchive.tschchartseriesdefaulterrorbarshadow:type_name -> TSD.ShadowArchive
	26,  // 132: TSCH.PreUFF.TSCHPreUFFChartSeriesStyleArchive.tschchartseriesdefaulterrorbarstroke:type_name -> TSD.StrokeArchive
	26,  // 133: TSCH.PreUFF.TSCHPreUFFChartSeriesStyleArchive.tschchartseriesdefaulterrorbarstrokescatterx:type_name -> TSD.StrokeArchive
	32,  // 134: TSCH.PreUFF.TSCHPreUFFChartSeriesStyleArchive.tschchartseriesdefaulterrorbarlineend:type_name -> TSD.LineEndArchive
	32,  // 135: TSCH.PreUFF.TSCHPreUFFChartSeriesStyleArchive.tschchartseriesdefaulterrorbarlineendscatterx:type_name -> TSD.LineEndArchive
	33,  // 136: TSCH.PreUFF.TSCHPreUFFChartSeriesStyleArchive.tschchartseriesdefaultdeprecated3dfill:type_name -> TSCH.DEPRECATEDChart3DFillArchive
	33,  // 137: TSCH.PreUFF.TSCHPreUFFChartSeriesStyleArchive.tschchartseriesbardeprecated3dfill:type_name -> TSCH.DEPRECATEDChart3DFillArchive
	33,  // 138: TSCH.PreUFF.TSCHPreUFFChartSeriesStyleArchive.tschchartseriescolumndeprecated3dfill:type_name -> TSCH.DEPRECATEDChart3DFillArchive
	33,  // 139: TSCH.PreUFF.TSCHPreUFFChartSeriesStyleArchive.tschchartserieslinedeprecated3dfill:type_name -> TSCH.DEPRECATEDChart3DFillArchive
	33,  // 140: TSCH.PreUFF.TSCHPreUFFChartSeriesStyleArchive.tschchartseriesareadeprecated3dfill:type_name -> TSCH.DEPRECATEDChart3DFillArchive
	33,  // 141: TSCH.PreUFF.TSCHPreUFFChartSeriesStyleArchive.tschchartseriespiedeprecated3dfill:type_name -> TSCH.DEPRECATEDChart3DFillArchive
	25,  // 142: TSCH.PreUFF.TSCHPreUFFChartSeriesStyleArchive.tschchartseries3dbarfill:type_name -> TSD.FillArchive
	25,  // 143: TSCH.PreUFF.TSCHPreUFFChartSeriesStyleArchive.tschchartseries3dcolumnfill:type_name -> TSD.FillArchive
	25,  // 144: TSCH.PreUFF.TSCHPreUFFChartSeriesStyleArchive.tschchartseries3dlinefill:type_name -> TSD.FillArchive
	25,  // 145: TSCH.PreUFF.TSCHPreUFFChartSeriesStyleArchive.tschchartseries3dareafill:type_name -> TSD.FillArchive
	25,  // 146: TSCH.PreUFF.TSCHPreUFFChartSeriesStyleArchive.tschchartseries3dpiefill:type_name -> TSD.FillArchive
	24,  // 147: TSCH.PreUFF.TSCHPreUFFChartSeriesNonStyleArchive.super:type_name -> TSS.StyleArchive
	4,   // 148: TSCH.PreUFF.TSCHPreUFFChartSeriesNonStyleArchive.tschchartseriesdefaultnumberformat:type_name -> TSCH.PreUFF.ChartsNumberFormatArchive
	4,   // 149: TSCH.PreUFF.TSCHPreUFFChartSeriesNonStyleArchive.tschchartseriespienumberformat:type_name -> TSCH.PreUFF.ChartsNumberFormatArchive
	4,   // 150: TSCH.PreUFF.TSCHPreUFFChartSeriesNonStyleArchive.tschchartseriesstackedpercentnumberformat:type_name -> TSCH.PreUFF.ChartsNumberFormatArchive
	34,  // 151: TSCH.PreUFF.TSCHPreUFFChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarcustompositivedata:type_name -> TSCH.ChartsNSArrayOfNSNumberDoubleArchive
	34,  // 152: TSCH.PreUFF.TSCHPreUFFChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarcustompositivedatascatterx:type_name -> TSCH.ChartsNSArrayOfNSNumberDoubleArchive
	34,  // 153: TSCH.PreUFF.TSCHPreUFFChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarcustomnegativedata:type_name -> TSCH.ChartsNSArrayOfNSNumberDoubleArchive
	34,  // 154: TSCH.PreUFF.TSCHPreUFFChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarcustomnegativedatascatterx:type_name -> TSCH.ChartsNSArrayOfNSNumberDoubleArchive
	155, // [155:155] is the sub-list for method output_type
	155, // [155:155] is the sub-list for method input_type
	155, // [155:155] is the sub-list for extension type_name
	155, // [155:155] is the sub-list for extension extendee
	0,   // [0:155] is the sub-list for field type_name
}

func init() { file_TSCHPreUFFArchives_proto_init() }
func file_TSCHPreUFFArchives_proto_init() {
	if File_TSCHPreUFFArchives_proto != nil {
		return
	}
	file_TSPMessages_proto_init()
	file_TSDArchives_proto_init()
	file_TSSArchives_proto_init()
	file_TSCHArchives_Common_proto_init()
	file_TSCH3DArchives_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_TSCHPreUFFArchives_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartInfoArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHPreUFFArchives_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LegendModelArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHPreUFFArchives_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartModelArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHPreUFFArchives_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSCHPreUFFChartGridArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHPreUFFArchives_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartsNumberFormatArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHPreUFFArchives_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSCHPreUFFChartStyleArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHPreUFFArchives_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSCHPreUFFChartNonStyleArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHPreUFFArchives_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSCHPreUFFLegendStyleArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHPreUFFArchives_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSCHPreUFFLegendNonStyleArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHPreUFFArchives_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSCHPreUFFChartAxisStyleArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHPreUFFArchives_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSCHPreUFFChartAxisNonStyleArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHPreUFFArchives_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSCHPreUFFChartSeriesStyleArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHPreUFFArchives_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSCHPreUFFChartSeriesNonStyleArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHPreUFFArchives_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSCHPreUFFChartGridArchive_ValueRow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_TSCHPreUFFArchives_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_TSCHPreUFFArchives_proto_goTypes,
		DependencyIndexes: file_TSCHPreUFFArchives_proto_depIdxs,
		MessageInfos:      file_TSCHPreUFFArchives_proto_msgTypes,
	}.Build()
	File_TSCHPreUFFArchives_proto = out.File
	file_TSCHPreUFFArchives_proto_rawDesc = nil
	file_TSCHPreUFFArchives_proto_goTypes = nil
	file_TSCHPreUFFArchives_proto_depIdxs = nil
}
