// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: TSKArchives.proto

package kpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StructuredTextImportType int32

const (
	StructuredTextImportType_ImportType_UNKNOWN    StructuredTextImportType = 0
	StructuredTextImportType_ImportType_DELIMITED  StructuredTextImportType = 1
	StructuredTextImportType_ImportType_FIXEDWIDTH StructuredTextImportType = 2
)

// Enum value maps for StructuredTextImportType.
var (
	StructuredTextImportType_name = map[int32]string{
		0: "ImportType_UNKNOWN",
		1: "ImportType_DELIMITED",
		2: "ImportType_FIXEDWIDTH",
	}
	StructuredTextImportType_value = map[string]int32{
		"ImportType_UNKNOWN":    0,
		"ImportType_DELIMITED":  1,
		"ImportType_FIXEDWIDTH": 2,
	}
)

func (x StructuredTextImportType) Enum() *StructuredTextImportType {
	p := new(StructuredTextImportType)
	*p = x
	return p
}

func (x StructuredTextImportType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StructuredTextImportType) Descriptor() protoreflect.EnumDescriptor {
	return file_TSKArchives_proto_enumTypes[0].Descriptor()
}

func (StructuredTextImportType) Type() protoreflect.EnumType {
	return &file_TSKArchives_proto_enumTypes[0]
}

func (x StructuredTextImportType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *StructuredTextImportType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = StructuredTextImportType(num)
	return nil
}

// Deprecated: Use StructuredTextImportType.Descriptor instead.
func (StructuredTextImportType) EnumDescriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{0}
}

type ChangeDocumentPackageTypeCommandArchive_PackageType int32

const (
	ChangeDocumentPackageTypeCommandArchive_Default    ChangeDocumentPackageTypeCommandArchive_PackageType = 0
	ChangeDocumentPackageTypeCommandArchive_Directory  ChangeDocumentPackageTypeCommandArchive_PackageType = 1
	ChangeDocumentPackageTypeCommandArchive_SingleFile ChangeDocumentPackageTypeCommandArchive_PackageType = 2
)

// Enum value maps for ChangeDocumentPackageTypeCommandArchive_PackageType.
var (
	ChangeDocumentPackageTypeCommandArchive_PackageType_name = map[int32]string{
		0: "Default",
		1: "Directory",
		2: "SingleFile",
	}
	ChangeDocumentPackageTypeCommandArchive_PackageType_value = map[string]int32{
		"Default":    0,
		"Directory":  1,
		"SingleFile": 2,
	}
)

func (x ChangeDocumentPackageTypeCommandArchive_PackageType) Enum() *ChangeDocumentPackageTypeCommandArchive_PackageType {
	p := new(ChangeDocumentPackageTypeCommandArchive_PackageType)
	*p = x
	return p
}

func (x ChangeDocumentPackageTypeCommandArchive_PackageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChangeDocumentPackageTypeCommandArchive_PackageType) Descriptor() protoreflect.EnumDescriptor {
	return file_TSKArchives_proto_enumTypes[1].Descriptor()
}

func (ChangeDocumentPackageTypeCommandArchive_PackageType) Type() protoreflect.EnumType {
	return &file_TSKArchives_proto_enumTypes[1]
}

func (x ChangeDocumentPackageTypeCommandArchive_PackageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ChangeDocumentPackageTypeCommandArchive_PackageType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ChangeDocumentPackageTypeCommandArchive_PackageType(num)
	return nil
}

// Deprecated: Use ChangeDocumentPackageTypeCommandArchive_PackageType.Descriptor instead.
func (ChangeDocumentPackageTypeCommandArchive_PackageType) EnumDescriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{45, 0}
}

type Operation_OperationType int32

const (
	Operation_Add          Operation_OperationType = 0
	Operation_Remove       Operation_OperationType = 1
	Operation_Placement    Operation_OperationType = 2
	Operation_Rearrange    Operation_OperationType = 3
	Operation_UpdateId     Operation_OperationType = 4
	Operation_UpdateRange  Operation_OperationType = 5
	Operation_ReplaceRange Operation_OperationType = 6
)

// Enum value maps for Operation_OperationType.
var (
	Operation_OperationType_name = map[int32]string{
		0: "Add",
		1: "Remove",
		2: "Placement",
		3: "Rearrange",
		4: "UpdateId",
		5: "UpdateRange",
		6: "ReplaceRange",
	}
	Operation_OperationType_value = map[string]int32{
		"Add":          0,
		"Remove":       1,
		"Placement":    2,
		"Rearrange":    3,
		"UpdateId":     4,
		"UpdateRange":  5,
		"ReplaceRange": 6,
	}
)

func (x Operation_OperationType) Enum() *Operation_OperationType {
	p := new(Operation_OperationType)
	*p = x
	return p
}

func (x Operation_OperationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Operation_OperationType) Descriptor() protoreflect.EnumDescriptor {
	return file_TSKArchives_proto_enumTypes[2].Descriptor()
}

func (Operation_OperationType) Type() protoreflect.EnumType {
	return &file_TSKArchives_proto_enumTypes[2]
}

func (x Operation_OperationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Operation_OperationType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Operation_OperationType(num)
	return nil
}

// Deprecated: Use Operation_OperationType.Descriptor instead.
func (Operation_OperationType) EnumDescriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{49, 0}
}

type PencilAnnotationUIState_PencilAnnotationToolType int32

const (
	PencilAnnotationUIState_Pen         PencilAnnotationUIState_PencilAnnotationToolType = 0
	PencilAnnotationUIState_Highlighter PencilAnnotationUIState_PencilAnnotationToolType = 1
)

// Enum value maps for PencilAnnotationUIState_PencilAnnotationToolType.
var (
	PencilAnnotationUIState_PencilAnnotationToolType_name = map[int32]string{
		0: "Pen",
		1: "Highlighter",
	}
	PencilAnnotationUIState_PencilAnnotationToolType_value = map[string]int32{
		"Pen":         0,
		"Highlighter": 1,
	}
)

func (x PencilAnnotationUIState_PencilAnnotationToolType) Enum() *PencilAnnotationUIState_PencilAnnotationToolType {
	p := new(PencilAnnotationUIState_PencilAnnotationToolType)
	*p = x
	return p
}

func (x PencilAnnotationUIState_PencilAnnotationToolType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PencilAnnotationUIState_PencilAnnotationToolType) Descriptor() protoreflect.EnumDescriptor {
	return file_TSKArchives_proto_enumTypes[3].Descriptor()
}

func (PencilAnnotationUIState_PencilAnnotationToolType) Type() protoreflect.EnumType {
	return &file_TSKArchives_proto_enumTypes[3]
}

func (x PencilAnnotationUIState_PencilAnnotationToolType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PencilAnnotationUIState_PencilAnnotationToolType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PencilAnnotationUIState_PencilAnnotationToolType(num)
	return nil
}

// Deprecated: Use PencilAnnotationUIState_PencilAnnotationToolType.Descriptor instead.
func (PencilAnnotationUIState_PencilAnnotationToolType) EnumDescriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{68, 0}
}

type TreeNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     *string      `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Children []*Reference `protobuf:"bytes,2,rep,name=children" json:"children,omitempty"`
	Object   *Reference   `protobuf:"bytes,3,opt,name=object" json:"object,omitempty"`
}

func (x *TreeNode) Reset() {
	*x = TreeNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreeNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreeNode) ProtoMessage() {}

func (x *TreeNode) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreeNode.ProtoReflect.Descriptor instead.
func (*TreeNode) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{0}
}

func (x *TreeNode) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *TreeNode) GetChildren() []*Reference {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *TreeNode) GetObject() *Reference {
	if x != nil {
		return x.Object
	}
	return nil
}

type LocalCommandHistoryItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command           *Reference `protobuf:"bytes,1,opt,name=command" json:"command,omitempty"`
	SelectionBehavior *Reference `protobuf:"bytes,2,opt,name=selection_behavior,json=selectionBehavior" json:"selection_behavior,omitempty"`
}

func (x *LocalCommandHistoryItem) Reset() {
	*x = LocalCommandHistoryItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalCommandHistoryItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalCommandHistoryItem) ProtoMessage() {}

func (x *LocalCommandHistoryItem) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalCommandHistoryItem.ProtoReflect.Descriptor instead.
func (*LocalCommandHistoryItem) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{1}
}

func (x *LocalCommandHistoryItem) GetCommand() *Reference {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *LocalCommandHistoryItem) GetSelectionBehavior() *Reference {
	if x != nil {
		return x.SelectionBehavior
	}
	return nil
}

type LocalCommandHistoryArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LargeArray *LargeArray `protobuf:"bytes,1,req,name=large_array,json=largeArray" json:"large_array,omitempty"`
}

func (x *LocalCommandHistoryArray) Reset() {
	*x = LocalCommandHistoryArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalCommandHistoryArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalCommandHistoryArray) ProtoMessage() {}

func (x *LocalCommandHistoryArray) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalCommandHistoryArray.ProtoReflect.Descriptor instead.
func (*LocalCommandHistoryArray) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{2}
}

func (x *LocalCommandHistoryArray) GetLargeArray() *LargeArray {
	if x != nil {
		return x.LargeArray
	}
	return nil
}

type LocalCommandHistoryArraySegment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LargeObjectArraySegment *LargeObjectArraySegment `protobuf:"bytes,1,req,name=large_object_array_segment,json=largeObjectArraySegment" json:"large_object_array_segment,omitempty"`
}

func (x *LocalCommandHistoryArraySegment) Reset() {
	*x = LocalCommandHistoryArraySegment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalCommandHistoryArraySegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalCommandHistoryArraySegment) ProtoMessage() {}

func (x *LocalCommandHistoryArraySegment) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalCommandHistoryArraySegment.ProtoReflect.Descriptor instead.
func (*LocalCommandHistoryArraySegment) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{3}
}

func (x *LocalCommandHistoryArraySegment) GetLargeObjectArraySegment() *LargeObjectArraySegment {
	if x != nil {
		return x.LargeObjectArraySegment
	}
	return nil
}

type LocalCommandHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UndoCount           *uint32    `protobuf:"varint,1,req,name=undo_count,json=undoCount" json:"undo_count,omitempty"`
	ItemsArray          *Reference `protobuf:"bytes,2,opt,name=items_array,json=itemsArray" json:"items_array,omitempty"`
	FixedRadar_13365177 *bool      `protobuf:"varint,10,opt,name=fixed_radar_13365177,json=fixedRadar13365177" json:"fixed_radar_13365177,omitempty"`
}

func (x *LocalCommandHistory) Reset() {
	*x = LocalCommandHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalCommandHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalCommandHistory) ProtoMessage() {}

func (x *LocalCommandHistory) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalCommandHistory.ProtoReflect.Descriptor instead.
func (*LocalCommandHistory) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{4}
}

func (x *LocalCommandHistory) GetUndoCount() uint32 {
	if x != nil && x.UndoCount != nil {
		return *x.UndoCount
	}
	return 0
}

func (x *LocalCommandHistory) GetItemsArray() *Reference {
	if x != nil {
		return x.ItemsArray
	}
	return nil
}

func (x *LocalCommandHistory) GetFixedRadar_13365177() bool {
	if x != nil && x.FixedRadar_13365177 != nil {
		return *x.FixedRadar_13365177
	}
	return false
}

type CollaborationCommandHistoryArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LargeArray *LargeArray `protobuf:"bytes,1,req,name=large_array,json=largeArray" json:"large_array,omitempty"`
}

func (x *CollaborationCommandHistoryArray) Reset() {
	*x = CollaborationCommandHistoryArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollaborationCommandHistoryArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollaborationCommandHistoryArray) ProtoMessage() {}

func (x *CollaborationCommandHistoryArray) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollaborationCommandHistoryArray.ProtoReflect.Descriptor instead.
func (*CollaborationCommandHistoryArray) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{5}
}

func (x *CollaborationCommandHistoryArray) GetLargeArray() *LargeArray {
	if x != nil {
		return x.LargeArray
	}
	return nil
}

type CollaborationCommandHistoryArraySegment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LargeObjectArraySegment *LargeObjectArraySegment `protobuf:"bytes,1,req,name=large_object_array_segment,json=largeObjectArraySegment" json:"large_object_array_segment,omitempty"`
}

func (x *CollaborationCommandHistoryArraySegment) Reset() {
	*x = CollaborationCommandHistoryArraySegment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollaborationCommandHistoryArraySegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollaborationCommandHistoryArraySegment) ProtoMessage() {}

func (x *CollaborationCommandHistoryArraySegment) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollaborationCommandHistoryArraySegment.ProtoReflect.Descriptor instead.
func (*CollaborationCommandHistoryArraySegment) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{6}
}

func (x *CollaborationCommandHistoryArraySegment) GetLargeObjectArraySegment() *LargeObjectArraySegment {
	if x != nil {
		return x.LargeObjectArraySegment
	}
	return nil
}

type CollaborationCommandHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalIdentifier *UUID                                 `protobuf:"bytes,1,opt,name=local_identifier,json=localIdentifier" json:"local_identifier,omitempty"`
	UndoItems       *CollaborationCommandHistory_ItemList `protobuf:"bytes,2,opt,name=undo_items,json=undoItems" json:"undo_items,omitempty"`
	RedoItems       *CollaborationCommandHistory_ItemList `protobuf:"bytes,3,opt,name=redo_items,json=redoItems" json:"redo_items,omitempty"`
}

func (x *CollaborationCommandHistory) Reset() {
	*x = CollaborationCommandHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollaborationCommandHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollaborationCommandHistory) ProtoMessage() {}

func (x *CollaborationCommandHistory) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollaborationCommandHistory.ProtoReflect.Descriptor instead.
func (*CollaborationCommandHistory) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{7}
}

func (x *CollaborationCommandHistory) GetLocalIdentifier() *UUID {
	if x != nil {
		return x.LocalIdentifier
	}
	return nil
}

func (x *CollaborationCommandHistory) GetUndoItems() *CollaborationCommandHistory_ItemList {
	if x != nil {
		return x.UndoItems
	}
	return nil
}

func (x *CollaborationCommandHistory) GetRedoItems() *CollaborationCommandHistory_ItemList {
	if x != nil {
		return x.RedoItems
	}
	return nil
}

type CollaborationCommandHistoryItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command           *Reference `protobuf:"bytes,1,opt,name=command" json:"command,omitempty"`
	ActionString      *string    `protobuf:"bytes,2,opt,name=action_string,json=actionString" json:"action_string,omitempty"`
	SelectionBehavior *Reference `protobuf:"bytes,3,opt,name=selection_behavior,json=selectionBehavior" json:"selection_behavior,omitempty"`
	CoalescingGroup   *Reference `protobuf:"bytes,4,opt,name=coalescing_group,json=coalescingGroup" json:"coalescing_group,omitempty"`
	RevisionSequence  *uint64    `protobuf:"varint,5,opt,name=revision_sequence,json=revisionSequence" json:"revision_sequence,omitempty"`
}

func (x *CollaborationCommandHistoryItem) Reset() {
	*x = CollaborationCommandHistoryItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollaborationCommandHistoryItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollaborationCommandHistoryItem) ProtoMessage() {}

func (x *CollaborationCommandHistoryItem) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollaborationCommandHistoryItem.ProtoReflect.Descriptor instead.
func (*CollaborationCommandHistoryItem) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{8}
}

func (x *CollaborationCommandHistoryItem) GetCommand() *Reference {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *CollaborationCommandHistoryItem) GetActionString() string {
	if x != nil && x.ActionString != nil {
		return *x.ActionString
	}
	return ""
}

func (x *CollaborationCommandHistoryItem) GetSelectionBehavior() *Reference {
	if x != nil {
		return x.SelectionBehavior
	}
	return nil
}

func (x *CollaborationCommandHistoryItem) GetCoalescingGroup() *Reference {
	if x != nil {
		return x.CoalescingGroup
	}
	return nil
}

func (x *CollaborationCommandHistoryItem) GetRevisionSequence() uint64 {
	if x != nil && x.RevisionSequence != nil {
		return *x.RevisionSequence
	}
	return 0
}

type CollaborationCommandHistoryCoalescingGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes                  []*Reference `protobuf:"bytes,1,rep,name=nodes" json:"nodes,omitempty"`
	DidCoalesceAllCommands *bool        `protobuf:"varint,2,opt,name=did_coalesce_all_commands,json=didCoalesceAllCommands,def=0" json:"did_coalesce_all_commands,omitempty"`
}

// Default values for CollaborationCommandHistoryCoalescingGroup fields.
const (
	Default_CollaborationCommandHistoryCoalescingGroup_DidCoalesceAllCommands = bool(false)
)

func (x *CollaborationCommandHistoryCoalescingGroup) Reset() {
	*x = CollaborationCommandHistoryCoalescingGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollaborationCommandHistoryCoalescingGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollaborationCommandHistoryCoalescingGroup) ProtoMessage() {}

func (x *CollaborationCommandHistoryCoalescingGroup) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollaborationCommandHistoryCoalescingGroup.ProtoReflect.Descriptor instead.
func (*CollaborationCommandHistoryCoalescingGroup) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{9}
}

func (x *CollaborationCommandHistoryCoalescingGroup) GetNodes() []*Reference {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *CollaborationCommandHistoryCoalescingGroup) GetDidCoalesceAllCommands() bool {
	if x != nil && x.DidCoalesceAllCommands != nil {
		return *x.DidCoalesceAllCommands
	}
	return Default_CollaborationCommandHistoryCoalescingGroup_DidCoalesceAllCommands
}

type CollaborationCommandHistoryCoalescingGroupNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command *Reference `protobuf:"bytes,1,opt,name=command" json:"command,omitempty"`
}

func (x *CollaborationCommandHistoryCoalescingGroupNode) Reset() {
	*x = CollaborationCommandHistoryCoalescingGroupNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollaborationCommandHistoryCoalescingGroupNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollaborationCommandHistoryCoalescingGroupNode) ProtoMessage() {}

func (x *CollaborationCommandHistoryCoalescingGroupNode) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollaborationCommandHistoryCoalescingGroupNode.ProtoReflect.Descriptor instead.
func (*CollaborationCommandHistoryCoalescingGroupNode) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{10}
}

func (x *CollaborationCommandHistoryCoalescingGroupNode) GetCommand() *Reference {
	if x != nil {
		return x.Command
	}
	return nil
}

type CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoalescingGroup *Reference `protobuf:"bytes,1,opt,name=coalescing_group,json=coalescingGroup" json:"coalescing_group,omitempty"`
	Node            *Reference `protobuf:"bytes,2,opt,name=node" json:"node,omitempty"`
}

func (x *CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver) Reset() {
	*x = CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver) ProtoMessage() {}

func (x *CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver.ProtoReflect.Descriptor instead.
func (*CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{11}
}

func (x *CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver) GetCoalescingGroup() *Reference {
	if x != nil {
		return x.CoalescingGroup
	}
	return nil
}

func (x *CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver) GetNode() *Reference {
	if x != nil {
		return x.Node
	}
	return nil
}

type TSKDocumentArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocaleIdentifier                            *string                   `protobuf:"bytes,4,opt,name=locale_identifier,json=localeIdentifier" json:"locale_identifier,omitempty"`
	AnnotationAuthorStorage                     *Reference                `protobuf:"bytes,7,opt,name=annotation_author_storage,json=annotationAuthorStorage" json:"annotation_author_storage,omitempty"`
	ActivityLogEntries                          []*Reference              `protobuf:"bytes,8,rep,name=activity_log_entries,json=activityLogEntries" json:"activity_log_entries,omitempty"`
	CreationLocaleIdentifier                    *string                   `protobuf:"bytes,9,opt,name=creation_locale_identifier,json=creationLocaleIdentifier" json:"creation_locale_identifier,omitempty"`
	PreventImageConversionOnOpen                *bool                     `protobuf:"varint,10,opt,name=prevent_image_conversion_on_open,json=preventImageConversionOnOpen" json:"prevent_image_conversion_on_open,omitempty"`
	HasFloatingLocale                           *bool                     `protobuf:"varint,11,opt,name=has_floating_locale,json=hasFloatingLocale" json:"has_floating_locale,omitempty"`
	HasUserDefinedLocale                        *bool                     `protobuf:"varint,12,opt,name=has_user_defined_locale,json=hasUserDefinedLocale" json:"has_user_defined_locale,omitempty"`
	CollaborationOperationHistory               *Reference                `protobuf:"bytes,14,opt,name=collaboration_operation_history,json=collaborationOperationHistory" json:"collaboration_operation_history,omitempty"`
	ShouldMeasureNegativelyTrackedTextCorrectly *bool                     `protobuf:"varint,15,opt,name=should_measure_negatively_tracked_text_correctly,json=shouldMeasureNegativelyTrackedTextCorrectly" json:"should_measure_negatively_tracked_text_correctly,omitempty"`
	UseOptimizedTextVerticalAlignment           *bool                     `protobuf:"varint,16,opt,name=use_optimized_text_vertical_alignment,json=useOptimizedTextVerticalAlignment" json:"use_optimized_text_vertical_alignment,omitempty"`
	FormattingSymbols                           *FormattingSymbolsArchive `protobuf:"bytes,17,opt,name=formatting_symbols,json=formattingSymbols" json:"formatting_symbols,omitempty"`
}

func (x *TSKDocumentArchive) Reset() {
	*x = TSKDocumentArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSKDocumentArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSKDocumentArchive) ProtoMessage() {}

func (x *TSKDocumentArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSKDocumentArchive.ProtoReflect.Descriptor instead.
func (*TSKDocumentArchive) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{12}
}

func (x *TSKDocumentArchive) GetLocaleIdentifier() string {
	if x != nil && x.LocaleIdentifier != nil {
		return *x.LocaleIdentifier
	}
	return ""
}

func (x *TSKDocumentArchive) GetAnnotationAuthorStorage() *Reference {
	if x != nil {
		return x.AnnotationAuthorStorage
	}
	return nil
}

func (x *TSKDocumentArchive) GetActivityLogEntries() []*Reference {
	if x != nil {
		return x.ActivityLogEntries
	}
	return nil
}

func (x *TSKDocumentArchive) GetCreationLocaleIdentifier() string {
	if x != nil && x.CreationLocaleIdentifier != nil {
		return *x.CreationLocaleIdentifier
	}
	return ""
}

func (x *TSKDocumentArchive) GetPreventImageConversionOnOpen() bool {
	if x != nil && x.PreventImageConversionOnOpen != nil {
		return *x.PreventImageConversionOnOpen
	}
	return false
}

func (x *TSKDocumentArchive) GetHasFloatingLocale() bool {
	if x != nil && x.HasFloatingLocale != nil {
		return *x.HasFloatingLocale
	}
	return false
}

func (x *TSKDocumentArchive) GetHasUserDefinedLocale() bool {
	if x != nil && x.HasUserDefinedLocale != nil {
		return *x.HasUserDefinedLocale
	}
	return false
}

func (x *TSKDocumentArchive) GetCollaborationOperationHistory() *Reference {
	if x != nil {
		return x.CollaborationOperationHistory
	}
	return nil
}

func (x *TSKDocumentArchive) GetShouldMeasureNegativelyTrackedTextCorrectly() bool {
	if x != nil && x.ShouldMeasureNegativelyTrackedTextCorrectly != nil {
		return *x.ShouldMeasureNegativelyTrackedTextCorrectly
	}
	return false
}

func (x *TSKDocumentArchive) GetUseOptimizedTextVerticalAlignment() bool {
	if x != nil && x.UseOptimizedTextVerticalAlignment != nil {
		return *x.UseOptimizedTextVerticalAlignment
	}
	return false
}

func (x *TSKDocumentArchive) GetFormattingSymbols() *FormattingSymbolsArchive {
	if x != nil {
		return x.FormattingSymbols
	}
	return nil
}

type FormattingSymbolsArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version                   *string                                    `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	Calendar                  *string                                    `protobuf:"bytes,2,opt,name=calendar" json:"calendar,omitempty"`
	NumberingSystem           *string                                    `protobuf:"bytes,3,opt,name=numbering_system,json=numberingSystem" json:"numbering_system,omitempty"`
	Months                    []string                                   `protobuf:"bytes,4,rep,name=months" json:"months,omitempty"`
	StandaloneMonths          []string                                   `protobuf:"bytes,5,rep,name=standalone_months,json=standaloneMonths" json:"standalone_months,omitempty"`
	ShortMonths               []string                                   `protobuf:"bytes,6,rep,name=short_months,json=shortMonths" json:"short_months,omitempty"`
	StandaloneShortMonths     []string                                   `protobuf:"bytes,7,rep,name=standalone_short_months,json=standaloneShortMonths" json:"standalone_short_months,omitempty"`
	Weekdays                  []string                                   `protobuf:"bytes,8,rep,name=weekdays" json:"weekdays,omitempty"`
	StandaloneWeekdays        []string                                   `protobuf:"bytes,9,rep,name=standalone_weekdays,json=standaloneWeekdays" json:"standalone_weekdays,omitempty"`
	ShortWeekdays             []string                                   `protobuf:"bytes,10,rep,name=short_weekdays,json=shortWeekdays" json:"short_weekdays,omitempty"`
	StandaloneShortWeekdays   []string                                   `protobuf:"bytes,11,rep,name=standalone_short_weekdays,json=standaloneShortWeekdays" json:"standalone_short_weekdays,omitempty"`
	AmSymbol                  *string                                    `protobuf:"bytes,12,opt,name=am_symbol,json=amSymbol" json:"am_symbol,omitempty"`
	PmSymbol                  *string                                    `protobuf:"bytes,13,opt,name=pm_symbol,json=pmSymbol" json:"pm_symbol,omitempty"`
	TinyMonths                []string                                   `protobuf:"bytes,14,rep,name=tiny_months,json=tinyMonths" json:"tiny_months,omitempty"`
	StandaloneTinyMonths      []string                                   `protobuf:"bytes,15,rep,name=standalone_tiny_months,json=standaloneTinyMonths" json:"standalone_tiny_months,omitempty"`
	TinyWeekdays              []string                                   `protobuf:"bytes,16,rep,name=tiny_weekdays,json=tinyWeekdays" json:"tiny_weekdays,omitempty"`
	StandaloneTinyWeekdays    []string                                   `protobuf:"bytes,17,rep,name=standalone_tiny_weekdays,json=standaloneTinyWeekdays" json:"standalone_tiny_weekdays,omitempty"`
	Quarters                  []string                                   `protobuf:"bytes,18,rep,name=quarters" json:"quarters,omitempty"`
	StandaloneQuarters        []string                                   `protobuf:"bytes,19,rep,name=standalone_quarters,json=standaloneQuarters" json:"standalone_quarters,omitempty"`
	ShortQuarters             []string                                   `protobuf:"bytes,20,rep,name=short_quarters,json=shortQuarters" json:"short_quarters,omitempty"`
	StandaloneShortQuarters   []string                                   `protobuf:"bytes,21,rep,name=standalone_short_quarters,json=standaloneShortQuarters" json:"standalone_short_quarters,omitempty"`
	Eras                      []string                                   `protobuf:"bytes,22,rep,name=eras" json:"eras,omitempty"`
	LongEras                  []string                                   `protobuf:"bytes,23,rep,name=long_eras,json=longEras" json:"long_eras,omitempty"`
	ShortDatePattern          *string                                    `protobuf:"bytes,24,opt,name=short_date_pattern,json=shortDatePattern" json:"short_date_pattern,omitempty"`
	MediumDatePattern         *string                                    `protobuf:"bytes,25,opt,name=medium_date_pattern,json=mediumDatePattern" json:"medium_date_pattern,omitempty"`
	LongDatePattern           *string                                    `protobuf:"bytes,26,opt,name=long_date_pattern,json=longDatePattern" json:"long_date_pattern,omitempty"`
	FullDatePattern           *string                                    `protobuf:"bytes,27,opt,name=full_date_pattern,json=fullDatePattern" json:"full_date_pattern,omitempty"`
	ShortTimePattern          *string                                    `protobuf:"bytes,28,opt,name=short_time_pattern,json=shortTimePattern" json:"short_time_pattern,omitempty"`
	MediumTimePattern         *string                                    `protobuf:"bytes,29,opt,name=medium_time_pattern,json=mediumTimePattern" json:"medium_time_pattern,omitempty"`
	LongTimePattern           *string                                    `protobuf:"bytes,30,opt,name=long_time_pattern,json=longTimePattern" json:"long_time_pattern,omitempty"`
	FullTimePattern           *string                                    `protobuf:"bytes,31,opt,name=full_time_pattern,json=fullTimePattern" json:"full_time_pattern,omitempty"`
	DecimalSeparator          *string                                    `protobuf:"bytes,32,opt,name=decimal_separator,json=decimalSeparator" json:"decimal_separator,omitempty"`
	GroupingSeparator         *string                                    `protobuf:"bytes,33,opt,name=grouping_separator,json=groupingSeparator" json:"grouping_separator,omitempty"`
	CurrencyDecimalSeparator  *string                                    `protobuf:"bytes,34,opt,name=currency_decimal_separator,json=currencyDecimalSeparator" json:"currency_decimal_separator,omitempty"`
	CurrencyGroupingSeparator *string                                    `protobuf:"bytes,35,opt,name=currency_grouping_separator,json=currencyGroupingSeparator" json:"currency_grouping_separator,omitempty"`
	PlusSign                  *string                                    `protobuf:"bytes,36,opt,name=plus_sign,json=plusSign" json:"plus_sign,omitempty"`
	MinusSign                 *string                                    `protobuf:"bytes,37,opt,name=minus_sign,json=minusSign" json:"minus_sign,omitempty"`
	ExponentialSymbol         *string                                    `protobuf:"bytes,38,opt,name=exponential_symbol,json=exponentialSymbol" json:"exponential_symbol,omitempty"`
	PercentSymbol             *string                                    `protobuf:"bytes,39,opt,name=percent_symbol,json=percentSymbol" json:"percent_symbol,omitempty"`
	PerMilleSymbol            *string                                    `protobuf:"bytes,40,opt,name=per_mille_symbol,json=perMilleSymbol" json:"per_mille_symbol,omitempty"`
	InfinitySymbol            *string                                    `protobuf:"bytes,41,opt,name=infinity_symbol,json=infinitySymbol" json:"infinity_symbol,omitempty"`
	NanSymbol                 *string                                    `protobuf:"bytes,42,opt,name=nan_symbol,json=nanSymbol" json:"nan_symbol,omitempty"`
	DecimalPattern            *string                                    `protobuf:"bytes,43,opt,name=decimal_pattern,json=decimalPattern" json:"decimal_pattern,omitempty"`
	ScientificPattern         *string                                    `protobuf:"bytes,44,opt,name=scientific_pattern,json=scientificPattern" json:"scientific_pattern,omitempty"`
	PercentPattern            *string                                    `protobuf:"bytes,45,opt,name=percent_pattern,json=percentPattern" json:"percent_pattern,omitempty"`
	CurrencyPattern           *string                                    `protobuf:"bytes,46,opt,name=currency_pattern,json=currencyPattern" json:"currency_pattern,omitempty"`
	CurrencyCode              *string                                    `protobuf:"bytes,47,opt,name=currency_code,json=currencyCode" json:"currency_code,omitempty"`
	CurrencySymbols           []*FormattingSymbolsArchive_CurrencySymbol `protobuf:"bytes,48,rep,name=currency_symbols,json=currencySymbols" json:"currency_symbols,omitempty"`
}

func (x *FormattingSymbolsArchive) Reset() {
	*x = FormattingSymbolsArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormattingSymbolsArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormattingSymbolsArchive) ProtoMessage() {}

func (x *FormattingSymbolsArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormattingSymbolsArchive.ProtoReflect.Descriptor instead.
func (*FormattingSymbolsArchive) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{13}
}

func (x *FormattingSymbolsArchive) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *FormattingSymbolsArchive) GetCalendar() string {
	if x != nil && x.Calendar != nil {
		return *x.Calendar
	}
	return ""
}

func (x *FormattingSymbolsArchive) GetNumberingSystem() string {
	if x != nil && x.NumberingSystem != nil {
		return *x.NumberingSystem
	}
	return ""
}

func (x *FormattingSymbolsArchive) GetMonths() []string {
	if x != nil {
		return x.Months
	}
	return nil
}

func (x *FormattingSymbolsArchive) GetStandaloneMonths() []string {
	if x != nil {
		return x.StandaloneMonths
	}
	return nil
}

func (x *FormattingSymbolsArchive) GetShortMonths() []string {
	if x != nil {
		return x.ShortMonths
	}
	return nil
}

func (x *FormattingSymbolsArchive) GetStandaloneShortMonths() []string {
	if x != nil {
		return x.StandaloneShortMonths
	}
	return nil
}

func (x *FormattingSymbolsArchive) GetWeekdays() []string {
	if x != nil {
		return x.Weekdays
	}
	return nil
}

func (x *FormattingSymbolsArchive) GetStandaloneWeekdays() []string {
	if x != nil {
		return x.StandaloneWeekdays
	}
	return nil
}

func (x *FormattingSymbolsArchive) GetShortWeekdays() []string {
	if x != nil {
		return x.ShortWeekdays
	}
	return nil
}

func (x *FormattingSymbolsArchive) GetStandaloneShortWeekdays() []string {
	if x != nil {
		return x.StandaloneShortWeekdays
	}
	return nil
}

func (x *FormattingSymbolsArchive) GetAmSymbol() string {
	if x != nil && x.AmSymbol != nil {
		return *x.AmSymbol
	}
	return ""
}

func (x *FormattingSymbolsArchive) GetPmSymbol() string {
	if x != nil && x.PmSymbol != nil {
		return *x.PmSymbol
	}
	return ""
}

func (x *FormattingSymbolsArchive) GetTinyMonths() []string {
	if x != nil {
		return x.TinyMonths
	}
	return nil
}

func (x *FormattingSymbolsArchive) GetStandaloneTinyMonths() []string {
	if x != nil {
		return x.StandaloneTinyMonths
	}
	return nil
}

func (x *FormattingSymbolsArchive) GetTinyWeekdays() []string {
	if x != nil {
		return x.TinyWeekdays
	}
	return nil
}

func (x *FormattingSymbolsArchive) GetStandaloneTinyWeekdays() []string {
	if x != nil {
		return x.StandaloneTinyWeekdays
	}
	return nil
}

func (x *FormattingSymbolsArchive) GetQuarters() []string {
	if x != nil {
		return x.Quarters
	}
	return nil
}

func (x *FormattingSymbolsArchive) GetStandaloneQuarters() []string {
	if x != nil {
		return x.StandaloneQuarters
	}
	return nil
}

func (x *FormattingSymbolsArchive) GetShortQuarters() []string {
	if x != nil {
		return x.ShortQuarters
	}
	return nil
}

func (x *FormattingSymbolsArchive) GetStandaloneShortQuarters() []string {
	if x != nil {
		return x.StandaloneShortQuarters
	}
	return nil
}

func (x *FormattingSymbolsArchive) GetEras() []string {
	if x != nil {
		return x.Eras
	}
	return nil
}

func (x *FormattingSymbolsArchive) GetLongEras() []string {
	if x != nil {
		return x.LongEras
	}
	return nil
}

func (x *FormattingSymbolsArchive) GetShortDatePattern() string {
	if x != nil && x.ShortDatePattern != nil {
		return *x.ShortDatePattern
	}
	return ""
}

func (x *FormattingSymbolsArchive) GetMediumDatePattern() string {
	if x != nil && x.MediumDatePattern != nil {
		return *x.MediumDatePattern
	}
	return ""
}

func (x *FormattingSymbolsArchive) GetLongDatePattern() string {
	if x != nil && x.LongDatePattern != nil {
		return *x.LongDatePattern
	}
	return ""
}

func (x *FormattingSymbolsArchive) GetFullDatePattern() string {
	if x != nil && x.FullDatePattern != nil {
		return *x.FullDatePattern
	}
	return ""
}

func (x *FormattingSymbolsArchive) GetShortTimePattern() string {
	if x != nil && x.ShortTimePattern != nil {
		return *x.ShortTimePattern
	}
	return ""
}

func (x *FormattingSymbolsArchive) GetMediumTimePattern() string {
	if x != nil && x.MediumTimePattern != nil {
		return *x.MediumTimePattern
	}
	return ""
}

func (x *FormattingSymbolsArchive) GetLongTimePattern() string {
	if x != nil && x.LongTimePattern != nil {
		return *x.LongTimePattern
	}
	return ""
}

func (x *FormattingSymbolsArchive) GetFullTimePattern() string {
	if x != nil && x.FullTimePattern != nil {
		return *x.FullTimePattern
	}
	return ""
}

func (x *FormattingSymbolsArchive) GetDecimalSeparator() string {
	if x != nil && x.DecimalSeparator != nil {
		return *x.DecimalSeparator
	}
	return ""
}

func (x *FormattingSymbolsArchive) GetGroupingSeparator() string {
	if x != nil && x.GroupingSeparator != nil {
		return *x.GroupingSeparator
	}
	return ""
}

func (x *FormattingSymbolsArchive) GetCurrencyDecimalSeparator() string {
	if x != nil && x.CurrencyDecimalSeparator != nil {
		return *x.CurrencyDecimalSeparator
	}
	return ""
}

func (x *FormattingSymbolsArchive) GetCurrencyGroupingSeparator() string {
	if x != nil && x.CurrencyGroupingSeparator != nil {
		return *x.CurrencyGroupingSeparator
	}
	return ""
}

func (x *FormattingSymbolsArchive) GetPlusSign() string {
	if x != nil && x.PlusSign != nil {
		return *x.PlusSign
	}
	return ""
}

func (x *FormattingSymbolsArchive) GetMinusSign() string {
	if x != nil && x.MinusSign != nil {
		return *x.MinusSign
	}
	return ""
}

func (x *FormattingSymbolsArchive) GetExponentialSymbol() string {
	if x != nil && x.ExponentialSymbol != nil {
		return *x.ExponentialSymbol
	}
	return ""
}

func (x *FormattingSymbolsArchive) GetPercentSymbol() string {
	if x != nil && x.PercentSymbol != nil {
		return *x.PercentSymbol
	}
	return ""
}

func (x *FormattingSymbolsArchive) GetPerMilleSymbol() string {
	if x != nil && x.PerMilleSymbol != nil {
		return *x.PerMilleSymbol
	}
	return ""
}

func (x *FormattingSymbolsArchive) GetInfinitySymbol() string {
	if x != nil && x.InfinitySymbol != nil {
		return *x.InfinitySymbol
	}
	return ""
}

func (x *FormattingSymbolsArchive) GetNanSymbol() string {
	if x != nil && x.NanSymbol != nil {
		return *x.NanSymbol
	}
	return ""
}

func (x *FormattingSymbolsArchive) GetDecimalPattern() string {
	if x != nil && x.DecimalPattern != nil {
		return *x.DecimalPattern
	}
	return ""
}

func (x *FormattingSymbolsArchive) GetScientificPattern() string {
	if x != nil && x.ScientificPattern != nil {
		return *x.ScientificPattern
	}
	return ""
}

func (x *FormattingSymbolsArchive) GetPercentPattern() string {
	if x != nil && x.PercentPattern != nil {
		return *x.PercentPattern
	}
	return ""
}

func (x *FormattingSymbolsArchive) GetCurrencyPattern() string {
	if x != nil && x.CurrencyPattern != nil {
		return *x.CurrencyPattern
	}
	return ""
}

func (x *FormattingSymbolsArchive) GetCurrencyCode() string {
	if x != nil && x.CurrencyCode != nil {
		return *x.CurrencyCode
	}
	return ""
}

func (x *FormattingSymbolsArchive) GetCurrencySymbols() []*FormattingSymbolsArchive_CurrencySymbol {
	if x != nil {
		return x.CurrencySymbols
	}
	return nil
}

type DocumentSupportCollaborationState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollaborationCommandHistory *Reference `protobuf:"bytes,1,opt,name=collaboration_command_history,json=collaborationCommandHistory" json:"collaboration_command_history,omitempty"`
	CollaborationSessionState   *Reference `protobuf:"bytes,2,opt,name=collaboration_session_state,json=collaborationSessionState" json:"collaboration_session_state,omitempty"`
}

func (x *DocumentSupportCollaborationState) Reset() {
	*x = DocumentSupportCollaborationState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentSupportCollaborationState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentSupportCollaborationState) ProtoMessage() {}

func (x *DocumentSupportCollaborationState) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentSupportCollaborationState.ProtoReflect.Descriptor instead.
func (*DocumentSupportCollaborationState) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{14}
}

func (x *DocumentSupportCollaborationState) GetCollaborationCommandHistory() *Reference {
	if x != nil {
		return x.CollaborationCommandHistory
	}
	return nil
}

func (x *DocumentSupportCollaborationState) GetCollaborationSessionState() *Reference {
	if x != nil {
		return x.CollaborationSessionState
	}
	return nil
}

type DocumentSupportArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommandHistory           *Reference `protobuf:"bytes,1,opt,name=command_history,json=commandHistory" json:"command_history,omitempty"`
	UndoCount                *uint32    `protobuf:"varint,4,opt,name=undo_count,json=undoCount" json:"undo_count,omitempty"`
	RedoCount                *uint32    `protobuf:"varint,5,opt,name=redo_count,json=redoCount" json:"redo_count,omitempty"`
	UndoActionString         *string    `protobuf:"bytes,6,opt,name=undo_action_string,json=undoActionString" json:"undo_action_string,omitempty"`
	RedoActionString         *string    `protobuf:"bytes,7,opt,name=redo_action_string,json=redoActionString" json:"redo_action_string,omitempty"`
	WebState                 *Reference `protobuf:"bytes,8,opt,name=web_state,json=webState" json:"web_state,omitempty"`
	IsInCollaborationMode    *bool      `protobuf:"varint,9,opt,name=is_in_collaboration_mode,json=isInCollaborationMode,def=0" json:"is_in_collaboration_mode,omitempty"`
	ActionStringLocalization *string    `protobuf:"bytes,12,opt,name=action_string_localization,json=actionStringLocalization" json:"action_string_localization,omitempty"`
	CollaborationState       *Reference `protobuf:"bytes,13,opt,name=collaboration_state,json=collaborationState" json:"collaboration_state,omitempty"`
	// Deprecated: Do not use.
	CommandSelectionBehaviorHistory *Reference `protobuf:"bytes,2,opt,name=command_selection_behavior_history,json=commandSelectionBehaviorHistory" json:"command_selection_behavior_history,omitempty"`
	// Deprecated: Do not use.
	ViewState *Reference `protobuf:"bytes,3,opt,name=view_state,json=viewState" json:"view_state,omitempty"`
	// Deprecated: Do not use.
	CollaborationCommandHistory *Reference `protobuf:"bytes,10,opt,name=collaboration_command_history,json=collaborationCommandHistory" json:"collaboration_command_history,omitempty"`
	// Deprecated: Do not use.
	CollaborationSessionState *Reference `protobuf:"bytes,11,opt,name=collaboration_session_state,json=collaborationSessionState" json:"collaboration_session_state,omitempty"`
}

// Default values for DocumentSupportArchive fields.
const (
	Default_DocumentSupportArchive_IsInCollaborationMode = bool(false)
)

func (x *DocumentSupportArchive) Reset() {
	*x = DocumentSupportArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentSupportArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentSupportArchive) ProtoMessage() {}

func (x *DocumentSupportArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentSupportArchive.ProtoReflect.Descriptor instead.
func (*DocumentSupportArchive) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{15}
}

func (x *DocumentSupportArchive) GetCommandHistory() *Reference {
	if x != nil {
		return x.CommandHistory
	}
	return nil
}

func (x *DocumentSupportArchive) GetUndoCount() uint32 {
	if x != nil && x.UndoCount != nil {
		return *x.UndoCount
	}
	return 0
}

func (x *DocumentSupportArchive) GetRedoCount() uint32 {
	if x != nil && x.RedoCount != nil {
		return *x.RedoCount
	}
	return 0
}

func (x *DocumentSupportArchive) GetUndoActionString() string {
	if x != nil && x.UndoActionString != nil {
		return *x.UndoActionString
	}
	return ""
}

func (x *DocumentSupportArchive) GetRedoActionString() string {
	if x != nil && x.RedoActionString != nil {
		return *x.RedoActionString
	}
	return ""
}

func (x *DocumentSupportArchive) GetWebState() *Reference {
	if x != nil {
		return x.WebState
	}
	return nil
}

func (x *DocumentSupportArchive) GetIsInCollaborationMode() bool {
	if x != nil && x.IsInCollaborationMode != nil {
		return *x.IsInCollaborationMode
	}
	return Default_DocumentSupportArchive_IsInCollaborationMode
}

func (x *DocumentSupportArchive) GetActionStringLocalization() string {
	if x != nil && x.ActionStringLocalization != nil {
		return *x.ActionStringLocalization
	}
	return ""
}

func (x *DocumentSupportArchive) GetCollaborationState() *Reference {
	if x != nil {
		return x.CollaborationState
	}
	return nil
}

// Deprecated: Do not use.
func (x *DocumentSupportArchive) GetCommandSelectionBehaviorHistory() *Reference {
	if x != nil {
		return x.CommandSelectionBehaviorHistory
	}
	return nil
}

// Deprecated: Do not use.
func (x *DocumentSupportArchive) GetViewState() *Reference {
	if x != nil {
		return x.ViewState
	}
	return nil
}

// Deprecated: Do not use.
func (x *DocumentSupportArchive) GetCollaborationCommandHistory() *Reference {
	if x != nil {
		return x.CollaborationCommandHistory
	}
	return nil
}

// Deprecated: Do not use.
func (x *DocumentSupportArchive) GetCollaborationSessionState() *Reference {
	if x != nil {
		return x.CollaborationSessionState
	}
	return nil
}

type ViewStateArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViewStateRoot              *Reference `protobuf:"bytes,1,req,name=view_state_root,json=viewStateRoot" json:"view_state_root,omitempty"`
	DocumentRevisionSequence   *int32     `protobuf:"varint,2,opt,name=document_revision_sequence,json=documentRevisionSequence" json:"document_revision_sequence,omitempty"`
	DocumentRevisionIdentifier *string    `protobuf:"bytes,3,opt,name=document_revision_identifier,json=documentRevisionIdentifier" json:"document_revision_identifier,omitempty"`
}

func (x *ViewStateArchive) Reset() {
	*x = ViewStateArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ViewStateArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewStateArchive) ProtoMessage() {}

func (x *ViewStateArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewStateArchive.ProtoReflect.Descriptor instead.
func (*ViewStateArchive) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{16}
}

func (x *ViewStateArchive) GetViewStateRoot() *Reference {
	if x != nil {
		return x.ViewStateRoot
	}
	return nil
}

func (x *ViewStateArchive) GetDocumentRevisionSequence() int32 {
	if x != nil && x.DocumentRevisionSequence != nil {
		return *x.DocumentRevisionSequence
	}
	return 0
}

func (x *ViewStateArchive) GetDocumentRevisionIdentifier() string {
	if x != nil && x.DocumentRevisionIdentifier != nil {
		return *x.DocumentRevisionIdentifier
	}
	return ""
}

type CommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Do not use.
	UndoRedoState              *Reference `protobuf:"bytes,1,opt,name=undoRedoState" json:"undoRedoState,omitempty"`
	UndoCollection             *Reference `protobuf:"bytes,2,opt,name=undoCollection" json:"undoCollection,omitempty"`
	ShadowedByTransform        *bool      `protobuf:"varint,3,opt,name=shadowed_by_transform,json=shadowedByTransform" json:"shadowed_by_transform,omitempty"`
	ShadowedByCommit           *bool      `protobuf:"varint,4,opt,name=shadowed_by_commit,json=shadowedByCommit" json:"shadowed_by_commit,omitempty"`
	Remote                     *bool      `protobuf:"varint,5,opt,name=remote" json:"remote,omitempty"`
	ShouldHoldUntilGroupCommit *bool      `protobuf:"varint,6,opt,name=should_hold_until_group_commit,json=shouldHoldUntilGroupCommit" json:"should_hold_until_group_commit,omitempty"`
	ServerOriginated           *bool      `protobuf:"varint,7,opt,name=server_originated,json=serverOriginated" json:"server_originated,omitempty"`
}

func (x *CommandArchive) Reset() {
	*x = CommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandArchive) ProtoMessage() {}

func (x *CommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandArchive.ProtoReflect.Descriptor instead.
func (*CommandArchive) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{17}
}

// Deprecated: Do not use.
func (x *CommandArchive) GetUndoRedoState() *Reference {
	if x != nil {
		return x.UndoRedoState
	}
	return nil
}

func (x *CommandArchive) GetUndoCollection() *Reference {
	if x != nil {
		return x.UndoCollection
	}
	return nil
}

func (x *CommandArchive) GetShadowedByTransform() bool {
	if x != nil && x.ShadowedByTransform != nil {
		return *x.ShadowedByTransform
	}
	return false
}

func (x *CommandArchive) GetShadowedByCommit() bool {
	if x != nil && x.ShadowedByCommit != nil {
		return *x.ShadowedByCommit
	}
	return false
}

func (x *CommandArchive) GetRemote() bool {
	if x != nil && x.Remote != nil {
		return *x.Remote
	}
	return false
}

func (x *CommandArchive) GetShouldHoldUntilGroupCommit() bool {
	if x != nil && x.ShouldHoldUntilGroupCommit != nil {
		return *x.ShouldHoldUntilGroupCommit
	}
	return false
}

func (x *CommandArchive) GetServerOriginated() bool {
	if x != nil && x.ServerOriginated != nil {
		return *x.ServerOriginated
	}
	return false
}

type CommandGroupArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super          *CommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Commands       []*Reference    `protobuf:"bytes,2,rep,name=commands" json:"commands,omitempty"`
	ProcessResults *IndexSet       `protobuf:"bytes,3,opt,name=process_results,json=processResults" json:"process_results,omitempty"`
	ActionString   *string         `protobuf:"bytes,4,opt,name=action_string,json=actionString" json:"action_string,omitempty"`
}

func (x *CommandGroupArchive) Reset() {
	*x = CommandGroupArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandGroupArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandGroupArchive) ProtoMessage() {}

func (x *CommandGroupArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandGroupArchive.ProtoReflect.Descriptor instead.
func (*CommandGroupArchive) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{18}
}

func (x *CommandGroupArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandGroupArchive) GetCommands() []*Reference {
	if x != nil {
		return x.Commands
	}
	return nil
}

func (x *CommandGroupArchive) GetProcessResults() *IndexSet {
	if x != nil {
		return x.ProcessResults
	}
	return nil
}

func (x *CommandGroupArchive) GetActionString() string {
	if x != nil && x.ActionString != nil {
		return *x.ActionString
	}
	return ""
}

type InducedCommandCollectionArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                             *CommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	InducingCommand                   *Reference      `protobuf:"bytes,2,opt,name=inducing_command,json=inducingCommand" json:"inducing_command,omitempty"`
	InducedCommands                   []*Reference    `protobuf:"bytes,3,rep,name=induced_commands,json=inducedCommands" json:"induced_commands,omitempty"`
	IndexesOfProcessedInducedCommands *IndexSet       `protobuf:"bytes,4,opt,name=indexes_of_processed_induced_commands,json=indexesOfProcessedInducedCommands" json:"indexes_of_processed_induced_commands,omitempty"`
}

func (x *InducedCommandCollectionArchive) Reset() {
	*x = InducedCommandCollectionArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InducedCommandCollectionArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InducedCommandCollectionArchive) ProtoMessage() {}

func (x *InducedCommandCollectionArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InducedCommandCollectionArchive.ProtoReflect.Descriptor instead.
func (*InducedCommandCollectionArchive) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{19}
}

func (x *InducedCommandCollectionArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *InducedCommandCollectionArchive) GetInducingCommand() *Reference {
	if x != nil {
		return x.InducingCommand
	}
	return nil
}

func (x *InducedCommandCollectionArchive) GetInducedCommands() []*Reference {
	if x != nil {
		return x.InducedCommands
	}
	return nil
}

func (x *InducedCommandCollectionArchive) GetIndexesOfProcessedInducedCommands() *IndexSet {
	if x != nil {
		return x.IndexesOfProcessedInducedCommands
	}
	return nil
}

type PropagatedCommandCollectionArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                            *CommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	PropagatableCommand              *Reference      `protobuf:"bytes,2,req,name=propagatable_command,json=propagatableCommand" json:"propagatable_command,omitempty"`
	PropagatableCommandProcessResult *bool           `protobuf:"varint,3,opt,name=propagatable_command_process_result,json=propagatableCommandProcessResult,def=0" json:"propagatable_command_process_result,omitempty"`
	PropagatingCommand               *Reference      `protobuf:"bytes,4,req,name=propagating_command,json=propagatingCommand" json:"propagating_command,omitempty"`
	PropagatingCommandProcessResult  *bool           `protobuf:"varint,5,opt,name=propagating_command_process_result,json=propagatingCommandProcessResult,def=0" json:"propagating_command_process_result,omitempty"`
}

// Default values for PropagatedCommandCollectionArchive fields.
const (
	Default_PropagatedCommandCollectionArchive_PropagatableCommandProcessResult = bool(false)
	Default_PropagatedCommandCollectionArchive_PropagatingCommandProcessResult  = bool(false)
)

func (x *PropagatedCommandCollectionArchive) Reset() {
	*x = PropagatedCommandCollectionArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropagatedCommandCollectionArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropagatedCommandCollectionArchive) ProtoMessage() {}

func (x *PropagatedCommandCollectionArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropagatedCommandCollectionArchive.ProtoReflect.Descriptor instead.
func (*PropagatedCommandCollectionArchive) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{20}
}

func (x *PropagatedCommandCollectionArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *PropagatedCommandCollectionArchive) GetPropagatableCommand() *Reference {
	if x != nil {
		return x.PropagatableCommand
	}
	return nil
}

func (x *PropagatedCommandCollectionArchive) GetPropagatableCommandProcessResult() bool {
	if x != nil && x.PropagatableCommandProcessResult != nil {
		return *x.PropagatableCommandProcessResult
	}
	return Default_PropagatedCommandCollectionArchive_PropagatableCommandProcessResult
}

func (x *PropagatedCommandCollectionArchive) GetPropagatingCommand() *Reference {
	if x != nil {
		return x.PropagatingCommand
	}
	return nil
}

func (x *PropagatedCommandCollectionArchive) GetPropagatingCommandProcessResult() bool {
	if x != nil && x.PropagatingCommandProcessResult != nil {
		return *x.PropagatingCommandProcessResult
	}
	return Default_PropagatedCommandCollectionArchive_PropagatingCommandProcessResult
}

type FinalCommandPairArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                     *CommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Command                   *Reference      `protobuf:"bytes,2,req,name=command" json:"command,omitempty"`
	CommandProcessResult      *bool           `protobuf:"varint,3,opt,name=command_process_result,json=commandProcessResult,def=0" json:"command_process_result,omitempty"`
	FinalCommand              *Reference      `protobuf:"bytes,4,req,name=final_command,json=finalCommand" json:"final_command,omitempty"`
	FinalCommandProcessResult *bool           `protobuf:"varint,5,opt,name=final_command_process_result,json=finalCommandProcessResult,def=0" json:"final_command_process_result,omitempty"`
}

// Default values for FinalCommandPairArchive fields.
const (
	Default_FinalCommandPairArchive_CommandProcessResult      = bool(false)
	Default_FinalCommandPairArchive_FinalCommandProcessResult = bool(false)
)

func (x *FinalCommandPairArchive) Reset() {
	*x = FinalCommandPairArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinalCommandPairArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalCommandPairArchive) ProtoMessage() {}

func (x *FinalCommandPairArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalCommandPairArchive.ProtoReflect.Descriptor instead.
func (*FinalCommandPairArchive) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{21}
}

func (x *FinalCommandPairArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *FinalCommandPairArchive) GetCommand() *Reference {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *FinalCommandPairArchive) GetCommandProcessResult() bool {
	if x != nil && x.CommandProcessResult != nil {
		return *x.CommandProcessResult
	}
	return Default_FinalCommandPairArchive_CommandProcessResult
}

func (x *FinalCommandPairArchive) GetFinalCommand() *Reference {
	if x != nil {
		return x.FinalCommand
	}
	return nil
}

func (x *FinalCommandPairArchive) GetFinalCommandProcessResult() bool {
	if x != nil && x.FinalCommandProcessResult != nil {
		return *x.FinalCommandProcessResult
	}
	return Default_FinalCommandPairArchive_FinalCommandProcessResult
}

type CommandContainerArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commands []*Reference `protobuf:"bytes,1,rep,name=commands" json:"commands,omitempty"`
}

func (x *CommandContainerArchive) Reset() {
	*x = CommandContainerArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandContainerArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandContainerArchive) ProtoMessage() {}

func (x *CommandContainerArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandContainerArchive.ProtoReflect.Descriptor instead.
func (*CommandContainerArchive) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{22}
}

func (x *CommandContainerArchive) GetCommands() []*Reference {
	if x != nil {
		return x.Commands
	}
	return nil
}

type ProgressiveCommandGroupArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *CommandGroupArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
}

func (x *ProgressiveCommandGroupArchive) Reset() {
	*x = ProgressiveCommandGroupArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProgressiveCommandGroupArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProgressiveCommandGroupArchive) ProtoMessage() {}

func (x *ProgressiveCommandGroupArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProgressiveCommandGroupArchive.ProtoReflect.Descriptor instead.
func (*ProgressiveCommandGroupArchive) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{23}
}

func (x *ProgressiveCommandGroupArchive) GetSuper() *CommandGroupArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

type TSKFormatStructArchive struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	FormatType                     *uint32              `protobuf:"varint,1,opt,name=format_type,json=formatType" json:"format_type,omitempty"`
	DecimalPlaces                  *uint32              `protobuf:"varint,2,opt,name=decimal_places,json=decimalPlaces" json:"decimal_places,omitempty"`
	CurrencyCode                   *string              `protobuf:"bytes,3,opt,name=currency_code,json=currencyCode" json:"currency_code,omitempty"`
	NegativeStyle                  *uint32              `protobuf:"varint,4,opt,name=negative_style,json=negativeStyle" json:"negative_style,omitempty"`
	ShowThousandsSeparator         *bool                `protobuf:"varint,5,opt,name=show_thousands_separator,json=showThousandsSeparator" json:"show_thousands_separator,omitempty"`
	UseAccountingStyle             *bool                `protobuf:"varint,6,opt,name=use_accounting_style,json=useAccountingStyle" json:"use_accounting_style,omitempty"`
	DurationStyle                  *uint32              `protobuf:"varint,7,opt,name=duration_style,json=durationStyle" json:"duration_style,omitempty"`
	Base                           *uint32              `protobuf:"varint,8,opt,name=base" json:"base,omitempty"`
	BasePlaces                     *uint32              `protobuf:"varint,9,opt,name=base_places,json=basePlaces" json:"base_places,omitempty"`
	BaseUseMinusSign               *bool                `protobuf:"varint,10,opt,name=base_use_minus_sign,json=baseUseMinusSign" json:"base_use_minus_sign,omitempty"`
	FractionAccuracy               *uint32              `protobuf:"varint,11,opt,name=fraction_accuracy,json=fractionAccuracy" json:"fraction_accuracy,omitempty"`
	SuppressDateFormat             *bool                `protobuf:"varint,12,opt,name=suppress_date_format,json=suppressDateFormat" json:"suppress_date_format,omitempty"`
	SuppressTimeFormat             *bool                `protobuf:"varint,13,opt,name=suppress_time_format,json=suppressTimeFormat" json:"suppress_time_format,omitempty"`
	DateTimeFormat                 *string              `protobuf:"bytes,14,opt,name=date_time_format,json=dateTimeFormat" json:"date_time_format,omitempty"`
	DurationUnitLargest            *uint32              `protobuf:"varint,15,opt,name=duration_unit_largest,json=durationUnitLargest" json:"duration_unit_largest,omitempty"`
	DurationUnitSmallest           *uint32              `protobuf:"varint,16,opt,name=duration_unit_smallest,json=durationUnitSmallest" json:"duration_unit_smallest,omitempty"`
	CustomId                       *uint32              `protobuf:"varint,17,opt,name=custom_id,json=customId" json:"custom_id,omitempty"`
	CustomFormatString             *string              `protobuf:"bytes,18,opt,name=custom_format_string,json=customFormatString" json:"custom_format_string,omitempty"`
	ScaleFactor                    *float64             `protobuf:"fixed64,19,opt,name=scale_factor,json=scaleFactor" json:"scale_factor,omitempty"`
	RequiresFractionReplacement    *bool                `protobuf:"varint,20,opt,name=requires_fraction_replacement,json=requiresFractionReplacement" json:"requires_fraction_replacement,omitempty"`
	ControlMinimum                 *float64             `protobuf:"fixed64,21,opt,name=control_minimum,json=controlMinimum" json:"control_minimum,omitempty"`
	ControlMaximum                 *float64             `protobuf:"fixed64,22,opt,name=control_maximum,json=controlMaximum" json:"control_maximum,omitempty"`
	ControlIncrement               *float64             `protobuf:"fixed64,23,opt,name=control_increment,json=controlIncrement" json:"control_increment,omitempty"`
	ControlFormatType              *uint32              `protobuf:"varint,24,opt,name=control_format_type,json=controlFormatType" json:"control_format_type,omitempty"`
	SliderOrientation              *uint32              `protobuf:"varint,25,opt,name=slider_orientation,json=sliderOrientation" json:"slider_orientation,omitempty"`
	SliderPosition                 *uint32              `protobuf:"varint,26,opt,name=slider_position,json=sliderPosition" json:"slider_position,omitempty"`
	DecimalWidth                   *uint32              `protobuf:"varint,27,opt,name=decimal_width,json=decimalWidth" json:"decimal_width,omitempty"`
	MinIntegerWidth                *uint32              `protobuf:"varint,28,opt,name=min_integer_width,json=minIntegerWidth" json:"min_integer_width,omitempty"`
	NumNonspaceIntegerDigits       *uint32              `protobuf:"varint,29,opt,name=num_nonspace_integer_digits,json=numNonspaceIntegerDigits" json:"num_nonspace_integer_digits,omitempty"`
	NumNonspaceDecimalDigits       *uint32              `protobuf:"varint,30,opt,name=num_nonspace_decimal_digits,json=numNonspaceDecimalDigits" json:"num_nonspace_decimal_digits,omitempty"`
	IndexFromRightLastInteger      *uint32              `protobuf:"varint,31,opt,name=index_from_right_last_integer,json=indexFromRightLastInteger" json:"index_from_right_last_integer,omitempty"`
	InterstitialStrings            []string             `protobuf:"bytes,32,rep,name=interstitial_strings,json=interstitialStrings" json:"interstitial_strings,omitempty"`
	IntersStrInsertionIndexes      *IndexSet            `protobuf:"bytes,33,opt,name=inters_str_insertion_indexes,json=intersStrInsertionIndexes" json:"inters_str_insertion_indexes,omitempty"`
	NumHashDecimalDigits           *uint32              `protobuf:"varint,34,opt,name=num_hash_decimal_digits,json=numHashDecimalDigits" json:"num_hash_decimal_digits,omitempty"`
	TotalNumDecimalDigits          *uint32              `protobuf:"varint,35,opt,name=total_num_decimal_digits,json=totalNumDecimalDigits" json:"total_num_decimal_digits,omitempty"`
	IsComplex                      *bool                `protobuf:"varint,36,opt,name=is_complex,json=isComplex" json:"is_complex,omitempty"`
	ContainsIntegerToken           *bool                `protobuf:"varint,37,opt,name=contains_integer_token,json=containsIntegerToken" json:"contains_integer_token,omitempty"`
	MultipleChoiceListInitialValue *uint32              `protobuf:"varint,38,opt,name=multiple_choice_list_initial_value,json=multipleChoiceListInitialValue" json:"multiple_choice_list_initial_value,omitempty"`
	MultipleChoiceListId           *uint32              `protobuf:"varint,39,opt,name=multiple_choice_list_id,json=multipleChoiceListId" json:"multiple_choice_list_id,omitempty"`
	UseAutomaticDurationUnits      *bool                `protobuf:"varint,40,opt,name=use_automatic_duration_units,json=useAutomaticDurationUnits" json:"use_automatic_duration_units,omitempty"`
	CustomUid                      *UUID                `protobuf:"bytes,41,opt,name=custom_uid,json=customUid" json:"custom_uid,omitempty"`
	CustomFormat                   *CustomFormatArchive `protobuf:"bytes,42,opt,name=custom_format,json=customFormat" json:"custom_format,omitempty"`
	UsesPlusSign                   *bool                `protobuf:"varint,43,opt,name=uses_plus_sign,json=usesPlusSign" json:"uses_plus_sign,omitempty"`
	BoolTrueString                 *string              `protobuf:"bytes,44,opt,name=bool_true_string,json=boolTrueString" json:"bool_true_string,omitempty"`
	BoolFalseString                *string              `protobuf:"bytes,45,opt,name=bool_false_string,json=boolFalseString" json:"bool_false_string,omitempty"`
}

func (x *TSKFormatStructArchive) Reset() {
	*x = TSKFormatStructArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSKFormatStructArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSKFormatStructArchive) ProtoMessage() {}

func (x *TSKFormatStructArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSKFormatStructArchive.ProtoReflect.Descriptor instead.
func (*TSKFormatStructArchive) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{24}
}

func (x *TSKFormatStructArchive) GetFormatType() uint32 {
	if x != nil && x.FormatType != nil {
		return *x.FormatType
	}
	return 0
}

func (x *TSKFormatStructArchive) GetDecimalPlaces() uint32 {
	if x != nil && x.DecimalPlaces != nil {
		return *x.DecimalPlaces
	}
	return 0
}

func (x *TSKFormatStructArchive) GetCurrencyCode() string {
	if x != nil && x.CurrencyCode != nil {
		return *x.CurrencyCode
	}
	return ""
}

func (x *TSKFormatStructArchive) GetNegativeStyle() uint32 {
	if x != nil && x.NegativeStyle != nil {
		return *x.NegativeStyle
	}
	return 0
}

func (x *TSKFormatStructArchive) GetShowThousandsSeparator() bool {
	if x != nil && x.ShowThousandsSeparator != nil {
		return *x.ShowThousandsSeparator
	}
	return false
}

func (x *TSKFormatStructArchive) GetUseAccountingStyle() bool {
	if x != nil && x.UseAccountingStyle != nil {
		return *x.UseAccountingStyle
	}
	return false
}

func (x *TSKFormatStructArchive) GetDurationStyle() uint32 {
	if x != nil && x.DurationStyle != nil {
		return *x.DurationStyle
	}
	return 0
}

func (x *TSKFormatStructArchive) GetBase() uint32 {
	if x != nil && x.Base != nil {
		return *x.Base
	}
	return 0
}

func (x *TSKFormatStructArchive) GetBasePlaces() uint32 {
	if x != nil && x.BasePlaces != nil {
		return *x.BasePlaces
	}
	return 0
}

func (x *TSKFormatStructArchive) GetBaseUseMinusSign() bool {
	if x != nil && x.BaseUseMinusSign != nil {
		return *x.BaseUseMinusSign
	}
	return false
}

func (x *TSKFormatStructArchive) GetFractionAccuracy() uint32 {
	if x != nil && x.FractionAccuracy != nil {
		return *x.FractionAccuracy
	}
	return 0
}

func (x *TSKFormatStructArchive) GetSuppressDateFormat() bool {
	if x != nil && x.SuppressDateFormat != nil {
		return *x.SuppressDateFormat
	}
	return false
}

func (x *TSKFormatStructArchive) GetSuppressTimeFormat() bool {
	if x != nil && x.SuppressTimeFormat != nil {
		return *x.SuppressTimeFormat
	}
	return false
}

func (x *TSKFormatStructArchive) GetDateTimeFormat() string {
	if x != nil && x.DateTimeFormat != nil {
		return *x.DateTimeFormat
	}
	return ""
}

func (x *TSKFormatStructArchive) GetDurationUnitLargest() uint32 {
	if x != nil && x.DurationUnitLargest != nil {
		return *x.DurationUnitLargest
	}
	return 0
}

func (x *TSKFormatStructArchive) GetDurationUnitSmallest() uint32 {
	if x != nil && x.DurationUnitSmallest != nil {
		return *x.DurationUnitSmallest
	}
	return 0
}

func (x *TSKFormatStructArchive) GetCustomId() uint32 {
	if x != nil && x.CustomId != nil {
		return *x.CustomId
	}
	return 0
}

func (x *TSKFormatStructArchive) GetCustomFormatString() string {
	if x != nil && x.CustomFormatString != nil {
		return *x.CustomFormatString
	}
	return ""
}

func (x *TSKFormatStructArchive) GetScaleFactor() float64 {
	if x != nil && x.ScaleFactor != nil {
		return *x.ScaleFactor
	}
	return 0
}

func (x *TSKFormatStructArchive) GetRequiresFractionReplacement() bool {
	if x != nil && x.RequiresFractionReplacement != nil {
		return *x.RequiresFractionReplacement
	}
	return false
}

func (x *TSKFormatStructArchive) GetControlMinimum() float64 {
	if x != nil && x.ControlMinimum != nil {
		return *x.ControlMinimum
	}
	return 0
}

func (x *TSKFormatStructArchive) GetControlMaximum() float64 {
	if x != nil && x.ControlMaximum != nil {
		return *x.ControlMaximum
	}
	return 0
}

func (x *TSKFormatStructArchive) GetControlIncrement() float64 {
	if x != nil && x.ControlIncrement != nil {
		return *x.ControlIncrement
	}
	return 0
}

func (x *TSKFormatStructArchive) GetControlFormatType() uint32 {
	if x != nil && x.ControlFormatType != nil {
		return *x.ControlFormatType
	}
	return 0
}

func (x *TSKFormatStructArchive) GetSliderOrientation() uint32 {
	if x != nil && x.SliderOrientation != nil {
		return *x.SliderOrientation
	}
	return 0
}

func (x *TSKFormatStructArchive) GetSliderPosition() uint32 {
	if x != nil && x.SliderPosition != nil {
		return *x.SliderPosition
	}
	return 0
}

func (x *TSKFormatStructArchive) GetDecimalWidth() uint32 {
	if x != nil && x.DecimalWidth != nil {
		return *x.DecimalWidth
	}
	return 0
}

func (x *TSKFormatStructArchive) GetMinIntegerWidth() uint32 {
	if x != nil && x.MinIntegerWidth != nil {
		return *x.MinIntegerWidth
	}
	return 0
}

func (x *TSKFormatStructArchive) GetNumNonspaceIntegerDigits() uint32 {
	if x != nil && x.NumNonspaceIntegerDigits != nil {
		return *x.NumNonspaceIntegerDigits
	}
	return 0
}

func (x *TSKFormatStructArchive) GetNumNonspaceDecimalDigits() uint32 {
	if x != nil && x.NumNonspaceDecimalDigits != nil {
		return *x.NumNonspaceDecimalDigits
	}
	return 0
}

func (x *TSKFormatStructArchive) GetIndexFromRightLastInteger() uint32 {
	if x != nil && x.IndexFromRightLastInteger != nil {
		return *x.IndexFromRightLastInteger
	}
	return 0
}

func (x *TSKFormatStructArchive) GetInterstitialStrings() []string {
	if x != nil {
		return x.InterstitialStrings
	}
	return nil
}

func (x *TSKFormatStructArchive) GetIntersStrInsertionIndexes() *IndexSet {
	if x != nil {
		return x.IntersStrInsertionIndexes
	}
	return nil
}

func (x *TSKFormatStructArchive) GetNumHashDecimalDigits() uint32 {
	if x != nil && x.NumHashDecimalDigits != nil {
		return *x.NumHashDecimalDigits
	}
	return 0
}

func (x *TSKFormatStructArchive) GetTotalNumDecimalDigits() uint32 {
	if x != nil && x.TotalNumDecimalDigits != nil {
		return *x.TotalNumDecimalDigits
	}
	return 0
}

func (x *TSKFormatStructArchive) GetIsComplex() bool {
	if x != nil && x.IsComplex != nil {
		return *x.IsComplex
	}
	return false
}

func (x *TSKFormatStructArchive) GetContainsIntegerToken() bool {
	if x != nil && x.ContainsIntegerToken != nil {
		return *x.ContainsIntegerToken
	}
	return false
}

func (x *TSKFormatStructArchive) GetMultipleChoiceListInitialValue() uint32 {
	if x != nil && x.MultipleChoiceListInitialValue != nil {
		return *x.MultipleChoiceListInitialValue
	}
	return 0
}

func (x *TSKFormatStructArchive) GetMultipleChoiceListId() uint32 {
	if x != nil && x.MultipleChoiceListId != nil {
		return *x.MultipleChoiceListId
	}
	return 0
}

func (x *TSKFormatStructArchive) GetUseAutomaticDurationUnits() bool {
	if x != nil && x.UseAutomaticDurationUnits != nil {
		return *x.UseAutomaticDurationUnits
	}
	return false
}

func (x *TSKFormatStructArchive) GetCustomUid() *UUID {
	if x != nil {
		return x.CustomUid
	}
	return nil
}

func (x *TSKFormatStructArchive) GetCustomFormat() *CustomFormatArchive {
	if x != nil {
		return x.CustomFormat
	}
	return nil
}

func (x *TSKFormatStructArchive) GetUsesPlusSign() bool {
	if x != nil && x.UsesPlusSign != nil {
		return *x.UsesPlusSign
	}
	return false
}

func (x *TSKFormatStructArchive) GetBoolTrueString() string {
	if x != nil && x.BoolTrueString != nil {
		return *x.BoolTrueString
	}
	return ""
}

func (x *TSKFormatStructArchive) GetBoolFalseString() string {
	if x != nil && x.BoolFalseString != nil {
		return *x.BoolFalseString
	}
	return ""
}

type CustomFormatArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             *string                          `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	FormatTypePreBnc *uint32                          `protobuf:"varint,2,req,name=format_type_pre_bnc,json=formatTypePreBnc" json:"format_type_pre_bnc,omitempty"`
	DefaultFormat    *TSKFormatStructArchive          `protobuf:"bytes,3,req,name=default_format,json=defaultFormat" json:"default_format,omitempty"`
	Conditions       []*CustomFormatArchive_Condition `protobuf:"bytes,4,rep,name=conditions" json:"conditions,omitempty"`
	FormatType       *uint32                          `protobuf:"varint,5,opt,name=format_type,json=formatType" json:"format_type,omitempty"`
}

func (x *CustomFormatArchive) Reset() {
	*x = CustomFormatArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomFormatArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomFormatArchive) ProtoMessage() {}

func (x *CustomFormatArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomFormatArchive.ProtoReflect.Descriptor instead.
func (*CustomFormatArchive) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{25}
}

func (x *CustomFormatArchive) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CustomFormatArchive) GetFormatTypePreBnc() uint32 {
	if x != nil && x.FormatTypePreBnc != nil {
		return *x.FormatTypePreBnc
	}
	return 0
}

func (x *CustomFormatArchive) GetDefaultFormat() *TSKFormatStructArchive {
	if x != nil {
		return x.DefaultFormat
	}
	return nil
}

func (x *CustomFormatArchive) GetConditions() []*CustomFormatArchive_Condition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *CustomFormatArchive) GetFormatType() uint32 {
	if x != nil && x.FormatType != nil {
		return *x.FormatType
	}
	return 0
}

type CustomFormatListArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuids         []*UUID                `protobuf:"bytes,1,rep,name=uuids" json:"uuids,omitempty"`
	CustomFormats []*CustomFormatArchive `protobuf:"bytes,2,rep,name=custom_formats,json=customFormats" json:"custom_formats,omitempty"`
}

func (x *CustomFormatListArchive) Reset() {
	*x = CustomFormatListArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomFormatListArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomFormatListArchive) ProtoMessage() {}

func (x *CustomFormatListArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomFormatListArchive.ProtoReflect.Descriptor instead.
func (*CustomFormatListArchive) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{26}
}

func (x *CustomFormatListArchive) GetUuids() []*UUID {
	if x != nil {
		return x.Uuids
	}
	return nil
}

func (x *CustomFormatListArchive) GetCustomFormats() []*CustomFormatArchive {
	if x != nil {
		return x.CustomFormats
	}
	return nil
}

type AnnotationAuthorArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Color          *Color  `protobuf:"bytes,2,opt,name=color" json:"color,omitempty"`
	PublicId       *string `protobuf:"bytes,3,opt,name=public_id,json=publicId" json:"public_id,omitempty"`
	IsPublicAuthor *bool   `protobuf:"varint,4,opt,name=is_public_author,json=isPublicAuthor" json:"is_public_author,omitempty"`
}

func (x *AnnotationAuthorArchive) Reset() {
	*x = AnnotationAuthorArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnotationAuthorArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnotationAuthorArchive) ProtoMessage() {}

func (x *AnnotationAuthorArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnotationAuthorArchive.ProtoReflect.Descriptor instead.
func (*AnnotationAuthorArchive) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{27}
}

func (x *AnnotationAuthorArchive) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *AnnotationAuthorArchive) GetColor() *Color {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *AnnotationAuthorArchive) GetPublicId() string {
	if x != nil && x.PublicId != nil {
		return *x.PublicId
	}
	return ""
}

func (x *AnnotationAuthorArchive) GetIsPublicAuthor() bool {
	if x != nil && x.IsPublicAuthor != nil {
		return *x.IsPublicAuthor
	}
	return false
}

type DeprecatedChangeAuthorArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	ChangeColor *Color  `protobuf:"bytes,2,opt,name=change_color,json=changeColor" json:"change_color,omitempty"`
}

func (x *DeprecatedChangeAuthorArchive) Reset() {
	*x = DeprecatedChangeAuthorArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeprecatedChangeAuthorArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeprecatedChangeAuthorArchive) ProtoMessage() {}

func (x *DeprecatedChangeAuthorArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeprecatedChangeAuthorArchive.ProtoReflect.Descriptor instead.
func (*DeprecatedChangeAuthorArchive) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{28}
}

func (x *DeprecatedChangeAuthorArchive) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *DeprecatedChangeAuthorArchive) GetChangeColor() *Color {
	if x != nil {
		return x.ChangeColor
	}
	return nil
}

type AnnotationAuthorStorageArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnnotationAuthor []*Reference `protobuf:"bytes,1,rep,name=annotation_author,json=annotationAuthor" json:"annotation_author,omitempty"`
}

func (x *AnnotationAuthorStorageArchive) Reset() {
	*x = AnnotationAuthorStorageArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnotationAuthorStorageArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnotationAuthorStorageArchive) ProtoMessage() {}

func (x *AnnotationAuthorStorageArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnotationAuthorStorageArchive.ProtoReflect.Descriptor instead.
func (*AnnotationAuthorStorageArchive) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{29}
}

func (x *AnnotationAuthorStorageArchive) GetAnnotationAuthor() []*Reference {
	if x != nil {
		return x.AnnotationAuthor
	}
	return nil
}

type SetAnnotationAuthorColorCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super            *CommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	AnnotationAuthor *Reference      `protobuf:"bytes,2,opt,name=annotation_author,json=annotationAuthor" json:"annotation_author,omitempty"`
	Color            *Color          `protobuf:"bytes,3,opt,name=color" json:"color,omitempty"`
	OldColor         *Color          `protobuf:"bytes,4,opt,name=old_color,json=oldColor" json:"old_color,omitempty"`
}

func (x *SetAnnotationAuthorColorCommandArchive) Reset() {
	*x = SetAnnotationAuthorColorCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetAnnotationAuthorColorCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAnnotationAuthorColorCommandArchive) ProtoMessage() {}

func (x *SetAnnotationAuthorColorCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAnnotationAuthorColorCommandArchive.ProtoReflect.Descriptor instead.
func (*SetAnnotationAuthorColorCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{30}
}

func (x *SetAnnotationAuthorColorCommandArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *SetAnnotationAuthorColorCommandArchive) GetAnnotationAuthor() *Reference {
	if x != nil {
		return x.AnnotationAuthor
	}
	return nil
}

func (x *SetAnnotationAuthorColorCommandArchive) GetColor() *Color {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *SetAnnotationAuthorColorCommandArchive) GetOldColor() *Color {
	if x != nil {
		return x.OldColor
	}
	return nil
}

type CommandSelectionBehaviorArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArchivedSelection               *SelectionPathArchive `protobuf:"bytes,8,opt,name=archived_selection,json=archivedSelection" json:"archived_selection,omitempty"`
	ArchivedOldSelection            *SelectionPathArchive `protobuf:"bytes,1,opt,name=archived_old_selection,json=archivedOldSelection" json:"archived_old_selection,omitempty"`
	ArchivedNewSelection            *SelectionPathArchive `protobuf:"bytes,2,opt,name=archived_new_selection,json=archivedNewSelection" json:"archived_new_selection,omitempty"`
	SelectionFlags                  *uint64               `protobuf:"varint,3,opt,name=selection_flags,json=selectionFlags" json:"selection_flags,omitempty"`
	AdditionalForwardSelectionFlags *uint64               `protobuf:"varint,4,opt,name=additional_forward_selection_flags,json=additionalForwardSelectionFlags" json:"additional_forward_selection_flags,omitempty"`
	AdditionalReverseSelectionFlags *uint64               `protobuf:"varint,5,opt,name=additional_reverse_selection_flags,json=additionalReverseSelectionFlags" json:"additional_reverse_selection_flags,omitempty"`
	ForwardSelectionPathTransformer *Reference            `protobuf:"bytes,6,opt,name=forward_selection_path_transformer,json=forwardSelectionPathTransformer" json:"forward_selection_path_transformer,omitempty"`
	ReverseSelectionPathTransformer *Reference            `protobuf:"bytes,7,opt,name=reverse_selection_path_transformer,json=reverseSelectionPathTransformer" json:"reverse_selection_path_transformer,omitempty"`
	AdditionalSelectionBehaviors    []*Reference          `protobuf:"bytes,9,rep,name=additional_selection_behaviors,json=additionalSelectionBehaviors" json:"additional_selection_behaviors,omitempty"`
}

func (x *CommandSelectionBehaviorArchive) Reset() {
	*x = CommandSelectionBehaviorArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSelectionBehaviorArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSelectionBehaviorArchive) ProtoMessage() {}

func (x *CommandSelectionBehaviorArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSelectionBehaviorArchive.ProtoReflect.Descriptor instead.
func (*CommandSelectionBehaviorArchive) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{31}
}

func (x *CommandSelectionBehaviorArchive) GetArchivedSelection() *SelectionPathArchive {
	if x != nil {
		return x.ArchivedSelection
	}
	return nil
}

func (x *CommandSelectionBehaviorArchive) GetArchivedOldSelection() *SelectionPathArchive {
	if x != nil {
		return x.ArchivedOldSelection
	}
	return nil
}

func (x *CommandSelectionBehaviorArchive) GetArchivedNewSelection() *SelectionPathArchive {
	if x != nil {
		return x.ArchivedNewSelection
	}
	return nil
}

func (x *CommandSelectionBehaviorArchive) GetSelectionFlags() uint64 {
	if x != nil && x.SelectionFlags != nil {
		return *x.SelectionFlags
	}
	return 0
}

func (x *CommandSelectionBehaviorArchive) GetAdditionalForwardSelectionFlags() uint64 {
	if x != nil && x.AdditionalForwardSelectionFlags != nil {
		return *x.AdditionalForwardSelectionFlags
	}
	return 0
}

func (x *CommandSelectionBehaviorArchive) GetAdditionalReverseSelectionFlags() uint64 {
	if x != nil && x.AdditionalReverseSelectionFlags != nil {
		return *x.AdditionalReverseSelectionFlags
	}
	return 0
}

func (x *CommandSelectionBehaviorArchive) GetForwardSelectionPathTransformer() *Reference {
	if x != nil {
		return x.ForwardSelectionPathTransformer
	}
	return nil
}

func (x *CommandSelectionBehaviorArchive) GetReverseSelectionPathTransformer() *Reference {
	if x != nil {
		return x.ReverseSelectionPathTransformer
	}
	return nil
}

func (x *CommandSelectionBehaviorArchive) GetAdditionalSelectionBehaviors() []*Reference {
	if x != nil {
		return x.AdditionalSelectionBehaviors
	}
	return nil
}

type SelectionPathTransformerArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelectionTransformers []*Reference `protobuf:"bytes,1,rep,name=selection_transformers,json=selectionTransformers" json:"selection_transformers,omitempty"`
}

func (x *SelectionPathTransformerArchive) Reset() {
	*x = SelectionPathTransformerArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectionPathTransformerArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectionPathTransformerArchive) ProtoMessage() {}

func (x *SelectionPathTransformerArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectionPathTransformerArchive.ProtoReflect.Descriptor instead.
func (*SelectionPathTransformerArchive) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{32}
}

func (x *SelectionPathTransformerArchive) GetSelectionTransformers() []*Reference {
	if x != nil {
		return x.SelectionTransformers
	}
	return nil
}

type SelectionPathArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderedSelections []*Reference `protobuf:"bytes,1,rep,name=ordered_selections,json=orderedSelections" json:"ordered_selections,omitempty"`
}

func (x *SelectionPathArchive) Reset() {
	*x = SelectionPathArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectionPathArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectionPathArchive) ProtoMessage() {}

func (x *SelectionPathArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectionPathArchive.ProtoReflect.Descriptor instead.
func (*SelectionPathArchive) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{33}
}

func (x *SelectionPathArchive) GetOrderedSelections() []*Reference {
	if x != nil {
		return x.OrderedSelections
	}
	return nil
}

type DocumentSelectionArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocumentRoot *Reference `protobuf:"bytes,1,opt,name=document_root,json=documentRoot" json:"document_root,omitempty"`
}

func (x *DocumentSelectionArchive) Reset() {
	*x = DocumentSelectionArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentSelectionArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentSelectionArchive) ProtoMessage() {}

func (x *DocumentSelectionArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentSelectionArchive.ProtoReflect.Descriptor instead.
func (*DocumentSelectionArchive) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{34}
}

func (x *DocumentSelectionArchive) GetDocumentRoot() *Reference {
	if x != nil {
		return x.DocumentRoot
	}
	return nil
}

type IdOperationArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdPath *UUIDPath `protobuf:"bytes,1,req,name=id_path,json=idPath" json:"id_path,omitempty"`
}

func (x *IdOperationArgs) Reset() {
	*x = IdOperationArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdOperationArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdOperationArgs) ProtoMessage() {}

func (x *IdOperationArgs) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdOperationArgs.ProtoReflect.Descriptor instead.
func (*IdOperationArgs) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{35}
}

func (x *IdOperationArgs) GetIdPath() *UUIDPath {
	if x != nil {
		return x.IdPath
	}
	return nil
}

type AddIdOperationArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *IdOperationArgs `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Index *int32           `protobuf:"varint,2,req,name=index" json:"index,omitempty"`
}

func (x *AddIdOperationArgs) Reset() {
	*x = AddIdOperationArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddIdOperationArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddIdOperationArgs) ProtoMessage() {}

func (x *AddIdOperationArgs) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddIdOperationArgs.ProtoReflect.Descriptor instead.
func (*AddIdOperationArgs) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{36}
}

func (x *AddIdOperationArgs) GetSuper() *IdOperationArgs {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *AddIdOperationArgs) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

type RemoveIdOperationArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *IdOperationArgs `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Index *int32           `protobuf:"varint,2,req,name=index" json:"index,omitempty"`
}

func (x *RemoveIdOperationArgs) Reset() {
	*x = RemoveIdOperationArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveIdOperationArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveIdOperationArgs) ProtoMessage() {}

func (x *RemoveIdOperationArgs) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveIdOperationArgs.ProtoReflect.Descriptor instead.
func (*RemoveIdOperationArgs) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{37}
}

func (x *RemoveIdOperationArgs) GetSuper() *IdOperationArgs {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *RemoveIdOperationArgs) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

type RearrangeIdOperationArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super     *IdOperationArgs `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	FromIndex *int32           `protobuf:"varint,2,req,name=from_index,json=fromIndex" json:"from_index,omitempty"`
	ToIndex   *int32           `protobuf:"varint,3,req,name=to_index,json=toIndex" json:"to_index,omitempty"`
}

func (x *RearrangeIdOperationArgs) Reset() {
	*x = RearrangeIdOperationArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RearrangeIdOperationArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RearrangeIdOperationArgs) ProtoMessage() {}

func (x *RearrangeIdOperationArgs) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RearrangeIdOperationArgs.ProtoReflect.Descriptor instead.
func (*RearrangeIdOperationArgs) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{38}
}

func (x *RearrangeIdOperationArgs) GetSuper() *IdOperationArgs {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *RearrangeIdOperationArgs) GetFromIndex() int32 {
	if x != nil && x.FromIndex != nil {
		return *x.FromIndex
	}
	return 0
}

func (x *RearrangeIdOperationArgs) GetToIndex() int32 {
	if x != nil && x.ToIndex != nil {
		return *x.ToIndex
	}
	return 0
}

type IdPlacementOperationArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super     *IdOperationArgs `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	FromIndex *int32           `protobuf:"varint,2,req,name=from_index,json=fromIndex" json:"from_index,omitempty"`
	ToIndex   *int32           `protobuf:"varint,3,req,name=to_index,json=toIndex" json:"to_index,omitempty"`
}

func (x *IdPlacementOperationArgs) Reset() {
	*x = IdPlacementOperationArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdPlacementOperationArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdPlacementOperationArgs) ProtoMessage() {}

func (x *IdPlacementOperationArgs) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdPlacementOperationArgs.ProtoReflect.Descriptor instead.
func (*IdPlacementOperationArgs) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{39}
}

func (x *IdPlacementOperationArgs) GetSuper() *IdOperationArgs {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *IdPlacementOperationArgs) GetFromIndex() int32 {
	if x != nil && x.FromIndex != nil {
		return *x.FromIndex
	}
	return 0
}

func (x *IdPlacementOperationArgs) GetToIndex() int32 {
	if x != nil && x.ToIndex != nil {
		return *x.ToIndex
	}
	return 0
}

type NullCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *CommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
}

func (x *NullCommandArchive) Reset() {
	*x = NullCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NullCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NullCommandArchive) ProtoMessage() {}

func (x *NullCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NullCommandArchive.ProtoReflect.Descriptor instead.
func (*NullCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{40}
}

func (x *NullCommandArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

type GroupCommitCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *CommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
}

func (x *GroupCommitCommandArchive) Reset() {
	*x = GroupCommitCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupCommitCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupCommitCommandArchive) ProtoMessage() {}

func (x *GroupCommitCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupCommitCommandArchive.ProtoReflect.Descriptor instead.
func (*GroupCommitCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{41}
}

func (x *GroupCommitCommandArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

type UpgradeDocPostProcessingCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *CommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
}

func (x *UpgradeDocPostProcessingCommandArchive) Reset() {
	*x = UpgradeDocPostProcessingCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeDocPostProcessingCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeDocPostProcessingCommandArchive) ProtoMessage() {}

func (x *UpgradeDocPostProcessingCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeDocPostProcessingCommandArchive.ProtoReflect.Descriptor instead.
func (*UpgradeDocPostProcessingCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{42}
}

func (x *UpgradeDocPostProcessingCommandArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

type InducedCommandCollectionCommitCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *CommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
}

func (x *InducedCommandCollectionCommitCommandArchive) Reset() {
	*x = InducedCommandCollectionCommitCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InducedCommandCollectionCommitCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InducedCommandCollectionCommitCommandArchive) ProtoMessage() {}

func (x *InducedCommandCollectionCommitCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InducedCommandCollectionCommitCommandArchive.ProtoReflect.Descriptor instead.
func (*InducedCommandCollectionCommitCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{43}
}

func (x *InducedCommandCollectionCommitCommandArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

type ExecuteTestBetweenRollbackAndReapplyCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *CommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
}

func (x *ExecuteTestBetweenRollbackAndReapplyCommandArchive) Reset() {
	*x = ExecuteTestBetweenRollbackAndReapplyCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteTestBetweenRollbackAndReapplyCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteTestBetweenRollbackAndReapplyCommandArchive) ProtoMessage() {}

func (x *ExecuteTestBetweenRollbackAndReapplyCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteTestBetweenRollbackAndReapplyCommandArchive.ProtoReflect.Descriptor instead.
func (*ExecuteTestBetweenRollbackAndReapplyCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{44}
}

func (x *ExecuteTestBetweenRollbackAndReapplyCommandArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

type ChangeDocumentPackageTypeCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super          *CommandArchive                                      `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	NewPackageType *ChangeDocumentPackageTypeCommandArchive_PackageType `protobuf:"varint,2,req,name=new_package_type,json=newPackageType,enum=TSK.ChangeDocumentPackageTypeCommandArchive_PackageType" json:"new_package_type,omitempty"`
	OldPackageType *ChangeDocumentPackageTypeCommandArchive_PackageType `protobuf:"varint,3,req,name=old_package_type,json=oldPackageType,enum=TSK.ChangeDocumentPackageTypeCommandArchive_PackageType" json:"old_package_type,omitempty"`
}

func (x *ChangeDocumentPackageTypeCommandArchive) Reset() {
	*x = ChangeDocumentPackageTypeCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeDocumentPackageTypeCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeDocumentPackageTypeCommandArchive) ProtoMessage() {}

func (x *ChangeDocumentPackageTypeCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeDocumentPackageTypeCommandArchive.ProtoReflect.Descriptor instead.
func (*ChangeDocumentPackageTypeCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{45}
}

func (x *ChangeDocumentPackageTypeCommandArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *ChangeDocumentPackageTypeCommandArchive) GetNewPackageType() ChangeDocumentPackageTypeCommandArchive_PackageType {
	if x != nil && x.NewPackageType != nil {
		return *x.NewPackageType
	}
	return ChangeDocumentPackageTypeCommandArchive_Default
}

func (x *ChangeDocumentPackageTypeCommandArchive) GetOldPackageType() ChangeDocumentPackageTypeCommandArchive_PackageType {
	if x != nil && x.OldPackageType != nil {
		return *x.OldPackageType
	}
	return ChangeDocumentPackageTypeCommandArchive_Default
}

type CreateLocalStorageSnapshotCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super      *CommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	SnapshotId *string         `protobuf:"bytes,2,opt,name=snapshot_id,json=snapshotId" json:"snapshot_id,omitempty"`
}

func (x *CreateLocalStorageSnapshotCommandArchive) Reset() {
	*x = CreateLocalStorageSnapshotCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateLocalStorageSnapshotCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLocalStorageSnapshotCommandArchive) ProtoMessage() {}

func (x *CreateLocalStorageSnapshotCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLocalStorageSnapshotCommandArchive.ProtoReflect.Descriptor instead.
func (*CreateLocalStorageSnapshotCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{46}
}

func (x *CreateLocalStorageSnapshotCommandArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CreateLocalStorageSnapshotCommandArchive) GetSnapshotId() string {
	if x != nil && x.SnapshotId != nil {
		return *x.SnapshotId
	}
	return ""
}

type BlockDiffsAtCurrentRevisionCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *CommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
}

func (x *BlockDiffsAtCurrentRevisionCommand) Reset() {
	*x = BlockDiffsAtCurrentRevisionCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockDiffsAtCurrentRevisionCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockDiffsAtCurrentRevisionCommand) ProtoMessage() {}

func (x *BlockDiffsAtCurrentRevisionCommand) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockDiffsAtCurrentRevisionCommand.ProtoReflect.Descriptor instead.
func (*BlockDiffsAtCurrentRevisionCommand) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{47}
}

func (x *BlockDiffsAtCurrentRevisionCommand) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

type RangeAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressIdentifier []uint64 `protobuf:"varint,1,rep,name=address_identifier,json=addressIdentifier" json:"address_identifier,omitempty"`
	RangeList         []uint32 `protobuf:"varint,2,rep,name=range_list,json=rangeList" json:"range_list,omitempty"`
}

func (x *RangeAddress) Reset() {
	*x = RangeAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RangeAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RangeAddress) ProtoMessage() {}

func (x *RangeAddress) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RangeAddress.ProtoReflect.Descriptor instead.
func (*RangeAddress) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{48}
}

func (x *RangeAddress) GetAddressIdentifier() []uint64 {
	if x != nil {
		return x.AddressIdentifier
	}
	return nil
}

func (x *RangeAddress) GetRangeList() []uint32 {
	if x != nil {
		return x.RangeList
	}
	return nil
}

type Operation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                          *Operation_OperationType `protobuf:"varint,1,opt,name=type,enum=TSK.Operation_OperationType,def=6" json:"type,omitempty"`
	Noop                          *bool                    `protobuf:"varint,2,opt,name=noop,def=0" json:"noop,omitempty"`
	AddressIdentifier             []uint64                 `protobuf:"fixed64,3,rep,packed,name=address_identifier,json=addressIdentifier" json:"address_identifier,omitempty"`
	InsertLength                  *uint64                  `protobuf:"varint,4,opt,name=insert_length,json=insertLength,def=1" json:"insert_length,omitempty"`
	PreserveLowerPriorityLocation *bool                    `protobuf:"varint,5,opt,name=preserve_lower_priority_location,json=preserveLowerPriorityLocation,def=0" json:"preserve_lower_priority_location,omitempty"`
	RangeList                     []uint32                 `protobuf:"varint,6,rep,packed,name=range_list,json=rangeList" json:"range_list,omitempty"`
	TransformBehavior             *uint32                  `protobuf:"varint,7,opt,name=transform_behavior,json=transformBehavior,def=7" json:"transform_behavior,omitempty"`
	PropertyId                    *uint32                  `protobuf:"varint,8,opt,name=property_id,json=propertyId" json:"property_id,omitempty"`
	FromIndex                     *int32                   `protobuf:"varint,9,opt,name=from_index,json=fromIndex,def=-1" json:"from_index,omitempty"`
	ToIndex                       *int32                   `protobuf:"varint,10,opt,name=to_index,json=toIndex,def=-1" json:"to_index,omitempty"`
	Dominating                    *bool                    `protobuf:"varint,11,opt,name=dominating,def=0" json:"dominating,omitempty"`
	ObjectCount                   *int32                   `protobuf:"varint,12,opt,name=object_count,json=objectCount,def=-1" json:"object_count,omitempty"`
	ObjectCounterSpace            *int32                   `protobuf:"varint,13,opt,name=object_counter_space,json=objectCounterSpace,def=0" json:"object_counter_space,omitempty"`
}

// Default values for Operation fields.
const (
	Default_Operation_Type                          = Operation_ReplaceRange
	Default_Operation_Noop                          = bool(false)
	Default_Operation_InsertLength                  = uint64(1)
	Default_Operation_PreserveLowerPriorityLocation = bool(false)
	Default_Operation_TransformBehavior             = uint32(7)
	Default_Operation_FromIndex                     = int32(-1)
	Default_Operation_ToIndex                       = int32(-1)
	Default_Operation_Dominating                    = bool(false)
	Default_Operation_ObjectCount                   = int32(-1)
	Default_Operation_ObjectCounterSpace            = int32(0)
)

func (x *Operation) Reset() {
	*x = Operation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operation) ProtoMessage() {}

func (x *Operation) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operation.ProtoReflect.Descriptor instead.
func (*Operation) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{49}
}

func (x *Operation) GetType() Operation_OperationType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_Operation_Type
}

func (x *Operation) GetNoop() bool {
	if x != nil && x.Noop != nil {
		return *x.Noop
	}
	return Default_Operation_Noop
}

func (x *Operation) GetAddressIdentifier() []uint64 {
	if x != nil {
		return x.AddressIdentifier
	}
	return nil
}

func (x *Operation) GetInsertLength() uint64 {
	if x != nil && x.InsertLength != nil {
		return *x.InsertLength
	}
	return Default_Operation_InsertLength
}

func (x *Operation) GetPreserveLowerPriorityLocation() bool {
	if x != nil && x.PreserveLowerPriorityLocation != nil {
		return *x.PreserveLowerPriorityLocation
	}
	return Default_Operation_PreserveLowerPriorityLocation
}

func (x *Operation) GetRangeList() []uint32 {
	if x != nil {
		return x.RangeList
	}
	return nil
}

func (x *Operation) GetTransformBehavior() uint32 {
	if x != nil && x.TransformBehavior != nil {
		return *x.TransformBehavior
	}
	return Default_Operation_TransformBehavior
}

func (x *Operation) GetPropertyId() uint32 {
	if x != nil && x.PropertyId != nil {
		return *x.PropertyId
	}
	return 0
}

func (x *Operation) GetFromIndex() int32 {
	if x != nil && x.FromIndex != nil {
		return *x.FromIndex
	}
	return Default_Operation_FromIndex
}

func (x *Operation) GetToIndex() int32 {
	if x != nil && x.ToIndex != nil {
		return *x.ToIndex
	}
	return Default_Operation_ToIndex
}

func (x *Operation) GetDominating() bool {
	if x != nil && x.Dominating != nil {
		return *x.Dominating
	}
	return Default_Operation_Dominating
}

func (x *Operation) GetObjectCount() int32 {
	if x != nil && x.ObjectCount != nil {
		return *x.ObjectCount
	}
	return Default_Operation_ObjectCount
}

func (x *Operation) GetObjectCounterSpace() int32 {
	if x != nil && x.ObjectCounterSpace != nil {
		return *x.ObjectCounterSpace
	}
	return Default_Operation_ObjectCounterSpace
}

type OperationTransformer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HigherPriority *bool        `protobuf:"varint,1,req,name=higher_priority,json=higherPriority" json:"higher_priority,omitempty"`
	Operations     []*Operation `protobuf:"bytes,2,rep,name=operations" json:"operations,omitempty"`
}

func (x *OperationTransformer) Reset() {
	*x = OperationTransformer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationTransformer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationTransformer) ProtoMessage() {}

func (x *OperationTransformer) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationTransformer.ProtoReflect.Descriptor instead.
func (*OperationTransformer) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{50}
}

func (x *OperationTransformer) GetHigherPriority() bool {
	if x != nil && x.HigherPriority != nil {
		return *x.HigherPriority
	}
	return false
}

func (x *OperationTransformer) GetOperations() []*Operation {
	if x != nil {
		return x.Operations
	}
	return nil
}

type TransformerEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sequence     *uint64               `protobuf:"varint,1,req,name=sequence" json:"sequence,omitempty"`
	CreationTime *float64              `protobuf:"fixed64,2,req,name=creation_time,json=creationTime" json:"creation_time,omitempty"`
	Transformer  *OperationTransformer `protobuf:"bytes,3,req,name=transformer" json:"transformer,omitempty"`
}

func (x *TransformerEntry) Reset() {
	*x = TransformerEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransformerEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransformerEntry) ProtoMessage() {}

func (x *TransformerEntry) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransformerEntry.ProtoReflect.Descriptor instead.
func (*TransformerEntry) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{51}
}

func (x *TransformerEntry) GetSequence() uint64 {
	if x != nil && x.Sequence != nil {
		return *x.Sequence
	}
	return 0
}

func (x *TransformerEntry) GetCreationTime() float64 {
	if x != nil && x.CreationTime != nil {
		return *x.CreationTime
	}
	return 0
}

func (x *TransformerEntry) GetTransformer() *OperationTransformer {
	if x != nil {
		return x.Transformer
	}
	return nil
}

type OutgoingCommandQueueItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command                                      *Reference                                    `protobuf:"bytes,1,opt,name=command" json:"command,omitempty"`
	SerializedJsonWithoutDataBase64EncodedString *string                                       `protobuf:"bytes,2,opt,name=serialized_json_without_data_base64_encoded_string,json=serializedJsonWithoutDataBase64EncodedString" json:"serialized_json_without_data_base64_encoded_string,omitempty"`
	SerializedJsonWithoutDataBase64EncodedData   *DataReference                                `protobuf:"bytes,4,opt,name=serialized_json_without_data_base64_encoded_data,json=serializedJsonWithoutDataBase64EncodedData" json:"serialized_json_without_data_base64_encoded_data,omitempty"`
	UuidToDataMapEntries                         []*OutgoingCommandQueueItemUUIDToDataMapEntry `protobuf:"bytes,3,rep,name=uuid_to_data_map_entries,json=uuidToDataMapEntries" json:"uuid_to_data_map_entries,omitempty"`
	LargeDataList                                []*DataReference                              `protobuf:"bytes,5,rep,name=large_data_list,json=largeDataList" json:"large_data_list,omitempty"`
}

func (x *OutgoingCommandQueueItem) Reset() {
	*x = OutgoingCommandQueueItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutgoingCommandQueueItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutgoingCommandQueueItem) ProtoMessage() {}

func (x *OutgoingCommandQueueItem) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutgoingCommandQueueItem.ProtoReflect.Descriptor instead.
func (*OutgoingCommandQueueItem) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{52}
}

func (x *OutgoingCommandQueueItem) GetCommand() *Reference {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *OutgoingCommandQueueItem) GetSerializedJsonWithoutDataBase64EncodedString() string {
	if x != nil && x.SerializedJsonWithoutDataBase64EncodedString != nil {
		return *x.SerializedJsonWithoutDataBase64EncodedString
	}
	return ""
}

func (x *OutgoingCommandQueueItem) GetSerializedJsonWithoutDataBase64EncodedData() *DataReference {
	if x != nil {
		return x.SerializedJsonWithoutDataBase64EncodedData
	}
	return nil
}

func (x *OutgoingCommandQueueItem) GetUuidToDataMapEntries() []*OutgoingCommandQueueItemUUIDToDataMapEntry {
	if x != nil {
		return x.UuidToDataMapEntries
	}
	return nil
}

func (x *OutgoingCommandQueueItem) GetLargeDataList() []*DataReference {
	if x != nil {
		return x.LargeDataList
	}
	return nil
}

type OutgoingCommandQueueItemUUIDToDataMapEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid *UUID          `protobuf:"bytes,1,req,name=uuid" json:"uuid,omitempty"`
	Data *DataReference `protobuf:"bytes,2,req,name=data" json:"data,omitempty"`
}

func (x *OutgoingCommandQueueItemUUIDToDataMapEntry) Reset() {
	*x = OutgoingCommandQueueItemUUIDToDataMapEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutgoingCommandQueueItemUUIDToDataMapEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutgoingCommandQueueItemUUIDToDataMapEntry) ProtoMessage() {}

func (x *OutgoingCommandQueueItemUUIDToDataMapEntry) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutgoingCommandQueueItemUUIDToDataMapEntry.ProtoReflect.Descriptor instead.
func (*OutgoingCommandQueueItemUUIDToDataMapEntry) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{53}
}

func (x *OutgoingCommandQueueItemUUIDToDataMapEntry) GetUuid() *UUID {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *OutgoingCommandQueueItemUUIDToDataMapEntry) GetData() *DataReference {
	if x != nil {
		return x.Data
	}
	return nil
}

type CollaborationDocumentSessionState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollaboratorIds                                             []string                                                          `protobuf:"bytes,1,rep,name=collaborator_ids,json=collaboratorIds" json:"collaborator_ids,omitempty"`
	RsvpCommandQueueItems                                       []*Reference                                                      `protobuf:"bytes,3,rep,name=rsvp_command_queue_items,json=rsvpCommandQueueItems" json:"rsvp_command_queue_items,omitempty"`
	CollaboratorCursorTransformerEntries                        []*Reference                                                      `protobuf:"bytes,4,rep,name=collaborator_cursor_transformer_entries,json=collaboratorCursorTransformerEntries" json:"collaborator_cursor_transformer_entries,omitempty"`
	AcknowledgedCommandsPendingResumeProcessDiffs               []*Reference                                                      `protobuf:"bytes,5,rep,name=acknowledged_commands_pending_resume_process_diffs,json=acknowledgedCommandsPendingResumeProcessDiffs" json:"acknowledged_commands_pending_resume_process_diffs,omitempty"`
	UnprocessedCommandsPendingResumeProcessDiffs                []*Reference                                                      `protobuf:"bytes,6,rep,name=unprocessed_commands_pending_resume_process_diffs,json=unprocessedCommandsPendingResumeProcessDiffs" json:"unprocessed_commands_pending_resume_process_diffs,omitempty"`
	CommandAcknowledgementObserverEntries                       []*CollaborationDocumentSessionState_AcknowledgementObserverEntry `protobuf:"bytes,7,rep,name=command_acknowledgement_observer_entries,json=commandAcknowledgementObserverEntries" json:"command_acknowledgement_observer_entries,omitempty"`
	TransformerFromUnprocessedCommandOperationsEntries          []*Reference                                                      `protobuf:"bytes,8,rep,name=transformer_from_unprocessed_command_operations_entries,json=transformerFromUnprocessedCommandOperationsEntries" json:"transformer_from_unprocessed_command_operations_entries,omitempty"`
	MailboxRequestDocumentRevisionSequence                      *int32                                                            `protobuf:"varint,10,opt,name=mailbox_request_document_revision_sequence,json=mailboxRequestDocumentRevisionSequence" json:"mailbox_request_document_revision_sequence,omitempty"`
	MailboxRequestDocumentRevisionIdentifier                    *UUID                                                             `protobuf:"bytes,11,opt,name=mailbox_request_document_revision_identifier,json=mailboxRequestDocumentRevisionIdentifier" json:"mailbox_request_document_revision_identifier,omitempty"`
	LastSendPendingCommandQueueItemWasMovedFromRsvpCommandQueue *bool                                                             `protobuf:"varint,12,opt,name=last_send_pending_command_queue_item_was_moved_from_rsvp_command_queue,json=lastSendPendingCommandQueueItemWasMovedFromRsvpCommandQueue,def=0" json:"last_send_pending_command_queue_item_was_moved_from_rsvp_command_queue,omitempty"`
	LastCommandSendMarkerSequence                               *int32                                                            `protobuf:"varint,13,opt,name=last_command_send_marker_sequence,json=lastCommandSendMarkerSequence" json:"last_command_send_marker_sequence,omitempty"`
	LastCommandSendMarkerIdentifier                             *UUID                                                             `protobuf:"bytes,14,opt,name=last_command_send_marker_identifier,json=lastCommandSendMarkerIdentifier" json:"last_command_send_marker_identifier,omitempty"`
	SkippedAcknowledgedCommandsPendingResumeProcessDiffs        []*Reference                                                      `protobuf:"bytes,15,rep,name=skipped_acknowledged_commands_pending_resume_process_diffs,json=skippedAcknowledgedCommandsPendingResumeProcessDiffs" json:"skipped_acknowledged_commands_pending_resume_process_diffs,omitempty"`
	LastTooOldCommandIdentifier                                 *UUID                                                             `protobuf:"bytes,16,opt,name=last_too_old_command_identifier,json=lastTooOldCommandIdentifier" json:"last_too_old_command_identifier,omitempty"`
	UnprocessedOperationEntriesPendingResumeProcessDiffs        *Reference                                                        `protobuf:"bytes,17,opt,name=unprocessed_operation_entries_pending_resume_process_diffs,json=unprocessedOperationEntriesPendingResumeProcessDiffs" json:"unprocessed_operation_entries_pending_resume_process_diffs,omitempty"`
	SendPendingCommandQueue                                     *Reference                                                        `protobuf:"bytes,18,opt,name=send_pending_command_queue,json=sendPendingCommandQueue" json:"send_pending_command_queue,omitempty"`
	CountOfSendPendingCommandQueueItemsMovedFromRsvpQueue       *uint64                                                           `protobuf:"varint,19,opt,name=count_of_send_pending_command_queue_items_moved_from_rsvp_queue,json=countOfSendPendingCommandQueueItemsMovedFromRsvpQueue,def=0" json:"count_of_send_pending_command_queue_items_moved_from_rsvp_queue,omitempty"`
	LastEnqueuedDocumentLoadCommandIdentifier                   *UUID                                                             `protobuf:"bytes,20,opt,name=last_enqueued_document_load_command_identifier,json=lastEnqueuedDocumentLoadCommandIdentifier" json:"last_enqueued_document_load_command_identifier,omitempty"`
}

// Default values for CollaborationDocumentSessionState fields.
const (
	Default_CollaborationDocumentSessionState_LastSendPendingCommandQueueItemWasMovedFromRsvpCommandQueue = bool(false)
	Default_CollaborationDocumentSessionState_CountOfSendPendingCommandQueueItemsMovedFromRsvpQueue       = uint64(0)
)

func (x *CollaborationDocumentSessionState) Reset() {
	*x = CollaborationDocumentSessionState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollaborationDocumentSessionState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollaborationDocumentSessionState) ProtoMessage() {}

func (x *CollaborationDocumentSessionState) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollaborationDocumentSessionState.ProtoReflect.Descriptor instead.
func (*CollaborationDocumentSessionState) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{54}
}

func (x *CollaborationDocumentSessionState) GetCollaboratorIds() []string {
	if x != nil {
		return x.CollaboratorIds
	}
	return nil
}

func (x *CollaborationDocumentSessionState) GetRsvpCommandQueueItems() []*Reference {
	if x != nil {
		return x.RsvpCommandQueueItems
	}
	return nil
}

func (x *CollaborationDocumentSessionState) GetCollaboratorCursorTransformerEntries() []*Reference {
	if x != nil {
		return x.CollaboratorCursorTransformerEntries
	}
	return nil
}

func (x *CollaborationDocumentSessionState) GetAcknowledgedCommandsPendingResumeProcessDiffs() []*Reference {
	if x != nil {
		return x.AcknowledgedCommandsPendingResumeProcessDiffs
	}
	return nil
}

func (x *CollaborationDocumentSessionState) GetUnprocessedCommandsPendingResumeProcessDiffs() []*Reference {
	if x != nil {
		return x.UnprocessedCommandsPendingResumeProcessDiffs
	}
	return nil
}

func (x *CollaborationDocumentSessionState) GetCommandAcknowledgementObserverEntries() []*CollaborationDocumentSessionState_AcknowledgementObserverEntry {
	if x != nil {
		return x.CommandAcknowledgementObserverEntries
	}
	return nil
}

func (x *CollaborationDocumentSessionState) GetTransformerFromUnprocessedCommandOperationsEntries() []*Reference {
	if x != nil {
		return x.TransformerFromUnprocessedCommandOperationsEntries
	}
	return nil
}

func (x *CollaborationDocumentSessionState) GetMailboxRequestDocumentRevisionSequence() int32 {
	if x != nil && x.MailboxRequestDocumentRevisionSequence != nil {
		return *x.MailboxRequestDocumentRevisionSequence
	}
	return 0
}

func (x *CollaborationDocumentSessionState) GetMailboxRequestDocumentRevisionIdentifier() *UUID {
	if x != nil {
		return x.MailboxRequestDocumentRevisionIdentifier
	}
	return nil
}

func (x *CollaborationDocumentSessionState) GetLastSendPendingCommandQueueItemWasMovedFromRsvpCommandQueue() bool {
	if x != nil && x.LastSendPendingCommandQueueItemWasMovedFromRsvpCommandQueue != nil {
		return *x.LastSendPendingCommandQueueItemWasMovedFromRsvpCommandQueue
	}
	return Default_CollaborationDocumentSessionState_LastSendPendingCommandQueueItemWasMovedFromRsvpCommandQueue
}

func (x *CollaborationDocumentSessionState) GetLastCommandSendMarkerSequence() int32 {
	if x != nil && x.LastCommandSendMarkerSequence != nil {
		return *x.LastCommandSendMarkerSequence
	}
	return 0
}

func (x *CollaborationDocumentSessionState) GetLastCommandSendMarkerIdentifier() *UUID {
	if x != nil {
		return x.LastCommandSendMarkerIdentifier
	}
	return nil
}

func (x *CollaborationDocumentSessionState) GetSkippedAcknowledgedCommandsPendingResumeProcessDiffs() []*Reference {
	if x != nil {
		return x.SkippedAcknowledgedCommandsPendingResumeProcessDiffs
	}
	return nil
}

func (x *CollaborationDocumentSessionState) GetLastTooOldCommandIdentifier() *UUID {
	if x != nil {
		return x.LastTooOldCommandIdentifier
	}
	return nil
}

func (x *CollaborationDocumentSessionState) GetUnprocessedOperationEntriesPendingResumeProcessDiffs() *Reference {
	if x != nil {
		return x.UnprocessedOperationEntriesPendingResumeProcessDiffs
	}
	return nil
}

func (x *CollaborationDocumentSessionState) GetSendPendingCommandQueue() *Reference {
	if x != nil {
		return x.SendPendingCommandQueue
	}
	return nil
}

func (x *CollaborationDocumentSessionState) GetCountOfSendPendingCommandQueueItemsMovedFromRsvpQueue() uint64 {
	if x != nil && x.CountOfSendPendingCommandQueueItemsMovedFromRsvpQueue != nil {
		return *x.CountOfSendPendingCommandQueueItemsMovedFromRsvpQueue
	}
	return Default_CollaborationDocumentSessionState_CountOfSendPendingCommandQueueItemsMovedFromRsvpQueue
}

func (x *CollaborationDocumentSessionState) GetLastEnqueuedDocumentLoadCommandIdentifier() *UUID {
	if x != nil {
		return x.LastEnqueuedDocumentLoadCommandIdentifier
	}
	return nil
}

type NativeContentDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppName              *string      `protobuf:"bytes,1,opt,name=app_name,json=appName" json:"app_name,omitempty"`
	AppVersion           *string      `protobuf:"bytes,2,opt,name=app_version,json=appVersion" json:"app_version,omitempty"`
	DocumentId           *string      `protobuf:"bytes,3,opt,name=document_id,json=documentId" json:"document_id,omitempty"`
	DrawableDescriptions []*Reference `protobuf:"bytes,4,rep,name=drawable_descriptions,json=drawableDescriptions" json:"drawable_descriptions,omitempty"`
}

func (x *NativeContentDescription) Reset() {
	*x = NativeContentDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NativeContentDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NativeContentDescription) ProtoMessage() {}

func (x *NativeContentDescription) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NativeContentDescription.ProtoReflect.Descriptor instead.
func (*NativeContentDescription) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{55}
}

func (x *NativeContentDescription) GetAppName() string {
	if x != nil && x.AppName != nil {
		return *x.AppName
	}
	return ""
}

func (x *NativeContentDescription) GetAppVersion() string {
	if x != nil && x.AppVersion != nil {
		return *x.AppVersion
	}
	return ""
}

func (x *NativeContentDescription) GetDocumentId() string {
	if x != nil && x.DocumentId != nil {
		return *x.DocumentId
	}
	return ""
}

func (x *NativeContentDescription) GetDrawableDescriptions() []*Reference {
	if x != nil {
		return x.DrawableDescriptions
	}
	return nil
}

type StructuredTextImportSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                    *StructuredTextImportType `protobuf:"varint,1,req,name=type,enum=TSK.StructuredTextImportType" json:"type,omitempty"`
	StartingRow             *int32                    `protobuf:"varint,2,req,name=starting_row,json=startingRow" json:"starting_row,omitempty"`
	DecimalSeparators       []string                  `protobuf:"bytes,3,rep,name=decimal_separators,json=decimalSeparators" json:"decimal_separators,omitempty"`
	ThousandsSeparators     []string                  `protobuf:"bytes,4,rep,name=thousands_separators,json=thousandsSeparators" json:"thousands_separators,omitempty"`
	TransposeRowsAndColumns *bool                     `protobuf:"varint,5,opt,name=transpose_rows_and_columns,json=transposeRowsAndColumns" json:"transpose_rows_and_columns,omitempty"`
	Delimiters              []string                  `protobuf:"bytes,6,rep,name=delimiters" json:"delimiters,omitempty"`
	TextQualifiers          []string                  `protobuf:"bytes,7,rep,name=text_qualifiers,json=textQualifiers" json:"text_qualifiers,omitempty"`
	CollapseConsecutive     *bool                     `protobuf:"varint,8,opt,name=collapse_consecutive,json=collapseConsecutive" json:"collapse_consecutive,omitempty"`
	ColumnOffsets           *IndexSet                 `protobuf:"bytes,9,opt,name=column_offsets,json=columnOffsets" json:"column_offsets,omitempty"`
	AutomaticDelimiters     *bool                     `protobuf:"varint,10,opt,name=automatic_delimiters,json=automaticDelimiters" json:"automatic_delimiters,omitempty"`
	AutomaticOffsets        *bool                     `protobuf:"varint,11,opt,name=automatic_offsets,json=automaticOffsets" json:"automatic_offsets,omitempty"`
	SourceEncoding          *uint64                   `protobuf:"varint,12,opt,name=source_encoding,json=sourceEncoding" json:"source_encoding,omitempty"`
}

func (x *StructuredTextImportSettings) Reset() {
	*x = StructuredTextImportSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructuredTextImportSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructuredTextImportSettings) ProtoMessage() {}

func (x *StructuredTextImportSettings) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructuredTextImportSettings.ProtoReflect.Descriptor instead.
func (*StructuredTextImportSettings) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{56}
}

func (x *StructuredTextImportSettings) GetType() StructuredTextImportType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return StructuredTextImportType_ImportType_UNKNOWN
}

func (x *StructuredTextImportSettings) GetStartingRow() int32 {
	if x != nil && x.StartingRow != nil {
		return *x.StartingRow
	}
	return 0
}

func (x *StructuredTextImportSettings) GetDecimalSeparators() []string {
	if x != nil {
		return x.DecimalSeparators
	}
	return nil
}

func (x *StructuredTextImportSettings) GetThousandsSeparators() []string {
	if x != nil {
		return x.ThousandsSeparators
	}
	return nil
}

func (x *StructuredTextImportSettings) GetTransposeRowsAndColumns() bool {
	if x != nil && x.TransposeRowsAndColumns != nil {
		return *x.TransposeRowsAndColumns
	}
	return false
}

func (x *StructuredTextImportSettings) GetDelimiters() []string {
	if x != nil {
		return x.Delimiters
	}
	return nil
}

func (x *StructuredTextImportSettings) GetTextQualifiers() []string {
	if x != nil {
		return x.TextQualifiers
	}
	return nil
}

func (x *StructuredTextImportSettings) GetCollapseConsecutive() bool {
	if x != nil && x.CollapseConsecutive != nil {
		return *x.CollapseConsecutive
	}
	return false
}

func (x *StructuredTextImportSettings) GetColumnOffsets() *IndexSet {
	if x != nil {
		return x.ColumnOffsets
	}
	return nil
}

func (x *StructuredTextImportSettings) GetAutomaticDelimiters() bool {
	if x != nil && x.AutomaticDelimiters != nil {
		return *x.AutomaticDelimiters
	}
	return false
}

func (x *StructuredTextImportSettings) GetAutomaticOffsets() bool {
	if x != nil && x.AutomaticOffsets != nil {
		return *x.AutomaticOffsets
	}
	return false
}

func (x *StructuredTextImportSettings) GetSourceEncoding() uint64 {
	if x != nil && x.SourceEncoding != nil {
		return *x.SourceEncoding
	}
	return 0
}

type OperationStorageCommandOperationsEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommandIdentifierSameAsRevisionIdentifier *bool        `protobuf:"varint,1,opt,name=command_identifier_same_as_revision_identifier,json=commandIdentifierSameAsRevisionIdentifier" json:"command_identifier_same_as_revision_identifier,omitempty"`
	CommandIdentifier                         []uint64     `protobuf:"fixed64,2,rep,packed,name=command_identifier,json=commandIdentifier" json:"command_identifier,omitempty"`
	Operations                                []*Operation `protobuf:"bytes,3,rep,name=operations" json:"operations,omitempty"`
	ServerOriginated                          *bool        `protobuf:"varint,4,opt,name=server_originated,json=serverOriginated" json:"server_originated,omitempty"`
	CoalescedCommandEntryCount                *uint64      `protobuf:"varint,5,opt,name=coalesced_command_entry_count,json=coalescedCommandEntryCount" json:"coalesced_command_entry_count,omitempty"`
}

func (x *OperationStorageCommandOperationsEntry) Reset() {
	*x = OperationStorageCommandOperationsEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationStorageCommandOperationsEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationStorageCommandOperationsEntry) ProtoMessage() {}

func (x *OperationStorageCommandOperationsEntry) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationStorageCommandOperationsEntry.ProtoReflect.Descriptor instead.
func (*OperationStorageCommandOperationsEntry) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{57}
}

func (x *OperationStorageCommandOperationsEntry) GetCommandIdentifierSameAsRevisionIdentifier() bool {
	if x != nil && x.CommandIdentifierSameAsRevisionIdentifier != nil {
		return *x.CommandIdentifierSameAsRevisionIdentifier
	}
	return false
}

func (x *OperationStorageCommandOperationsEntry) GetCommandIdentifier() []uint64 {
	if x != nil {
		return x.CommandIdentifier
	}
	return nil
}

func (x *OperationStorageCommandOperationsEntry) GetOperations() []*Operation {
	if x != nil {
		return x.Operations
	}
	return nil
}

func (x *OperationStorageCommandOperationsEntry) GetServerOriginated() bool {
	if x != nil && x.ServerOriginated != nil {
		return *x.ServerOriginated
	}
	return false
}

func (x *OperationStorageCommandOperationsEntry) GetCoalescedCommandEntryCount() uint64 {
	if x != nil && x.CoalescedCommandEntryCount != nil {
		return *x.CoalescedCommandEntryCount
	}
	return 0
}

type OperationStorageEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocumentRevisionIdentifier    []uint64                                  `protobuf:"fixed64,1,rep,packed,name=document_revision_identifier,json=documentRevisionIdentifier" json:"document_revision_identifier,omitempty"`
	DocumentRevisionSequenceDelta *int32                                    `protobuf:"varint,2,opt,name=document_revision_sequence_delta,json=documentRevisionSequenceDelta" json:"document_revision_sequence_delta,omitempty"`
	CommandOperationEntries       []*OperationStorageCommandOperationsEntry `protobuf:"bytes,3,rep,name=command_operation_entries,json=commandOperationEntries" json:"command_operation_entries,omitempty"`
	FirstEntryCreationTime        *float64                                  `protobuf:"fixed64,4,opt,name=first_entry_creation_time,json=firstEntryCreationTime" json:"first_entry_creation_time,omitempty"`
	CreationTimeDiffBucket        *int32                                    `protobuf:"varint,5,opt,name=creation_time_diff_bucket,json=creationTimeDiffBucket" json:"creation_time_diff_bucket,omitempty"`
}

func (x *OperationStorageEntry) Reset() {
	*x = OperationStorageEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationStorageEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationStorageEntry) ProtoMessage() {}

func (x *OperationStorageEntry) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationStorageEntry.ProtoReflect.Descriptor instead.
func (*OperationStorageEntry) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{58}
}

func (x *OperationStorageEntry) GetDocumentRevisionIdentifier() []uint64 {
	if x != nil {
		return x.DocumentRevisionIdentifier
	}
	return nil
}

func (x *OperationStorageEntry) GetDocumentRevisionSequenceDelta() int32 {
	if x != nil && x.DocumentRevisionSequenceDelta != nil {
		return *x.DocumentRevisionSequenceDelta
	}
	return 0
}

func (x *OperationStorageEntry) GetCommandOperationEntries() []*OperationStorageCommandOperationsEntry {
	if x != nil {
		return x.CommandOperationEntries
	}
	return nil
}

func (x *OperationStorageEntry) GetFirstEntryCreationTime() float64 {
	if x != nil && x.FirstEntryCreationTime != nil {
		return *x.FirstEntryCreationTime
	}
	return 0
}

func (x *OperationStorageEntry) GetCreationTimeDiffBucket() int32 {
	if x != nil && x.CreationTimeDiffBucket != nil {
		return *x.CreationTimeDiffBucket
	}
	return 0
}

type OperationStorageEntryArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LargeArray *LargeArray `protobuf:"bytes,1,opt,name=large_array,json=largeArray" json:"large_array,omitempty"`
}

func (x *OperationStorageEntryArray) Reset() {
	*x = OperationStorageEntryArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationStorageEntryArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationStorageEntryArray) ProtoMessage() {}

func (x *OperationStorageEntryArray) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationStorageEntryArray.ProtoReflect.Descriptor instead.
func (*OperationStorageEntryArray) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{59}
}

func (x *OperationStorageEntryArray) GetLargeArray() *LargeArray {
	if x != nil {
		return x.LargeArray
	}
	return nil
}

type OperationStorageEntryArraySegment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LargeArraySegment                         *LargeArraySegment       `protobuf:"bytes,1,opt,name=large_array_segment,json=largeArraySegment" json:"large_array_segment,omitempty"`
	Elements                                  []*OperationStorageEntry `protobuf:"bytes,2,rep,name=elements" json:"elements,omitempty"`
	LastDocumentRevisionSequenceBeforeSegment *int32                   `protobuf:"varint,3,opt,name=last_document_revision_sequence_before_segment,json=lastDocumentRevisionSequenceBeforeSegment" json:"last_document_revision_sequence_before_segment,omitempty"`
	LastDocumentRevisionSequence              *int32                   `protobuf:"varint,4,opt,name=last_document_revision_sequence,json=lastDocumentRevisionSequence" json:"last_document_revision_sequence,omitempty"`
	SegmentFirstEntryCreationTime             *float64                 `protobuf:"fixed64,5,opt,name=segment_first_entry_creation_time,json=segmentFirstEntryCreationTime" json:"segment_first_entry_creation_time,omitempty"`
}

func (x *OperationStorageEntryArraySegment) Reset() {
	*x = OperationStorageEntryArraySegment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationStorageEntryArraySegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationStorageEntryArraySegment) ProtoMessage() {}

func (x *OperationStorageEntryArraySegment) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationStorageEntryArraySegment.ProtoReflect.Descriptor instead.
func (*OperationStorageEntryArraySegment) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{60}
}

func (x *OperationStorageEntryArraySegment) GetLargeArraySegment() *LargeArraySegment {
	if x != nil {
		return x.LargeArraySegment
	}
	return nil
}

func (x *OperationStorageEntryArraySegment) GetElements() []*OperationStorageEntry {
	if x != nil {
		return x.Elements
	}
	return nil
}

func (x *OperationStorageEntryArraySegment) GetLastDocumentRevisionSequenceBeforeSegment() int32 {
	if x != nil && x.LastDocumentRevisionSequenceBeforeSegment != nil {
		return *x.LastDocumentRevisionSequenceBeforeSegment
	}
	return 0
}

func (x *OperationStorageEntryArraySegment) GetLastDocumentRevisionSequence() int32 {
	if x != nil && x.LastDocumentRevisionSequence != nil {
		return *x.LastDocumentRevisionSequence
	}
	return 0
}

func (x *OperationStorageEntryArraySegment) GetSegmentFirstEntryCreationTime() float64 {
	if x != nil && x.SegmentFirstEntryCreationTime != nil {
		return *x.SegmentFirstEntryCreationTime
	}
	return 0
}

type OperationStorage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries                                                *Reference `protobuf:"bytes,1,req,name=entries" json:"entries,omitempty"`
	OperationCount                                         *uint64    `protobuf:"varint,2,req,name=operation_count,json=operationCount" json:"operation_count,omitempty"`
	LastDocumentRevisionSequence                           *int32     `protobuf:"varint,3,opt,name=last_document_revision_sequence,json=lastDocumentRevisionSequence" json:"last_document_revision_sequence,omitempty"`
	LastDocumentRevisionIdentifier                         []uint64   `protobuf:"fixed64,4,rep,packed,name=last_document_revision_identifier,json=lastDocumentRevisionIdentifier" json:"last_document_revision_identifier,omitempty"`
	LastUnskippableDocumentRevisionBeforeEntriesSequence   *int32     `protobuf:"varint,5,opt,name=last_unskippable_document_revision_before_entries_sequence,json=lastUnskippableDocumentRevisionBeforeEntriesSequence" json:"last_unskippable_document_revision_before_entries_sequence,omitempty"`
	LastUnskippableDocumentRevisionBeforeEntriesIdentifier []uint64   `protobuf:"fixed64,6,rep,packed,name=last_unskippable_document_revision_before_entries_identifier,json=lastUnskippableDocumentRevisionBeforeEntriesIdentifier" json:"last_unskippable_document_revision_before_entries_identifier,omitempty"`
	LastUnskippableDocumentRevisionInEntriesSequence       *int32     `protobuf:"varint,7,opt,name=last_unskippable_document_revision_in_entries_sequence,json=lastUnskippableDocumentRevisionInEntriesSequence" json:"last_unskippable_document_revision_in_entries_sequence,omitempty"`
	LastUnskippableDocumentRevisionInEntriesIdentifier     []uint64   `protobuf:"fixed64,8,rep,packed,name=last_unskippable_document_revision_in_entries_identifier,json=lastUnskippableDocumentRevisionInEntriesIdentifier" json:"last_unskippable_document_revision_in_entries_identifier,omitempty"`
	DaysWithAnEntry                                        *IndexSet  `protobuf:"bytes,9,opt,name=days_with_an_entry,json=daysWithAnEntry" json:"days_with_an_entry,omitempty"`
}

func (x *OperationStorage) Reset() {
	*x = OperationStorage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationStorage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationStorage) ProtoMessage() {}

func (x *OperationStorage) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationStorage.ProtoReflect.Descriptor instead.
func (*OperationStorage) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{61}
}

func (x *OperationStorage) GetEntries() *Reference {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *OperationStorage) GetOperationCount() uint64 {
	if x != nil && x.OperationCount != nil {
		return *x.OperationCount
	}
	return 0
}

func (x *OperationStorage) GetLastDocumentRevisionSequence() int32 {
	if x != nil && x.LastDocumentRevisionSequence != nil {
		return *x.LastDocumentRevisionSequence
	}
	return 0
}

func (x *OperationStorage) GetLastDocumentRevisionIdentifier() []uint64 {
	if x != nil {
		return x.LastDocumentRevisionIdentifier
	}
	return nil
}

func (x *OperationStorage) GetLastUnskippableDocumentRevisionBeforeEntriesSequence() int32 {
	if x != nil && x.LastUnskippableDocumentRevisionBeforeEntriesSequence != nil {
		return *x.LastUnskippableDocumentRevisionBeforeEntriesSequence
	}
	return 0
}

func (x *OperationStorage) GetLastUnskippableDocumentRevisionBeforeEntriesIdentifier() []uint64 {
	if x != nil {
		return x.LastUnskippableDocumentRevisionBeforeEntriesIdentifier
	}
	return nil
}

func (x *OperationStorage) GetLastUnskippableDocumentRevisionInEntriesSequence() int32 {
	if x != nil && x.LastUnskippableDocumentRevisionInEntriesSequence != nil {
		return *x.LastUnskippableDocumentRevisionInEntriesSequence
	}
	return 0
}

func (x *OperationStorage) GetLastUnskippableDocumentRevisionInEntriesIdentifier() []uint64 {
	if x != nil {
		return x.LastUnskippableDocumentRevisionInEntriesIdentifier
	}
	return nil
}

func (x *OperationStorage) GetDaysWithAnEntry() *IndexSet {
	if x != nil {
		return x.DaysWithAnEntry
	}
	return nil
}

type OutgoingCommandQueue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LargeObjectArray *LargeObjectArray `protobuf:"bytes,1,opt,name=large_object_array,json=largeObjectArray" json:"large_object_array,omitempty"`
}

func (x *OutgoingCommandQueue) Reset() {
	*x = OutgoingCommandQueue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutgoingCommandQueue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutgoingCommandQueue) ProtoMessage() {}

func (x *OutgoingCommandQueue) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutgoingCommandQueue.ProtoReflect.Descriptor instead.
func (*OutgoingCommandQueue) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{62}
}

func (x *OutgoingCommandQueue) GetLargeObjectArray() *LargeObjectArray {
	if x != nil {
		return x.LargeObjectArray
	}
	return nil
}

type OutgoingCommandQueueSegment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LargeObjectArraySegment *LargeObjectArraySegment `protobuf:"bytes,1,opt,name=large_object_array_segment,json=largeObjectArraySegment" json:"large_object_array_segment,omitempty"`
}

func (x *OutgoingCommandQueueSegment) Reset() {
	*x = OutgoingCommandQueueSegment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutgoingCommandQueueSegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutgoingCommandQueueSegment) ProtoMessage() {}

func (x *OutgoingCommandQueueSegment) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutgoingCommandQueueSegment.ProtoReflect.Descriptor instead.
func (*OutgoingCommandQueueSegment) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{63}
}

func (x *OutgoingCommandQueueSegment) GetLargeObjectArraySegment() *LargeObjectArraySegment {
	if x != nil {
		return x.LargeObjectArraySegment
	}
	return nil
}

type DataReferenceRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddedContainerUuidToReferencedDataPairs   []*DataReferenceRecord_ContainerUUIDToReferencedDataPair `protobuf:"bytes,1,rep,name=added_container_uuid_to_referenced_data_pairs,json=addedContainerUuidToReferencedDataPairs" json:"added_container_uuid_to_referenced_data_pairs,omitempty"`
	RemovedContainerUuidToReferencedDataPairs []*DataReferenceRecord_ContainerUUIDToReferencedDataPair `protobuf:"bytes,2,rep,name=removed_container_uuid_to_referenced_data_pairs,json=removedContainerUuidToReferencedDataPairs" json:"removed_container_uuid_to_referenced_data_pairs,omitempty"`
	UnboundedReferencedDatas                  []*DataReference                                         `protobuf:"bytes,3,rep,name=unbounded_referenced_datas,json=unboundedReferencedDatas" json:"unbounded_referenced_datas,omitempty"`
}

func (x *DataReferenceRecord) Reset() {
	*x = DataReferenceRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataReferenceRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataReferenceRecord) ProtoMessage() {}

func (x *DataReferenceRecord) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataReferenceRecord.ProtoReflect.Descriptor instead.
func (*DataReferenceRecord) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{64}
}

func (x *DataReferenceRecord) GetAddedContainerUuidToReferencedDataPairs() []*DataReferenceRecord_ContainerUUIDToReferencedDataPair {
	if x != nil {
		return x.AddedContainerUuidToReferencedDataPairs
	}
	return nil
}

func (x *DataReferenceRecord) GetRemovedContainerUuidToReferencedDataPairs() []*DataReferenceRecord_ContainerUUIDToReferencedDataPair {
	if x != nil {
		return x.RemovedContainerUuidToReferencedDataPairs
	}
	return nil
}

func (x *DataReferenceRecord) GetUnboundedReferencedDatas() []*DataReference {
	if x != nil {
		return x.UnboundedReferencedDatas
	}
	return nil
}

type CommandAssetChunkArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super              *CommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Digest             *string         `protobuf:"bytes,2,opt,name=digest" json:"digest,omitempty"`
	AssetChunk         *string         `protobuf:"bytes,3,opt,name=asset_chunk,json=assetChunk" json:"asset_chunk,omitempty"`
	AssetChunkLength   *int64          `protobuf:"varint,4,req,name=asset_chunk_length,json=assetChunkLength" json:"asset_chunk_length,omitempty"`
	ResumePosition     *int64          `protobuf:"varint,5,req,name=resume_position,json=resumePosition" json:"resume_position,omitempty"`
	MaterializedLength *int64          `protobuf:"varint,6,req,name=materialized_length,json=materializedLength" json:"materialized_length,omitempty"`
}

func (x *CommandAssetChunkArchive) Reset() {
	*x = CommandAssetChunkArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandAssetChunkArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandAssetChunkArchive) ProtoMessage() {}

func (x *CommandAssetChunkArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandAssetChunkArchive.ProtoReflect.Descriptor instead.
func (*CommandAssetChunkArchive) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{65}
}

func (x *CommandAssetChunkArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandAssetChunkArchive) GetDigest() string {
	if x != nil && x.Digest != nil {
		return *x.Digest
	}
	return ""
}

func (x *CommandAssetChunkArchive) GetAssetChunk() string {
	if x != nil && x.AssetChunk != nil {
		return *x.AssetChunk
	}
	return ""
}

func (x *CommandAssetChunkArchive) GetAssetChunkLength() int64 {
	if x != nil && x.AssetChunkLength != nil {
		return *x.AssetChunkLength
	}
	return 0
}

func (x *CommandAssetChunkArchive) GetResumePosition() int64 {
	if x != nil && x.ResumePosition != nil {
		return *x.ResumePosition
	}
	return 0
}

func (x *CommandAssetChunkArchive) GetMaterializedLength() int64 {
	if x != nil && x.MaterializedLength != nil {
		return *x.MaterializedLength
	}
	return 0
}

type AssetUploadStatusCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super    *CommandArchive                                          `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	InfoList []*AssetUploadStatusCommandArchive_AssetUploadStatusInfo `protobuf:"bytes,2,rep,name=info_list,json=infoList" json:"info_list,omitempty"`
}

func (x *AssetUploadStatusCommandArchive) Reset() {
	*x = AssetUploadStatusCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetUploadStatusCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetUploadStatusCommandArchive) ProtoMessage() {}

func (x *AssetUploadStatusCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetUploadStatusCommandArchive.ProtoReflect.Descriptor instead.
func (*AssetUploadStatusCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{66}
}

func (x *AssetUploadStatusCommandArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *AssetUploadStatusCommandArchive) GetInfoList() []*AssetUploadStatusCommandArchive_AssetUploadStatusInfo {
	if x != nil {
		return x.InfoList
	}
	return nil
}

type AssetUnmaterializedOnServerCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super      *CommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	DigestList []string        `protobuf:"bytes,2,rep,name=digest_list,json=digestList" json:"digest_list,omitempty"`
}

func (x *AssetUnmaterializedOnServerCommandArchive) Reset() {
	*x = AssetUnmaterializedOnServerCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetUnmaterializedOnServerCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetUnmaterializedOnServerCommandArchive) ProtoMessage() {}

func (x *AssetUnmaterializedOnServerCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetUnmaterializedOnServerCommandArchive.ProtoReflect.Descriptor instead.
func (*AssetUnmaterializedOnServerCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{67}
}

func (x *AssetUnmaterializedOnServerCommandArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *AssetUnmaterializedOnServerCommandArchive) GetDigestList() []string {
	if x != nil {
		return x.DigestList
	}
	return nil
}

type PencilAnnotationUIState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentToolType        *PencilAnnotationUIState_PencilAnnotationToolType `protobuf:"varint,1,opt,name=current_tool_type,json=currentToolType,enum=TSK.PencilAnnotationUIState_PencilAnnotationToolType,def=0" json:"current_tool_type,omitempty"`
	PenToolColor           *Color                                            `protobuf:"bytes,2,opt,name=pen_tool_color,json=penToolColor" json:"pen_tool_color,omitempty"`
	PenToolOpacity         *float32                                          `protobuf:"fixed32,3,opt,name=pen_tool_opacity,json=penToolOpacity" json:"pen_tool_opacity,omitempty"`
	PenToolWidth           *float32                                          `protobuf:"fixed32,4,opt,name=pen_tool_width,json=penToolWidth" json:"pen_tool_width,omitempty"`
	HighlighterToolColor   *Color                                            `protobuf:"bytes,5,opt,name=highlighter_tool_color,json=highlighterToolColor" json:"highlighter_tool_color,omitempty"`
	HighlighterToolOpacity *float32                                          `protobuf:"fixed32,6,opt,name=highlighter_tool_opacity,json=highlighterToolOpacity" json:"highlighter_tool_opacity,omitempty"`
	HighlighterToolWidth   *float32                                          `protobuf:"fixed32,7,opt,name=highlighter_tool_width,json=highlighterToolWidth" json:"highlighter_tool_width,omitempty"`
}

// Default values for PencilAnnotationUIState fields.
const (
	Default_PencilAnnotationUIState_CurrentToolType = PencilAnnotationUIState_Pen
)

func (x *PencilAnnotationUIState) Reset() {
	*x = PencilAnnotationUIState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PencilAnnotationUIState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PencilAnnotationUIState) ProtoMessage() {}

func (x *PencilAnnotationUIState) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PencilAnnotationUIState.ProtoReflect.Descriptor instead.
func (*PencilAnnotationUIState) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{68}
}

func (x *PencilAnnotationUIState) GetCurrentToolType() PencilAnnotationUIState_PencilAnnotationToolType {
	if x != nil && x.CurrentToolType != nil {
		return *x.CurrentToolType
	}
	return Default_PencilAnnotationUIState_CurrentToolType
}

func (x *PencilAnnotationUIState) GetPenToolColor() *Color {
	if x != nil {
		return x.PenToolColor
	}
	return nil
}

func (x *PencilAnnotationUIState) GetPenToolOpacity() float32 {
	if x != nil && x.PenToolOpacity != nil {
		return *x.PenToolOpacity
	}
	return 0
}

func (x *PencilAnnotationUIState) GetPenToolWidth() float32 {
	if x != nil && x.PenToolWidth != nil {
		return *x.PenToolWidth
	}
	return 0
}

func (x *PencilAnnotationUIState) GetHighlighterToolColor() *Color {
	if x != nil {
		return x.HighlighterToolColor
	}
	return nil
}

func (x *PencilAnnotationUIState) GetHighlighterToolOpacity() float32 {
	if x != nil && x.HighlighterToolOpacity != nil {
		return *x.HighlighterToolOpacity
	}
	return 0
}

func (x *PencilAnnotationUIState) GetHighlighterToolWidth() float32 {
	if x != nil && x.HighlighterToolWidth != nil {
		return *x.HighlighterToolWidth
	}
	return 0
}

type CollaborationCommandHistory_ItemList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemsArray         *Reference   `protobuf:"bytes,1,opt,name=items_array,json=itemsArray" json:"items_array,omitempty"`
	TransformerEntries []*Reference `protobuf:"bytes,2,rep,name=transformer_entries,json=transformerEntries" json:"transformer_entries,omitempty"`
}

func (x *CollaborationCommandHistory_ItemList) Reset() {
	*x = CollaborationCommandHistory_ItemList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollaborationCommandHistory_ItemList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollaborationCommandHistory_ItemList) ProtoMessage() {}

func (x *CollaborationCommandHistory_ItemList) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollaborationCommandHistory_ItemList.ProtoReflect.Descriptor instead.
func (*CollaborationCommandHistory_ItemList) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{7, 0}
}

func (x *CollaborationCommandHistory_ItemList) GetItemsArray() *Reference {
	if x != nil {
		return x.ItemsArray
	}
	return nil
}

func (x *CollaborationCommandHistory_ItemList) GetTransformerEntries() []*Reference {
	if x != nil {
		return x.TransformerEntries
	}
	return nil
}

type FormattingSymbolsArchive_CurrencySymbol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code   *string `protobuf:"bytes,1,req,name=code" json:"code,omitempty"`
	Symbol *string `protobuf:"bytes,2,req,name=symbol" json:"symbol,omitempty"`
}

func (x *FormattingSymbolsArchive_CurrencySymbol) Reset() {
	*x = FormattingSymbolsArchive_CurrencySymbol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormattingSymbolsArchive_CurrencySymbol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormattingSymbolsArchive_CurrencySymbol) ProtoMessage() {}

func (x *FormattingSymbolsArchive_CurrencySymbol) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormattingSymbolsArchive_CurrencySymbol.ProtoReflect.Descriptor instead.
func (*FormattingSymbolsArchive_CurrencySymbol) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{13, 0}
}

func (x *FormattingSymbolsArchive_CurrencySymbol) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

func (x *FormattingSymbolsArchive_CurrencySymbol) GetSymbol() string {
	if x != nil && x.Symbol != nil {
		return *x.Symbol
	}
	return ""
}

type CustomFormatArchive_Condition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConditionType     *uint32                 `protobuf:"varint,1,req,name=condition_type,json=conditionType" json:"condition_type,omitempty"`
	ConditionValue    *float32                `protobuf:"fixed32,2,opt,name=condition_value,json=conditionValue" json:"condition_value,omitempty"`
	ConditionFormat   *TSKFormatStructArchive `protobuf:"bytes,3,req,name=condition_format,json=conditionFormat" json:"condition_format,omitempty"`
	ConditionValueDbl *float64                `protobuf:"fixed64,4,opt,name=condition_value_dbl,json=conditionValueDbl" json:"condition_value_dbl,omitempty"`
}

func (x *CustomFormatArchive_Condition) Reset() {
	*x = CustomFormatArchive_Condition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomFormatArchive_Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomFormatArchive_Condition) ProtoMessage() {}

func (x *CustomFormatArchive_Condition) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomFormatArchive_Condition.ProtoReflect.Descriptor instead.
func (*CustomFormatArchive_Condition) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{25, 0}
}

func (x *CustomFormatArchive_Condition) GetConditionType() uint32 {
	if x != nil && x.ConditionType != nil {
		return *x.ConditionType
	}
	return 0
}

func (x *CustomFormatArchive_Condition) GetConditionValue() float32 {
	if x != nil && x.ConditionValue != nil {
		return *x.ConditionValue
	}
	return 0
}

func (x *CustomFormatArchive_Condition) GetConditionFormat() *TSKFormatStructArchive {
	if x != nil {
		return x.ConditionFormat
	}
	return nil
}

func (x *CustomFormatArchive_Condition) GetConditionValueDbl() float64 {
	if x != nil && x.ConditionValueDbl != nil {
		return *x.ConditionValueDbl
	}
	return 0
}

type CollaborationDocumentSessionState_AcknowledgementObserverEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommandIdentifier        *UUID        `protobuf:"bytes,1,req,name=command_identifier,json=commandIdentifier" json:"command_identifier,omitempty"`
	AcknowledgementObservers []*Reference `protobuf:"bytes,2,rep,name=acknowledgement_observers,json=acknowledgementObservers" json:"acknowledgement_observers,omitempty"`
}

func (x *CollaborationDocumentSessionState_AcknowledgementObserverEntry) Reset() {
	*x = CollaborationDocumentSessionState_AcknowledgementObserverEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollaborationDocumentSessionState_AcknowledgementObserverEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollaborationDocumentSessionState_AcknowledgementObserverEntry) ProtoMessage() {}

func (x *CollaborationDocumentSessionState_AcknowledgementObserverEntry) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollaborationDocumentSessionState_AcknowledgementObserverEntry.ProtoReflect.Descriptor instead.
func (*CollaborationDocumentSessionState_AcknowledgementObserverEntry) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{54, 0}
}

func (x *CollaborationDocumentSessionState_AcknowledgementObserverEntry) GetCommandIdentifier() *UUID {
	if x != nil {
		return x.CommandIdentifier
	}
	return nil
}

func (x *CollaborationDocumentSessionState_AcknowledgementObserverEntry) GetAcknowledgementObservers() []*Reference {
	if x != nil {
		return x.AcknowledgementObservers
	}
	return nil
}

type DataReferenceRecord_ContainerUUIDToReferencedDataPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerUuid  *UUID          `protobuf:"bytes,1,req,name=container_uuid,json=containerUuid" json:"container_uuid,omitempty"`
	ReferencedData *DataReference `protobuf:"bytes,2,req,name=referenced_data,json=referencedData" json:"referenced_data,omitempty"`
	ReferenceCount *uint32        `protobuf:"varint,3,req,name=reference_count,json=referenceCount" json:"reference_count,omitempty"`
}

func (x *DataReferenceRecord_ContainerUUIDToReferencedDataPair) Reset() {
	*x = DataReferenceRecord_ContainerUUIDToReferencedDataPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataReferenceRecord_ContainerUUIDToReferencedDataPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataReferenceRecord_ContainerUUIDToReferencedDataPair) ProtoMessage() {}

func (x *DataReferenceRecord_ContainerUUIDToReferencedDataPair) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataReferenceRecord_ContainerUUIDToReferencedDataPair.ProtoReflect.Descriptor instead.
func (*DataReferenceRecord_ContainerUUIDToReferencedDataPair) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{64, 0}
}

func (x *DataReferenceRecord_ContainerUUIDToReferencedDataPair) GetContainerUuid() *UUID {
	if x != nil {
		return x.ContainerUuid
	}
	return nil
}

func (x *DataReferenceRecord_ContainerUUIDToReferencedDataPair) GetReferencedData() *DataReference {
	if x != nil {
		return x.ReferencedData
	}
	return nil
}

func (x *DataReferenceRecord_ContainerUUIDToReferencedDataPair) GetReferenceCount() uint32 {
	if x != nil && x.ReferenceCount != nil {
		return *x.ReferenceCount
	}
	return 0
}

type AssetUploadStatusCommandArchive_AssetUploadStatusInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Digest       *string           `protobuf:"bytes,1,opt,name=digest" json:"digest,omitempty"`
	UploadStatus *DataUploadStatus `protobuf:"varint,2,opt,name=upload_status,json=uploadStatus,enum=TSP.DataUploadStatus" json:"upload_status,omitempty"`
}

func (x *AssetUploadStatusCommandArchive_AssetUploadStatusInfo) Reset() {
	*x = AssetUploadStatusCommandArchive_AssetUploadStatusInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSKArchives_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetUploadStatusCommandArchive_AssetUploadStatusInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetUploadStatusCommandArchive_AssetUploadStatusInfo) ProtoMessage() {}

func (x *AssetUploadStatusCommandArchive_AssetUploadStatusInfo) ProtoReflect() protoreflect.Message {
	mi := &file_TSKArchives_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetUploadStatusCommandArchive_AssetUploadStatusInfo.ProtoReflect.Descriptor instead.
func (*AssetUploadStatusCommandArchive_AssetUploadStatusInfo) Descriptor() ([]byte, []int) {
	return file_TSKArchives_proto_rawDescGZIP(), []int{66, 0}
}

func (x *AssetUploadStatusCommandArchive_AssetUploadStatusInfo) GetDigest() string {
	if x != nil && x.Digest != nil {
		return *x.Digest
	}
	return ""
}

func (x *AssetUploadStatusCommandArchive_AssetUploadStatusInfo) GetUploadStatus() DataUploadStatus {
	if x != nil && x.UploadStatus != nil {
		return *x.UploadStatus
	}
	return DataUploadStatus_DataUploadStatus_Pending
}

var File_TSKArchives_proto protoreflect.FileDescriptor

var file_TSKArchives_proto_rawDesc = []byte{
	0x0a, 0x11, 0x54, 0x53, 0x4b, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x03, 0x54, 0x53, 0x4b, 0x1a, 0x11, 0x54, 0x53, 0x50, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x72, 0x0a, 0x08, 0x54,
	0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x26, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22,
	0x82, 0x01, 0x0a, 0x17, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x28, 0x0a, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x3d, 0x0a, 0x12, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x11, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x22, 0x4c, 0x0a, 0x18, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x12, 0x30, 0x0a, 0x0b, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x4c, 0x61, 0x72, 0x67,
	0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x0a, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x22, 0x7c, 0x0a, 0x1f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x72, 0x72, 0x61, 0x79, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x59, 0x0a, 0x1a, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x73, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x4c, 0x61, 0x72, 0x67, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x17, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0x97, 0x01, 0x0a, 0x13, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x6e, 0x64, 0x6f,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x09, 0x75, 0x6e,
	0x64, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x0b, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x5f, 0x72, 0x61, 0x64, 0x61, 0x72, 0x5f, 0x31, 0x33, 0x33, 0x36, 0x35, 0x31, 0x37, 0x37,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x66, 0x69, 0x78, 0x65, 0x64, 0x52, 0x61, 0x64,
	0x61, 0x72, 0x31, 0x33, 0x33, 0x36, 0x35, 0x31, 0x37, 0x37, 0x22, 0x54, 0x0a, 0x20, 0x43, 0x6f,
	0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x30,
	0x0a, 0x0b, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x52, 0x0a, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x22, 0x84, 0x01, 0x0a, 0x27, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x59, 0x0a, 0x1a,
	0x6c, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x72, 0x72,
	0x61, 0x79, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x17,
	0x6c, 0x61, 0x72, 0x67, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xe5, 0x02, 0x0a, 0x1b, 0x43, 0x6f, 0x6c, 0x6c,
	0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x34, 0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0f, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x48, 0x0a,
	0x0a, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x75, 0x6e,
	0x64, 0x6f, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x48, 0x0a, 0x0a, 0x72, 0x65, 0x64, 0x6f, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x54, 0x53,
	0x4b, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x72, 0x65, 0x64, 0x6f, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x1a, 0x7c, 0x0a, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a,
	0x0b, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x3f,
	0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x5f, 0x65, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x12, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22,
	0x97, 0x02, 0x0a, 0x1f, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x28, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x3d, 0x0a, 0x12, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x11,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x12, 0x39, 0x0a, 0x10, 0x63, 0x6f, 0x61, 0x6c, 0x65, 0x73, 0x63, 0x69, 0x6e, 0x67, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x63, 0x6f, 0x61,
	0x6c, 0x65, 0x73, 0x63, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2b, 0x0a, 0x11,
	0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x2a, 0x43, 0x6f,
	0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x61, 0x6c, 0x65, 0x73, 0x63,
	0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x24, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x40,
	0x0a, 0x19, 0x64, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x61, 0x6c, 0x65, 0x73, 0x63, 0x65, 0x5f, 0x61,
	0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x16, 0x64, 0x69, 0x64, 0x43, 0x6f, 0x61,
	0x6c, 0x65, 0x73, 0x63, 0x65, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73,
	0x22, 0x5a, 0x0a, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43,
	0x6f, 0x61, 0x6c, 0x65, 0x73, 0x63, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0xa5, 0x01, 0x0a,
	0x44, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x63,
	0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x10, 0x63, 0x6f, 0x61, 0x6c, 0x65, 0x73, 0x63,
	0x69, 0x6e, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x0f, 0x63, 0x6f, 0x61, 0x6c, 0x65, 0x73, 0x63, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x22, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x04,
	0x6e, 0x6f, 0x64, 0x65, 0x22, 0x9b, 0x06, 0x0a, 0x12, 0x54, 0x53, 0x4b, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x19, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x17, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x14, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x12, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x45,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x20, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c,
	0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x2e, 0x0a, 0x13,
	0x68, 0x61, 0x73, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x68, 0x61, 0x73, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x17,
	0x68, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64,
	0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x68,
	0x61, 0x73, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x65, 0x12, 0x56, 0x0a, 0x1f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x1d, 0x63, 0x6f,
	0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x65, 0x0a, 0x30, 0x73,
	0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x6e, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x6c, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x6c, 0x79, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x2b, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x4d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x6c, 0x79, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x6c, 0x79, 0x12, 0x50, 0x0a, 0x25, 0x75, 0x73, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69,
	0x7a, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x5f, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x21, 0x75, 0x73, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x54,
	0x65, 0x78, 0x74, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x6c, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x12, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x11, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x73, 0x22, 0xce, 0x10, 0x0a, 0x18, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x6c,
	0x65, 0x6e, 0x64, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6c,
	0x65, 0x6e, 0x64, 0x61, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x10, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6d,
	0x6f, 0x6e, 0x74, 0x68, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x6f, 0x6e,
	0x74, 0x68, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x77, 0x65, 0x65, 0x6b, 0x64, 0x61, 0x79, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x77, 0x65, 0x65, 0x6b, 0x64, 0x61, 0x79, 0x73, 0x12, 0x2f, 0x0a, 0x13,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x64,
	0x61, 0x79, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x57, 0x65, 0x65, 0x6b, 0x64, 0x61, 0x79, 0x73, 0x12, 0x25, 0x0a,
	0x0e, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x64, 0x61, 0x79, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x57, 0x65, 0x65, 0x6b,
	0x64, 0x61, 0x79, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x6c, 0x6f,
	0x6e, 0x65, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x64, 0x61, 0x79,
	0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x17, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x6c,
	0x6f, 0x6e, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x64, 0x61, 0x79, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6d, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x6d, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x6d, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x6d, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69,
	0x6e, 0x79, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x74, 0x69, 0x6e, 0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x69, 0x6e, 0x79, 0x5f, 0x6d,
	0x6f, 0x6e, 0x74, 0x68, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x54, 0x69, 0x6e, 0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x68,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x69, 0x6e, 0x79, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x64, 0x61,
	0x79, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x69, 0x6e, 0x79, 0x57, 0x65,
	0x65, 0x6b, 0x64, 0x61, 0x79, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x6c, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x69, 0x6e, 0x79, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x64, 0x61,
	0x79, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x6c, 0x6f, 0x6e, 0x65, 0x54, 0x69, 0x6e, 0x79, 0x57, 0x65, 0x65, 0x6b, 0x64, 0x61, 0x79, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x73, 0x18, 0x12, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x71, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2f, 0x0a, 0x13,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x5f, 0x71, 0x75, 0x61, 0x72, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x51, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x73, 0x12, 0x25, 0x0a,
	0x0e, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x71, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x14, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x61, 0x72,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x6c, 0x6f,
	0x6e, 0x65, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x71, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x09, 0x52, 0x17, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x6c,
	0x6f, 0x6e, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x65, 0x72, 0x61, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x65, 0x72, 0x61, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x65, 0x72, 0x61,
	0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x6e, 0x67, 0x45, 0x72, 0x61,
	0x73, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12,
	0x2e, 0x0a, 0x13, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x65,
	0x64, 0x69, 0x75, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12,
	0x2a, 0x0a, 0x11, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x6f, 0x6e, 0x67,
	0x44, 0x61, 0x74, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x66,
	0x75, 0x6c, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x75, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x6c, 0x6f, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x75,
	0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x2b, 0x0a,
	0x11, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x12, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67,
	0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x1a, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x73, 0x65,
	0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x53, 0x65,
	0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3e, 0x0a, 0x1b, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x70,
	0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x75, 0x73, 0x5f,
	0x73, 0x69, 0x67, 0x6e, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x75, 0x73,
	0x53, 0x69, 0x67, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x75, 0x73, 0x5f, 0x73, 0x69,
	0x67, 0x6e, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x75, 0x73, 0x53,
	0x69, 0x67, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x65, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x65, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x65, 0x72,
	0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x65, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x65, 0x72, 0x4d, 0x69, 0x6c, 0x6c, 0x65, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x5f,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1d, 0x0a, 0x0a,
	0x6e, 0x61, 0x6e, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6e, 0x61, 0x6e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x64,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x2b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x73, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x70,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x29, 0x0a, 0x10,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x57, 0x0a, 0x10,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73,
	0x18, 0x30, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x1a, 0x3c, 0x0a, 0x0e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x22, 0xc7, 0x01, 0x0a, 0x21, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x52, 0x0a, 0x1d, 0x63, 0x6f, 0x6c,
	0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x1b, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x4e, 0x0a,
	0x1b, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x19, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x97, 0x06,
	0x0a, 0x16, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x37, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x75, 0x6e, 0x64, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x64, 0x6f, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x64, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2c, 0x0a, 0x12, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x75, 0x6e, 0x64,
	0x6f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a,
	0x12, 0x72, 0x65, 0x64, 0x6f, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x64, 0x6f, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x09, 0x77,
	0x65, 0x62, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08,
	0x77, 0x65, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x18, 0x69, 0x73, 0x5f, 0x69,
	0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x52, 0x15, 0x69, 0x73, 0x49, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x13, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62,
	0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x12, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x5f, 0x0a, 0x22, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x1f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x31, 0x0a, 0x0a, 0x76, 0x69, 0x65, 0x77,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x09, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x56, 0x0a, 0x1d, 0x63,
	0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x1b, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x52, 0x0a, 0x1b, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x19, 0x63, 0x6f,
	0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xca, 0x01, 0x0a, 0x10, 0x56, 0x69, 0x65, 0x77,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x36, 0x0a, 0x0f,
	0x76, 0x69, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x6f, 0x6f, 0x74, 0x12, 0x3c, 0x0a, 0x1a, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x40, 0x0a, 0x1c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x22, 0xed, 0x02, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x38, 0x0a, 0x0d, 0x75, 0x6e, 0x64, 0x6f, 0x52,
	0x65, 0x64, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x0d, 0x75, 0x6e, 0x64, 0x6f, 0x52, 0x65, 0x64, 0x6f, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x36, 0x0a, 0x0e, 0x75, 0x6e, 0x64, 0x6f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x75, 0x6e, 0x64, 0x6f, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x68, 0x61,
	0x64, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77,
	0x65, 0x64, 0x42, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x2c, 0x0a,
	0x12, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x68, 0x61, 0x64, 0x6f,
	0x77, 0x65, 0x64, 0x42, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x1e, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x68, 0x6f,
	0x6c, 0x64, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x73, 0x68, 0x6f,
	0x75, 0x6c, 0x64, 0x48, 0x6f, 0x6c, 0x64, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x64, 0x22, 0xc9, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53,
	0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x65, 0x74, 0x52, 0x0e, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x22, 0xa3, 0x02, 0x0a, 0x1f, 0x49, 0x6e, 0x64, 0x75, 0x63, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12,
	0x39, 0x0a, 0x10, 0x69, 0x6e, 0x64, 0x75, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x69, 0x6e, 0x64, 0x75, 0x63,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x39, 0x0a, 0x10, 0x69, 0x6e,
	0x64, 0x75, 0x63, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x69, 0x6e, 0x64, 0x75, 0x63, 0x65, 0x64, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x5f, 0x0a, 0x25, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73,
	0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x69, 0x6e,
	0x64, 0x75, 0x63, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x53, 0x65, 0x74, 0x52, 0x21, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x4f, 0x66, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x75, 0x63, 0x65, 0x64, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x22, 0xfd, 0x02, 0x0a, 0x22, 0x50, 0x72, 0x6f, 0x70, 0x61,
	0x67, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a,
	0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54,
	0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x70,
	0x61, 0x67, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x54, 0x0a, 0x23, 0x70,
	0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52,
	0x20, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x3f, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x12,
	0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x12, 0x52, 0x0a, 0x22, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x1f, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xa8, 0x02, 0x0a, 0x17, 0x46, 0x69, 0x6e, 0x61, 0x6c,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x61, 0x69, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x28, 0x0a,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x3b, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x14,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x33, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x66, 0x69, 0x6e,
	0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x46, 0x0a, 0x1c, 0x66, 0x69, 0x6e,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x19, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x45, 0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2a, 0x0a, 0x08,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x22, 0x50, 0x0a, 0x1e, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x4b, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x22, 0x90, 0x11, 0x0a, 0x16, 0x54,
	0x53, 0x4b, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73,
	0x74, 0x79, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6e, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x73, 0x68, 0x6f,
	0x77, 0x5f, 0x74, 0x68, 0x6f, 0x75, 0x73, 0x61, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x65, 0x70, 0x61,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x73, 0x68, 0x6f,
	0x77, 0x54, 0x68, 0x6f, 0x75, 0x73, 0x61, 0x6e, 0x64, 0x73, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x75, 0x73, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x12, 0x75, 0x73, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x62, 0x61, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x73, 0x12, 0x2d, 0x0a, 0x13, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x6d, 0x69,
	0x6e, 0x75, 0x73, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x62, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x4d, 0x69, 0x6e, 0x75, 0x73, 0x53, 0x69, 0x67, 0x6e,
	0x12, 0x2b, 0x0a, 0x11, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x63,
	0x75, 0x72, 0x61, 0x63, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x66, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x12, 0x30, 0x0a,
	0x14, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x73, 0x75, 0x70,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12,
	0x30, 0x0a, 0x14, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x73,
	0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6c, 0x61, 0x72,
	0x67, 0x65, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x73, 0x74, 0x12,
	0x34, 0x0a, 0x16, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x74,
	0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x65, 0x73, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x14, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x6d, 0x61,
	0x6c, 0x6c, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x42, 0x0a, 0x1d, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x73, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x69, 0x6e,
	0x69, 0x6d, 0x75, 0x6d, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f,
	0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x2b, 0x0a,
	0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x6c,
	0x69, 0x64, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x72, 0x4f, 0x72,
	0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x6c, 0x69,
	0x64, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x69, 0x6e, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x57, 0x69,
	0x64, 0x74, 0x68, 0x12, 0x3d, 0x0a, 0x1b, 0x6e, 0x75, 0x6d, 0x5f, 0x6e, 0x6f, 0x6e, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x6e, 0x75, 0x6d, 0x4e, 0x6f, 0x6e,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x44, 0x69, 0x67, 0x69,
	0x74, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x6e, 0x75, 0x6d, 0x5f, 0x6e, 0x6f, 0x6e, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x6e, 0x75, 0x6d, 0x4e, 0x6f, 0x6e, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x44, 0x69, 0x67, 0x69, 0x74,
	0x73, 0x12, 0x40, 0x0a, 0x1d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x65, 0x72, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x46,
	0x72, 0x6f, 0x6d, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65,
	0x67, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x74, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x74, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x4e, 0x0a, 0x1c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x5f, 0x73, 0x74, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x65, 0x74, 0x52, 0x19, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x53, 0x74, 0x72, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x6e, 0x75, 0x6d, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6e, 0x75, 0x6d, 0x48, 0x61, 0x73, 0x68,
	0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x44, 0x69, 0x67, 0x69, 0x74, 0x73, 0x12, 0x37, 0x0a,
	0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x5f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x44, 0x69, 0x67, 0x69, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x78, 0x18, 0x24, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x78, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x25, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x4a, 0x0a, 0x22, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x65, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x3f,
	0x0a, 0x1c, 0x75, 0x73, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x75, 0x73, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x69, 0x63, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12,
	0x28, 0x0a, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x29, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x09,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x55, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x0d, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x73,
	0x5f, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x75, 0x73, 0x65, 0x73, 0x50, 0x6c, 0x75, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x28,
	0x0a, 0x10, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x74, 0x72, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x6f, 0x6f, 0x6c, 0x54, 0x72,
	0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x6f, 0x6f, 0x6c,
	0x5f, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x2d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x6f, 0x6f, 0x6c, 0x46, 0x61, 0x6c, 0x73, 0x65, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x2a, 0x07, 0x08, 0x90, 0x4e, 0x10, 0xa0, 0x9c, 0x01, 0x22, 0xd7, 0x03,
	0x0a, 0x13, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x5f, 0x62, 0x6e, 0x63,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x10, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x50, 0x72, 0x65, 0x42, 0x6e, 0x63, 0x12, 0x42, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x54, 0x53, 0x4b, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0d, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x42, 0x0a, 0x0a,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x1a, 0xd3, 0x01, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0e, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x46, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x4b, 0x2e,
	0x54, 0x53, 0x4b, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x64, 0x62, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x44, 0x62, 0x6c, 0x22, 0x7b, 0x0a, 0x17, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x12, 0x1f, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x05, 0x75, 0x75,
	0x69, 0x64, 0x73, 0x12, 0x3f, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53,
	0x4b, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x73, 0x22, 0x96, 0x01, 0x0a, 0x17, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52,
	0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69,
	0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x22, 0x62, 0x0a,
	0x1d, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x22, 0x5d, 0x0a, 0x1e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x12, 0x3b, 0x0a, 0x11, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x10,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x22, 0xdb, 0x01, 0x0a, 0x26, 0x53, 0x65, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x11, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x10, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x09, 0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0xe0,
	0x05, 0x0a, 0x1f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x12, 0x48, 0x0a, 0x12, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x74, 0x68, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x11, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x16,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54,
	0x53, 0x4b, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x14, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x64, 0x4f, 0x6c, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a,
	0x16, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x54, 0x53, 0x4b, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74,
	0x68, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x14, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x64, 0x4e, 0x65, 0x77, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27,
	0x0a, 0x0f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x4b, 0x0a, 0x22, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x1f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x6c, 0x61, 0x67, 0x73, 0x12, 0x4b, 0x0a, 0x22, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x1f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67,
	0x73, 0x12, 0x5b, 0x0a, 0x22, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x1f, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x74, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x5b,
	0x0a, 0x22, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x1f, 0x72, 0x65, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x54, 0x0a, 0x1e, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x1c, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x73, 0x22, 0x68, 0x0a, 0x1f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x74, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x12, 0x45, 0x0a, 0x16, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x15, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x73, 0x22, 0x55, 0x0a, 0x14, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x12, 0x3d, 0x0a, 0x12, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x4f, 0x0a, 0x18, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x33,
	0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x6f, 0x6f, 0x74, 0x22, 0x39, 0x0a, 0x0f, 0x49, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x72, 0x67, 0x73, 0x12, 0x26, 0x0a, 0x07, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55,
	0x49, 0x44, 0x50, 0x61, 0x74, 0x68, 0x52, 0x06, 0x69, 0x64, 0x50, 0x61, 0x74, 0x68, 0x22, 0x56,
	0x0a, 0x12, 0x41, 0x64, 0x64, 0x49, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x72, 0x67, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x49, 0x64, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x67, 0x73, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x59, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x49, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x67, 0x73, 0x12,
	0x2a, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x49, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x72, 0x67, 0x73, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x22, 0x80, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x49,
	0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x67, 0x73, 0x12, 0x2a,
	0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x54, 0x53, 0x4b, 0x2e, 0x49, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x72, 0x67, 0x73, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09,
	0x66, 0x72, 0x6f, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x74, 0x6f, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x22, 0x80, 0x01, 0x0a, 0x18, 0x49, 0x64, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x67,
	0x73, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x49, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x72, 0x67, 0x73, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x1d, 0x0a,
	0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x05, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07,
	0x74, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x3f, 0x0a, 0x12, 0x4e, 0x75, 0x6c, 0x6c, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a,
	0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54,
	0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x22, 0x46, 0x0a, 0x19, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x22, 0x53, 0x0a, 0x26, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x44, 0x6f, 0x63, 0x50, 0x6f,
	0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x22, 0x59, 0x0a, 0x2c, 0x49, 0x6e, 0x64, 0x75, 0x63, 0x65, 0x64,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x22, 0x5f, 0x0a, 0x32, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x42,
	0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x41, 0x6e,
	0x64, 0x52, 0x65, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x22, 0xd7, 0x02, 0x0a, 0x27, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a,
	0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54,
	0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x62, 0x0a, 0x10, 0x6e, 0x65, 0x77, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x0e, 0x32, 0x38, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x6e, 0x65,
	0x77, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x62, 0x0a, 0x10,
	0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0e, 0x6f, 0x6c, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x39, 0x0a, 0x0b, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x10, 0x02, 0x22, 0x76, 0x0a, 0x28, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x49, 0x64, 0x22, 0x4f, 0x0a, 0x22, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x69, 0x66, 0x66,
	0x73, 0x41, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x22, 0x5c, 0x0a, 0x0c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04,
	0x52, 0x11, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0xc1, 0x05, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c,
	0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x0c, 0x52, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x19, 0x0a, 0x04, 0x6e, 0x6f, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x6f, 0x70, 0x12, 0x31, 0x0a, 0x12, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x06, 0x42, 0x02, 0x10, 0x01, 0x52, 0x11, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x26,
	0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x31, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x4e, 0x0a, 0x20, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x1d, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0a, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x10, 0x01, 0x52, 0x09,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x12, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x37, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x6f, 0x72, 0x6d, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0a,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x3a, 0x02, 0x2d, 0x31, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x1d, 0x0a, 0x08, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x3a, 0x02, 0x2d, 0x31, 0x52, 0x07, 0x74, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x25,
	0x0a, 0x0a, 0x64, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0a, 0x64, 0x6f, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x0c, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x02, 0x2d, 0x31, 0x52,
	0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x14,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x12, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x22, 0x73, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x64, 0x64, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x65, 0x61, 0x72, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49,
	0x64, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x10, 0x06, 0x22, 0x6f, 0x0a, 0x14, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x27,
	0x0a, 0x0f, 0x68, 0x69, 0x67, 0x68, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0e, 0x68, 0x69, 0x67, 0x68, 0x65, 0x72, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53,
	0x4b, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x90, 0x01, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x04, 0x52, 0x08,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x01, 0x52,
	0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a,
	0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x52, 0x0b, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x22, 0xcd, 0x03, 0x0a, 0x18, 0x4f,
	0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x28, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x12, 0x68, 0x0a, 0x32, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f,
	0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x2c, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4a, 0x73, 0x6f, 0x6e, 0x57, 0x69, 0x74,
	0x68, 0x6f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x45, 0x6e,
	0x63, 0x6f, 0x64, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x78, 0x0a, 0x30, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x62, 0x61, 0x73, 0x65,
	0x36, 0x34, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x2a, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4a, 0x73, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x67, 0x0a, 0x18, 0x75, 0x75, 0x69, 0x64, 0x5f, 0x74, 0x6f,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x4f, 0x75,
	0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x55, 0x55, 0x49, 0x44, 0x54, 0x6f, 0x44, 0x61, 0x74, 0x61,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x75, 0x75, 0x69, 0x64, 0x54, 0x6f,
	0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x3a,
	0x0a, 0x0f, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x6c, 0x61, 0x72,
	0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x73, 0x0a, 0x2a, 0x4f, 0x75,
	0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x55, 0x55, 0x49, 0x44, 0x54, 0x6f, 0x44, 0x61, 0x74, 0x61,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49,
	0x44, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xe4, 0x10, 0x0a, 0x21, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x73,
	0x12, 0x47, 0x0a, 0x18, 0x72, 0x73, 0x76, 0x70, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x15, 0x72, 0x73, 0x76, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x65, 0x0a, 0x27, 0x63, 0x6f, 0x6c,
	0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x24, 0x63, 0x6f, 0x6c, 0x6c,
	0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x79, 0x0a, 0x32, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x64, 0x69, 0x66, 0x66, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x2d, 0x61, 0x63,
	0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x73, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x69, 0x66, 0x66, 0x73, 0x12, 0x77, 0x0a, 0x31, 0x75,
	0x6e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x73, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6d, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x2c, 0x75, 0x6e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x50, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44,
	0x69, 0x66, 0x66, 0x73, 0x12, 0x9c, 0x01, 0x0a, 0x28, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x5f, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f,
	0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x25, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x83, 0x01, 0x0a, 0x37, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x65, 0x72, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x75, 0x6e, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x32, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d,
	0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x55, 0x6e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65,
	0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x2a, 0x6d, 0x61, 0x69,
	0x6c, 0x62, 0x6f, 0x78, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x26, 0x6d,
	0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x69, 0x0a, 0x2c, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x28, 0x6d, 0x61, 0x69, 0x6c, 0x62, 0x6f, 0x78, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x92, 0x01, 0x0a, 0x46, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x70,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x77, 0x61, 0x73, 0x5f, 0x6d, 0x6f,
	0x76, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x72, 0x73, 0x76, 0x70, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x3b, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65,
	0x6e, 0x64, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x57, 0x61, 0x73, 0x4d, 0x6f, 0x76, 0x65,
	0x64, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x73, 0x76, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x48, 0x0a, 0x21, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x1d, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x6e,
	0x64, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x57, 0x0a, 0x23, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x1f, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x88, 0x01, 0x0a, 0x3a, 0x73, 0x6b, 0x69,
	0x70, 0x70, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x34, 0x73,
	0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x69,
	0x66, 0x66, 0x73, 0x12, 0x4f, 0x0a, 0x1f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x6f, 0x5f,
	0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x1b, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x6f, 0x6f,
	0x4f, 0x6c, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x88, 0x01, 0x0a, 0x3a, 0x75, 0x6e, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x69,
	0x66, 0x66, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x34, 0x75, 0x6e, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x75, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x69, 0x66, 0x66, 0x73, 0x12,
	0x4b, 0x0a, 0x1a, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x17, 0x73, 0x65, 0x6e, 0x64, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x81, 0x01, 0x0a,
	0x3f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x70,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x64,
	0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x72, 0x73, 0x76, 0x70, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x35, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x4f, 0x66, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x4d, 0x6f,
	0x76, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x73, 0x76, 0x70, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x12, 0x6c, 0x0a, 0x2e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x64, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55,
	0x55, 0x49, 0x44, 0x52, 0x29, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0xa5,
	0x01, 0x0a, 0x1c, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x38, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x19, 0x61, 0x63, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x18, 0x61, 0x63,
	0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x22, 0xbc, 0x01, 0x0a, 0x18, 0x4e, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x70, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x43, 0x0a, 0x15, 0x64, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x14, 0x64, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xce, 0x04, 0x0a, 0x1c, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x77, 0x12, 0x2d, 0x0a, 0x12,
	0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x74,
	0x68, 0x6f, 0x75, 0x73, 0x61, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x74, 0x68, 0x6f, 0x75, 0x73,
	0x61, 0x6e, 0x64, 0x73, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x3b,
	0x0a, 0x1a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x72, 0x6f, 0x77, 0x73,
	0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x17, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x52, 0x6f, 0x77,
	0x73, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x64,
	0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x64, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x74,
	0x65, 0x78, 0x74, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x65, 0x78, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x13, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x73,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x12, 0x34, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x65, 0x74, 0x52, 0x0d,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x12, 0x31, 0x0a,
	0x14, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x44, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x2b, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x12, 0x27, 0x0a,
	0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x6e,
	0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x22, 0xde, 0x02, 0x0a, 0x26, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x61, 0x0a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x73, 0x61, 0x6d, 0x65, 0x5f, 0x61, 0x73, 0x5f,
	0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x29, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x53, 0x61, 0x6d, 0x65,
	0x41, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x06,
	0x42, 0x02, 0x10, 0x01, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53,
	0x4b, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x1d, 0x63, 0x6f, 0x61, 0x6c, 0x65, 0x73, 0x63, 0x65,
	0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1a, 0x63, 0x6f, 0x61,
	0x6c, 0x65, 0x73, 0x63, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x85, 0x03, 0x0a, 0x15, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x44, 0x0a, 0x1c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x06, 0x42, 0x02, 0x10, 0x01, 0x52, 0x1a, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x20, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x1d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61,
	0x12, 0x67, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x17, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x69, 0x66, 0x66, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x22,
	0x4e, 0x0a, 0x1a, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x30, 0x0a,
	0x0b, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x52, 0x0a, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x22,
	0x97, 0x03, 0x0a, 0x21, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x72, 0x72, 0x61, 0x79, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x13, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x61,
	0x72, 0x72, 0x61, 0x79, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x6c, 0x61, 0x72, 0x67,
	0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a,
	0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x61, 0x0a, 0x2e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x29, 0x6c,
	0x61, 0x73, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x1f, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x1c, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x48, 0x0a, 0x21, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1d, 0x73, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x46, 0x69, 0x72, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xa0, 0x06, 0x0a, 0x10, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x28,
	0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x04, 0x52, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x45, 0x0a, 0x1f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1c, 0x6c, 0x61, 0x73, 0x74,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x4d, 0x0a, 0x21, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x06, 0x42, 0x02, 0x10, 0x01, 0x52, 0x1e, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x78, 0x0a, 0x3a, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x75, 0x6e, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x34, 0x6c, 0x61, 0x73,
	0x74, 0x55, 0x6e, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x80, 0x01, 0x0a, 0x3c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x6e, 0x73, 0x6b, 0x69,
	0x70, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x03, 0x28, 0x06, 0x42, 0x02, 0x10, 0x01, 0x52, 0x36, 0x6c, 0x61,
	0x73, 0x74, 0x55, 0x6e, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x70, 0x0a, 0x36, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x6e, 0x73,
	0x6b, 0x69, 0x70, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x65, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x30, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x6e, 0x73, 0x6b, 0x69, 0x70,
	0x70, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x53, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x78, 0x0a, 0x38, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75,
	0x6e, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x5f,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x08, 0x20, 0x03, 0x28, 0x06, 0x42, 0x02, 0x10, 0x01, 0x52, 0x32, 0x6c, 0x61,
	0x73, 0x74, 0x55, 0x6e, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x45,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x3a, 0x0a, 0x12, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x61, 0x6e,
	0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x65, 0x74, 0x52, 0x0f, 0x64, 0x61, 0x79,
	0x73, 0x57, 0x69, 0x74, 0x68, 0x41, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x5b, 0x0a, 0x14,
	0x4f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x12, 0x43, 0x0a, 0x12, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x10, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x22, 0x78, 0x0a, 0x1b, 0x4f, 0x75, 0x74,
	0x67, 0x6f, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x59, 0x0a, 0x1a, 0x6c, 0x61, 0x72, 0x67,
	0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x73,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x17, 0x6c, 0x61, 0x72, 0x67,
	0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0xe3, 0x04, 0x0a, 0x13, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x9a, 0x01, 0x0a, 0x2d,
	0x61, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f,
	0x75, 0x75, 0x69, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x54, 0x6f, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x69, 0x72, 0x52,
	0x27, 0x61, 0x64, 0x64, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x55,
	0x75, 0x69, 0x64, 0x54, 0x6f, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x50, 0x61, 0x69, 0x72, 0x73, 0x12, 0x9e, 0x01, 0x0a, 0x2f, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x75,
	0x75, 0x69, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x54, 0x6f, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x69, 0x72, 0x52, 0x29,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x55, 0x75, 0x69, 0x64, 0x54, 0x6f, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x69, 0x72, 0x73, 0x12, 0x50, 0x0a, 0x1a, 0x75, 0x6e, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x18, 0x75, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x1a, 0xbb, 0x01, 0x0a, 0x21,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x54, 0x6f, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x69,
	0x72, 0x12, 0x30, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x55, 0x55, 0x49, 0x44, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x86, 0x02, 0x0a, 0x18, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x04, 0x20, 0x02, 0x28, 0x03, 0x52, 0x10, 0x61, 0x73, 0x73, 0x65, 0x74, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x75,
	0x6d, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x02, 0x28,
	0x03, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2f, 0x0a, 0x13, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x06, 0x20, 0x02, 0x28, 0x03, 0x52, 0x12,
	0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x22, 0x92, 0x02, 0x0a, 0x1f, 0x41, 0x73, 0x73, 0x65, 0x74, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x12, 0x57, 0x0a, 0x09, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x6b, 0x0a, 0x15, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0d, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x77, 0x0a, 0x29, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x55, 0x6e, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4f, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12,
	0x1f, 0x0a, 0x0b, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0xeb, 0x03, 0x0a, 0x17, 0x50, 0x65, 0x6e, 0x63, 0x69, 0x6c, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x49, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x66, 0x0a, 0x11,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x50, 0x65,
	0x6e, 0x63, 0x69, 0x6c, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x49,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x65, 0x6e, 0x63, 0x69, 0x6c, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x03,
	0x50, 0x65, 0x6e, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6f, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x0e, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x6f, 0x6f, 0x6c,
	0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x0c, 0x70, 0x65, 0x6e, 0x54, 0x6f, 0x6f,
	0x6c, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x6f,
	0x6f, 0x6c, 0x5f, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0e, 0x70, 0x65, 0x6e, 0x54, 0x6f, 0x6f, 0x6c, 0x4f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x12, 0x24, 0x0a, 0x0e, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x70, 0x65, 0x6e, 0x54, 0x6f, 0x6f,
	0x6c, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x40, 0x0a, 0x16, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x52, 0x14, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x54,
	0x6f, 0x6f, 0x6c, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x38, 0x0a, 0x18, 0x68, 0x69, 0x67, 0x68,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x6f, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x16, 0x68, 0x69, 0x67, 0x68,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x54, 0x6f, 0x6f, 0x6c, 0x4f, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x12, 0x34, 0x0a, 0x16, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x65,
	0x72, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x14, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x54,
	0x6f, 0x6f, 0x6c, 0x57, 0x69, 0x64, 0x74, 0x68, 0x22, 0x34, 0x0a, 0x18, 0x50, 0x65, 0x6e, 0x63,
	0x69, 0x6c, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6f, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x65, 0x6e, 0x10, 0x00, 0x12, 0x0f, 0x0a,
	0x0b, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x65, 0x72, 0x10, 0x01, 0x2a, 0x67,
	0x0a, 0x18, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x44, 0x45, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x46, 0x49, 0x58, 0x45, 0x44,
	0x57, 0x49, 0x44, 0x54, 0x48, 0x10, 0x02, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x2f, 0x6b, 0x70, 0x62,
}

var (
	file_TSKArchives_proto_rawDescOnce sync.Once
	file_TSKArchives_proto_rawDescData = file_TSKArchives_proto_rawDesc
)

func file_TSKArchives_proto_rawDescGZIP() []byte {
	file_TSKArchives_proto_rawDescOnce.Do(func() {
		file_TSKArchives_proto_rawDescData = protoimpl.X.CompressGZIP(file_TSKArchives_proto_rawDescData)
	})
	return file_TSKArchives_proto_rawDescData
}

var file_TSKArchives_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_TSKArchives_proto_msgTypes = make([]protoimpl.MessageInfo, 75)
var file_TSKArchives_proto_goTypes = []interface{}{
	(StructuredTextImportType)(0),                                                // 0: TSK.StructuredTextImportType
	(ChangeDocumentPackageTypeCommandArchive_PackageType)(0),                     // 1: TSK.ChangeDocumentPackageTypeCommandArchive.PackageType
	(Operation_OperationType)(0),                                                 // 2: TSK.Operation.OperationType
	(PencilAnnotationUIState_PencilAnnotationToolType)(0),                        // 3: TSK.PencilAnnotationUIState.PencilAnnotationToolType
	(*TreeNode)(nil),                                                             // 4: TSK.TreeNode
	(*LocalCommandHistoryItem)(nil),                                              // 5: TSK.LocalCommandHistoryItem
	(*LocalCommandHistoryArray)(nil),                                             // 6: TSK.LocalCommandHistoryArray
	(*LocalCommandHistoryArraySegment)(nil),                                      // 7: TSK.LocalCommandHistoryArraySegment
	(*LocalCommandHistory)(nil),                                                  // 8: TSK.LocalCommandHistory
	(*CollaborationCommandHistoryArray)(nil),                                     // 9: TSK.CollaborationCommandHistoryArray
	(*CollaborationCommandHistoryArraySegment)(nil),                              // 10: TSK.CollaborationCommandHistoryArraySegment
	(*CollaborationCommandHistory)(nil),                                          // 11: TSK.CollaborationCommandHistory
	(*CollaborationCommandHistoryItem)(nil),                                      // 12: TSK.CollaborationCommandHistoryItem
	(*CollaborationCommandHistoryCoalescingGroup)(nil),                           // 13: TSK.CollaborationCommandHistoryCoalescingGroup
	(*CollaborationCommandHistoryCoalescingGroupNode)(nil),                       // 14: TSK.CollaborationCommandHistoryCoalescingGroupNode
	(*CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver)(nil), // 15: TSK.CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver
	(*TSKDocumentArchive)(nil),                                                   // 16: TSK.TSKDocumentArchive
	(*FormattingSymbolsArchive)(nil),                                             // 17: TSK.FormattingSymbolsArchive
	(*DocumentSupportCollaborationState)(nil),                                    // 18: TSK.DocumentSupportCollaborationState
	(*DocumentSupportArchive)(nil),                                               // 19: TSK.DocumentSupportArchive
	(*ViewStateArchive)(nil),                                                     // 20: TSK.ViewStateArchive
	(*CommandArchive)(nil),                                                       // 21: TSK.CommandArchive
	(*CommandGroupArchive)(nil),                                                  // 22: TSK.CommandGroupArchive
	(*InducedCommandCollectionArchive)(nil),                                      // 23: TSK.InducedCommandCollectionArchive
	(*PropagatedCommandCollectionArchive)(nil),                                   // 24: TSK.PropagatedCommandCollectionArchive
	(*FinalCommandPairArchive)(nil),                                              // 25: TSK.FinalCommandPairArchive
	(*CommandContainerArchive)(nil),                                              // 26: TSK.CommandContainerArchive
	(*ProgressiveCommandGroupArchive)(nil),                                       // 27: TSK.ProgressiveCommandGroupArchive
	(*TSKFormatStructArchive)(nil),                                               // 28: TSK.TSKFormatStructArchive
	(*CustomFormatArchive)(nil),                                                  // 29: TSK.CustomFormatArchive
	(*CustomFormatListArchive)(nil),                                              // 30: TSK.CustomFormatListArchive
	(*AnnotationAuthorArchive)(nil),                                              // 31: TSK.AnnotationAuthorArchive
	(*DeprecatedChangeAuthorArchive)(nil),                                        // 32: TSK.DeprecatedChangeAuthorArchive
	(*AnnotationAuthorStorageArchive)(nil),                                       // 33: TSK.AnnotationAuthorStorageArchive
	(*SetAnnotationAuthorColorCommandArchive)(nil),                               // 34: TSK.SetAnnotationAuthorColorCommandArchive
	(*CommandSelectionBehaviorArchive)(nil),                                      // 35: TSK.CommandSelectionBehaviorArchive
	(*SelectionPathTransformerArchive)(nil),                                      // 36: TSK.SelectionPathTransformerArchive
	(*SelectionPathArchive)(nil),                                                 // 37: TSK.SelectionPathArchive
	(*DocumentSelectionArchive)(nil),                                             // 38: TSK.DocumentSelectionArchive
	(*IdOperationArgs)(nil),                                                      // 39: TSK.IdOperationArgs
	(*AddIdOperationArgs)(nil),                                                   // 40: TSK.AddIdOperationArgs
	(*RemoveIdOperationArgs)(nil),                                                // 41: TSK.RemoveIdOperationArgs
	(*RearrangeIdOperationArgs)(nil),                                             // 42: TSK.RearrangeIdOperationArgs
	(*IdPlacementOperationArgs)(nil),                                             // 43: TSK.IdPlacementOperationArgs
	(*NullCommandArchive)(nil),                                                   // 44: TSK.NullCommandArchive
	(*GroupCommitCommandArchive)(nil),                                            // 45: TSK.GroupCommitCommandArchive
	(*UpgradeDocPostProcessingCommandArchive)(nil),                               // 46: TSK.UpgradeDocPostProcessingCommandArchive
	(*InducedCommandCollectionCommitCommandArchive)(nil),                         // 47: TSK.InducedCommandCollectionCommitCommandArchive
	(*ExecuteTestBetweenRollbackAndReapplyCommandArchive)(nil),                   // 48: TSK.ExecuteTestBetweenRollbackAndReapplyCommandArchive
	(*ChangeDocumentPackageTypeCommandArchive)(nil),                              // 49: TSK.ChangeDocumentPackageTypeCommandArchive
	(*CreateLocalStorageSnapshotCommandArchive)(nil),                             // 50: TSK.CreateLocalStorageSnapshotCommandArchive
	(*BlockDiffsAtCurrentRevisionCommand)(nil),                                   // 51: TSK.BlockDiffsAtCurrentRevisionCommand
	(*RangeAddress)(nil),                                                         // 52: TSK.RangeAddress
	(*Operation)(nil),                                                            // 53: TSK.Operation
	(*OperationTransformer)(nil),                                                 // 54: TSK.OperationTransformer
	(*TransformerEntry)(nil),                                                     // 55: TSK.TransformerEntry
	(*OutgoingCommandQueueItem)(nil),                                             // 56: TSK.OutgoingCommandQueueItem
	(*OutgoingCommandQueueItemUUIDToDataMapEntry)(nil),                           // 57: TSK.OutgoingCommandQueueItemUUIDToDataMapEntry
	(*CollaborationDocumentSessionState)(nil),                                    // 58: TSK.CollaborationDocumentSessionState
	(*NativeContentDescription)(nil),                                             // 59: TSK.NativeContentDescription
	(*StructuredTextImportSettings)(nil),                                         // 60: TSK.StructuredTextImportSettings
	(*OperationStorageCommandOperationsEntry)(nil),                               // 61: TSK.OperationStorageCommandOperationsEntry
	(*OperationStorageEntry)(nil),                                                // 62: TSK.OperationStorageEntry
	(*OperationStorageEntryArray)(nil),                                           // 63: TSK.OperationStorageEntryArray
	(*OperationStorageEntryArraySegment)(nil),                                    // 64: TSK.OperationStorageEntryArraySegment
	(*OperationStorage)(nil),                                                     // 65: TSK.OperationStorage
	(*OutgoingCommandQueue)(nil),                                                 // 66: TSK.OutgoingCommandQueue
	(*OutgoingCommandQueueSegment)(nil),                                          // 67: TSK.OutgoingCommandQueueSegment
	(*DataReferenceRecord)(nil),                                                  // 68: TSK.DataReferenceRecord
	(*CommandAssetChunkArchive)(nil),                                             // 69: TSK.CommandAssetChunkArchive
	(*AssetUploadStatusCommandArchive)(nil),                                      // 70: TSK.AssetUploadStatusCommandArchive
	(*AssetUnmaterializedOnServerCommandArchive)(nil),                            // 71: TSK.AssetUnmaterializedOnServerCommandArchive
	(*PencilAnnotationUIState)(nil),                                              // 72: TSK.PencilAnnotationUIState
	(*CollaborationCommandHistory_ItemList)(nil),                                 // 73: TSK.CollaborationCommandHistory.ItemList
	(*FormattingSymbolsArchive_CurrencySymbol)(nil),                              // 74: TSK.FormattingSymbolsArchive.CurrencySymbol
	(*CustomFormatArchive_Condition)(nil),                                        // 75: TSK.CustomFormatArchive.Condition
	(*CollaborationDocumentSessionState_AcknowledgementObserverEntry)(nil),       // 76: TSK.CollaborationDocumentSessionState.AcknowledgementObserverEntry
	(*DataReferenceRecord_ContainerUUIDToReferencedDataPair)(nil),                // 77: TSK.DataReferenceRecord.ContainerUUIDToReferencedDataPair
	(*AssetUploadStatusCommandArchive_AssetUploadStatusInfo)(nil),                // 78: TSK.AssetUploadStatusCommandArchive.AssetUploadStatusInfo
	(*Reference)(nil),                                                            // 79: TSP.Reference
	(*LargeArray)(nil),                                                           // 80: TSP.LargeArray
	(*LargeObjectArraySegment)(nil),                                              // 81: TSP.LargeObjectArraySegment
	(*UUID)(nil),                                                                 // 82: TSP.UUID
	(*IndexSet)(nil),                                                             // 83: TSP.IndexSet
	(*Color)(nil),                                                                // 84: TSP.Color
	(*UUIDPath)(nil),                                                             // 85: TSP.UUIDPath
	(*DataReference)(nil),                                                        // 86: TSP.DataReference
	(*LargeArraySegment)(nil),                                                    // 87: TSP.LargeArraySegment
	(*LargeObjectArray)(nil),                                                     // 88: TSP.LargeObjectArray
	(DataUploadStatus)(0),                                                        // 89: TSP.DataUploadStatus
}
var file_TSKArchives_proto_depIdxs = []int32{
	79,  // 0: TSK.TreeNode.children:type_name -> TSP.Reference
	79,  // 1: TSK.TreeNode.object:type_name -> TSP.Reference
	79,  // 2: TSK.LocalCommandHistoryItem.command:type_name -> TSP.Reference
	79,  // 3: TSK.LocalCommandHistoryItem.selection_behavior:type_name -> TSP.Reference
	80,  // 4: TSK.LocalCommandHistoryArray.large_array:type_name -> TSP.LargeArray
	81,  // 5: TSK.LocalCommandHistoryArraySegment.large_object_array_segment:type_name -> TSP.LargeObjectArraySegment
	79,  // 6: TSK.LocalCommandHistory.items_array:type_name -> TSP.Reference
	80,  // 7: TSK.CollaborationCommandHistoryArray.large_array:type_name -> TSP.LargeArray
	81,  // 8: TSK.CollaborationCommandHistoryArraySegment.large_object_array_segment:type_name -> TSP.LargeObjectArraySegment
	82,  // 9: TSK.CollaborationCommandHistory.local_identifier:type_name -> TSP.UUID
	73,  // 10: TSK.CollaborationCommandHistory.undo_items:type_name -> TSK.CollaborationCommandHistory.ItemList
	73,  // 11: TSK.CollaborationCommandHistory.redo_items:type_name -> TSK.CollaborationCommandHistory.ItemList
	79,  // 12: TSK.CollaborationCommandHistoryItem.command:type_name -> TSP.Reference
	79,  // 13: TSK.CollaborationCommandHistoryItem.selection_behavior:type_name -> TSP.Reference
	79,  // 14: TSK.CollaborationCommandHistoryItem.coalescing_group:type_name -> TSP.Reference
	79,  // 15: TSK.CollaborationCommandHistoryCoalescingGroup.nodes:type_name -> TSP.Reference
	79,  // 16: TSK.CollaborationCommandHistoryCoalescingGroupNode.command:type_name -> TSP.Reference
	79,  // 17: TSK.CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver.coalescing_group:type_name -> TSP.Reference
	79,  // 18: TSK.CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver.node:type_name -> TSP.Reference
	79,  // 19: TSK.TSKDocumentArchive.annotation_author_storage:type_name -> TSP.Reference
	79,  // 20: TSK.TSKDocumentArchive.activity_log_entries:type_name -> TSP.Reference
	79,  // 21: TSK.TSKDocumentArchive.collaboration_operation_history:type_name -> TSP.Reference
	17,  // 22: TSK.TSKDocumentArchive.formatting_symbols:type_name -> TSK.FormattingSymbolsArchive
	74,  // 23: TSK.FormattingSymbolsArchive.currency_symbols:type_name -> TSK.FormattingSymbolsArchive.CurrencySymbol
	79,  // 24: TSK.DocumentSupportCollaborationState.collaboration_command_history:type_name -> TSP.Reference
	79,  // 25: TSK.DocumentSupportCollaborationState.collaboration_session_state:type_name -> TSP.Reference
	79,  // 26: TSK.DocumentSupportArchive.command_history:type_name -> TSP.Reference
	79,  // 27: TSK.DocumentSupportArchive.web_state:type_name -> TSP.Reference
	79,  // 28: TSK.DocumentSupportArchive.collaboration_state:type_name -> TSP.Reference
	79,  // 29: TSK.DocumentSupportArchive.command_selection_behavior_history:type_name -> TSP.Reference
	79,  // 30: TSK.DocumentSupportArchive.view_state:type_name -> TSP.Reference
	79,  // 31: TSK.DocumentSupportArchive.collaboration_command_history:type_name -> TSP.Reference
	79,  // 32: TSK.DocumentSupportArchive.collaboration_session_state:type_name -> TSP.Reference
	79,  // 33: TSK.ViewStateArchive.view_state_root:type_name -> TSP.Reference
	79,  // 34: TSK.CommandArchive.undoRedoState:type_name -> TSP.Reference
	79,  // 35: TSK.CommandArchive.undoCollection:type_name -> TSP.Reference
	21,  // 36: TSK.CommandGroupArchive.super:type_name -> TSK.CommandArchive
	79,  // 37: TSK.CommandGroupArchive.commands:type_name -> TSP.Reference
	83,  // 38: TSK.CommandGroupArchive.process_results:type_name -> TSP.IndexSet
	21,  // 39: TSK.InducedCommandCollectionArchive.super:type_name -> TSK.CommandArchive
	79,  // 40: TSK.InducedCommandCollectionArchive.inducing_command:type_name -> TSP.Reference
	79,  // 41: TSK.InducedCommandCollectionArchive.induced_commands:type_name -> TSP.Reference
	83,  // 42: TSK.InducedCommandCollectionArchive.indexes_of_processed_induced_commands:type_name -> TSP.IndexSet
	21,  // 43: TSK.PropagatedCommandCollectionArchive.super:type_name -> TSK.CommandArchive
	79,  // 44: TSK.PropagatedCommandCollectionArchive.propagatable_command:type_name -> TSP.Reference
	79,  // 45: TSK.PropagatedCommandCollectionArchive.propagating_command:type_name -> TSP.Reference
	21,  // 46: TSK.FinalCommandPairArchive.super:type_name -> TSK.CommandArchive
	79,  // 47: TSK.FinalCommandPairArchive.command:type_name -> TSP.Reference
	79,  // 48: TSK.FinalCommandPairArchive.final_command:type_name -> TSP.Reference
	79,  // 49: TSK.CommandContainerArchive.commands:type_name -> TSP.Reference
	22,  // 50: TSK.ProgressiveCommandGroupArchive.super:type_name -> TSK.CommandGroupArchive
	83,  // 51: TSK.TSKFormatStructArchive.inters_str_insertion_indexes:type_name -> TSP.IndexSet
	82,  // 52: TSK.TSKFormatStructArchive.custom_uid:type_name -> TSP.UUID
	29,  // 53: TSK.TSKFormatStructArchive.custom_format:type_name -> TSK.CustomFormatArchive
	28,  // 54: TSK.CustomFormatArchive.default_format:type_name -> TSK.TSKFormatStructArchive
	75,  // 55: TSK.CustomFormatArchive.conditions:type_name -> TSK.CustomFormatArchive.Condition
	82,  // 56: TSK.CustomFormatListArchive.uuids:type_name -> TSP.UUID
	29,  // 57: TSK.CustomFormatListArchive.custom_formats:type_name -> TSK.CustomFormatArchive
	84,  // 58: TSK.AnnotationAuthorArchive.color:type_name -> TSP.Color
	84,  // 59: TSK.DeprecatedChangeAuthorArchive.change_color:type_name -> TSP.Color
	79,  // 60: TSK.AnnotationAuthorStorageArchive.annotation_author:type_name -> TSP.Reference
	21,  // 61: TSK.SetAnnotationAuthorColorCommandArchive.super:type_name -> TSK.CommandArchive
	79,  // 62: TSK.SetAnnotationAuthorColorCommandArchive.annotation_author:type_name -> TSP.Reference
	84,  // 63: TSK.SetAnnotationAuthorColorCommandArchive.color:type_name -> TSP.Color
	84,  // 64: TSK.SetAnnotationAuthorColorCommandArchive.old_color:type_name -> TSP.Color
	37,  // 65: TSK.CommandSelectionBehaviorArchive.archived_selection:type_name -> TSK.SelectionPathArchive
	37,  // 66: TSK.CommandSelectionBehaviorArchive.archived_old_selection:type_name -> TSK.SelectionPathArchive
	37,  // 67: TSK.CommandSelectionBehaviorArchive.archived_new_selection:type_name -> TSK.SelectionPathArchive
	79,  // 68: TSK.CommandSelectionBehaviorArchive.forward_selection_path_transformer:type_name -> TSP.Reference
	79,  // 69: TSK.CommandSelectionBehaviorArchive.reverse_selection_path_transformer:type_name -> TSP.Reference
	79,  // 70: TSK.CommandSelectionBehaviorArchive.additional_selection_behaviors:type_name -> TSP.Reference
	79,  // 71: TSK.SelectionPathTransformerArchive.selection_transformers:type_name -> TSP.Reference
	79,  // 72: TSK.SelectionPathArchive.ordered_selections:type_name -> TSP.Reference
	79,  // 73: TSK.DocumentSelectionArchive.document_root:type_name -> TSP.Reference
	85,  // 74: TSK.IdOperationArgs.id_path:type_name -> TSP.UUIDPath
	39,  // 75: TSK.AddIdOperationArgs.super:type_name -> TSK.IdOperationArgs
	39,  // 76: TSK.RemoveIdOperationArgs.super:type_name -> TSK.IdOperationArgs
	39,  // 77: TSK.RearrangeIdOperationArgs.super:type_name -> TSK.IdOperationArgs
	39,  // 78: TSK.IdPlacementOperationArgs.super:type_name -> TSK.IdOperationArgs
	21,  // 79: TSK.NullCommandArchive.super:type_name -> TSK.CommandArchive
	21,  // 80: TSK.GroupCommitCommandArchive.super:type_name -> TSK.CommandArchive
	21,  // 81: TSK.UpgradeDocPostProcessingCommandArchive.super:type_name -> TSK.CommandArchive
	21,  // 82: TSK.InducedCommandCollectionCommitCommandArchive.super:type_name -> TSK.CommandArchive
	21,  // 83: TSK.ExecuteTestBetweenRollbackAndReapplyCommandArchive.super:type_name -> TSK.CommandArchive
	21,  // 84: TSK.ChangeDocumentPackageTypeCommandArchive.super:type_name -> TSK.CommandArchive
	1,   // 85: TSK.ChangeDocumentPackageTypeCommandArchive.new_package_type:type_name -> TSK.ChangeDocumentPackageTypeCommandArchive.PackageType
	1,   // 86: TSK.ChangeDocumentPackageTypeCommandArchive.old_package_type:type_name -> TSK.ChangeDocumentPackageTypeCommandArchive.PackageType
	21,  // 87: TSK.CreateLocalStorageSnapshotCommandArchive.super:type_name -> TSK.CommandArchive
	21,  // 88: TSK.BlockDiffsAtCurrentRevisionCommand.super:type_name -> TSK.CommandArchive
	2,   // 89: TSK.Operation.type:type_name -> TSK.Operation.OperationType
	53,  // 90: TSK.OperationTransformer.operations:type_name -> TSK.Operation
	54,  // 91: TSK.TransformerEntry.transformer:type_name -> TSK.OperationTransformer
	79,  // 92: TSK.OutgoingCommandQueueItem.command:type_name -> TSP.Reference
	86,  // 93: TSK.OutgoingCommandQueueItem.serialized_json_without_data_base64_encoded_data:type_name -> TSP.DataReference
	57,  // 94: TSK.OutgoingCommandQueueItem.uuid_to_data_map_entries:type_name -> TSK.OutgoingCommandQueueItemUUIDToDataMapEntry
	86,  // 95: TSK.OutgoingCommandQueueItem.large_data_list:type_name -> TSP.DataReference
	82,  // 96: TSK.OutgoingCommandQueueItemUUIDToDataMapEntry.uuid:type_name -> TSP.UUID
	86,  // 97: TSK.OutgoingCommandQueueItemUUIDToDataMapEntry.data:type_name -> TSP.DataReference
	79,  // 98: TSK.CollaborationDocumentSessionState.rsvp_command_queue_items:type_name -> TSP.Reference
	79,  // 99: TSK.CollaborationDocumentSessionState.collaborator_cursor_transformer_entries:type_name -> TSP.Reference
	79,  // 100: TSK.CollaborationDocumentSessionState.acknowledged_commands_pending_resume_process_diffs:type_name -> TSP.Reference
	79,  // 101: TSK.CollaborationDocumentSessionState.unprocessed_commands_pending_resume_process_diffs:type_name -> TSP.Reference
	76,  // 102: TSK.CollaborationDocumentSessionState.command_acknowledgement_observer_entries:type_name -> TSK.CollaborationDocumentSessionState.AcknowledgementObserverEntry
	79,  // 103: TSK.CollaborationDocumentSessionState.transformer_from_unprocessed_command_operations_entries:type_name -> TSP.Reference
	82,  // 104: TSK.CollaborationDocumentSessionState.mailbox_request_document_revision_identifier:type_name -> TSP.UUID
	82,  // 105: TSK.CollaborationDocumentSessionState.last_command_send_marker_identifier:type_name -> TSP.UUID
	79,  // 106: TSK.CollaborationDocumentSessionState.skipped_acknowledged_commands_pending_resume_process_diffs:type_name -> TSP.Reference
	82,  // 107: TSK.CollaborationDocumentSessionState.last_too_old_command_identifier:type_name -> TSP.UUID
	79,  // 108: TSK.CollaborationDocumentSessionState.unprocessed_operation_entries_pending_resume_process_diffs:type_name -> TSP.Reference
	79,  // 109: TSK.CollaborationDocumentSessionState.send_pending_command_queue:type_name -> TSP.Reference
	82,  // 110: TSK.CollaborationDocumentSessionState.last_enqueued_document_load_command_identifier:type_name -> TSP.UUID
	79,  // 111: TSK.NativeContentDescription.drawable_descriptions:type_name -> TSP.Reference
	0,   // 112: TSK.StructuredTextImportSettings.type:type_name -> TSK.StructuredTextImportType
	83,  // 113: TSK.StructuredTextImportSettings.column_offsets:type_name -> TSP.IndexSet
	53,  // 114: TSK.OperationStorageCommandOperationsEntry.operations:type_name -> TSK.Operation
	61,  // 115: TSK.OperationStorageEntry.command_operation_entries:type_name -> TSK.OperationStorageCommandOperationsEntry
	80,  // 116: TSK.OperationStorageEntryArray.large_array:type_name -> TSP.LargeArray
	87,  // 117: TSK.OperationStorageEntryArraySegment.large_array_segment:type_name -> TSP.LargeArraySegment
	62,  // 118: TSK.OperationStorageEntryArraySegment.elements:type_name -> TSK.OperationStorageEntry
	79,  // 119: TSK.OperationStorage.entries:type_name -> TSP.Reference
	83,  // 120: TSK.OperationStorage.days_with_an_entry:type_name -> TSP.IndexSet
	88,  // 121: TSK.OutgoingCommandQueue.large_object_array:type_name -> TSP.LargeObjectArray
	81,  // 122: TSK.OutgoingCommandQueueSegment.large_object_array_segment:type_name -> TSP.LargeObjectArraySegment
	77,  // 123: TSK.DataReferenceRecord.added_container_uuid_to_referenced_data_pairs:type_name -> TSK.DataReferenceRecord.ContainerUUIDToReferencedDataPair
	77,  // 124: TSK.DataReferenceRecord.removed_container_uuid_to_referenced_data_pairs:type_name -> TSK.DataReferenceRecord.ContainerUUIDToReferencedDataPair
	86,  // 125: TSK.DataReferenceRecord.unbounded_referenced_datas:type_name -> TSP.DataReference
	21,  // 126: TSK.CommandAssetChunkArchive.super:type_name -> TSK.CommandArchive
	21,  // 127: TSK.AssetUploadStatusCommandArchive.super:type_name -> TSK.CommandArchive
	78,  // 128: TSK.AssetUploadStatusCommandArchive.info_list:type_name -> TSK.AssetUploadStatusCommandArchive.AssetUploadStatusInfo
	21,  // 129: TSK.AssetUnmaterializedOnServerCommandArchive.super:type_name -> TSK.CommandArchive
	3,   // 130: TSK.PencilAnnotationUIState.current_tool_type:type_name -> TSK.PencilAnnotationUIState.PencilAnnotationToolType
	84,  // 131: TSK.PencilAnnotationUIState.pen_tool_color:type_name -> TSP.Color
	84,  // 132: TSK.PencilAnnotationUIState.highlighter_tool_color:type_name -> TSP.Color
	79,  // 133: TSK.CollaborationCommandHistory.ItemList.items_array:type_name -> TSP.Reference
	79,  // 134: TSK.CollaborationCommandHistory.ItemList.transformer_entries:type_name -> TSP.Reference
	28,  // 135: TSK.CustomFormatArchive.Condition.condition_format:type_name -> TSK.TSKFormatStructArchive
	82,  // 136: TSK.CollaborationDocumentSessionState.AcknowledgementObserverEntry.command_identifier:type_name -> TSP.UUID
	79,  // 137: TSK.CollaborationDocumentSessionState.AcknowledgementObserverEntry.acknowledgement_observers:type_name -> TSP.Reference
	82,  // 138: TSK.DataReferenceRecord.ContainerUUIDToReferencedDataPair.container_uuid:type_name -> TSP.UUID
	86,  // 139: TSK.DataReferenceRecord.ContainerUUIDToReferencedDataPair.referenced_data:type_name -> TSP.DataReference
	89,  // 140: TSK.AssetUploadStatusCommandArchive.AssetUploadStatusInfo.upload_status:type_name -> TSP.DataUploadStatus
	141, // [141:141] is the sub-list for method output_type
	141, // [141:141] is the sub-list for method input_type
	141, // [141:141] is the sub-list for extension type_name
	141, // [141:141] is the sub-list for extension extendee
	0,   // [0:141] is the sub-list for field type_name
}

func init() { file_TSKArchives_proto_init() }
func file_TSKArchives_proto_init() {
	if File_TSKArchives_proto != nil {
		return
	}
	file_TSPMessages_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_TSKArchives_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreeNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalCommandHistoryItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalCommandHistoryArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalCommandHistoryArraySegment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalCommandHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollaborationCommandHistoryArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollaborationCommandHistoryArraySegment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollaborationCommandHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollaborationCommandHistoryItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollaborationCommandHistoryCoalescingGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollaborationCommandHistoryCoalescingGroupNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollaborationCommandHistoryOriginatingCommandAcknowledgementObserver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSKDocumentArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormattingSymbolsArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentSupportCollaborationState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentSupportArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ViewStateArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandGroupArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InducedCommandCollectionArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropagatedCommandCollectionArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinalCommandPairArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandContainerArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProgressiveCommandGroupArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSKFormatStructArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomFormatArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomFormatListArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnnotationAuthorArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeprecatedChangeAuthorArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnnotationAuthorStorageArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetAnnotationAuthorColorCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSelectionBehaviorArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectionPathTransformerArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectionPathArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentSelectionArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdOperationArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddIdOperationArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveIdOperationArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RearrangeIdOperationArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdPlacementOperationArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NullCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupCommitCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradeDocPostProcessingCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InducedCommandCollectionCommitCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteTestBetweenRollbackAndReapplyCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeDocumentPackageTypeCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateLocalStorageSnapshotCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockDiffsAtCurrentRevisionCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RangeAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Operation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationTransformer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransformerEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutgoingCommandQueueItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutgoingCommandQueueItemUUIDToDataMapEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollaborationDocumentSessionState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NativeContentDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructuredTextImportSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationStorageCommandOperationsEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationStorageEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationStorageEntryArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationStorageEntryArraySegment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationStorage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutgoingCommandQueue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutgoingCommandQueueSegment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataReferenceRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandAssetChunkArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetUploadStatusCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetUnmaterializedOnServerCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PencilAnnotationUIState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollaborationCommandHistory_ItemList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormattingSymbolsArchive_CurrencySymbol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomFormatArchive_Condition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollaborationDocumentSessionState_AcknowledgementObserverEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataReferenceRecord_ContainerUUIDToReferencedDataPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSKArchives_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetUploadStatusCommandArchive_AssetUploadStatusInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_TSKArchives_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   75,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_TSKArchives_proto_goTypes,
		DependencyIndexes: file_TSKArchives_proto_depIdxs,
		EnumInfos:         file_TSKArchives_proto_enumTypes,
		MessageInfos:      file_TSKArchives_proto_msgTypes,
	}.Build()
	File_TSKArchives_proto = out.File
	file_TSKArchives_proto_rawDesc = nil
	file_TSKArchives_proto_goTypes = nil
	file_TSKArchives_proto_depIdxs = nil
}
