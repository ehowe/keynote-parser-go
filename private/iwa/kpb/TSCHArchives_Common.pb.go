// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: TSCHArchives_Common.proto

package kpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChartType int32

const (
	ChartType_undefinedChartType          ChartType = 0
	ChartType_columnChartType2D           ChartType = 1
	ChartType_barChartType2D              ChartType = 2
	ChartType_lineChartType2D             ChartType = 3
	ChartType_areaChartType2D             ChartType = 4
	ChartType_pieChartType2D              ChartType = 5
	ChartType_stackedColumnChartType2D    ChartType = 6
	ChartType_stackedBarChartType2D       ChartType = 7
	ChartType_stackedAreaChartType2D      ChartType = 8
	ChartType_scatterChartType2D          ChartType = 9
	ChartType_mixedChartType2D            ChartType = 10
	ChartType_twoAxisChartType2D          ChartType = 11
	ChartType_columnChartType3D           ChartType = 12
	ChartType_barChartType3D              ChartType = 13
	ChartType_lineChartType3D             ChartType = 14
	ChartType_areaChartType3D             ChartType = 15
	ChartType_pieChartType3D              ChartType = 16
	ChartType_stackedColumnChartType3D    ChartType = 17
	ChartType_stackedBarChartType3D       ChartType = 18
	ChartType_stackedAreaChartType3D      ChartType = 19
	ChartType_multiDataColumnChartType2D  ChartType = 20
	ChartType_multiDataBarChartType2D     ChartType = 21
	ChartType_bubbleChartType2D           ChartType = 22
	ChartType_multiDataScatterChartType2D ChartType = 23
	ChartType_multiDataBubbleChartType2D  ChartType = 24
	ChartType_donutChartType2D            ChartType = 25
	ChartType_donutChartType3D            ChartType = 26
	ChartType_radarChartType2D            ChartType = 27
)

// Enum value maps for ChartType.
var (
	ChartType_name = map[int32]string{
		0:  "undefinedChartType",
		1:  "columnChartType2D",
		2:  "barChartType2D",
		3:  "lineChartType2D",
		4:  "areaChartType2D",
		5:  "pieChartType2D",
		6:  "stackedColumnChartType2D",
		7:  "stackedBarChartType2D",
		8:  "stackedAreaChartType2D",
		9:  "scatterChartType2D",
		10: "mixedChartType2D",
		11: "twoAxisChartType2D",
		12: "columnChartType3D",
		13: "barChartType3D",
		14: "lineChartType3D",
		15: "areaChartType3D",
		16: "pieChartType3D",
		17: "stackedColumnChartType3D",
		18: "stackedBarChartType3D",
		19: "stackedAreaChartType3D",
		20: "multiDataColumnChartType2D",
		21: "multiDataBarChartType2D",
		22: "bubbleChartType2D",
		23: "multiDataScatterChartType2D",
		24: "multiDataBubbleChartType2D",
		25: "donutChartType2D",
		26: "donutChartType3D",
		27: "radarChartType2D",
	}
	ChartType_value = map[string]int32{
		"undefinedChartType":          0,
		"columnChartType2D":           1,
		"barChartType2D":              2,
		"lineChartType2D":             3,
		"areaChartType2D":             4,
		"pieChartType2D":              5,
		"stackedColumnChartType2D":    6,
		"stackedBarChartType2D":       7,
		"stackedAreaChartType2D":      8,
		"scatterChartType2D":          9,
		"mixedChartType2D":            10,
		"twoAxisChartType2D":          11,
		"columnChartType3D":           12,
		"barChartType3D":              13,
		"lineChartType3D":             14,
		"areaChartType3D":             15,
		"pieChartType3D":              16,
		"stackedColumnChartType3D":    17,
		"stackedBarChartType3D":       18,
		"stackedAreaChartType3D":      19,
		"multiDataColumnChartType2D":  20,
		"multiDataBarChartType2D":     21,
		"bubbleChartType2D":           22,
		"multiDataScatterChartType2D": 23,
		"multiDataBubbleChartType2D":  24,
		"donutChartType2D":            25,
		"donutChartType3D":            26,
		"radarChartType2D":            27,
	}
)

func (x ChartType) Enum() *ChartType {
	p := new(ChartType)
	*p = x
	return p
}

func (x ChartType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChartType) Descriptor() protoreflect.EnumDescriptor {
	return file_TSCHArchives_Common_proto_enumTypes[0].Descriptor()
}

func (ChartType) Type() protoreflect.EnumType {
	return &file_TSCHArchives_Common_proto_enumTypes[0]
}

func (x ChartType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ChartType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ChartType(num)
	return nil
}

// Deprecated: Use ChartType.Descriptor instead.
func (ChartType) EnumDescriptor() ([]byte, []int) {
	return file_TSCHArchives_Common_proto_rawDescGZIP(), []int{0}
}

type AxisType int32

const (
	AxisType_axis_type_unknown      AxisType = 0
	AxisType_axis_type_x            AxisType = 1
	AxisType_axis_type_y            AxisType = 2
	AxisType_axis_type_pie          AxisType = 3
	AxisType_axis_type_size         AxisType = 4
	AxisType_axis_type_polar_radius AxisType = 5
	AxisType_axis_type_polar_angle  AxisType = 6
)

// Enum value maps for AxisType.
var (
	AxisType_name = map[int32]string{
		0: "axis_type_unknown",
		1: "axis_type_x",
		2: "axis_type_y",
		3: "axis_type_pie",
		4: "axis_type_size",
		5: "axis_type_polar_radius",
		6: "axis_type_polar_angle",
	}
	AxisType_value = map[string]int32{
		"axis_type_unknown":      0,
		"axis_type_x":            1,
		"axis_type_y":            2,
		"axis_type_pie":          3,
		"axis_type_size":         4,
		"axis_type_polar_radius": 5,
		"axis_type_polar_angle":  6,
	}
)

func (x AxisType) Enum() *AxisType {
	p := new(AxisType)
	*p = x
	return p
}

func (x AxisType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AxisType) Descriptor() protoreflect.EnumDescriptor {
	return file_TSCHArchives_Common_proto_enumTypes[1].Descriptor()
}

func (AxisType) Type() protoreflect.EnumType {
	return &file_TSCHArchives_Common_proto_enumTypes[1]
}

func (x AxisType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AxisType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AxisType(num)
	return nil
}

// Deprecated: Use AxisType.Descriptor instead.
func (AxisType) EnumDescriptor() ([]byte, []int) {
	return file_TSCHArchives_Common_proto_rawDescGZIP(), []int{1}
}

type ScatterFormat int32

const (
	ScatterFormat_scatter_format_unknown    ScatterFormat = 0
	ScatterFormat_scatter_format_separate_x ScatterFormat = 1
	ScatterFormat_scatter_format_shared_x   ScatterFormat = 2
)

// Enum value maps for ScatterFormat.
var (
	ScatterFormat_name = map[int32]string{
		0: "scatter_format_unknown",
		1: "scatter_format_separate_x",
		2: "scatter_format_shared_x",
	}
	ScatterFormat_value = map[string]int32{
		"scatter_format_unknown":    0,
		"scatter_format_separate_x": 1,
		"scatter_format_shared_x":   2,
	}
)

func (x ScatterFormat) Enum() *ScatterFormat {
	p := new(ScatterFormat)
	*p = x
	return p
}

func (x ScatterFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScatterFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_TSCHArchives_Common_proto_enumTypes[2].Descriptor()
}

func (ScatterFormat) Type() protoreflect.EnumType {
	return &file_TSCHArchives_Common_proto_enumTypes[2]
}

func (x ScatterFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ScatterFormat) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ScatterFormat(num)
	return nil
}

// Deprecated: Use ScatterFormat.Descriptor instead.
func (ScatterFormat) EnumDescriptor() ([]byte, []int) {
	return file_TSCHArchives_Common_proto_rawDescGZIP(), []int{2}
}

type SeriesDirection int32

const (
	SeriesDirection_series_direction_unknown   SeriesDirection = 0
	SeriesDirection_series_direction_by_row    SeriesDirection = 1
	SeriesDirection_series_direction_by_column SeriesDirection = 2
)

// Enum value maps for SeriesDirection.
var (
	SeriesDirection_name = map[int32]string{
		0: "series_direction_unknown",
		1: "series_direction_by_row",
		2: "series_direction_by_column",
	}
	SeriesDirection_value = map[string]int32{
		"series_direction_unknown":   0,
		"series_direction_by_row":    1,
		"series_direction_by_column": 2,
	}
)

func (x SeriesDirection) Enum() *SeriesDirection {
	p := new(SeriesDirection)
	*p = x
	return p
}

func (x SeriesDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SeriesDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_TSCHArchives_Common_proto_enumTypes[3].Descriptor()
}

func (SeriesDirection) Type() protoreflect.EnumType {
	return &file_TSCHArchives_Common_proto_enumTypes[3]
}

func (x SeriesDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SeriesDirection) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SeriesDirection(num)
	return nil
}

// Deprecated: Use SeriesDirection.Descriptor instead.
func (SeriesDirection) EnumDescriptor() ([]byte, []int) {
	return file_TSCHArchives_Common_proto_rawDescGZIP(), []int{3}
}

type NumberValueType int32

const (
	NumberValueType_numberValueTypeDecimal    NumberValueType = 0
	NumberValueType_numberValueTypeCurrency   NumberValueType = 1
	NumberValueType_numberValueTypePercentage NumberValueType = 2
	NumberValueType_numberValueTypeScientific NumberValueType = 3
	NumberValueType_numberValueTypeFraction   NumberValueType = 4
	NumberValueType_numberValueTypeBase       NumberValueType = 5
	NumberValueType_numberValueTypeUnknown    NumberValueType = -999
)

// Enum value maps for NumberValueType.
var (
	NumberValueType_name = map[int32]string{
		0:    "numberValueTypeDecimal",
		1:    "numberValueTypeCurrency",
		2:    "numberValueTypePercentage",
		3:    "numberValueTypeScientific",
		4:    "numberValueTypeFraction",
		5:    "numberValueTypeBase",
		-999: "numberValueTypeUnknown",
	}
	NumberValueType_value = map[string]int32{
		"numberValueTypeDecimal":    0,
		"numberValueTypeCurrency":   1,
		"numberValueTypePercentage": 2,
		"numberValueTypeScientific": 3,
		"numberValueTypeFraction":   4,
		"numberValueTypeBase":       5,
		"numberValueTypeUnknown":    -999,
	}
)

func (x NumberValueType) Enum() *NumberValueType {
	p := new(NumberValueType)
	*p = x
	return p
}

func (x NumberValueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NumberValueType) Descriptor() protoreflect.EnumDescriptor {
	return file_TSCHArchives_Common_proto_enumTypes[4].Descriptor()
}

func (NumberValueType) Type() protoreflect.EnumType {
	return &file_TSCHArchives_Common_proto_enumTypes[4]
}

func (x NumberValueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *NumberValueType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = NumberValueType(num)
	return nil
}

// Deprecated: Use NumberValueType.Descriptor instead.
func (NumberValueType) EnumDescriptor() ([]byte, []int) {
	return file_TSCHArchives_Common_proto_rawDescGZIP(), []int{4}
}

type NegativeNumberStyle int32

const (
	NegativeNumberStyle_negativeNumberStyleMinus             NegativeNumberStyle = 0
	NegativeNumberStyle_negativeNumberStyleRed               NegativeNumberStyle = 1
	NegativeNumberStyle_negativeNumberStyleParentheses       NegativeNumberStyle = 2
	NegativeNumberStyle_negativeNumberStyleRedAndParentheses NegativeNumberStyle = 3
	NegativeNumberStyle_negativeNumberStyleNone              NegativeNumberStyle = 4
)

// Enum value maps for NegativeNumberStyle.
var (
	NegativeNumberStyle_name = map[int32]string{
		0: "negativeNumberStyleMinus",
		1: "negativeNumberStyleRed",
		2: "negativeNumberStyleParentheses",
		3: "negativeNumberStyleRedAndParentheses",
		4: "negativeNumberStyleNone",
	}
	NegativeNumberStyle_value = map[string]int32{
		"negativeNumberStyleMinus":             0,
		"negativeNumberStyleRed":               1,
		"negativeNumberStyleParentheses":       2,
		"negativeNumberStyleRedAndParentheses": 3,
		"negativeNumberStyleNone":              4,
	}
)

func (x NegativeNumberStyle) Enum() *NegativeNumberStyle {
	p := new(NegativeNumberStyle)
	*p = x
	return p
}

func (x NegativeNumberStyle) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NegativeNumberStyle) Descriptor() protoreflect.EnumDescriptor {
	return file_TSCHArchives_Common_proto_enumTypes[5].Descriptor()
}

func (NegativeNumberStyle) Type() protoreflect.EnumType {
	return &file_TSCHArchives_Common_proto_enumTypes[5]
}

func (x NegativeNumberStyle) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *NegativeNumberStyle) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = NegativeNumberStyle(num)
	return nil
}

// Deprecated: Use NegativeNumberStyle.Descriptor instead.
func (NegativeNumberStyle) EnumDescriptor() ([]byte, []int) {
	return file_TSCHArchives_Common_proto_rawDescGZIP(), []int{5}
}

type FractionAccuracy int32

const (
	FractionAccuracy_fractionAccuracyConflicting     FractionAccuracy = 0
	FractionAccuracy_fractionAccuracyUpToOneDigit    FractionAccuracy = -1
	FractionAccuracy_fractionAccuracyUpToTwoDigits   FractionAccuracy = -2
	FractionAccuracy_fractionAccuracyUpToThreeDigits FractionAccuracy = -3
	FractionAccuracy_fractionAccuracyHalves          FractionAccuracy = 2
	FractionAccuracy_fractionAccuracyQuarters        FractionAccuracy = 4
	FractionAccuracy_fractionAccuracyEighths         FractionAccuracy = 8
	FractionAccuracy_fractionAccuracySixteenths      FractionAccuracy = 16
	FractionAccuracy_fractionAccuracyTenths          FractionAccuracy = 10
	FractionAccuracy_fractionAccuracyHundredths      FractionAccuracy = 100
)

// Enum value maps for FractionAccuracy.
var (
	FractionAccuracy_name = map[int32]string{
		0:   "fractionAccuracyConflicting",
		-1:  "fractionAccuracyUpToOneDigit",
		-2:  "fractionAccuracyUpToTwoDigits",
		-3:  "fractionAccuracyUpToThreeDigits",
		2:   "fractionAccuracyHalves",
		4:   "fractionAccuracyQuarters",
		8:   "fractionAccuracyEighths",
		16:  "fractionAccuracySixteenths",
		10:  "fractionAccuracyTenths",
		100: "fractionAccuracyHundredths",
	}
	FractionAccuracy_value = map[string]int32{
		"fractionAccuracyConflicting":     0,
		"fractionAccuracyUpToOneDigit":    -1,
		"fractionAccuracyUpToTwoDigits":   -2,
		"fractionAccuracyUpToThreeDigits": -3,
		"fractionAccuracyHalves":          2,
		"fractionAccuracyQuarters":        4,
		"fractionAccuracyEighths":         8,
		"fractionAccuracySixteenths":      16,
		"fractionAccuracyTenths":          10,
		"fractionAccuracyHundredths":      100,
	}
)

func (x FractionAccuracy) Enum() *FractionAccuracy {
	p := new(FractionAccuracy)
	*p = x
	return p
}

func (x FractionAccuracy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FractionAccuracy) Descriptor() protoreflect.EnumDescriptor {
	return file_TSCHArchives_Common_proto_enumTypes[6].Descriptor()
}

func (FractionAccuracy) Type() protoreflect.EnumType {
	return &file_TSCHArchives_Common_proto_enumTypes[6]
}

func (x FractionAccuracy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *FractionAccuracy) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = FractionAccuracy(num)
	return nil
}

// Deprecated: Use FractionAccuracy.Descriptor instead.
func (FractionAccuracy) EnumDescriptor() ([]byte, []int) {
	return file_TSCHArchives_Common_proto_rawDescGZIP(), []int{6}
}

type RectArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Origin *Point `protobuf:"bytes,1,req,name=origin" json:"origin,omitempty"`
	Size   *Size  `protobuf:"bytes,2,req,name=size" json:"size,omitempty"`
}

func (x *RectArchive) Reset() {
	*x = RectArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHArchives_Common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RectArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RectArchive) ProtoMessage() {}

func (x *RectArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHArchives_Common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RectArchive.ProtoReflect.Descriptor instead.
func (*RectArchive) Descriptor() ([]byte, []int) {
	return file_TSCHArchives_Common_proto_rawDescGZIP(), []int{0}
}

func (x *RectArchive) GetOrigin() *Point {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *RectArchive) GetSize() *Size {
	if x != nil {
		return x.Size
	}
	return nil
}

type ChartsNSNumberDoubleArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumberArchive *float64 `protobuf:"fixed64,1,opt,name=number_archive,json=numberArchive" json:"number_archive,omitempty"`
}

func (x *ChartsNSNumberDoubleArchive) Reset() {
	*x = ChartsNSNumberDoubleArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHArchives_Common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartsNSNumberDoubleArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartsNSNumberDoubleArchive) ProtoMessage() {}

func (x *ChartsNSNumberDoubleArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHArchives_Common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartsNSNumberDoubleArchive.ProtoReflect.Descriptor instead.
func (*ChartsNSNumberDoubleArchive) Descriptor() ([]byte, []int) {
	return file_TSCHArchives_Common_proto_rawDescGZIP(), []int{1}
}

func (x *ChartsNSNumberDoubleArchive) GetNumberArchive() float64 {
	if x != nil && x.NumberArchive != nil {
		return *x.NumberArchive
	}
	return 0
}

type ChartsNSArrayOfNSNumberDoubleArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Numbers []float64 `protobuf:"fixed64,1,rep,name=numbers" json:"numbers,omitempty"`
}

func (x *ChartsNSArrayOfNSNumberDoubleArchive) Reset() {
	*x = ChartsNSArrayOfNSNumberDoubleArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHArchives_Common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartsNSArrayOfNSNumberDoubleArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartsNSArrayOfNSNumberDoubleArchive) ProtoMessage() {}

func (x *ChartsNSArrayOfNSNumberDoubleArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHArchives_Common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartsNSArrayOfNSNumberDoubleArchive.ProtoReflect.Descriptor instead.
func (*ChartsNSArrayOfNSNumberDoubleArchive) Descriptor() ([]byte, []int) {
	return file_TSCHArchives_Common_proto_rawDescGZIP(), []int{2}
}

func (x *ChartsNSArrayOfNSNumberDoubleArchive) GetNumbers() []float64 {
	if x != nil {
		return x.Numbers
	}
	return nil
}

type DEPRECATEDChart3DFillArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fill          *FillArchive                 `protobuf:"bytes,1,opt,name=fill" json:"fill,omitempty"`
	Lightingmodel *Chart3DLightingModelArchive `protobuf:"bytes,2,opt,name=lightingmodel" json:"lightingmodel,omitempty"`
	TexturesetId  *string                      `protobuf:"bytes,3,opt,name=textureset_id,json=texturesetId" json:"textureset_id,omitempty"`
	FillType      *FillPropertyType            `protobuf:"varint,4,opt,name=fill_type,json=fillType,enum=TSCH.FillPropertyType" json:"fill_type,omitempty"`
	SeriesIndex   *uint32                      `protobuf:"varint,5,opt,name=series_index,json=seriesIndex" json:"series_index,omitempty"`
}

func (x *DEPRECATEDChart3DFillArchive) Reset() {
	*x = DEPRECATEDChart3DFillArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHArchives_Common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DEPRECATEDChart3DFillArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DEPRECATEDChart3DFillArchive) ProtoMessage() {}

func (x *DEPRECATEDChart3DFillArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHArchives_Common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DEPRECATEDChart3DFillArchive.ProtoReflect.Descriptor instead.
func (*DEPRECATEDChart3DFillArchive) Descriptor() ([]byte, []int) {
	return file_TSCHArchives_Common_proto_rawDescGZIP(), []int{3}
}

func (x *DEPRECATEDChart3DFillArchive) GetFill() *FillArchive {
	if x != nil {
		return x.Fill
	}
	return nil
}

func (x *DEPRECATEDChart3DFillArchive) GetLightingmodel() *Chart3DLightingModelArchive {
	if x != nil {
		return x.Lightingmodel
	}
	return nil
}

func (x *DEPRECATEDChart3DFillArchive) GetTexturesetId() string {
	if x != nil && x.TexturesetId != nil {
		return *x.TexturesetId
	}
	return ""
}

func (x *DEPRECATEDChart3DFillArchive) GetFillType() FillPropertyType {
	if x != nil && x.FillType != nil {
		return *x.FillType
	}
	return FillPropertyType_fillPropertyTypeUndefined
}

func (x *DEPRECATEDChart3DFillArchive) GetSeriesIndex() uint32 {
	if x != nil && x.SeriesIndex != nil {
		return *x.SeriesIndex
	}
	return 0
}

type TSCHCommonChartStyleArchive struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	Super *StyleArchive `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
}

func (x *TSCHCommonChartStyleArchive) Reset() {
	*x = TSCHCommonChartStyleArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHArchives_Common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSCHCommonChartStyleArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSCHCommonChartStyleArchive) ProtoMessage() {}

func (x *TSCHCommonChartStyleArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHArchives_Common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSCHCommonChartStyleArchive.ProtoReflect.Descriptor instead.
func (*TSCHCommonChartStyleArchive) Descriptor() ([]byte, []int) {
	return file_TSCHArchives_Common_proto_rawDescGZIP(), []int{4}
}

func (x *TSCHCommonChartStyleArchive) GetSuper() *StyleArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

type TSCHCommonChartNonStyleArchive struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	Super *StyleArchive `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
}

func (x *TSCHCommonChartNonStyleArchive) Reset() {
	*x = TSCHCommonChartNonStyleArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHArchives_Common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSCHCommonChartNonStyleArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSCHCommonChartNonStyleArchive) ProtoMessage() {}

func (x *TSCHCommonChartNonStyleArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHArchives_Common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSCHCommonChartNonStyleArchive.ProtoReflect.Descriptor instead.
func (*TSCHCommonChartNonStyleArchive) Descriptor() ([]byte, []int) {
	return file_TSCHArchives_Common_proto_rawDescGZIP(), []int{5}
}

func (x *TSCHCommonChartNonStyleArchive) GetSuper() *StyleArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

type TSCHCommonLegendStyleArchive struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	Super *StyleArchive `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
}

func (x *TSCHCommonLegendStyleArchive) Reset() {
	*x = TSCHCommonLegendStyleArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHArchives_Common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSCHCommonLegendStyleArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSCHCommonLegendStyleArchive) ProtoMessage() {}

func (x *TSCHCommonLegendStyleArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHArchives_Common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSCHCommonLegendStyleArchive.ProtoReflect.Descriptor instead.
func (*TSCHCommonLegendStyleArchive) Descriptor() ([]byte, []int) {
	return file_TSCHArchives_Common_proto_rawDescGZIP(), []int{6}
}

func (x *TSCHCommonLegendStyleArchive) GetSuper() *StyleArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

type TSCHCommonLegendNonStyleArchive struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	Super *StyleArchive `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
}

func (x *TSCHCommonLegendNonStyleArchive) Reset() {
	*x = TSCHCommonLegendNonStyleArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHArchives_Common_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSCHCommonLegendNonStyleArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSCHCommonLegendNonStyleArchive) ProtoMessage() {}

func (x *TSCHCommonLegendNonStyleArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHArchives_Common_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSCHCommonLegendNonStyleArchive.ProtoReflect.Descriptor instead.
func (*TSCHCommonLegendNonStyleArchive) Descriptor() ([]byte, []int) {
	return file_TSCHArchives_Common_proto_rawDescGZIP(), []int{7}
}

func (x *TSCHCommonLegendNonStyleArchive) GetSuper() *StyleArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

type TSCHCommonChartAxisStyleArchive struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	Super *StyleArchive `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
}

func (x *TSCHCommonChartAxisStyleArchive) Reset() {
	*x = TSCHCommonChartAxisStyleArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHArchives_Common_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSCHCommonChartAxisStyleArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSCHCommonChartAxisStyleArchive) ProtoMessage() {}

func (x *TSCHCommonChartAxisStyleArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHArchives_Common_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSCHCommonChartAxisStyleArchive.ProtoReflect.Descriptor instead.
func (*TSCHCommonChartAxisStyleArchive) Descriptor() ([]byte, []int) {
	return file_TSCHArchives_Common_proto_rawDescGZIP(), []int{8}
}

func (x *TSCHCommonChartAxisStyleArchive) GetSuper() *StyleArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

type TSCHCommonChartAxisNonStyleArchive struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	Super *StyleArchive `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
}

func (x *TSCHCommonChartAxisNonStyleArchive) Reset() {
	*x = TSCHCommonChartAxisNonStyleArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHArchives_Common_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSCHCommonChartAxisNonStyleArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSCHCommonChartAxisNonStyleArchive) ProtoMessage() {}

func (x *TSCHCommonChartAxisNonStyleArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHArchives_Common_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSCHCommonChartAxisNonStyleArchive.ProtoReflect.Descriptor instead.
func (*TSCHCommonChartAxisNonStyleArchive) Descriptor() ([]byte, []int) {
	return file_TSCHArchives_Common_proto_rawDescGZIP(), []int{9}
}

func (x *TSCHCommonChartAxisNonStyleArchive) GetSuper() *StyleArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

type TSCHCommonChartSeriesStyleArchive struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	Super *StyleArchive `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
}

func (x *TSCHCommonChartSeriesStyleArchive) Reset() {
	*x = TSCHCommonChartSeriesStyleArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHArchives_Common_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSCHCommonChartSeriesStyleArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSCHCommonChartSeriesStyleArchive) ProtoMessage() {}

func (x *TSCHCommonChartSeriesStyleArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHArchives_Common_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSCHCommonChartSeriesStyleArchive.ProtoReflect.Descriptor instead.
func (*TSCHCommonChartSeriesStyleArchive) Descriptor() ([]byte, []int) {
	return file_TSCHArchives_Common_proto_rawDescGZIP(), []int{10}
}

func (x *TSCHCommonChartSeriesStyleArchive) GetSuper() *StyleArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

type TSCHCommonChartSeriesNonStyleArchive struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	Super *StyleArchive `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
}

func (x *TSCHCommonChartSeriesNonStyleArchive) Reset() {
	*x = TSCHCommonChartSeriesNonStyleArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHArchives_Common_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSCHCommonChartSeriesNonStyleArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSCHCommonChartSeriesNonStyleArchive) ProtoMessage() {}

func (x *TSCHCommonChartSeriesNonStyleArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHArchives_Common_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSCHCommonChartSeriesNonStyleArchive.ProtoReflect.Descriptor instead.
func (*TSCHCommonChartSeriesNonStyleArchive) Descriptor() ([]byte, []int) {
	return file_TSCHArchives_Common_proto_rawDescGZIP(), []int{11}
}

func (x *TSCHCommonChartSeriesNonStyleArchive) GetSuper() *StyleArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

type GridValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumericValue  *float64 `protobuf:"fixed64,1,opt,name=numeric_value,json=numericValue" json:"numeric_value,omitempty"`
	DateValue_1_0 *float64 `protobuf:"fixed64,2,opt,name=date_value_1_0,json=dateValue10" json:"date_value_1_0,omitempty"`
	DurationValue *float64 `protobuf:"fixed64,3,opt,name=duration_value,json=durationValue" json:"duration_value,omitempty"`
	DateValue     *float64 `protobuf:"fixed64,4,opt,name=date_value,json=dateValue" json:"date_value,omitempty"`
}

func (x *GridValue) Reset() {
	*x = GridValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHArchives_Common_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GridValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GridValue) ProtoMessage() {}

func (x *GridValue) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHArchives_Common_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GridValue.ProtoReflect.Descriptor instead.
func (*GridValue) Descriptor() ([]byte, []int) {
	return file_TSCHArchives_Common_proto_rawDescGZIP(), []int{12}
}

func (x *GridValue) GetNumericValue() float64 {
	if x != nil && x.NumericValue != nil {
		return *x.NumericValue
	}
	return 0
}

func (x *GridValue) GetDateValue_1_0() float64 {
	if x != nil && x.DateValue_1_0 != nil {
		return *x.DateValue_1_0
	}
	return 0
}

func (x *GridValue) GetDurationValue() float64 {
	if x != nil && x.DurationValue != nil {
		return *x.DurationValue
	}
	return 0
}

func (x *GridValue) GetDateValue() float64 {
	if x != nil && x.DateValue != nil {
		return *x.DateValue
	}
	return 0
}

type GridRow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []*GridValue `protobuf:"bytes,1,rep,name=value" json:"value,omitempty"`
}

func (x *GridRow) Reset() {
	*x = GridRow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHArchives_Common_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GridRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GridRow) ProtoMessage() {}

func (x *GridRow) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHArchives_Common_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GridRow.ProtoReflect.Descriptor instead.
func (*GridRow) Descriptor() ([]byte, []int) {
	return file_TSCHArchives_Common_proto_rawDescGZIP(), []int{13}
}

func (x *GridRow) GetValue() []*GridValue {
	if x != nil {
		return x.Value
	}
	return nil
}

type TSCHCommonReferenceLineStyleArchive struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	Super *StyleArchive `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
}

func (x *TSCHCommonReferenceLineStyleArchive) Reset() {
	*x = TSCHCommonReferenceLineStyleArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHArchives_Common_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSCHCommonReferenceLineStyleArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSCHCommonReferenceLineStyleArchive) ProtoMessage() {}

func (x *TSCHCommonReferenceLineStyleArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHArchives_Common_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSCHCommonReferenceLineStyleArchive.ProtoReflect.Descriptor instead.
func (*TSCHCommonReferenceLineStyleArchive) Descriptor() ([]byte, []int) {
	return file_TSCHArchives_Common_proto_rawDescGZIP(), []int{14}
}

func (x *TSCHCommonReferenceLineStyleArchive) GetSuper() *StyleArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

type TSCHCommonReferenceLineNonStyleArchive struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	Super *StyleArchive `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
}

func (x *TSCHCommonReferenceLineNonStyleArchive) Reset() {
	*x = TSCHCommonReferenceLineNonStyleArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHArchives_Common_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSCHCommonReferenceLineNonStyleArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSCHCommonReferenceLineNonStyleArchive) ProtoMessage() {}

func (x *TSCHCommonReferenceLineNonStyleArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHArchives_Common_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSCHCommonReferenceLineNonStyleArchive.ProtoReflect.Descriptor instead.
func (*TSCHCommonReferenceLineNonStyleArchive) Descriptor() ([]byte, []int) {
	return file_TSCHArchives_Common_proto_rawDescGZIP(), []int{15}
}

func (x *TSCHCommonReferenceLineNonStyleArchive) GetSuper() *StyleArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

var File_TSCHArchives_Common_proto protoreflect.FileDescriptor

var file_TSCHArchives_Common_proto_rawDesc = []byte{
	0x0a, 0x19, 0x54, 0x53, 0x43, 0x48, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x5f, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x54, 0x53, 0x43,
	0x48, 0x1a, 0x11, 0x54, 0x53, 0x50, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x54, 0x53, 0x44, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x54, 0x53, 0x53, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x54, 0x53, 0x43, 0x48,
	0x33, 0x44, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x50, 0x0a, 0x0b, 0x52, 0x65, 0x63, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12,
	0x22, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x22, 0x44, 0x0a, 0x1b, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x4e, 0x53, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x22, 0x40, 0x0a, 0x24, 0x43, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x4e, 0x53, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4f, 0x66, 0x4e, 0x53, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x01, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0x8a, 0x02, 0x0a, 0x1c, 0x44,
	0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x43, 0x68, 0x61, 0x72, 0x74, 0x33, 0x44,
	0x46, 0x69, 0x6c, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x66,
	0x69, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54, 0x53, 0x44, 0x2e,
	0x46, 0x69, 0x6c, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c,
	0x6c, 0x12, 0x47, 0x0a, 0x0d, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0d, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x69, 0x6e, 0x67, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x65,
	0x78, 0x74, 0x75, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x33, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x51, 0x0a, 0x1b, 0x54, 0x53, 0x43, 0x48, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x54, 0x53, 0x53, 0x2e, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x2a,
	0x09, 0x08, 0x90, 0x4e, 0x10, 0x80, 0x80, 0x80, 0x80, 0x02, 0x22, 0x54, 0x0a, 0x1e, 0x54, 0x53,
	0x43, 0x48, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x4e, 0x6f, 0x6e,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x27, 0x0a, 0x05,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x54, 0x53,
	0x53, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x2a, 0x09, 0x08, 0x90, 0x4e, 0x10, 0x80, 0x80, 0x80, 0x80, 0x02,
	0x22, 0x52, 0x0a, 0x1c, 0x54, 0x53, 0x43, 0x48, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4c, 0x65,
	0x67, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x12, 0x27, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x54, 0x53, 0x53, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x2a, 0x09, 0x08, 0x90, 0x4e, 0x10, 0x80,
	0x80, 0x80, 0x80, 0x02, 0x22, 0x55, 0x0a, 0x1f, 0x54, 0x53, 0x43, 0x48, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x4c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x4e, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x54, 0x53, 0x53, 0x2e, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x2a, 0x09, 0x08, 0x90, 0x4e, 0x10, 0x80, 0x80, 0x80, 0x80, 0x02, 0x22, 0x55, 0x0a, 0x1f, 0x54,
	0x53, 0x43, 0x48, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x41, 0x78,
	0x69, 0x73, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x27,
	0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x54, 0x53, 0x53, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x2a, 0x09, 0x08, 0x90, 0x4e, 0x10, 0x80, 0x80, 0x80,
	0x80, 0x02, 0x22, 0x58, 0x0a, 0x22, 0x54, 0x53, 0x43, 0x48, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x41, 0x78, 0x69, 0x73, 0x4e, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x54, 0x53, 0x53, 0x2e, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x2a, 0x09, 0x08, 0x90, 0x4e, 0x10, 0x80, 0x80, 0x80, 0x80, 0x02, 0x22, 0x57, 0x0a, 0x21,
	0x54, 0x53, 0x43, 0x48, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x12, 0x27, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x54, 0x53, 0x53, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x2a, 0x09, 0x08, 0x90, 0x4e, 0x10,
	0x80, 0x80, 0x80, 0x80, 0x02, 0x22, 0x5a, 0x0a, 0x24, 0x54, 0x53, 0x43, 0x48, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4e, 0x6f,
	0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x27, 0x0a,
	0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x54,
	0x53, 0x53, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x2a, 0x09, 0x08, 0x90, 0x4e, 0x10, 0x80, 0x80, 0x80, 0x80,
	0x02, 0x22, 0x9b, 0x01, 0x0a, 0x09, 0x47, 0x72, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x31, 0x5f, 0x30, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x64, 0x61,
	0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x30, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0d, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x30, 0x0a, 0x07, 0x47, 0x72, 0x69, 0x64, 0x52, 0x6f, 0x77, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x54, 0x53, 0x43, 0x48,
	0x2e, 0x47, 0x72, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x59, 0x0a, 0x23, 0x54, 0x53, 0x43, 0x48, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x54, 0x53, 0x53, 0x2e, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x2a, 0x09, 0x08, 0x90, 0x4e, 0x10, 0x80, 0x80, 0x80, 0x80, 0x02, 0x22, 0x5c, 0x0a, 0x26,
	0x54, 0x53, 0x43, 0x48, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x54, 0x53, 0x53, 0x2e, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x2a,
	0x09, 0x08, 0x90, 0x4e, 0x10, 0x80, 0x80, 0x80, 0x80, 0x02, 0x2a, 0xbc, 0x05, 0x0a, 0x09, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x75, 0x6e, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x64, 0x43, 0x68, 0x61, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00,
	0x12, 0x15, 0x0a, 0x11, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x32, 0x44, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x62, 0x61, 0x72, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x32, 0x44, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x6c,
	0x69, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x32, 0x44, 0x10, 0x03,
	0x12, 0x13, 0x0a, 0x0f, 0x61, 0x72, 0x65, 0x61, 0x43, 0x68, 0x61, 0x72, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x32, 0x44, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x70, 0x69, 0x65, 0x43, 0x68, 0x61, 0x72,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x32, 0x44, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x32, 0x44, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x65, 0x64, 0x42, 0x61, 0x72, 0x43, 0x68, 0x61, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x32, 0x44,
	0x10, 0x07, 0x12, 0x1a, 0x0a, 0x16, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x41, 0x72, 0x65,
	0x61, 0x43, 0x68, 0x61, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x32, 0x44, 0x10, 0x08, 0x12, 0x16,
	0x0a, 0x12, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x32, 0x44, 0x10, 0x09, 0x12, 0x14, 0x0a, 0x10, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x32, 0x44, 0x10, 0x0a, 0x12, 0x16, 0x0a, 0x12,
	0x74, 0x77, 0x6f, 0x41, 0x78, 0x69, 0x73, 0x43, 0x68, 0x61, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x32, 0x44, 0x10, 0x0b, 0x12, 0x15, 0x0a, 0x11, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x33, 0x44, 0x10, 0x0c, 0x12, 0x12, 0x0a, 0x0e, 0x62,
	0x61, 0x72, 0x43, 0x68, 0x61, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x33, 0x44, 0x10, 0x0d, 0x12,
	0x13, 0x0a, 0x0f, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x33, 0x44, 0x10, 0x0e, 0x12, 0x13, 0x0a, 0x0f, 0x61, 0x72, 0x65, 0x61, 0x43, 0x68, 0x61, 0x72,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x33, 0x44, 0x10, 0x0f, 0x12, 0x12, 0x0a, 0x0e, 0x70, 0x69, 0x65,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x33, 0x44, 0x10, 0x10, 0x12, 0x1c, 0x0a,
	0x18, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x33, 0x44, 0x10, 0x11, 0x12, 0x19, 0x0a, 0x15, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x61, 0x72, 0x43, 0x68, 0x61, 0x72, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x33, 0x44, 0x10, 0x12, 0x12, 0x1a, 0x0a, 0x16, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x65,
	0x64, 0x41, 0x72, 0x65, 0x61, 0x43, 0x68, 0x61, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x33, 0x44,
	0x10, 0x13, 0x12, 0x1e, 0x0a, 0x1a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x44, 0x61, 0x74, 0x61, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x32, 0x44,
	0x10, 0x14, 0x12, 0x1b, 0x0a, 0x17, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x44, 0x61, 0x74, 0x61, 0x42,
	0x61, 0x72, 0x43, 0x68, 0x61, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x32, 0x44, 0x10, 0x15, 0x12,
	0x15, 0x0a, 0x11, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x32, 0x44, 0x10, 0x16, 0x12, 0x1f, 0x0a, 0x1b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x32, 0x44, 0x10, 0x17, 0x12, 0x1e, 0x0a, 0x1a, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x32, 0x44, 0x10, 0x18, 0x12, 0x14, 0x0a, 0x10, 0x64, 0x6f, 0x6e, 0x75, 0x74,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x32, 0x44, 0x10, 0x19, 0x12, 0x14, 0x0a,
	0x10, 0x64, 0x6f, 0x6e, 0x75, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x33,
	0x44, 0x10, 0x1a, 0x12, 0x14, 0x0a, 0x10, 0x72, 0x61, 0x64, 0x61, 0x72, 0x43, 0x68, 0x61, 0x72,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x32, 0x44, 0x10, 0x1b, 0x2a, 0xa1, 0x01, 0x0a, 0x08, 0x41, 0x78,
	0x69, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x61, 0x78, 0x69, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0f, 0x0a,
	0x0b, 0x61, 0x78, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x78, 0x10, 0x01, 0x12, 0x0f,
	0x0a, 0x0b, 0x61, 0x78, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x79, 0x10, 0x02, 0x12,
	0x11, 0x0a, 0x0d, 0x61, 0x78, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x70, 0x69, 0x65,
	0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x61, 0x78, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x61, 0x78, 0x69, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73,
	0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x61, 0x78, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x70, 0x6f, 0x6c, 0x61, 0x72, 0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x10, 0x06, 0x2a, 0x67, 0x0a,
	0x0d, 0x53, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1a,
	0x0a, 0x16, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x73, 0x63,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x73, 0x65, 0x70,
	0x61, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x78, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x73, 0x63, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x5f, 0x78, 0x10, 0x02, 0x2a, 0x6c, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x18, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x79, 0x5f, 0x72,
	0x6f, 0x77, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x10, 0x02, 0x2a, 0xe3, 0x01, 0x0a, 0x0f, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x10,
	0x01, 0x12, 0x1d, 0x0a, 0x19, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x10, 0x02,
	0x12, 0x1d, 0x0a, 0x19, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x53, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x10, 0x03, 0x12,
	0x1b, 0x0a, 0x17, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x61, 0x73, 0x65, 0x10, 0x05, 0x12, 0x23, 0x0a, 0x16, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10,
	0x99, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x2a, 0xba, 0x01, 0x0a, 0x13, 0x4e,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x4d, 0x69, 0x6e, 0x75, 0x73, 0x10, 0x00,
	0x12, 0x1a, 0x0a, 0x16, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x65, 0x64, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e,
	0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x65, 0x73, 0x10, 0x02,
	0x12, 0x28, 0x0a, 0x24, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x65, 0x64, 0x41, 0x6e, 0x64, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x65, 0x73, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x6e, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x04, 0x2a, 0xeb, 0x02, 0x0a, 0x10, 0x46, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x12, 0x1f, 0x0a, 0x1b,
	0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79,
	0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x12, 0x29, 0x0a,
	0x1c, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63,
	0x79, 0x55, 0x70, 0x54, 0x6f, 0x4f, 0x6e, 0x65, 0x44, 0x69, 0x67, 0x69, 0x74, 0x10, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x2a, 0x0a, 0x1d, 0x66, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x55, 0x70, 0x54, 0x6f,
	0x54, 0x77, 0x6f, 0x44, 0x69, 0x67, 0x69, 0x74, 0x73, 0x10, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0x01, 0x12, 0x2c, 0x0a, 0x1f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x55, 0x70, 0x54, 0x6f, 0x54, 0x68, 0x72, 0x65,
	0x65, 0x44, 0x69, 0x67, 0x69, 0x74, 0x73, 0x10, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63,
	0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x48, 0x61, 0x6c, 0x76, 0x65, 0x73, 0x10, 0x02, 0x12, 0x1c,
	0x0a, 0x18, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61,
	0x63, 0x79, 0x51, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x73, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17,
	0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79,
	0x45, 0x69, 0x67, 0x68, 0x74, 0x68, 0x73, 0x10, 0x08, 0x12, 0x1e, 0x0a, 0x1a, 0x66, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x53, 0x69, 0x78,
	0x74, 0x65, 0x65, 0x6e, 0x74, 0x68, 0x73, 0x10, 0x10, 0x12, 0x1a, 0x0a, 0x16, 0x66, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x54, 0x65, 0x6e,
	0x74, 0x68, 0x73, 0x10, 0x0a, 0x12, 0x1e, 0x0a, 0x1a, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x48, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64,
	0x74, 0x68, 0x73, 0x10, 0x64, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x2f, 0x6b, 0x70, 0x62,
}

var (
	file_TSCHArchives_Common_proto_rawDescOnce sync.Once
	file_TSCHArchives_Common_proto_rawDescData = file_TSCHArchives_Common_proto_rawDesc
)

func file_TSCHArchives_Common_proto_rawDescGZIP() []byte {
	file_TSCHArchives_Common_proto_rawDescOnce.Do(func() {
		file_TSCHArchives_Common_proto_rawDescData = protoimpl.X.CompressGZIP(file_TSCHArchives_Common_proto_rawDescData)
	})
	return file_TSCHArchives_Common_proto_rawDescData
}

var file_TSCHArchives_Common_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_TSCHArchives_Common_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_TSCHArchives_Common_proto_goTypes = []interface{}{
	(ChartType)(0),                                 // 0: TSCH.ChartType
	(AxisType)(0),                                  // 1: TSCH.AxisType
	(ScatterFormat)(0),                             // 2: TSCH.ScatterFormat
	(SeriesDirection)(0),                           // 3: TSCH.SeriesDirection
	(NumberValueType)(0),                           // 4: TSCH.NumberValueType
	(NegativeNumberStyle)(0),                       // 5: TSCH.NegativeNumberStyle
	(FractionAccuracy)(0),                          // 6: TSCH.FractionAccuracy
	(*RectArchive)(nil),                            // 7: TSCH.RectArchive
	(*ChartsNSNumberDoubleArchive)(nil),            // 8: TSCH.ChartsNSNumberDoubleArchive
	(*ChartsNSArrayOfNSNumberDoubleArchive)(nil),   // 9: TSCH.ChartsNSArrayOfNSNumberDoubleArchive
	(*DEPRECATEDChart3DFillArchive)(nil),           // 10: TSCH.DEPRECATEDChart3DFillArchive
	(*TSCHCommonChartStyleArchive)(nil),            // 11: TSCH.TSCHCommonChartStyleArchive
	(*TSCHCommonChartNonStyleArchive)(nil),         // 12: TSCH.TSCHCommonChartNonStyleArchive
	(*TSCHCommonLegendStyleArchive)(nil),           // 13: TSCH.TSCHCommonLegendStyleArchive
	(*TSCHCommonLegendNonStyleArchive)(nil),        // 14: TSCH.TSCHCommonLegendNonStyleArchive
	(*TSCHCommonChartAxisStyleArchive)(nil),        // 15: TSCH.TSCHCommonChartAxisStyleArchive
	(*TSCHCommonChartAxisNonStyleArchive)(nil),     // 16: TSCH.TSCHCommonChartAxisNonStyleArchive
	(*TSCHCommonChartSeriesStyleArchive)(nil),      // 17: TSCH.TSCHCommonChartSeriesStyleArchive
	(*TSCHCommonChartSeriesNonStyleArchive)(nil),   // 18: TSCH.TSCHCommonChartSeriesNonStyleArchive
	(*GridValue)(nil),                              // 19: TSCH.GridValue
	(*GridRow)(nil),                                // 20: TSCH.GridRow
	(*TSCHCommonReferenceLineStyleArchive)(nil),    // 21: TSCH.TSCHCommonReferenceLineStyleArchive
	(*TSCHCommonReferenceLineNonStyleArchive)(nil), // 22: TSCH.TSCHCommonReferenceLineNonStyleArchive
	(*Point)(nil),                                  // 23: TSP.Point
	(*Size)(nil),                                   // 24: TSP.Size
	(*FillArchive)(nil),                            // 25: TSD.FillArchive
	(*Chart3DLightingModelArchive)(nil),            // 26: TSCH.Chart3DLightingModelArchive
	(FillPropertyType)(0),                          // 27: TSCH.FillPropertyType
	(*StyleArchive)(nil),                           // 28: TSS.StyleArchive
}
var file_TSCHArchives_Common_proto_depIdxs = []int32{
	23, // 0: TSCH.RectArchive.origin:type_name -> TSP.Point
	24, // 1: TSCH.RectArchive.size:type_name -> TSP.Size
	25, // 2: TSCH.DEPRECATEDChart3DFillArchive.fill:type_name -> TSD.FillArchive
	26, // 3: TSCH.DEPRECATEDChart3DFillArchive.lightingmodel:type_name -> TSCH.Chart3DLightingModelArchive
	27, // 4: TSCH.DEPRECATEDChart3DFillArchive.fill_type:type_name -> TSCH.FillPropertyType
	28, // 5: TSCH.TSCHCommonChartStyleArchive.super:type_name -> TSS.StyleArchive
	28, // 6: TSCH.TSCHCommonChartNonStyleArchive.super:type_name -> TSS.StyleArchive
	28, // 7: TSCH.TSCHCommonLegendStyleArchive.super:type_name -> TSS.StyleArchive
	28, // 8: TSCH.TSCHCommonLegendNonStyleArchive.super:type_name -> TSS.StyleArchive
	28, // 9: TSCH.TSCHCommonChartAxisStyleArchive.super:type_name -> TSS.StyleArchive
	28, // 10: TSCH.TSCHCommonChartAxisNonStyleArchive.super:type_name -> TSS.StyleArchive
	28, // 11: TSCH.TSCHCommonChartSeriesStyleArchive.super:type_name -> TSS.StyleArchive
	28, // 12: TSCH.TSCHCommonChartSeriesNonStyleArchive.super:type_name -> TSS.StyleArchive
	19, // 13: TSCH.GridRow.value:type_name -> TSCH.GridValue
	28, // 14: TSCH.TSCHCommonReferenceLineStyleArchive.super:type_name -> TSS.StyleArchive
	28, // 15: TSCH.TSCHCommonReferenceLineNonStyleArchive.super:type_name -> TSS.StyleArchive
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_TSCHArchives_Common_proto_init() }
func file_TSCHArchives_Common_proto_init() {
	if File_TSCHArchives_Common_proto != nil {
		return
	}
	file_TSPMessages_proto_init()
	file_TSDArchives_proto_init()
	file_TSSArchives_proto_init()
	file_TSCH3DArchives_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_TSCHArchives_Common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RectArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHArchives_Common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartsNSNumberDoubleArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHArchives_Common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartsNSArrayOfNSNumberDoubleArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHArchives_Common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DEPRECATEDChart3DFillArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHArchives_Common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSCHCommonChartStyleArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_TSCHArchives_Common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSCHCommonChartNonStyleArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_TSCHArchives_Common_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSCHCommonLegendStyleArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_TSCHArchives_Common_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSCHCommonLegendNonStyleArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_TSCHArchives_Common_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSCHCommonChartAxisStyleArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_TSCHArchives_Common_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSCHCommonChartAxisNonStyleArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_TSCHArchives_Common_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSCHCommonChartSeriesStyleArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_TSCHArchives_Common_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSCHCommonChartSeriesNonStyleArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_TSCHArchives_Common_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GridValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHArchives_Common_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GridRow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHArchives_Common_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSCHCommonReferenceLineStyleArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_TSCHArchives_Common_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSCHCommonReferenceLineNonStyleArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_TSCHArchives_Common_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_TSCHArchives_Common_proto_goTypes,
		DependencyIndexes: file_TSCHArchives_Common_proto_depIdxs,
		EnumInfos:         file_TSCHArchives_Common_proto_enumTypes,
		MessageInfos:      file_TSCHArchives_Common_proto_msgTypes,
	}.Build()
	File_TSCHArchives_Common_proto = out.File
	file_TSCHArchives_Common_proto_rawDesc = nil
	file_TSCHArchives_Common_proto_goTypes = nil
	file_TSCHArchives_Common_proto_depIdxs = nil
}
