// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: TSCHArchives.proto

package kpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChartDrawableArchive struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	Super *DrawableArchive `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
}

func (x *ChartDrawableArchive) Reset() {
	*x = ChartDrawableArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHArchives_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartDrawableArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartDrawableArchive) ProtoMessage() {}

func (x *ChartDrawableArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHArchives_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartDrawableArchive.ProtoReflect.Descriptor instead.
func (*ChartDrawableArchive) Descriptor() ([]byte, []int) {
	return file_TSCHArchives_proto_rawDescGZIP(), []int{0}
}

func (x *ChartDrawableArchive) GetSuper() *DrawableArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

type ChartArchive struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	ChartType                           *ChartType            `protobuf:"varint,1,opt,name=chart_type,json=chartType,enum=TSCH.ChartType" json:"chart_type,omitempty"`
	ScatterFormat                       *ScatterFormat        `protobuf:"varint,2,opt,name=scatter_format,json=scatterFormat,enum=TSCH.ScatterFormat" json:"scatter_format,omitempty"`
	LegendFrame                         *RectArchive          `protobuf:"bytes,3,opt,name=legend_frame,json=legendFrame" json:"legend_frame,omitempty"`
	Preset                              *Reference            `protobuf:"bytes,4,opt,name=preset" json:"preset,omitempty"`
	SeriesDirection                     *SeriesDirection      `protobuf:"varint,5,opt,name=series_direction,json=seriesDirection,enum=TSCH.SeriesDirection" json:"series_direction,omitempty"`
	ContainsDefaultData                 *bool                 `protobuf:"varint,6,opt,name=contains_default_data,json=containsDefaultData" json:"contains_default_data,omitempty"`
	Grid                                *ChartGridArchive     `protobuf:"bytes,7,opt,name=grid" json:"grid,omitempty"`
	Mediator                            *Reference            `protobuf:"bytes,8,opt,name=mediator" json:"mediator,omitempty"`
	ChartStyle                          *Reference            `protobuf:"bytes,9,opt,name=chart_style,json=chartStyle" json:"chart_style,omitempty"`
	ChartNonStyle                       *Reference            `protobuf:"bytes,10,opt,name=chart_non_style,json=chartNonStyle" json:"chart_non_style,omitempty"`
	LegendStyle                         *Reference            `protobuf:"bytes,11,opt,name=legend_style,json=legendStyle" json:"legend_style,omitempty"`
	LegendNonStyle                      *Reference            `protobuf:"bytes,12,opt,name=legend_non_style,json=legendNonStyle" json:"legend_non_style,omitempty"`
	ValueAxisStyles                     []*Reference          `protobuf:"bytes,13,rep,name=value_axis_styles,json=valueAxisStyles" json:"value_axis_styles,omitempty"`
	ValueAxisNonstyles                  []*Reference          `protobuf:"bytes,14,rep,name=value_axis_nonstyles,json=valueAxisNonstyles" json:"value_axis_nonstyles,omitempty"`
	CategoryAxisStyles                  []*Reference          `protobuf:"bytes,15,rep,name=category_axis_styles,json=categoryAxisStyles" json:"category_axis_styles,omitempty"`
	CategoryAxisNonstyles               []*Reference          `protobuf:"bytes,16,rep,name=category_axis_nonstyles,json=categoryAxisNonstyles" json:"category_axis_nonstyles,omitempty"`
	SeriesThemeStyles                   []*Reference          `protobuf:"bytes,17,rep,name=series_theme_styles,json=seriesThemeStyles" json:"series_theme_styles,omitempty"`
	SeriesPrivateStyles                 *SparseReferenceArray `protobuf:"bytes,18,opt,name=series_private_styles,json=seriesPrivateStyles" json:"series_private_styles,omitempty"`
	SeriesNonStyles                     *SparseReferenceArray `protobuf:"bytes,19,opt,name=series_non_styles,json=seriesNonStyles" json:"series_non_styles,omitempty"`
	ParagraphStyles                     []*Reference          `protobuf:"bytes,20,rep,name=paragraph_styles,json=paragraphStyles" json:"paragraph_styles,omitempty"`
	MultidatasetIndex                   *uint32               `protobuf:"varint,21,opt,name=multidataset_index,json=multidatasetIndex" json:"multidataset_index,omitempty"`
	NeedsCalcEngineDeferredImportAction *bool                 `protobuf:"varint,22,opt,name=needs_calc_engine_deferred_import_action,json=needsCalcEngineDeferredImportAction" json:"needs_calc_engine_deferred_import_action,omitempty"`
	OwnedPreset                         *Reference            `protobuf:"bytes,23,opt,name=owned_preset,json=ownedPreset" json:"owned_preset,omitempty"`
	IsDirty                             *bool                 `protobuf:"varint,24,opt,name=is_dirty,json=isDirty" json:"is_dirty,omitempty"`
}

func (x *ChartArchive) Reset() {
	*x = ChartArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHArchives_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartArchive) ProtoMessage() {}

func (x *ChartArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHArchives_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartArchive.ProtoReflect.Descriptor instead.
func (*ChartArchive) Descriptor() ([]byte, []int) {
	return file_TSCHArchives_proto_rawDescGZIP(), []int{1}
}

func (x *ChartArchive) GetChartType() ChartType {
	if x != nil && x.ChartType != nil {
		return *x.ChartType
	}
	return ChartType_undefinedChartType
}

func (x *ChartArchive) GetScatterFormat() ScatterFormat {
	if x != nil && x.ScatterFormat != nil {
		return *x.ScatterFormat
	}
	return ScatterFormat_scatter_format_unknown
}

func (x *ChartArchive) GetLegendFrame() *RectArchive {
	if x != nil {
		return x.LegendFrame
	}
	return nil
}

func (x *ChartArchive) GetPreset() *Reference {
	if x != nil {
		return x.Preset
	}
	return nil
}

func (x *ChartArchive) GetSeriesDirection() SeriesDirection {
	if x != nil && x.SeriesDirection != nil {
		return *x.SeriesDirection
	}
	return SeriesDirection_series_direction_unknown
}

func (x *ChartArchive) GetContainsDefaultData() bool {
	if x != nil && x.ContainsDefaultData != nil {
		return *x.ContainsDefaultData
	}
	return false
}

func (x *ChartArchive) GetGrid() *ChartGridArchive {
	if x != nil {
		return x.Grid
	}
	return nil
}

func (x *ChartArchive) GetMediator() *Reference {
	if x != nil {
		return x.Mediator
	}
	return nil
}

func (x *ChartArchive) GetChartStyle() *Reference {
	if x != nil {
		return x.ChartStyle
	}
	return nil
}

func (x *ChartArchive) GetChartNonStyle() *Reference {
	if x != nil {
		return x.ChartNonStyle
	}
	return nil
}

func (x *ChartArchive) GetLegendStyle() *Reference {
	if x != nil {
		return x.LegendStyle
	}
	return nil
}

func (x *ChartArchive) GetLegendNonStyle() *Reference {
	if x != nil {
		return x.LegendNonStyle
	}
	return nil
}

func (x *ChartArchive) GetValueAxisStyles() []*Reference {
	if x != nil {
		return x.ValueAxisStyles
	}
	return nil
}

func (x *ChartArchive) GetValueAxisNonstyles() []*Reference {
	if x != nil {
		return x.ValueAxisNonstyles
	}
	return nil
}

func (x *ChartArchive) GetCategoryAxisStyles() []*Reference {
	if x != nil {
		return x.CategoryAxisStyles
	}
	return nil
}

func (x *ChartArchive) GetCategoryAxisNonstyles() []*Reference {
	if x != nil {
		return x.CategoryAxisNonstyles
	}
	return nil
}

func (x *ChartArchive) GetSeriesThemeStyles() []*Reference {
	if x != nil {
		return x.SeriesThemeStyles
	}
	return nil
}

func (x *ChartArchive) GetSeriesPrivateStyles() *SparseReferenceArray {
	if x != nil {
		return x.SeriesPrivateStyles
	}
	return nil
}

func (x *ChartArchive) GetSeriesNonStyles() *SparseReferenceArray {
	if x != nil {
		return x.SeriesNonStyles
	}
	return nil
}

func (x *ChartArchive) GetParagraphStyles() []*Reference {
	if x != nil {
		return x.ParagraphStyles
	}
	return nil
}

func (x *ChartArchive) GetMultidatasetIndex() uint32 {
	if x != nil && x.MultidatasetIndex != nil {
		return *x.MultidatasetIndex
	}
	return 0
}

func (x *ChartArchive) GetNeedsCalcEngineDeferredImportAction() bool {
	if x != nil && x.NeedsCalcEngineDeferredImportAction != nil {
		return *x.NeedsCalcEngineDeferredImportAction
	}
	return false
}

func (x *ChartArchive) GetOwnedPreset() *Reference {
	if x != nil {
		return x.OwnedPreset
	}
	return nil
}

func (x *ChartArchive) GetIsDirty() bool {
	if x != nil && x.IsDirty != nil {
		return *x.IsDirty
	}
	return false
}

type ChartMultiDataIndexUpgrade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChartMultiDataIndexUpgrade) Reset() {
	*x = ChartMultiDataIndexUpgrade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHArchives_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartMultiDataIndexUpgrade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartMultiDataIndexUpgrade) ProtoMessage() {}

func (x *ChartMultiDataIndexUpgrade) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHArchives_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartMultiDataIndexUpgrade.ProtoReflect.Descriptor instead.
func (*ChartMultiDataIndexUpgrade) Descriptor() ([]byte, []int) {
	return file_TSCHArchives_proto_rawDescGZIP(), []int{2}
}

type ChartGarlicMinMaxUpgrade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HorizontalMin *float64 `protobuf:"fixed64,1,opt,name=horizontal_min,json=horizontalMin" json:"horizontal_min,omitempty"`
	HorizontalMax *float64 `protobuf:"fixed64,2,opt,name=horizontal_max,json=horizontalMax" json:"horizontal_max,omitempty"`
	ValueMin      *float64 `protobuf:"fixed64,3,opt,name=value_min,json=valueMin" json:"value_min,omitempty"`
	ValueMax      *float64 `protobuf:"fixed64,4,opt,name=value_max,json=valueMax" json:"value_max,omitempty"`
}

func (x *ChartGarlicMinMaxUpgrade) Reset() {
	*x = ChartGarlicMinMaxUpgrade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHArchives_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartGarlicMinMaxUpgrade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartGarlicMinMaxUpgrade) ProtoMessage() {}

func (x *ChartGarlicMinMaxUpgrade) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHArchives_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartGarlicMinMaxUpgrade.ProtoReflect.Descriptor instead.
func (*ChartGarlicMinMaxUpgrade) Descriptor() ([]byte, []int) {
	return file_TSCHArchives_proto_rawDescGZIP(), []int{3}
}

func (x *ChartGarlicMinMaxUpgrade) GetHorizontalMin() float64 {
	if x != nil && x.HorizontalMin != nil {
		return *x.HorizontalMin
	}
	return 0
}

func (x *ChartGarlicMinMaxUpgrade) GetHorizontalMax() float64 {
	if x != nil && x.HorizontalMax != nil {
		return *x.HorizontalMax
	}
	return 0
}

func (x *ChartGarlicMinMaxUpgrade) GetValueMin() float64 {
	if x != nil && x.ValueMin != nil {
		return *x.ValueMin
	}
	return 0
}

func (x *ChartGarlicMinMaxUpgrade) GetValueMax() float64 {
	if x != nil && x.ValueMax != nil {
		return *x.ValueMax
	}
	return 0
}

type ChartGarlicLabelFormatUpgrade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValuePrefix            *string `protobuf:"bytes,1,opt,name=value_prefix,json=valuePrefix" json:"value_prefix,omitempty"`
	ValueSuffix            *string `protobuf:"bytes,2,opt,name=value_suffix,json=valueSuffix" json:"value_suffix,omitempty"`
	ValueUseSeparator      *bool   `protobuf:"varint,3,opt,name=value_use_separator,json=valueUseSeparator" json:"value_use_separator,omitempty"`
	HorizontalPrefix       *string `protobuf:"bytes,4,opt,name=horizontal_prefix,json=horizontalPrefix" json:"horizontal_prefix,omitempty"`
	HorizontalSuffix       *string `protobuf:"bytes,5,opt,name=horizontal_suffix,json=horizontalSuffix" json:"horizontal_suffix,omitempty"`
	HorizontalUseSeparator *bool   `protobuf:"varint,6,opt,name=horizontal_use_separator,json=horizontalUseSeparator" json:"horizontal_use_separator,omitempty"`
}

func (x *ChartGarlicLabelFormatUpgrade) Reset() {
	*x = ChartGarlicLabelFormatUpgrade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHArchives_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartGarlicLabelFormatUpgrade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartGarlicLabelFormatUpgrade) ProtoMessage() {}

func (x *ChartGarlicLabelFormatUpgrade) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHArchives_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartGarlicLabelFormatUpgrade.ProtoReflect.Descriptor instead.
func (*ChartGarlicLabelFormatUpgrade) Descriptor() ([]byte, []int) {
	return file_TSCHArchives_proto_rawDescGZIP(), []int{4}
}

func (x *ChartGarlicLabelFormatUpgrade) GetValuePrefix() string {
	if x != nil && x.ValuePrefix != nil {
		return *x.ValuePrefix
	}
	return ""
}

func (x *ChartGarlicLabelFormatUpgrade) GetValueSuffix() string {
	if x != nil && x.ValueSuffix != nil {
		return *x.ValueSuffix
	}
	return ""
}

func (x *ChartGarlicLabelFormatUpgrade) GetValueUseSeparator() bool {
	if x != nil && x.ValueUseSeparator != nil {
		return *x.ValueUseSeparator
	}
	return false
}

func (x *ChartGarlicLabelFormatUpgrade) GetHorizontalPrefix() string {
	if x != nil && x.HorizontalPrefix != nil {
		return *x.HorizontalPrefix
	}
	return ""
}

func (x *ChartGarlicLabelFormatUpgrade) GetHorizontalSuffix() string {
	if x != nil && x.HorizontalSuffix != nil {
		return *x.HorizontalSuffix
	}
	return ""
}

func (x *ChartGarlicLabelFormatUpgrade) GetHorizontalUseSeparator() bool {
	if x != nil && x.HorizontalUseSeparator != nil {
		return *x.HorizontalUseSeparator
	}
	return false
}

type ChartPasteboardAdditionsArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChartPasteboardAdditionsArchive) Reset() {
	*x = ChartPasteboardAdditionsArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHArchives_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartPasteboardAdditionsArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartPasteboardAdditionsArchive) ProtoMessage() {}

func (x *ChartPasteboardAdditionsArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHArchives_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartPasteboardAdditionsArchive.ProtoReflect.Descriptor instead.
func (*ChartPasteboardAdditionsArchive) Descriptor() ([]byte, []int) {
	return file_TSCHArchives_proto_rawDescGZIP(), []int{5}
}

type ChartPreserveAppearanceForPresetArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChartPreserveAppearanceForPresetArchive) Reset() {
	*x = ChartPreserveAppearanceForPresetArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHArchives_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartPreserveAppearanceForPresetArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartPreserveAppearanceForPresetArchive) ProtoMessage() {}

func (x *ChartPreserveAppearanceForPresetArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHArchives_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartPreserveAppearanceForPresetArchive.ProtoReflect.Descriptor instead.
func (*ChartPreserveAppearanceForPresetArchive) Descriptor() ([]byte, []int) {
	return file_TSCHArchives_proto_rawDescGZIP(), []int{6}
}

type ChartSupportsProportionalBendedCalloutLinesArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChartSupportsProportionalBendedCalloutLinesArchive) Reset() {
	*x = ChartSupportsProportionalBendedCalloutLinesArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHArchives_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartSupportsProportionalBendedCalloutLinesArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartSupportsProportionalBendedCalloutLinesArchive) ProtoMessage() {}

func (x *ChartSupportsProportionalBendedCalloutLinesArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHArchives_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartSupportsProportionalBendedCalloutLinesArchive.ProtoReflect.Descriptor instead.
func (*ChartSupportsProportionalBendedCalloutLinesArchive) Descriptor() ([]byte, []int) {
	return file_TSCHArchives_proto_rawDescGZIP(), []int{7}
}

type ChartSupportsRoundedCornersArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChartSupportsRoundedCornersArchive) Reset() {
	*x = ChartSupportsRoundedCornersArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHArchives_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartSupportsRoundedCornersArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartSupportsRoundedCornersArchive) ProtoMessage() {}

func (x *ChartSupportsRoundedCornersArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHArchives_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartSupportsRoundedCornersArchive.ProtoReflect.Descriptor instead.
func (*ChartSupportsRoundedCornersArchive) Descriptor() ([]byte, []int) {
	return file_TSCHArchives_proto_rawDescGZIP(), []int{8}
}

type ChartSupportsSeriesPropertySpacingArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChartSupportsSeriesPropertySpacingArchive) Reset() {
	*x = ChartSupportsSeriesPropertySpacingArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHArchives_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartSupportsSeriesPropertySpacingArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartSupportsSeriesPropertySpacingArchive) ProtoMessage() {}

func (x *ChartSupportsSeriesPropertySpacingArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHArchives_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartSupportsSeriesPropertySpacingArchive.ProtoReflect.Descriptor instead.
func (*ChartSupportsSeriesPropertySpacingArchive) Descriptor() ([]byte, []int) {
	return file_TSCHArchives_proto_rawDescGZIP(), []int{9}
}

type ChartGridArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RowName    []string                                  `protobuf:"bytes,1,rep,name=row_name,json=rowName" json:"row_name,omitempty"`
	ColumnName []string                                  `protobuf:"bytes,2,rep,name=column_name,json=columnName" json:"column_name,omitempty"`
	GridRow    []*GridRow                                `protobuf:"bytes,3,rep,name=grid_row,json=gridRow" json:"grid_row,omitempty"`
	IdMap      *ChartGridArchive_ChartGridRowColumnIdMap `protobuf:"bytes,4,opt,name=idMap" json:"idMap,omitempty"`
}

func (x *ChartGridArchive) Reset() {
	*x = ChartGridArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHArchives_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartGridArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartGridArchive) ProtoMessage() {}

func (x *ChartGridArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHArchives_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartGridArchive.ProtoReflect.Descriptor instead.
func (*ChartGridArchive) Descriptor() ([]byte, []int) {
	return file_TSCHArchives_proto_rawDescGZIP(), []int{10}
}

func (x *ChartGridArchive) GetRowName() []string {
	if x != nil {
		return x.RowName
	}
	return nil
}

func (x *ChartGridArchive) GetColumnName() []string {
	if x != nil {
		return x.ColumnName
	}
	return nil
}

func (x *ChartGridArchive) GetGridRow() []*GridRow {
	if x != nil {
		return x.GridRow
	}
	return nil
}

func (x *ChartGridArchive) GetIdMap() *ChartGridArchive_ChartGridRowColumnIdMap {
	if x != nil {
		return x.IdMap
	}
	return nil
}

type ChartMediatorArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info                *Reference `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
	LocalSeriesIndexes  []uint32   `protobuf:"varint,2,rep,name=local_series_indexes,json=localSeriesIndexes" json:"local_series_indexes,omitempty"`
	RemoteSeriesIndexes []uint32   `protobuf:"varint,3,rep,name=remote_series_indexes,json=remoteSeriesIndexes" json:"remote_series_indexes,omitempty"`
}

func (x *ChartMediatorArchive) Reset() {
	*x = ChartMediatorArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHArchives_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartMediatorArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartMediatorArchive) ProtoMessage() {}

func (x *ChartMediatorArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHArchives_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartMediatorArchive.ProtoReflect.Descriptor instead.
func (*ChartMediatorArchive) Descriptor() ([]byte, []int) {
	return file_TSCHArchives_proto_rawDescGZIP(), []int{11}
}

func (x *ChartMediatorArchive) GetInfo() *Reference {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *ChartMediatorArchive) GetLocalSeriesIndexes() []uint32 {
	if x != nil {
		return x.LocalSeriesIndexes
	}
	return nil
}

func (x *ChartMediatorArchive) GetRemoteSeriesIndexes() []uint32 {
	if x != nil {
		return x.RemoteSeriesIndexes
	}
	return nil
}

type ChartFillSetArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier                *string      `protobuf:"bytes,1,req,name=identifier" json:"identifier,omitempty"`
	LookupString              *string      `protobuf:"bytes,2,req,name=lookup_string,json=lookupString" json:"lookup_string,omitempty"`
	NumberOfThemeSeriesStyles *uint32      `protobuf:"varint,3,opt,name=number_of_theme_series_styles,json=numberOfThemeSeriesStyles" json:"number_of_theme_series_styles,omitempty"`
	SeriesStyles              []*Reference `protobuf:"bytes,4,rep,name=series_styles,json=seriesStyles" json:"series_styles,omitempty"`
}

func (x *ChartFillSetArchive) Reset() {
	*x = ChartFillSetArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHArchives_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartFillSetArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartFillSetArchive) ProtoMessage() {}

func (x *ChartFillSetArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHArchives_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartFillSetArchive.ProtoReflect.Descriptor instead.
func (*ChartFillSetArchive) Descriptor() ([]byte, []int) {
	return file_TSCHArchives_proto_rawDescGZIP(), []int{12}
}

func (x *ChartFillSetArchive) GetIdentifier() string {
	if x != nil && x.Identifier != nil {
		return *x.Identifier
	}
	return ""
}

func (x *ChartFillSetArchive) GetLookupString() string {
	if x != nil && x.LookupString != nil {
		return *x.LookupString
	}
	return ""
}

func (x *ChartFillSetArchive) GetNumberOfThemeSeriesStyles() uint32 {
	if x != nil && x.NumberOfThemeSeriesStyles != nil {
		return *x.NumberOfThemeSeriesStyles
	}
	return 0
}

func (x *ChartFillSetArchive) GetSeriesStyles() []*Reference {
	if x != nil {
		return x.SeriesStyles
	}
	return nil
}

type ChartStylePreset struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	ChartStyle         *Reference   `protobuf:"bytes,1,opt,name=chart_style,json=chartStyle" json:"chart_style,omitempty"`
	LegendStyle        *Reference   `protobuf:"bytes,2,opt,name=legend_style,json=legendStyle" json:"legend_style,omitempty"`
	ValueAxisStyles    []*Reference `protobuf:"bytes,3,rep,name=value_axis_styles,json=valueAxisStyles" json:"value_axis_styles,omitempty"`
	CategoryAxisStyles []*Reference `protobuf:"bytes,4,rep,name=category_axis_styles,json=categoryAxisStyles" json:"category_axis_styles,omitempty"`
	SeriesStyles       []*Reference `protobuf:"bytes,5,rep,name=series_styles,json=seriesStyles" json:"series_styles,omitempty"`
	ParagraphStyles    []*Reference `protobuf:"bytes,6,rep,name=paragraph_styles,json=paragraphStyles" json:"paragraph_styles,omitempty"`
	Uuid               []byte       `protobuf:"bytes,7,opt,name=uuid" json:"uuid,omitempty"`
}

func (x *ChartStylePreset) Reset() {
	*x = ChartStylePreset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHArchives_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartStylePreset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartStylePreset) ProtoMessage() {}

func (x *ChartStylePreset) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHArchives_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartStylePreset.ProtoReflect.Descriptor instead.
func (*ChartStylePreset) Descriptor() ([]byte, []int) {
	return file_TSCHArchives_proto_rawDescGZIP(), []int{13}
}

func (x *ChartStylePreset) GetChartStyle() *Reference {
	if x != nil {
		return x.ChartStyle
	}
	return nil
}

func (x *ChartStylePreset) GetLegendStyle() *Reference {
	if x != nil {
		return x.LegendStyle
	}
	return nil
}

func (x *ChartStylePreset) GetValueAxisStyles() []*Reference {
	if x != nil {
		return x.ValueAxisStyles
	}
	return nil
}

func (x *ChartStylePreset) GetCategoryAxisStyles() []*Reference {
	if x != nil {
		return x.CategoryAxisStyles
	}
	return nil
}

func (x *ChartStylePreset) GetSeriesStyles() []*Reference {
	if x != nil {
		return x.SeriesStyles
	}
	return nil
}

func (x *ChartStylePreset) GetParagraphStyles() []*Reference {
	if x != nil {
		return x.ParagraphStyles
	}
	return nil
}

func (x *ChartStylePreset) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

type ChartPresetsArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChartPresets []*Reference `protobuf:"bytes,1,rep,name=chart_presets,json=chartPresets" json:"chart_presets,omitempty"`
}

func (x *ChartPresetsArchive) Reset() {
	*x = ChartPresetsArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHArchives_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartPresetsArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartPresetsArchive) ProtoMessage() {}

func (x *ChartPresetsArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHArchives_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartPresetsArchive.ProtoReflect.Descriptor instead.
func (*ChartPresetsArchive) Descriptor() ([]byte, []int) {
	return file_TSCHArchives_proto_rawDescGZIP(), []int{14}
}

func (x *ChartPresetsArchive) GetChartPresets() []*Reference {
	if x != nil {
		return x.ChartPresets
	}
	return nil
}

type PropertyValueStorageContainerArchive struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	ChartStyle            *Reference            `protobuf:"bytes,1,opt,name=chart_style,json=chartStyle" json:"chart_style,omitempty"`
	ChartNonstyle         *Reference            `protobuf:"bytes,2,opt,name=chart_nonstyle,json=chartNonstyle" json:"chart_nonstyle,omitempty"`
	LegendStyle           *Reference            `protobuf:"bytes,3,opt,name=legend_style,json=legendStyle" json:"legend_style,omitempty"`
	LegendNonstyle        *Reference            `protobuf:"bytes,4,opt,name=legend_nonstyle,json=legendNonstyle" json:"legend_nonstyle,omitempty"`
	ValueAxisStyles       *SparseReferenceArray `protobuf:"bytes,5,opt,name=value_axis_styles,json=valueAxisStyles" json:"value_axis_styles,omitempty"`
	ValueAxisNonstyles    *SparseReferenceArray `protobuf:"bytes,6,opt,name=value_axis_nonstyles,json=valueAxisNonstyles" json:"value_axis_nonstyles,omitempty"`
	CategoryAxisStyles    *SparseReferenceArray `protobuf:"bytes,7,opt,name=category_axis_styles,json=categoryAxisStyles" json:"category_axis_styles,omitempty"`
	CategoryAxisNonstyles *SparseReferenceArray `protobuf:"bytes,8,opt,name=category_axis_nonstyles,json=categoryAxisNonstyles" json:"category_axis_nonstyles,omitempty"`
	SeriesThemeStyles     *SparseReferenceArray `protobuf:"bytes,9,opt,name=series_theme_styles,json=seriesThemeStyles" json:"series_theme_styles,omitempty"`
	SeriesPrivateStyles   *SparseReferenceArray `protobuf:"bytes,10,opt,name=series_private_styles,json=seriesPrivateStyles" json:"series_private_styles,omitempty"`
	SeriesNonstyles       *SparseReferenceArray `protobuf:"bytes,11,opt,name=series_nonstyles,json=seriesNonstyles" json:"series_nonstyles,omitempty"`
	ParagraphStyles       *SparseReferenceArray `protobuf:"bytes,12,opt,name=paragraph_styles,json=paragraphStyles" json:"paragraph_styles,omitempty"`
}

func (x *PropertyValueStorageContainerArchive) Reset() {
	*x = PropertyValueStorageContainerArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHArchives_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyValueStorageContainerArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyValueStorageContainerArchive) ProtoMessage() {}

func (x *PropertyValueStorageContainerArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHArchives_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyValueStorageContainerArchive.ProtoReflect.Descriptor instead.
func (*PropertyValueStorageContainerArchive) Descriptor() ([]byte, []int) {
	return file_TSCHArchives_proto_rawDescGZIP(), []int{15}
}

func (x *PropertyValueStorageContainerArchive) GetChartStyle() *Reference {
	if x != nil {
		return x.ChartStyle
	}
	return nil
}

func (x *PropertyValueStorageContainerArchive) GetChartNonstyle() *Reference {
	if x != nil {
		return x.ChartNonstyle
	}
	return nil
}

func (x *PropertyValueStorageContainerArchive) GetLegendStyle() *Reference {
	if x != nil {
		return x.LegendStyle
	}
	return nil
}

func (x *PropertyValueStorageContainerArchive) GetLegendNonstyle() *Reference {
	if x != nil {
		return x.LegendNonstyle
	}
	return nil
}

func (x *PropertyValueStorageContainerArchive) GetValueAxisStyles() *SparseReferenceArray {
	if x != nil {
		return x.ValueAxisStyles
	}
	return nil
}

func (x *PropertyValueStorageContainerArchive) GetValueAxisNonstyles() *SparseReferenceArray {
	if x != nil {
		return x.ValueAxisNonstyles
	}
	return nil
}

func (x *PropertyValueStorageContainerArchive) GetCategoryAxisStyles() *SparseReferenceArray {
	if x != nil {
		return x.CategoryAxisStyles
	}
	return nil
}

func (x *PropertyValueStorageContainerArchive) GetCategoryAxisNonstyles() *SparseReferenceArray {
	if x != nil {
		return x.CategoryAxisNonstyles
	}
	return nil
}

func (x *PropertyValueStorageContainerArchive) GetSeriesThemeStyles() *SparseReferenceArray {
	if x != nil {
		return x.SeriesThemeStyles
	}
	return nil
}

func (x *PropertyValueStorageContainerArchive) GetSeriesPrivateStyles() *SparseReferenceArray {
	if x != nil {
		return x.SeriesPrivateStyles
	}
	return nil
}

func (x *PropertyValueStorageContainerArchive) GetSeriesNonstyles() *SparseReferenceArray {
	if x != nil {
		return x.SeriesNonstyles
	}
	return nil
}

func (x *PropertyValueStorageContainerArchive) GetParagraphStyles() *SparseReferenceArray {
	if x != nil {
		return x.ParagraphStyles
	}
	return nil
}

type StylePasteboardDataArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                 *StyleArchive                         `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	StyleNetwork          *PropertyValueStorageContainerArchive `protobuf:"bytes,2,opt,name=style_network,json=styleNetwork" json:"style_network,omitempty"`
	CopiedFromEntireChart *bool                                 `protobuf:"varint,3,opt,name=copied_from_entire_chart,json=copiedFromEntireChart" json:"copied_from_entire_chart,omitempty"`
}

func (x *StylePasteboardDataArchive) Reset() {
	*x = StylePasteboardDataArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHArchives_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StylePasteboardDataArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StylePasteboardDataArchive) ProtoMessage() {}

func (x *StylePasteboardDataArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHArchives_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StylePasteboardDataArchive.ProtoReflect.Descriptor instead.
func (*StylePasteboardDataArchive) Descriptor() ([]byte, []int) {
	return file_TSCHArchives_proto_rawDescGZIP(), []int{16}
}

func (x *StylePasteboardDataArchive) GetSuper() *StyleArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *StylePasteboardDataArchive) GetStyleNetwork() *PropertyValueStorageContainerArchive {
	if x != nil {
		return x.StyleNetwork
	}
	return nil
}

func (x *StylePasteboardDataArchive) GetCopiedFromEntireChart() bool {
	if x != nil && x.CopiedFromEntireChart != nil {
		return *x.CopiedFromEntireChart
	}
	return false
}

type ChartSelectionPathTypeArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PathType *string `protobuf:"bytes,1,opt,name=path_type,json=pathType" json:"path_type,omitempty"`
	PathName *string `protobuf:"bytes,2,opt,name=path_name,json=pathName" json:"path_name,omitempty"`
}

func (x *ChartSelectionPathTypeArchive) Reset() {
	*x = ChartSelectionPathTypeArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHArchives_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartSelectionPathTypeArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartSelectionPathTypeArchive) ProtoMessage() {}

func (x *ChartSelectionPathTypeArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHArchives_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartSelectionPathTypeArchive.ProtoReflect.Descriptor instead.
func (*ChartSelectionPathTypeArchive) Descriptor() ([]byte, []int) {
	return file_TSCHArchives_proto_rawDescGZIP(), []int{17}
}

func (x *ChartSelectionPathTypeArchive) GetPathType() string {
	if x != nil && x.PathType != nil {
		return *x.PathType
	}
	return ""
}

func (x *ChartSelectionPathTypeArchive) GetPathName() string {
	if x != nil && x.PathName != nil {
		return *x.PathName
	}
	return ""
}

type ChartAxisIDArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AxisType *AxisType `protobuf:"varint,1,opt,name=axis_type,json=axisType,enum=TSCH.AxisType" json:"axis_type,omitempty"`
	Ordinal  *uint32   `protobuf:"varint,2,opt,name=ordinal" json:"ordinal,omitempty"`
}

func (x *ChartAxisIDArchive) Reset() {
	*x = ChartAxisIDArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHArchives_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartAxisIDArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartAxisIDArchive) ProtoMessage() {}

func (x *ChartAxisIDArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHArchives_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartAxisIDArchive.ProtoReflect.Descriptor instead.
func (*ChartAxisIDArchive) Descriptor() ([]byte, []int) {
	return file_TSCHArchives_proto_rawDescGZIP(), []int{18}
}

func (x *ChartAxisIDArchive) GetAxisType() AxisType {
	if x != nil && x.AxisType != nil {
		return *x.AxisType
	}
	return AxisType_axis_type_unknown
}

func (x *ChartAxisIDArchive) GetOrdinal() uint32 {
	if x != nil && x.Ordinal != nil {
		return *x.Ordinal
	}
	return 0
}

type ChartSelectionPathArgumentArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number *uint32             `protobuf:"varint,1,opt,name=number" json:"number,omitempty"`
	AxisId *ChartAxisIDArchive `protobuf:"bytes,2,opt,name=axis_id,json=axisId" json:"axis_id,omitempty"`
}

func (x *ChartSelectionPathArgumentArchive) Reset() {
	*x = ChartSelectionPathArgumentArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHArchives_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartSelectionPathArgumentArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartSelectionPathArgumentArchive) ProtoMessage() {}

func (x *ChartSelectionPathArgumentArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHArchives_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartSelectionPathArgumentArchive.ProtoReflect.Descriptor instead.
func (*ChartSelectionPathArgumentArchive) Descriptor() ([]byte, []int) {
	return file_TSCHArchives_proto_rawDescGZIP(), []int{19}
}

func (x *ChartSelectionPathArgumentArchive) GetNumber() uint32 {
	if x != nil && x.Number != nil {
		return *x.Number
	}
	return 0
}

func (x *ChartSelectionPathArgumentArchive) GetAxisId() *ChartAxisIDArchive {
	if x != nil {
		return x.AxisId
	}
	return nil
}

type ChartSelectionPathArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PathType     *ChartSelectionPathTypeArchive       `protobuf:"bytes,1,opt,name=path_type,json=pathType" json:"path_type,omitempty"`
	SubSelection *ChartSelectionPathArchive           `protobuf:"bytes,2,opt,name=sub_selection,json=subSelection" json:"sub_selection,omitempty"`
	Arguments    []*ChartSelectionPathArgumentArchive `protobuf:"bytes,3,rep,name=arguments" json:"arguments,omitempty"`
}

func (x *ChartSelectionPathArchive) Reset() {
	*x = ChartSelectionPathArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHArchives_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartSelectionPathArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartSelectionPathArchive) ProtoMessage() {}

func (x *ChartSelectionPathArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHArchives_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartSelectionPathArchive.ProtoReflect.Descriptor instead.
func (*ChartSelectionPathArchive) Descriptor() ([]byte, []int) {
	return file_TSCHArchives_proto_rawDescGZIP(), []int{20}
}

func (x *ChartSelectionPathArchive) GetPathType() *ChartSelectionPathTypeArchive {
	if x != nil {
		return x.PathType
	}
	return nil
}

func (x *ChartSelectionPathArchive) GetSubSelection() *ChartSelectionPathArchive {
	if x != nil {
		return x.SubSelection
	}
	return nil
}

func (x *ChartSelectionPathArchive) GetArguments() []*ChartSelectionPathArgumentArchive {
	if x != nil {
		return x.Arguments
	}
	return nil
}

type ChartSelectionArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *DrawableSelectionArchive    `protobuf:"bytes,3,opt,name=super" json:"super,omitempty"`
	Chart *Reference                   `protobuf:"bytes,1,opt,name=chart" json:"chart,omitempty"`
	Paths []*ChartSelectionPathArchive `protobuf:"bytes,2,rep,name=paths" json:"paths,omitempty"`
}

func (x *ChartSelectionArchive) Reset() {
	*x = ChartSelectionArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHArchives_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartSelectionArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartSelectionArchive) ProtoMessage() {}

func (x *ChartSelectionArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHArchives_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartSelectionArchive.ProtoReflect.Descriptor instead.
func (*ChartSelectionArchive) Descriptor() ([]byte, []int) {
	return file_TSCHArchives_proto_rawDescGZIP(), []int{21}
}

func (x *ChartSelectionArchive) GetSuper() *DrawableSelectionArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *ChartSelectionArchive) GetChart() *Reference {
	if x != nil {
		return x.Chart
	}
	return nil
}

func (x *ChartSelectionArchive) GetPaths() []*ChartSelectionPathArchive {
	if x != nil {
		return x.Paths
	}
	return nil
}

type ChartCDESelectionArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chart          *Reference `protobuf:"bytes,1,opt,name=chart" json:"chart,omitempty"`
	SelectionType  *int32     `protobuf:"varint,2,opt,name=selection_type,json=selectionType" json:"selection_type,omitempty"`
	RowLocation    *uint32    `protobuf:"varint,3,opt,name=row_location,json=rowLocation" json:"row_location,omitempty"`
	RowLength      *uint32    `protobuf:"varint,4,opt,name=row_length,json=rowLength" json:"row_length,omitempty"`
	ColumnLocation *uint32    `protobuf:"varint,5,opt,name=column_location,json=columnLocation" json:"column_location,omitempty"`
	ColumnLength   *uint32    `protobuf:"varint,6,opt,name=column_length,json=columnLength" json:"column_length,omitempty"`
}

func (x *ChartCDESelectionArchive) Reset() {
	*x = ChartCDESelectionArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHArchives_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartCDESelectionArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartCDESelectionArchive) ProtoMessage() {}

func (x *ChartCDESelectionArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHArchives_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartCDESelectionArchive.ProtoReflect.Descriptor instead.
func (*ChartCDESelectionArchive) Descriptor() ([]byte, []int) {
	return file_TSCHArchives_proto_rawDescGZIP(), []int{22}
}

func (x *ChartCDESelectionArchive) GetChart() *Reference {
	if x != nil {
		return x.Chart
	}
	return nil
}

func (x *ChartCDESelectionArchive) GetSelectionType() int32 {
	if x != nil && x.SelectionType != nil {
		return *x.SelectionType
	}
	return 0
}

func (x *ChartCDESelectionArchive) GetRowLocation() uint32 {
	if x != nil && x.RowLocation != nil {
		return *x.RowLocation
	}
	return 0
}

func (x *ChartCDESelectionArchive) GetRowLength() uint32 {
	if x != nil && x.RowLength != nil {
		return *x.RowLength
	}
	return 0
}

func (x *ChartCDESelectionArchive) GetColumnLocation() uint32 {
	if x != nil && x.ColumnLocation != nil {
		return *x.ColumnLocation
	}
	return 0
}

func (x *ChartCDESelectionArchive) GetColumnLength() uint32 {
	if x != nil && x.ColumnLength != nil {
		return *x.ColumnLength
	}
	return 0
}

type ChartUIState struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	Chart                    *Reference `protobuf:"bytes,1,opt,name=chart" json:"chart,omitempty"`
	CdeLastRowSelected       *int32     `protobuf:"varint,2,opt,name=cde_last_row_selected,json=cdeLastRowSelected" json:"cde_last_row_selected,omitempty"`
	CdeLastColSelected       *int32     `protobuf:"varint,3,opt,name=cde_last_col_selected,json=cdeLastColSelected" json:"cde_last_col_selected,omitempty"`
	CdeLastRowCount          *int32     `protobuf:"varint,4,opt,name=cde_last_row_count,json=cdeLastRowCount" json:"cde_last_row_count,omitempty"`
	CdeLastColCount          *int32     `protobuf:"varint,5,opt,name=cde_last_col_count,json=cdeLastColCount" json:"cde_last_col_count,omitempty"`
	CdeUseFullKeyboard       *bool      `protobuf:"varint,6,opt,name=cde_use_full_keyboard,json=cdeUseFullKeyboard" json:"cde_use_full_keyboard,omitempty"`
	MultiDataSetIndex        *int32     `protobuf:"varint,7,opt,name=multi_data_set_index,json=multiDataSetIndex" json:"multi_data_set_index,omitempty"`
	IsValidMultiDataSetIndex *bool      `protobuf:"varint,8,opt,name=is_valid_multi_data_set_index,json=isValidMultiDataSetIndex" json:"is_valid_multi_data_set_index,omitempty"`
}

func (x *ChartUIState) Reset() {
	*x = ChartUIState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHArchives_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartUIState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartUIState) ProtoMessage() {}

func (x *ChartUIState) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHArchives_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartUIState.ProtoReflect.Descriptor instead.
func (*ChartUIState) Descriptor() ([]byte, []int) {
	return file_TSCHArchives_proto_rawDescGZIP(), []int{23}
}

func (x *ChartUIState) GetChart() *Reference {
	if x != nil {
		return x.Chart
	}
	return nil
}

func (x *ChartUIState) GetCdeLastRowSelected() int32 {
	if x != nil && x.CdeLastRowSelected != nil {
		return *x.CdeLastRowSelected
	}
	return 0
}

func (x *ChartUIState) GetCdeLastColSelected() int32 {
	if x != nil && x.CdeLastColSelected != nil {
		return *x.CdeLastColSelected
	}
	return 0
}

func (x *ChartUIState) GetCdeLastRowCount() int32 {
	if x != nil && x.CdeLastRowCount != nil {
		return *x.CdeLastRowCount
	}
	return 0
}

func (x *ChartUIState) GetCdeLastColCount() int32 {
	if x != nil && x.CdeLastColCount != nil {
		return *x.CdeLastColCount
	}
	return 0
}

func (x *ChartUIState) GetCdeUseFullKeyboard() bool {
	if x != nil && x.CdeUseFullKeyboard != nil {
		return *x.CdeUseFullKeyboard
	}
	return false
}

func (x *ChartUIState) GetMultiDataSetIndex() int32 {
	if x != nil && x.MultiDataSetIndex != nil {
		return *x.MultiDataSetIndex
	}
	return 0
}

func (x *ChartUIState) GetIsValidMultiDataSetIndex() bool {
	if x != nil && x.IsValidMultiDataSetIndex != nil {
		return *x.IsValidMultiDataSetIndex
	}
	return false
}

type ChartUIStateMultiDataIndexUpgrade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChartUIStateMultiDataIndexUpgrade) Reset() {
	*x = ChartUIStateMultiDataIndexUpgrade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHArchives_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartUIStateMultiDataIndexUpgrade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartUIStateMultiDataIndexUpgrade) ProtoMessage() {}

func (x *ChartUIStateMultiDataIndexUpgrade) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHArchives_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartUIStateMultiDataIndexUpgrade.ProtoReflect.Descriptor instead.
func (*ChartUIStateMultiDataIndexUpgrade) Descriptor() ([]byte, []int) {
	return file_TSCHArchives_proto_rawDescGZIP(), []int{24}
}

type ChartFormatStructExtensions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChartFormatStructExtensions) Reset() {
	*x = ChartFormatStructExtensions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHArchives_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartFormatStructExtensions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartFormatStructExtensions) ProtoMessage() {}

func (x *ChartFormatStructExtensions) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHArchives_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartFormatStructExtensions.ProtoReflect.Descriptor instead.
func (*ChartFormatStructExtensions) Descriptor() ([]byte, []int) {
	return file_TSCHArchives_proto_rawDescGZIP(), []int{25}
}

type ChartReferenceLineNonStyleItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NonStyle *Reference `protobuf:"bytes,1,req,name=non_style,json=nonStyle" json:"non_style,omitempty"`
	Uuid     *UUID      `protobuf:"bytes,2,req,name=uuid" json:"uuid,omitempty"`
}

func (x *ChartReferenceLineNonStyleItem) Reset() {
	*x = ChartReferenceLineNonStyleItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHArchives_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartReferenceLineNonStyleItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartReferenceLineNonStyleItem) ProtoMessage() {}

func (x *ChartReferenceLineNonStyleItem) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHArchives_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartReferenceLineNonStyleItem.ProtoReflect.Descriptor instead.
func (*ChartReferenceLineNonStyleItem) Descriptor() ([]byte, []int) {
	return file_TSCHArchives_proto_rawDescGZIP(), []int{26}
}

func (x *ChartReferenceLineNonStyleItem) GetNonStyle() *Reference {
	if x != nil {
		return x.NonStyle
	}
	return nil
}

func (x *ChartReferenceLineNonStyleItem) GetUuid() *UUID {
	if x != nil {
		return x.Uuid
	}
	return nil
}

type ChartAxisReferenceLineNonStylesArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AxisId                     *ChartAxisIDArchive               `protobuf:"bytes,1,req,name=axis_id,json=axisId" json:"axis_id,omitempty"`
	ReferenceLineNonStyleItems []*ChartReferenceLineNonStyleItem `protobuf:"bytes,2,rep,name=reference_line_non_style_items,json=referenceLineNonStyleItems" json:"reference_line_non_style_items,omitempty"`
}

func (x *ChartAxisReferenceLineNonStylesArchive) Reset() {
	*x = ChartAxisReferenceLineNonStylesArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHArchives_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartAxisReferenceLineNonStylesArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartAxisReferenceLineNonStylesArchive) ProtoMessage() {}

func (x *ChartAxisReferenceLineNonStylesArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHArchives_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartAxisReferenceLineNonStylesArchive.ProtoReflect.Descriptor instead.
func (*ChartAxisReferenceLineNonStylesArchive) Descriptor() ([]byte, []int) {
	return file_TSCHArchives_proto_rawDescGZIP(), []int{27}
}

func (x *ChartAxisReferenceLineNonStylesArchive) GetAxisId() *ChartAxisIDArchive {
	if x != nil {
		return x.AxisId
	}
	return nil
}

func (x *ChartAxisReferenceLineNonStylesArchive) GetReferenceLineNonStyleItems() []*ChartReferenceLineNonStyleItem {
	if x != nil {
		return x.ReferenceLineNonStyleItems
	}
	return nil
}

type ChartAxisReferenceLineStylesArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AxisId              *ChartAxisIDArchive   `protobuf:"bytes,1,req,name=axis_id,json=axisId" json:"axis_id,omitempty"`
	ReferenceLineStyles *SparseReferenceArray `protobuf:"bytes,2,opt,name=reference_line_styles,json=referenceLineStyles" json:"reference_line_styles,omitempty"`
}

func (x *ChartAxisReferenceLineStylesArchive) Reset() {
	*x = ChartAxisReferenceLineStylesArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHArchives_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartAxisReferenceLineStylesArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartAxisReferenceLineStylesArchive) ProtoMessage() {}

func (x *ChartAxisReferenceLineStylesArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHArchives_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartAxisReferenceLineStylesArchive.ProtoReflect.Descriptor instead.
func (*ChartAxisReferenceLineStylesArchive) Descriptor() ([]byte, []int) {
	return file_TSCHArchives_proto_rawDescGZIP(), []int{28}
}

func (x *ChartAxisReferenceLineStylesArchive) GetAxisId() *ChartAxisIDArchive {
	if x != nil {
		return x.AxisId
	}
	return nil
}

func (x *ChartAxisReferenceLineStylesArchive) GetReferenceLineStyles() *SparseReferenceArray {
	if x != nil {
		return x.ReferenceLineStyles
	}
	return nil
}

type ChartReferenceLinesArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReferenceLineNonStylesMap     []*ChartAxisReferenceLineNonStylesArchive `protobuf:"bytes,1,rep,name=reference_line_non_styles_map,json=referenceLineNonStylesMap" json:"reference_line_non_styles_map,omitempty"`
	ReferenceLineStylesMap        []*ChartAxisReferenceLineStylesArchive    `protobuf:"bytes,2,rep,name=reference_line_styles_map,json=referenceLineStylesMap" json:"reference_line_styles_map,omitempty"`
	ThemePresetReferenceLineStyle *Reference                                `protobuf:"bytes,3,opt,name=theme_preset_reference_line_style,json=themePresetReferenceLineStyle" json:"theme_preset_reference_line_style,omitempty"`
}

func (x *ChartReferenceLinesArchive) Reset() {
	*x = ChartReferenceLinesArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHArchives_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartReferenceLinesArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartReferenceLinesArchive) ProtoMessage() {}

func (x *ChartReferenceLinesArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHArchives_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartReferenceLinesArchive.ProtoReflect.Descriptor instead.
func (*ChartReferenceLinesArchive) Descriptor() ([]byte, []int) {
	return file_TSCHArchives_proto_rawDescGZIP(), []int{29}
}

func (x *ChartReferenceLinesArchive) GetReferenceLineNonStylesMap() []*ChartAxisReferenceLineNonStylesArchive {
	if x != nil {
		return x.ReferenceLineNonStylesMap
	}
	return nil
}

func (x *ChartReferenceLinesArchive) GetReferenceLineStylesMap() []*ChartAxisReferenceLineStylesArchive {
	if x != nil {
		return x.ReferenceLineStylesMap
	}
	return nil
}

func (x *ChartReferenceLinesArchive) GetThemePresetReferenceLineStyle() *Reference {
	if x != nil {
		return x.ThemePresetReferenceLineStyle
	}
	return nil
}

type ChartPresetReferenceLineStylesArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReferenceLineStyles []*Reference `protobuf:"bytes,1,rep,name=reference_line_styles,json=referenceLineStyles" json:"reference_line_styles,omitempty"`
}

func (x *ChartPresetReferenceLineStylesArchive) Reset() {
	*x = ChartPresetReferenceLineStylesArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHArchives_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartPresetReferenceLineStylesArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartPresetReferenceLineStylesArchive) ProtoMessage() {}

func (x *ChartPresetReferenceLineStylesArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHArchives_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartPresetReferenceLineStylesArchive.ProtoReflect.Descriptor instead.
func (*ChartPresetReferenceLineStylesArchive) Descriptor() ([]byte, []int) {
	return file_TSCHArchives_proto_rawDescGZIP(), []int{30}
}

func (x *ChartPresetReferenceLineStylesArchive) GetReferenceLineStyles() []*Reference {
	if x != nil {
		return x.ReferenceLineStyles
	}
	return nil
}

type ChartAxisReferenceLineSparseNonStylesArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AxisId                     *ChartAxisIDArchive               `protobuf:"bytes,1,req,name=axis_id,json=axisId" json:"axis_id,omitempty"`
	ReferenceLineNonStyleItems []*ChartReferenceLineNonStyleItem `protobuf:"bytes,2,rep,name=reference_line_non_style_items,json=referenceLineNonStyleItems" json:"reference_line_non_style_items,omitempty"`
}

func (x *ChartAxisReferenceLineSparseNonStylesArchive) Reset() {
	*x = ChartAxisReferenceLineSparseNonStylesArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHArchives_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartAxisReferenceLineSparseNonStylesArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartAxisReferenceLineSparseNonStylesArchive) ProtoMessage() {}

func (x *ChartAxisReferenceLineSparseNonStylesArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHArchives_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartAxisReferenceLineSparseNonStylesArchive.ProtoReflect.Descriptor instead.
func (*ChartAxisReferenceLineSparseNonStylesArchive) Descriptor() ([]byte, []int) {
	return file_TSCHArchives_proto_rawDescGZIP(), []int{31}
}

func (x *ChartAxisReferenceLineSparseNonStylesArchive) GetAxisId() *ChartAxisIDArchive {
	if x != nil {
		return x.AxisId
	}
	return nil
}

func (x *ChartAxisReferenceLineSparseNonStylesArchive) GetReferenceLineNonStyleItems() []*ChartReferenceLineNonStyleItem {
	if x != nil {
		return x.ReferenceLineNonStyleItems
	}
	return nil
}

type PropertyValueStorageContainerReferenceLinesArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReferenceLineNonStylesMap     []*ChartAxisReferenceLineSparseNonStylesArchive `protobuf:"bytes,1,rep,name=reference_line_non_styles_map,json=referenceLineNonStylesMap" json:"reference_line_non_styles_map,omitempty"`
	ReferenceLineStylesMap        []*ChartAxisReferenceLineStylesArchive          `protobuf:"bytes,2,rep,name=reference_line_styles_map,json=referenceLineStylesMap" json:"reference_line_styles_map,omitempty"`
	ThemePresetReferenceLineStyle *Reference                                      `protobuf:"bytes,3,opt,name=theme_preset_reference_line_style,json=themePresetReferenceLineStyle" json:"theme_preset_reference_line_style,omitempty"`
}

func (x *PropertyValueStorageContainerReferenceLinesArchive) Reset() {
	*x = PropertyValueStorageContainerReferenceLinesArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHArchives_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyValueStorageContainerReferenceLinesArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyValueStorageContainerReferenceLinesArchive) ProtoMessage() {}

func (x *PropertyValueStorageContainerReferenceLinesArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHArchives_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyValueStorageContainerReferenceLinesArchive.ProtoReflect.Descriptor instead.
func (*PropertyValueStorageContainerReferenceLinesArchive) Descriptor() ([]byte, []int) {
	return file_TSCHArchives_proto_rawDescGZIP(), []int{32}
}

func (x *PropertyValueStorageContainerReferenceLinesArchive) GetReferenceLineNonStylesMap() []*ChartAxisReferenceLineSparseNonStylesArchive {
	if x != nil {
		return x.ReferenceLineNonStylesMap
	}
	return nil
}

func (x *PropertyValueStorageContainerReferenceLinesArchive) GetReferenceLineStylesMap() []*ChartAxisReferenceLineStylesArchive {
	if x != nil {
		return x.ReferenceLineStylesMap
	}
	return nil
}

func (x *PropertyValueStorageContainerReferenceLinesArchive) GetThemePresetReferenceLineStyle() *Reference {
	if x != nil {
		return x.ThemePresetReferenceLineStyle
	}
	return nil
}

type ChartGridArchive_ChartGridRowColumnIdMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RowIdMap    []*ChartGridArchive_ChartGridRowColumnIdMap_Entry `protobuf:"bytes,1,rep,name=row_id_map,json=rowIdMap" json:"row_id_map,omitempty"`
	ColumnIdMap []*ChartGridArchive_ChartGridRowColumnIdMap_Entry `protobuf:"bytes,2,rep,name=column_id_map,json=columnIdMap" json:"column_id_map,omitempty"`
}

func (x *ChartGridArchive_ChartGridRowColumnIdMap) Reset() {
	*x = ChartGridArchive_ChartGridRowColumnIdMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHArchives_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartGridArchive_ChartGridRowColumnIdMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartGridArchive_ChartGridRowColumnIdMap) ProtoMessage() {}

func (x *ChartGridArchive_ChartGridRowColumnIdMap) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHArchives_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartGridArchive_ChartGridRowColumnIdMap.ProtoReflect.Descriptor instead.
func (*ChartGridArchive_ChartGridRowColumnIdMap) Descriptor() ([]byte, []int) {
	return file_TSCHArchives_proto_rawDescGZIP(), []int{10, 0}
}

func (x *ChartGridArchive_ChartGridRowColumnIdMap) GetRowIdMap() []*ChartGridArchive_ChartGridRowColumnIdMap_Entry {
	if x != nil {
		return x.RowIdMap
	}
	return nil
}

func (x *ChartGridArchive_ChartGridRowColumnIdMap) GetColumnIdMap() []*ChartGridArchive_ChartGridRowColumnIdMap_Entry {
	if x != nil {
		return x.ColumnIdMap
	}
	return nil
}

type ChartGridArchive_ChartGridRowColumnIdMap_Entry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UniqueId *string `protobuf:"bytes,1,req,name=uniqueId" json:"uniqueId,omitempty"`
	Index    *uint32 `protobuf:"varint,2,req,name=index" json:"index,omitempty"`
}

func (x *ChartGridArchive_ChartGridRowColumnIdMap_Entry) Reset() {
	*x = ChartGridArchive_ChartGridRowColumnIdMap_Entry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHArchives_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartGridArchive_ChartGridRowColumnIdMap_Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartGridArchive_ChartGridRowColumnIdMap_Entry) ProtoMessage() {}

func (x *ChartGridArchive_ChartGridRowColumnIdMap_Entry) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHArchives_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartGridArchive_ChartGridRowColumnIdMap_Entry.ProtoReflect.Descriptor instead.
func (*ChartGridArchive_ChartGridRowColumnIdMap_Entry) Descriptor() ([]byte, []int) {
	return file_TSCHArchives_proto_rawDescGZIP(), []int{10, 0, 0}
}

func (x *ChartGridArchive_ChartGridRowColumnIdMap_Entry) GetUniqueId() string {
	if x != nil && x.UniqueId != nil {
		return *x.UniqueId
	}
	return ""
}

func (x *ChartGridArchive_ChartGridRowColumnIdMap_Entry) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

var file_TSCHArchives_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*ChartArchive)(nil),
		ExtensionType: (*bool)(nil),
		Field:         10002,
		Name:          "TSCH.scene3d_settings_constant_depth",
		Tag:           "varint,10002,opt,name=scene3d_settings_constant_depth",
		Filename:      "TSCHArchives.proto",
	},
	{
		ExtendedType:  (*ChartArchive)(nil),
		ExtensionType: (*string)(nil),
		Field:         10004,
		Name:          "TSCH.last_applied_fill_set_lookup_string",
		Tag:           "bytes,10004,opt,name=last_applied_fill_set_lookup_string",
		Filename:      "TSCHArchives.proto",
	},
	{
		ExtendedType:  (*TSCHCommonChartSeriesStyleArchive)(nil),
		ExtensionType: (*bool)(nil),
		Field:         10001,
		Name:          "TSCH.series_supports_donut",
		Tag:           "varint,10001,opt,name=series_supports_donut",
		Filename:      "TSCHArchives.proto",
	},
	{
		ExtendedType:  (*TSCHCommonChartSeriesStyleArchive)(nil),
		ExtensionType: (*bool)(nil),
		Field:         10002,
		Name:          "TSCH.series_supports_radar",
		Tag:           "varint,10002,opt,name=series_supports_radar",
		Filename:      "TSCHArchives.proto",
	},
	{
		ExtendedType:  (*TSCHCommonChartSeriesNonStyleArchive)(nil),
		ExtensionType: (*bool)(nil),
		Field:         10001,
		Name:          "TSCH.series_supports_custom_number_format",
		Tag:           "varint,10001,opt,name=series_supports_custom_number_format",
		Filename:      "TSCHArchives.proto",
	},
	{
		ExtendedType:  (*TSCHCommonChartSeriesNonStyleArchive)(nil),
		ExtensionType: (*bool)(nil),
		Field:         10002,
		Name:          "TSCH.series_supports_custom_date_format",
		Tag:           "varint,10002,opt,name=series_supports_custom_date_format",
		Filename:      "TSCHArchives.proto",
	},
	{
		ExtendedType:  (*TSCHCommonChartSeriesNonStyleArchive)(nil),
		ExtensionType: (*bool)(nil),
		Field:         10003,
		Name:          "TSCH.series_supports_callout_lines",
		Tag:           "varint,10003,opt,name=series_supports_callout_lines",
		Filename:      "TSCHArchives.proto",
	},
	{
		ExtendedType:  (*TSCHCommonChartAxisStyleArchive)(nil),
		ExtensionType: (*bool)(nil),
		Field:         10001,
		Name:          "TSCH.axis_supports_radar",
		Tag:           "varint,10001,opt,name=axis_supports_radar",
		Filename:      "TSCHArchives.proto",
	},
	{
		ExtendedType:  (*TSCHCommonChartAxisNonStyleArchive)(nil),
		ExtensionType: (*bool)(nil),
		Field:         10001,
		Name:          "TSCH.axis_supports_custom_number_format",
		Tag:           "varint,10001,opt,name=axis_supports_custom_number_format",
		Filename:      "TSCHArchives.proto",
	},
	{
		ExtendedType:  (*TSCHCommonChartAxisNonStyleArchive)(nil),
		ExtensionType: (*bool)(nil),
		Field:         10002,
		Name:          "TSCH.axis_supports_custom_date_format",
		Tag:           "varint,10002,opt,name=axis_supports_custom_date_format",
		Filename:      "TSCHArchives.proto",
	},
	{
		ExtendedType:  (*ChartArchive)(nil),
		ExtensionType: (*ChartReferenceLinesArchive)(nil),
		Field:         10005,
		Name:          "TSCH.reference_lines",
		Tag:           "bytes,10005,opt,name=reference_lines",
		Filename:      "TSCHArchives.proto",
	},
	{
		ExtendedType:  (*ChartStylePreset)(nil),
		ExtensionType: (*ChartPresetReferenceLineStylesArchive)(nil),
		Field:         10000,
		Name:          "TSCH.preset_reference_line_styles",
		Tag:           "bytes,10000,opt,name=preset_reference_line_styles",
		Filename:      "TSCHArchives.proto",
	},
	{
		ExtendedType:  (*PropertyValueStorageContainerArchive)(nil),
		ExtensionType: (*PropertyValueStorageContainerReferenceLinesArchive)(nil),
		Field:         10000,
		Name:          "TSCH.property_value_storage_container_reference_lines",
		Tag:           "bytes,10000,opt,name=property_value_storage_container_reference_lines",
		Filename:      "TSCHArchives.proto",
	},
	{
		ExtendedType:  (*ChartDrawableArchive)(nil),
		ExtensionType: (*ChartArchive)(nil),
		Field:         10000,
		Name:          "TSCH.ChartArchive.unity",
		Tag:           "bytes,10000,opt,name=unity",
		Filename:      "TSCHArchives.proto",
	},
	{
		ExtendedType:  (*ChartArchive)(nil),
		ExtensionType: (*bool)(nil),
		Field:         10021,
		Name:          "TSCH.ChartMultiDataIndexUpgrade.upgraded_to_ui_state",
		Tag:           "varint,10021,opt,name=upgraded_to_ui_state",
		Filename:      "TSCHArchives.proto",
	},
	{
		ExtendedType:  (*ChartArchive)(nil),
		ExtensionType: (*ChartGarlicMinMaxUpgrade)(nil),
		Field:         10010,
		Name:          "TSCH.ChartGarlicMinMaxUpgrade.garlic_min_max_upgrade",
		Tag:           "bytes,10010,opt,name=garlic_min_max_upgrade",
		Filename:      "TSCHArchives.proto",
	},
	{
		ExtendedType:  (*ChartArchive)(nil),
		ExtensionType: (*ChartGarlicLabelFormatUpgrade)(nil),
		Field:         10011,
		Name:          "TSCH.ChartGarlicLabelFormatUpgrade.garlic_label_format_upgrade",
		Tag:           "bytes,10011,opt,name=garlic_label_format_upgrade",
		Filename:      "TSCHArchives.proto",
	},
	{
		ExtendedType:  (*ChartArchive)(nil),
		ExtensionType: (*uint32)(nil),
		Field:         10000,
		Name:          "TSCH.ChartPasteboardAdditionsArchive.preset_index_for_pasteboard",
		Tag:           "varint,10000,opt,name=preset_index_for_pasteboard",
		Filename:      "TSCHArchives.proto",
	},
	{
		ExtendedType:  (*ChartArchive)(nil),
		ExtensionType: ([]byte)(nil),
		Field:         10001,
		Name:          "TSCH.ChartPasteboardAdditionsArchive.preset_uuid_for_pasteboard",
		Tag:           "bytes,10001,opt,name=preset_uuid_for_pasteboard",
		Filename:      "TSCHArchives.proto",
	},
	{
		ExtendedType:  (*ChartArchive)(nil),
		ExtensionType: (*Reference)(nil),
		Field:         10003,
		Name:          "TSCH.ChartPasteboardAdditionsArchive.custom_format_list_for_pasteboard",
		Tag:           "bytes,10003,opt,name=custom_format_list_for_pasteboard",
		Filename:      "TSCHArchives.proto",
	},
	{
		ExtendedType:  (*ChartArchive)(nil),
		ExtensionType: (*bool)(nil),
		Field:         10023,
		Name:          "TSCH.ChartPreserveAppearanceForPresetArchive.appearance_preserved_for_preset",
		Tag:           "varint,10023,opt,name=appearance_preserved_for_preset",
		Filename:      "TSCHArchives.proto",
	},
	{
		ExtendedType:  (*ChartArchive)(nil),
		ExtensionType: (*bool)(nil),
		Field:         10024,
		Name:          "TSCH.ChartSupportsProportionalBendedCalloutLinesArchive.supports_proportional_bended_callout_lines",
		Tag:           "varint,10024,opt,name=supports_proportional_bended_callout_lines",
		Filename:      "TSCHArchives.proto",
	},
	{
		ExtendedType:  (*ChartArchive)(nil),
		ExtensionType: (*bool)(nil),
		Field:         10025,
		Name:          "TSCH.ChartSupportsRoundedCornersArchive.deprecated_supports_rounded_corners",
		Tag:           "varint,10025,opt,name=deprecated_supports_rounded_corners",
		Filename:      "TSCHArchives.proto",
	},
	{
		ExtendedType:  (*ChartArchive)(nil),
		ExtensionType: (*bool)(nil),
		Field:         10026,
		Name:          "TSCH.ChartSupportsRoundedCornersArchive.supports_rounded_corners",
		Tag:           "varint,10026,opt,name=supports_rounded_corners",
		Filename:      "TSCHArchives.proto",
	},
	{
		ExtendedType:  (*ChartArchive)(nil),
		ExtensionType: (*bool)(nil),
		Field:         10027,
		Name:          "TSCH.ChartSupportsSeriesPropertySpacingArchive.supports_series_value_label_spacing",
		Tag:           "varint,10027,opt,name=supports_series_value_label_spacing",
		Filename:      "TSCHArchives.proto",
	},
	{
		ExtendedType:  (*ChartArchive)(nil),
		ExtensionType: (*bool)(nil),
		Field:         10028,
		Name:          "TSCH.ChartSupportsSeriesPropertySpacingArchive.supports_series_error_bar_spacing",
		Tag:           "varint,10028,opt,name=supports_series_error_bar_spacing",
		Filename:      "TSCHArchives.proto",
	},
	{
		ExtendedType:  (*TSSThemeArchive)(nil),
		ExtensionType: (*ChartPresetsArchive)(nil),
		Field:         120,
		Name:          "TSCH.ChartPresetsArchive.extension",
		Tag:           "bytes,120,opt,name=extension",
		Filename:      "TSCHArchives.proto",
	},
	{
		ExtendedType:  (*ChartUIState)(nil),
		ExtensionType: (*bool)(nil),
		Field:         10022,
		Name:          "TSCH.ChartUIStateMultiDataIndexUpgrade.upgraded_from_model",
		Tag:           "varint,10022,opt,name=upgraded_from_model",
		Filename:      "TSCHArchives.proto",
	},
	{
		ExtendedType:  (*TSKFormatStructArchive)(nil),
		ExtensionType: (*string)(nil),
		Field:         10000,
		Name:          "TSCH.ChartFormatStructExtensions.prefix",
		Tag:           "bytes,10000,opt,name=prefix",
		Filename:      "TSCHArchives.proto",
	},
	{
		ExtendedType:  (*TSKFormatStructArchive)(nil),
		ExtensionType: (*string)(nil),
		Field:         10001,
		Name:          "TSCH.ChartFormatStructExtensions.suffix",
		Tag:           "bytes,10001,opt,name=suffix",
		Filename:      "TSCHArchives.proto",
	},
}

// Extension fields to ChartArchive.
var (
	// optional bool scene3d_settings_constant_depth = 10002;
	E_Scene3DSettingsConstantDepth = &file_TSCHArchives_proto_extTypes[0]
	// optional string last_applied_fill_set_lookup_string = 10004;
	E_LastAppliedFillSetLookupString = &file_TSCHArchives_proto_extTypes[1]
	// optional TSCH.ChartReferenceLinesArchive reference_lines = 10005;
	E_ReferenceLines = &file_TSCHArchives_proto_extTypes[10]
	// optional bool upgraded_to_ui_state = 10021;
	E_ChartMultiDataIndexUpgrade_UpgradedToUiState = &file_TSCHArchives_proto_extTypes[14]
	// optional TSCH.ChartGarlicMinMaxUpgrade garlic_min_max_upgrade = 10010;
	E_ChartGarlicMinMaxUpgrade_GarlicMinMaxUpgrade = &file_TSCHArchives_proto_extTypes[15]
	// optional TSCH.ChartGarlicLabelFormatUpgrade garlic_label_format_upgrade = 10011;
	E_ChartGarlicLabelFormatUpgrade_GarlicLabelFormatUpgrade = &file_TSCHArchives_proto_extTypes[16]
	// optional uint32 preset_index_for_pasteboard = 10000;
	E_ChartPasteboardAdditionsArchive_PresetIndexForPasteboard = &file_TSCHArchives_proto_extTypes[17]
	// optional bytes preset_uuid_for_pasteboard = 10001;
	E_ChartPasteboardAdditionsArchive_PresetUuidForPasteboard = &file_TSCHArchives_proto_extTypes[18]
	// optional TSP.Reference custom_format_list_for_pasteboard = 10003;
	E_ChartPasteboardAdditionsArchive_CustomFormatListForPasteboard = &file_TSCHArchives_proto_extTypes[19]
	// optional bool appearance_preserved_for_preset = 10023;
	E_ChartPreserveAppearanceForPresetArchive_AppearancePreservedForPreset = &file_TSCHArchives_proto_extTypes[20]
	// optional bool supports_proportional_bended_callout_lines = 10024;
	E_ChartSupportsProportionalBendedCalloutLinesArchive_SupportsProportionalBendedCalloutLines = &file_TSCHArchives_proto_extTypes[21]
	// optional bool deprecated_supports_rounded_corners = 10025;
	E_ChartSupportsRoundedCornersArchive_DeprecatedSupportsRoundedCorners = &file_TSCHArchives_proto_extTypes[22]
	// optional bool supports_rounded_corners = 10026;
	E_ChartSupportsRoundedCornersArchive_SupportsRoundedCorners = &file_TSCHArchives_proto_extTypes[23]
	// optional bool supports_series_value_label_spacing = 10027;
	E_ChartSupportsSeriesPropertySpacingArchive_SupportsSeriesValueLabelSpacing = &file_TSCHArchives_proto_extTypes[24]
	// optional bool supports_series_error_bar_spacing = 10028;
	E_ChartSupportsSeriesPropertySpacingArchive_SupportsSeriesErrorBarSpacing = &file_TSCHArchives_proto_extTypes[25]
)

// Extension fields to TSCHCommonChartSeriesStyleArchive.
var (
	// optional bool series_supports_donut = 10001;
	E_SeriesSupportsDonut = &file_TSCHArchives_proto_extTypes[2]
	// optional bool series_supports_radar = 10002;
	E_SeriesSupportsRadar = &file_TSCHArchives_proto_extTypes[3]
)

// Extension fields to TSCHCommonChartSeriesNonStyleArchive.
var (
	// optional bool series_supports_custom_number_format = 10001;
	E_SeriesSupportsCustomNumberFormat = &file_TSCHArchives_proto_extTypes[4]
	// optional bool series_supports_custom_date_format = 10002;
	E_SeriesSupportsCustomDateFormat = &file_TSCHArchives_proto_extTypes[5]
	// optional bool series_supports_callout_lines = 10003;
	E_SeriesSupportsCalloutLines = &file_TSCHArchives_proto_extTypes[6]
)

// Extension fields to TSCHCommonChartAxisStyleArchive.
var (
	// optional bool axis_supports_radar = 10001;
	E_AxisSupportsRadar = &file_TSCHArchives_proto_extTypes[7]
)

// Extension fields to TSCHCommonChartAxisNonStyleArchive.
var (
	// optional bool axis_supports_custom_number_format = 10001;
	E_AxisSupportsCustomNumberFormat = &file_TSCHArchives_proto_extTypes[8]
	// optional bool axis_supports_custom_date_format = 10002;
	E_AxisSupportsCustomDateFormat = &file_TSCHArchives_proto_extTypes[9]
)

// Extension fields to ChartStylePreset.
var (
	// optional TSCH.ChartPresetReferenceLineStylesArchive preset_reference_line_styles = 10000;
	E_PresetReferenceLineStyles = &file_TSCHArchives_proto_extTypes[11]
)

// Extension fields to PropertyValueStorageContainerArchive.
var (
	// optional TSCH.PropertyValueStorageContainerReferenceLinesArchive property_value_storage_container_reference_lines = 10000;
	E_PropertyValueStorageContainerReferenceLines = &file_TSCHArchives_proto_extTypes[12]
)

// Extension fields to ChartDrawableArchive.
var (
	// optional TSCH.ChartArchive unity = 10000;
	E_ChartArchive_Unity = &file_TSCHArchives_proto_extTypes[13]
)

// Extension fields to TSSThemeArchive.
var (
	// optional TSCH.ChartPresetsArchive extension = 120;
	E_ChartPresetsArchive_Extension = &file_TSCHArchives_proto_extTypes[26]
)

// Extension fields to ChartUIState.
var (
	// optional bool upgraded_from_model = 10022;
	E_ChartUIStateMultiDataIndexUpgrade_UpgradedFromModel = &file_TSCHArchives_proto_extTypes[27]
)

// Extension fields to TSKFormatStructArchive.
var (
	// optional string prefix = 10000;
	E_ChartFormatStructExtensions_Prefix = &file_TSCHArchives_proto_extTypes[28]
	// optional string suffix = 10001;
	E_ChartFormatStructExtensions_Suffix = &file_TSCHArchives_proto_extTypes[29]
)

var File_TSCHArchives_proto protoreflect.FileDescriptor

var file_TSCHArchives_proto_rawDesc = []byte{
	0x0a, 0x12, 0x54, 0x53, 0x43, 0x48, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x54, 0x53, 0x43, 0x48, 0x1a, 0x11, 0x54, 0x53, 0x50, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x54,
	0x53, 0x4b, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x11, 0x54, 0x53, 0x44, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x54, 0x53, 0x53, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x54, 0x53, 0x43, 0x48, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x73, 0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x4d, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x72, 0x74, 0x44, 0x72, 0x61, 0x77, 0x61, 0x62,
	0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x44,
	0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x2a, 0x09, 0x08, 0x90, 0x4e, 0x10, 0x80, 0x80, 0x80, 0x80, 0x02,
	0x22, 0xbb, 0x0b, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x72, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x63, 0x68, 0x61, 0x72, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x43, 0x48,
	0x2e, 0x53, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0d,
	0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x34, 0x0a,
	0x0c, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x52, 0x65, 0x63, 0x74, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0b, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x06, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x12, 0x40, 0x0a, 0x10, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x53, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a,
	0x15, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x2a, 0x0a, 0x04, 0x67, 0x72, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x47, 0x72, 0x69, 0x64,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x04, 0x67, 0x72, 0x69, 0x64, 0x12, 0x2a, 0x0a,
	0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x0b, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x0f, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x74, 0x4e, 0x6f, 0x6e, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x10, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x5f,
	0x6e, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x0e, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x4e, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12,
	0x3a, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x61, 0x78, 0x69, 0x73, 0x5f, 0x73, 0x74,
	0x79, 0x6c, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x41, 0x78, 0x69, 0x73, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x14, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x61, 0x78, 0x69, 0x73, 0x5f, 0x6e, 0x6f, 0x6e, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x12, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x41, 0x78, 0x69, 0x73, 0x4e, 0x6f, 0x6e, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x12, 0x40, 0x0a,
	0x14, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x61, 0x78, 0x69, 0x73, 0x5f, 0x73,
	0x74, 0x79, 0x6c, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x12, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x41, 0x78, 0x69, 0x73, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x12,
	0x46, 0x0a, 0x17, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x61, 0x78, 0x69, 0x73,
	0x5f, 0x6e, 0x6f, 0x6e, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x15, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x41, 0x78, 0x69, 0x73, 0x4e, 0x6f,
	0x6e, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x13, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x5f, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x18, 0x11,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x11, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x54, 0x68, 0x65, 0x6d,
	0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x15, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x53, 0x70, 0x61,
	0x72, 0x73, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x52, 0x13, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x53, 0x70, 0x61, 0x72, 0x73, 0x65, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x0f, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x4e, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x12, 0x39, 0x0a,
	0x10, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x55, 0x0a, 0x28, 0x6e, 0x65, 0x65, 0x64, 0x73,
	0x5f, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x23, 0x6e, 0x65, 0x65, 0x64, 0x73,
	0x43, 0x61, 0x6c, 0x63, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x65, 0x64, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31,
	0x0a, 0x0c, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x72, 0x74, 0x79, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x44, 0x69, 0x72, 0x74, 0x79, 0x2a, 0x09, 0x08, 0x90,
	0x4e, 0x10, 0x80, 0x80, 0x80, 0x80, 0x02, 0x32, 0x45, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x12, 0x1a, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x44, 0x72, 0x61,
	0x77, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x18, 0x90, 0x4e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x22, 0x62,
	0x0a, 0x1a, 0x43, 0x68, 0x61, 0x72, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x44, 0x61, 0x74, 0x61,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x32, 0x44, 0x0a, 0x14,
	0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x69, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72,
	0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x18, 0xa5, 0x4e, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x54, 0x6f, 0x55, 0x69, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x22, 0x8c, 0x02, 0x0a, 0x18, 0x43, 0x68, 0x61, 0x72, 0x74, 0x47, 0x61, 0x72, 0x6c,
	0x69, 0x63, 0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e,
	0x74, 0x61, 0x6c, 0x4d, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f,
	0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x12, 0x1b, 0x0a,
	0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x78, 0x32, 0x68, 0x0a, 0x16, 0x67, 0x61, 0x72, 0x6c, 0x69,
	0x63, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x12, 0x12, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x18, 0x9a, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x54,
	0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x47, 0x61, 0x72, 0x6c, 0x69, 0x63, 0x4d,
	0x69, 0x6e, 0x4d, 0x61, 0x78, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x13, 0x67, 0x61,
	0x72, 0x6c, 0x69, 0x63, 0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x22, 0xa2, 0x03, 0x0a, 0x1d, 0x43, 0x68, 0x61, 0x72, 0x74, 0x47, 0x61, 0x72, 0x6c, 0x69,
	0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x55, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x2e, 0x0a, 0x13, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x73, 0x65,
	0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x2b, 0x0a, 0x11, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f,
	0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x66,
	0x66, 0x69, 0x78, 0x12, 0x38, 0x0a, 0x18, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61,
	0x6c, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61,
	0x6c, 0x55, 0x73, 0x65, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x32, 0x77, 0x0a,
	0x1b, 0x67, 0x61, 0x72, 0x6c, 0x69, 0x63, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x12, 0x2e, 0x54,
	0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x18, 0x9b, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x47, 0x61, 0x72, 0x6c, 0x69, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x18, 0x67, 0x61,
	0x72, 0x6c, 0x69, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x55,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x22, 0xb6, 0x02, 0x0a, 0x1f, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x50, 0x61, 0x73, 0x74, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x32, 0x52, 0x0a, 0x1b, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x70,
	0x61, 0x73, 0x74, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x12, 0x2e, 0x54, 0x53, 0x43, 0x48,
	0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x18, 0x90, 0x4e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x46, 0x6f, 0x72, 0x50, 0x61, 0x73, 0x74, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x32, 0x50,
	0x0a, 0x1a, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x5f, 0x66, 0x6f,
	0x72, 0x5f, 0x70, 0x61, 0x73, 0x74, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x12, 0x2e, 0x54,
	0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x18, 0x91, 0x4e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x17, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x55,
	0x75, 0x69, 0x64, 0x46, 0x6f, 0x72, 0x50, 0x61, 0x73, 0x74, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x32, 0x6d, 0x0a, 0x21, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x73, 0x74, 0x65,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x12, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x18, 0x93, 0x4e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x1d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x46, 0x6f, 0x72, 0x50, 0x61, 0x73, 0x74, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x22,
	0x85, 0x01, 0x0a, 0x27, 0x43, 0x68, 0x61, 0x72, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x32, 0x5a, 0x0a, 0x1f, 0x61,
	0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x12, 0x12,
	0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x18, 0xa7, 0x4e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x61, 0x70, 0x70, 0x65, 0x61,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x46, 0x6f,
	0x72, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x22, 0xa5, 0x01, 0x0a, 0x32, 0x43, 0x68, 0x61, 0x72,
	0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x6f,
	0x75, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x32, 0x6f,
	0x0a, 0x2a, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x62, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x12, 0x2e, 0x54,
	0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x18, 0xa8, 0x4e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x26, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x22,
	0xd7, 0x01, 0x0a, 0x22, 0x43, 0x68, 0x61, 0x72, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x73, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x32, 0x62, 0x0a, 0x23, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x12, 0x2e,
	0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x18, 0xa9, 0x4e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x20, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x65, 0x64, 0x43, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x73, 0x32, 0x4d, 0x0a, 0x18, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x63,
	0x6f, 0x72, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x12, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x18, 0xaa, 0x4e, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x16, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x65, 0x64, 0x43, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x73, 0x22, 0xed, 0x01, 0x0a, 0x29, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x53, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x53, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x32, 0x61, 0x0a, 0x23, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x12,
	0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x18, 0xab, 0x4e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1f, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x53, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x32, 0x5d, 0x0a, 0x21, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x62, 0x61, 0x72, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x12,
	0x12, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x18, 0xac, 0x4e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x42,
	0x61, 0x72, 0x53, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x22, 0xc3, 0x03, 0x0a, 0x10, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x47, 0x72, 0x69, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x72, 0x6f, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x72, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x08, 0x67, 0x72,
	0x69, 0x64, 0x5f, 0x72, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x54,
	0x53, 0x43, 0x48, 0x2e, 0x47, 0x72, 0x69, 0x64, 0x52, 0x6f, 0x77, 0x52, 0x07, 0x67, 0x72, 0x69,
	0x64, 0x52, 0x6f, 0x77, 0x12, 0x44, 0x0a, 0x05, 0x69, 0x64, 0x4d, 0x61, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x47, 0x72, 0x69, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x72,
	0x74, 0x47, 0x72, 0x69, 0x64, 0x52, 0x6f, 0x77, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64,
	0x4d, 0x61, 0x70, 0x52, 0x05, 0x69, 0x64, 0x4d, 0x61, 0x70, 0x1a, 0x82, 0x02, 0x0a, 0x17, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x47, 0x72, 0x69, 0x64, 0x52, 0x6f, 0x77, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x49, 0x64, 0x4d, 0x61, 0x70, 0x12, 0x52, 0x0a, 0x0a, 0x72, 0x6f, 0x77, 0x5f, 0x69, 0x64,
	0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x54, 0x53, 0x43,
	0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x47, 0x72, 0x69, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x47, 0x72, 0x69, 0x64, 0x52, 0x6f, 0x77, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x4d, 0x61, 0x70, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x72, 0x6f, 0x77, 0x49, 0x64, 0x4d, 0x61, 0x70, 0x12, 0x58, 0x0a, 0x0d, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x47, 0x72,
	0x69, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x47,
	0x72, 0x69, 0x64, 0x52, 0x6f, 0x77, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x4d, 0x61,
	0x70, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49,
	0x64, 0x4d, 0x61, 0x70, 0x1a, 0x39, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22,
	0xa0, 0x01, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x72, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x6f,
	0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x14,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x12, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x32,
	0x0a, 0x15, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x13, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x65, 0x73, 0x22, 0xd1, 0x01, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x6c,
	0x53, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x0c, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x40, 0x0a, 0x1d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x68, 0x65,
	0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66,
	0x54, 0x68, 0x65, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x73, 0x12, 0x33, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x22, 0x83, 0x03, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x12, 0x2f, 0x0a, 0x0b, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x31, 0x0a, 0x0c,
	0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x0b, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12,
	0x3a, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x61, 0x78, 0x69, 0x73, 0x5f, 0x73, 0x74,
	0x79, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x41, 0x78, 0x69, 0x73, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x14, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x61, 0x78, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x12, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x41, 0x78, 0x69, 0x73, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x12, 0x33, 0x0a,
	0x0d, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x73, 0x12, 0x39, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x70, 0x61,
	0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x2a, 0x09, 0x08, 0x90, 0x4e, 0x10, 0x80, 0x80, 0x80, 0x80, 0x02, 0x22, 0x99, 0x01, 0x0a,
	0x13, 0x43, 0x68, 0x61, 0x72, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x12, 0x33, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x32, 0x4d, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x2e, 0x54, 0x53, 0x53, 0x2e, 0x54, 0x53, 0x53,
	0x54, 0x68, 0x65, 0x6d, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x18, 0x78, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xdf, 0x06, 0x0a, 0x24, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x12, 0x2f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x74, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x12, 0x35, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x72, 0x74, 0x5f, 0x6e, 0x6f, 0x6e, 0x73,
	0x74, 0x79, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x4e, 0x6f, 0x6e, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x6c, 0x65, 0x67,
	0x65, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x0b, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x37, 0x0a, 0x0f,
	0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x5f, 0x6e, 0x6f, 0x6e, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x4e, 0x6f, 0x6e,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x45, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x61,
	0x78, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x53, 0x70, 0x61, 0x72, 0x73, 0x65, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x0f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x41, 0x78, 0x69, 0x73, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x14,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x61, 0x78, 0x69, 0x73, 0x5f, 0x6e, 0x6f, 0x6e, 0x73, 0x74,
	0x79, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x53, 0x70, 0x61, 0x72, 0x73, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x12, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x78, 0x69, 0x73,
	0x4e, 0x6f, 0x6e, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x14, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x61, 0x78, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x53, 0x70,
	0x61, 0x72, 0x73, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x52, 0x12, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x41, 0x78, 0x69, 0x73,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x17, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x5f, 0x61, 0x78, 0x69, 0x73, 0x5f, 0x6e, 0x6f, 0x6e, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x53, 0x70,
	0x61, 0x72, 0x73, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x52, 0x15, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x41, 0x78, 0x69, 0x73,
	0x4e, 0x6f, 0x6e, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x13, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x5f, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x53, 0x70, 0x61,
	0x72, 0x73, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x52, 0x11, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x15, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x53, 0x70, 0x61, 0x72, 0x73, 0x65,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x13,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x6e, 0x6f,
	0x6e, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x53, 0x70, 0x61, 0x72, 0x73, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x4e, 0x6f, 0x6e, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x10, 0x70, 0x61, 0x72,
	0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x53, 0x70, 0x61, 0x72, 0x73, 0x65,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x0f,
	0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x2a,
	0x09, 0x08, 0x90, 0x4e, 0x10, 0x80, 0x80, 0x80, 0x80, 0x02, 0x22, 0xcf, 0x01, 0x0a, 0x1a, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x74, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x54, 0x53, 0x53, 0x2e, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x12, 0x4f, 0x0a, 0x0d, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x54, 0x53, 0x43, 0x48,
	0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0c, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x12, 0x37, 0x0a, 0x18, 0x63, 0x6f, 0x70, 0x69, 0x65, 0x64, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x72, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x63, 0x6f, 0x70, 0x69, 0x65, 0x64, 0x46, 0x72, 0x6f,
	0x6d, 0x45, 0x6e, 0x74, 0x69, 0x72, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x22, 0x59, 0x0a, 0x1d,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61,
	0x74, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x61, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x5b, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x41, 0x78, 0x69, 0x73, 0x49, 0x44, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2b, 0x0a,
	0x09, 0x61, 0x78, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0e, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x41, 0x78, 0x69, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x61, 0x78, 0x69, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x61, 0x6c, 0x22, 0x6e, 0x0a, 0x21, 0x43, 0x68, 0x61, 0x72, 0x74, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x31, 0x0a, 0x07, 0x61, 0x78, 0x69, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x41,
	0x78, 0x69, 0x73, 0x49, 0x44, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x06, 0x61, 0x78,
	0x69, 0x73, 0x49, 0x64, 0x22, 0xea, 0x01, 0x0a, 0x19, 0x43, 0x68, 0x61, 0x72, 0x74, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x54,
	0x79, 0x70, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x08, 0x70, 0x61, 0x74, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x5f, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x54, 0x53,
	0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x74, 0x68, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0c, 0x73, 0x75,
	0x62, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x09, 0x61, 0x72,
	0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x22, 0xa9, 0x01, 0x0a, 0x15, 0x43, 0x68, 0x61, 0x72, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x54, 0x53, 0x44,
	0x2e, 0x44, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x12, 0x24, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x05, 0x63, 0x68, 0x61, 0x72, 0x74, 0x12, 0x35, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x22, 0xf7, 0x01,
	0x0a, 0x18, 0x43, 0x68, 0x61, 0x72, 0x74, 0x43, 0x44, 0x45, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x05, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6f, 0x77, 0x5f, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72,
	0x6f, 0x77, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6f,
	0x77, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x72, 0x6f, 0x77, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0xa4, 0x03, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x72,
	0x74, 0x55, 0x49, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x05, 0x63, 0x68, 0x61, 0x72, 0x74, 0x12, 0x31,
	0x0a, 0x15, 0x63, 0x64, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x63,
	0x64, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x6f, 0x77, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x12, 0x31, 0x0a, 0x15, 0x63, 0x64, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f,
	0x6c, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x12, 0x63, 0x64, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x12, 0x63, 0x64, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x63, 0x64, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2b, 0x0a, 0x12, 0x63, 0x64, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f,
	0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63,
	0x64, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31,
	0x0a, 0x15, 0x63, 0x64, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6b,
	0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x63,
	0x64, 0x65, 0x55, 0x73, 0x65, 0x46, 0x75, 0x6c, 0x6c, 0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x12, 0x2f, 0x0a, 0x14, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x73, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x11, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x3f, 0x0a, 0x1d, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x69, 0x73, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x74, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x2a, 0x09, 0x08, 0x90, 0x4e, 0x10, 0x80, 0x80, 0x80, 0x80, 0x02, 0x22, 0x68,
	0x0a, 0x21, 0x43, 0x68, 0x61, 0x72, 0x74, 0x55, 0x49, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x55, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x32, 0x43, 0x0a, 0x13, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x5f,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x12, 0x2e, 0x54, 0x53, 0x43,
	0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x55, 0x49, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0xa6,
	0x4e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x46,
	0x72, 0x6f, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0x89, 0x01, 0x0a, 0x1b, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x34, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x12, 0x1b, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x54, 0x53, 0x4b, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x18,
	0x90, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x32, 0x34,
	0x0a, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x1b, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x54,
	0x53, 0x4b, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x18, 0x91, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75,
	0x66, 0x66, 0x69, 0x78, 0x22, 0x6c, 0x0a, 0x1e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x6f, 0x6e, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2b, 0x0a, 0x09, 0x6e, 0x6f, 0x6e, 0x5f, 0x73, 0x74,
	0x79, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x6e, 0x6f, 0x6e, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x22, 0xc5, 0x01, 0x0a, 0x26, 0x43, 0x68, 0x61, 0x72, 0x74, 0x41, 0x78, 0x69, 0x73,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x6f, 0x6e,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x31, 0x0a,
	0x07, 0x61, 0x78, 0x69, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x41, 0x78, 0x69, 0x73, 0x49,
	0x44, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x06, 0x61, 0x78, 0x69, 0x73, 0x49, 0x64,
	0x12, 0x68, 0x0a, 0x1e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69,
	0x6e, 0x65, 0x4e, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x1a,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x6f, 0x6e,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xa7, 0x01, 0x0a, 0x23, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x41, 0x78, 0x69, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x61, 0x78, 0x69, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x41, 0x78, 0x69, 0x73, 0x49, 0x44, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x06, 0x61,
	0x78, 0x69, 0x73, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x15, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x53, 0x70, 0x61, 0x72, 0x73,
	0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52,
	0x13, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x73, 0x22, 0xcc, 0x02, 0x0a, 0x1a, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x12, 0x6e, 0x0a, 0x1d, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73,
	0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x54, 0x53, 0x43,
	0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x41, 0x78, 0x69, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x19, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73,
	0x4d, 0x61, 0x70, 0x12, 0x64, 0x0a, 0x19, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x41, 0x78, 0x69, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x4c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x16, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x12, 0x58, 0x0a, 0x21, 0x74, 0x68, 0x65,
	0x6d, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x1d, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x22, 0x6b, 0x0a, 0x25, 0x43, 0x68, 0x61, 0x72, 0x74, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x42, 0x0a, 0x15,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73,
	0x74, 0x79, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x13, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73,
	0x22, 0xcb, 0x01, 0x0a, 0x2c, 0x43, 0x68, 0x61, 0x72, 0x74, 0x41, 0x78, 0x69, 0x73, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x61, 0x72, 0x73,
	0x65, 0x4e, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x12, 0x31, 0x0a, 0x07, 0x61, 0x78, 0x69, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x41,
	0x78, 0x69, 0x73, 0x49, 0x44, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x06, 0x61, 0x78,
	0x69, 0x73, 0x49, 0x64, 0x12, 0x68, 0x0a, 0x1e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x54,
	0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x1a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x6e,
	0x65, 0x4e, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xea,
	0x02, 0x0a, 0x32, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x74, 0x0a, 0x1d, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x54,
	0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x41, 0x78, 0x69, 0x73, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x61, 0x72, 0x73, 0x65,
	0x4e, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x19, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x4e,
	0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x12, 0x64, 0x0a, 0x19, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74,
	0x79, 0x6c, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x41, 0x78, 0x69, 0x73, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x16, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x4d, 0x61,
	0x70, 0x12, 0x58, 0x0a, 0x21, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x1d, 0x74, 0x68,
	0x65, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x3a, 0x5a, 0x0a, 0x1f, 0x73,
	0x63, 0x65, 0x6e, 0x65, 0x33, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x12, 0x12,
	0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x18, 0x92, 0x4e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x73, 0x63, 0x65, 0x6e, 0x65,
	0x33, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x3a, 0x60, 0x0a, 0x23, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x65, 0x74,
	0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x12,
	0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x18, 0x94, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x6c, 0x61, 0x73, 0x74, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x6c, 0x53, 0x65, 0x74, 0x4c, 0x6f, 0x6f,
	0x6b, 0x75, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x5c, 0x0a, 0x15, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x64, 0x6f, 0x6e,
	0x75, 0x74, 0x12, 0x27, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x18, 0x91, 0x4e, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x13, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x44, 0x6f, 0x6e, 0x75, 0x74, 0x3a, 0x5c, 0x0a, 0x15, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x72, 0x61, 0x64, 0x61, 0x72,
	0x12, 0x27, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x18, 0x92, 0x4e, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x13, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x52, 0x61, 0x64, 0x61, 0x72, 0x3a, 0x7b, 0x0a, 0x24, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x2a, 0x2e,
	0x54, 0x53, 0x43, 0x48, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4e, 0x6f, 0x6e, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x18, 0x91, 0x4e, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x20, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x3a, 0x77, 0x0a, 0x22, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x2a, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e,
	0x54, 0x53, 0x43, 0x48, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x4e, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x18, 0x92, 0x4e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x44, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x3a, 0x6e, 0x0a, 0x1d, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x2a, 0x2e, 0x54,
	0x53, 0x43, 0x48, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4e, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x18, 0x93, 0x4e, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1a, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x43,
	0x61, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x3a, 0x56, 0x0a, 0x13, 0x61,
	0x78, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x72, 0x61, 0x64,
	0x61, 0x72, 0x12, 0x25, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x41, 0x78, 0x69, 0x73, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x18, 0x91, 0x4e, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x61, 0x78, 0x69, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x61,
	0x64, 0x61, 0x72, 0x3a, 0x75, 0x0a, 0x22, 0x61, 0x78, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x28, 0x2e, 0x54, 0x53, 0x43, 0x48,
	0x2e, 0x54, 0x53, 0x43, 0x48, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x41, 0x78, 0x69, 0x73, 0x4e, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x18, 0x91, 0x4e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x61, 0x78, 0x69, 0x73,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x3a, 0x71, 0x0a, 0x20, 0x61, 0x78,
	0x69, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x28,
	0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x41, 0x78, 0x69, 0x73, 0x4e, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x18, 0x92, 0x4e, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1c, 0x61, 0x78, 0x69, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x3a, 0x5e, 0x0a,
	0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73,
	0x12, 0x12, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x18, 0x95, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x54, 0x53,
	0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0e, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x3a, 0x85, 0x01,
	0x0a, 0x1c, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x12, 0x16,
	0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x90, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x19, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x73, 0x3a, 0xcc, 0x01, 0x0a, 0x30, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x2a, 0x2e, 0x54, 0x53, 0x43,
	0x48, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x18, 0x90, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x54, 0x53, 0x43, 0x48, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x73,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x2b, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c,
	0x69, 0x6e, 0x65, 0x73, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x2f, 0x6b, 0x70, 0x62,
}

var (
	file_TSCHArchives_proto_rawDescOnce sync.Once
	file_TSCHArchives_proto_rawDescData = file_TSCHArchives_proto_rawDesc
)

func file_TSCHArchives_proto_rawDescGZIP() []byte {
	file_TSCHArchives_proto_rawDescOnce.Do(func() {
		file_TSCHArchives_proto_rawDescData = protoimpl.X.CompressGZIP(file_TSCHArchives_proto_rawDescData)
	})
	return file_TSCHArchives_proto_rawDescData
}

var file_TSCHArchives_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
var file_TSCHArchives_proto_goTypes = []interface{}{
	(*ChartDrawableArchive)(nil),                               // 0: TSCH.ChartDrawableArchive
	(*ChartArchive)(nil),                                       // 1: TSCH.ChartArchive
	(*ChartMultiDataIndexUpgrade)(nil),                         // 2: TSCH.ChartMultiDataIndexUpgrade
	(*ChartGarlicMinMaxUpgrade)(nil),                           // 3: TSCH.ChartGarlicMinMaxUpgrade
	(*ChartGarlicLabelFormatUpgrade)(nil),                      // 4: TSCH.ChartGarlicLabelFormatUpgrade
	(*ChartPasteboardAdditionsArchive)(nil),                    // 5: TSCH.ChartPasteboardAdditionsArchive
	(*ChartPreserveAppearanceForPresetArchive)(nil),            // 6: TSCH.ChartPreserveAppearanceForPresetArchive
	(*ChartSupportsProportionalBendedCalloutLinesArchive)(nil), // 7: TSCH.ChartSupportsProportionalBendedCalloutLinesArchive
	(*ChartSupportsRoundedCornersArchive)(nil),                 // 8: TSCH.ChartSupportsRoundedCornersArchive
	(*ChartSupportsSeriesPropertySpacingArchive)(nil),          // 9: TSCH.ChartSupportsSeriesPropertySpacingArchive
	(*ChartGridArchive)(nil),                                   // 10: TSCH.ChartGridArchive
	(*ChartMediatorArchive)(nil),                               // 11: TSCH.ChartMediatorArchive
	(*ChartFillSetArchive)(nil),                                // 12: TSCH.ChartFillSetArchive
	(*ChartStylePreset)(nil),                                   // 13: TSCH.ChartStylePreset
	(*ChartPresetsArchive)(nil),                                // 14: TSCH.ChartPresetsArchive
	(*PropertyValueStorageContainerArchive)(nil),               // 15: TSCH.PropertyValueStorageContainerArchive
	(*StylePasteboardDataArchive)(nil),                         // 16: TSCH.StylePasteboardDataArchive
	(*ChartSelectionPathTypeArchive)(nil),                      // 17: TSCH.ChartSelectionPathTypeArchive
	(*ChartAxisIDArchive)(nil),                                 // 18: TSCH.ChartAxisIDArchive
	(*ChartSelectionPathArgumentArchive)(nil),                  // 19: TSCH.ChartSelectionPathArgumentArchive
	(*ChartSelectionPathArchive)(nil),                          // 20: TSCH.ChartSelectionPathArchive
	(*ChartSelectionArchive)(nil),                              // 21: TSCH.ChartSelectionArchive
	(*ChartCDESelectionArchive)(nil),                           // 22: TSCH.ChartCDESelectionArchive
	(*ChartUIState)(nil),                                       // 23: TSCH.ChartUIState
	(*ChartUIStateMultiDataIndexUpgrade)(nil),                  // 24: TSCH.ChartUIStateMultiDataIndexUpgrade
	(*ChartFormatStructExtensions)(nil),                        // 25: TSCH.ChartFormatStructExtensions
	(*ChartReferenceLineNonStyleItem)(nil),                     // 26: TSCH.ChartReferenceLineNonStyleItem
	(*ChartAxisReferenceLineNonStylesArchive)(nil),             // 27: TSCH.ChartAxisReferenceLineNonStylesArchive
	(*ChartAxisReferenceLineStylesArchive)(nil),                // 28: TSCH.ChartAxisReferenceLineStylesArchive
	(*ChartReferenceLinesArchive)(nil),                         // 29: TSCH.ChartReferenceLinesArchive
	(*ChartPresetReferenceLineStylesArchive)(nil),              // 30: TSCH.ChartPresetReferenceLineStylesArchive
	(*ChartAxisReferenceLineSparseNonStylesArchive)(nil),       // 31: TSCH.ChartAxisReferenceLineSparseNonStylesArchive
	(*PropertyValueStorageContainerReferenceLinesArchive)(nil), // 32: TSCH.PropertyValueStorageContainerReferenceLinesArchive
	(*ChartGridArchive_ChartGridRowColumnIdMap)(nil),           // 33: TSCH.ChartGridArchive.ChartGridRowColumnIdMap
	(*ChartGridArchive_ChartGridRowColumnIdMap_Entry)(nil),     // 34: TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry
	(*DrawableArchive)(nil),                                    // 35: TSD.DrawableArchive
	(ChartType)(0),                                             // 36: TSCH.ChartType
	(ScatterFormat)(0),                                         // 37: TSCH.ScatterFormat
	(*RectArchive)(nil),                                        // 38: TSCH.RectArchive
	(*Reference)(nil),                                          // 39: TSP.Reference
	(SeriesDirection)(0),                                       // 40: TSCH.SeriesDirection
	(*SparseReferenceArray)(nil),                               // 41: TSP.SparseReferenceArray
	(*GridRow)(nil),                                            // 42: TSCH.GridRow
	(*StyleArchive)(nil),                                       // 43: TSS.StyleArchive
	(AxisType)(0),                                              // 44: TSCH.AxisType
	(*DrawableSelectionArchive)(nil),                           // 45: TSD.DrawableSelectionArchive
	(*UUID)(nil),                                               // 46: TSP.UUID
	(*TSCHCommonChartSeriesStyleArchive)(nil),                  // 47: TSCH.TSCHCommonChartSeriesStyleArchive
	(*TSCHCommonChartSeriesNonStyleArchive)(nil),               // 48: TSCH.TSCHCommonChartSeriesNonStyleArchive
	(*TSCHCommonChartAxisStyleArchive)(nil),                    // 49: TSCH.TSCHCommonChartAxisStyleArchive
	(*TSCHCommonChartAxisNonStyleArchive)(nil),                 // 50: TSCH.TSCHCommonChartAxisNonStyleArchive
	(*TSSThemeArchive)(nil),                                    // 51: TSS.TSSThemeArchive
	(*TSKFormatStructArchive)(nil),                             // 52: TSK.TSKFormatStructArchive
}
var file_TSCHArchives_proto_depIdxs = []int32{
	35,  // 0: TSCH.ChartDrawableArchive.super:type_name -> TSD.DrawableArchive
	36,  // 1: TSCH.ChartArchive.chart_type:type_name -> TSCH.ChartType
	37,  // 2: TSCH.ChartArchive.scatter_format:type_name -> TSCH.ScatterFormat
	38,  // 3: TSCH.ChartArchive.legend_frame:type_name -> TSCH.RectArchive
	39,  // 4: TSCH.ChartArchive.preset:type_name -> TSP.Reference
	40,  // 5: TSCH.ChartArchive.series_direction:type_name -> TSCH.SeriesDirection
	10,  // 6: TSCH.ChartArchive.grid:type_name -> TSCH.ChartGridArchive
	39,  // 7: TSCH.ChartArchive.mediator:type_name -> TSP.Reference
	39,  // 8: TSCH.ChartArchive.chart_style:type_name -> TSP.Reference
	39,  // 9: TSCH.ChartArchive.chart_non_style:type_name -> TSP.Reference
	39,  // 10: TSCH.ChartArchive.legend_style:type_name -> TSP.Reference
	39,  // 11: TSCH.ChartArchive.legend_non_style:type_name -> TSP.Reference
	39,  // 12: TSCH.ChartArchive.value_axis_styles:type_name -> TSP.Reference
	39,  // 13: TSCH.ChartArchive.value_axis_nonstyles:type_name -> TSP.Reference
	39,  // 14: TSCH.ChartArchive.category_axis_styles:type_name -> TSP.Reference
	39,  // 15: TSCH.ChartArchive.category_axis_nonstyles:type_name -> TSP.Reference
	39,  // 16: TSCH.ChartArchive.series_theme_styles:type_name -> TSP.Reference
	41,  // 17: TSCH.ChartArchive.series_private_styles:type_name -> TSP.SparseReferenceArray
	41,  // 18: TSCH.ChartArchive.series_non_styles:type_name -> TSP.SparseReferenceArray
	39,  // 19: TSCH.ChartArchive.paragraph_styles:type_name -> TSP.Reference
	39,  // 20: TSCH.ChartArchive.owned_preset:type_name -> TSP.Reference
	42,  // 21: TSCH.ChartGridArchive.grid_row:type_name -> TSCH.GridRow
	33,  // 22: TSCH.ChartGridArchive.idMap:type_name -> TSCH.ChartGridArchive.ChartGridRowColumnIdMap
	39,  // 23: TSCH.ChartMediatorArchive.info:type_name -> TSP.Reference
	39,  // 24: TSCH.ChartFillSetArchive.series_styles:type_name -> TSP.Reference
	39,  // 25: TSCH.ChartStylePreset.chart_style:type_name -> TSP.Reference
	39,  // 26: TSCH.ChartStylePreset.legend_style:type_name -> TSP.Reference
	39,  // 27: TSCH.ChartStylePreset.value_axis_styles:type_name -> TSP.Reference
	39,  // 28: TSCH.ChartStylePreset.category_axis_styles:type_name -> TSP.Reference
	39,  // 29: TSCH.ChartStylePreset.series_styles:type_name -> TSP.Reference
	39,  // 30: TSCH.ChartStylePreset.paragraph_styles:type_name -> TSP.Reference
	39,  // 31: TSCH.ChartPresetsArchive.chart_presets:type_name -> TSP.Reference
	39,  // 32: TSCH.PropertyValueStorageContainerArchive.chart_style:type_name -> TSP.Reference
	39,  // 33: TSCH.PropertyValueStorageContainerArchive.chart_nonstyle:type_name -> TSP.Reference
	39,  // 34: TSCH.PropertyValueStorageContainerArchive.legend_style:type_name -> TSP.Reference
	39,  // 35: TSCH.PropertyValueStorageContainerArchive.legend_nonstyle:type_name -> TSP.Reference
	41,  // 36: TSCH.PropertyValueStorageContainerArchive.value_axis_styles:type_name -> TSP.SparseReferenceArray
	41,  // 37: TSCH.PropertyValueStorageContainerArchive.value_axis_nonstyles:type_name -> TSP.SparseReferenceArray
	41,  // 38: TSCH.PropertyValueStorageContainerArchive.category_axis_styles:type_name -> TSP.SparseReferenceArray
	41,  // 39: TSCH.PropertyValueStorageContainerArchive.category_axis_nonstyles:type_name -> TSP.SparseReferenceArray
	41,  // 40: TSCH.PropertyValueStorageContainerArchive.series_theme_styles:type_name -> TSP.SparseReferenceArray
	41,  // 41: TSCH.PropertyValueStorageContainerArchive.series_private_styles:type_name -> TSP.SparseReferenceArray
	41,  // 42: TSCH.PropertyValueStorageContainerArchive.series_nonstyles:type_name -> TSP.SparseReferenceArray
	41,  // 43: TSCH.PropertyValueStorageContainerArchive.paragraph_styles:type_name -> TSP.SparseReferenceArray
	43,  // 44: TSCH.StylePasteboardDataArchive.super:type_name -> TSS.StyleArchive
	15,  // 45: TSCH.StylePasteboardDataArchive.style_network:type_name -> TSCH.PropertyValueStorageContainerArchive
	44,  // 46: TSCH.ChartAxisIDArchive.axis_type:type_name -> TSCH.AxisType
	18,  // 47: TSCH.ChartSelectionPathArgumentArchive.axis_id:type_name -> TSCH.ChartAxisIDArchive
	17,  // 48: TSCH.ChartSelectionPathArchive.path_type:type_name -> TSCH.ChartSelectionPathTypeArchive
	20,  // 49: TSCH.ChartSelectionPathArchive.sub_selection:type_name -> TSCH.ChartSelectionPathArchive
	19,  // 50: TSCH.ChartSelectionPathArchive.arguments:type_name -> TSCH.ChartSelectionPathArgumentArchive
	45,  // 51: TSCH.ChartSelectionArchive.super:type_name -> TSD.DrawableSelectionArchive
	39,  // 52: TSCH.ChartSelectionArchive.chart:type_name -> TSP.Reference
	20,  // 53: TSCH.ChartSelectionArchive.paths:type_name -> TSCH.ChartSelectionPathArchive
	39,  // 54: TSCH.ChartCDESelectionArchive.chart:type_name -> TSP.Reference
	39,  // 55: TSCH.ChartUIState.chart:type_name -> TSP.Reference
	39,  // 56: TSCH.ChartReferenceLineNonStyleItem.non_style:type_name -> TSP.Reference
	46,  // 57: TSCH.ChartReferenceLineNonStyleItem.uuid:type_name -> TSP.UUID
	18,  // 58: TSCH.ChartAxisReferenceLineNonStylesArchive.axis_id:type_name -> TSCH.ChartAxisIDArchive
	26,  // 59: TSCH.ChartAxisReferenceLineNonStylesArchive.reference_line_non_style_items:type_name -> TSCH.ChartReferenceLineNonStyleItem
	18,  // 60: TSCH.ChartAxisReferenceLineStylesArchive.axis_id:type_name -> TSCH.ChartAxisIDArchive
	41,  // 61: TSCH.ChartAxisReferenceLineStylesArchive.reference_line_styles:type_name -> TSP.SparseReferenceArray
	27,  // 62: TSCH.ChartReferenceLinesArchive.reference_line_non_styles_map:type_name -> TSCH.ChartAxisReferenceLineNonStylesArchive
	28,  // 63: TSCH.ChartReferenceLinesArchive.reference_line_styles_map:type_name -> TSCH.ChartAxisReferenceLineStylesArchive
	39,  // 64: TSCH.ChartReferenceLinesArchive.theme_preset_reference_line_style:type_name -> TSP.Reference
	39,  // 65: TSCH.ChartPresetReferenceLineStylesArchive.reference_line_styles:type_name -> TSP.Reference
	18,  // 66: TSCH.ChartAxisReferenceLineSparseNonStylesArchive.axis_id:type_name -> TSCH.ChartAxisIDArchive
	26,  // 67: TSCH.ChartAxisReferenceLineSparseNonStylesArchive.reference_line_non_style_items:type_name -> TSCH.ChartReferenceLineNonStyleItem
	31,  // 68: TSCH.PropertyValueStorageContainerReferenceLinesArchive.reference_line_non_styles_map:type_name -> TSCH.ChartAxisReferenceLineSparseNonStylesArchive
	28,  // 69: TSCH.PropertyValueStorageContainerReferenceLinesArchive.reference_line_styles_map:type_name -> TSCH.ChartAxisReferenceLineStylesArchive
	39,  // 70: TSCH.PropertyValueStorageContainerReferenceLinesArchive.theme_preset_reference_line_style:type_name -> TSP.Reference
	34,  // 71: TSCH.ChartGridArchive.ChartGridRowColumnIdMap.row_id_map:type_name -> TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry
	34,  // 72: TSCH.ChartGridArchive.ChartGridRowColumnIdMap.column_id_map:type_name -> TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry
	1,   // 73: TSCH.scene3d_settings_constant_depth:extendee -> TSCH.ChartArchive
	1,   // 74: TSCH.last_applied_fill_set_lookup_string:extendee -> TSCH.ChartArchive
	47,  // 75: TSCH.series_supports_donut:extendee -> TSCH.TSCHCommonChartSeriesStyleArchive
	47,  // 76: TSCH.series_supports_radar:extendee -> TSCH.TSCHCommonChartSeriesStyleArchive
	48,  // 77: TSCH.series_supports_custom_number_format:extendee -> TSCH.TSCHCommonChartSeriesNonStyleArchive
	48,  // 78: TSCH.series_supports_custom_date_format:extendee -> TSCH.TSCHCommonChartSeriesNonStyleArchive
	48,  // 79: TSCH.series_supports_callout_lines:extendee -> TSCH.TSCHCommonChartSeriesNonStyleArchive
	49,  // 80: TSCH.axis_supports_radar:extendee -> TSCH.TSCHCommonChartAxisStyleArchive
	50,  // 81: TSCH.axis_supports_custom_number_format:extendee -> TSCH.TSCHCommonChartAxisNonStyleArchive
	50,  // 82: TSCH.axis_supports_custom_date_format:extendee -> TSCH.TSCHCommonChartAxisNonStyleArchive
	1,   // 83: TSCH.reference_lines:extendee -> TSCH.ChartArchive
	13,  // 84: TSCH.preset_reference_line_styles:extendee -> TSCH.ChartStylePreset
	15,  // 85: TSCH.property_value_storage_container_reference_lines:extendee -> TSCH.PropertyValueStorageContainerArchive
	0,   // 86: TSCH.ChartArchive.unity:extendee -> TSCH.ChartDrawableArchive
	1,   // 87: TSCH.ChartMultiDataIndexUpgrade.upgraded_to_ui_state:extendee -> TSCH.ChartArchive
	1,   // 88: TSCH.ChartGarlicMinMaxUpgrade.garlic_min_max_upgrade:extendee -> TSCH.ChartArchive
	1,   // 89: TSCH.ChartGarlicLabelFormatUpgrade.garlic_label_format_upgrade:extendee -> TSCH.ChartArchive
	1,   // 90: TSCH.ChartPasteboardAdditionsArchive.preset_index_for_pasteboard:extendee -> TSCH.ChartArchive
	1,   // 91: TSCH.ChartPasteboardAdditionsArchive.preset_uuid_for_pasteboard:extendee -> TSCH.ChartArchive
	1,   // 92: TSCH.ChartPasteboardAdditionsArchive.custom_format_list_for_pasteboard:extendee -> TSCH.ChartArchive
	1,   // 93: TSCH.ChartPreserveAppearanceForPresetArchive.appearance_preserved_for_preset:extendee -> TSCH.ChartArchive
	1,   // 94: TSCH.ChartSupportsProportionalBendedCalloutLinesArchive.supports_proportional_bended_callout_lines:extendee -> TSCH.ChartArchive
	1,   // 95: TSCH.ChartSupportsRoundedCornersArchive.deprecated_supports_rounded_corners:extendee -> TSCH.ChartArchive
	1,   // 96: TSCH.ChartSupportsRoundedCornersArchive.supports_rounded_corners:extendee -> TSCH.ChartArchive
	1,   // 97: TSCH.ChartSupportsSeriesPropertySpacingArchive.supports_series_value_label_spacing:extendee -> TSCH.ChartArchive
	1,   // 98: TSCH.ChartSupportsSeriesPropertySpacingArchive.supports_series_error_bar_spacing:extendee -> TSCH.ChartArchive
	51,  // 99: TSCH.ChartPresetsArchive.extension:extendee -> TSS.TSSThemeArchive
	23,  // 100: TSCH.ChartUIStateMultiDataIndexUpgrade.upgraded_from_model:extendee -> TSCH.ChartUIState
	52,  // 101: TSCH.ChartFormatStructExtensions.prefix:extendee -> TSK.TSKFormatStructArchive
	52,  // 102: TSCH.ChartFormatStructExtensions.suffix:extendee -> TSK.TSKFormatStructArchive
	29,  // 103: TSCH.reference_lines:type_name -> TSCH.ChartReferenceLinesArchive
	30,  // 104: TSCH.preset_reference_line_styles:type_name -> TSCH.ChartPresetReferenceLineStylesArchive
	32,  // 105: TSCH.property_value_storage_container_reference_lines:type_name -> TSCH.PropertyValueStorageContainerReferenceLinesArchive
	1,   // 106: TSCH.ChartArchive.unity:type_name -> TSCH.ChartArchive
	3,   // 107: TSCH.ChartGarlicMinMaxUpgrade.garlic_min_max_upgrade:type_name -> TSCH.ChartGarlicMinMaxUpgrade
	4,   // 108: TSCH.ChartGarlicLabelFormatUpgrade.garlic_label_format_upgrade:type_name -> TSCH.ChartGarlicLabelFormatUpgrade
	39,  // 109: TSCH.ChartPasteboardAdditionsArchive.custom_format_list_for_pasteboard:type_name -> TSP.Reference
	14,  // 110: TSCH.ChartPresetsArchive.extension:type_name -> TSCH.ChartPresetsArchive
	111, // [111:111] is the sub-list for method output_type
	111, // [111:111] is the sub-list for method input_type
	103, // [103:111] is the sub-list for extension type_name
	73,  // [73:103] is the sub-list for extension extendee
	0,   // [0:73] is the sub-list for field type_name
}

func init() { file_TSCHArchives_proto_init() }
func file_TSCHArchives_proto_init() {
	if File_TSCHArchives_proto != nil {
		return
	}
	file_TSPMessages_proto_init()
	file_TSKArchives_proto_init()
	file_TSDArchives_proto_init()
	file_TSSArchives_proto_init()
	file_TSCHArchives_Common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_TSCHArchives_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartDrawableArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_TSCHArchives_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_TSCHArchives_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartMultiDataIndexUpgrade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHArchives_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartGarlicMinMaxUpgrade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHArchives_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartGarlicLabelFormatUpgrade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHArchives_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartPasteboardAdditionsArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHArchives_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartPreserveAppearanceForPresetArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHArchives_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartSupportsProportionalBendedCalloutLinesArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHArchives_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartSupportsRoundedCornersArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHArchives_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartSupportsSeriesPropertySpacingArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHArchives_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartGridArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHArchives_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartMediatorArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHArchives_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartFillSetArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHArchives_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartStylePreset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_TSCHArchives_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartPresetsArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHArchives_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyValueStorageContainerArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_TSCHArchives_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StylePasteboardDataArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHArchives_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartSelectionPathTypeArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHArchives_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartAxisIDArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHArchives_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartSelectionPathArgumentArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHArchives_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartSelectionPathArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHArchives_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartSelectionArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHArchives_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartCDESelectionArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHArchives_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartUIState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_TSCHArchives_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartUIStateMultiDataIndexUpgrade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHArchives_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartFormatStructExtensions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHArchives_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartReferenceLineNonStyleItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHArchives_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartAxisReferenceLineNonStylesArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHArchives_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartAxisReferenceLineStylesArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHArchives_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartReferenceLinesArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHArchives_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartPresetReferenceLineStylesArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHArchives_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartAxisReferenceLineSparseNonStylesArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHArchives_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyValueStorageContainerReferenceLinesArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHArchives_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartGridArchive_ChartGridRowColumnIdMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHArchives_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartGridArchive_ChartGridRowColumnIdMap_Entry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_TSCHArchives_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   35,
			NumExtensions: 30,
			NumServices:   0,
		},
		GoTypes:           file_TSCHArchives_proto_goTypes,
		DependencyIndexes: file_TSCHArchives_proto_depIdxs,
		MessageInfos:      file_TSCHArchives_proto_msgTypes,
		ExtensionInfos:    file_TSCHArchives_proto_extTypes,
	}.Build()
	File_TSCHArchives_proto = out.File
	file_TSCHArchives_proto_rawDesc = nil
	file_TSCHArchives_proto_goTypes = nil
	file_TSCHArchives_proto_depIdxs = nil
}
