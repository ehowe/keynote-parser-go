// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: TSCEArchives.proto

package kpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ReferenceArchive_ReferenceType int32

const (
	ReferenceArchive_CELL_REFERENCE  ReferenceArchive_ReferenceType = 1
	ReferenceArchive_RANGE_REFERENCE ReferenceArchive_ReferenceType = 2
	ReferenceArchive_NAME_DEPENDENCY ReferenceArchive_ReferenceType = 3
)

// Enum value maps for ReferenceArchive_ReferenceType.
var (
	ReferenceArchive_ReferenceType_name = map[int32]string{
		1: "CELL_REFERENCE",
		2: "RANGE_REFERENCE",
		3: "NAME_DEPENDENCY",
	}
	ReferenceArchive_ReferenceType_value = map[string]int32{
		"CELL_REFERENCE":  1,
		"RANGE_REFERENCE": 2,
		"NAME_DEPENDENCY": 3,
	}
)

func (x ReferenceArchive_ReferenceType) Enum() *ReferenceArchive_ReferenceType {
	p := new(ReferenceArchive_ReferenceType)
	*p = x
	return p
}

func (x ReferenceArchive_ReferenceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReferenceArchive_ReferenceType) Descriptor() protoreflect.EnumDescriptor {
	return file_TSCEArchives_proto_enumTypes[0].Descriptor()
}

func (ReferenceArchive_ReferenceType) Type() protoreflect.EnumType {
	return &file_TSCEArchives_proto_enumTypes[0]
}

func (x ReferenceArchive_ReferenceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ReferenceArchive_ReferenceType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ReferenceArchive_ReferenceType(num)
	return nil
}

// Deprecated: Use ReferenceArchive_ReferenceType.Descriptor instead.
func (ReferenceArchive_ReferenceType) EnumDescriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{15, 0}
}

type SpanningDependenciesArchive_RangeContext int32

const (
	SpanningDependenciesArchive_DEFAULT         SpanningDependenciesArchive_RangeContext = 0
	SpanningDependenciesArchive_INCLUDE_HEADERS SpanningDependenciesArchive_RangeContext = 1
)

// Enum value maps for SpanningDependenciesArchive_RangeContext.
var (
	SpanningDependenciesArchive_RangeContext_name = map[int32]string{
		0: "DEFAULT",
		1: "INCLUDE_HEADERS",
	}
	SpanningDependenciesArchive_RangeContext_value = map[string]int32{
		"DEFAULT":         0,
		"INCLUDE_HEADERS": 1,
	}
)

func (x SpanningDependenciesArchive_RangeContext) Enum() *SpanningDependenciesArchive_RangeContext {
	p := new(SpanningDependenciesArchive_RangeContext)
	*p = x
	return p
}

func (x SpanningDependenciesArchive_RangeContext) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpanningDependenciesArchive_RangeContext) Descriptor() protoreflect.EnumDescriptor {
	return file_TSCEArchives_proto_enumTypes[1].Descriptor()
}

func (SpanningDependenciesArchive_RangeContext) Type() protoreflect.EnumType {
	return &file_TSCEArchives_proto_enumTypes[1]
}

func (x SpanningDependenciesArchive_RangeContext) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SpanningDependenciesArchive_RangeContext) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SpanningDependenciesArchive_RangeContext(num)
	return nil
}

// Deprecated: Use SpanningDependenciesArchive_RangeContext.Descriptor instead.
func (SpanningDependenciesArchive_RangeContext) EnumDescriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{35, 0}
}

type SpanningDependenciesExpandedArchive_RangeContext int32

const (
	SpanningDependenciesExpandedArchive_DEFAULT         SpanningDependenciesExpandedArchive_RangeContext = 0
	SpanningDependenciesExpandedArchive_INCLUDE_HEADERS SpanningDependenciesExpandedArchive_RangeContext = 1
)

// Enum value maps for SpanningDependenciesExpandedArchive_RangeContext.
var (
	SpanningDependenciesExpandedArchive_RangeContext_name = map[int32]string{
		0: "DEFAULT",
		1: "INCLUDE_HEADERS",
	}
	SpanningDependenciesExpandedArchive_RangeContext_value = map[string]int32{
		"DEFAULT":         0,
		"INCLUDE_HEADERS": 1,
	}
)

func (x SpanningDependenciesExpandedArchive_RangeContext) Enum() *SpanningDependenciesExpandedArchive_RangeContext {
	p := new(SpanningDependenciesExpandedArchive_RangeContext)
	*p = x
	return p
}

func (x SpanningDependenciesExpandedArchive_RangeContext) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpanningDependenciesExpandedArchive_RangeContext) Descriptor() protoreflect.EnumDescriptor {
	return file_TSCEArchives_proto_enumTypes[2].Descriptor()
}

func (SpanningDependenciesExpandedArchive_RangeContext) Type() protoreflect.EnumType {
	return &file_TSCEArchives_proto_enumTypes[2]
}

func (x SpanningDependenciesExpandedArchive_RangeContext) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SpanningDependenciesExpandedArchive_RangeContext) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SpanningDependenciesExpandedArchive_RangeContext(num)
	return nil
}

// Deprecated: Use SpanningDependenciesExpandedArchive_RangeContext.Descriptor instead.
func (SpanningDependenciesExpandedArchive_RangeContext) EnumDescriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{36, 0}
}

type CellErrorsArchive_ErrorFlavor int32

const (
	CellErrorsArchive_NONE                       CellErrorsArchive_ErrorFlavor = 0
	CellErrorsArchive_ERROR                      CellErrorsArchive_ErrorFlavor = 1
	CellErrorsArchive_REF_ERROR                  CellErrorsArchive_ErrorFlavor = 2
	CellErrorsArchive_CIRCULAR_REF_ERROR         CellErrorsArchive_ErrorFlavor = 3
	CellErrorsArchive_UNSUPPORTED_FUNCTION_ERROR CellErrorsArchive_ErrorFlavor = 4
)

// Enum value maps for CellErrorsArchive_ErrorFlavor.
var (
	CellErrorsArchive_ErrorFlavor_name = map[int32]string{
		0: "NONE",
		1: "ERROR",
		2: "REF_ERROR",
		3: "CIRCULAR_REF_ERROR",
		4: "UNSUPPORTED_FUNCTION_ERROR",
	}
	CellErrorsArchive_ErrorFlavor_value = map[string]int32{
		"NONE":                       0,
		"ERROR":                      1,
		"REF_ERROR":                  2,
		"CIRCULAR_REF_ERROR":         3,
		"UNSUPPORTED_FUNCTION_ERROR": 4,
	}
)

func (x CellErrorsArchive_ErrorFlavor) Enum() *CellErrorsArchive_ErrorFlavor {
	p := new(CellErrorsArchive_ErrorFlavor)
	*p = x
	return p
}

func (x CellErrorsArchive_ErrorFlavor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CellErrorsArchive_ErrorFlavor) Descriptor() protoreflect.EnumDescriptor {
	return file_TSCEArchives_proto_enumTypes[3].Descriptor()
}

func (CellErrorsArchive_ErrorFlavor) Type() protoreflect.EnumType {
	return &file_TSCEArchives_proto_enumTypes[3]
}

func (x CellErrorsArchive_ErrorFlavor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CellErrorsArchive_ErrorFlavor) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CellErrorsArchive_ErrorFlavor(num)
	return nil
}

// Deprecated: Use CellErrorsArchive_ErrorFlavor.Descriptor instead.
func (CellErrorsArchive_ErrorFlavor) EnumDescriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{39, 0}
}

type CalculationEngineArchive_ExcelImportDateMode int32

const (
	CalculationEngineArchive_DATE_MODE_1900        CalculationEngineArchive_ExcelImportDateMode = 1
	CalculationEngineArchive_DATE_MODE_1900_LEGACY CalculationEngineArchive_ExcelImportDateMode = 2
	CalculationEngineArchive_DATE_MODE_1904_LEGACY CalculationEngineArchive_ExcelImportDateMode = 3
)

// Enum value maps for CalculationEngineArchive_ExcelImportDateMode.
var (
	CalculationEngineArchive_ExcelImportDateMode_name = map[int32]string{
		1: "DATE_MODE_1900",
		2: "DATE_MODE_1900_LEGACY",
		3: "DATE_MODE_1904_LEGACY",
	}
	CalculationEngineArchive_ExcelImportDateMode_value = map[string]int32{
		"DATE_MODE_1900":        1,
		"DATE_MODE_1900_LEGACY": 2,
		"DATE_MODE_1904_LEGACY": 3,
	}
)

func (x CalculationEngineArchive_ExcelImportDateMode) Enum() *CalculationEngineArchive_ExcelImportDateMode {
	p := new(CalculationEngineArchive_ExcelImportDateMode)
	*p = x
	return p
}

func (x CalculationEngineArchive_ExcelImportDateMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CalculationEngineArchive_ExcelImportDateMode) Descriptor() protoreflect.EnumDescriptor {
	return file_TSCEArchives_proto_enumTypes[4].Descriptor()
}

func (CalculationEngineArchive_ExcelImportDateMode) Type() protoreflect.EnumType {
	return &file_TSCEArchives_proto_enumTypes[4]
}

func (x CalculationEngineArchive_ExcelImportDateMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CalculationEngineArchive_ExcelImportDateMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CalculationEngineArchive_ExcelImportDateMode(num)
	return nil
}

// Deprecated: Use CalculationEngineArchive_ExcelImportDateMode.Descriptor instead.
func (CalculationEngineArchive_ExcelImportDateMode) EnumDescriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{57, 0}
}

type ASTNodeArrayArchive_ASTNodeType int32

const (
	ASTNodeArrayArchive_ADDITION_NODE                   ASTNodeArrayArchive_ASTNodeType = 1
	ASTNodeArrayArchive_SUBTRACTION_NODE                ASTNodeArrayArchive_ASTNodeType = 2
	ASTNodeArrayArchive_MULTIPLICATION_NODE             ASTNodeArrayArchive_ASTNodeType = 3
	ASTNodeArrayArchive_DIVISION_NODE                   ASTNodeArrayArchive_ASTNodeType = 4
	ASTNodeArrayArchive_POWER_NODE                      ASTNodeArrayArchive_ASTNodeType = 5
	ASTNodeArrayArchive_CONCATENATION_NODE              ASTNodeArrayArchive_ASTNodeType = 6
	ASTNodeArrayArchive_GREATER_THAN_NODE               ASTNodeArrayArchive_ASTNodeType = 7
	ASTNodeArrayArchive_GREATER_THAN_OR_EQUAL_TO_NODE   ASTNodeArrayArchive_ASTNodeType = 8
	ASTNodeArrayArchive_LESS_THAN_NODE                  ASTNodeArrayArchive_ASTNodeType = 9
	ASTNodeArrayArchive_LESS_THAN_OR_EQUAL_TO_NODE      ASTNodeArrayArchive_ASTNodeType = 10
	ASTNodeArrayArchive_EQUAL_TO_NODE                   ASTNodeArrayArchive_ASTNodeType = 11
	ASTNodeArrayArchive_NOT_EQUAL_TO_NODE               ASTNodeArrayArchive_ASTNodeType = 12
	ASTNodeArrayArchive_NEGATION_NODE                   ASTNodeArrayArchive_ASTNodeType = 13
	ASTNodeArrayArchive_PLUS_SIGN_NODE                  ASTNodeArrayArchive_ASTNodeType = 14
	ASTNodeArrayArchive_PERCENT_NODE                    ASTNodeArrayArchive_ASTNodeType = 15
	ASTNodeArrayArchive_FUNCTION_NODE                   ASTNodeArrayArchive_ASTNodeType = 16
	ASTNodeArrayArchive_NUMBER_NODE                     ASTNodeArrayArchive_ASTNodeType = 17
	ASTNodeArrayArchive_BOOLEAN_NODE                    ASTNodeArrayArchive_ASTNodeType = 18
	ASTNodeArrayArchive_STRING_NODE                     ASTNodeArrayArchive_ASTNodeType = 19
	ASTNodeArrayArchive_DATE_NODE                       ASTNodeArrayArchive_ASTNodeType = 20
	ASTNodeArrayArchive_DURATION_NODE                   ASTNodeArrayArchive_ASTNodeType = 21
	ASTNodeArrayArchive_EMPTY_ARGUMENT_NODE             ASTNodeArrayArchive_ASTNodeType = 22
	ASTNodeArrayArchive_TOKEN_NODE                      ASTNodeArrayArchive_ASTNodeType = 23
	ASTNodeArrayArchive_ARRAY_NODE                      ASTNodeArrayArchive_ASTNodeType = 24
	ASTNodeArrayArchive_LIST_NODE                       ASTNodeArrayArchive_ASTNodeType = 25
	ASTNodeArrayArchive_THUNK_NODE                      ASTNodeArrayArchive_ASTNodeType = 26
	ASTNodeArrayArchive_LOCAL_CELL_REFERENCE_NODE       ASTNodeArrayArchive_ASTNodeType = 27
	ASTNodeArrayArchive_CROSS_TABLE_CELL_REFERENCE_NODE ASTNodeArrayArchive_ASTNodeType = 28
	ASTNodeArrayArchive_COLON_NODE                      ASTNodeArrayArchive_ASTNodeType = 29
	ASTNodeArrayArchive_REFERENCE_ERROR_NODE            ASTNodeArrayArchive_ASTNodeType = 30
	ASTNodeArrayArchive_UNKNOWN_FUNCTION_NODE           ASTNodeArrayArchive_ASTNodeType = 31
	ASTNodeArrayArchive_APPEND_WHITESPACE_NODE          ASTNodeArrayArchive_ASTNodeType = 32
	ASTNodeArrayArchive_PREPEND_WHITESPACE_NODE         ASTNodeArrayArchive_ASTNodeType = 33
	ASTNodeArrayArchive_BEGIN_EMBEDDED_NODE_ARRAY       ASTNodeArrayArchive_ASTNodeType = 34
	ASTNodeArrayArchive_END_THUNK_NODE                  ASTNodeArrayArchive_ASTNodeType = 35
	ASTNodeArrayArchive_CELL_REFERENCE_NODE             ASTNodeArrayArchive_ASTNodeType = 36
	ASTNodeArrayArchive_COLON_NODE_WITH_UIDS            ASTNodeArrayArchive_ASTNodeType = 45
	ASTNodeArrayArchive_REFERENCE_ERROR_WITH_UIDS       ASTNodeArrayArchive_ASTNodeType = 46
	ASTNodeArrayArchive_UID_REFERENCE_NODE              ASTNodeArrayArchive_ASTNodeType = 48
	ASTNodeArrayArchive_LET_BIND_NODE                   ASTNodeArrayArchive_ASTNodeType = 52
	ASTNodeArrayArchive_LET_VAR_NODE                    ASTNodeArrayArchive_ASTNodeType = 53
	ASTNodeArrayArchive_LET_END_SCOPE_NODE              ASTNodeArrayArchive_ASTNodeType = 54
	ASTNodeArrayArchive_LINKED_CELL_REF_NODE            ASTNodeArrayArchive_ASTNodeType = 63
	ASTNodeArrayArchive_LINKED_COLUMN_REF_NODE          ASTNodeArrayArchive_ASTNodeType = 64
	ASTNodeArrayArchive_LINKED_ROW_REF_NODE             ASTNodeArrayArchive_ASTNodeType = 65
	ASTNodeArrayArchive_CATEGORY_REF_NODE               ASTNodeArrayArchive_ASTNodeType = 66
	ASTNodeArrayArchive_COLON_TRACT_NODE                ASTNodeArrayArchive_ASTNodeType = 67
	ASTNodeArrayArchive_VIEW_TRACT_REF_NODE             ASTNodeArrayArchive_ASTNodeType = 68
)

// Enum value maps for ASTNodeArrayArchive_ASTNodeType.
var (
	ASTNodeArrayArchive_ASTNodeType_name = map[int32]string{
		1:  "ADDITION_NODE",
		2:  "SUBTRACTION_NODE",
		3:  "MULTIPLICATION_NODE",
		4:  "DIVISION_NODE",
		5:  "POWER_NODE",
		6:  "CONCATENATION_NODE",
		7:  "GREATER_THAN_NODE",
		8:  "GREATER_THAN_OR_EQUAL_TO_NODE",
		9:  "LESS_THAN_NODE",
		10: "LESS_THAN_OR_EQUAL_TO_NODE",
		11: "EQUAL_TO_NODE",
		12: "NOT_EQUAL_TO_NODE",
		13: "NEGATION_NODE",
		14: "PLUS_SIGN_NODE",
		15: "PERCENT_NODE",
		16: "FUNCTION_NODE",
		17: "NUMBER_NODE",
		18: "BOOLEAN_NODE",
		19: "STRING_NODE",
		20: "DATE_NODE",
		21: "DURATION_NODE",
		22: "EMPTY_ARGUMENT_NODE",
		23: "TOKEN_NODE",
		24: "ARRAY_NODE",
		25: "LIST_NODE",
		26: "THUNK_NODE",
		27: "LOCAL_CELL_REFERENCE_NODE",
		28: "CROSS_TABLE_CELL_REFERENCE_NODE",
		29: "COLON_NODE",
		30: "REFERENCE_ERROR_NODE",
		31: "UNKNOWN_FUNCTION_NODE",
		32: "APPEND_WHITESPACE_NODE",
		33: "PREPEND_WHITESPACE_NODE",
		34: "BEGIN_EMBEDDED_NODE_ARRAY",
		35: "END_THUNK_NODE",
		36: "CELL_REFERENCE_NODE",
		45: "COLON_NODE_WITH_UIDS",
		46: "REFERENCE_ERROR_WITH_UIDS",
		48: "UID_REFERENCE_NODE",
		52: "LET_BIND_NODE",
		53: "LET_VAR_NODE",
		54: "LET_END_SCOPE_NODE",
		63: "LINKED_CELL_REF_NODE",
		64: "LINKED_COLUMN_REF_NODE",
		65: "LINKED_ROW_REF_NODE",
		66: "CATEGORY_REF_NODE",
		67: "COLON_TRACT_NODE",
		68: "VIEW_TRACT_REF_NODE",
	}
	ASTNodeArrayArchive_ASTNodeType_value = map[string]int32{
		"ADDITION_NODE":                   1,
		"SUBTRACTION_NODE":                2,
		"MULTIPLICATION_NODE":             3,
		"DIVISION_NODE":                   4,
		"POWER_NODE":                      5,
		"CONCATENATION_NODE":              6,
		"GREATER_THAN_NODE":               7,
		"GREATER_THAN_OR_EQUAL_TO_NODE":   8,
		"LESS_THAN_NODE":                  9,
		"LESS_THAN_OR_EQUAL_TO_NODE":      10,
		"EQUAL_TO_NODE":                   11,
		"NOT_EQUAL_TO_NODE":               12,
		"NEGATION_NODE":                   13,
		"PLUS_SIGN_NODE":                  14,
		"PERCENT_NODE":                    15,
		"FUNCTION_NODE":                   16,
		"NUMBER_NODE":                     17,
		"BOOLEAN_NODE":                    18,
		"STRING_NODE":                     19,
		"DATE_NODE":                       20,
		"DURATION_NODE":                   21,
		"EMPTY_ARGUMENT_NODE":             22,
		"TOKEN_NODE":                      23,
		"ARRAY_NODE":                      24,
		"LIST_NODE":                       25,
		"THUNK_NODE":                      26,
		"LOCAL_CELL_REFERENCE_NODE":       27,
		"CROSS_TABLE_CELL_REFERENCE_NODE": 28,
		"COLON_NODE":                      29,
		"REFERENCE_ERROR_NODE":            30,
		"UNKNOWN_FUNCTION_NODE":           31,
		"APPEND_WHITESPACE_NODE":          32,
		"PREPEND_WHITESPACE_NODE":         33,
		"BEGIN_EMBEDDED_NODE_ARRAY":       34,
		"END_THUNK_NODE":                  35,
		"CELL_REFERENCE_NODE":             36,
		"COLON_NODE_WITH_UIDS":            45,
		"REFERENCE_ERROR_WITH_UIDS":       46,
		"UID_REFERENCE_NODE":              48,
		"LET_BIND_NODE":                   52,
		"LET_VAR_NODE":                    53,
		"LET_END_SCOPE_NODE":              54,
		"LINKED_CELL_REF_NODE":            63,
		"LINKED_COLUMN_REF_NODE":          64,
		"LINKED_ROW_REF_NODE":             65,
		"CATEGORY_REF_NODE":               66,
		"COLON_TRACT_NODE":                67,
		"VIEW_TRACT_REF_NODE":             68,
	}
)

func (x ASTNodeArrayArchive_ASTNodeType) Enum() *ASTNodeArrayArchive_ASTNodeType {
	p := new(ASTNodeArrayArchive_ASTNodeType)
	*p = x
	return p
}

func (x ASTNodeArrayArchive_ASTNodeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ASTNodeArrayArchive_ASTNodeType) Descriptor() protoreflect.EnumDescriptor {
	return file_TSCEArchives_proto_enumTypes[5].Descriptor()
}

func (ASTNodeArrayArchive_ASTNodeType) Type() protoreflect.EnumType {
	return &file_TSCEArchives_proto_enumTypes[5]
}

func (x ASTNodeArrayArchive_ASTNodeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ASTNodeArrayArchive_ASTNodeType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ASTNodeArrayArchive_ASTNodeType(num)
	return nil
}

// Deprecated: Use ASTNodeArrayArchive_ASTNodeType.Descriptor instead.
func (ASTNodeArrayArchive_ASTNodeType) EnumDescriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{60, 0}
}

type ASTNodeArrayArchive_ASTUidTractPurpose int32

const (
	ASTNodeArrayArchive_UIDS_INCLUDED                         ASTNodeArrayArchive_ASTUidTractPurpose = 0
	ASTNodeArrayArchive_UIDS_PREMERGE                         ASTNodeArrayArchive_ASTUidTractPurpose = 1
	ASTNodeArrayArchive_UIDS_PREMOVEREGION                    ASTNodeArrayArchive_ASTUidTractPurpose = 2
	ASTNodeArrayArchive_UIDS_EXCLUDED                         ASTNodeArrayArchive_ASTUidTractPurpose = 3
	ASTNodeArrayArchive_UIDS_ACTIVE                           ASTNodeArrayArchive_ASTUidTractPurpose = 4
	ASTNodeArrayArchive_UIDS_PREMERGE_TOPLEFT                 ASTNodeArrayArchive_ASTUidTractPurpose = 5
	ASTNodeArrayArchive_UIDS_REMOVED_BY_MOVE                  ASTNodeArrayArchive_ASTUidTractPurpose = 6
	ASTNodeArrayArchive_FULLTUPLE_ROW_COLUMN_HEADER           ASTNodeArrayArchive_ASTUidTractPurpose = 7
	ASTNodeArrayArchive_FULLTUPLE_AGGREGATE_RULE_UID          ASTNodeArrayArchive_ASTUidTractPurpose = 8
	ASTNodeArrayArchive_FULLTUPLE_ROW_COLUMN_RULE_VALUE_PAIRS ASTNodeArrayArchive_ASTUidTractPurpose = 9
)

// Enum value maps for ASTNodeArrayArchive_ASTUidTractPurpose.
var (
	ASTNodeArrayArchive_ASTUidTractPurpose_name = map[int32]string{
		0: "UIDS_INCLUDED",
		1: "UIDS_PREMERGE",
		2: "UIDS_PREMOVEREGION",
		3: "UIDS_EXCLUDED",
		4: "UIDS_ACTIVE",
		5: "UIDS_PREMERGE_TOPLEFT",
		6: "UIDS_REMOVED_BY_MOVE",
		7: "FULLTUPLE_ROW_COLUMN_HEADER",
		8: "FULLTUPLE_AGGREGATE_RULE_UID",
		9: "FULLTUPLE_ROW_COLUMN_RULE_VALUE_PAIRS",
	}
	ASTNodeArrayArchive_ASTUidTractPurpose_value = map[string]int32{
		"UIDS_INCLUDED":                         0,
		"UIDS_PREMERGE":                         1,
		"UIDS_PREMOVEREGION":                    2,
		"UIDS_EXCLUDED":                         3,
		"UIDS_ACTIVE":                           4,
		"UIDS_PREMERGE_TOPLEFT":                 5,
		"UIDS_REMOVED_BY_MOVE":                  6,
		"FULLTUPLE_ROW_COLUMN_HEADER":           7,
		"FULLTUPLE_AGGREGATE_RULE_UID":          8,
		"FULLTUPLE_ROW_COLUMN_RULE_VALUE_PAIRS": 9,
	}
)

func (x ASTNodeArrayArchive_ASTUidTractPurpose) Enum() *ASTNodeArrayArchive_ASTUidTractPurpose {
	p := new(ASTNodeArrayArchive_ASTUidTractPurpose)
	*p = x
	return p
}

func (x ASTNodeArrayArchive_ASTUidTractPurpose) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ASTNodeArrayArchive_ASTUidTractPurpose) Descriptor() protoreflect.EnumDescriptor {
	return file_TSCEArchives_proto_enumTypes[6].Descriptor()
}

func (ASTNodeArrayArchive_ASTUidTractPurpose) Type() protoreflect.EnumType {
	return &file_TSCEArchives_proto_enumTypes[6]
}

func (x ASTNodeArrayArchive_ASTUidTractPurpose) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ASTNodeArrayArchive_ASTUidTractPurpose) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ASTNodeArrayArchive_ASTUidTractPurpose(num)
	return nil
}

// Deprecated: Use ASTNodeArrayArchive_ASTUidTractPurpose.Descriptor instead.
func (ASTNodeArrayArchive_ASTUidTractPurpose) EnumDescriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{60, 1}
}

type GroupByChangeArchive_ChangeType int32

const (
	GroupByChangeArchive_NONE                    GroupByChangeArchive_ChangeType = 0
	GroupByChangeArchive_GROUP_VALUE_CHANGE      GroupByChangeArchive_ChangeType = 1
	GroupByChangeArchive_GROUP_DEFINITION_CHANGE GroupByChangeArchive_ChangeType = 2
	GroupByChangeArchive_REMOVE_GROUP_LEVEL      GroupByChangeArchive_ChangeType = 3
	GroupByChangeArchive_ADD_GROUP_LEVEL         GroupByChangeArchive_ChangeType = 4
	GroupByChangeArchive_PROMOTE                 GroupByChangeArchive_ChangeType = 5
	GroupByChangeArchive_DEMOTE                  GroupByChangeArchive_ChangeType = 6
)

// Enum value maps for GroupByChangeArchive_ChangeType.
var (
	GroupByChangeArchive_ChangeType_name = map[int32]string{
		0: "NONE",
		1: "GROUP_VALUE_CHANGE",
		2: "GROUP_DEFINITION_CHANGE",
		3: "REMOVE_GROUP_LEVEL",
		4: "ADD_GROUP_LEVEL",
		5: "PROMOTE",
		6: "DEMOTE",
	}
	GroupByChangeArchive_ChangeType_value = map[string]int32{
		"NONE":                    0,
		"GROUP_VALUE_CHANGE":      1,
		"GROUP_DEFINITION_CHANGE": 2,
		"REMOVE_GROUP_LEVEL":      3,
		"ADD_GROUP_LEVEL":         4,
		"PROMOTE":                 5,
		"DEMOTE":                  6,
	}
)

func (x GroupByChangeArchive_ChangeType) Enum() *GroupByChangeArchive_ChangeType {
	p := new(GroupByChangeArchive_ChangeType)
	*p = x
	return p
}

func (x GroupByChangeArchive_ChangeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupByChangeArchive_ChangeType) Descriptor() protoreflect.EnumDescriptor {
	return file_TSCEArchives_proto_enumTypes[7].Descriptor()
}

func (GroupByChangeArchive_ChangeType) Type() protoreflect.EnumType {
	return &file_TSCEArchives_proto_enumTypes[7]
}

func (x GroupByChangeArchive_ChangeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GroupByChangeArchive_ChangeType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GroupByChangeArchive_ChangeType(num)
	return nil
}

// Deprecated: Use GroupByChangeArchive_ChangeType.Descriptor instead.
func (GroupByChangeArchive_ChangeType) EnumDescriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{70, 0}
}

type CellValueArchive_CellValueType int32

const (
	CellValueArchive_NIL_TYPE     CellValueArchive_CellValueType = 1
	CellValueArchive_BOOLEAN_TYPE CellValueArchive_CellValueType = 2
	CellValueArchive_DATE_TYPE    CellValueArchive_CellValueType = 3
	CellValueArchive_NUMBER_TYPE  CellValueArchive_CellValueType = 4
	CellValueArchive_STRING_TYPE  CellValueArchive_CellValueType = 5
)

// Enum value maps for CellValueArchive_CellValueType.
var (
	CellValueArchive_CellValueType_name = map[int32]string{
		1: "NIL_TYPE",
		2: "BOOLEAN_TYPE",
		3: "DATE_TYPE",
		4: "NUMBER_TYPE",
		5: "STRING_TYPE",
	}
	CellValueArchive_CellValueType_value = map[string]int32{
		"NIL_TYPE":     1,
		"BOOLEAN_TYPE": 2,
		"DATE_TYPE":    3,
		"NUMBER_TYPE":  4,
		"STRING_TYPE":  5,
	}
)

func (x CellValueArchive_CellValueType) Enum() *CellValueArchive_CellValueType {
	p := new(CellValueArchive_CellValueType)
	*p = x
	return p
}

func (x CellValueArchive_CellValueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CellValueArchive_CellValueType) Descriptor() protoreflect.EnumDescriptor {
	return file_TSCEArchives_proto_enumTypes[8].Descriptor()
}

func (CellValueArchive_CellValueType) Type() protoreflect.EnumType {
	return &file_TSCEArchives_proto_enumTypes[8]
}

func (x CellValueArchive_CellValueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CellValueArchive_CellValueType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CellValueArchive_CellValueType(num)
	return nil
}

// Deprecated: Use CellValueArchive_CellValueType.Descriptor instead.
func (CellValueArchive_CellValueType) EnumDescriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{96, 0}
}

type CellReferenceArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Column  *uint32        `protobuf:"varint,1,req,name=column" json:"column,omitempty"`
	Row     *uint32        `protobuf:"varint,2,req,name=row" json:"row,omitempty"`
	TableId *CFUUIDArchive `protobuf:"bytes,3,req,name=table_id,json=tableId" json:"table_id,omitempty"`
}

func (x *CellReferenceArchive) Reset() {
	*x = CellReferenceArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellReferenceArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellReferenceArchive) ProtoMessage() {}

func (x *CellReferenceArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellReferenceArchive.ProtoReflect.Descriptor instead.
func (*CellReferenceArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{0}
}

func (x *CellReferenceArchive) GetColumn() uint32 {
	if x != nil && x.Column != nil {
		return *x.Column
	}
	return 0
}

func (x *CellReferenceArchive) GetRow() uint32 {
	if x != nil && x.Row != nil {
		return *x.Row
	}
	return 0
}

func (x *CellReferenceArchive) GetTableId() *CFUUIDArchive {
	if x != nil {
		return x.TableId
	}
	return nil
}

type InternalCellReferenceArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coordinate *CellCoordinateArchive `protobuf:"bytes,1,req,name=coordinate" json:"coordinate,omitempty"`
	OwnerId    *uint32                `protobuf:"varint,2,req,name=owner_id,json=ownerId" json:"owner_id,omitempty"`
}

func (x *InternalCellReferenceArchive) Reset() {
	*x = InternalCellReferenceArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternalCellReferenceArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalCellReferenceArchive) ProtoMessage() {}

func (x *InternalCellReferenceArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalCellReferenceArchive.ProtoReflect.Descriptor instead.
func (*InternalCellReferenceArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{1}
}

func (x *InternalCellReferenceArchive) GetCoordinate() *CellCoordinateArchive {
	if x != nil {
		return x.Coordinate
	}
	return nil
}

func (x *InternalCellReferenceArchive) GetOwnerId() uint32 {
	if x != nil && x.OwnerId != nil {
		return *x.OwnerId
	}
	return 0
}

type RelativeCellRefArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeRowOffset    *int32 `protobuf:"varint,1,opt,name=relative_row_offset,json=relativeRowOffset" json:"relative_row_offset,omitempty"`
	RelativeColumnOffset *int32 `protobuf:"varint,2,opt,name=relative_column_offset,json=relativeColumnOffset" json:"relative_column_offset,omitempty"`
	TableUid             *UUID  `protobuf:"bytes,3,opt,name=table_uid,json=tableUid" json:"table_uid,omitempty"`
	PreserveColumn       *bool  `protobuf:"varint,4,opt,name=preserve_column,json=preserveColumn" json:"preserve_column,omitempty"`
	PreserveRow          *bool  `protobuf:"varint,5,opt,name=preserve_row,json=preserveRow" json:"preserve_row,omitempty"`
	IsSpanningColumn     *bool  `protobuf:"varint,6,opt,name=is_spanning_column,json=isSpanningColumn" json:"is_spanning_column,omitempty"`
	IsSpanningRow        *bool  `protobuf:"varint,7,opt,name=is_spanning_row,json=isSpanningRow" json:"is_spanning_row,omitempty"`
}

func (x *RelativeCellRefArchive) Reset() {
	*x = RelativeCellRefArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelativeCellRefArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelativeCellRefArchive) ProtoMessage() {}

func (x *RelativeCellRefArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelativeCellRefArchive.ProtoReflect.Descriptor instead.
func (*RelativeCellRefArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{2}
}

func (x *RelativeCellRefArchive) GetRelativeRowOffset() int32 {
	if x != nil && x.RelativeRowOffset != nil {
		return *x.RelativeRowOffset
	}
	return 0
}

func (x *RelativeCellRefArchive) GetRelativeColumnOffset() int32 {
	if x != nil && x.RelativeColumnOffset != nil {
		return *x.RelativeColumnOffset
	}
	return 0
}

func (x *RelativeCellRefArchive) GetTableUid() *UUID {
	if x != nil {
		return x.TableUid
	}
	return nil
}

func (x *RelativeCellRefArchive) GetPreserveColumn() bool {
	if x != nil && x.PreserveColumn != nil {
		return *x.PreserveColumn
	}
	return false
}

func (x *RelativeCellRefArchive) GetPreserveRow() bool {
	if x != nil && x.PreserveRow != nil {
		return *x.PreserveRow
	}
	return false
}

func (x *RelativeCellRefArchive) GetIsSpanningColumn() bool {
	if x != nil && x.IsSpanningColumn != nil {
		return *x.IsSpanningColumn
	}
	return false
}

func (x *RelativeCellRefArchive) GetIsSpanningRow() bool {
	if x != nil && x.IsSpanningRow != nil {
		return *x.IsSpanningRow
	}
	return false
}

type RangeReferenceArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId           *CFUUIDArchive `protobuf:"bytes,1,req,name=table_id,json=tableId" json:"table_id,omitempty"`
	TopLeftColumn     *uint32        `protobuf:"varint,2,req,name=top_left_column,json=topLeftColumn" json:"top_left_column,omitempty"`
	TopLeftRow        *uint32        `protobuf:"varint,3,req,name=top_left_row,json=topLeftRow" json:"top_left_row,omitempty"`
	BottomRightColumn *uint32        `protobuf:"varint,4,req,name=bottom_right_column,json=bottomRightColumn" json:"bottom_right_column,omitempty"`
	BottomRightRow    *uint32        `protobuf:"varint,5,req,name=bottom_right_row,json=bottomRightRow" json:"bottom_right_row,omitempty"`
}

func (x *RangeReferenceArchive) Reset() {
	*x = RangeReferenceArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RangeReferenceArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RangeReferenceArchive) ProtoMessage() {}

func (x *RangeReferenceArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RangeReferenceArchive.ProtoReflect.Descriptor instead.
func (*RangeReferenceArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{3}
}

func (x *RangeReferenceArchive) GetTableId() *CFUUIDArchive {
	if x != nil {
		return x.TableId
	}
	return nil
}

func (x *RangeReferenceArchive) GetTopLeftColumn() uint32 {
	if x != nil && x.TopLeftColumn != nil {
		return *x.TopLeftColumn
	}
	return 0
}

func (x *RangeReferenceArchive) GetTopLeftRow() uint32 {
	if x != nil && x.TopLeftRow != nil {
		return *x.TopLeftRow
	}
	return 0
}

func (x *RangeReferenceArchive) GetBottomRightColumn() uint32 {
	if x != nil && x.BottomRightColumn != nil {
		return *x.BottomRightColumn
	}
	return 0
}

func (x *RangeReferenceArchive) GetBottomRightRow() uint32 {
	if x != nil && x.BottomRightRow != nil {
		return *x.BottomRightRow
	}
	return 0
}

type InternalRangeReferenceArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerId *uint32                 `protobuf:"varint,1,req,name=owner_id,json=ownerId" json:"owner_id,omitempty"`
	Range   *RangeCoordinateArchive `protobuf:"bytes,2,req,name=range" json:"range,omitempty"`
}

func (x *InternalRangeReferenceArchive) Reset() {
	*x = InternalRangeReferenceArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternalRangeReferenceArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalRangeReferenceArchive) ProtoMessage() {}

func (x *InternalRangeReferenceArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalRangeReferenceArchive.ProtoReflect.Descriptor instead.
func (*InternalRangeReferenceArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{4}
}

func (x *InternalRangeReferenceArchive) GetOwnerId() uint32 {
	if x != nil && x.OwnerId != nil {
		return *x.OwnerId
	}
	return 0
}

func (x *InternalRangeReferenceArchive) GetRange() *RangeCoordinateArchive {
	if x != nil {
		return x.Range
	}
	return nil
}

type IndexSetArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*IndexSetArchive_IndexSetEntry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
}

func (x *IndexSetArchive) Reset() {
	*x = IndexSetArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexSetArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexSetArchive) ProtoMessage() {}

func (x *IndexSetArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexSetArchive.ProtoReflect.Descriptor instead.
func (*IndexSetArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{5}
}

func (x *IndexSetArchive) GetEntries() []*IndexSetArchive_IndexSetEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type CellCoordSetArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColumnEntries []*CellCoordSetArchive_ColumnEntry `protobuf:"bytes,1,rep,name=column_entries,json=columnEntries" json:"column_entries,omitempty"`
}

func (x *CellCoordSetArchive) Reset() {
	*x = CellCoordSetArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellCoordSetArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellCoordSetArchive) ProtoMessage() {}

func (x *CellCoordSetArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellCoordSetArchive.ProtoReflect.Descriptor instead.
func (*CellCoordSetArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{6}
}

func (x *CellCoordSetArchive) GetColumnEntries() []*CellCoordSetArchive_ColumnEntry {
	if x != nil {
		return x.ColumnEntries
	}
	return nil
}

type InternalCellRefSetArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerEntries []*InternalCellRefSetArchive_OwnerEntry `protobuf:"bytes,1,rep,name=owner_entries,json=ownerEntries" json:"owner_entries,omitempty"`
}

func (x *InternalCellRefSetArchive) Reset() {
	*x = InternalCellRefSetArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternalCellRefSetArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalCellRefSetArchive) ProtoMessage() {}

func (x *InternalCellRefSetArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalCellRefSetArchive.ProtoReflect.Descriptor instead.
func (*InternalCellRefSetArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{7}
}

func (x *InternalCellRefSetArchive) GetOwnerEntries() []*InternalCellRefSetArchive_OwnerEntry {
	if x != nil {
		return x.OwnerEntries
	}
	return nil
}

type ColumnRowSize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumColumns *uint32 `protobuf:"varint,1,opt,name=num_columns,json=numColumns,def=1" json:"num_columns,omitempty"`
	NumRows    *uint32 `protobuf:"varint,2,opt,name=num_rows,json=numRows,def=1" json:"num_rows,omitempty"`
}

// Default values for ColumnRowSize fields.
const (
	Default_ColumnRowSize_NumColumns = uint32(1)
	Default_ColumnRowSize_NumRows    = uint32(1)
)

func (x *ColumnRowSize) Reset() {
	*x = ColumnRowSize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnRowSize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnRowSize) ProtoMessage() {}

func (x *ColumnRowSize) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnRowSize.ProtoReflect.Descriptor instead.
func (*ColumnRowSize) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{8}
}

func (x *ColumnRowSize) GetNumColumns() uint32 {
	if x != nil && x.NumColumns != nil {
		return *x.NumColumns
	}
	return Default_ColumnRowSize_NumColumns
}

func (x *ColumnRowSize) GetNumRows() uint32 {
	if x != nil && x.NumRows != nil {
		return *x.NumRows
	}
	return Default_ColumnRowSize_NumRows
}

type CellRectArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Origin *CellCoordinateArchive `protobuf:"bytes,1,req,name=origin" json:"origin,omitempty"`
	Size   *ColumnRowSize         `protobuf:"bytes,2,req,name=size" json:"size,omitempty"`
}

func (x *CellRectArchive) Reset() {
	*x = CellRectArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellRectArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellRectArchive) ProtoMessage() {}

func (x *CellRectArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellRectArchive.ProtoReflect.Descriptor instead.
func (*CellRectArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{9}
}

func (x *CellRectArchive) GetOrigin() *CellCoordinateArchive {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *CellRectArchive) GetSize() *ColumnRowSize {
	if x != nil {
		return x.Size
	}
	return nil
}

type CellRefSetArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerEntries []*CellRefSetArchive_OwnerEntry `protobuf:"bytes,1,rep,name=owner_entries,json=ownerEntries" json:"owner_entries,omitempty"`
}

func (x *CellRefSetArchive) Reset() {
	*x = CellRefSetArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellRefSetArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellRefSetArchive) ProtoMessage() {}

func (x *CellRefSetArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellRefSetArchive.ProtoReflect.Descriptor instead.
func (*CellRefSetArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{10}
}

func (x *CellRefSetArchive) GetOwnerEntries() []*CellRefSetArchive_OwnerEntry {
	if x != nil {
		return x.OwnerEntries
	}
	return nil
}

type UidCoordSetArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColumnEntries []*UidCoordSetArchive_ColumnEntry `protobuf:"bytes,1,rep,name=column_entries,json=columnEntries" json:"column_entries,omitempty"`
}

func (x *UidCoordSetArchive) Reset() {
	*x = UidCoordSetArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UidCoordSetArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UidCoordSetArchive) ProtoMessage() {}

func (x *UidCoordSetArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UidCoordSetArchive.ProtoReflect.Descriptor instead.
func (*UidCoordSetArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{11}
}

func (x *UidCoordSetArchive) GetColumnEntries() []*UidCoordSetArchive_ColumnEntry {
	if x != nil {
		return x.ColumnEntries
	}
	return nil
}

type UidCellRefSetArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerEntries []*UidCellRefSetArchive_OwnerEntry `protobuf:"bytes,1,rep,name=owner_entries,json=ownerEntries" json:"owner_entries,omitempty"`
}

func (x *UidCellRefSetArchive) Reset() {
	*x = UidCellRefSetArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UidCellRefSetArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UidCellRefSetArchive) ProtoMessage() {}

func (x *UidCellRefSetArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UidCellRefSetArchive.ProtoReflect.Descriptor instead.
func (*UidCellRefSetArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{12}
}

func (x *UidCellRefSetArchive) GetOwnerEntries() []*UidCellRefSetArchive_OwnerEntry {
	if x != nil {
		return x.OwnerEntries
	}
	return nil
}

type ReferencesToDirtyArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ToDirtyOwnerIds        *IndexSetArchive                 `protobuf:"bytes,1,opt,name=to_dirty_owner_ids,json=toDirtyOwnerIds" json:"to_dirty_owner_ids,omitempty"`
	ToDirtyCells           *InternalCellRefSetArchive       `protobuf:"bytes,2,opt,name=to_dirty_cells,json=toDirtyCells" json:"to_dirty_cells,omitempty"`
	ToDirtyCellsAdditional *InternalCellRefSetArchive       `protobuf:"bytes,3,opt,name=to_dirty_cells_additional,json=toDirtyCellsAdditional" json:"to_dirty_cells_additional,omitempty"`
	ToDirtyRangeRefs       []*InternalRangeReferenceArchive `protobuf:"bytes,4,rep,name=to_dirty_range_refs,json=toDirtyRangeRefs" json:"to_dirty_range_refs,omitempty"`
	CalcInProgressCells    *InternalCellRefSetArchive       `protobuf:"bytes,6,opt,name=calc_in_progress_cells,json=calcInProgressCells" json:"calc_in_progress_cells,omitempty"`
}

func (x *ReferencesToDirtyArchive) Reset() {
	*x = ReferencesToDirtyArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferencesToDirtyArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferencesToDirtyArchive) ProtoMessage() {}

func (x *ReferencesToDirtyArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferencesToDirtyArchive.ProtoReflect.Descriptor instead.
func (*ReferencesToDirtyArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{13}
}

func (x *ReferencesToDirtyArchive) GetToDirtyOwnerIds() *IndexSetArchive {
	if x != nil {
		return x.ToDirtyOwnerIds
	}
	return nil
}

func (x *ReferencesToDirtyArchive) GetToDirtyCells() *InternalCellRefSetArchive {
	if x != nil {
		return x.ToDirtyCells
	}
	return nil
}

func (x *ReferencesToDirtyArchive) GetToDirtyCellsAdditional() *InternalCellRefSetArchive {
	if x != nil {
		return x.ToDirtyCellsAdditional
	}
	return nil
}

func (x *ReferencesToDirtyArchive) GetToDirtyRangeRefs() []*InternalRangeReferenceArchive {
	if x != nil {
		return x.ToDirtyRangeRefs
	}
	return nil
}

func (x *ReferencesToDirtyArchive) GetCalcInProgressCells() *InternalCellRefSetArchive {
	if x != nil {
		return x.CalcInProgressCells
	}
	return nil
}

type CoordMapperArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableUid               *UUID                                    `protobuf:"bytes,1,req,name=table_uid,json=tableUid" json:"table_uid,omitempty"`
	SummaryRowsSet         *IndexSetArchive                         `protobuf:"bytes,2,opt,name=summary_rows_set,json=summaryRowsSet" json:"summary_rows_set,omitempty"`
	SummaryColumnsSet      *IndexSetArchive                         `protobuf:"bytes,3,opt,name=summary_columns_set,json=summaryColumnsSet" json:"summary_columns_set,omitempty"`
	LabelRowsSet           *IndexSetArchive                         `protobuf:"bytes,4,opt,name=label_rows_set,json=labelRowsSet" json:"label_rows_set,omitempty"`
	BaseToViewRowMap       []*CoordMapperArchive_BaseToViewEntry    `protobuf:"bytes,5,rep,name=base_to_view_row_map,json=baseToViewRowMap" json:"base_to_view_row_map,omitempty"`
	BaseToViewColumnMap    []*CoordMapperArchive_BaseToViewEntry    `protobuf:"bytes,6,rep,name=base_to_view_column_map,json=baseToViewColumnMap" json:"base_to_view_column_map,omitempty"`
	SummaryToViewRowMap    []*CoordMapperArchive_SummaryToViewEntry `protobuf:"bytes,7,rep,name=summary_to_view_row_map,json=summaryToViewRowMap" json:"summary_to_view_row_map,omitempty"`
	SummaryToViewColumnMap []*CoordMapperArchive_SummaryToViewEntry `protobuf:"bytes,8,rep,name=summary_to_view_column_map,json=summaryToViewColumnMap" json:"summary_to_view_column_map,omitempty"`
}

func (x *CoordMapperArchive) Reset() {
	*x = CoordMapperArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoordMapperArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoordMapperArchive) ProtoMessage() {}

func (x *CoordMapperArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoordMapperArchive.ProtoReflect.Descriptor instead.
func (*CoordMapperArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{14}
}

func (x *CoordMapperArchive) GetTableUid() *UUID {
	if x != nil {
		return x.TableUid
	}
	return nil
}

func (x *CoordMapperArchive) GetSummaryRowsSet() *IndexSetArchive {
	if x != nil {
		return x.SummaryRowsSet
	}
	return nil
}

func (x *CoordMapperArchive) GetSummaryColumnsSet() *IndexSetArchive {
	if x != nil {
		return x.SummaryColumnsSet
	}
	return nil
}

func (x *CoordMapperArchive) GetLabelRowsSet() *IndexSetArchive {
	if x != nil {
		return x.LabelRowsSet
	}
	return nil
}

func (x *CoordMapperArchive) GetBaseToViewRowMap() []*CoordMapperArchive_BaseToViewEntry {
	if x != nil {
		return x.BaseToViewRowMap
	}
	return nil
}

func (x *CoordMapperArchive) GetBaseToViewColumnMap() []*CoordMapperArchive_BaseToViewEntry {
	if x != nil {
		return x.BaseToViewColumnMap
	}
	return nil
}

func (x *CoordMapperArchive) GetSummaryToViewRowMap() []*CoordMapperArchive_SummaryToViewEntry {
	if x != nil {
		return x.SummaryToViewRowMap
	}
	return nil
}

func (x *CoordMapperArchive) GetSummaryToViewColumnMap() []*CoordMapperArchive_SummaryToViewEntry {
	if x != nil {
		return x.SummaryToViewColumnMap
	}
	return nil
}

type ReferenceArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReferenceType  *ReferenceArchive_ReferenceType `protobuf:"varint,1,req,name=reference_type,json=referenceType,enum=TSCE.ReferenceArchive_ReferenceType" json:"reference_type,omitempty"`
	CellReference  *CellReferenceArchive           `protobuf:"bytes,2,opt,name=cell_reference,json=cellReference" json:"cell_reference,omitempty"`
	RangeReference *RangeReferenceArchive          `protobuf:"bytes,3,opt,name=range_reference,json=rangeReference" json:"range_reference,omitempty"`
}

func (x *ReferenceArchive) Reset() {
	*x = ReferenceArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferenceArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferenceArchive) ProtoMessage() {}

func (x *ReferenceArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferenceArchive.ProtoReflect.Descriptor instead.
func (*ReferenceArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{15}
}

func (x *ReferenceArchive) GetReferenceType() ReferenceArchive_ReferenceType {
	if x != nil && x.ReferenceType != nil {
		return *x.ReferenceType
	}
	return ReferenceArchive_CELL_REFERENCE
}

func (x *ReferenceArchive) GetCellReference() *CellReferenceArchive {
	if x != nil {
		return x.CellReference
	}
	return nil
}

func (x *ReferenceArchive) GetRangeReference() *RangeReferenceArchive {
	if x != nil {
		return x.RangeReference
	}
	return nil
}

type EdgeArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Column      *uint32        `protobuf:"varint,1,req,name=column" json:"column,omitempty"`
	Row         *uint32        `protobuf:"varint,2,req,name=row" json:"row,omitempty"`
	IsPrecedent *bool          `protobuf:"varint,3,req,name=is_precedent,json=isPrecedent" json:"is_precedent,omitempty"`
	OwnerId     *CFUUIDArchive `protobuf:"bytes,4,opt,name=owner_id,json=ownerId" json:"owner_id,omitempty"`
}

func (x *EdgeArchive) Reset() {
	*x = EdgeArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgeArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgeArchive) ProtoMessage() {}

func (x *EdgeArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgeArchive.ProtoReflect.Descriptor instead.
func (*EdgeArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{16}
}

func (x *EdgeArchive) GetColumn() uint32 {
	if x != nil && x.Column != nil {
		return *x.Column
	}
	return 0
}

func (x *EdgeArchive) GetRow() uint32 {
	if x != nil && x.Row != nil {
		return *x.Row
	}
	return 0
}

func (x *EdgeArchive) GetIsPrecedent() bool {
	if x != nil && x.IsPrecedent != nil {
		return *x.IsPrecedent
	}
	return false
}

func (x *EdgeArchive) GetOwnerId() *CFUUIDArchive {
	if x != nil {
		return x.OwnerId
	}
	return nil
}

type EdgesArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackedEdgeWithoutOwner []uint32         `protobuf:"varint,9,rep,name=packed_edge_without_owner,json=packedEdgeWithoutOwner" json:"packed_edge_without_owner,omitempty"`
	PackedEdgeWithOwner    []uint32         `protobuf:"varint,10,rep,name=packed_edge_with_owner,json=packedEdgeWithOwner" json:"packed_edge_with_owner,omitempty"`
	OwnerIdForEdge         []*CFUUIDArchive `protobuf:"bytes,11,rep,name=owner_id_for_edge,json=ownerIdForEdge" json:"owner_id_for_edge,omitempty"`
	InternalOwnerIdForEdge []uint32         `protobuf:"varint,12,rep,name=internal_owner_id_for_edge,json=internalOwnerIdForEdge" json:"internal_owner_id_for_edge,omitempty"`
}

func (x *EdgesArchive) Reset() {
	*x = EdgesArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgesArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgesArchive) ProtoMessage() {}

func (x *EdgesArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgesArchive.ProtoReflect.Descriptor instead.
func (*EdgesArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{17}
}

func (x *EdgesArchive) GetPackedEdgeWithoutOwner() []uint32 {
	if x != nil {
		return x.PackedEdgeWithoutOwner
	}
	return nil
}

func (x *EdgesArchive) GetPackedEdgeWithOwner() []uint32 {
	if x != nil {
		return x.PackedEdgeWithOwner
	}
	return nil
}

func (x *EdgesArchive) GetOwnerIdForEdge() []*CFUUIDArchive {
	if x != nil {
		return x.OwnerIdForEdge
	}
	return nil
}

func (x *EdgesArchive) GetInternalOwnerIdForEdge() []uint32 {
	if x != nil {
		return x.InternalOwnerIdForEdge
	}
	return nil
}

type ExpandedEdgesArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EdgeWithoutOwnerRows    []uint32 `protobuf:"varint,1,rep,name=edge_without_owner_rows,json=edgeWithoutOwnerRows" json:"edge_without_owner_rows,omitempty"`
	EdgeWithoutOwnerColumns []uint32 `protobuf:"varint,2,rep,name=edge_without_owner_columns,json=edgeWithoutOwnerColumns" json:"edge_without_owner_columns,omitempty"`
	EdgeWithOwnerRows       []uint32 `protobuf:"varint,3,rep,name=edge_with_owner_rows,json=edgeWithOwnerRows" json:"edge_with_owner_rows,omitempty"`
	EdgeWithOwnerColumns    []uint32 `protobuf:"varint,4,rep,name=edge_with_owner_columns,json=edgeWithOwnerColumns" json:"edge_with_owner_columns,omitempty"`
	InternalOwnerIdForEdge  []uint32 `protobuf:"varint,5,rep,name=internal_owner_id_for_edge,json=internalOwnerIdForEdge" json:"internal_owner_id_for_edge,omitempty"`
}

func (x *ExpandedEdgesArchive) Reset() {
	*x = ExpandedEdgesArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpandedEdgesArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpandedEdgesArchive) ProtoMessage() {}

func (x *ExpandedEdgesArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpandedEdgesArchive.ProtoReflect.Descriptor instead.
func (*ExpandedEdgesArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{18}
}

func (x *ExpandedEdgesArchive) GetEdgeWithoutOwnerRows() []uint32 {
	if x != nil {
		return x.EdgeWithoutOwnerRows
	}
	return nil
}

func (x *ExpandedEdgesArchive) GetEdgeWithoutOwnerColumns() []uint32 {
	if x != nil {
		return x.EdgeWithoutOwnerColumns
	}
	return nil
}

func (x *ExpandedEdgesArchive) GetEdgeWithOwnerRows() []uint32 {
	if x != nil {
		return x.EdgeWithOwnerRows
	}
	return nil
}

func (x *ExpandedEdgesArchive) GetEdgeWithOwnerColumns() []uint32 {
	if x != nil {
		return x.EdgeWithOwnerColumns
	}
	return nil
}

func (x *ExpandedEdgesArchive) GetInternalOwnerIdForEdge() []uint32 {
	if x != nil {
		return x.InternalOwnerIdForEdge
	}
	return nil
}

type CellRecordArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Column                       *uint32 `protobuf:"varint,1,req,name=column" json:"column,omitempty"`
	Row                          *uint32 `protobuf:"varint,2,req,name=row" json:"row,omitempty"`
	DirtySelfPlusPrecedentsCount *uint64 `protobuf:"varint,3,opt,name=dirty_self_plus_precedents_count,json=dirtySelfPlusPrecedentsCount,def=0" json:"dirty_self_plus_precedents_count,omitempty"`
	IsInACycle                   *bool   `protobuf:"varint,4,opt,name=is_in_a_cycle,json=isInACycle,def=0" json:"is_in_a_cycle,omitempty"`
	// Deprecated: Do not use.
	Edge                    []*EdgeArchive `protobuf:"bytes,5,rep,name=edge" json:"edge,omitempty"`
	ContainsAFormula        *bool          `protobuf:"varint,6,opt,name=contains_a_formula,json=containsAFormula,def=1" json:"contains_a_formula,omitempty"`
	HasCalculatedPrecedents *bool          `protobuf:"varint,7,opt,name=has_calculated_precedents,json=hasCalculatedPrecedents,def=0" json:"has_calculated_precedents,omitempty"`
	// Deprecated: Do not use.
	CalculatePrecedentsOnNextRecalc     *bool         `protobuf:"varint,8,opt,name=calculate_precedents_on_next_recalc,json=calculatePrecedentsOnNextRecalc,def=0" json:"calculate_precedents_on_next_recalc,omitempty"`
	TranslateForExcelImportOnNextRecalc *bool         `protobuf:"varint,10,opt,name=translate_for_excel_import_on_next_recalc,json=translateForExcelImportOnNextRecalc,def=0" json:"translate_for_excel_import_on_next_recalc,omitempty"`
	Edges                               *EdgesArchive `protobuf:"bytes,9,opt,name=edges" json:"edges,omitempty"`
}

// Default values for CellRecordArchive fields.
const (
	Default_CellRecordArchive_DirtySelfPlusPrecedentsCount        = uint64(0)
	Default_CellRecordArchive_IsInACycle                          = bool(false)
	Default_CellRecordArchive_ContainsAFormula                    = bool(true)
	Default_CellRecordArchive_HasCalculatedPrecedents             = bool(false)
	Default_CellRecordArchive_CalculatePrecedentsOnNextRecalc     = bool(false)
	Default_CellRecordArchive_TranslateForExcelImportOnNextRecalc = bool(false)
)

func (x *CellRecordArchive) Reset() {
	*x = CellRecordArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellRecordArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellRecordArchive) ProtoMessage() {}

func (x *CellRecordArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellRecordArchive.ProtoReflect.Descriptor instead.
func (*CellRecordArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{19}
}

func (x *CellRecordArchive) GetColumn() uint32 {
	if x != nil && x.Column != nil {
		return *x.Column
	}
	return 0
}

func (x *CellRecordArchive) GetRow() uint32 {
	if x != nil && x.Row != nil {
		return *x.Row
	}
	return 0
}

func (x *CellRecordArchive) GetDirtySelfPlusPrecedentsCount() uint64 {
	if x != nil && x.DirtySelfPlusPrecedentsCount != nil {
		return *x.DirtySelfPlusPrecedentsCount
	}
	return Default_CellRecordArchive_DirtySelfPlusPrecedentsCount
}

func (x *CellRecordArchive) GetIsInACycle() bool {
	if x != nil && x.IsInACycle != nil {
		return *x.IsInACycle
	}
	return Default_CellRecordArchive_IsInACycle
}

// Deprecated: Do not use.
func (x *CellRecordArchive) GetEdge() []*EdgeArchive {
	if x != nil {
		return x.Edge
	}
	return nil
}

func (x *CellRecordArchive) GetContainsAFormula() bool {
	if x != nil && x.ContainsAFormula != nil {
		return *x.ContainsAFormula
	}
	return Default_CellRecordArchive_ContainsAFormula
}

func (x *CellRecordArchive) GetHasCalculatedPrecedents() bool {
	if x != nil && x.HasCalculatedPrecedents != nil {
		return *x.HasCalculatedPrecedents
	}
	return Default_CellRecordArchive_HasCalculatedPrecedents
}

// Deprecated: Do not use.
func (x *CellRecordArchive) GetCalculatePrecedentsOnNextRecalc() bool {
	if x != nil && x.CalculatePrecedentsOnNextRecalc != nil {
		return *x.CalculatePrecedentsOnNextRecalc
	}
	return Default_CellRecordArchive_CalculatePrecedentsOnNextRecalc
}

func (x *CellRecordArchive) GetTranslateForExcelImportOnNextRecalc() bool {
	if x != nil && x.TranslateForExcelImportOnNextRecalc != nil {
		return *x.TranslateForExcelImportOnNextRecalc
	}
	return Default_CellRecordArchive_TranslateForExcelImportOnNextRecalc
}

func (x *CellRecordArchive) GetEdges() *EdgesArchive {
	if x != nil {
		return x.Edges
	}
	return nil
}

type CellDependenciesArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellRecord    []*CellRecordArchive `protobuf:"bytes,1,rep,name=cell_record,json=cellRecord" json:"cell_record,omitempty"`
	NumDirtyCells *uint32              `protobuf:"varint,2,opt,name=num_dirty_cells,json=numDirtyCells" json:"num_dirty_cells,omitempty"`
}

func (x *CellDependenciesArchive) Reset() {
	*x = CellDependenciesArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellDependenciesArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellDependenciesArchive) ProtoMessage() {}

func (x *CellDependenciesArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellDependenciesArchive.ProtoReflect.Descriptor instead.
func (*CellDependenciesArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{20}
}

func (x *CellDependenciesArchive) GetCellRecord() []*CellRecordArchive {
	if x != nil {
		return x.CellRecord
	}
	return nil
}

func (x *CellDependenciesArchive) GetNumDirtyCells() uint32 {
	if x != nil && x.NumDirtyCells != nil {
		return *x.NumDirtyCells
	}
	return 0
}

type CellRecordExpandedArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Column                       *uint32               `protobuf:"varint,1,req,name=column" json:"column,omitempty"`
	Row                          *uint32               `protobuf:"varint,2,req,name=row" json:"row,omitempty"`
	DirtySelfPlusPrecedentsCount *uint64               `protobuf:"varint,3,opt,name=dirty_self_plus_precedents_count,json=dirtySelfPlusPrecedentsCount,def=0" json:"dirty_self_plus_precedents_count,omitempty"`
	IsInACycle                   *bool                 `protobuf:"varint,4,opt,name=is_in_a_cycle,json=isInACycle,def=0" json:"is_in_a_cycle,omitempty"`
	HasCalculatedPrecedents      *bool                 `protobuf:"varint,5,opt,name=has_calculated_precedents,json=hasCalculatedPrecedents,def=0" json:"has_calculated_precedents,omitempty"`
	ExpandedEdges                *ExpandedEdgesArchive `protobuf:"bytes,6,opt,name=expanded_edges,json=expandedEdges" json:"expanded_edges,omitempty"`
}

// Default values for CellRecordExpandedArchive fields.
const (
	Default_CellRecordExpandedArchive_DirtySelfPlusPrecedentsCount = uint64(0)
	Default_CellRecordExpandedArchive_IsInACycle                   = bool(false)
	Default_CellRecordExpandedArchive_HasCalculatedPrecedents      = bool(false)
)

func (x *CellRecordExpandedArchive) Reset() {
	*x = CellRecordExpandedArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellRecordExpandedArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellRecordExpandedArchive) ProtoMessage() {}

func (x *CellRecordExpandedArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellRecordExpandedArchive.ProtoReflect.Descriptor instead.
func (*CellRecordExpandedArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{21}
}

func (x *CellRecordExpandedArchive) GetColumn() uint32 {
	if x != nil && x.Column != nil {
		return *x.Column
	}
	return 0
}

func (x *CellRecordExpandedArchive) GetRow() uint32 {
	if x != nil && x.Row != nil {
		return *x.Row
	}
	return 0
}

func (x *CellRecordExpandedArchive) GetDirtySelfPlusPrecedentsCount() uint64 {
	if x != nil && x.DirtySelfPlusPrecedentsCount != nil {
		return *x.DirtySelfPlusPrecedentsCount
	}
	return Default_CellRecordExpandedArchive_DirtySelfPlusPrecedentsCount
}

func (x *CellRecordExpandedArchive) GetIsInACycle() bool {
	if x != nil && x.IsInACycle != nil {
		return *x.IsInACycle
	}
	return Default_CellRecordExpandedArchive_IsInACycle
}

func (x *CellRecordExpandedArchive) GetHasCalculatedPrecedents() bool {
	if x != nil && x.HasCalculatedPrecedents != nil {
		return *x.HasCalculatedPrecedents
	}
	return Default_CellRecordExpandedArchive_HasCalculatedPrecedents
}

func (x *CellRecordExpandedArchive) GetExpandedEdges() *ExpandedEdgesArchive {
	if x != nil {
		return x.ExpandedEdges
	}
	return nil
}

type CellDependenciesExpandedArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellRecord []*CellRecordExpandedArchive `protobuf:"bytes,1,rep,name=cell_record,json=cellRecord" json:"cell_record,omitempty"`
}

func (x *CellDependenciesExpandedArchive) Reset() {
	*x = CellDependenciesExpandedArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellDependenciesExpandedArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellDependenciesExpandedArchive) ProtoMessage() {}

func (x *CellDependenciesExpandedArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellDependenciesExpandedArchive.ProtoReflect.Descriptor instead.
func (*CellDependenciesExpandedArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{22}
}

func (x *CellDependenciesExpandedArchive) GetCellRecord() []*CellRecordExpandedArchive {
	if x != nil {
		return x.CellRecord
	}
	return nil
}

type CellRecordTileArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InternalOwnerId *uint32                      `protobuf:"varint,1,req,name=internal_owner_id,json=internalOwnerId" json:"internal_owner_id,omitempty"`
	TileColumnBegin *uint32                      `protobuf:"varint,2,req,name=tile_column_begin,json=tileColumnBegin" json:"tile_column_begin,omitempty"`
	TileRowBegin    *uint32                      `protobuf:"varint,3,req,name=tile_row_begin,json=tileRowBegin" json:"tile_row_begin,omitempty"`
	CellRecords     []*CellRecordExpandedArchive `protobuf:"bytes,4,rep,name=cell_records,json=cellRecords" json:"cell_records,omitempty"`
}

func (x *CellRecordTileArchive) Reset() {
	*x = CellRecordTileArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellRecordTileArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellRecordTileArchive) ProtoMessage() {}

func (x *CellRecordTileArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellRecordTileArchive.ProtoReflect.Descriptor instead.
func (*CellRecordTileArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{23}
}

func (x *CellRecordTileArchive) GetInternalOwnerId() uint32 {
	if x != nil && x.InternalOwnerId != nil {
		return *x.InternalOwnerId
	}
	return 0
}

func (x *CellRecordTileArchive) GetTileColumnBegin() uint32 {
	if x != nil && x.TileColumnBegin != nil {
		return *x.TileColumnBegin
	}
	return 0
}

func (x *CellRecordTileArchive) GetTileRowBegin() uint32 {
	if x != nil && x.TileRowBegin != nil {
		return *x.TileRowBegin
	}
	return 0
}

func (x *CellRecordTileArchive) GetCellRecords() []*CellRecordExpandedArchive {
	if x != nil {
		return x.CellRecords
	}
	return nil
}

type CellDependenciesTiledArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellRecordTiles []*Reference `protobuf:"bytes,1,rep,name=cell_record_tiles,json=cellRecordTiles" json:"cell_record_tiles,omitempty"`
}

func (x *CellDependenciesTiledArchive) Reset() {
	*x = CellDependenciesTiledArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellDependenciesTiledArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellDependenciesTiledArchive) ProtoMessage() {}

func (x *CellDependenciesTiledArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellDependenciesTiledArchive.ProtoReflect.Descriptor instead.
func (*CellDependenciesTiledArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{24}
}

func (x *CellDependenciesTiledArchive) GetCellRecordTiles() []*Reference {
	if x != nil {
		return x.CellRecordTiles
	}
	return nil
}

type VolatileDependenciesArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VolatileTimeCellColumn           []uint32                 `protobuf:"varint,1,rep,name=volatile_time_cell_column,json=volatileTimeCellColumn" json:"volatile_time_cell_column,omitempty"`
	VolatileTimeCellRow              []uint32                 `protobuf:"varint,2,rep,name=volatile_time_cell_row,json=volatileTimeCellRow" json:"volatile_time_cell_row,omitempty"`
	VolatileRandomCellColumn         []uint32                 `protobuf:"varint,3,rep,name=volatile_random_cell_column,json=volatileRandomCellColumn" json:"volatile_random_cell_column,omitempty"`
	VolatileRandomCellRow            []uint32                 `protobuf:"varint,4,rep,name=volatile_random_cell_row,json=volatileRandomCellRow" json:"volatile_random_cell_row,omitempty"`
	VolatileLocaleCellColumn         []uint32                 `protobuf:"varint,15,rep,name=volatile_locale_cell_column,json=volatileLocaleCellColumn" json:"volatile_locale_cell_column,omitempty"`
	VolatileLocaleCellRow            []uint32                 `protobuf:"varint,16,rep,name=volatile_locale_cell_row,json=volatileLocaleCellRow" json:"volatile_locale_cell_row,omitempty"`
	VolatileLocationCellColumn       []uint32                 `protobuf:"varint,5,rep,name=volatile_location_cell_column,json=volatileLocationCellColumn" json:"volatile_location_cell_column,omitempty"`
	VolatileLocationCellRow          []uint32                 `protobuf:"varint,6,rep,name=volatile_location_cell_row,json=volatileLocationCellRow" json:"volatile_location_cell_row,omitempty"`
	VolatileCompassCellColumn        []uint32                 `protobuf:"varint,7,rep,name=volatile_compass_cell_column,json=volatileCompassCellColumn" json:"volatile_compass_cell_column,omitempty"`
	VolatileCompassCellRow           []uint32                 `protobuf:"varint,8,rep,name=volatile_compass_cell_row,json=volatileCompassCellRow" json:"volatile_compass_cell_row,omitempty"`
	VolatileRemoteDataCellColumn     []uint32                 `protobuf:"varint,19,rep,name=volatile_remote_data_cell_column,json=volatileRemoteDataCellColumn" json:"volatile_remote_data_cell_column,omitempty"`
	VolatileRemoteDataCellRow        []uint32                 `protobuf:"varint,20,rep,name=volatile_remote_data_cell_row,json=volatileRemoteDataCellRow" json:"volatile_remote_data_cell_row,omitempty"`
	VolatileSheetTableNameCellColumn []uint32                 `protobuf:"varint,17,rep,name=volatile_sheet_table_name_cell_column,json=volatileSheetTableNameCellColumn" json:"volatile_sheet_table_name_cell_column,omitempty"`
	VolatileSheetTableNameCellRow    []uint32                 `protobuf:"varint,18,rep,name=volatile_sheet_table_name_cell_row,json=volatileSheetTableNameCellRow" json:"volatile_sheet_table_name_cell_row,omitempty"`
	CalculatedDependencyCellColumn   []uint32                 `protobuf:"varint,9,rep,name=calculated_dependency_cell_column,json=calculatedDependencyCellColumn" json:"calculated_dependency_cell_column,omitempty"`
	CalculatedDependencyCellRow      []uint32                 `protobuf:"varint,10,rep,name=calculated_dependency_cell_row,json=calculatedDependencyCellRow" json:"calculated_dependency_cell_row,omitempty"`
	VolatileGeometryCellReference    []*CellReferenceArchive  `protobuf:"bytes,13,rep,name=volatile_geometry_cell_reference,json=volatileGeometryCellReference" json:"volatile_geometry_cell_reference,omitempty"`
	VolatileGeometryCell             []*CellCoordinateArchive `protobuf:"bytes,11,rep,name=volatile_geometry_cell,json=volatileGeometryCell" json:"volatile_geometry_cell,omitempty"`
}

func (x *VolatileDependenciesArchive) Reset() {
	*x = VolatileDependenciesArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolatileDependenciesArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolatileDependenciesArchive) ProtoMessage() {}

func (x *VolatileDependenciesArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolatileDependenciesArchive.ProtoReflect.Descriptor instead.
func (*VolatileDependenciesArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{25}
}

func (x *VolatileDependenciesArchive) GetVolatileTimeCellColumn() []uint32 {
	if x != nil {
		return x.VolatileTimeCellColumn
	}
	return nil
}

func (x *VolatileDependenciesArchive) GetVolatileTimeCellRow() []uint32 {
	if x != nil {
		return x.VolatileTimeCellRow
	}
	return nil
}

func (x *VolatileDependenciesArchive) GetVolatileRandomCellColumn() []uint32 {
	if x != nil {
		return x.VolatileRandomCellColumn
	}
	return nil
}

func (x *VolatileDependenciesArchive) GetVolatileRandomCellRow() []uint32 {
	if x != nil {
		return x.VolatileRandomCellRow
	}
	return nil
}

func (x *VolatileDependenciesArchive) GetVolatileLocaleCellColumn() []uint32 {
	if x != nil {
		return x.VolatileLocaleCellColumn
	}
	return nil
}

func (x *VolatileDependenciesArchive) GetVolatileLocaleCellRow() []uint32 {
	if x != nil {
		return x.VolatileLocaleCellRow
	}
	return nil
}

func (x *VolatileDependenciesArchive) GetVolatileLocationCellColumn() []uint32 {
	if x != nil {
		return x.VolatileLocationCellColumn
	}
	return nil
}

func (x *VolatileDependenciesArchive) GetVolatileLocationCellRow() []uint32 {
	if x != nil {
		return x.VolatileLocationCellRow
	}
	return nil
}

func (x *VolatileDependenciesArchive) GetVolatileCompassCellColumn() []uint32 {
	if x != nil {
		return x.VolatileCompassCellColumn
	}
	return nil
}

func (x *VolatileDependenciesArchive) GetVolatileCompassCellRow() []uint32 {
	if x != nil {
		return x.VolatileCompassCellRow
	}
	return nil
}

func (x *VolatileDependenciesArchive) GetVolatileRemoteDataCellColumn() []uint32 {
	if x != nil {
		return x.VolatileRemoteDataCellColumn
	}
	return nil
}

func (x *VolatileDependenciesArchive) GetVolatileRemoteDataCellRow() []uint32 {
	if x != nil {
		return x.VolatileRemoteDataCellRow
	}
	return nil
}

func (x *VolatileDependenciesArchive) GetVolatileSheetTableNameCellColumn() []uint32 {
	if x != nil {
		return x.VolatileSheetTableNameCellColumn
	}
	return nil
}

func (x *VolatileDependenciesArchive) GetVolatileSheetTableNameCellRow() []uint32 {
	if x != nil {
		return x.VolatileSheetTableNameCellRow
	}
	return nil
}

func (x *VolatileDependenciesArchive) GetCalculatedDependencyCellColumn() []uint32 {
	if x != nil {
		return x.CalculatedDependencyCellColumn
	}
	return nil
}

func (x *VolatileDependenciesArchive) GetCalculatedDependencyCellRow() []uint32 {
	if x != nil {
		return x.CalculatedDependencyCellRow
	}
	return nil
}

func (x *VolatileDependenciesArchive) GetVolatileGeometryCellReference() []*CellReferenceArchive {
	if x != nil {
		return x.VolatileGeometryCellReference
	}
	return nil
}

func (x *VolatileDependenciesArchive) GetVolatileGeometryCell() []*CellCoordinateArchive {
	if x != nil {
		return x.VolatileGeometryCell
	}
	return nil
}

type VolatileDependenciesExpandedArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VolatileTimeCells           *CellCoordSetArchive       `protobuf:"bytes,1,opt,name=volatile_time_cells,json=volatileTimeCells" json:"volatile_time_cells,omitempty"`
	VolatileRandomCells         *CellCoordSetArchive       `protobuf:"bytes,2,opt,name=volatile_random_cells,json=volatileRandomCells" json:"volatile_random_cells,omitempty"`
	VolatileLocaleCells         *CellCoordSetArchive       `protobuf:"bytes,3,opt,name=volatile_locale_cells,json=volatileLocaleCells" json:"volatile_locale_cells,omitempty"`
	VolatileSheetTableNameCells *CellCoordSetArchive       `protobuf:"bytes,4,opt,name=volatile_sheet_table_name_cells,json=volatileSheetTableNameCells" json:"volatile_sheet_table_name_cells,omitempty"`
	VolatileRemoteDataCells     *CellCoordSetArchive       `protobuf:"bytes,5,opt,name=volatile_remote_data_cells,json=volatileRemoteDataCells" json:"volatile_remote_data_cells,omitempty"`
	VolatileGeometryCellRefs    *InternalCellRefSetArchive `protobuf:"bytes,7,opt,name=volatile_geometry_cell_refs,json=volatileGeometryCellRefs" json:"volatile_geometry_cell_refs,omitempty"`
}

func (x *VolatileDependenciesExpandedArchive) Reset() {
	*x = VolatileDependenciesExpandedArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolatileDependenciesExpandedArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolatileDependenciesExpandedArchive) ProtoMessage() {}

func (x *VolatileDependenciesExpandedArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolatileDependenciesExpandedArchive.ProtoReflect.Descriptor instead.
func (*VolatileDependenciesExpandedArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{26}
}

func (x *VolatileDependenciesExpandedArchive) GetVolatileTimeCells() *CellCoordSetArchive {
	if x != nil {
		return x.VolatileTimeCells
	}
	return nil
}

func (x *VolatileDependenciesExpandedArchive) GetVolatileRandomCells() *CellCoordSetArchive {
	if x != nil {
		return x.VolatileRandomCells
	}
	return nil
}

func (x *VolatileDependenciesExpandedArchive) GetVolatileLocaleCells() *CellCoordSetArchive {
	if x != nil {
		return x.VolatileLocaleCells
	}
	return nil
}

func (x *VolatileDependenciesExpandedArchive) GetVolatileSheetTableNameCells() *CellCoordSetArchive {
	if x != nil {
		return x.VolatileSheetTableNameCells
	}
	return nil
}

func (x *VolatileDependenciesExpandedArchive) GetVolatileRemoteDataCells() *CellCoordSetArchive {
	if x != nil {
		return x.VolatileRemoteDataCells
	}
	return nil
}

func (x *VolatileDependenciesExpandedArchive) GetVolatileGeometryCellRefs() *InternalCellRefSetArchive {
	if x != nil {
		return x.VolatileGeometryCellRefs
	}
	return nil
}

type RTreeInternalNodeContentsArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min   []uint32          `protobuf:"varint,1,rep,name=min" json:"min,omitempty"`
	Max   []uint32          `protobuf:"varint,2,rep,name=max" json:"max,omitempty"`
	Child *RTreeNodeArchive `protobuf:"bytes,3,req,name=child" json:"child,omitempty"`
}

func (x *RTreeInternalNodeContentsArchive) Reset() {
	*x = RTreeInternalNodeContentsArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RTreeInternalNodeContentsArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RTreeInternalNodeContentsArchive) ProtoMessage() {}

func (x *RTreeInternalNodeContentsArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RTreeInternalNodeContentsArchive.ProtoReflect.Descriptor instead.
func (*RTreeInternalNodeContentsArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{27}
}

func (x *RTreeInternalNodeContentsArchive) GetMin() []uint32 {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *RTreeInternalNodeContentsArchive) GetMax() []uint32 {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *RTreeInternalNodeContentsArchive) GetChild() *RTreeNodeArchive {
	if x != nil {
		return x.Child
	}
	return nil
}

type RTreeLeafNodeContentsArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min           []uint32              `protobuf:"varint,1,rep,name=min" json:"min,omitempty"`
	Max           []uint32              `protobuf:"varint,2,rep,name=max" json:"max,omitempty"`
	CellReference *CellReferenceArchive `protobuf:"bytes,3,req,name=cell_reference,json=cellReference" json:"cell_reference,omitempty"`
}

func (x *RTreeLeafNodeContentsArchive) Reset() {
	*x = RTreeLeafNodeContentsArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RTreeLeafNodeContentsArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RTreeLeafNodeContentsArchive) ProtoMessage() {}

func (x *RTreeLeafNodeContentsArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RTreeLeafNodeContentsArchive.ProtoReflect.Descriptor instead.
func (*RTreeLeafNodeContentsArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{28}
}

func (x *RTreeLeafNodeContentsArchive) GetMin() []uint32 {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *RTreeLeafNodeContentsArchive) GetMax() []uint32 {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *RTreeLeafNodeContentsArchive) GetCellReference() *CellReferenceArchive {
	if x != nil {
		return x.CellReference
	}
	return nil
}

type RTreeNodeArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level                *uint32                             `protobuf:"varint,1,req,name=level" json:"level,omitempty"`
	Count                *uint32                             `protobuf:"varint,2,req,name=count" json:"count,omitempty"`
	InternalNodeContents []*RTreeInternalNodeContentsArchive `protobuf:"bytes,3,rep,name=internal_node_contents,json=internalNodeContents" json:"internal_node_contents,omitempty"`
	LeafNodeContents     []*RTreeLeafNodeContentsArchive     `protobuf:"bytes,4,rep,name=leaf_node_contents,json=leafNodeContents" json:"leaf_node_contents,omitempty"`
}

func (x *RTreeNodeArchive) Reset() {
	*x = RTreeNodeArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RTreeNodeArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RTreeNodeArchive) ProtoMessage() {}

func (x *RTreeNodeArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RTreeNodeArchive.ProtoReflect.Descriptor instead.
func (*RTreeNodeArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{29}
}

func (x *RTreeNodeArchive) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *RTreeNodeArchive) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *RTreeNodeArchive) GetInternalNodeContents() []*RTreeInternalNodeContentsArchive {
	if x != nil {
		return x.InternalNodeContents
	}
	return nil
}

func (x *RTreeNodeArchive) GetLeafNodeContents() []*RTreeLeafNodeContentsArchive {
	if x != nil {
		return x.LeafNodeContents
	}
	return nil
}

type RTreeArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataFileId       *uint32           `protobuf:"varint,1,req,name=data_file_id,json=dataFileId" json:"data_file_id,omitempty"`
	DataSize         *uint32           `protobuf:"varint,2,req,name=data_size,json=dataSize" json:"data_size,omitempty"`
	DataNumDims      *uint32           `protobuf:"varint,3,req,name=data_num_dims,json=dataNumDims" json:"data_num_dims,omitempty"`
	DataElemSize     *uint32           `protobuf:"varint,4,req,name=data_elem_size,json=dataElemSize" json:"data_elem_size,omitempty"`
	DataElemRealSize *uint32           `protobuf:"varint,5,req,name=data_elem_real_size,json=dataElemRealSize" json:"data_elem_real_size,omitempty"`
	DataMaxNodes     *uint32           `protobuf:"varint,6,req,name=data_max_nodes,json=dataMaxNodes" json:"data_max_nodes,omitempty"`
	DataMinNodes     *uint32           `protobuf:"varint,7,req,name=data_min_nodes,json=dataMinNodes" json:"data_min_nodes,omitempty"`
	Root             *RTreeNodeArchive `protobuf:"bytes,8,req,name=root" json:"root,omitempty"`
}

func (x *RTreeArchive) Reset() {
	*x = RTreeArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RTreeArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RTreeArchive) ProtoMessage() {}

func (x *RTreeArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RTreeArchive.ProtoReflect.Descriptor instead.
func (*RTreeArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{30}
}

func (x *RTreeArchive) GetDataFileId() uint32 {
	if x != nil && x.DataFileId != nil {
		return *x.DataFileId
	}
	return 0
}

func (x *RTreeArchive) GetDataSize() uint32 {
	if x != nil && x.DataSize != nil {
		return *x.DataSize
	}
	return 0
}

func (x *RTreeArchive) GetDataNumDims() uint32 {
	if x != nil && x.DataNumDims != nil {
		return *x.DataNumDims
	}
	return 0
}

func (x *RTreeArchive) GetDataElemSize() uint32 {
	if x != nil && x.DataElemSize != nil {
		return *x.DataElemSize
	}
	return 0
}

func (x *RTreeArchive) GetDataElemRealSize() uint32 {
	if x != nil && x.DataElemRealSize != nil {
		return *x.DataElemRealSize
	}
	return 0
}

func (x *RTreeArchive) GetDataMaxNodes() uint32 {
	if x != nil && x.DataMaxNodes != nil {
		return *x.DataMaxNodes
	}
	return 0
}

func (x *RTreeArchive) GetDataMinNodes() uint32 {
	if x != nil && x.DataMinNodes != nil {
		return *x.DataMinNodes
	}
	return 0
}

func (x *RTreeArchive) GetRoot() *RTreeNodeArchive {
	if x != nil {
		return x.Root
	}
	return nil
}

type RangeBackDependencyArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellCoordRow           *uint32                        `protobuf:"varint,1,req,name=cell_coord_row,json=cellCoordRow" json:"cell_coord_row,omitempty"`
	CellCoordColumn        *uint32                        `protobuf:"varint,2,req,name=cell_coord_column,json=cellCoordColumn" json:"cell_coord_column,omitempty"`
	RangeReference         *RangeReferenceArchive         `protobuf:"bytes,3,opt,name=range_reference,json=rangeReference" json:"range_reference,omitempty"`
	InternalRangeReference *InternalRangeReferenceArchive `protobuf:"bytes,4,opt,name=internal_range_reference,json=internalRangeReference" json:"internal_range_reference,omitempty"`
}

func (x *RangeBackDependencyArchive) Reset() {
	*x = RangeBackDependencyArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RangeBackDependencyArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RangeBackDependencyArchive) ProtoMessage() {}

func (x *RangeBackDependencyArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RangeBackDependencyArchive.ProtoReflect.Descriptor instead.
func (*RangeBackDependencyArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{31}
}

func (x *RangeBackDependencyArchive) GetCellCoordRow() uint32 {
	if x != nil && x.CellCoordRow != nil {
		return *x.CellCoordRow
	}
	return 0
}

func (x *RangeBackDependencyArchive) GetCellCoordColumn() uint32 {
	if x != nil && x.CellCoordColumn != nil {
		return *x.CellCoordColumn
	}
	return 0
}

func (x *RangeBackDependencyArchive) GetRangeReference() *RangeReferenceArchive {
	if x != nil {
		return x.RangeReference
	}
	return nil
}

func (x *RangeBackDependencyArchive) GetInternalRangeReference() *InternalRangeReferenceArchive {
	if x != nil {
		return x.InternalRangeReference
	}
	return nil
}

type RangeDependenciesArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BackDependency []*RangeBackDependencyArchive `protobuf:"bytes,2,rep,name=back_dependency,json=backDependency" json:"back_dependency,omitempty"`
}

func (x *RangeDependenciesArchive) Reset() {
	*x = RangeDependenciesArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RangeDependenciesArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RangeDependenciesArchive) ProtoMessage() {}

func (x *RangeDependenciesArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RangeDependenciesArchive.ProtoReflect.Descriptor instead.
func (*RangeDependenciesArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{32}
}

func (x *RangeDependenciesArchive) GetBackDependency() []*RangeBackDependencyArchive {
	if x != nil {
		return x.BackDependency
	}
	return nil
}

type RangePrecedentsTileArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ToOwnerId   *uint32                                          `protobuf:"varint,1,req,name=to_owner_id,json=toOwnerId" json:"to_owner_id,omitempty"`
	FromToRange []*RangePrecedentsTileArchive_FromToRangeArchive `protobuf:"bytes,2,rep,name=from_to_range,json=fromToRange" json:"from_to_range,omitempty"`
}

func (x *RangePrecedentsTileArchive) Reset() {
	*x = RangePrecedentsTileArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RangePrecedentsTileArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RangePrecedentsTileArchive) ProtoMessage() {}

func (x *RangePrecedentsTileArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RangePrecedentsTileArchive.ProtoReflect.Descriptor instead.
func (*RangePrecedentsTileArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{33}
}

func (x *RangePrecedentsTileArchive) GetToOwnerId() uint32 {
	if x != nil && x.ToOwnerId != nil {
		return *x.ToOwnerId
	}
	return 0
}

func (x *RangePrecedentsTileArchive) GetFromToRange() []*RangePrecedentsTileArchive_FromToRangeArchive {
	if x != nil {
		return x.FromToRange
	}
	return nil
}

type RangeDependenciesTiledArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RangePrecedentsTile []*Reference `protobuf:"bytes,1,rep,name=range_precedents_tile,json=rangePrecedentsTile" json:"range_precedents_tile,omitempty"`
}

func (x *RangeDependenciesTiledArchive) Reset() {
	*x = RangeDependenciesTiledArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RangeDependenciesTiledArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RangeDependenciesTiledArchive) ProtoMessage() {}

func (x *RangeDependenciesTiledArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RangeDependenciesTiledArchive.ProtoReflect.Descriptor instead.
func (*RangeDependenciesTiledArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{34}
}

func (x *RangeDependenciesTiledArchive) GetRangePrecedentsTile() []*Reference {
	if x != nil {
		return x.RangePrecedentsTile
	}
	return nil
}

type SpanningDependenciesArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Column                       []uint32                                                    `protobuf:"varint,1,rep,name=column" json:"column,omitempty"`
	RangeContext                 []SpanningDependenciesArchive_RangeContext                  `protobuf:"varint,2,rep,name=range_context,json=rangeContext,enum=TSCE.SpanningDependenciesArchive_RangeContext" json:"range_context,omitempty"`
	Cell                         []*CellReferenceArchive                                     `protobuf:"bytes,3,rep,name=cell" json:"cell,omitempty"`
	TotalRangeForDeletedTable    *RangeCoordinateArchive                                     `protobuf:"bytes,4,opt,name=total_range_for_deleted_table,json=totalRangeForDeletedTable" json:"total_range_for_deleted_table,omitempty"`
	BodyRangeForDeletedTable     *RangeCoordinateArchive                                     `protobuf:"bytes,5,opt,name=body_range_for_deleted_table,json=bodyRangeForDeletedTable" json:"body_range_for_deleted_table,omitempty"`
	ReferringColumnToLocalCells  []*SpanningDependenciesArchive_ReferringColumnToLocalCells  `protobuf:"bytes,6,rep,name=referring_column_to_local_cells,json=referringColumnToLocalCells" json:"referring_column_to_local_cells,omitempty"`
	ReferringColumnToRemoteCells []*SpanningDependenciesArchive_ReferringColumnToRemoteCells `protobuf:"bytes,7,rep,name=referring_column_to_remote_cells,json=referringColumnToRemoteCells" json:"referring_column_to_remote_cells,omitempty"`
}

func (x *SpanningDependenciesArchive) Reset() {
	*x = SpanningDependenciesArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpanningDependenciesArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanningDependenciesArchive) ProtoMessage() {}

func (x *SpanningDependenciesArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanningDependenciesArchive.ProtoReflect.Descriptor instead.
func (*SpanningDependenciesArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{35}
}

func (x *SpanningDependenciesArchive) GetColumn() []uint32 {
	if x != nil {
		return x.Column
	}
	return nil
}

func (x *SpanningDependenciesArchive) GetRangeContext() []SpanningDependenciesArchive_RangeContext {
	if x != nil {
		return x.RangeContext
	}
	return nil
}

func (x *SpanningDependenciesArchive) GetCell() []*CellReferenceArchive {
	if x != nil {
		return x.Cell
	}
	return nil
}

func (x *SpanningDependenciesArchive) GetTotalRangeForDeletedTable() *RangeCoordinateArchive {
	if x != nil {
		return x.TotalRangeForDeletedTable
	}
	return nil
}

func (x *SpanningDependenciesArchive) GetBodyRangeForDeletedTable() *RangeCoordinateArchive {
	if x != nil {
		return x.BodyRangeForDeletedTable
	}
	return nil
}

func (x *SpanningDependenciesArchive) GetReferringColumnToLocalCells() []*SpanningDependenciesArchive_ReferringColumnToLocalCells {
	if x != nil {
		return x.ReferringColumnToLocalCells
	}
	return nil
}

func (x *SpanningDependenciesArchive) GetReferringColumnToRemoteCells() []*SpanningDependenciesArchive_ReferringColumnToRemoteCells {
	if x != nil {
		return x.ReferringColumnToRemoteCells
	}
	return nil
}

type SpanningDependenciesExpandedArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoordRefersToSpans []*SpanningDependenciesExpandedArchive_CellCoordRefersToExtents `protobuf:"bytes,1,rep,name=coord_refers_to_spans,json=coordRefersToSpans" json:"coord_refers_to_spans,omitempty"`
	TotalRangeForTable *RangeCoordinateArchive                                         `protobuf:"bytes,2,opt,name=total_range_for_table,json=totalRangeForTable" json:"total_range_for_table,omitempty"`
	BodyRangeForTable  *RangeCoordinateArchive                                         `protobuf:"bytes,3,opt,name=body_range_for_table,json=bodyRangeForTable" json:"body_range_for_table,omitempty"`
}

func (x *SpanningDependenciesExpandedArchive) Reset() {
	*x = SpanningDependenciesExpandedArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpanningDependenciesExpandedArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanningDependenciesExpandedArchive) ProtoMessage() {}

func (x *SpanningDependenciesExpandedArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanningDependenciesExpandedArchive.ProtoReflect.Descriptor instead.
func (*SpanningDependenciesExpandedArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{36}
}

func (x *SpanningDependenciesExpandedArchive) GetCoordRefersToSpans() []*SpanningDependenciesExpandedArchive_CellCoordRefersToExtents {
	if x != nil {
		return x.CoordRefersToSpans
	}
	return nil
}

func (x *SpanningDependenciesExpandedArchive) GetTotalRangeForTable() *RangeCoordinateArchive {
	if x != nil {
		return x.TotalRangeForTable
	}
	return nil
}

func (x *SpanningDependenciesExpandedArchive) GetBodyRangeForTable() *RangeCoordinateArchive {
	if x != nil {
		return x.BodyRangeForTable
	}
	return nil
}

type WholeOwnerDependenciesArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DependentCell []*InternalCellReferenceArchive `protobuf:"bytes,1,rep,name=dependent_cell,json=dependentCell" json:"dependent_cell,omitempty"`
}

func (x *WholeOwnerDependenciesArchive) Reset() {
	*x = WholeOwnerDependenciesArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WholeOwnerDependenciesArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WholeOwnerDependenciesArchive) ProtoMessage() {}

func (x *WholeOwnerDependenciesArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WholeOwnerDependenciesArchive.ProtoReflect.Descriptor instead.
func (*WholeOwnerDependenciesArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{37}
}

func (x *WholeOwnerDependenciesArchive) GetDependentCell() []*InternalCellReferenceArchive {
	if x != nil {
		return x.DependentCell
	}
	return nil
}

type WholeOwnerDependenciesExpandedArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DependentCells *InternalCellRefSetArchive `protobuf:"bytes,1,opt,name=dependent_cells,json=dependentCells" json:"dependent_cells,omitempty"`
}

func (x *WholeOwnerDependenciesExpandedArchive) Reset() {
	*x = WholeOwnerDependenciesExpandedArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WholeOwnerDependenciesExpandedArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WholeOwnerDependenciesExpandedArchive) ProtoMessage() {}

func (x *WholeOwnerDependenciesExpandedArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WholeOwnerDependenciesExpandedArchive.ProtoReflect.Descriptor instead.
func (*WholeOwnerDependenciesExpandedArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{38}
}

func (x *WholeOwnerDependenciesExpandedArchive) GetDependentCells() *InternalCellRefSetArchive {
	if x != nil {
		return x.DependentCells
	}
	return nil
}

type CellErrorsArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errors []*CellErrorsArchive_ErrorForCell `protobuf:"bytes,1,rep,name=errors" json:"errors,omitempty"`
}

func (x *CellErrorsArchive) Reset() {
	*x = CellErrorsArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellErrorsArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellErrorsArchive) ProtoMessage() {}

func (x *CellErrorsArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellErrorsArchive.ProtoReflect.Descriptor instead.
func (*CellErrorsArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{39}
}

func (x *CellErrorsArchive) GetErrors() []*CellErrorsArchive_ErrorForCell {
	if x != nil {
		return x.Errors
	}
	return nil
}

type UuidReferencesArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableRefs     []*UuidReferencesArchive_TableRef         `protobuf:"bytes,1,rep,name=table_refs,json=tableRefs" json:"table_refs,omitempty"`
	TableUuidRefs []*UuidReferencesArchive_TableWithUuidRef `protobuf:"bytes,2,rep,name=table_uuid_refs,json=tableUuidRefs" json:"table_uuid_refs,omitempty"`
}

func (x *UuidReferencesArchive) Reset() {
	*x = UuidReferencesArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UuidReferencesArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UuidReferencesArchive) ProtoMessage() {}

func (x *UuidReferencesArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UuidReferencesArchive.ProtoReflect.Descriptor instead.
func (*UuidReferencesArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{40}
}

func (x *UuidReferencesArchive) GetTableRefs() []*UuidReferencesArchive_TableRef {
	if x != nil {
		return x.TableRefs
	}
	return nil
}

func (x *UuidReferencesArchive) GetTableUuidRefs() []*UuidReferencesArchive_TableWithUuidRef {
	if x != nil {
		return x.TableUuidRefs
	}
	return nil
}

type FormulaOwnerDependenciesArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FormulaOwnerUid            *UUID                                  `protobuf:"bytes,1,req,name=formula_owner_uid,json=formulaOwnerUid" json:"formula_owner_uid,omitempty"`
	InternalFormulaOwnerId     *uint32                                `protobuf:"varint,2,req,name=internal_formula_owner_id,json=internalFormulaOwnerId" json:"internal_formula_owner_id,omitempty"`
	OwnerKind                  *uint32                                `protobuf:"varint,3,opt,name=owner_kind,json=ownerKind,def=0" json:"owner_kind,omitempty"`
	CellDependencies           *CellDependenciesExpandedArchive       `protobuf:"bytes,4,opt,name=cell_dependencies,json=cellDependencies" json:"cell_dependencies,omitempty"`
	RangeDependencies          *RangeDependenciesArchive              `protobuf:"bytes,5,opt,name=range_dependencies,json=rangeDependencies" json:"range_dependencies,omitempty"`
	VolatileDependencies       *VolatileDependenciesExpandedArchive   `protobuf:"bytes,6,opt,name=volatile_dependencies,json=volatileDependencies" json:"volatile_dependencies,omitempty"`
	SpanningColumnDependencies *SpanningDependenciesExpandedArchive   `protobuf:"bytes,7,opt,name=spanning_column_dependencies,json=spanningColumnDependencies" json:"spanning_column_dependencies,omitempty"`
	SpanningRowDependencies    *SpanningDependenciesExpandedArchive   `protobuf:"bytes,8,opt,name=spanning_row_dependencies,json=spanningRowDependencies" json:"spanning_row_dependencies,omitempty"`
	WholeOwnerDependencies     *WholeOwnerDependenciesExpandedArchive `protobuf:"bytes,9,opt,name=whole_owner_dependencies,json=wholeOwnerDependencies" json:"whole_owner_dependencies,omitempty"`
	CellErrors                 *CellErrorsArchive                     `protobuf:"bytes,10,opt,name=cell_errors,json=cellErrors" json:"cell_errors,omitempty"`
	FormulaOwner               *Reference                             `protobuf:"bytes,11,opt,name=formula_owner,json=formulaOwner" json:"formula_owner,omitempty"`
	BaseOwnerUid               *UUID                                  `protobuf:"bytes,12,opt,name=base_owner_uid,json=baseOwnerUid" json:"base_owner_uid,omitempty"`
	TiledCellDependencies      *CellDependenciesTiledArchive          `protobuf:"bytes,13,opt,name=tiled_cell_dependencies,json=tiledCellDependencies" json:"tiled_cell_dependencies,omitempty"`
	UuidReferences             *UuidReferencesArchive                 `protobuf:"bytes,14,opt,name=uuid_references,json=uuidReferences" json:"uuid_references,omitempty"`
	TiledRangeDependencies     *RangeDependenciesTiledArchive         `protobuf:"bytes,15,opt,name=tiled_range_dependencies,json=tiledRangeDependencies" json:"tiled_range_dependencies,omitempty"`
}

// Default values for FormulaOwnerDependenciesArchive fields.
const (
	Default_FormulaOwnerDependenciesArchive_OwnerKind = uint32(0)
)

func (x *FormulaOwnerDependenciesArchive) Reset() {
	*x = FormulaOwnerDependenciesArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormulaOwnerDependenciesArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormulaOwnerDependenciesArchive) ProtoMessage() {}

func (x *FormulaOwnerDependenciesArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormulaOwnerDependenciesArchive.ProtoReflect.Descriptor instead.
func (*FormulaOwnerDependenciesArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{41}
}

func (x *FormulaOwnerDependenciesArchive) GetFormulaOwnerUid() *UUID {
	if x != nil {
		return x.FormulaOwnerUid
	}
	return nil
}

func (x *FormulaOwnerDependenciesArchive) GetInternalFormulaOwnerId() uint32 {
	if x != nil && x.InternalFormulaOwnerId != nil {
		return *x.InternalFormulaOwnerId
	}
	return 0
}

func (x *FormulaOwnerDependenciesArchive) GetOwnerKind() uint32 {
	if x != nil && x.OwnerKind != nil {
		return *x.OwnerKind
	}
	return Default_FormulaOwnerDependenciesArchive_OwnerKind
}

func (x *FormulaOwnerDependenciesArchive) GetCellDependencies() *CellDependenciesExpandedArchive {
	if x != nil {
		return x.CellDependencies
	}
	return nil
}

func (x *FormulaOwnerDependenciesArchive) GetRangeDependencies() *RangeDependenciesArchive {
	if x != nil {
		return x.RangeDependencies
	}
	return nil
}

func (x *FormulaOwnerDependenciesArchive) GetVolatileDependencies() *VolatileDependenciesExpandedArchive {
	if x != nil {
		return x.VolatileDependencies
	}
	return nil
}

func (x *FormulaOwnerDependenciesArchive) GetSpanningColumnDependencies() *SpanningDependenciesExpandedArchive {
	if x != nil {
		return x.SpanningColumnDependencies
	}
	return nil
}

func (x *FormulaOwnerDependenciesArchive) GetSpanningRowDependencies() *SpanningDependenciesExpandedArchive {
	if x != nil {
		return x.SpanningRowDependencies
	}
	return nil
}

func (x *FormulaOwnerDependenciesArchive) GetWholeOwnerDependencies() *WholeOwnerDependenciesExpandedArchive {
	if x != nil {
		return x.WholeOwnerDependencies
	}
	return nil
}

func (x *FormulaOwnerDependenciesArchive) GetCellErrors() *CellErrorsArchive {
	if x != nil {
		return x.CellErrors
	}
	return nil
}

func (x *FormulaOwnerDependenciesArchive) GetFormulaOwner() *Reference {
	if x != nil {
		return x.FormulaOwner
	}
	return nil
}

func (x *FormulaOwnerDependenciesArchive) GetBaseOwnerUid() *UUID {
	if x != nil {
		return x.BaseOwnerUid
	}
	return nil
}

func (x *FormulaOwnerDependenciesArchive) GetTiledCellDependencies() *CellDependenciesTiledArchive {
	if x != nil {
		return x.TiledCellDependencies
	}
	return nil
}

func (x *FormulaOwnerDependenciesArchive) GetUuidReferences() *UuidReferencesArchive {
	if x != nil {
		return x.UuidReferences
	}
	return nil
}

func (x *FormulaOwnerDependenciesArchive) GetTiledRangeDependencies() *RangeDependenciesTiledArchive {
	if x != nil {
		return x.TiledRangeDependencies
	}
	return nil
}

type FormulaOwnerInfoArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FormulaOwnerId             *CFUUIDArchive                 `protobuf:"bytes,1,req,name=formula_owner_id,json=formulaOwnerId" json:"formula_owner_id,omitempty"`
	CellDependencies           *CellDependenciesArchive       `protobuf:"bytes,2,opt,name=cell_dependencies,json=cellDependencies" json:"cell_dependencies,omitempty"`
	RangeDependencies          *RangeDependenciesArchive      `protobuf:"bytes,3,opt,name=range_dependencies,json=rangeDependencies" json:"range_dependencies,omitempty"`
	VolatileDependencies       *VolatileDependenciesArchive   `protobuf:"bytes,4,opt,name=volatile_dependencies,json=volatileDependencies" json:"volatile_dependencies,omitempty"`
	SpanningColumnDependencies *SpanningDependenciesArchive   `protobuf:"bytes,5,opt,name=spanning_column_dependencies,json=spanningColumnDependencies" json:"spanning_column_dependencies,omitempty"`
	SpanningRowDependencies    *SpanningDependenciesArchive   `protobuf:"bytes,6,opt,name=spanning_row_dependencies,json=spanningRowDependencies" json:"spanning_row_dependencies,omitempty"`
	WholeOwnerDependencies     *WholeOwnerDependenciesArchive `protobuf:"bytes,8,opt,name=whole_owner_dependencies,json=wholeOwnerDependencies" json:"whole_owner_dependencies,omitempty"`
	CellErrors                 *CellErrorsArchive             `protobuf:"bytes,9,opt,name=cell_errors,json=cellErrors" json:"cell_errors,omitempty"`
	FormulaOwner               *Reference                     `protobuf:"bytes,7,opt,name=formula_owner,json=formulaOwner" json:"formula_owner,omitempty"`
}

func (x *FormulaOwnerInfoArchive) Reset() {
	*x = FormulaOwnerInfoArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormulaOwnerInfoArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormulaOwnerInfoArchive) ProtoMessage() {}

func (x *FormulaOwnerInfoArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormulaOwnerInfoArchive.ProtoReflect.Descriptor instead.
func (*FormulaOwnerInfoArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{42}
}

func (x *FormulaOwnerInfoArchive) GetFormulaOwnerId() *CFUUIDArchive {
	if x != nil {
		return x.FormulaOwnerId
	}
	return nil
}

func (x *FormulaOwnerInfoArchive) GetCellDependencies() *CellDependenciesArchive {
	if x != nil {
		return x.CellDependencies
	}
	return nil
}

func (x *FormulaOwnerInfoArchive) GetRangeDependencies() *RangeDependenciesArchive {
	if x != nil {
		return x.RangeDependencies
	}
	return nil
}

func (x *FormulaOwnerInfoArchive) GetVolatileDependencies() *VolatileDependenciesArchive {
	if x != nil {
		return x.VolatileDependencies
	}
	return nil
}

func (x *FormulaOwnerInfoArchive) GetSpanningColumnDependencies() *SpanningDependenciesArchive {
	if x != nil {
		return x.SpanningColumnDependencies
	}
	return nil
}

func (x *FormulaOwnerInfoArchive) GetSpanningRowDependencies() *SpanningDependenciesArchive {
	if x != nil {
		return x.SpanningRowDependencies
	}
	return nil
}

func (x *FormulaOwnerInfoArchive) GetWholeOwnerDependencies() *WholeOwnerDependenciesArchive {
	if x != nil {
		return x.WholeOwnerDependencies
	}
	return nil
}

func (x *FormulaOwnerInfoArchive) GetCellErrors() *CellErrorsArchive {
	if x != nil {
		return x.CellErrors
	}
	return nil
}

func (x *FormulaOwnerInfoArchive) GetFormulaOwner() *Reference {
	if x != nil {
		return x.FormulaOwner
	}
	return nil
}

type SubFormulaOwnerIDArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseOwnerUid *UUID   `protobuf:"bytes,1,req,name=base_owner_uid,json=baseOwnerUid" json:"base_owner_uid,omitempty"`
	OwnerKind    *uint32 `protobuf:"varint,2,req,name=owner_kind,json=ownerKind" json:"owner_kind,omitempty"`
}

func (x *SubFormulaOwnerIDArchive) Reset() {
	*x = SubFormulaOwnerIDArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubFormulaOwnerIDArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubFormulaOwnerIDArchive) ProtoMessage() {}

func (x *SubFormulaOwnerIDArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubFormulaOwnerIDArchive.ProtoReflect.Descriptor instead.
func (*SubFormulaOwnerIDArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{43}
}

func (x *SubFormulaOwnerIDArchive) GetBaseOwnerUid() *UUID {
	if x != nil {
		return x.BaseOwnerUid
	}
	return nil
}

func (x *SubFormulaOwnerIDArchive) GetOwnerKind() uint32 {
	if x != nil && x.OwnerKind != nil {
		return *x.OwnerKind
	}
	return 0
}

type OwnerIDMapArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapEntry                    []*OwnerIDMapArchive_OwnerIDMapArchiveEntry `protobuf:"bytes,1,rep,name=map_entry,json=mapEntry" json:"map_entry,omitempty"`
	UnregisteredInternalOwnerId []uint32                                    `protobuf:"varint,2,rep,name=unregistered_internal_owner_id,json=unregisteredInternalOwnerId" json:"unregistered_internal_owner_id,omitempty"`
}

func (x *OwnerIDMapArchive) Reset() {
	*x = OwnerIDMapArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OwnerIDMapArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OwnerIDMapArchive) ProtoMessage() {}

func (x *OwnerIDMapArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OwnerIDMapArchive.ProtoReflect.Descriptor instead.
func (*OwnerIDMapArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{44}
}

func (x *OwnerIDMapArchive) GetMapEntry() []*OwnerIDMapArchive_OwnerIDMapArchiveEntry {
	if x != nil {
		return x.MapEntry
	}
	return nil
}

func (x *OwnerIDMapArchive) GetUnregisteredInternalOwnerId() []uint32 {
	if x != nil {
		return x.UnregisteredInternalOwnerId
	}
	return nil
}

type UidLookupListArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuids []*UUID `protobuf:"bytes,1,rep,name=uuids" json:"uuids,omitempty"`
}

func (x *UidLookupListArchive) Reset() {
	*x = UidLookupListArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UidLookupListArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UidLookupListArchive) ProtoMessage() {}

func (x *UidLookupListArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UidLookupListArchive.ProtoReflect.Descriptor instead.
func (*UidLookupListArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{45}
}

func (x *UidLookupListArchive) GetUuids() []*UUID {
	if x != nil {
		return x.Uuids
	}
	return nil
}

type DependencyTrackerArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FormulaOwnerInfo []*FormulaOwnerInfoArchive `protobuf:"bytes,1,rep,name=formula_owner_info,json=formulaOwnerInfo" json:"formula_owner_info,omitempty"`
	// Deprecated: Do not use.
	DirtyLeaf  []*CellReferenceArchive `protobuf:"bytes,2,rep,name=dirty_leaf,json=dirtyLeaf" json:"dirty_leaf,omitempty"`
	OwnerIdMap *OwnerIDMapArchive      `protobuf:"bytes,3,opt,name=owner_id_map,json=ownerIdMap" json:"owner_id_map,omitempty"`
	// Deprecated: Do not use.
	InternalDirtyLeaf        []*InternalCellReferenceArchive `protobuf:"bytes,4,rep,name=internal_dirty_leaf,json=internalDirtyLeaf" json:"internal_dirty_leaf,omitempty"`
	NumberOfFormulas         *uint64                         `protobuf:"varint,5,opt,name=number_of_formulas,json=numberOfFormulas" json:"number_of_formulas,omitempty"`
	FormulaOwnerDependencies []*Reference                    `protobuf:"bytes,6,rep,name=formula_owner_dependencies,json=formulaOwnerDependencies" json:"formula_owner_dependencies,omitempty"`
}

func (x *DependencyTrackerArchive) Reset() {
	*x = DependencyTrackerArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DependencyTrackerArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DependencyTrackerArchive) ProtoMessage() {}

func (x *DependencyTrackerArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DependencyTrackerArchive.ProtoReflect.Descriptor instead.
func (*DependencyTrackerArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{46}
}

func (x *DependencyTrackerArchive) GetFormulaOwnerInfo() []*FormulaOwnerInfoArchive {
	if x != nil {
		return x.FormulaOwnerInfo
	}
	return nil
}

// Deprecated: Do not use.
func (x *DependencyTrackerArchive) GetDirtyLeaf() []*CellReferenceArchive {
	if x != nil {
		return x.DirtyLeaf
	}
	return nil
}

func (x *DependencyTrackerArchive) GetOwnerIdMap() *OwnerIDMapArchive {
	if x != nil {
		return x.OwnerIdMap
	}
	return nil
}

// Deprecated: Do not use.
func (x *DependencyTrackerArchive) GetInternalDirtyLeaf() []*InternalCellReferenceArchive {
	if x != nil {
		return x.InternalDirtyLeaf
	}
	return nil
}

func (x *DependencyTrackerArchive) GetNumberOfFormulas() uint64 {
	if x != nil && x.NumberOfFormulas != nil {
		return *x.NumberOfFormulas
	}
	return 0
}

func (x *DependencyTrackerArchive) GetFormulaOwnerDependencies() []*Reference {
	if x != nil {
		return x.FormulaOwnerDependencies
	}
	return nil
}

type RemoteDataSpecifierArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FunctionIndex *uint32  `protobuf:"varint,1,req,name=function_index,json=functionIndex" json:"function_index,omitempty"`
	Symbol        *string  `protobuf:"bytes,2,req,name=symbol" json:"symbol,omitempty"`
	Attribute     *uint32  `protobuf:"varint,3,req,name=attribute" json:"attribute,omitempty"`
	Date          *float64 `protobuf:"fixed64,4,opt,name=date" json:"date,omitempty"`
}

func (x *RemoteDataSpecifierArchive) Reset() {
	*x = RemoteDataSpecifierArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteDataSpecifierArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteDataSpecifierArchive) ProtoMessage() {}

func (x *RemoteDataSpecifierArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteDataSpecifierArchive.ProtoReflect.Descriptor instead.
func (*RemoteDataSpecifierArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{47}
}

func (x *RemoteDataSpecifierArchive) GetFunctionIndex() uint32 {
	if x != nil && x.FunctionIndex != nil {
		return *x.FunctionIndex
	}
	return 0
}

func (x *RemoteDataSpecifierArchive) GetSymbol() string {
	if x != nil && x.Symbol != nil {
		return *x.Symbol
	}
	return ""
}

func (x *RemoteDataSpecifierArchive) GetAttribute() uint32 {
	if x != nil && x.Attribute != nil {
		return *x.Attribute
	}
	return 0
}

func (x *RemoteDataSpecifierArchive) GetDate() float64 {
	if x != nil && x.Date != nil {
		return *x.Date
	}
	return 0
}

type RemoteDataValueMapArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entry []*RemoteDataValueMapArchive_RemoteDataMapEntry `protobuf:"bytes,1,rep,name=entry" json:"entry,omitempty"`
}

func (x *RemoteDataValueMapArchive) Reset() {
	*x = RemoteDataValueMapArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteDataValueMapArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteDataValueMapArchive) ProtoMessage() {}

func (x *RemoteDataValueMapArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteDataValueMapArchive.ProtoReflect.Descriptor instead.
func (*RemoteDataValueMapArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{48}
}

func (x *RemoteDataValueMapArchive) GetEntry() []*RemoteDataValueMapArchive_RemoteDataMapEntry {
	if x != nil {
		return x.Entry
	}
	return nil
}

type StockArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol    *string                        `protobuf:"bytes,1,req,name=symbol" json:"symbol,omitempty"`
	Date      *float64                       `protobuf:"fixed64,2,opt,name=date" json:"date,omitempty"`
	Attribute []*StockArchive_AttributeEntry `protobuf:"bytes,3,rep,name=attribute" json:"attribute,omitempty"`
}

func (x *StockArchive) Reset() {
	*x = StockArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockArchive) ProtoMessage() {}

func (x *StockArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockArchive.ProtoReflect.Descriptor instead.
func (*StockArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{49}
}

func (x *StockArchive) GetSymbol() string {
	if x != nil && x.Symbol != nil {
		return *x.Symbol
	}
	return ""
}

func (x *StockArchive) GetDate() float64 {
	if x != nil && x.Date != nil {
		return *x.Date
	}
	return 0
}

func (x *StockArchive) GetAttribute() []*StockArchive_AttributeEntry {
	if x != nil {
		return x.Attribute
	}
	return nil
}

type RemoteDataStoreArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValueMap *RemoteDataValueMapArchive `protobuf:"bytes,1,req,name=value_map,json=valueMap" json:"value_map,omitempty"`
	Stocks   []*StockArchive            `protobuf:"bytes,2,rep,name=stocks" json:"stocks,omitempty"`
}

func (x *RemoteDataStoreArchive) Reset() {
	*x = RemoteDataStoreArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteDataStoreArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteDataStoreArchive) ProtoMessage() {}

func (x *RemoteDataStoreArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteDataStoreArchive.ProtoReflect.Descriptor instead.
func (*RemoteDataStoreArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{50}
}

func (x *RemoteDataStoreArchive) GetValueMap() *RemoteDataValueMapArchive {
	if x != nil {
		return x.ValueMap
	}
	return nil
}

func (x *RemoteDataStoreArchive) GetStocks() []*StockArchive {
	if x != nil {
		return x.Stocks
	}
	return nil
}

type NameTrackedReferencePair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name               *string    `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	TrackedReference   *Reference `protobuf:"bytes,2,opt,name=tracked_reference,json=trackedReference" json:"tracked_reference,omitempty"`
	TrackedReferenceId *uint32    `protobuf:"varint,3,opt,name=tracked_reference_id,json=trackedReferenceId" json:"tracked_reference_id,omitempty"`
}

func (x *NameTrackedReferencePair) Reset() {
	*x = NameTrackedReferencePair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NameTrackedReferencePair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NameTrackedReferencePair) ProtoMessage() {}

func (x *NameTrackedReferencePair) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NameTrackedReferencePair.ProtoReflect.Descriptor instead.
func (*NameTrackedReferencePair) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{51}
}

func (x *NameTrackedReferencePair) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *NameTrackedReferencePair) GetTrackedReference() *Reference {
	if x != nil {
		return x.TrackedReference
	}
	return nil
}

func (x *NameTrackedReferencePair) GetTrackedReferenceId() uint32 {
	if x != nil && x.TrackedReferenceId != nil {
		return *x.TrackedReferenceId
	}
	return 0
}

type NamesByTrackedReferenceArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId                  *CFUUIDArchive              `protobuf:"bytes,1,req,name=table_id,json=tableId" json:"table_id,omitempty"`
	NameTrackedReferencePair []*NameTrackedReferencePair `protobuf:"bytes,2,rep,name=name_tracked_reference_pair,json=nameTrackedReferencePair" json:"name_tracked_reference_pair,omitempty"`
}

func (x *NamesByTrackedReferenceArchive) Reset() {
	*x = NamesByTrackedReferenceArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamesByTrackedReferenceArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamesByTrackedReferenceArchive) ProtoMessage() {}

func (x *NamesByTrackedReferenceArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamesByTrackedReferenceArchive.ProtoReflect.Descriptor instead.
func (*NamesByTrackedReferenceArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{52}
}

func (x *NamesByTrackedReferenceArchive) GetTableId() *CFUUIDArchive {
	if x != nil {
		return x.TableId
	}
	return nil
}

func (x *NamesByTrackedReferenceArchive) GetNameTrackedReferencePair() []*NameTrackedReferencePair {
	if x != nil {
		return x.NameTrackedReferencePair
	}
	return nil
}

type NamedReferenceManagerArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReferenceTracker *Reference `protobuf:"bytes,1,req,name=reference_tracker,json=referenceTracker" json:"reference_tracker,omitempty"`
	// Deprecated: Do not use.
	NamesByTrackedReferenceByTable []*NamesByTrackedReferenceArchive `protobuf:"bytes,2,rep,name=names_by_tracked_reference_by_table,json=namesByTrackedReferenceByTable" json:"names_by_tracked_reference_by_table,omitempty"`
}

func (x *NamedReferenceManagerArchive) Reset() {
	*x = NamedReferenceManagerArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamedReferenceManagerArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamedReferenceManagerArchive) ProtoMessage() {}

func (x *NamedReferenceManagerArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamedReferenceManagerArchive.ProtoReflect.Descriptor instead.
func (*NamedReferenceManagerArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{53}
}

func (x *NamedReferenceManagerArchive) GetReferenceTracker() *Reference {
	if x != nil {
		return x.ReferenceTracker
	}
	return nil
}

// Deprecated: Do not use.
func (x *NamedReferenceManagerArchive) GetNamesByTrackedReferenceByTable() []*NamesByTrackedReferenceArchive {
	if x != nil {
		return x.NamesByTrackedReferenceByTable
	}
	return nil
}

type UuidSetStoreArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UuidSet []*UuidSetStoreArchive_UuidSet `protobuf:"bytes,1,rep,name=uuidSet" json:"uuidSet,omitempty"`
}

func (x *UuidSetStoreArchive) Reset() {
	*x = UuidSetStoreArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UuidSetStoreArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UuidSetStoreArchive) ProtoMessage() {}

func (x *UuidSetStoreArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UuidSetStoreArchive.ProtoReflect.Descriptor instead.
func (*UuidSetStoreArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{54}
}

func (x *UuidSetStoreArchive) GetUuidSet() []*UuidSetStoreArchive_UuidSet {
	if x != nil {
		return x.UuidSet
	}
	return nil
}

type UuidReferenceMapArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellRefsForUuid []*UuidReferenceMapArchive_CellRefsForUuid `protobuf:"bytes,1,rep,name=cell_refs_for_uuid,json=cellRefsForUuid" json:"cell_refs_for_uuid,omitempty"`
}

func (x *UuidReferenceMapArchive) Reset() {
	*x = UuidReferenceMapArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UuidReferenceMapArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UuidReferenceMapArchive) ProtoMessage() {}

func (x *UuidReferenceMapArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UuidReferenceMapArchive.ProtoReflect.Descriptor instead.
func (*UuidReferenceMapArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{55}
}

func (x *UuidReferenceMapArchive) GetCellRefsForUuid() []*UuidReferenceMapArchive_CellRefsForUuid {
	if x != nil {
		return x.CellRefsForUuid
	}
	return nil
}

type GroupByNodeMapArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefsForGroupBy []*GroupByNodeMapArchive_GroupNodesForGroupBy `protobuf:"bytes,1,rep,name=refs_for_group_by,json=refsForGroupBy" json:"refs_for_group_by,omitempty"`
}

func (x *GroupByNodeMapArchive) Reset() {
	*x = GroupByNodeMapArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupByNodeMapArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupByNodeMapArchive) ProtoMessage() {}

func (x *GroupByNodeMapArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupByNodeMapArchive.ProtoReflect.Descriptor instead.
func (*GroupByNodeMapArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{56}
}

func (x *GroupByNodeMapArchive) GetRefsForGroupBy() []*GroupByNodeMapArchive_GroupNodesForGroupBy {
	if x != nil {
		return x.RefsForGroupBy
	}
	return nil
}

type CalculationEngineArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseDate_1904                *bool                                         `protobuf:"varint,1,opt,name=base_date_1904,json=baseDate1904" json:"base_date_1904,omitempty"`
	DependencyTracker            *DependencyTrackerArchive                     `protobuf:"bytes,2,req,name=dependency_tracker,json=dependencyTracker" json:"dependency_tracker,omitempty"`
	NamedReferenceManager        *Reference                                    `protobuf:"bytes,3,opt,name=named_reference_manager,json=namedReferenceManager" json:"named_reference_manager,omitempty"`
	ExcelImportDateMode          *CalculationEngineArchive_ExcelImportDateMode `protobuf:"varint,4,opt,name=excel_import_date_mode,json=excelImportDateMode,enum=TSCE.CalculationEngineArchive_ExcelImportDateMode,def=1" json:"excel_import_date_mode,omitempty"`
	SavedLocaleIdentifierFor_4_2 *string                                       `protobuf:"bytes,5,opt,name=saved_locale_identifier_for_4_2,json=savedLocaleIdentifierFor42" json:"saved_locale_identifier_for_4_2,omitempty"`
	DocumentRandomSeed           *uint64                                       `protobuf:"varint,6,opt,name=document_random_seed,json=documentRandomSeed" json:"document_random_seed,omitempty"`
	UuidReferenceMap             *UuidReferenceMapArchive                      `protobuf:"bytes,7,opt,name=uuid_reference_map,json=uuidReferenceMap" json:"uuid_reference_map,omitempty"`
	DocumentTimestamp            *float64                                      `protobuf:"fixed64,9,opt,name=document_timestamp,json=documentTimestamp" json:"document_timestamp,omitempty"`
	DocumentTimezone             *string                                       `protobuf:"bytes,10,opt,name=document_timezone,json=documentTimezone" json:"document_timezone,omitempty"`
	TableUidHistory              *RewriteTableUIDInfoArchive                   `protobuf:"bytes,11,opt,name=table_uid_history,json=tableUidHistory" json:"table_uid_history,omitempty"`
	RemoteDataStore              *Reference                                    `protobuf:"bytes,12,opt,name=remote_data_store,json=remoteDataStore" json:"remote_data_store,omitempty"`
	GroupNodeMap                 *GroupByNodeMapArchive                        `protobuf:"bytes,13,opt,name=group_node_map,json=groupNodeMap" json:"group_node_map,omitempty"`
	HeaderNameManager            *Reference                                    `protobuf:"bytes,14,opt,name=header_name_manager,json=headerNameManager" json:"header_name_manager,omitempty"`
	RefsToDirty                  *Reference                                    `protobuf:"bytes,15,opt,name=refs_to_dirty,json=refsToDirty" json:"refs_to_dirty,omitempty"`
	SavedLocaleIdentifier        *string                                       `protobuf:"bytes,16,opt,name=saved_locale_identifier,json=savedLocaleIdentifier" json:"saved_locale_identifier,omitempty"`
	BeginTrackingNamesLegacyNrm  []*UUID                                       `protobuf:"bytes,17,rep,name=begin_tracking_names_legacy_nrm,json=beginTrackingNamesLegacyNrm" json:"begin_tracking_names_legacy_nrm,omitempty"`
	EndTrackingNamesLegacyNrm    []*UUID                                       `protobuf:"bytes,18,rep,name=end_tracking_names_legacy_nrm,json=endTrackingNamesLegacyNrm" json:"end_tracking_names_legacy_nrm,omitempty"`
}

// Default values for CalculationEngineArchive fields.
const (
	Default_CalculationEngineArchive_ExcelImportDateMode = CalculationEngineArchive_DATE_MODE_1900
)

func (x *CalculationEngineArchive) Reset() {
	*x = CalculationEngineArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculationEngineArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculationEngineArchive) ProtoMessage() {}

func (x *CalculationEngineArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculationEngineArchive.ProtoReflect.Descriptor instead.
func (*CalculationEngineArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{57}
}

func (x *CalculationEngineArchive) GetBaseDate_1904() bool {
	if x != nil && x.BaseDate_1904 != nil {
		return *x.BaseDate_1904
	}
	return false
}

func (x *CalculationEngineArchive) GetDependencyTracker() *DependencyTrackerArchive {
	if x != nil {
		return x.DependencyTracker
	}
	return nil
}

func (x *CalculationEngineArchive) GetNamedReferenceManager() *Reference {
	if x != nil {
		return x.NamedReferenceManager
	}
	return nil
}

func (x *CalculationEngineArchive) GetExcelImportDateMode() CalculationEngineArchive_ExcelImportDateMode {
	if x != nil && x.ExcelImportDateMode != nil {
		return *x.ExcelImportDateMode
	}
	return Default_CalculationEngineArchive_ExcelImportDateMode
}

func (x *CalculationEngineArchive) GetSavedLocaleIdentifierFor_4_2() string {
	if x != nil && x.SavedLocaleIdentifierFor_4_2 != nil {
		return *x.SavedLocaleIdentifierFor_4_2
	}
	return ""
}

func (x *CalculationEngineArchive) GetDocumentRandomSeed() uint64 {
	if x != nil && x.DocumentRandomSeed != nil {
		return *x.DocumentRandomSeed
	}
	return 0
}

func (x *CalculationEngineArchive) GetUuidReferenceMap() *UuidReferenceMapArchive {
	if x != nil {
		return x.UuidReferenceMap
	}
	return nil
}

func (x *CalculationEngineArchive) GetDocumentTimestamp() float64 {
	if x != nil && x.DocumentTimestamp != nil {
		return *x.DocumentTimestamp
	}
	return 0
}

func (x *CalculationEngineArchive) GetDocumentTimezone() string {
	if x != nil && x.DocumentTimezone != nil {
		return *x.DocumentTimezone
	}
	return ""
}

func (x *CalculationEngineArchive) GetTableUidHistory() *RewriteTableUIDInfoArchive {
	if x != nil {
		return x.TableUidHistory
	}
	return nil
}

func (x *CalculationEngineArchive) GetRemoteDataStore() *Reference {
	if x != nil {
		return x.RemoteDataStore
	}
	return nil
}

func (x *CalculationEngineArchive) GetGroupNodeMap() *GroupByNodeMapArchive {
	if x != nil {
		return x.GroupNodeMap
	}
	return nil
}

func (x *CalculationEngineArchive) GetHeaderNameManager() *Reference {
	if x != nil {
		return x.HeaderNameManager
	}
	return nil
}

func (x *CalculationEngineArchive) GetRefsToDirty() *Reference {
	if x != nil {
		return x.RefsToDirty
	}
	return nil
}

func (x *CalculationEngineArchive) GetSavedLocaleIdentifier() string {
	if x != nil && x.SavedLocaleIdentifier != nil {
		return *x.SavedLocaleIdentifier
	}
	return ""
}

func (x *CalculationEngineArchive) GetBeginTrackingNamesLegacyNrm() []*UUID {
	if x != nil {
		return x.BeginTrackingNamesLegacyNrm
	}
	return nil
}

func (x *CalculationEngineArchive) GetEndTrackingNamesLegacyNrm() []*UUID {
	if x != nil {
		return x.EndTrackingNamesLegacyNrm
	}
	return nil
}

type PreserveColumnRowFlagsArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeginRowIsAbsolute    *bool `protobuf:"varint,1,req,name=begin_row_is_absolute,json=beginRowIsAbsolute" json:"begin_row_is_absolute,omitempty"`
	BeginColumnIsAbsolute *bool `protobuf:"varint,2,req,name=begin_column_is_absolute,json=beginColumnIsAbsolute" json:"begin_column_is_absolute,omitempty"`
	EndRowIsAbsolute      *bool `protobuf:"varint,3,opt,name=end_row_is_absolute,json=endRowIsAbsolute" json:"end_row_is_absolute,omitempty"`
	EndColumnIsAbsolute   *bool `protobuf:"varint,4,opt,name=end_column_is_absolute,json=endColumnIsAbsolute" json:"end_column_is_absolute,omitempty"`
}

func (x *PreserveColumnRowFlagsArchive) Reset() {
	*x = PreserveColumnRowFlagsArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreserveColumnRowFlagsArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreserveColumnRowFlagsArchive) ProtoMessage() {}

func (x *PreserveColumnRowFlagsArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreserveColumnRowFlagsArchive.ProtoReflect.Descriptor instead.
func (*PreserveColumnRowFlagsArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{58}
}

func (x *PreserveColumnRowFlagsArchive) GetBeginRowIsAbsolute() bool {
	if x != nil && x.BeginRowIsAbsolute != nil {
		return *x.BeginRowIsAbsolute
	}
	return false
}

func (x *PreserveColumnRowFlagsArchive) GetBeginColumnIsAbsolute() bool {
	if x != nil && x.BeginColumnIsAbsolute != nil {
		return *x.BeginColumnIsAbsolute
	}
	return false
}

func (x *PreserveColumnRowFlagsArchive) GetEndRowIsAbsolute() bool {
	if x != nil && x.EndRowIsAbsolute != nil {
		return *x.EndRowIsAbsolute
	}
	return false
}

func (x *PreserveColumnRowFlagsArchive) GetEndColumnIsAbsolute() bool {
	if x != nil && x.EndColumnIsAbsolute != nil {
		return *x.EndColumnIsAbsolute
	}
	return false
}

type CategoryReferenceArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupByUid                 *UUID                                   `protobuf:"bytes,1,req,name=group_by_uid,json=groupByUid" json:"group_by_uid,omitempty"`
	ColumnUid                  *UUID                                   `protobuf:"bytes,2,req,name=column_uid,json=columnUid" json:"column_uid,omitempty"`
	AggregateType              *uint32                                 `protobuf:"varint,3,req,name=aggregate_type,json=aggregateType" json:"aggregate_type,omitempty"`
	GroupLevel                 *int32                                  `protobuf:"zigzag32,4,req,name=group_level,json=groupLevel" json:"group_level,omitempty"`
	GroupUids                  *CategoryReferenceArchive_CatRefUidList `protobuf:"bytes,6,opt,name=group_uids,json=groupUids" json:"group_uids,omitempty"`
	PreserveFlags              *PreserveColumnRowFlagsArchive          `protobuf:"bytes,7,opt,name=preserve_flags,json=preserveFlags" json:"preserve_flags,omitempty"`
	RelativeColumn             *int32                                  `protobuf:"varint,8,opt,name=relative_column,json=relativeColumn" json:"relative_column,omitempty"`
	RelativeGroupUid           *UUID                                   `protobuf:"bytes,9,opt,name=relative_group_uid,json=relativeGroupUid" json:"relative_group_uid,omitempty"`
	AbsoluteGroupUid           *UUID                                   `protobuf:"bytes,10,opt,name=absolute_group_uid,json=absoluteGroupUid" json:"absolute_group_uid,omitempty"`
	OptionRefersToPivotRows    *bool                                   `protobuf:"varint,11,opt,name=option_refers_to_pivot_rows,json=optionRefersToPivotRows" json:"option_refers_to_pivot_rows,omitempty"`
	OptionRefersToPivotColumns *bool                                   `protobuf:"varint,12,opt,name=option_refers_to_pivot_columns,json=optionRefersToPivotColumns" json:"option_refers_to_pivot_columns,omitempty"`
	AggIndexLevel              *uint32                                 `protobuf:"varint,13,opt,name=agg_index_level,json=aggIndexLevel" json:"agg_index_level,omitempty"`
	OptionShowAggregateName    *bool                                   `protobuf:"varint,14,opt,name=option_show_aggregate_name,json=optionShowAggregateName" json:"option_show_aggregate_name,omitempty"`
}

func (x *CategoryReferenceArchive) Reset() {
	*x = CategoryReferenceArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryReferenceArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryReferenceArchive) ProtoMessage() {}

func (x *CategoryReferenceArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryReferenceArchive.ProtoReflect.Descriptor instead.
func (*CategoryReferenceArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{59}
}

func (x *CategoryReferenceArchive) GetGroupByUid() *UUID {
	if x != nil {
		return x.GroupByUid
	}
	return nil
}

func (x *CategoryReferenceArchive) GetColumnUid() *UUID {
	if x != nil {
		return x.ColumnUid
	}
	return nil
}

func (x *CategoryReferenceArchive) GetAggregateType() uint32 {
	if x != nil && x.AggregateType != nil {
		return *x.AggregateType
	}
	return 0
}

func (x *CategoryReferenceArchive) GetGroupLevel() int32 {
	if x != nil && x.GroupLevel != nil {
		return *x.GroupLevel
	}
	return 0
}

func (x *CategoryReferenceArchive) GetGroupUids() *CategoryReferenceArchive_CatRefUidList {
	if x != nil {
		return x.GroupUids
	}
	return nil
}

func (x *CategoryReferenceArchive) GetPreserveFlags() *PreserveColumnRowFlagsArchive {
	if x != nil {
		return x.PreserveFlags
	}
	return nil
}

func (x *CategoryReferenceArchive) GetRelativeColumn() int32 {
	if x != nil && x.RelativeColumn != nil {
		return *x.RelativeColumn
	}
	return 0
}

func (x *CategoryReferenceArchive) GetRelativeGroupUid() *UUID {
	if x != nil {
		return x.RelativeGroupUid
	}
	return nil
}

func (x *CategoryReferenceArchive) GetAbsoluteGroupUid() *UUID {
	if x != nil {
		return x.AbsoluteGroupUid
	}
	return nil
}

func (x *CategoryReferenceArchive) GetOptionRefersToPivotRows() bool {
	if x != nil && x.OptionRefersToPivotRows != nil {
		return *x.OptionRefersToPivotRows
	}
	return false
}

func (x *CategoryReferenceArchive) GetOptionRefersToPivotColumns() bool {
	if x != nil && x.OptionRefersToPivotColumns != nil {
		return *x.OptionRefersToPivotColumns
	}
	return false
}

func (x *CategoryReferenceArchive) GetAggIndexLevel() uint32 {
	if x != nil && x.AggIndexLevel != nil {
		return *x.AggIndexLevel
	}
	return 0
}

func (x *CategoryReferenceArchive) GetOptionShowAggregateName() bool {
	if x != nil && x.OptionShowAggregateName != nil {
		return *x.OptionShowAggregateName
	}
	return false
}

type ASTNodeArrayArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ASTNode []*ASTNodeArrayArchive_ASTNodeArchive `protobuf:"bytes,1,rep,name=AST_node,json=ASTNode" json:"AST_node,omitempty"`
}

func (x *ASTNodeArrayArchive) Reset() {
	*x = ASTNodeArrayArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ASTNodeArrayArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ASTNodeArrayArchive) ProtoMessage() {}

func (x *ASTNodeArrayArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ASTNodeArrayArchive.ProtoReflect.Descriptor instead.
func (*ASTNodeArrayArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{60}
}

func (x *ASTNodeArrayArchive) GetASTNode() []*ASTNodeArrayArchive_ASTNodeArchive {
	if x != nil {
		return x.ASTNode
	}
	return nil
}

type FormulaTranslationFlagsArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExcelImportTranslation                 *bool `protobuf:"varint,1,opt,name=excel_import_translation,json=excelImportTranslation,def=0" json:"excel_import_translation,omitempty"`
	NumberToDateCoercionRemovalTranslation *bool `protobuf:"varint,2,opt,name=number_to_date_coercion_removal_translation,json=numberToDateCoercionRemovalTranslation,def=0" json:"number_to_date_coercion_removal_translation,omitempty"`
	ContainsUidFormReferences              *bool `protobuf:"varint,3,opt,name=contains_uid_form_references,json=containsUidFormReferences,def=0" json:"contains_uid_form_references,omitempty"`
	ContainsFrozenReferences               *bool `protobuf:"varint,4,opt,name=contains_frozen_references,json=containsFrozenReferences,def=0" json:"contains_frozen_references,omitempty"`
	ReturnsPercentFormatted                *bool `protobuf:"varint,5,opt,name=returns_percent_formatted,json=returnsPercentFormatted,def=0" json:"returns_percent_formatted,omitempty"`
}

// Default values for FormulaTranslationFlagsArchive fields.
const (
	Default_FormulaTranslationFlagsArchive_ExcelImportTranslation                 = bool(false)
	Default_FormulaTranslationFlagsArchive_NumberToDateCoercionRemovalTranslation = bool(false)
	Default_FormulaTranslationFlagsArchive_ContainsUidFormReferences              = bool(false)
	Default_FormulaTranslationFlagsArchive_ContainsFrozenReferences               = bool(false)
	Default_FormulaTranslationFlagsArchive_ReturnsPercentFormatted                = bool(false)
)

func (x *FormulaTranslationFlagsArchive) Reset() {
	*x = FormulaTranslationFlagsArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormulaTranslationFlagsArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormulaTranslationFlagsArchive) ProtoMessage() {}

func (x *FormulaTranslationFlagsArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormulaTranslationFlagsArchive.ProtoReflect.Descriptor instead.
func (*FormulaTranslationFlagsArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{61}
}

func (x *FormulaTranslationFlagsArchive) GetExcelImportTranslation() bool {
	if x != nil && x.ExcelImportTranslation != nil {
		return *x.ExcelImportTranslation
	}
	return Default_FormulaTranslationFlagsArchive_ExcelImportTranslation
}

func (x *FormulaTranslationFlagsArchive) GetNumberToDateCoercionRemovalTranslation() bool {
	if x != nil && x.NumberToDateCoercionRemovalTranslation != nil {
		return *x.NumberToDateCoercionRemovalTranslation
	}
	return Default_FormulaTranslationFlagsArchive_NumberToDateCoercionRemovalTranslation
}

func (x *FormulaTranslationFlagsArchive) GetContainsUidFormReferences() bool {
	if x != nil && x.ContainsUidFormReferences != nil {
		return *x.ContainsUidFormReferences
	}
	return Default_FormulaTranslationFlagsArchive_ContainsUidFormReferences
}

func (x *FormulaTranslationFlagsArchive) GetContainsFrozenReferences() bool {
	if x != nil && x.ContainsFrozenReferences != nil {
		return *x.ContainsFrozenReferences
	}
	return Default_FormulaTranslationFlagsArchive_ContainsFrozenReferences
}

func (x *FormulaTranslationFlagsArchive) GetReturnsPercentFormatted() bool {
	if x != nil && x.ReturnsPercentFormatted != nil {
		return *x.ReturnsPercentFormatted
	}
	return Default_FormulaTranslationFlagsArchive_ReturnsPercentFormatted
}

type FormulaArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ASTNodeArray         *ASTNodeArrayArchive            `protobuf:"bytes,1,req,name=AST_node_array,json=ASTNodeArray" json:"AST_node_array,omitempty"`
	HostColumn           *uint32                         `protobuf:"varint,2,opt,name=host_column,json=hostColumn" json:"host_column,omitempty"`
	HostRow              *uint32                         `protobuf:"varint,3,opt,name=host_row,json=hostRow" json:"host_row,omitempty"`
	HostColumnIsNegative *bool                           `protobuf:"varint,4,opt,name=host_column_is_negative,json=hostColumnIsNegative,def=0" json:"host_column_is_negative,omitempty"`
	HostRowIsNegative    *bool                           `protobuf:"varint,5,opt,name=host_row_is_negative,json=hostRowIsNegative,def=0" json:"host_row_is_negative,omitempty"`
	TranslationFlags     *FormulaTranslationFlagsArchive `protobuf:"bytes,6,opt,name=translation_flags,json=translationFlags" json:"translation_flags,omitempty"`
	HostTableUid         *UUID                           `protobuf:"bytes,7,opt,name=host_table_uid,json=hostTableUid" json:"host_table_uid,omitempty"`
	HostColumnUid        *UUID                           `protobuf:"bytes,8,opt,name=host_column_uid,json=hostColumnUid" json:"host_column_uid,omitempty"`
	HostRowUid           *UUID                           `protobuf:"bytes,9,opt,name=host_row_uid,json=hostRowUid" json:"host_row_uid,omitempty"`
}

// Default values for FormulaArchive fields.
const (
	Default_FormulaArchive_HostColumnIsNegative = bool(false)
	Default_FormulaArchive_HostRowIsNegative    = bool(false)
)

func (x *FormulaArchive) Reset() {
	*x = FormulaArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormulaArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormulaArchive) ProtoMessage() {}

func (x *FormulaArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormulaArchive.ProtoReflect.Descriptor instead.
func (*FormulaArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{62}
}

func (x *FormulaArchive) GetASTNodeArray() *ASTNodeArrayArchive {
	if x != nil {
		return x.ASTNodeArray
	}
	return nil
}

func (x *FormulaArchive) GetHostColumn() uint32 {
	if x != nil && x.HostColumn != nil {
		return *x.HostColumn
	}
	return 0
}

func (x *FormulaArchive) GetHostRow() uint32 {
	if x != nil && x.HostRow != nil {
		return *x.HostRow
	}
	return 0
}

func (x *FormulaArchive) GetHostColumnIsNegative() bool {
	if x != nil && x.HostColumnIsNegative != nil {
		return *x.HostColumnIsNegative
	}
	return Default_FormulaArchive_HostColumnIsNegative
}

func (x *FormulaArchive) GetHostRowIsNegative() bool {
	if x != nil && x.HostRowIsNegative != nil {
		return *x.HostRowIsNegative
	}
	return Default_FormulaArchive_HostRowIsNegative
}

func (x *FormulaArchive) GetTranslationFlags() *FormulaTranslationFlagsArchive {
	if x != nil {
		return x.TranslationFlags
	}
	return nil
}

func (x *FormulaArchive) GetHostTableUid() *UUID {
	if x != nil {
		return x.HostTableUid
	}
	return nil
}

func (x *FormulaArchive) GetHostColumnUid() *UUID {
	if x != nil {
		return x.HostColumnUid
	}
	return nil
}

func (x *FormulaArchive) GetHostRowUid() *UUID {
	if x != nil {
		return x.HostRowUid
	}
	return nil
}

type FunctorArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Formula *FormulaArchive `protobuf:"bytes,1,req,name=formula" json:"formula,omitempty"`
	NumArgs *uint32         `protobuf:"varint,2,req,name=num_args,json=numArgs" json:"num_args,omitempty"`
}

func (x *FunctorArchive) Reset() {
	*x = FunctorArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunctorArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctorArchive) ProtoMessage() {}

func (x *FunctorArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctorArchive.ProtoReflect.Descriptor instead.
func (*FunctorArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{63}
}

func (x *FunctorArchive) GetFormula() *FormulaArchive {
	if x != nil {
		return x.Formula
	}
	return nil
}

func (x *FunctorArchive) GetNumArgs() uint32 {
	if x != nil && x.NumArgs != nil {
		return *x.NumArgs
	}
	return 0
}

type FormatStructArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FormatType             *uint32 `protobuf:"varint,1,req,name=format_type,json=formatType" json:"format_type,omitempty"`
	DecimalPlaces          *uint32 `protobuf:"varint,2,opt,name=decimal_places,json=decimalPlaces" json:"decimal_places,omitempty"`
	CurrencyCode           *string `protobuf:"bytes,3,opt,name=currency_code,json=currencyCode" json:"currency_code,omitempty"`
	NegativeStyle          *uint32 `protobuf:"varint,4,opt,name=negative_style,json=negativeStyle" json:"negative_style,omitempty"`
	ShowThousandsSeparator *bool   `protobuf:"varint,5,opt,name=show_thousands_separator,json=showThousandsSeparator" json:"show_thousands_separator,omitempty"`
	UseAccountingStyle     *bool   `protobuf:"varint,6,opt,name=use_accounting_style,json=useAccountingStyle" json:"use_accounting_style,omitempty"`
	DurationStyle          *uint32 `protobuf:"varint,7,opt,name=duration_style,json=durationStyle" json:"duration_style,omitempty"`
	Base                   *uint32 `protobuf:"varint,8,opt,name=base" json:"base,omitempty"`
	BasePlaces             *uint32 `protobuf:"varint,9,opt,name=base_places,json=basePlaces" json:"base_places,omitempty"`
	BaseUseMinusSign       *bool   `protobuf:"varint,10,opt,name=base_use_minus_sign,json=baseUseMinusSign" json:"base_use_minus_sign,omitempty"`
	FractionAccuracy       *uint32 `protobuf:"varint,11,opt,name=fraction_accuracy,json=fractionAccuracy" json:"fraction_accuracy,omitempty"`
	SuppressDateFormat     *bool   `protobuf:"varint,12,opt,name=suppress_date_format,json=suppressDateFormat" json:"suppress_date_format,omitempty"`
	SuppressTimeFormat     *bool   `protobuf:"varint,13,opt,name=suppress_time_format,json=suppressTimeFormat" json:"suppress_time_format,omitempty"`
	DateTimeFormat         *string `protobuf:"bytes,14,opt,name=date_time_format,json=dateTimeFormat" json:"date_time_format,omitempty"`
	DurationUnitLargest    *uint32 `protobuf:"varint,15,opt,name=duration_unit_largest,json=durationUnitLargest" json:"duration_unit_largest,omitempty"`
	DurationUnitSmallest   *uint32 `protobuf:"varint,16,opt,name=duration_unit_smallest,json=durationUnitSmallest" json:"duration_unit_smallest,omitempty"`
}

func (x *FormatStructArchive) Reset() {
	*x = FormatStructArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormatStructArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormatStructArchive) ProtoMessage() {}

func (x *FormatStructArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormatStructArchive.ProtoReflect.Descriptor instead.
func (*FormatStructArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{64}
}

func (x *FormatStructArchive) GetFormatType() uint32 {
	if x != nil && x.FormatType != nil {
		return *x.FormatType
	}
	return 0
}

func (x *FormatStructArchive) GetDecimalPlaces() uint32 {
	if x != nil && x.DecimalPlaces != nil {
		return *x.DecimalPlaces
	}
	return 0
}

func (x *FormatStructArchive) GetCurrencyCode() string {
	if x != nil && x.CurrencyCode != nil {
		return *x.CurrencyCode
	}
	return ""
}

func (x *FormatStructArchive) GetNegativeStyle() uint32 {
	if x != nil && x.NegativeStyle != nil {
		return *x.NegativeStyle
	}
	return 0
}

func (x *FormatStructArchive) GetShowThousandsSeparator() bool {
	if x != nil && x.ShowThousandsSeparator != nil {
		return *x.ShowThousandsSeparator
	}
	return false
}

func (x *FormatStructArchive) GetUseAccountingStyle() bool {
	if x != nil && x.UseAccountingStyle != nil {
		return *x.UseAccountingStyle
	}
	return false
}

func (x *FormatStructArchive) GetDurationStyle() uint32 {
	if x != nil && x.DurationStyle != nil {
		return *x.DurationStyle
	}
	return 0
}

func (x *FormatStructArchive) GetBase() uint32 {
	if x != nil && x.Base != nil {
		return *x.Base
	}
	return 0
}

func (x *FormatStructArchive) GetBasePlaces() uint32 {
	if x != nil && x.BasePlaces != nil {
		return *x.BasePlaces
	}
	return 0
}

func (x *FormatStructArchive) GetBaseUseMinusSign() bool {
	if x != nil && x.BaseUseMinusSign != nil {
		return *x.BaseUseMinusSign
	}
	return false
}

func (x *FormatStructArchive) GetFractionAccuracy() uint32 {
	if x != nil && x.FractionAccuracy != nil {
		return *x.FractionAccuracy
	}
	return 0
}

func (x *FormatStructArchive) GetSuppressDateFormat() bool {
	if x != nil && x.SuppressDateFormat != nil {
		return *x.SuppressDateFormat
	}
	return false
}

func (x *FormatStructArchive) GetSuppressTimeFormat() bool {
	if x != nil && x.SuppressTimeFormat != nil {
		return *x.SuppressTimeFormat
	}
	return false
}

func (x *FormatStructArchive) GetDateTimeFormat() string {
	if x != nil && x.DateTimeFormat != nil {
		return *x.DateTimeFormat
	}
	return ""
}

func (x *FormatStructArchive) GetDurationUnitLargest() uint32 {
	if x != nil && x.DurationUnitLargest != nil {
		return *x.DurationUnitLargest
	}
	return 0
}

func (x *FormatStructArchive) GetDurationUnitSmallest() uint32 {
	if x != nil && x.DurationUnitSmallest != nil {
		return *x.DurationUnitSmallest
	}
	return 0
}

type RangeCoordinateArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopLeftColumn     *uint32 `protobuf:"varint,1,req,name=top_left_column,json=topLeftColumn" json:"top_left_column,omitempty"`
	TopLeftRow        *uint32 `protobuf:"varint,2,req,name=top_left_row,json=topLeftRow" json:"top_left_row,omitempty"`
	BottomRightColumn *uint32 `protobuf:"varint,3,req,name=bottom_right_column,json=bottomRightColumn" json:"bottom_right_column,omitempty"`
	BottomRightRow    *uint32 `protobuf:"varint,4,req,name=bottom_right_row,json=bottomRightRow" json:"bottom_right_row,omitempty"`
}

func (x *RangeCoordinateArchive) Reset() {
	*x = RangeCoordinateArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RangeCoordinateArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RangeCoordinateArchive) ProtoMessage() {}

func (x *RangeCoordinateArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RangeCoordinateArchive.ProtoReflect.Descriptor instead.
func (*RangeCoordinateArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{65}
}

func (x *RangeCoordinateArchive) GetTopLeftColumn() uint32 {
	if x != nil && x.TopLeftColumn != nil {
		return *x.TopLeftColumn
	}
	return 0
}

func (x *RangeCoordinateArchive) GetTopLeftRow() uint32 {
	if x != nil && x.TopLeftRow != nil {
		return *x.TopLeftRow
	}
	return 0
}

func (x *RangeCoordinateArchive) GetBottomRightColumn() uint32 {
	if x != nil && x.BottomRightColumn != nil {
		return *x.BottomRightColumn
	}
	return 0
}

func (x *RangeCoordinateArchive) GetBottomRightRow() uint32 {
	if x != nil && x.BottomRightRow != nil {
		return *x.BottomRightRow
	}
	return 0
}

type TableTransposeInfoArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumberOfFooterRows          *uint32                 `protobuf:"varint,3,req,name=number_of_footer_rows,json=numberOfFooterRows" json:"number_of_footer_rows,omitempty"`
	BodyRangeForTransposedTable *RangeCoordinateArchive `protobuf:"bytes,4,req,name=body_range_for_transposed_table,json=bodyRangeForTransposedTable" json:"body_range_for_transposed_table,omitempty"`
}

func (x *TableTransposeInfoArchive) Reset() {
	*x = TableTransposeInfoArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableTransposeInfoArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableTransposeInfoArchive) ProtoMessage() {}

func (x *TableTransposeInfoArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableTransposeInfoArchive.ProtoReflect.Descriptor instead.
func (*TableTransposeInfoArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{66}
}

func (x *TableTransposeInfoArchive) GetNumberOfFooterRows() uint32 {
	if x != nil && x.NumberOfFooterRows != nil {
		return *x.NumberOfFooterRows
	}
	return 0
}

func (x *TableTransposeInfoArchive) GetBodyRangeForTransposedTable() *RangeCoordinateArchive {
	if x != nil {
		return x.BodyRangeForTransposedTable
	}
	return nil
}

type MergeOriginMovedArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcColumn []uint32 `protobuf:"varint,1,rep,name=src_column,json=srcColumn" json:"src_column,omitempty"`
	SrcRow    []uint32 `protobuf:"varint,2,rep,name=src_row,json=srcRow" json:"src_row,omitempty"`
	DstColumn []uint32 `protobuf:"varint,3,rep,name=dst_column,json=dstColumn" json:"dst_column,omitempty"`
	DstRow    []uint32 `protobuf:"varint,4,rep,name=dst_row,json=dstRow" json:"dst_row,omitempty"`
}

func (x *MergeOriginMovedArchive) Reset() {
	*x = MergeOriginMovedArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergeOriginMovedArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeOriginMovedArchive) ProtoMessage() {}

func (x *MergeOriginMovedArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeOriginMovedArchive.ProtoReflect.Descriptor instead.
func (*MergeOriginMovedArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{67}
}

func (x *MergeOriginMovedArchive) GetSrcColumn() []uint32 {
	if x != nil {
		return x.SrcColumn
	}
	return nil
}

func (x *MergeOriginMovedArchive) GetSrcRow() []uint32 {
	if x != nil {
		return x.SrcRow
	}
	return nil
}

func (x *MergeOriginMovedArchive) GetDstColumn() []uint32 {
	if x != nil {
		return x.DstColumn
	}
	return nil
}

func (x *MergeOriginMovedArchive) GetDstRow() []uint32 {
	if x != nil {
		return x.DstRow
	}
	return nil
}

type OwnerUIDMapperArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableUid                             *UUID `protobuf:"bytes,1,req,name=table_uid,json=tableUid" json:"table_uid,omitempty"`
	NextTableUid                         *UUID `protobuf:"bytes,2,req,name=next_table_uid,json=nextTableUid" json:"next_table_uid,omitempty"`
	HiddenStateForRowsOwnerUid           *UUID `protobuf:"bytes,3,req,name=hidden_state_for_rows_owner_uid,json=hiddenStateForRowsOwnerUid" json:"hidden_state_for_rows_owner_uid,omitempty"`
	NextHiddenStateForRowsOwnerUid       *UUID `protobuf:"bytes,4,req,name=next_hidden_state_for_rows_owner_uid,json=nextHiddenStateForRowsOwnerUid" json:"next_hidden_state_for_rows_owner_uid,omitempty"`
	HiddenStateForColumnsOwnerUid        *UUID `protobuf:"bytes,5,req,name=hidden_state_for_columns_owner_uid,json=hiddenStateForColumnsOwnerUid" json:"hidden_state_for_columns_owner_uid,omitempty"`
	NextHiddenStateForColumnsOwnerUid    *UUID `protobuf:"bytes,6,req,name=next_hidden_state_for_columns_owner_uid,json=nextHiddenStateForColumnsOwnerUid" json:"next_hidden_state_for_columns_owner_uid,omitempty"`
	ConditionalStyleOwnerUid             *UUID `protobuf:"bytes,7,req,name=conditional_style_owner_uid,json=conditionalStyleOwnerUid" json:"conditional_style_owner_uid,omitempty"`
	NextConditionalStyleOwnerUid         *UUID `protobuf:"bytes,8,req,name=next_conditional_style_owner_uid,json=nextConditionalStyleOwnerUid" json:"next_conditional_style_owner_uid,omitempty"`
	SortRuleReferenceTrackerOwnerUid     *UUID `protobuf:"bytes,9,req,name=sort_rule_reference_tracker_owner_uid,json=sortRuleReferenceTrackerOwnerUid" json:"sort_rule_reference_tracker_owner_uid,omitempty"`
	NextSortRuleReferenceTrackerOwnerUid *UUID `protobuf:"bytes,10,req,name=next_sort_rule_reference_tracker_owner_uid,json=nextSortRuleReferenceTrackerOwnerUid" json:"next_sort_rule_reference_tracker_owner_uid,omitempty"`
	MergeOwnerUid                        *UUID `protobuf:"bytes,11,req,name=merge_owner_uid,json=mergeOwnerUid" json:"merge_owner_uid,omitempty"`
	NextMergeOwnerUid                    *UUID `protobuf:"bytes,12,req,name=next_merge_owner_uid,json=nextMergeOwnerUid" json:"next_merge_owner_uid,omitempty"`
	CategoryAggregatesOwnerUid           *UUID `protobuf:"bytes,15,req,name=category_aggregates_owner_uid,json=categoryAggregatesOwnerUid" json:"category_aggregates_owner_uid,omitempty"`
	NextCategoryAggregatesOwnerUid       *UUID `protobuf:"bytes,16,req,name=next_category_aggregates_owner_uid,json=nextCategoryAggregatesOwnerUid" json:"next_category_aggregates_owner_uid,omitempty"`
	GroupByUid                           *UUID `protobuf:"bytes,17,req,name=group_by_uid,json=groupByUid" json:"group_by_uid,omitempty"`
	NextGroupByUid                       *UUID `protobuf:"bytes,18,req,name=next_group_by_uid,json=nextGroupByUid" json:"next_group_by_uid,omitempty"`
	PencilAnnotationOwnerUid             *UUID `protobuf:"bytes,19,req,name=pencil_annotation_owner_uid,json=pencilAnnotationOwnerUid" json:"pencil_annotation_owner_uid,omitempty"`
	NextPencilAnnotationOwnerUid         *UUID `protobuf:"bytes,20,req,name=next_pencil_annotation_owner_uid,json=nextPencilAnnotationOwnerUid" json:"next_pencil_annotation_owner_uid,omitempty"`
}

func (x *OwnerUIDMapperArchive) Reset() {
	*x = OwnerUIDMapperArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OwnerUIDMapperArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OwnerUIDMapperArchive) ProtoMessage() {}

func (x *OwnerUIDMapperArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OwnerUIDMapperArchive.ProtoReflect.Descriptor instead.
func (*OwnerUIDMapperArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{68}
}

func (x *OwnerUIDMapperArchive) GetTableUid() *UUID {
	if x != nil {
		return x.TableUid
	}
	return nil
}

func (x *OwnerUIDMapperArchive) GetNextTableUid() *UUID {
	if x != nil {
		return x.NextTableUid
	}
	return nil
}

func (x *OwnerUIDMapperArchive) GetHiddenStateForRowsOwnerUid() *UUID {
	if x != nil {
		return x.HiddenStateForRowsOwnerUid
	}
	return nil
}

func (x *OwnerUIDMapperArchive) GetNextHiddenStateForRowsOwnerUid() *UUID {
	if x != nil {
		return x.NextHiddenStateForRowsOwnerUid
	}
	return nil
}

func (x *OwnerUIDMapperArchive) GetHiddenStateForColumnsOwnerUid() *UUID {
	if x != nil {
		return x.HiddenStateForColumnsOwnerUid
	}
	return nil
}

func (x *OwnerUIDMapperArchive) GetNextHiddenStateForColumnsOwnerUid() *UUID {
	if x != nil {
		return x.NextHiddenStateForColumnsOwnerUid
	}
	return nil
}

func (x *OwnerUIDMapperArchive) GetConditionalStyleOwnerUid() *UUID {
	if x != nil {
		return x.ConditionalStyleOwnerUid
	}
	return nil
}

func (x *OwnerUIDMapperArchive) GetNextConditionalStyleOwnerUid() *UUID {
	if x != nil {
		return x.NextConditionalStyleOwnerUid
	}
	return nil
}

func (x *OwnerUIDMapperArchive) GetSortRuleReferenceTrackerOwnerUid() *UUID {
	if x != nil {
		return x.SortRuleReferenceTrackerOwnerUid
	}
	return nil
}

func (x *OwnerUIDMapperArchive) GetNextSortRuleReferenceTrackerOwnerUid() *UUID {
	if x != nil {
		return x.NextSortRuleReferenceTrackerOwnerUid
	}
	return nil
}

func (x *OwnerUIDMapperArchive) GetMergeOwnerUid() *UUID {
	if x != nil {
		return x.MergeOwnerUid
	}
	return nil
}

func (x *OwnerUIDMapperArchive) GetNextMergeOwnerUid() *UUID {
	if x != nil {
		return x.NextMergeOwnerUid
	}
	return nil
}

func (x *OwnerUIDMapperArchive) GetCategoryAggregatesOwnerUid() *UUID {
	if x != nil {
		return x.CategoryAggregatesOwnerUid
	}
	return nil
}

func (x *OwnerUIDMapperArchive) GetNextCategoryAggregatesOwnerUid() *UUID {
	if x != nil {
		return x.NextCategoryAggregatesOwnerUid
	}
	return nil
}

func (x *OwnerUIDMapperArchive) GetGroupByUid() *UUID {
	if x != nil {
		return x.GroupByUid
	}
	return nil
}

func (x *OwnerUIDMapperArchive) GetNextGroupByUid() *UUID {
	if x != nil {
		return x.NextGroupByUid
	}
	return nil
}

func (x *OwnerUIDMapperArchive) GetPencilAnnotationOwnerUid() *UUID {
	if x != nil {
		return x.PencilAnnotationOwnerUid
	}
	return nil
}

func (x *OwnerUIDMapperArchive) GetNextPencilAnnotationOwnerUid() *UUID {
	if x != nil {
		return x.NextPencilAnnotationOwnerUid
	}
	return nil
}

type RewriteTableUIDInfoArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableUidMap []*RewriteTableUIDInfoArchive_TableUIDMapEntryArchive `protobuf:"bytes,1,rep,name=table_uid_map,json=tableUidMap" json:"table_uid_map,omitempty"`
}

func (x *RewriteTableUIDInfoArchive) Reset() {
	*x = RewriteTableUIDInfoArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewriteTableUIDInfoArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewriteTableUIDInfoArchive) ProtoMessage() {}

func (x *RewriteTableUIDInfoArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewriteTableUIDInfoArchive.ProtoReflect.Descriptor instead.
func (*RewriteTableUIDInfoArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{69}
}

func (x *RewriteTableUIDInfoArchive) GetTableUidMap() []*RewriteTableUIDInfoArchive_TableUIDMapEntryArchive {
	if x != nil {
		return x.TableUidMap
	}
	return nil
}

type GroupByChangeArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChangeType            *GroupByChangeArchive_ChangeType                    `protobuf:"varint,1,req,name=change_type,json=changeType,enum=TSCE.GroupByChangeArchive_ChangeType" json:"change_type,omitempty"`
	GroupByUid            *UUID                                               `protobuf:"bytes,2,req,name=group_by_uid,json=groupByUid" json:"group_by_uid,omitempty"`
	PreviousLevel         *uint32                                             `protobuf:"varint,3,opt,name=previous_level,json=previousLevel" json:"previous_level,omitempty"`
	UpdatedLevel          *uint32                                             `protobuf:"varint,4,opt,name=updated_level,json=updatedLevel" json:"updated_level,omitempty"`
	PreviousToUpdatedMap  *UUIDMapArchive                                     `protobuf:"bytes,5,opt,name=previous_to_updated_map,json=previousToUpdatedMap" json:"previous_to_updated_map,omitempty"`
	UpdatedToPreviousMap  *UUIDMapArchive                                     `protobuf:"bytes,6,opt,name=updated_to_previous_map,json=updatedToPreviousMap" json:"updated_to_previous_map,omitempty"`
	RemovedGroupUids      []*UUID                                             `protobuf:"bytes,7,rep,name=removed_group_uids,json=removedGroupUids" json:"removed_group_uids,omitempty"`
	GroupingColumnChanges []*GroupByChangeArchive_GroupingColumnChangeArchive `protobuf:"bytes,8,rep,name=grouping_column_changes,json=groupingColumnChanges" json:"grouping_column_changes,omitempty"`
}

func (x *GroupByChangeArchive) Reset() {
	*x = GroupByChangeArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupByChangeArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupByChangeArchive) ProtoMessage() {}

func (x *GroupByChangeArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupByChangeArchive.ProtoReflect.Descriptor instead.
func (*GroupByChangeArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{70}
}

func (x *GroupByChangeArchive) GetChangeType() GroupByChangeArchive_ChangeType {
	if x != nil && x.ChangeType != nil {
		return *x.ChangeType
	}
	return GroupByChangeArchive_NONE
}

func (x *GroupByChangeArchive) GetGroupByUid() *UUID {
	if x != nil {
		return x.GroupByUid
	}
	return nil
}

func (x *GroupByChangeArchive) GetPreviousLevel() uint32 {
	if x != nil && x.PreviousLevel != nil {
		return *x.PreviousLevel
	}
	return 0
}

func (x *GroupByChangeArchive) GetUpdatedLevel() uint32 {
	if x != nil && x.UpdatedLevel != nil {
		return *x.UpdatedLevel
	}
	return 0
}

func (x *GroupByChangeArchive) GetPreviousToUpdatedMap() *UUIDMapArchive {
	if x != nil {
		return x.PreviousToUpdatedMap
	}
	return nil
}

func (x *GroupByChangeArchive) GetUpdatedToPreviousMap() *UUIDMapArchive {
	if x != nil {
		return x.UpdatedToPreviousMap
	}
	return nil
}

func (x *GroupByChangeArchive) GetRemovedGroupUids() []*UUID {
	if x != nil {
		return x.RemovedGroupUids
	}
	return nil
}

func (x *GroupByChangeArchive) GetGroupingColumnChanges() []*GroupByChangeArchive_GroupingColumnChangeArchive {
	if x != nil {
		return x.GroupingColumnChanges
	}
	return nil
}

type RewriteGroupNodeUIDInfoArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupByUid      *UUID           `protobuf:"bytes,1,opt,name=group_by_uid,json=groupByUid" json:"group_by_uid,omitempty"`
	GroupNodeUidMap *UUIDMapArchive `protobuf:"bytes,2,req,name=group_node_uid_map,json=groupNodeUidMap" json:"group_node_uid_map,omitempty"`
}

func (x *RewriteGroupNodeUIDInfoArchive) Reset() {
	*x = RewriteGroupNodeUIDInfoArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewriteGroupNodeUIDInfoArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewriteGroupNodeUIDInfoArchive) ProtoMessage() {}

func (x *RewriteGroupNodeUIDInfoArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewriteGroupNodeUIDInfoArchive.ProtoReflect.Descriptor instead.
func (*RewriteGroupNodeUIDInfoArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{71}
}

func (x *RewriteGroupNodeUIDInfoArchive) GetGroupByUid() *UUID {
	if x != nil {
		return x.GroupByUid
	}
	return nil
}

func (x *RewriteGroupNodeUIDInfoArchive) GetGroupNodeUidMap() *UUIDMapArchive {
	if x != nil {
		return x.GroupNodeUidMap
	}
	return nil
}

type IndexedUidsArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uids []*IndexedUidsArchive_IndexedUid `protobuf:"bytes,1,rep,name=uids" json:"uids,omitempty"`
}

func (x *IndexedUidsArchive) Reset() {
	*x = IndexedUidsArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexedUidsArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexedUidsArchive) ProtoMessage() {}

func (x *IndexedUidsArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexedUidsArchive.ProtoReflect.Descriptor instead.
func (*IndexedUidsArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{72}
}

func (x *IndexedUidsArchive) GetUids() []*IndexedUidsArchive_IndexedUid {
	if x != nil {
		return x.Uids
	}
	return nil
}

type RewriteRangeEntryArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RangeLocation *uint32 `protobuf:"varint,1,req,name=range_location,json=rangeLocation" json:"range_location,omitempty"`
	RangeLength   *uint32 `protobuf:"varint,2,req,name=range_length,json=rangeLength" json:"range_length,omitempty"`
	RangeUids     []*UUID `protobuf:"bytes,3,rep,name=range_uids,json=rangeUids" json:"range_uids,omitempty"`
	Offset        *uint32 `protobuf:"varint,4,req,name=offset" json:"offset,omitempty"`
}

func (x *RewriteRangeEntryArchive) Reset() {
	*x = RewriteRangeEntryArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewriteRangeEntryArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewriteRangeEntryArchive) ProtoMessage() {}

func (x *RewriteRangeEntryArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewriteRangeEntryArchive.ProtoReflect.Descriptor instead.
func (*RewriteRangeEntryArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{73}
}

func (x *RewriteRangeEntryArchive) GetRangeLocation() uint32 {
	if x != nil && x.RangeLocation != nil {
		return *x.RangeLocation
	}
	return 0
}

func (x *RewriteRangeEntryArchive) GetRangeLength() uint32 {
	if x != nil && x.RangeLength != nil {
		return *x.RangeLength
	}
	return 0
}

func (x *RewriteRangeEntryArchive) GetRangeUids() []*UUID {
	if x != nil {
		return x.RangeUids
	}
	return nil
}

func (x *RewriteRangeEntryArchive) GetOffset() uint32 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

type ColumnOrRowUuidsInfoArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsRows            *bool                       `protobuf:"varint,1,req,name=is_rows,json=isRows" json:"is_rows,omitempty"`
	TableUid          *UUID                       `protobuf:"bytes,2,req,name=table_uid,json=tableUid" json:"table_uid,omitempty"`
	CondStyleOwnerUid *UUID                       `protobuf:"bytes,3,req,name=cond_style_owner_uid,json=condStyleOwnerUid" json:"cond_style_owner_uid,omitempty"`
	GroupByUid        *UUID                       `protobuf:"bytes,4,req,name=group_by_uid,json=groupByUid" json:"group_by_uid,omitempty"`
	Uids              *IndexedUidsArchive         `protobuf:"bytes,5,req,name=uids" json:"uids,omitempty"`
	RangeEntries      []*RewriteRangeEntryArchive `protobuf:"bytes,6,rep,name=range_entries,json=rangeEntries" json:"range_entries,omitempty"`
	TableRange        *RangeCoordinateArchive     `protobuf:"bytes,7,req,name=table_range,json=tableRange" json:"table_range,omitempty"`
	InsertAtUid       *UUID                       `protobuf:"bytes,8,opt,name=insert_at_uid,json=insertAtUid" json:"insert_at_uid,omitempty"`
	InsertOppositeUid *UUID                       `protobuf:"bytes,9,opt,name=insert_opposite_uid,json=insertOppositeUid" json:"insert_opposite_uid,omitempty"`
}

func (x *ColumnOrRowUuidsInfoArchive) Reset() {
	*x = ColumnOrRowUuidsInfoArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnOrRowUuidsInfoArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnOrRowUuidsInfoArchive) ProtoMessage() {}

func (x *ColumnOrRowUuidsInfoArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnOrRowUuidsInfoArchive.ProtoReflect.Descriptor instead.
func (*ColumnOrRowUuidsInfoArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{74}
}

func (x *ColumnOrRowUuidsInfoArchive) GetIsRows() bool {
	if x != nil && x.IsRows != nil {
		return *x.IsRows
	}
	return false
}

func (x *ColumnOrRowUuidsInfoArchive) GetTableUid() *UUID {
	if x != nil {
		return x.TableUid
	}
	return nil
}

func (x *ColumnOrRowUuidsInfoArchive) GetCondStyleOwnerUid() *UUID {
	if x != nil {
		return x.CondStyleOwnerUid
	}
	return nil
}

func (x *ColumnOrRowUuidsInfoArchive) GetGroupByUid() *UUID {
	if x != nil {
		return x.GroupByUid
	}
	return nil
}

func (x *ColumnOrRowUuidsInfoArchive) GetUids() *IndexedUidsArchive {
	if x != nil {
		return x.Uids
	}
	return nil
}

func (x *ColumnOrRowUuidsInfoArchive) GetRangeEntries() []*RewriteRangeEntryArchive {
	if x != nil {
		return x.RangeEntries
	}
	return nil
}

func (x *ColumnOrRowUuidsInfoArchive) GetTableRange() *RangeCoordinateArchive {
	if x != nil {
		return x.TableRange
	}
	return nil
}

func (x *ColumnOrRowUuidsInfoArchive) GetInsertAtUid() *UUID {
	if x != nil {
		return x.InsertAtUid
	}
	return nil
}

func (x *ColumnOrRowUuidsInfoArchive) GetInsertOppositeUid() *UUID {
	if x != nil {
		return x.InsertOppositeUid
	}
	return nil
}

type RegionInfoArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableUid   *UUID               `protobuf:"bytes,1,req,name=table_uid,json=tableUid" json:"table_uid,omitempty"`
	ColumnUids *IndexedUidsArchive `protobuf:"bytes,2,req,name=column_uids,json=columnUids" json:"column_uids,omitempty"`
	RowUids    *IndexedUidsArchive `protobuf:"bytes,3,req,name=row_uids,json=rowUids" json:"row_uids,omitempty"`
}

func (x *RegionInfoArchive) Reset() {
	*x = RegionInfoArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegionInfoArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionInfoArchive) ProtoMessage() {}

func (x *RegionInfoArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionInfoArchive.ProtoReflect.Descriptor instead.
func (*RegionInfoArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{75}
}

func (x *RegionInfoArchive) GetTableUid() *UUID {
	if x != nil {
		return x.TableUid
	}
	return nil
}

func (x *RegionInfoArchive) GetColumnUids() *IndexedUidsArchive {
	if x != nil {
		return x.ColumnUids
	}
	return nil
}

func (x *RegionInfoArchive) GetRowUids() *IndexedUidsArchive {
	if x != nil {
		return x.RowUids
	}
	return nil
}

type RegionMovedInfoArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcRegion         *RegionInfoArchive `protobuf:"bytes,1,req,name=src_region,json=srcRegion" json:"src_region,omitempty"`
	DstRegion         *RegionInfoArchive `protobuf:"bytes,2,req,name=dst_region,json=dstRegion" json:"dst_region,omitempty"`
	SpanRows          *bool              `protobuf:"varint,3,opt,name=span_rows,json=spanRows" json:"span_rows,omitempty"`
	SpanColumns       *bool              `protobuf:"varint,4,opt,name=span_columns,json=spanColumns" json:"span_columns,omitempty"`
	OriginalSrcRegion *RegionInfoArchive `protobuf:"bytes,5,opt,name=original_src_region,json=originalSrcRegion" json:"original_src_region,omitempty"`
	FinalDestTableUid *UUID              `protobuf:"bytes,6,opt,name=final_dest_table_uid,json=finalDestTableUid" json:"final_dest_table_uid,omitempty"`
}

func (x *RegionMovedInfoArchive) Reset() {
	*x = RegionMovedInfoArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegionMovedInfoArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionMovedInfoArchive) ProtoMessage() {}

func (x *RegionMovedInfoArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionMovedInfoArchive.ProtoReflect.Descriptor instead.
func (*RegionMovedInfoArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{76}
}

func (x *RegionMovedInfoArchive) GetSrcRegion() *RegionInfoArchive {
	if x != nil {
		return x.SrcRegion
	}
	return nil
}

func (x *RegionMovedInfoArchive) GetDstRegion() *RegionInfoArchive {
	if x != nil {
		return x.DstRegion
	}
	return nil
}

func (x *RegionMovedInfoArchive) GetSpanRows() bool {
	if x != nil && x.SpanRows != nil {
		return *x.SpanRows
	}
	return false
}

func (x *RegionMovedInfoArchive) GetSpanColumns() bool {
	if x != nil && x.SpanColumns != nil {
		return *x.SpanColumns
	}
	return false
}

func (x *RegionMovedInfoArchive) GetOriginalSrcRegion() *RegionInfoArchive {
	if x != nil {
		return x.OriginalSrcRegion
	}
	return nil
}

func (x *RegionMovedInfoArchive) GetFinalDestTableUid() *UUID {
	if x != nil {
		return x.FinalDestTableUid
	}
	return nil
}

type MergeSourceArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoordColumn *uint32 `protobuf:"varint,1,req,name=coord_column,json=coordColumn" json:"coord_column,omitempty"`
	CoordRow    *uint32 `protobuf:"varint,2,req,name=coord_row,json=coordRow" json:"coord_row,omitempty"`
}

func (x *MergeSourceArchive) Reset() {
	*x = MergeSourceArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergeSourceArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeSourceArchive) ProtoMessage() {}

func (x *MergeSourceArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeSourceArchive.ProtoReflect.Descriptor instead.
func (*MergeSourceArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{77}
}

func (x *MergeSourceArchive) GetCoordColumn() uint32 {
	if x != nil && x.CoordColumn != nil {
		return *x.CoordColumn
	}
	return 0
}

func (x *MergeSourceArchive) GetCoordRow() uint32 {
	if x != nil && x.CoordRow != nil {
		return *x.CoordRow
	}
	return 0
}

type HauntedOwnerArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerUid *UUID `protobuf:"bytes,1,req,name=owner_uid,json=ownerUid" json:"owner_uid,omitempty"`
}

func (x *HauntedOwnerArchive) Reset() {
	*x = HauntedOwnerArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HauntedOwnerArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HauntedOwnerArchive) ProtoMessage() {}

func (x *HauntedOwnerArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HauntedOwnerArchive.ProtoReflect.Descriptor instead.
func (*HauntedOwnerArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{78}
}

func (x *HauntedOwnerArchive) GetOwnerUid() *UUID {
	if x != nil {
		return x.OwnerUid
	}
	return nil
}

type CellCoordinateArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackedData *uint32 `protobuf:"fixed32,1,opt,name=packedData" json:"packedData,omitempty"`
	Column     *uint32 `protobuf:"varint,2,opt,name=column" json:"column,omitempty"`
	Row        *uint32 `protobuf:"varint,3,opt,name=row" json:"row,omitempty"`
}

func (x *CellCoordinateArchive) Reset() {
	*x = CellCoordinateArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellCoordinateArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellCoordinateArchive) ProtoMessage() {}

func (x *CellCoordinateArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellCoordinateArchive.ProtoReflect.Descriptor instead.
func (*CellCoordinateArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{79}
}

func (x *CellCoordinateArchive) GetPackedData() uint32 {
	if x != nil && x.PackedData != nil {
		return *x.PackedData
	}
	return 0
}

func (x *CellCoordinateArchive) GetColumn() uint32 {
	if x != nil && x.Column != nil {
		return *x.Column
	}
	return 0
}

func (x *CellCoordinateArchive) GetRow() uint32 {
	if x != nil && x.Row != nil {
		return *x.Row
	}
	return 0
}

type CellCoordinateVectorArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellCoord []*CellCoordinateArchive `protobuf:"bytes,1,rep,name=cell_coord,json=cellCoord" json:"cell_coord,omitempty"`
}

func (x *CellCoordinateVectorArchive) Reset() {
	*x = CellCoordinateVectorArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellCoordinateVectorArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellCoordinateVectorArchive) ProtoMessage() {}

func (x *CellCoordinateVectorArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellCoordinateVectorArchive.ProtoReflect.Descriptor instead.
func (*CellCoordinateVectorArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{80}
}

func (x *CellCoordinateVectorArchive) GetCellCoord() []*CellCoordinateArchive {
	if x != nil {
		return x.CellCoord
	}
	return nil
}

type ExpandedCellRefObjectPairArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellRef *CellReferenceArchive `protobuf:"bytes,1,req,name=cell_ref,json=cellRef" json:"cell_ref,omitempty"`
	Object  *Reference            `protobuf:"bytes,2,req,name=object" json:"object,omitempty"`
}

func (x *ExpandedCellRefObjectPairArchive) Reset() {
	*x = ExpandedCellRefObjectPairArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpandedCellRefObjectPairArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpandedCellRefObjectPairArchive) ProtoMessage() {}

func (x *ExpandedCellRefObjectPairArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpandedCellRefObjectPairArchive.ProtoReflect.Descriptor instead.
func (*ExpandedCellRefObjectPairArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{81}
}

func (x *ExpandedCellRefObjectPairArchive) GetCellRef() *CellReferenceArchive {
	if x != nil {
		return x.CellRef
	}
	return nil
}

func (x *ExpandedCellRefObjectPairArchive) GetObject() *Reference {
	if x != nil {
		return x.Object
	}
	return nil
}

type ExpandedCellRefObjectMapArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellRefObjectPair []*ExpandedCellRefObjectPairArchive `protobuf:"bytes,1,rep,name=cell_ref_object_pair,json=cellRefObjectPair" json:"cell_ref_object_pair,omitempty"`
}

func (x *ExpandedCellRefObjectMapArchive) Reset() {
	*x = ExpandedCellRefObjectMapArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpandedCellRefObjectMapArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpandedCellRefObjectMapArchive) ProtoMessage() {}

func (x *ExpandedCellRefObjectMapArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpandedCellRefObjectMapArchive.ProtoReflect.Descriptor instead.
func (*ExpandedCellRefObjectMapArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{82}
}

func (x *ExpandedCellRefObjectMapArchive) GetCellRefObjectPair() []*ExpandedCellRefObjectPairArchive {
	if x != nil {
		return x.CellRefObjectPair
	}
	return nil
}

type FormulaAtCoordArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Column                *uint32         `protobuf:"varint,1,req,name=column" json:"column,omitempty"`
	Row                   *uint32         `protobuf:"varint,2,req,name=row" json:"row,omitempty"`
	Formula               *FormulaArchive `protobuf:"bytes,3,opt,name=formula" json:"formula,omitempty"`
	RepeatPreviousFormula *bool           `protobuf:"varint,4,opt,name=repeat_previous_formula,json=repeatPreviousFormula,def=0" json:"repeat_previous_formula,omitempty"`
}

// Default values for FormulaAtCoordArchive fields.
const (
	Default_FormulaAtCoordArchive_RepeatPreviousFormula = bool(false)
)

func (x *FormulaAtCoordArchive) Reset() {
	*x = FormulaAtCoordArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormulaAtCoordArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormulaAtCoordArchive) ProtoMessage() {}

func (x *FormulaAtCoordArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormulaAtCoordArchive.ProtoReflect.Descriptor instead.
func (*FormulaAtCoordArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{83}
}

func (x *FormulaAtCoordArchive) GetColumn() uint32 {
	if x != nil && x.Column != nil {
		return *x.Column
	}
	return 0
}

func (x *FormulaAtCoordArchive) GetRow() uint32 {
	if x != nil && x.Row != nil {
		return *x.Row
	}
	return 0
}

func (x *FormulaAtCoordArchive) GetFormula() *FormulaArchive {
	if x != nil {
		return x.Formula
	}
	return nil
}

func (x *FormulaAtCoordArchive) GetRepeatPreviousFormula() bool {
	if x != nil && x.RepeatPreviousFormula != nil {
		return *x.RepeatPreviousFormula
	}
	return Default_FormulaAtCoordArchive_RepeatPreviousFormula
}

type FormulaCoordPairsByOwnerArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerKind       *uint32                  `protobuf:"varint,1,req,name=owner_kind,json=ownerKind" json:"owner_kind,omitempty"`
	OwnerUid        *UUID                    `protobuf:"bytes,2,opt,name=owner_uid,json=ownerUid" json:"owner_uid,omitempty"`
	FormulaAtCoords []*FormulaAtCoordArchive `protobuf:"bytes,3,rep,name=formula_at_coords,json=formulaAtCoords" json:"formula_at_coords,omitempty"`
}

func (x *FormulaCoordPairsByOwnerArchive) Reset() {
	*x = FormulaCoordPairsByOwnerArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormulaCoordPairsByOwnerArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormulaCoordPairsByOwnerArchive) ProtoMessage() {}

func (x *FormulaCoordPairsByOwnerArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormulaCoordPairsByOwnerArchive.ProtoReflect.Descriptor instead.
func (*FormulaCoordPairsByOwnerArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{84}
}

func (x *FormulaCoordPairsByOwnerArchive) GetOwnerKind() uint32 {
	if x != nil && x.OwnerKind != nil {
		return *x.OwnerKind
	}
	return 0
}

func (x *FormulaCoordPairsByOwnerArchive) GetOwnerUid() *UUID {
	if x != nil {
		return x.OwnerUid
	}
	return nil
}

func (x *FormulaCoordPairsByOwnerArchive) GetFormulaAtCoords() []*FormulaAtCoordArchive {
	if x != nil {
		return x.FormulaAtCoords
	}
	return nil
}

type FormulasForUndoArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FormulasForOwner []*FormulaCoordPairsByOwnerArchive `protobuf:"bytes,1,rep,name=formulas_for_owner,json=formulasForOwner" json:"formulas_for_owner,omitempty"`
}

func (x *FormulasForUndoArchive) Reset() {
	*x = FormulasForUndoArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormulasForUndoArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormulasForUndoArchive) ProtoMessage() {}

func (x *FormulasForUndoArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormulasForUndoArchive.ProtoReflect.Descriptor instead.
func (*FormulasForUndoArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{85}
}

func (x *FormulasForUndoArchive) GetFormulasForOwner() []*FormulaCoordPairsByOwnerArchive {
	if x != nil {
		return x.FormulasForOwner
	}
	return nil
}

type FormulaRewriteCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableRewriteCommand *Reference      `protobuf:"bytes,1,opt,name=table_rewrite_command,json=tableRewriteCommand" json:"table_rewrite_command,omitempty"`
	Super               *CommandArchive `protobuf:"bytes,2,opt,name=super" json:"super,omitempty"`
}

func (x *FormulaRewriteCommandArchive) Reset() {
	*x = FormulaRewriteCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormulaRewriteCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormulaRewriteCommandArchive) ProtoMessage() {}

func (x *FormulaRewriteCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormulaRewriteCommandArchive.ProtoReflect.Descriptor instead.
func (*FormulaRewriteCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{86}
}

func (x *FormulaRewriteCommandArchive) GetTableRewriteCommand() *Reference {
	if x != nil {
		return x.TableRewriteCommand
	}
	return nil
}

func (x *FormulaRewriteCommandArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

type TrackedReferenceArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ast       *ASTNodeArrayArchive `protobuf:"bytes,1,req,name=ast" json:"ast,omitempty"`
	FormulaId *uint32              `protobuf:"varint,2,req,name=formula_id,json=formulaId" json:"formula_id,omitempty"`
}

func (x *TrackedReferenceArchive) Reset() {
	*x = TrackedReferenceArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackedReferenceArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackedReferenceArchive) ProtoMessage() {}

func (x *TrackedReferenceArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackedReferenceArchive.ProtoReflect.Descriptor instead.
func (*TrackedReferenceArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{87}
}

func (x *TrackedReferenceArchive) GetAst() *ASTNodeArrayArchive {
	if x != nil {
		return x.Ast
	}
	return nil
}

func (x *TrackedReferenceArchive) GetFormulaId() uint32 {
	if x != nil && x.FormulaId != nil {
		return *x.FormulaId
	}
	return 0
}

type ExpandedTrackedReferenceArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ast           *ASTNodeArrayArchive `protobuf:"bytes,1,req,name=ast" json:"ast,omitempty"`
	FormulaColumn *uint32              `protobuf:"varint,2,req,name=formula_column,json=formulaColumn" json:"formula_column,omitempty"`
	FormulaRow    *uint32              `protobuf:"varint,3,req,name=formula_row,json=formulaRow" json:"formula_row,omitempty"`
}

func (x *ExpandedTrackedReferenceArchive) Reset() {
	*x = ExpandedTrackedReferenceArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpandedTrackedReferenceArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpandedTrackedReferenceArchive) ProtoMessage() {}

func (x *ExpandedTrackedReferenceArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpandedTrackedReferenceArchive.ProtoReflect.Descriptor instead.
func (*ExpandedTrackedReferenceArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{88}
}

func (x *ExpandedTrackedReferenceArchive) GetAst() *ASTNodeArrayArchive {
	if x != nil {
		return x.Ast
	}
	return nil
}

func (x *ExpandedTrackedReferenceArchive) GetFormulaColumn() uint32 {
	if x != nil && x.FormulaColumn != nil {
		return *x.FormulaColumn
	}
	return 0
}

func (x *ExpandedTrackedReferenceArchive) GetFormulaRow() uint32 {
	if x != nil && x.FormulaRow != nil {
		return *x.FormulaRow
	}
	return 0
}

type TrackedReferenceStoreArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid *CFUUIDArchive `protobuf:"bytes,1,req,name=uuid" json:"uuid,omitempty"`
	// Deprecated: Do not use.
	TrackedReference                  []*Reference                       `protobuf:"bytes,2,rep,name=tracked_reference,json=trackedReference" json:"tracked_reference,omitempty"`
	ContainedTrackedReference         []*TrackedReferenceArchive         `protobuf:"bytes,3,rep,name=contained_tracked_reference,json=containedTrackedReference" json:"contained_tracked_reference,omitempty"`
	ContainedExpandedTrackedReference []*ExpandedTrackedReferenceArchive `protobuf:"bytes,4,rep,name=contained_expanded_tracked_reference,json=containedExpandedTrackedReference" json:"contained_expanded_tracked_reference,omitempty"`
}

func (x *TrackedReferenceStoreArchive) Reset() {
	*x = TrackedReferenceStoreArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackedReferenceStoreArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackedReferenceStoreArchive) ProtoMessage() {}

func (x *TrackedReferenceStoreArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackedReferenceStoreArchive.ProtoReflect.Descriptor instead.
func (*TrackedReferenceStoreArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{89}
}

func (x *TrackedReferenceStoreArchive) GetUuid() *CFUUIDArchive {
	if x != nil {
		return x.Uuid
	}
	return nil
}

// Deprecated: Do not use.
func (x *TrackedReferenceStoreArchive) GetTrackedReference() []*Reference {
	if x != nil {
		return x.TrackedReference
	}
	return nil
}

func (x *TrackedReferenceStoreArchive) GetContainedTrackedReference() []*TrackedReferenceArchive {
	if x != nil {
		return x.ContainedTrackedReference
	}
	return nil
}

func (x *TrackedReferenceStoreArchive) GetContainedExpandedTrackedReference() []*ExpandedTrackedReferenceArchive {
	if x != nil {
		return x.ContainedExpandedTrackedReference
	}
	return nil
}

type ViewTractRefArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableUid         *UUID                            `protobuf:"bytes,1,req,name=table_uid,json=tableUid" json:"table_uid,omitempty"`
	UidTract         *ASTNodeArrayArchive_ASTUidTract `protobuf:"bytes,2,opt,name=uid_tract,json=uidTract" json:"uid_tract,omitempty"`
	PreserveFlags    *PreserveColumnRowFlagsArchive   `protobuf:"bytes,3,opt,name=preserve_flags,json=preserveFlags" json:"preserve_flags,omitempty"`
	AggIndexLevel    *uint32                          `protobuf:"varint,4,opt,name=agg_index_level,json=aggIndexLevel" json:"agg_index_level,omitempty"`
	ColumnGroupLevel *int32                           `protobuf:"zigzag32,5,opt,name=column_group_level,json=columnGroupLevel" json:"column_group_level,omitempty"`
	RowGroupLevel    *int32                           `protobuf:"zigzag32,6,opt,name=row_group_level,json=rowGroupLevel" json:"row_group_level,omitempty"`
}

func (x *ViewTractRefArchive) Reset() {
	*x = ViewTractRefArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ViewTractRefArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewTractRefArchive) ProtoMessage() {}

func (x *ViewTractRefArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewTractRefArchive.ProtoReflect.Descriptor instead.
func (*ViewTractRefArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{90}
}

func (x *ViewTractRefArchive) GetTableUid() *UUID {
	if x != nil {
		return x.TableUid
	}
	return nil
}

func (x *ViewTractRefArchive) GetUidTract() *ASTNodeArrayArchive_ASTUidTract {
	if x != nil {
		return x.UidTract
	}
	return nil
}

func (x *ViewTractRefArchive) GetPreserveFlags() *PreserveColumnRowFlagsArchive {
	if x != nil {
		return x.PreserveFlags
	}
	return nil
}

func (x *ViewTractRefArchive) GetAggIndexLevel() uint32 {
	if x != nil && x.AggIndexLevel != nil {
		return *x.AggIndexLevel
	}
	return 0
}

func (x *ViewTractRefArchive) GetColumnGroupLevel() int32 {
	if x != nil && x.ColumnGroupLevel != nil {
		return *x.ColumnGroupLevel
	}
	return 0
}

func (x *ViewTractRefArchive) GetRowGroupLevel() int32 {
	if x != nil && x.RowGroupLevel != nil {
		return *x.RowGroupLevel
	}
	return 0
}

type BooleanCellValueArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value            *bool                   `protobuf:"varint,1,req,name=value" json:"value,omitempty"`
	Format           *TSKFormatStructArchive `protobuf:"bytes,2,opt,name=format" json:"format,omitempty"`
	FormatIsExplicit *bool                   `protobuf:"varint,3,opt,name=format_is_explicit,json=formatIsExplicit,def=0" json:"format_is_explicit,omitempty"`
}

// Default values for BooleanCellValueArchive fields.
const (
	Default_BooleanCellValueArchive_FormatIsExplicit = bool(false)
)

func (x *BooleanCellValueArchive) Reset() {
	*x = BooleanCellValueArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BooleanCellValueArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BooleanCellValueArchive) ProtoMessage() {}

func (x *BooleanCellValueArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BooleanCellValueArchive.ProtoReflect.Descriptor instead.
func (*BooleanCellValueArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{91}
}

func (x *BooleanCellValueArchive) GetValue() bool {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return false
}

func (x *BooleanCellValueArchive) GetFormat() *TSKFormatStructArchive {
	if x != nil {
		return x.Format
	}
	return nil
}

func (x *BooleanCellValueArchive) GetFormatIsExplicit() bool {
	if x != nil && x.FormatIsExplicit != nil {
		return *x.FormatIsExplicit
	}
	return Default_BooleanCellValueArchive_FormatIsExplicit
}

type DateCellValueArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value  *float64                `protobuf:"fixed64,1,req,name=value" json:"value,omitempty"`
	Format *TSKFormatStructArchive `protobuf:"bytes,2,req,name=format" json:"format,omitempty"`
	// Deprecated: Do not use.
	FormatIsImplicit *bool `protobuf:"varint,3,opt,name=format_is_implicit,json=formatIsImplicit" json:"format_is_implicit,omitempty"`
	FormatIsExplicit *bool `protobuf:"varint,4,opt,name=format_is_explicit,json=formatIsExplicit,def=0" json:"format_is_explicit,omitempty"`
}

// Default values for DateCellValueArchive fields.
const (
	Default_DateCellValueArchive_FormatIsExplicit = bool(false)
)

func (x *DateCellValueArchive) Reset() {
	*x = DateCellValueArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DateCellValueArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateCellValueArchive) ProtoMessage() {}

func (x *DateCellValueArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateCellValueArchive.ProtoReflect.Descriptor instead.
func (*DateCellValueArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{92}
}

func (x *DateCellValueArchive) GetValue() float64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *DateCellValueArchive) GetFormat() *TSKFormatStructArchive {
	if x != nil {
		return x.Format
	}
	return nil
}

// Deprecated: Do not use.
func (x *DateCellValueArchive) GetFormatIsImplicit() bool {
	if x != nil && x.FormatIsImplicit != nil {
		return *x.FormatIsImplicit
	}
	return false
}

func (x *DateCellValueArchive) GetFormatIsExplicit() bool {
	if x != nil && x.FormatIsExplicit != nil {
		return *x.FormatIsExplicit
	}
	return Default_DateCellValueArchive_FormatIsExplicit
}

type NumberCellValueArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value        *float64                `protobuf:"fixed64,1,opt,name=value" json:"value,omitempty"`
	UnitIndex    *int32                  `protobuf:"varint,2,opt,name=unit_index,json=unitIndex" json:"unit_index,omitempty"`
	CurrencyCode *string                 `protobuf:"bytes,5,opt,name=currency_code,json=currencyCode" json:"currency_code,omitempty"`
	Format       *TSKFormatStructArchive `protobuf:"bytes,3,req,name=format" json:"format,omitempty"`
	// Deprecated: Do not use.
	FormatIsImplicit *bool   `protobuf:"varint,4,opt,name=format_is_implicit,json=formatIsImplicit" json:"format_is_implicit,omitempty"`
	FormatIsExplicit *bool   `protobuf:"varint,6,opt,name=format_is_explicit,json=formatIsExplicit,def=0" json:"format_is_explicit,omitempty"`
	DecimalLow       *uint64 `protobuf:"varint,7,opt,name=decimal_low,json=decimalLow" json:"decimal_low,omitempty"`
	DecimalHigh      *uint64 `protobuf:"varint,8,opt,name=decimal_high,json=decimalHigh" json:"decimal_high,omitempty"`
}

// Default values for NumberCellValueArchive fields.
const (
	Default_NumberCellValueArchive_FormatIsExplicit = bool(false)
)

func (x *NumberCellValueArchive) Reset() {
	*x = NumberCellValueArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NumberCellValueArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumberCellValueArchive) ProtoMessage() {}

func (x *NumberCellValueArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumberCellValueArchive.ProtoReflect.Descriptor instead.
func (*NumberCellValueArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{93}
}

func (x *NumberCellValueArchive) GetValue() float64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *NumberCellValueArchive) GetUnitIndex() int32 {
	if x != nil && x.UnitIndex != nil {
		return *x.UnitIndex
	}
	return 0
}

func (x *NumberCellValueArchive) GetCurrencyCode() string {
	if x != nil && x.CurrencyCode != nil {
		return *x.CurrencyCode
	}
	return ""
}

func (x *NumberCellValueArchive) GetFormat() *TSKFormatStructArchive {
	if x != nil {
		return x.Format
	}
	return nil
}

// Deprecated: Do not use.
func (x *NumberCellValueArchive) GetFormatIsImplicit() bool {
	if x != nil && x.FormatIsImplicit != nil {
		return *x.FormatIsImplicit
	}
	return false
}

func (x *NumberCellValueArchive) GetFormatIsExplicit() bool {
	if x != nil && x.FormatIsExplicit != nil {
		return *x.FormatIsExplicit
	}
	return Default_NumberCellValueArchive_FormatIsExplicit
}

func (x *NumberCellValueArchive) GetDecimalLow() uint64 {
	if x != nil && x.DecimalLow != nil {
		return *x.DecimalLow
	}
	return 0
}

func (x *NumberCellValueArchive) GetDecimalHigh() uint64 {
	if x != nil && x.DecimalHigh != nil {
		return *x.DecimalHigh
	}
	return 0
}

type StringCellValueArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value  *string                 `protobuf:"bytes,1,req,name=value" json:"value,omitempty"`
	Format *TSKFormatStructArchive `protobuf:"bytes,2,req,name=format" json:"format,omitempty"`
	// Deprecated: Do not use.
	FormatIsImplicit     *bool `protobuf:"varint,3,opt,name=format_is_implicit,json=formatIsImplicit" json:"format_is_implicit,omitempty"`
	FormatIsExplicit     *bool `protobuf:"varint,4,opt,name=format_is_explicit,json=formatIsExplicit,def=0" json:"format_is_explicit,omitempty"`
	IsRegex              *bool `protobuf:"varint,5,opt,name=is_regex,json=isRegex,def=0" json:"is_regex,omitempty"`
	IsCaseSensitiveRegex *bool `protobuf:"varint,6,opt,name=is_case_sensitive_regex,json=isCaseSensitiveRegex,def=0" json:"is_case_sensitive_regex,omitempty"`
}

// Default values for StringCellValueArchive fields.
const (
	Default_StringCellValueArchive_FormatIsExplicit     = bool(false)
	Default_StringCellValueArchive_IsRegex              = bool(false)
	Default_StringCellValueArchive_IsCaseSensitiveRegex = bool(false)
)

func (x *StringCellValueArchive) Reset() {
	*x = StringCellValueArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringCellValueArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringCellValueArchive) ProtoMessage() {}

func (x *StringCellValueArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringCellValueArchive.ProtoReflect.Descriptor instead.
func (*StringCellValueArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{94}
}

func (x *StringCellValueArchive) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *StringCellValueArchive) GetFormat() *TSKFormatStructArchive {
	if x != nil {
		return x.Format
	}
	return nil
}

// Deprecated: Do not use.
func (x *StringCellValueArchive) GetFormatIsImplicit() bool {
	if x != nil && x.FormatIsImplicit != nil {
		return *x.FormatIsImplicit
	}
	return false
}

func (x *StringCellValueArchive) GetFormatIsExplicit() bool {
	if x != nil && x.FormatIsExplicit != nil {
		return *x.FormatIsExplicit
	}
	return Default_StringCellValueArchive_FormatIsExplicit
}

func (x *StringCellValueArchive) GetIsRegex() bool {
	if x != nil && x.IsRegex != nil {
		return *x.IsRegex
	}
	return Default_StringCellValueArchive_IsRegex
}

func (x *StringCellValueArchive) GetIsCaseSensitiveRegex() bool {
	if x != nil && x.IsCaseSensitiveRegex != nil {
		return *x.IsCaseSensitiveRegex
	}
	return Default_StringCellValueArchive_IsCaseSensitiveRegex
}

type ErrorCellValueArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorType       *int32   `protobuf:"varint,1,req,name=error_type,json=errorType" json:"error_type,omitempty"`
	ExtraInfoInt    *int32   `protobuf:"varint,3,opt,name=extra_info_int,json=extraInfoInt" json:"extra_info_int,omitempty"`
	ExtraInfoString *string  `protobuf:"bytes,4,opt,name=extra_info_string,json=extraInfoString" json:"extra_info_string,omitempty"`
	ExtraInfoDouble *float64 `protobuf:"fixed64,5,opt,name=extra_info_double,json=extraInfoDouble" json:"extra_info_double,omitempty"`
}

func (x *ErrorCellValueArchive) Reset() {
	*x = ErrorCellValueArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorCellValueArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorCellValueArchive) ProtoMessage() {}

func (x *ErrorCellValueArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorCellValueArchive.ProtoReflect.Descriptor instead.
func (*ErrorCellValueArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{95}
}

func (x *ErrorCellValueArchive) GetErrorType() int32 {
	if x != nil && x.ErrorType != nil {
		return *x.ErrorType
	}
	return 0
}

func (x *ErrorCellValueArchive) GetExtraInfoInt() int32 {
	if x != nil && x.ExtraInfoInt != nil {
		return *x.ExtraInfoInt
	}
	return 0
}

func (x *ErrorCellValueArchive) GetExtraInfoString() string {
	if x != nil && x.ExtraInfoString != nil {
		return *x.ExtraInfoString
	}
	return ""
}

func (x *ErrorCellValueArchive) GetExtraInfoDouble() float64 {
	if x != nil && x.ExtraInfoDouble != nil {
		return *x.ExtraInfoDouble
	}
	return 0
}

type CellValueArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellValueType *CellValueArchive_CellValueType `protobuf:"varint,1,req,name=cell_value_type,json=cellValueType,enum=TSCE.CellValueArchive_CellValueType" json:"cell_value_type,omitempty"`
	BooleanValue  *BooleanCellValueArchive        `protobuf:"bytes,2,opt,name=boolean_value,json=booleanValue" json:"boolean_value,omitempty"`
	DateValue     *DateCellValueArchive           `protobuf:"bytes,3,opt,name=date_value,json=dateValue" json:"date_value,omitempty"`
	NumberValue   *NumberCellValueArchive         `protobuf:"bytes,4,opt,name=number_value,json=numberValue" json:"number_value,omitempty"`
	StringValue   *StringCellValueArchive         `protobuf:"bytes,5,opt,name=string_value,json=stringValue" json:"string_value,omitempty"`
	ErrorValue    *ErrorCellValueArchive          `protobuf:"bytes,6,opt,name=error_value,json=errorValue" json:"error_value,omitempty"`
}

func (x *CellValueArchive) Reset() {
	*x = CellValueArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellValueArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellValueArchive) ProtoMessage() {}

func (x *CellValueArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellValueArchive.ProtoReflect.Descriptor instead.
func (*CellValueArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{96}
}

func (x *CellValueArchive) GetCellValueType() CellValueArchive_CellValueType {
	if x != nil && x.CellValueType != nil {
		return *x.CellValueType
	}
	return CellValueArchive_NIL_TYPE
}

func (x *CellValueArchive) GetBooleanValue() *BooleanCellValueArchive {
	if x != nil {
		return x.BooleanValue
	}
	return nil
}

func (x *CellValueArchive) GetDateValue() *DateCellValueArchive {
	if x != nil {
		return x.DateValue
	}
	return nil
}

func (x *CellValueArchive) GetNumberValue() *NumberCellValueArchive {
	if x != nil {
		return x.NumberValue
	}
	return nil
}

func (x *CellValueArchive) GetStringValue() *StringCellValueArchive {
	if x != nil {
		return x.StringValue
	}
	return nil
}

func (x *CellValueArchive) GetErrorValue() *ErrorCellValueArchive {
	if x != nil {
		return x.ErrorValue
	}
	return nil
}

type IndexSetArchive_IndexSetEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RangeBegin *int32 `protobuf:"varint,1,req,name=range_begin,json=rangeBegin" json:"range_begin,omitempty"`
	RangeEnd   *int32 `protobuf:"varint,2,opt,name=range_end,json=rangeEnd" json:"range_end,omitempty"`
}

func (x *IndexSetArchive_IndexSetEntry) Reset() {
	*x = IndexSetArchive_IndexSetEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexSetArchive_IndexSetEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexSetArchive_IndexSetEntry) ProtoMessage() {}

func (x *IndexSetArchive_IndexSetEntry) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexSetArchive_IndexSetEntry.ProtoReflect.Descriptor instead.
func (*IndexSetArchive_IndexSetEntry) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{5, 0}
}

func (x *IndexSetArchive_IndexSetEntry) GetRangeBegin() int32 {
	if x != nil && x.RangeBegin != nil {
		return *x.RangeBegin
	}
	return 0
}

func (x *IndexSetArchive_IndexSetEntry) GetRangeEnd() int32 {
	if x != nil && x.RangeEnd != nil {
		return *x.RangeEnd
	}
	return 0
}

type CellCoordSetArchive_ColumnEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Column *uint32          `protobuf:"varint,1,req,name=column" json:"column,omitempty"`
	RowSet *IndexSetArchive `protobuf:"bytes,2,req,name=row_set,json=rowSet" json:"row_set,omitempty"`
}

func (x *CellCoordSetArchive_ColumnEntry) Reset() {
	*x = CellCoordSetArchive_ColumnEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellCoordSetArchive_ColumnEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellCoordSetArchive_ColumnEntry) ProtoMessage() {}

func (x *CellCoordSetArchive_ColumnEntry) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellCoordSetArchive_ColumnEntry.ProtoReflect.Descriptor instead.
func (*CellCoordSetArchive_ColumnEntry) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{6, 0}
}

func (x *CellCoordSetArchive_ColumnEntry) GetColumn() uint32 {
	if x != nil && x.Column != nil {
		return *x.Column
	}
	return 0
}

func (x *CellCoordSetArchive_ColumnEntry) GetRowSet() *IndexSetArchive {
	if x != nil {
		return x.RowSet
	}
	return nil
}

type InternalCellRefSetArchive_OwnerEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerId  *uint32              `protobuf:"varint,1,req,name=owner_id,json=ownerId" json:"owner_id,omitempty"`
	CoordSet *CellCoordSetArchive `protobuf:"bytes,2,req,name=coord_set,json=coordSet" json:"coord_set,omitempty"`
}

func (x *InternalCellRefSetArchive_OwnerEntry) Reset() {
	*x = InternalCellRefSetArchive_OwnerEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternalCellRefSetArchive_OwnerEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalCellRefSetArchive_OwnerEntry) ProtoMessage() {}

func (x *InternalCellRefSetArchive_OwnerEntry) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalCellRefSetArchive_OwnerEntry.ProtoReflect.Descriptor instead.
func (*InternalCellRefSetArchive_OwnerEntry) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{7, 0}
}

func (x *InternalCellRefSetArchive_OwnerEntry) GetOwnerId() uint32 {
	if x != nil && x.OwnerId != nil {
		return *x.OwnerId
	}
	return 0
}

func (x *InternalCellRefSetArchive_OwnerEntry) GetCoordSet() *CellCoordSetArchive {
	if x != nil {
		return x.CoordSet
	}
	return nil
}

type CellRefSetArchive_OwnerEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerUid *UUID                `protobuf:"bytes,1,req,name=owner_uid,json=ownerUid" json:"owner_uid,omitempty"`
	CoordSet *CellCoordSetArchive `protobuf:"bytes,2,req,name=coord_set,json=coordSet" json:"coord_set,omitempty"`
}

func (x *CellRefSetArchive_OwnerEntry) Reset() {
	*x = CellRefSetArchive_OwnerEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellRefSetArchive_OwnerEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellRefSetArchive_OwnerEntry) ProtoMessage() {}

func (x *CellRefSetArchive_OwnerEntry) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellRefSetArchive_OwnerEntry.ProtoReflect.Descriptor instead.
func (*CellRefSetArchive_OwnerEntry) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{10, 0}
}

func (x *CellRefSetArchive_OwnerEntry) GetOwnerUid() *UUID {
	if x != nil {
		return x.OwnerUid
	}
	return nil
}

func (x *CellRefSetArchive_OwnerEntry) GetCoordSet() *CellCoordSetArchive {
	if x != nil {
		return x.CoordSet
	}
	return nil
}

type UidCoordSetArchive_ColumnEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Column *UUID   `protobuf:"bytes,1,req,name=column" json:"column,omitempty"`
	RowSet []*UUID `protobuf:"bytes,2,rep,name=row_set,json=rowSet" json:"row_set,omitempty"`
}

func (x *UidCoordSetArchive_ColumnEntry) Reset() {
	*x = UidCoordSetArchive_ColumnEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UidCoordSetArchive_ColumnEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UidCoordSetArchive_ColumnEntry) ProtoMessage() {}

func (x *UidCoordSetArchive_ColumnEntry) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UidCoordSetArchive_ColumnEntry.ProtoReflect.Descriptor instead.
func (*UidCoordSetArchive_ColumnEntry) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{11, 0}
}

func (x *UidCoordSetArchive_ColumnEntry) GetColumn() *UUID {
	if x != nil {
		return x.Column
	}
	return nil
}

func (x *UidCoordSetArchive_ColumnEntry) GetRowSet() []*UUID {
	if x != nil {
		return x.RowSet
	}
	return nil
}

type UidCellRefSetArchive_OwnerEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerUid *UUID               `protobuf:"bytes,1,req,name=owner_uid,json=ownerUid" json:"owner_uid,omitempty"`
	CoordSet *UidCoordSetArchive `protobuf:"bytes,2,req,name=coord_set,json=coordSet" json:"coord_set,omitempty"`
}

func (x *UidCellRefSetArchive_OwnerEntry) Reset() {
	*x = UidCellRefSetArchive_OwnerEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UidCellRefSetArchive_OwnerEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UidCellRefSetArchive_OwnerEntry) ProtoMessage() {}

func (x *UidCellRefSetArchive_OwnerEntry) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UidCellRefSetArchive_OwnerEntry.ProtoReflect.Descriptor instead.
func (*UidCellRefSetArchive_OwnerEntry) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{12, 0}
}

func (x *UidCellRefSetArchive_OwnerEntry) GetOwnerUid() *UUID {
	if x != nil {
		return x.OwnerUid
	}
	return nil
}

func (x *UidCellRefSetArchive_OwnerEntry) GetCoordSet() *UidCoordSetArchive {
	if x != nil {
		return x.CoordSet
	}
	return nil
}

type CoordMapperArchive_BaseToViewEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseColumnOrRow *uint32 `protobuf:"varint,1,req,name=base_column_or_row,json=baseColumnOrRow" json:"base_column_or_row,omitempty"`
	ViewColumnOrRow *uint32 `protobuf:"varint,2,req,name=view_column_or_row,json=viewColumnOrRow" json:"view_column_or_row,omitempty"`
}

func (x *CoordMapperArchive_BaseToViewEntry) Reset() {
	*x = CoordMapperArchive_BaseToViewEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoordMapperArchive_BaseToViewEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoordMapperArchive_BaseToViewEntry) ProtoMessage() {}

func (x *CoordMapperArchive_BaseToViewEntry) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoordMapperArchive_BaseToViewEntry.ProtoReflect.Descriptor instead.
func (*CoordMapperArchive_BaseToViewEntry) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{14, 0}
}

func (x *CoordMapperArchive_BaseToViewEntry) GetBaseColumnOrRow() uint32 {
	if x != nil && x.BaseColumnOrRow != nil {
		return *x.BaseColumnOrRow
	}
	return 0
}

func (x *CoordMapperArchive_BaseToViewEntry) GetViewColumnOrRow() uint32 {
	if x != nil && x.ViewColumnOrRow != nil {
		return *x.ViewColumnOrRow
	}
	return 0
}

type CoordMapperArchive_SummaryToViewEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SummaryColumnOrRow *uint32 `protobuf:"varint,1,req,name=summary_column_or_row,json=summaryColumnOrRow" json:"summary_column_or_row,omitempty"`
	ViewColumnOrRow    *uint32 `protobuf:"varint,2,req,name=view_column_or_row,json=viewColumnOrRow" json:"view_column_or_row,omitempty"`
}

func (x *CoordMapperArchive_SummaryToViewEntry) Reset() {
	*x = CoordMapperArchive_SummaryToViewEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoordMapperArchive_SummaryToViewEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoordMapperArchive_SummaryToViewEntry) ProtoMessage() {}

func (x *CoordMapperArchive_SummaryToViewEntry) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoordMapperArchive_SummaryToViewEntry.ProtoReflect.Descriptor instead.
func (*CoordMapperArchive_SummaryToViewEntry) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{14, 1}
}

func (x *CoordMapperArchive_SummaryToViewEntry) GetSummaryColumnOrRow() uint32 {
	if x != nil && x.SummaryColumnOrRow != nil {
		return *x.SummaryColumnOrRow
	}
	return 0
}

func (x *CoordMapperArchive_SummaryToViewEntry) GetViewColumnOrRow() uint32 {
	if x != nil && x.ViewColumnOrRow != nil {
		return *x.ViewColumnOrRow
	}
	return 0
}

type RangePrecedentsTileArchive_FromToRangeArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromCoord    *CellCoordinateArchive `protobuf:"bytes,1,req,name=from_coord,json=fromCoord" json:"from_coord,omitempty"`
	RefersToRect *CellRectArchive       `protobuf:"bytes,2,req,name=refers_to_rect,json=refersToRect" json:"refers_to_rect,omitempty"`
}

func (x *RangePrecedentsTileArchive_FromToRangeArchive) Reset() {
	*x = RangePrecedentsTileArchive_FromToRangeArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RangePrecedentsTileArchive_FromToRangeArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RangePrecedentsTileArchive_FromToRangeArchive) ProtoMessage() {}

func (x *RangePrecedentsTileArchive_FromToRangeArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RangePrecedentsTileArchive_FromToRangeArchive.ProtoReflect.Descriptor instead.
func (*RangePrecedentsTileArchive_FromToRangeArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{33, 0}
}

func (x *RangePrecedentsTileArchive_FromToRangeArchive) GetFromCoord() *CellCoordinateArchive {
	if x != nil {
		return x.FromCoord
	}
	return nil
}

func (x *RangePrecedentsTileArchive_FromToRangeArchive) GetRefersToRect() *CellRectArchive {
	if x != nil {
		return x.RefersToRect
	}
	return nil
}

type SpanningDependenciesArchive_ReferringColumnToLocalCells struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Column         *uint32                                   `protobuf:"varint,1,req,name=column" json:"column,omitempty"`
	RangeContext   *SpanningDependenciesArchive_RangeContext `protobuf:"varint,2,req,name=range_context,json=rangeContext,enum=TSCE.SpanningDependenciesArchive_RangeContext" json:"range_context,omitempty"`
	CellCoordinate []*CellCoordinateArchive                  `protobuf:"bytes,3,rep,name=cell_coordinate,json=cellCoordinate" json:"cell_coordinate,omitempty"`
}

func (x *SpanningDependenciesArchive_ReferringColumnToLocalCells) Reset() {
	*x = SpanningDependenciesArchive_ReferringColumnToLocalCells{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpanningDependenciesArchive_ReferringColumnToLocalCells) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanningDependenciesArchive_ReferringColumnToLocalCells) ProtoMessage() {}

func (x *SpanningDependenciesArchive_ReferringColumnToLocalCells) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanningDependenciesArchive_ReferringColumnToLocalCells.ProtoReflect.Descriptor instead.
func (*SpanningDependenciesArchive_ReferringColumnToLocalCells) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{35, 0}
}

func (x *SpanningDependenciesArchive_ReferringColumnToLocalCells) GetColumn() uint32 {
	if x != nil && x.Column != nil {
		return *x.Column
	}
	return 0
}

func (x *SpanningDependenciesArchive_ReferringColumnToLocalCells) GetRangeContext() SpanningDependenciesArchive_RangeContext {
	if x != nil && x.RangeContext != nil {
		return *x.RangeContext
	}
	return SpanningDependenciesArchive_DEFAULT
}

func (x *SpanningDependenciesArchive_ReferringColumnToLocalCells) GetCellCoordinate() []*CellCoordinateArchive {
	if x != nil {
		return x.CellCoordinate
	}
	return nil
}

type SpanningDependenciesArchive_ReferringColumnToRemoteCells struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Column                *uint32                                   `protobuf:"varint,1,req,name=column" json:"column,omitempty"`
	RangeContext          *SpanningDependenciesArchive_RangeContext `protobuf:"varint,2,req,name=range_context,json=rangeContext,enum=TSCE.SpanningDependenciesArchive_RangeContext" json:"range_context,omitempty"`
	InternalCellReference []*InternalCellReferenceArchive           `protobuf:"bytes,3,rep,name=internal_cell_reference,json=internalCellReference" json:"internal_cell_reference,omitempty"`
}

func (x *SpanningDependenciesArchive_ReferringColumnToRemoteCells) Reset() {
	*x = SpanningDependenciesArchive_ReferringColumnToRemoteCells{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpanningDependenciesArchive_ReferringColumnToRemoteCells) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanningDependenciesArchive_ReferringColumnToRemoteCells) ProtoMessage() {}

func (x *SpanningDependenciesArchive_ReferringColumnToRemoteCells) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanningDependenciesArchive_ReferringColumnToRemoteCells.ProtoReflect.Descriptor instead.
func (*SpanningDependenciesArchive_ReferringColumnToRemoteCells) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{35, 1}
}

func (x *SpanningDependenciesArchive_ReferringColumnToRemoteCells) GetColumn() uint32 {
	if x != nil && x.Column != nil {
		return *x.Column
	}
	return 0
}

func (x *SpanningDependenciesArchive_ReferringColumnToRemoteCells) GetRangeContext() SpanningDependenciesArchive_RangeContext {
	if x != nil && x.RangeContext != nil {
		return *x.RangeContext
	}
	return SpanningDependenciesArchive_DEFAULT
}

func (x *SpanningDependenciesArchive_ReferringColumnToRemoteCells) GetInternalCellReference() []*InternalCellReferenceArchive {
	if x != nil {
		return x.InternalCellReference
	}
	return nil
}

type SpanningDependenciesExpandedArchive_ExtentRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExtentBegin *uint32 `protobuf:"varint,1,req,name=extent_begin,json=extentBegin" json:"extent_begin,omitempty"`
	ExtentEnd   *uint32 `protobuf:"varint,2,opt,name=extent_end,json=extentEnd" json:"extent_end,omitempty"`
}

func (x *SpanningDependenciesExpandedArchive_ExtentRange) Reset() {
	*x = SpanningDependenciesExpandedArchive_ExtentRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpanningDependenciesExpandedArchive_ExtentRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanningDependenciesExpandedArchive_ExtentRange) ProtoMessage() {}

func (x *SpanningDependenciesExpandedArchive_ExtentRange) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanningDependenciesExpandedArchive_ExtentRange.ProtoReflect.Descriptor instead.
func (*SpanningDependenciesExpandedArchive_ExtentRange) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{36, 0}
}

func (x *SpanningDependenciesExpandedArchive_ExtentRange) GetExtentBegin() uint32 {
	if x != nil && x.ExtentBegin != nil {
		return *x.ExtentBegin
	}
	return 0
}

func (x *SpanningDependenciesExpandedArchive_ExtentRange) GetExtentEnd() uint32 {
	if x != nil && x.ExtentEnd != nil {
		return *x.ExtentEnd
	}
	return 0
}

type SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerId      *uint32                                            `protobuf:"varint,1,req,name=owner_id,json=ownerId" json:"owner_id,omitempty"`
	RangeContext *SpanningDependenciesExpandedArchive_RangeContext  `protobuf:"varint,2,req,name=range_context,json=rangeContext,enum=TSCE.SpanningDependenciesExpandedArchive_RangeContext" json:"range_context,omitempty"`
	Ranges       []*SpanningDependenciesExpandedArchive_ExtentRange `protobuf:"bytes,3,rep,name=ranges" json:"ranges,omitempty"`
}

func (x *SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext) Reset() {
	*x = SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext) ProtoMessage() {}

func (x *SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext.ProtoReflect.Descriptor instead.
func (*SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{36, 1}
}

func (x *SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext) GetOwnerId() uint32 {
	if x != nil && x.OwnerId != nil {
		return *x.OwnerId
	}
	return 0
}

func (x *SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext) GetRangeContext() SpanningDependenciesExpandedArchive_RangeContext {
	if x != nil && x.RangeContext != nil {
		return *x.RangeContext
	}
	return SpanningDependenciesExpandedArchive_DEFAULT
}

func (x *SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext) GetRanges() []*SpanningDependenciesExpandedArchive_ExtentRange {
	if x != nil {
		return x.Ranges
	}
	return nil
}

type SpanningDependenciesExpandedArchive_CellCoordRefersToExtents struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coordinate           *CellCoordinateArchive                                                 `protobuf:"bytes,1,req,name=coordinate" json:"coordinate,omitempty"`
	RangesByTableContext []*SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext `protobuf:"bytes,2,rep,name=ranges_by_table_context,json=rangesByTableContext" json:"ranges_by_table_context,omitempty"`
}

func (x *SpanningDependenciesExpandedArchive_CellCoordRefersToExtents) Reset() {
	*x = SpanningDependenciesExpandedArchive_CellCoordRefersToExtents{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpanningDependenciesExpandedArchive_CellCoordRefersToExtents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanningDependenciesExpandedArchive_CellCoordRefersToExtents) ProtoMessage() {}

func (x *SpanningDependenciesExpandedArchive_CellCoordRefersToExtents) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanningDependenciesExpandedArchive_CellCoordRefersToExtents.ProtoReflect.Descriptor instead.
func (*SpanningDependenciesExpandedArchive_CellCoordRefersToExtents) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{36, 2}
}

func (x *SpanningDependenciesExpandedArchive_CellCoordRefersToExtents) GetCoordinate() *CellCoordinateArchive {
	if x != nil {
		return x.Coordinate
	}
	return nil
}

func (x *SpanningDependenciesExpandedArchive_CellCoordRefersToExtents) GetRangesByTableContext() []*SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext {
	if x != nil {
		return x.RangesByTableContext
	}
	return nil
}

type CellErrorsArchive_ErrorForCell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coordinate   *CellCoordinateArchive         `protobuf:"bytes,1,req,name=coordinate" json:"coordinate,omitempty"`
	ErrorFlavor  *CellErrorsArchive_ErrorFlavor `protobuf:"varint,2,req,name=error_flavor,json=errorFlavor,enum=TSCE.CellErrorsArchive_ErrorFlavor" json:"error_flavor,omitempty"`
	ErrDueToCell *InternalCellReferenceArchive  `protobuf:"bytes,3,opt,name=err_due_to_cell,json=errDueToCell" json:"err_due_to_cell,omitempty"`
}

func (x *CellErrorsArchive_ErrorForCell) Reset() {
	*x = CellErrorsArchive_ErrorForCell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellErrorsArchive_ErrorForCell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellErrorsArchive_ErrorForCell) ProtoMessage() {}

func (x *CellErrorsArchive_ErrorForCell) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellErrorsArchive_ErrorForCell.ProtoReflect.Descriptor instead.
func (*CellErrorsArchive_ErrorForCell) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{39, 0}
}

func (x *CellErrorsArchive_ErrorForCell) GetCoordinate() *CellCoordinateArchive {
	if x != nil {
		return x.Coordinate
	}
	return nil
}

func (x *CellErrorsArchive_ErrorForCell) GetErrorFlavor() CellErrorsArchive_ErrorFlavor {
	if x != nil && x.ErrorFlavor != nil {
		return *x.ErrorFlavor
	}
	return CellErrorsArchive_NONE
}

func (x *CellErrorsArchive_ErrorForCell) GetErrDueToCell() *InternalCellReferenceArchive {
	if x != nil {
		return x.ErrDueToCell
	}
	return nil
}

type UuidReferencesArchive_TableRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerUuid *UUID                `protobuf:"bytes,1,req,name=owner_uuid,json=ownerUuid" json:"owner_uuid,omitempty"`
	CoordSet  *CellCoordSetArchive `protobuf:"bytes,2,opt,name=coord_set,json=coordSet" json:"coord_set,omitempty"`
}

func (x *UuidReferencesArchive_TableRef) Reset() {
	*x = UuidReferencesArchive_TableRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UuidReferencesArchive_TableRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UuidReferencesArchive_TableRef) ProtoMessage() {}

func (x *UuidReferencesArchive_TableRef) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UuidReferencesArchive_TableRef.ProtoReflect.Descriptor instead.
func (*UuidReferencesArchive_TableRef) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{40, 0}
}

func (x *UuidReferencesArchive_TableRef) GetOwnerUuid() *UUID {
	if x != nil {
		return x.OwnerUuid
	}
	return nil
}

func (x *UuidReferencesArchive_TableRef) GetCoordSet() *CellCoordSetArchive {
	if x != nil {
		return x.CoordSet
	}
	return nil
}

type UuidReferencesArchive_UuidRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid     *UUID                `protobuf:"bytes,1,req,name=uuid" json:"uuid,omitempty"`
	CoordSet *CellCoordSetArchive `protobuf:"bytes,2,opt,name=coord_set,json=coordSet" json:"coord_set,omitempty"`
}

func (x *UuidReferencesArchive_UuidRef) Reset() {
	*x = UuidReferencesArchive_UuidRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UuidReferencesArchive_UuidRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UuidReferencesArchive_UuidRef) ProtoMessage() {}

func (x *UuidReferencesArchive_UuidRef) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UuidReferencesArchive_UuidRef.ProtoReflect.Descriptor instead.
func (*UuidReferencesArchive_UuidRef) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{40, 1}
}

func (x *UuidReferencesArchive_UuidRef) GetUuid() *UUID {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *UuidReferencesArchive_UuidRef) GetCoordSet() *CellCoordSetArchive {
	if x != nil {
		return x.CoordSet
	}
	return nil
}

type UuidReferencesArchive_TableWithUuidRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerUuid *UUID                            `protobuf:"bytes,1,req,name=owner_uuid,json=ownerUuid" json:"owner_uuid,omitempty"`
	UuidRefs  []*UuidReferencesArchive_UuidRef `protobuf:"bytes,2,rep,name=uuid_refs,json=uuidRefs" json:"uuid_refs,omitempty"`
}

func (x *UuidReferencesArchive_TableWithUuidRef) Reset() {
	*x = UuidReferencesArchive_TableWithUuidRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UuidReferencesArchive_TableWithUuidRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UuidReferencesArchive_TableWithUuidRef) ProtoMessage() {}

func (x *UuidReferencesArchive_TableWithUuidRef) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UuidReferencesArchive_TableWithUuidRef.ProtoReflect.Descriptor instead.
func (*UuidReferencesArchive_TableWithUuidRef) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{40, 2}
}

func (x *UuidReferencesArchive_TableWithUuidRef) GetOwnerUuid() *UUID {
	if x != nil {
		return x.OwnerUuid
	}
	return nil
}

func (x *UuidReferencesArchive_TableWithUuidRef) GetUuidRefs() []*UuidReferencesArchive_UuidRef {
	if x != nil {
		return x.UuidRefs
	}
	return nil
}

type OwnerIDMapArchive_OwnerIDMapArchiveEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InternalOwnerId *uint32        `protobuf:"varint,1,req,name=internal_owner_id,json=internalOwnerId" json:"internal_owner_id,omitempty"`
	OwnerId         *CFUUIDArchive `protobuf:"bytes,2,req,name=owner_id,json=ownerId" json:"owner_id,omitempty"`
}

func (x *OwnerIDMapArchive_OwnerIDMapArchiveEntry) Reset() {
	*x = OwnerIDMapArchive_OwnerIDMapArchiveEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OwnerIDMapArchive_OwnerIDMapArchiveEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OwnerIDMapArchive_OwnerIDMapArchiveEntry) ProtoMessage() {}

func (x *OwnerIDMapArchive_OwnerIDMapArchiveEntry) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OwnerIDMapArchive_OwnerIDMapArchiveEntry.ProtoReflect.Descriptor instead.
func (*OwnerIDMapArchive_OwnerIDMapArchiveEntry) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{44, 0}
}

func (x *OwnerIDMapArchive_OwnerIDMapArchiveEntry) GetInternalOwnerId() uint32 {
	if x != nil && x.InternalOwnerId != nil {
		return *x.InternalOwnerId
	}
	return 0
}

func (x *OwnerIDMapArchive_OwnerIDMapArchiveEntry) GetOwnerId() *CFUUIDArchive {
	if x != nil {
		return x.OwnerId
	}
	return nil
}

type RemoteDataValueMapArchive_RemoteDataMapEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Specifier *RemoteDataSpecifierArchive `protobuf:"bytes,1,req,name=specifier" json:"specifier,omitempty"`
	Value     *CellValueArchive           `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
}

func (x *RemoteDataValueMapArchive_RemoteDataMapEntry) Reset() {
	*x = RemoteDataValueMapArchive_RemoteDataMapEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteDataValueMapArchive_RemoteDataMapEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteDataValueMapArchive_RemoteDataMapEntry) ProtoMessage() {}

func (x *RemoteDataValueMapArchive_RemoteDataMapEntry) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteDataValueMapArchive_RemoteDataMapEntry.ProtoReflect.Descriptor instead.
func (*RemoteDataValueMapArchive_RemoteDataMapEntry) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{48, 0}
}

func (x *RemoteDataValueMapArchive_RemoteDataMapEntry) GetSpecifier() *RemoteDataSpecifierArchive {
	if x != nil {
		return x.Specifier
	}
	return nil
}

func (x *RemoteDataValueMapArchive_RemoteDataMapEntry) GetValue() *CellValueArchive {
	if x != nil {
		return x.Value
	}
	return nil
}

type StockArchive_AttributeEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attribute *uint32 `protobuf:"varint,1,req,name=attribute" json:"attribute,omitempty"`
	Value     *string `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
}

func (x *StockArchive_AttributeEntry) Reset() {
	*x = StockArchive_AttributeEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockArchive_AttributeEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockArchive_AttributeEntry) ProtoMessage() {}

func (x *StockArchive_AttributeEntry) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockArchive_AttributeEntry.ProtoReflect.Descriptor instead.
func (*StockArchive_AttributeEntry) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{49, 0}
}

func (x *StockArchive_AttributeEntry) GetAttribute() uint32 {
	if x != nil && x.Attribute != nil {
		return *x.Attribute
	}
	return 0
}

func (x *StockArchive_AttributeEntry) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type UuidSetStoreArchive_UuidSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid       []*UUID `protobuf:"bytes,1,rep,name=uuid" json:"uuid,omitempty"`
	IndexOfSet *uint32 `protobuf:"varint,2,req,name=index_of_set,json=indexOfSet" json:"index_of_set,omitempty"`
}

func (x *UuidSetStoreArchive_UuidSet) Reset() {
	*x = UuidSetStoreArchive_UuidSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UuidSetStoreArchive_UuidSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UuidSetStoreArchive_UuidSet) ProtoMessage() {}

func (x *UuidSetStoreArchive_UuidSet) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UuidSetStoreArchive_UuidSet.ProtoReflect.Descriptor instead.
func (*UuidSetStoreArchive_UuidSet) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{54, 0}
}

func (x *UuidSetStoreArchive_UuidSet) GetUuid() []*UUID {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *UuidSetStoreArchive_UuidSet) GetIndexOfSet() uint32 {
	if x != nil && x.IndexOfSet != nil {
		return *x.IndexOfSet
	}
	return 0
}

type UuidReferenceMapArchive_CellRefsForUuid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid     *UUID                           `protobuf:"bytes,1,req,name=uuid" json:"uuid,omitempty"`
	CellRef  []*InternalCellReferenceArchive `protobuf:"bytes,2,rep,name=cell_ref,json=cellRef" json:"cell_ref,omitempty"`
	CellRefs *InternalCellRefSetArchive      `protobuf:"bytes,3,opt,name=cell_refs,json=cellRefs" json:"cell_refs,omitempty"`
}

func (x *UuidReferenceMapArchive_CellRefsForUuid) Reset() {
	*x = UuidReferenceMapArchive_CellRefsForUuid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UuidReferenceMapArchive_CellRefsForUuid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UuidReferenceMapArchive_CellRefsForUuid) ProtoMessage() {}

func (x *UuidReferenceMapArchive_CellRefsForUuid) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UuidReferenceMapArchive_CellRefsForUuid.ProtoReflect.Descriptor instead.
func (*UuidReferenceMapArchive_CellRefsForUuid) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{55, 0}
}

func (x *UuidReferenceMapArchive_CellRefsForUuid) GetUuid() *UUID {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *UuidReferenceMapArchive_CellRefsForUuid) GetCellRef() []*InternalCellReferenceArchive {
	if x != nil {
		return x.CellRef
	}
	return nil
}

func (x *UuidReferenceMapArchive_CellRefsForUuid) GetCellRefs() *InternalCellRefSetArchive {
	if x != nil {
		return x.CellRefs
	}
	return nil
}

type GroupByNodeMapArchive_CellRefsForGroupNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupNodeUid *UUID                      `protobuf:"bytes,1,req,name=group_node_uid,json=groupNodeUid" json:"group_node_uid,omitempty"`
	CellRefs     *InternalCellRefSetArchive `protobuf:"bytes,3,opt,name=cell_refs,json=cellRefs" json:"cell_refs,omitempty"`
}

func (x *GroupByNodeMapArchive_CellRefsForGroupNode) Reset() {
	*x = GroupByNodeMapArchive_CellRefsForGroupNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupByNodeMapArchive_CellRefsForGroupNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupByNodeMapArchive_CellRefsForGroupNode) ProtoMessage() {}

func (x *GroupByNodeMapArchive_CellRefsForGroupNode) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupByNodeMapArchive_CellRefsForGroupNode.ProtoReflect.Descriptor instead.
func (*GroupByNodeMapArchive_CellRefsForGroupNode) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{56, 0}
}

func (x *GroupByNodeMapArchive_CellRefsForGroupNode) GetGroupNodeUid() *UUID {
	if x != nil {
		return x.GroupNodeUid
	}
	return nil
}

func (x *GroupByNodeMapArchive_CellRefsForGroupNode) GetCellRefs() *InternalCellRefSetArchive {
	if x != nil {
		return x.CellRefs
	}
	return nil
}

type GroupByNodeMapArchive_GroupNodesForGroupBy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupByUid       *UUID                                         `protobuf:"bytes,1,req,name=group_by_uid,json=groupByUid" json:"group_by_uid,omitempty"`
	RefsForGroupNode []*GroupByNodeMapArchive_CellRefsForGroupNode `protobuf:"bytes,2,rep,name=refs_for_group_node,json=refsForGroupNode" json:"refs_for_group_node,omitempty"`
}

func (x *GroupByNodeMapArchive_GroupNodesForGroupBy) Reset() {
	*x = GroupByNodeMapArchive_GroupNodesForGroupBy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupByNodeMapArchive_GroupNodesForGroupBy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupByNodeMapArchive_GroupNodesForGroupBy) ProtoMessage() {}

func (x *GroupByNodeMapArchive_GroupNodesForGroupBy) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupByNodeMapArchive_GroupNodesForGroupBy.ProtoReflect.Descriptor instead.
func (*GroupByNodeMapArchive_GroupNodesForGroupBy) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{56, 1}
}

func (x *GroupByNodeMapArchive_GroupNodesForGroupBy) GetGroupByUid() *UUID {
	if x != nil {
		return x.GroupByUid
	}
	return nil
}

func (x *GroupByNodeMapArchive_GroupNodesForGroupBy) GetRefsForGroupNode() []*GroupByNodeMapArchive_CellRefsForGroupNode {
	if x != nil {
		return x.RefsForGroupNode
	}
	return nil
}

type CategoryReferenceArchive_CatRefUidList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid []*UUID `protobuf:"bytes,1,rep,name=uid" json:"uid,omitempty"`
}

func (x *CategoryReferenceArchive_CatRefUidList) Reset() {
	*x = CategoryReferenceArchive_CatRefUidList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryReferenceArchive_CatRefUidList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryReferenceArchive_CatRefUidList) ProtoMessage() {}

func (x *CategoryReferenceArchive_CatRefUidList) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryReferenceArchive_CatRefUidList.ProtoReflect.Descriptor instead.
func (*CategoryReferenceArchive_CatRefUidList) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{59, 0}
}

func (x *CategoryReferenceArchive_CatRefUidList) GetUid() []*UUID {
	if x != nil {
		return x.Uid
	}
	return nil
}

type ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RowHandle      *uint32 `protobuf:"varint,1,req,name=row_handle,json=rowHandle" json:"row_handle,omitempty"`
	ColumnHandle   *uint32 `protobuf:"varint,2,req,name=column_handle,json=columnHandle" json:"column_handle,omitempty"`
	RowIsSticky    *uint32 `protobuf:"varint,3,req,name=row_is_sticky,json=rowIsSticky" json:"row_is_sticky,omitempty"`
	ColumnIsSticky *uint32 `protobuf:"varint,4,req,name=column_is_sticky,json=columnIsSticky" json:"column_is_sticky,omitempty"`
}

func (x *ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive) Reset() {
	*x = ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive) ProtoMessage() {}

func (x *ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive.ProtoReflect.Descriptor instead.
func (*ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{60, 0}
}

func (x *ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive) GetRowHandle() uint32 {
	if x != nil && x.RowHandle != nil {
		return *x.RowHandle
	}
	return 0
}

func (x *ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive) GetColumnHandle() uint32 {
	if x != nil && x.ColumnHandle != nil {
		return *x.ColumnHandle
	}
	return 0
}

func (x *ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive) GetRowIsSticky() uint32 {
	if x != nil && x.RowIsSticky != nil {
		return *x.RowIsSticky
	}
	return 0
}

func (x *ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive) GetColumnIsSticky() uint32 {
	if x != nil && x.ColumnIsSticky != nil {
		return *x.ColumnIsSticky
	}
	return 0
}

type ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RowHandle                               *uint32        `protobuf:"varint,1,req,name=row_handle,json=rowHandle" json:"row_handle,omitempty"`
	ColumnHandle                            *uint32        `protobuf:"varint,2,req,name=column_handle,json=columnHandle" json:"column_handle,omitempty"`
	RowIsSticky                             *uint32        `protobuf:"varint,3,req,name=row_is_sticky,json=rowIsSticky" json:"row_is_sticky,omitempty"`
	ColumnIsSticky                          *uint32        `protobuf:"varint,4,req,name=column_is_sticky,json=columnIsSticky" json:"column_is_sticky,omitempty"`
	TableId                                 *CFUUIDArchive `protobuf:"bytes,5,req,name=table_id,json=tableId" json:"table_id,omitempty"`
	ASTReferenceWhitespaceAfterSheetName    *string        `protobuf:"bytes,6,opt,name=AST_reference_whitespace_after_sheet_name,json=ASTReferenceWhitespaceAfterSheetName" json:"AST_reference_whitespace_after_sheet_name,omitempty"`
	ASTReferenceWhitespaceBeforeTableName   *string        `protobuf:"bytes,7,opt,name=AST_reference_whitespace_before_table_name,json=ASTReferenceWhitespaceBeforeTableName" json:"AST_reference_whitespace_before_table_name,omitempty"`
	ASTReferenceWhitespaceAfterTableName    *string        `protobuf:"bytes,8,opt,name=AST_reference_whitespace_after_table_name,json=ASTReferenceWhitespaceAfterTableName" json:"AST_reference_whitespace_after_table_name,omitempty"`
	ASTReferenceWhitespaceBeforeCellAddress *string        `protobuf:"bytes,9,opt,name=AST_reference_whitespace_before_cell_address,json=ASTReferenceWhitespaceBeforeCellAddress" json:"AST_reference_whitespace_before_cell_address,omitempty"`
}

func (x *ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive) Reset() {
	*x = ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive) ProtoMessage() {}

func (x *ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive.ProtoReflect.Descriptor instead.
func (*ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{60, 1}
}

func (x *ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive) GetRowHandle() uint32 {
	if x != nil && x.RowHandle != nil {
		return *x.RowHandle
	}
	return 0
}

func (x *ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive) GetColumnHandle() uint32 {
	if x != nil && x.ColumnHandle != nil {
		return *x.ColumnHandle
	}
	return 0
}

func (x *ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive) GetRowIsSticky() uint32 {
	if x != nil && x.RowIsSticky != nil {
		return *x.RowIsSticky
	}
	return 0
}

func (x *ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive) GetColumnIsSticky() uint32 {
	if x != nil && x.ColumnIsSticky != nil {
		return *x.ColumnIsSticky
	}
	return 0
}

func (x *ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive) GetTableId() *CFUUIDArchive {
	if x != nil {
		return x.TableId
	}
	return nil
}

func (x *ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive) GetASTReferenceWhitespaceAfterSheetName() string {
	if x != nil && x.ASTReferenceWhitespaceAfterSheetName != nil {
		return *x.ASTReferenceWhitespaceAfterSheetName
	}
	return ""
}

func (x *ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive) GetASTReferenceWhitespaceBeforeTableName() string {
	if x != nil && x.ASTReferenceWhitespaceBeforeTableName != nil {
		return *x.ASTReferenceWhitespaceBeforeTableName
	}
	return ""
}

func (x *ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive) GetASTReferenceWhitespaceAfterTableName() string {
	if x != nil && x.ASTReferenceWhitespaceAfterTableName != nil {
		return *x.ASTReferenceWhitespaceAfterTableName
	}
	return ""
}

func (x *ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive) GetASTReferenceWhitespaceBeforeCellAddress() string {
	if x != nil && x.ASTReferenceWhitespaceBeforeCellAddress != nil {
		return *x.ASTReferenceWhitespaceBeforeCellAddress
	}
	return ""
}

type ASTNodeArrayArchive_ASTColumnCoordinateArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Column   *int32 `protobuf:"zigzag32,1,req,name=column" json:"column,omitempty"`
	Absolute *bool  `protobuf:"varint,2,opt,name=absolute,def=0" json:"absolute,omitempty"`
}

// Default values for ASTNodeArrayArchive_ASTColumnCoordinateArchive fields.
const (
	Default_ASTNodeArrayArchive_ASTColumnCoordinateArchive_Absolute = bool(false)
)

func (x *ASTNodeArrayArchive_ASTColumnCoordinateArchive) Reset() {
	*x = ASTNodeArrayArchive_ASTColumnCoordinateArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ASTNodeArrayArchive_ASTColumnCoordinateArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ASTNodeArrayArchive_ASTColumnCoordinateArchive) ProtoMessage() {}

func (x *ASTNodeArrayArchive_ASTColumnCoordinateArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ASTNodeArrayArchive_ASTColumnCoordinateArchive.ProtoReflect.Descriptor instead.
func (*ASTNodeArrayArchive_ASTColumnCoordinateArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{60, 2}
}

func (x *ASTNodeArrayArchive_ASTColumnCoordinateArchive) GetColumn() int32 {
	if x != nil && x.Column != nil {
		return *x.Column
	}
	return 0
}

func (x *ASTNodeArrayArchive_ASTColumnCoordinateArchive) GetAbsolute() bool {
	if x != nil && x.Absolute != nil {
		return *x.Absolute
	}
	return Default_ASTNodeArrayArchive_ASTColumnCoordinateArchive_Absolute
}

type ASTNodeArrayArchive_ASTRowCoordinateArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Row      *int32 `protobuf:"zigzag32,1,req,name=row" json:"row,omitempty"`
	Absolute *bool  `protobuf:"varint,2,opt,name=absolute,def=0" json:"absolute,omitempty"`
}

// Default values for ASTNodeArrayArchive_ASTRowCoordinateArchive fields.
const (
	Default_ASTNodeArrayArchive_ASTRowCoordinateArchive_Absolute = bool(false)
)

func (x *ASTNodeArrayArchive_ASTRowCoordinateArchive) Reset() {
	*x = ASTNodeArrayArchive_ASTRowCoordinateArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ASTNodeArrayArchive_ASTRowCoordinateArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ASTNodeArrayArchive_ASTRowCoordinateArchive) ProtoMessage() {}

func (x *ASTNodeArrayArchive_ASTRowCoordinateArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ASTNodeArrayArchive_ASTRowCoordinateArchive.ProtoReflect.Descriptor instead.
func (*ASTNodeArrayArchive_ASTRowCoordinateArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{60, 3}
}

func (x *ASTNodeArrayArchive_ASTRowCoordinateArchive) GetRow() int32 {
	if x != nil && x.Row != nil {
		return *x.Row
	}
	return 0
}

func (x *ASTNodeArrayArchive_ASTRowCoordinateArchive) GetAbsolute() bool {
	if x != nil && x.Absolute != nil {
		return *x.Absolute
	}
	return Default_ASTNodeArrayArchive_ASTRowCoordinateArchive_Absolute
}

type ASTNodeArrayArchive_ASTUidList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid []*UUID `protobuf:"bytes,1,rep,name=uid" json:"uid,omitempty"`
}

func (x *ASTNodeArrayArchive_ASTUidList) Reset() {
	*x = ASTNodeArrayArchive_ASTUidList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ASTNodeArrayArchive_ASTUidList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ASTNodeArrayArchive_ASTUidList) ProtoMessage() {}

func (x *ASTNodeArrayArchive_ASTUidList) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ASTNodeArrayArchive_ASTUidList.ProtoReflect.Descriptor instead.
func (*ASTNodeArrayArchive_ASTUidList) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{60, 4}
}

func (x *ASTNodeArrayArchive_ASTUidList) GetUid() []*UUID {
	if x != nil {
		return x.Uid
	}
	return nil
}

type ASTNodeArrayArchive_ASTUidTract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColumnUids          *ASTNodeArrayArchive_ASTUidList         `protobuf:"bytes,1,req,name=columnUids" json:"columnUids,omitempty"`
	RowUids             *ASTNodeArrayArchive_ASTUidList         `protobuf:"bytes,2,req,name=rowUids" json:"rowUids,omitempty"`
	IsRangeRef          *bool                                   `protobuf:"varint,3,opt,name=is_range_ref,json=isRangeRef" json:"is_range_ref,omitempty"`
	Purpose             *ASTNodeArrayArchive_ASTUidTractPurpose `protobuf:"varint,4,opt,name=purpose,enum=TSCE.ASTNodeArrayArchive_ASTUidTractPurpose" json:"purpose,omitempty"`
	PreserveRectangular *bool                                   `protobuf:"varint,5,opt,name=preserve_rectangular,json=preserveRectangular,def=1" json:"preserve_rectangular,omitempty"`
}

// Default values for ASTNodeArrayArchive_ASTUidTract fields.
const (
	Default_ASTNodeArrayArchive_ASTUidTract_PreserveRectangular = bool(true)
)

func (x *ASTNodeArrayArchive_ASTUidTract) Reset() {
	*x = ASTNodeArrayArchive_ASTUidTract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ASTNodeArrayArchive_ASTUidTract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ASTNodeArrayArchive_ASTUidTract) ProtoMessage() {}

func (x *ASTNodeArrayArchive_ASTUidTract) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ASTNodeArrayArchive_ASTUidTract.ProtoReflect.Descriptor instead.
func (*ASTNodeArrayArchive_ASTUidTract) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{60, 5}
}

func (x *ASTNodeArrayArchive_ASTUidTract) GetColumnUids() *ASTNodeArrayArchive_ASTUidList {
	if x != nil {
		return x.ColumnUids
	}
	return nil
}

func (x *ASTNodeArrayArchive_ASTUidTract) GetRowUids() *ASTNodeArrayArchive_ASTUidList {
	if x != nil {
		return x.RowUids
	}
	return nil
}

func (x *ASTNodeArrayArchive_ASTUidTract) GetIsRangeRef() bool {
	if x != nil && x.IsRangeRef != nil {
		return *x.IsRangeRef
	}
	return false
}

func (x *ASTNodeArrayArchive_ASTUidTract) GetPurpose() ASTNodeArrayArchive_ASTUidTractPurpose {
	if x != nil && x.Purpose != nil {
		return *x.Purpose
	}
	return ASTNodeArrayArchive_UIDS_INCLUDED
}

func (x *ASTNodeArrayArchive_ASTUidTract) GetPreserveRectangular() bool {
	if x != nil && x.PreserveRectangular != nil {
		return *x.PreserveRectangular
	}
	return Default_ASTNodeArrayArchive_ASTUidTract_PreserveRectangular
}

type ASTNodeArrayArchive_ASTStickyBits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeginRowIsAbsolute    *bool `protobuf:"varint,1,req,name=begin_row_is_absolute,json=beginRowIsAbsolute" json:"begin_row_is_absolute,omitempty"`
	BeginColumnIsAbsolute *bool `protobuf:"varint,2,req,name=begin_column_is_absolute,json=beginColumnIsAbsolute" json:"begin_column_is_absolute,omitempty"`
	EndRowIsAbsolute      *bool `protobuf:"varint,3,req,name=end_row_is_absolute,json=endRowIsAbsolute" json:"end_row_is_absolute,omitempty"`
	EndColumnIsAbsolute   *bool `protobuf:"varint,4,req,name=end_column_is_absolute,json=endColumnIsAbsolute" json:"end_column_is_absolute,omitempty"`
}

func (x *ASTNodeArrayArchive_ASTStickyBits) Reset() {
	*x = ASTNodeArrayArchive_ASTStickyBits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ASTNodeArrayArchive_ASTStickyBits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ASTNodeArrayArchive_ASTStickyBits) ProtoMessage() {}

func (x *ASTNodeArrayArchive_ASTStickyBits) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ASTNodeArrayArchive_ASTStickyBits.ProtoReflect.Descriptor instead.
func (*ASTNodeArrayArchive_ASTStickyBits) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{60, 6}
}

func (x *ASTNodeArrayArchive_ASTStickyBits) GetBeginRowIsAbsolute() bool {
	if x != nil && x.BeginRowIsAbsolute != nil {
		return *x.BeginRowIsAbsolute
	}
	return false
}

func (x *ASTNodeArrayArchive_ASTStickyBits) GetBeginColumnIsAbsolute() bool {
	if x != nil && x.BeginColumnIsAbsolute != nil {
		return *x.BeginColumnIsAbsolute
	}
	return false
}

func (x *ASTNodeArrayArchive_ASTStickyBits) GetEndRowIsAbsolute() bool {
	if x != nil && x.EndRowIsAbsolute != nil {
		return *x.EndRowIsAbsolute
	}
	return false
}

func (x *ASTNodeArrayArchive_ASTStickyBits) GetEndColumnIsAbsolute() bool {
	if x != nil && x.EndColumnIsAbsolute != nil {
		return *x.EndColumnIsAbsolute
	}
	return false
}

type ASTNodeArrayArchive_ASTUidTractList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tract      []*ASTNodeArrayArchive_ASTUidTract `protobuf:"bytes,1,rep,name=tract" json:"tract,omitempty"`
	StickyBits *ASTNodeArrayArchive_ASTStickyBits `protobuf:"bytes,2,req,name=sticky_bits,json=stickyBits" json:"sticky_bits,omitempty"`
}

func (x *ASTNodeArrayArchive_ASTUidTractList) Reset() {
	*x = ASTNodeArrayArchive_ASTUidTractList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ASTNodeArrayArchive_ASTUidTractList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ASTNodeArrayArchive_ASTUidTractList) ProtoMessage() {}

func (x *ASTNodeArrayArchive_ASTUidTractList) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ASTNodeArrayArchive_ASTUidTractList.ProtoReflect.Descriptor instead.
func (*ASTNodeArrayArchive_ASTUidTractList) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{60, 7}
}

func (x *ASTNodeArrayArchive_ASTUidTractList) GetTract() []*ASTNodeArrayArchive_ASTUidTract {
	if x != nil {
		return x.Tract
	}
	return nil
}

func (x *ASTNodeArrayArchive_ASTUidTractList) GetStickyBits() *ASTNodeArrayArchive_ASTStickyBits {
	if x != nil {
		return x.StickyBits
	}
	return nil
}

type ASTNodeArrayArchive_ASTUidCoordinateArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColumnUid      *UUID `protobuf:"bytes,1,req,name=column_uid,json=columnUid" json:"column_uid,omitempty"`
	RowUid         *UUID `protobuf:"bytes,2,req,name=row_uid,json=rowUid" json:"row_uid,omitempty"`
	ColumnAbsolute *bool `protobuf:"varint,3,req,name=column_absolute,json=columnAbsolute" json:"column_absolute,omitempty"`
	RowAbsolute    *bool `protobuf:"varint,4,req,name=row_absolute,json=rowAbsolute" json:"row_absolute,omitempty"`
}

func (x *ASTNodeArrayArchive_ASTUidCoordinateArchive) Reset() {
	*x = ASTNodeArrayArchive_ASTUidCoordinateArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ASTNodeArrayArchive_ASTUidCoordinateArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ASTNodeArrayArchive_ASTUidCoordinateArchive) ProtoMessage() {}

func (x *ASTNodeArrayArchive_ASTUidCoordinateArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ASTNodeArrayArchive_ASTUidCoordinateArchive.ProtoReflect.Descriptor instead.
func (*ASTNodeArrayArchive_ASTUidCoordinateArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{60, 8}
}

func (x *ASTNodeArrayArchive_ASTUidCoordinateArchive) GetColumnUid() *UUID {
	if x != nil {
		return x.ColumnUid
	}
	return nil
}

func (x *ASTNodeArrayArchive_ASTUidCoordinateArchive) GetRowUid() *UUID {
	if x != nil {
		return x.RowUid
	}
	return nil
}

func (x *ASTNodeArrayArchive_ASTUidCoordinateArchive) GetColumnAbsolute() bool {
	if x != nil && x.ColumnAbsolute != nil {
		return *x.ColumnAbsolute
	}
	return false
}

func (x *ASTNodeArrayArchive_ASTUidCoordinateArchive) GetRowAbsolute() bool {
	if x != nil && x.RowAbsolute != nil {
		return *x.RowAbsolute
	}
	return false
}

type ASTNodeArrayArchive_ASTCategoryLevels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ASTColumnGroupLevel *uint32 `protobuf:"varint,1,req,name=AST_column_group_level,json=ASTColumnGroupLevel" json:"AST_column_group_level,omitempty"`
	ASTRowGroupLevel    *uint32 `protobuf:"varint,2,req,name=AST_row_group_level,json=ASTRowGroupLevel" json:"AST_row_group_level,omitempty"`
	ASTAggIndexLevel    *uint32 `protobuf:"varint,3,opt,name=AST_agg_index_level,json=ASTAggIndexLevel" json:"AST_agg_index_level,omitempty"`
}

func (x *ASTNodeArrayArchive_ASTCategoryLevels) Reset() {
	*x = ASTNodeArrayArchive_ASTCategoryLevels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ASTNodeArrayArchive_ASTCategoryLevels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ASTNodeArrayArchive_ASTCategoryLevels) ProtoMessage() {}

func (x *ASTNodeArrayArchive_ASTCategoryLevels) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ASTNodeArrayArchive_ASTCategoryLevels.ProtoReflect.Descriptor instead.
func (*ASTNodeArrayArchive_ASTCategoryLevels) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{60, 9}
}

func (x *ASTNodeArrayArchive_ASTCategoryLevels) GetASTColumnGroupLevel() uint32 {
	if x != nil && x.ASTColumnGroupLevel != nil {
		return *x.ASTColumnGroupLevel
	}
	return 0
}

func (x *ASTNodeArrayArchive_ASTCategoryLevels) GetASTRowGroupLevel() uint32 {
	if x != nil && x.ASTRowGroupLevel != nil {
		return *x.ASTRowGroupLevel
	}
	return 0
}

func (x *ASTNodeArrayArchive_ASTCategoryLevels) GetASTAggIndexLevel() uint32 {
	if x != nil && x.ASTAggIndexLevel != nil {
		return *x.ASTAggIndexLevel
	}
	return 0
}

type ASTNodeArrayArchive_ASTCategoryReferenceArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryRef *CategoryReferenceArchive `protobuf:"bytes,1,req,name=category_ref,json=categoryRef" json:"category_ref,omitempty"`
}

func (x *ASTNodeArrayArchive_ASTCategoryReferenceArchive) Reset() {
	*x = ASTNodeArrayArchive_ASTCategoryReferenceArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ASTNodeArrayArchive_ASTCategoryReferenceArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ASTNodeArrayArchive_ASTCategoryReferenceArchive) ProtoMessage() {}

func (x *ASTNodeArrayArchive_ASTCategoryReferenceArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ASTNodeArrayArchive_ASTCategoryReferenceArchive.ProtoReflect.Descriptor instead.
func (*ASTNodeArrayArchive_ASTCategoryReferenceArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{60, 10}
}

func (x *ASTNodeArrayArchive_ASTCategoryReferenceArchive) GetCategoryRef() *CategoryReferenceArchive {
	if x != nil {
		return x.CategoryRef
	}
	return nil
}

type ASTNodeArrayArchive_ASTColonTractArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeColumn      []*ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive `protobuf:"bytes,1,rep,name=relative_column,json=relativeColumn" json:"relative_column,omitempty"`
	RelativeRow         []*ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive `protobuf:"bytes,2,rep,name=relative_row,json=relativeRow" json:"relative_row,omitempty"`
	AbsoluteColumn      []*ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive `protobuf:"bytes,3,rep,name=absolute_column,json=absoluteColumn" json:"absolute_column,omitempty"`
	AbsoluteRow         []*ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive `protobuf:"bytes,4,rep,name=absolute_row,json=absoluteRow" json:"absolute_row,omitempty"`
	PreserveRectangular *bool                                                                         `protobuf:"varint,5,opt,name=preserve_rectangular,json=preserveRectangular,def=1" json:"preserve_rectangular,omitempty"`
}

// Default values for ASTNodeArrayArchive_ASTColonTractArchive fields.
const (
	Default_ASTNodeArrayArchive_ASTColonTractArchive_PreserveRectangular = bool(true)
)

func (x *ASTNodeArrayArchive_ASTColonTractArchive) Reset() {
	*x = ASTNodeArrayArchive_ASTColonTractArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ASTNodeArrayArchive_ASTColonTractArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ASTNodeArrayArchive_ASTColonTractArchive) ProtoMessage() {}

func (x *ASTNodeArrayArchive_ASTColonTractArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ASTNodeArrayArchive_ASTColonTractArchive.ProtoReflect.Descriptor instead.
func (*ASTNodeArrayArchive_ASTColonTractArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{60, 11}
}

func (x *ASTNodeArrayArchive_ASTColonTractArchive) GetRelativeColumn() []*ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive {
	if x != nil {
		return x.RelativeColumn
	}
	return nil
}

func (x *ASTNodeArrayArchive_ASTColonTractArchive) GetRelativeRow() []*ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive {
	if x != nil {
		return x.RelativeRow
	}
	return nil
}

func (x *ASTNodeArrayArchive_ASTColonTractArchive) GetAbsoluteColumn() []*ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive {
	if x != nil {
		return x.AbsoluteColumn
	}
	return nil
}

func (x *ASTNodeArrayArchive_ASTColonTractArchive) GetAbsoluteRow() []*ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive {
	if x != nil {
		return x.AbsoluteRow
	}
	return nil
}

func (x *ASTNodeArrayArchive_ASTColonTractArchive) GetPreserveRectangular() bool {
	if x != nil && x.PreserveRectangular != nil {
		return *x.PreserveRectangular
	}
	return Default_ASTNodeArrayArchive_ASTColonTractArchive_PreserveRectangular
}

type ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId                                 *CFUUIDArchive `protobuf:"bytes,1,req,name=table_id,json=tableId" json:"table_id,omitempty"`
	ASTReferenceWhitespaceAfterSheetName    *string        `protobuf:"bytes,2,opt,name=AST_reference_whitespace_after_sheet_name,json=ASTReferenceWhitespaceAfterSheetName" json:"AST_reference_whitespace_after_sheet_name,omitempty"`
	ASTReferenceWhitespaceBeforeTableName   *string        `protobuf:"bytes,3,opt,name=AST_reference_whitespace_before_table_name,json=ASTReferenceWhitespaceBeforeTableName" json:"AST_reference_whitespace_before_table_name,omitempty"`
	ASTReferenceWhitespaceAfterTableName    *string        `protobuf:"bytes,4,opt,name=AST_reference_whitespace_after_table_name,json=ASTReferenceWhitespaceAfterTableName" json:"AST_reference_whitespace_after_table_name,omitempty"`
	ASTReferenceWhitespaceBeforeCellAddress *string        `protobuf:"bytes,5,opt,name=AST_reference_whitespace_before_cell_address,json=ASTReferenceWhitespaceBeforeCellAddress" json:"AST_reference_whitespace_before_cell_address,omitempty"`
}

func (x *ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive) Reset() {
	*x = ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive) ProtoMessage() {}

func (x *ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive.ProtoReflect.Descriptor instead.
func (*ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{60, 12}
}

func (x *ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive) GetTableId() *CFUUIDArchive {
	if x != nil {
		return x.TableId
	}
	return nil
}

func (x *ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive) GetASTReferenceWhitespaceAfterSheetName() string {
	if x != nil && x.ASTReferenceWhitespaceAfterSheetName != nil {
		return *x.ASTReferenceWhitespaceAfterSheetName
	}
	return ""
}

func (x *ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive) GetASTReferenceWhitespaceBeforeTableName() string {
	if x != nil && x.ASTReferenceWhitespaceBeforeTableName != nil {
		return *x.ASTReferenceWhitespaceBeforeTableName
	}
	return ""
}

func (x *ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive) GetASTReferenceWhitespaceAfterTableName() string {
	if x != nil && x.ASTReferenceWhitespaceAfterTableName != nil {
		return *x.ASTReferenceWhitespaceAfterTableName
	}
	return ""
}

func (x *ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive) GetASTReferenceWhitespaceBeforeCellAddress() string {
	if x != nil && x.ASTReferenceWhitespaceBeforeCellAddress != nil {
		return *x.ASTReferenceWhitespaceBeforeCellAddress
	}
	return ""
}

type ASTNodeArrayArchive_ASTLetNodeWhitespace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ASTLetWhitespaceAfterLet        *string `protobuf:"bytes,1,opt,name=AST_let_whitespace_after_let,json=ASTLetWhitespaceAfterLet" json:"AST_let_whitespace_after_let,omitempty"`
	ASTLetWhitespaceAfterIdentifier *string `protobuf:"bytes,2,opt,name=AST_let_whitespace_after_identifier,json=ASTLetWhitespaceAfterIdentifier" json:"AST_let_whitespace_after_identifier,omitempty"`
	ASTLetWhitespaceAfterEquals     *string `protobuf:"bytes,3,opt,name=AST_let_whitespace_after_equals,json=ASTLetWhitespaceAfterEquals" json:"AST_let_whitespace_after_equals,omitempty"`
	ASTLetWhitespaceAfterDelimiter  *string `protobuf:"bytes,4,opt,name=AST_let_whitespace_after_delimiter,json=ASTLetWhitespaceAfterDelimiter" json:"AST_let_whitespace_after_delimiter,omitempty"`
}

func (x *ASTNodeArrayArchive_ASTLetNodeWhitespace) Reset() {
	*x = ASTNodeArrayArchive_ASTLetNodeWhitespace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ASTNodeArrayArchive_ASTLetNodeWhitespace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ASTNodeArrayArchive_ASTLetNodeWhitespace) ProtoMessage() {}

func (x *ASTNodeArrayArchive_ASTLetNodeWhitespace) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ASTNodeArrayArchive_ASTLetNodeWhitespace.ProtoReflect.Descriptor instead.
func (*ASTNodeArrayArchive_ASTLetNodeWhitespace) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{60, 13}
}

func (x *ASTNodeArrayArchive_ASTLetNodeWhitespace) GetASTLetWhitespaceAfterLet() string {
	if x != nil && x.ASTLetWhitespaceAfterLet != nil {
		return *x.ASTLetWhitespaceAfterLet
	}
	return ""
}

func (x *ASTNodeArrayArchive_ASTLetNodeWhitespace) GetASTLetWhitespaceAfterIdentifier() string {
	if x != nil && x.ASTLetWhitespaceAfterIdentifier != nil {
		return *x.ASTLetWhitespaceAfterIdentifier
	}
	return ""
}

func (x *ASTNodeArrayArchive_ASTLetNodeWhitespace) GetASTLetWhitespaceAfterEquals() string {
	if x != nil && x.ASTLetWhitespaceAfterEquals != nil {
		return *x.ASTLetWhitespaceAfterEquals
	}
	return ""
}

func (x *ASTNodeArrayArchive_ASTLetNodeWhitespace) GetASTLetWhitespaceAfterDelimiter() string {
	if x != nil && x.ASTLetWhitespaceAfterDelimiter != nil {
		return *x.ASTLetWhitespaceAfterDelimiter
	}
	return ""
}

type ASTNodeArrayArchive_ASTNodeArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ASTNodeType                             *ASTNodeArrayArchive_ASTNodeType                            `protobuf:"varint,1,req,name=AST_node_type,json=ASTNodeType,enum=TSCE.ASTNodeArrayArchive_ASTNodeType" json:"AST_node_type,omitempty"`
	ASTFunctionNodeIndex                    *uint32                                                     `protobuf:"varint,2,opt,name=AST_function_node_index,json=ASTFunctionNodeIndex" json:"AST_function_node_index,omitempty"`
	ASTFunctionNodeNumArgs                  *uint32                                                     `protobuf:"varint,3,opt,name=AST_function_node_numArgs,json=ASTFunctionNodeNumArgs" json:"AST_function_node_numArgs,omitempty"`
	ASTNumberNodeNumber                     *float64                                                    `protobuf:"fixed64,4,opt,name=AST_number_node_number,json=ASTNumberNodeNumber" json:"AST_number_node_number,omitempty"`
	ASTBooleanNodeBoolean                   *bool                                                       `protobuf:"varint,5,opt,name=AST_boolean_node_boolean,json=ASTBooleanNodeBoolean" json:"AST_boolean_node_boolean,omitempty"`
	ASTStringNodeString                     *string                                                     `protobuf:"bytes,6,opt,name=AST_string_node_string,json=ASTStringNodeString" json:"AST_string_node_string,omitempty"`
	ASTDateNodeDateNum                      *float64                                                    `protobuf:"fixed64,7,opt,name=AST_date_node_dateNum,json=ASTDateNodeDateNum" json:"AST_date_node_dateNum,omitempty"`
	ASTDateNodeSuppressDateFormat           *bool                                                       `protobuf:"varint,19,opt,name=AST_date_node_suppress_date_format,json=ASTDateNodeSuppressDateFormat" json:"AST_date_node_suppress_date_format,omitempty"`
	ASTDateNodeSuppressTimeFormat           *bool                                                       `protobuf:"varint,20,opt,name=AST_date_node_suppress_time_format,json=ASTDateNodeSuppressTimeFormat" json:"AST_date_node_suppress_time_format,omitempty"`
	ASTDateNodeDateTimeFormat               *string                                                     `protobuf:"bytes,21,opt,name=AST_date_node_date_time_format,json=ASTDateNodeDateTimeFormat" json:"AST_date_node_date_time_format,omitempty"`
	ASTDurationNodeUnitNum                  *float64                                                    `protobuf:"fixed64,8,opt,name=AST_duration_node_unitNum,json=ASTDurationNodeUnitNum" json:"AST_duration_node_unitNum,omitempty"`
	ASTDurationNodeUnit                     *int32                                                      `protobuf:"varint,9,opt,name=AST_duration_node_unit,json=ASTDurationNodeUnit" json:"AST_duration_node_unit,omitempty"`
	ASTDurationNodeStyle                    *uint32                                                     `protobuf:"varint,22,opt,name=AST_duration_node_style,json=ASTDurationNodeStyle" json:"AST_duration_node_style,omitempty"`
	ASTDurationNodeDurationUnitLargest      *uint32                                                     `protobuf:"varint,23,opt,name=AST_duration_node_duration_unit_largest,json=ASTDurationNodeDurationUnitLargest" json:"AST_duration_node_duration_unit_largest,omitempty"`
	ASTDurationNodeDurationUnitSmallest     *uint32                                                     `protobuf:"varint,24,opt,name=AST_duration_node_duration_unit_smallest,json=ASTDurationNodeDurationUnitSmallest" json:"AST_duration_node_duration_unit_smallest,omitempty"`
	ASTDurationNodeUseAutomaticUnits        *bool                                                       `protobuf:"varint,29,opt,name=AST_duration_node_use_automatic_units,json=ASTDurationNodeUseAutomaticUnits" json:"AST_duration_node_use_automatic_units,omitempty"`
	ASTTokenNodeBoolean                     *bool                                                       `protobuf:"varint,10,opt,name=AST_token_node_boolean,json=ASTTokenNodeBoolean" json:"AST_token_node_boolean,omitempty"`
	ASTArrayNodeNumCol                      *uint32                                                     `protobuf:"varint,11,opt,name=AST_array_node_numCol,json=ASTArrayNodeNumCol" json:"AST_array_node_numCol,omitempty"`
	ASTArrayNodeNumRow                      *uint32                                                     `protobuf:"varint,12,opt,name=AST_array_node_numRow,json=ASTArrayNodeNumRow" json:"AST_array_node_numRow,omitempty"`
	ASTListNodeNumArgs                      *uint32                                                     `protobuf:"varint,13,opt,name=AST_list_node_numArgs,json=ASTListNodeNumArgs" json:"AST_list_node_numArgs,omitempty"`
	ASTThunkNodeArray                       *ASTNodeArrayArchive                                        `protobuf:"bytes,14,opt,name=AST_thunk_node_array,json=ASTThunkNodeArray" json:"AST_thunk_node_array,omitempty"`
	ASTLocalCellReferenceNodeReference      *ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive       `protobuf:"bytes,15,opt,name=AST_local_cell_reference_node_reference,json=ASTLocalCellReferenceNodeReference" json:"AST_local_cell_reference_node_reference,omitempty"`
	ASTCrossTableCellReferenceNodeReference *ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive  `protobuf:"bytes,16,opt,name=AST_cross_table_cell_reference_node_reference,json=ASTCrossTableCellReferenceNodeReference" json:"AST_cross_table_cell_reference_node_reference,omitempty"`
	ASTUnknownFunctionNodeString            *string                                                     `protobuf:"bytes,17,opt,name=AST_unknown_function_node_string,json=ASTUnknownFunctionNodeString" json:"AST_unknown_function_node_string,omitempty"`
	ASTUnknownFunctionNodeNumArgs           *uint32                                                     `protobuf:"varint,18,opt,name=AST_unknown_function_node_numArgs,json=ASTUnknownFunctionNodeNumArgs" json:"AST_unknown_function_node_numArgs,omitempty"`
	ASTWhitespace                           *string                                                     `protobuf:"bytes,25,opt,name=AST_whitespace,json=ASTWhitespace" json:"AST_whitespace,omitempty"`
	ASTColumn                               *ASTNodeArrayArchive_ASTColumnCoordinateArchive             `protobuf:"bytes,26,opt,name=AST_column,json=ASTColumn" json:"AST_column,omitempty"`
	ASTRow                                  *ASTNodeArrayArchive_ASTRowCoordinateArchive                `protobuf:"bytes,27,opt,name=AST_row,json=ASTRow" json:"AST_row,omitempty"`
	ASTCrossTableReferenceExtraInfo         *ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive `protobuf:"bytes,28,opt,name=AST_cross_table_reference_extra_info,json=ASTCrossTableReferenceExtraInfo" json:"AST_cross_table_reference_extra_info,omitempty"`
	ASTUidCoordinate                        *ASTNodeArrayArchive_ASTUidCoordinateArchive                `protobuf:"bytes,30,opt,name=AST_uid_coordinate,json=ASTUidCoordinate" json:"AST_uid_coordinate,omitempty"`
	ASTStickyBits                           *ASTNodeArrayArchive_ASTStickyBits                          `protobuf:"bytes,33,opt,name=AST_sticky_bits,json=ASTStickyBits" json:"AST_sticky_bits,omitempty"`
	ASTFrozenStickyBits                     *ASTNodeArrayArchive_ASTStickyBits                          `protobuf:"bytes,41,opt,name=AST_frozen_sticky_bits,json=ASTFrozenStickyBits" json:"AST_frozen_sticky_bits,omitempty"`
	ASTLetIdentifier                        *string                                                     `protobuf:"bytes,34,opt,name=AST_let_identifier,json=ASTLetIdentifier" json:"AST_let_identifier,omitempty"`
	ASTLetE2                                *ASTNodeArrayArchive                                        `protobuf:"bytes,35,opt,name=AST_let_e2,json=ASTLetE2" json:"AST_let_e2,omitempty"`
	ASTLetWhitespace                        *ASTNodeArrayArchive_ASTLetNodeWhitespace                   `protobuf:"bytes,36,opt,name=AST_let_whitespace,json=ASTLetWhitespace" json:"AST_let_whitespace,omitempty"`
	ASTSymbol                               *uint32                                                     `protobuf:"varint,37,opt,name=AST_symbol,json=ASTSymbol" json:"AST_symbol,omitempty"`
	ASTTractList                            *ASTNodeArrayArchive_ASTUidTractList                        `protobuf:"bytes,38,opt,name=AST_tract_list,json=ASTTractList" json:"AST_tract_list,omitempty"`
	ASTCategoryRef                          *ASTNodeArrayArchive_ASTCategoryReferenceArchive            `protobuf:"bytes,39,opt,name=AST_category_ref,json=ASTCategoryRef" json:"AST_category_ref,omitempty"`
	ASTColonTract                           *ASTNodeArrayArchive_ASTColonTractArchive                   `protobuf:"bytes,40,opt,name=AST_colon_tract,json=ASTColonTract" json:"AST_colon_tract,omitempty"`
	ASTNumberNodeDecimalLow                 *uint64                                                     `protobuf:"varint,42,opt,name=AST_number_node_decimal_low,json=ASTNumberNodeDecimalLow" json:"AST_number_node_decimal_low,omitempty"`
	ASTNumberNodeDecimalHigh                *uint64                                                     `protobuf:"varint,43,opt,name=AST_number_node_decimal_high,json=ASTNumberNodeDecimalHigh" json:"AST_number_node_decimal_high,omitempty"`
	ASTCategoryLevels                       *ASTNodeArrayArchive_ASTCategoryLevels                      `protobuf:"bytes,44,opt,name=AST_category_levels,json=ASTCategoryLevels" json:"AST_category_levels,omitempty"`
}

func (x *ASTNodeArrayArchive_ASTNodeArchive) Reset() {
	*x = ASTNodeArrayArchive_ASTNodeArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ASTNodeArrayArchive_ASTNodeArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ASTNodeArrayArchive_ASTNodeArchive) ProtoMessage() {}

func (x *ASTNodeArrayArchive_ASTNodeArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ASTNodeArrayArchive_ASTNodeArchive.ProtoReflect.Descriptor instead.
func (*ASTNodeArrayArchive_ASTNodeArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{60, 14}
}

func (x *ASTNodeArrayArchive_ASTNodeArchive) GetASTNodeType() ASTNodeArrayArchive_ASTNodeType {
	if x != nil && x.ASTNodeType != nil {
		return *x.ASTNodeType
	}
	return ASTNodeArrayArchive_ADDITION_NODE
}

func (x *ASTNodeArrayArchive_ASTNodeArchive) GetASTFunctionNodeIndex() uint32 {
	if x != nil && x.ASTFunctionNodeIndex != nil {
		return *x.ASTFunctionNodeIndex
	}
	return 0
}

func (x *ASTNodeArrayArchive_ASTNodeArchive) GetASTFunctionNodeNumArgs() uint32 {
	if x != nil && x.ASTFunctionNodeNumArgs != nil {
		return *x.ASTFunctionNodeNumArgs
	}
	return 0
}

func (x *ASTNodeArrayArchive_ASTNodeArchive) GetASTNumberNodeNumber() float64 {
	if x != nil && x.ASTNumberNodeNumber != nil {
		return *x.ASTNumberNodeNumber
	}
	return 0
}

func (x *ASTNodeArrayArchive_ASTNodeArchive) GetASTBooleanNodeBoolean() bool {
	if x != nil && x.ASTBooleanNodeBoolean != nil {
		return *x.ASTBooleanNodeBoolean
	}
	return false
}

func (x *ASTNodeArrayArchive_ASTNodeArchive) GetASTStringNodeString() string {
	if x != nil && x.ASTStringNodeString != nil {
		return *x.ASTStringNodeString
	}
	return ""
}

func (x *ASTNodeArrayArchive_ASTNodeArchive) GetASTDateNodeDateNum() float64 {
	if x != nil && x.ASTDateNodeDateNum != nil {
		return *x.ASTDateNodeDateNum
	}
	return 0
}

func (x *ASTNodeArrayArchive_ASTNodeArchive) GetASTDateNodeSuppressDateFormat() bool {
	if x != nil && x.ASTDateNodeSuppressDateFormat != nil {
		return *x.ASTDateNodeSuppressDateFormat
	}
	return false
}

func (x *ASTNodeArrayArchive_ASTNodeArchive) GetASTDateNodeSuppressTimeFormat() bool {
	if x != nil && x.ASTDateNodeSuppressTimeFormat != nil {
		return *x.ASTDateNodeSuppressTimeFormat
	}
	return false
}

func (x *ASTNodeArrayArchive_ASTNodeArchive) GetASTDateNodeDateTimeFormat() string {
	if x != nil && x.ASTDateNodeDateTimeFormat != nil {
		return *x.ASTDateNodeDateTimeFormat
	}
	return ""
}

func (x *ASTNodeArrayArchive_ASTNodeArchive) GetASTDurationNodeUnitNum() float64 {
	if x != nil && x.ASTDurationNodeUnitNum != nil {
		return *x.ASTDurationNodeUnitNum
	}
	return 0
}

func (x *ASTNodeArrayArchive_ASTNodeArchive) GetASTDurationNodeUnit() int32 {
	if x != nil && x.ASTDurationNodeUnit != nil {
		return *x.ASTDurationNodeUnit
	}
	return 0
}

func (x *ASTNodeArrayArchive_ASTNodeArchive) GetASTDurationNodeStyle() uint32 {
	if x != nil && x.ASTDurationNodeStyle != nil {
		return *x.ASTDurationNodeStyle
	}
	return 0
}

func (x *ASTNodeArrayArchive_ASTNodeArchive) GetASTDurationNodeDurationUnitLargest() uint32 {
	if x != nil && x.ASTDurationNodeDurationUnitLargest != nil {
		return *x.ASTDurationNodeDurationUnitLargest
	}
	return 0
}

func (x *ASTNodeArrayArchive_ASTNodeArchive) GetASTDurationNodeDurationUnitSmallest() uint32 {
	if x != nil && x.ASTDurationNodeDurationUnitSmallest != nil {
		return *x.ASTDurationNodeDurationUnitSmallest
	}
	return 0
}

func (x *ASTNodeArrayArchive_ASTNodeArchive) GetASTDurationNodeUseAutomaticUnits() bool {
	if x != nil && x.ASTDurationNodeUseAutomaticUnits != nil {
		return *x.ASTDurationNodeUseAutomaticUnits
	}
	return false
}

func (x *ASTNodeArrayArchive_ASTNodeArchive) GetASTTokenNodeBoolean() bool {
	if x != nil && x.ASTTokenNodeBoolean != nil {
		return *x.ASTTokenNodeBoolean
	}
	return false
}

func (x *ASTNodeArrayArchive_ASTNodeArchive) GetASTArrayNodeNumCol() uint32 {
	if x != nil && x.ASTArrayNodeNumCol != nil {
		return *x.ASTArrayNodeNumCol
	}
	return 0
}

func (x *ASTNodeArrayArchive_ASTNodeArchive) GetASTArrayNodeNumRow() uint32 {
	if x != nil && x.ASTArrayNodeNumRow != nil {
		return *x.ASTArrayNodeNumRow
	}
	return 0
}

func (x *ASTNodeArrayArchive_ASTNodeArchive) GetASTListNodeNumArgs() uint32 {
	if x != nil && x.ASTListNodeNumArgs != nil {
		return *x.ASTListNodeNumArgs
	}
	return 0
}

func (x *ASTNodeArrayArchive_ASTNodeArchive) GetASTThunkNodeArray() *ASTNodeArrayArchive {
	if x != nil {
		return x.ASTThunkNodeArray
	}
	return nil
}

func (x *ASTNodeArrayArchive_ASTNodeArchive) GetASTLocalCellReferenceNodeReference() *ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive {
	if x != nil {
		return x.ASTLocalCellReferenceNodeReference
	}
	return nil
}

func (x *ASTNodeArrayArchive_ASTNodeArchive) GetASTCrossTableCellReferenceNodeReference() *ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive {
	if x != nil {
		return x.ASTCrossTableCellReferenceNodeReference
	}
	return nil
}

func (x *ASTNodeArrayArchive_ASTNodeArchive) GetASTUnknownFunctionNodeString() string {
	if x != nil && x.ASTUnknownFunctionNodeString != nil {
		return *x.ASTUnknownFunctionNodeString
	}
	return ""
}

func (x *ASTNodeArrayArchive_ASTNodeArchive) GetASTUnknownFunctionNodeNumArgs() uint32 {
	if x != nil && x.ASTUnknownFunctionNodeNumArgs != nil {
		return *x.ASTUnknownFunctionNodeNumArgs
	}
	return 0
}

func (x *ASTNodeArrayArchive_ASTNodeArchive) GetASTWhitespace() string {
	if x != nil && x.ASTWhitespace != nil {
		return *x.ASTWhitespace
	}
	return ""
}

func (x *ASTNodeArrayArchive_ASTNodeArchive) GetASTColumn() *ASTNodeArrayArchive_ASTColumnCoordinateArchive {
	if x != nil {
		return x.ASTColumn
	}
	return nil
}

func (x *ASTNodeArrayArchive_ASTNodeArchive) GetASTRow() *ASTNodeArrayArchive_ASTRowCoordinateArchive {
	if x != nil {
		return x.ASTRow
	}
	return nil
}

func (x *ASTNodeArrayArchive_ASTNodeArchive) GetASTCrossTableReferenceExtraInfo() *ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive {
	if x != nil {
		return x.ASTCrossTableReferenceExtraInfo
	}
	return nil
}

func (x *ASTNodeArrayArchive_ASTNodeArchive) GetASTUidCoordinate() *ASTNodeArrayArchive_ASTUidCoordinateArchive {
	if x != nil {
		return x.ASTUidCoordinate
	}
	return nil
}

func (x *ASTNodeArrayArchive_ASTNodeArchive) GetASTStickyBits() *ASTNodeArrayArchive_ASTStickyBits {
	if x != nil {
		return x.ASTStickyBits
	}
	return nil
}

func (x *ASTNodeArrayArchive_ASTNodeArchive) GetASTFrozenStickyBits() *ASTNodeArrayArchive_ASTStickyBits {
	if x != nil {
		return x.ASTFrozenStickyBits
	}
	return nil
}

func (x *ASTNodeArrayArchive_ASTNodeArchive) GetASTLetIdentifier() string {
	if x != nil && x.ASTLetIdentifier != nil {
		return *x.ASTLetIdentifier
	}
	return ""
}

func (x *ASTNodeArrayArchive_ASTNodeArchive) GetASTLetE2() *ASTNodeArrayArchive {
	if x != nil {
		return x.ASTLetE2
	}
	return nil
}

func (x *ASTNodeArrayArchive_ASTNodeArchive) GetASTLetWhitespace() *ASTNodeArrayArchive_ASTLetNodeWhitespace {
	if x != nil {
		return x.ASTLetWhitespace
	}
	return nil
}

func (x *ASTNodeArrayArchive_ASTNodeArchive) GetASTSymbol() uint32 {
	if x != nil && x.ASTSymbol != nil {
		return *x.ASTSymbol
	}
	return 0
}

func (x *ASTNodeArrayArchive_ASTNodeArchive) GetASTTractList() *ASTNodeArrayArchive_ASTUidTractList {
	if x != nil {
		return x.ASTTractList
	}
	return nil
}

func (x *ASTNodeArrayArchive_ASTNodeArchive) GetASTCategoryRef() *ASTNodeArrayArchive_ASTCategoryReferenceArchive {
	if x != nil {
		return x.ASTCategoryRef
	}
	return nil
}

func (x *ASTNodeArrayArchive_ASTNodeArchive) GetASTColonTract() *ASTNodeArrayArchive_ASTColonTractArchive {
	if x != nil {
		return x.ASTColonTract
	}
	return nil
}

func (x *ASTNodeArrayArchive_ASTNodeArchive) GetASTNumberNodeDecimalLow() uint64 {
	if x != nil && x.ASTNumberNodeDecimalLow != nil {
		return *x.ASTNumberNodeDecimalLow
	}
	return 0
}

func (x *ASTNodeArrayArchive_ASTNodeArchive) GetASTNumberNodeDecimalHigh() uint64 {
	if x != nil && x.ASTNumberNodeDecimalHigh != nil {
		return *x.ASTNumberNodeDecimalHigh
	}
	return 0
}

func (x *ASTNodeArrayArchive_ASTNodeArchive) GetASTCategoryLevels() *ASTNodeArrayArchive_ASTCategoryLevels {
	if x != nil {
		return x.ASTCategoryLevels
	}
	return nil
}

type ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RangeBegin *int32 `protobuf:"varint,1,req,name=range_begin,json=rangeBegin" json:"range_begin,omitempty"`
	RangeEnd   *int32 `protobuf:"varint,2,opt,name=range_end,json=rangeEnd" json:"range_end,omitempty"`
}

func (x *ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive) Reset() {
	*x = ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive) ProtoMessage() {}

func (x *ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive.ProtoReflect.Descriptor instead.
func (*ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{60, 11, 0}
}

func (x *ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive) GetRangeBegin() int32 {
	if x != nil && x.RangeBegin != nil {
		return *x.RangeBegin
	}
	return 0
}

func (x *ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive) GetRangeEnd() int32 {
	if x != nil && x.RangeEnd != nil {
		return *x.RangeEnd
	}
	return 0
}

type ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RangeBegin *uint32 `protobuf:"varint,1,req,name=range_begin,json=rangeBegin" json:"range_begin,omitempty"`
	RangeEnd   *uint32 `protobuf:"varint,2,opt,name=range_end,json=rangeEnd" json:"range_end,omitempty"`
}

func (x *ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive) Reset() {
	*x = ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive) ProtoMessage() {}

func (x *ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive.ProtoReflect.Descriptor instead.
func (*ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{60, 11, 1}
}

func (x *ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive) GetRangeBegin() uint32 {
	if x != nil && x.RangeBegin != nil {
		return *x.RangeBegin
	}
	return 0
}

func (x *ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive) GetRangeEnd() uint32 {
	if x != nil && x.RangeEnd != nil {
		return *x.RangeEnd
	}
	return 0
}

type RewriteTableUIDInfoArchive_TableUIDMapEntryArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrevTableUid *UUID `protobuf:"bytes,1,req,name=prev_table_uid,json=prevTableUid" json:"prev_table_uid,omitempty"`
	NewTableUid  *UUID `protobuf:"bytes,2,req,name=new_table_uid,json=newTableUid" json:"new_table_uid,omitempty"`
}

func (x *RewriteTableUIDInfoArchive_TableUIDMapEntryArchive) Reset() {
	*x = RewriteTableUIDInfoArchive_TableUIDMapEntryArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewriteTableUIDInfoArchive_TableUIDMapEntryArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewriteTableUIDInfoArchive_TableUIDMapEntryArchive) ProtoMessage() {}

func (x *RewriteTableUIDInfoArchive_TableUIDMapEntryArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewriteTableUIDInfoArchive_TableUIDMapEntryArchive.ProtoReflect.Descriptor instead.
func (*RewriteTableUIDInfoArchive_TableUIDMapEntryArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{69, 0}
}

func (x *RewriteTableUIDInfoArchive_TableUIDMapEntryArchive) GetPrevTableUid() *UUID {
	if x != nil {
		return x.PrevTableUid
	}
	return nil
}

func (x *RewriteTableUIDInfoArchive_TableUIDMapEntryArchive) GetNewTableUid() *UUID {
	if x != nil {
		return x.NewTableUid
	}
	return nil
}

type GroupByChangeArchive_GroupingColumnChangeArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OldLevel *uint32 `protobuf:"varint,1,req,name=old_level,json=oldLevel" json:"old_level,omitempty"`
	NewLevel *uint32 `protobuf:"varint,2,req,name=new_level,json=newLevel" json:"new_level,omitempty"`
}

func (x *GroupByChangeArchive_GroupingColumnChangeArchive) Reset() {
	*x = GroupByChangeArchive_GroupingColumnChangeArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupByChangeArchive_GroupingColumnChangeArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupByChangeArchive_GroupingColumnChangeArchive) ProtoMessage() {}

func (x *GroupByChangeArchive_GroupingColumnChangeArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupByChangeArchive_GroupingColumnChangeArchive.ProtoReflect.Descriptor instead.
func (*GroupByChangeArchive_GroupingColumnChangeArchive) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{70, 0}
}

func (x *GroupByChangeArchive_GroupingColumnChangeArchive) GetOldLevel() uint32 {
	if x != nil && x.OldLevel != nil {
		return *x.OldLevel
	}
	return 0
}

func (x *GroupByChangeArchive_GroupingColumnChangeArchive) GetNewLevel() uint32 {
	if x != nil && x.NewLevel != nil {
		return *x.NewLevel
	}
	return 0
}

type IndexedUidsArchive_IndexedUid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UidForIndex *UUID   `protobuf:"bytes,1,req,name=uid_for_index,json=uidForIndex" json:"uid_for_index,omitempty"`
	IndexForUid *uint32 `protobuf:"varint,2,req,name=index_for_uid,json=indexForUid" json:"index_for_uid,omitempty"`
}

func (x *IndexedUidsArchive_IndexedUid) Reset() {
	*x = IndexedUidsArchive_IndexedUid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCEArchives_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexedUidsArchive_IndexedUid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexedUidsArchive_IndexedUid) ProtoMessage() {}

func (x *IndexedUidsArchive_IndexedUid) ProtoReflect() protoreflect.Message {
	mi := &file_TSCEArchives_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexedUidsArchive_IndexedUid.ProtoReflect.Descriptor instead.
func (*IndexedUidsArchive_IndexedUid) Descriptor() ([]byte, []int) {
	return file_TSCEArchives_proto_rawDescGZIP(), []int{72, 0}
}

func (x *IndexedUidsArchive_IndexedUid) GetUidForIndex() *UUID {
	if x != nil {
		return x.UidForIndex
	}
	return nil
}

func (x *IndexedUidsArchive_IndexedUid) GetIndexForUid() uint32 {
	if x != nil && x.IndexForUid != nil {
		return *x.IndexForUid
	}
	return 0
}

var File_TSCEArchives_proto protoreflect.FileDescriptor

var file_TSCEArchives_proto_rawDesc = []byte{
	0x0a, 0x12, 0x54, 0x53, 0x43, 0x45, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x54, 0x53, 0x43, 0x45, 0x1a, 0x11, 0x54, 0x53, 0x50, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x54,
	0x53, 0x4b, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x6f, 0x0a, 0x14, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x72, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x03, 0x72,
	0x6f, 0x77, 0x12, 0x2d, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x43, 0x46, 0x55, 0x55, 0x49,
	0x44, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x64, 0x22, 0x76, 0x0a, 0x1c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x65, 0x6c,
	0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x43, 0x65, 0x6c,
	0x6c, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x0a, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d,
	0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x22, 0xc8, 0x02, 0x0a, 0x16, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x66, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x77, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x26, 0x0a, 0x09, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55,
	0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x72, 0x6f, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x52, 0x6f, 0x77, 0x12, 0x2c,
	0x0a, 0x12, 0x69, 0x73, 0x5f, 0x73, 0x70, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x53, 0x70,
	0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x26, 0x0a, 0x0f,
	0x69, 0x73, 0x5f, 0x73, 0x70, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x6f, 0x77, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x53, 0x70, 0x61, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x52, 0x6f, 0x77, 0x22, 0xea, 0x01, 0x0a, 0x15, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2d,
	0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x43, 0x46, 0x55, 0x55, 0x49, 0x44, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x0f, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x6f, 0x70, 0x4c, 0x65, 0x66, 0x74, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x65, 0x66,
	0x74, 0x5f, 0x72, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x70,
	0x4c, 0x65, 0x66, 0x74, 0x52, 0x6f, 0x77, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x6f, 0x74, 0x74, 0x6f,
	0x6d, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x04,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x11, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x52, 0x69, 0x67, 0x68,
	0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x6f, 0x74, 0x74, 0x6f,
	0x6d, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x72, 0x6f, 0x77, 0x18, 0x05, 0x20, 0x02, 0x28,
	0x0d, 0x52, 0x0e, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x52, 0x69, 0x67, 0x68, 0x74, 0x52, 0x6f,
	0x77, 0x22, 0x6e, 0x0a, 0x1d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x32, 0x0a,
	0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x54,
	0x53, 0x43, 0x45, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x22, 0x9f, 0x01, 0x0a, 0x0f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x65, 0x74, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x53, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x1a, 0x4d, 0x0a, 0x0d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x65, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x62,
	0x65, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x45, 0x6e, 0x64, 0x22, 0xba, 0x01, 0x0a, 0x13, 0x43, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6f, 0x72,
	0x64, 0x53, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x4c, 0x0a, 0x0e, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x43,
	0x6f, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x55, 0x0a, 0x0b, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x12, 0x2e, 0x0a, 0x07, 0x72, 0x6f, 0x77, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x65,
	0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x06, 0x72, 0x6f, 0x77, 0x53, 0x65, 0x74,
	0x22, 0xcd, 0x01, 0x0a, 0x19, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x65, 0x6c,
	0x6c, 0x52, 0x65, 0x66, 0x53, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x4f,
	0x0a, 0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x66, 0x53, 0x65, 0x74, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0c, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x1a,
	0x5f, 0x0a, 0x0a, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x19, 0x0a,
	0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x09, 0x63, 0x6f, 0x6f, 0x72,
	0x64, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53,
	0x43, 0x45, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x08, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74,
	0x22, 0x51, 0x0a, 0x0d, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x6f, 0x77, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x22, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x31, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x08, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x6f, 0x77,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x31, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x52,
	0x6f, 0x77, 0x73, 0x22, 0x6f, 0x0a, 0x0f, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x63, 0x74, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x43, 0x65,
	0x6c, 0x6c, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x27, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x43, 0x45,
	0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x22, 0xca, 0x01, 0x0a, 0x11, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x66,
	0x53, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x47, 0x0a, 0x0d, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x66,
	0x53, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x1a, 0x6c, 0x0a, 0x0a, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x26, 0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52,
	0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x09, 0x63, 0x6f, 0x6f,
	0x72, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54,
	0x53, 0x43, 0x45, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x08, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x53, 0x65,
	0x74, 0x22, 0xb7, 0x01, 0x0a, 0x12, 0x55, 0x69, 0x64, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x53, 0x65,
	0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x4b, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x55, 0x69, 0x64, 0x43, 0x6f, 0x6f, 0x72, 0x64,
	0x53, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x45, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x54, 0x0a, 0x0b, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52,
	0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x22, 0x0a, 0x07, 0x72, 0x6f, 0x77, 0x5f, 0x73,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55,
	0x55, 0x49, 0x44, 0x52, 0x06, 0x72, 0x6f, 0x77, 0x53, 0x65, 0x74, 0x22, 0xcf, 0x01, 0x0a, 0x14,
	0x55, 0x69, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x66, 0x53, 0x65, 0x74, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x12, 0x4a, 0x0a, 0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x65, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x54, 0x53,
	0x43, 0x45, 0x2e, 0x55, 0x69, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x66, 0x53, 0x65, 0x74,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0c, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x1a, 0x6b, 0x0a, 0x0a, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x26,
	0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x08, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x09, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x5f,
	0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x43, 0x45,
	0x2e, 0x55, 0x69, 0x64, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x08, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x22, 0xab, 0x03,
	0x0a, 0x18, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x54, 0x6f, 0x44, 0x69,
	0x72, 0x74, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x42, 0x0a, 0x12, 0x74, 0x6f,
	0x5f, 0x64, 0x69, 0x72, 0x74, 0x79, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x53, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0f, 0x74,
	0x6f, 0x44, 0x69, 0x72, 0x74, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x45,
	0x0a, 0x0e, 0x74, 0x6f, 0x5f, 0x64, 0x69, 0x72, 0x74, 0x79, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x66, 0x53, 0x65, 0x74,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0c, 0x74, 0x6f, 0x44, 0x69, 0x72, 0x74, 0x79,
	0x43, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x5a, 0x0a, 0x19, 0x74, 0x6f, 0x5f, 0x64, 0x69, 0x72, 0x74,
	0x79, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x66, 0x53,
	0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x16, 0x74, 0x6f, 0x44, 0x69, 0x72,
	0x74, 0x79, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x12, 0x52, 0x0a, 0x13, 0x74, 0x6f, 0x5f, 0x64, 0x69, 0x72, 0x74, 0x79, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x10, 0x74, 0x6f, 0x44, 0x69, 0x72, 0x74, 0x79, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x66, 0x73, 0x12, 0x54, 0x0a, 0x16, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x69, 0x6e,
	0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x66, 0x53, 0x65, 0x74, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x13, 0x63, 0x61, 0x6c, 0x63, 0x49, 0x6e, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x22, 0xea, 0x06, 0x0a, 0x12,
	0x43, 0x6f, 0x6f, 0x72, 0x64, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x12, 0x26, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44,
	0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x10, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x53, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0e, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x52, 0x6f, 0x77, 0x73, 0x53, 0x65, 0x74, 0x12, 0x45, 0x0a, 0x13, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x5f, 0x73,
	0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x11, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x53,
	0x65, 0x74, 0x12, 0x3b, 0x0a, 0x0e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x72, 0x6f, 0x77, 0x73,
	0x5f, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x54, 0x53, 0x43,
	0x45, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x6f, 0x77, 0x73, 0x53, 0x65, 0x74, 0x12,
	0x58, 0x0a, 0x14, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f,
	0x72, 0x6f, 0x77, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x54, 0x53, 0x43, 0x45, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x54, 0x6f, 0x56, 0x69,
	0x65, 0x77, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x62, 0x61, 0x73, 0x65, 0x54, 0x6f, 0x56,
	0x69, 0x65, 0x77, 0x52, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x12, 0x5e, 0x0a, 0x17, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x5f, 0x6d, 0x61, 0x70, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x54, 0x53, 0x43,
	0x45, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x54, 0x6f, 0x56, 0x69, 0x65, 0x77, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x62, 0x61, 0x73, 0x65, 0x54, 0x6f, 0x56, 0x69, 0x65, 0x77,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4d, 0x61, 0x70, 0x12, 0x61, 0x0a, 0x17, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x72, 0x6f, 0x77,
	0x5f, 0x6d, 0x61, 0x70, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x54, 0x53, 0x43,
	0x45, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x54, 0x6f, 0x56, 0x69,
	0x65, 0x77, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x54, 0x6f, 0x56, 0x69, 0x65, 0x77, 0x52, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x12, 0x67, 0x0a, 0x1a,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x4d, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x54, 0x6f, 0x56, 0x69, 0x65, 0x77, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x16, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x54, 0x6f, 0x56, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x4d, 0x61, 0x70, 0x1a, 0x6b, 0x0a, 0x0f, 0x42, 0x61, 0x73, 0x65, 0x54, 0x6f, 0x56,
	0x69, 0x65, 0x77, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x12, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6f, 0x72, 0x5f, 0x72, 0x6f, 0x77, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x0f, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x4f, 0x72, 0x52, 0x6f, 0x77, 0x12, 0x2b, 0x0a, 0x12, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6f, 0x72, 0x5f, 0x72, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0d, 0x52, 0x0f, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4f, 0x72, 0x52,
	0x6f, 0x77, 0x1a, 0x74, 0x0a, 0x12, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x54, 0x6f, 0x56,
	0x69, 0x65, 0x77, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x31, 0x0a, 0x15, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6f, 0x72, 0x5f, 0x72, 0x6f,
	0x77, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x12, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4f, 0x72, 0x52, 0x6f, 0x77, 0x12, 0x2b, 0x0a, 0x12, 0x76,
	0x69, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6f, 0x72, 0x5f, 0x72, 0x6f,
	0x77, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0f, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x4f, 0x72, 0x52, 0x6f, 0x77, 0x22, 0xb7, 0x02, 0x0a, 0x10, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x4b, 0x0a,
	0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x63, 0x65,
	0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0d,
	0x63, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x44, 0x0a,
	0x0f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x0e, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x22, 0x4d, 0x0a, 0x0d, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x52, 0x45, 0x46,
	0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x41, 0x4e, 0x47,
	0x45, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x02, 0x12, 0x13, 0x0a,
	0x0f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x44, 0x45, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x4e, 0x43, 0x59,
	0x10, 0x03, 0x22, 0x89, 0x01, 0x0a, 0x0b, 0x45, 0x64, 0x67, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0d, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x6f,
	0x77, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x03, 0x72, 0x6f, 0x77, 0x12, 0x21, 0x0a, 0x0c,
	0x69, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x50, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x12,
	0x2d, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x43, 0x46, 0x55, 0x55, 0x49, 0x44, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x22, 0xf9,
	0x01, 0x0a, 0x0c, 0x45, 0x64, 0x67, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12,
	0x39, 0x0a, 0x19, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x16, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x45, 0x64, 0x67, 0x65, 0x57, 0x69,
	0x74, 0x68, 0x6f, 0x75, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x16, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x64, 0x5f, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x13, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x64, 0x45, 0x64, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12,
	0x3d, 0x0a, 0x11, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f,
	0x65, 0x64, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x43, 0x46, 0x55, 0x55, 0x49, 0x44, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0e,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x46, 0x6f, 0x72, 0x45, 0x64, 0x67, 0x65, 0x12, 0x3a,
	0x0a, 0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x65, 0x64, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x49, 0x64, 0x46, 0x6f, 0x72, 0x45, 0x64, 0x67, 0x65, 0x22, 0xae, 0x02, 0x0a, 0x14, 0x45,
	0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x45, 0x64, 0x67, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68,
	0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x14, 0x65, 0x64, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75,
	0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x65, 0x64,
	0x67, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x17,
	0x65, 0x64, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x65, 0x64, 0x67, 0x65, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x11, 0x65, 0x64, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x65, 0x64, 0x67, 0x65,
	0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x14, 0x65, 0x64, 0x67, 0x65, 0x57,
	0x69, 0x74, 0x68, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12,
	0x3a, 0x0a, 0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x65, 0x64, 0x67, 0x65, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x49, 0x64, 0x46, 0x6f, 0x72, 0x45, 0x64, 0x67, 0x65, 0x22, 0xb6, 0x04, 0x0a, 0x11,
	0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0d, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x6f, 0x77,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x03, 0x72, 0x6f, 0x77, 0x12, 0x49, 0x0a, 0x20, 0x64,
	0x69, 0x72, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x70,
	0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x1c, 0x64, 0x69, 0x72, 0x74, 0x79, 0x53,
	0x65, 0x6c, 0x66, 0x50, 0x6c, 0x75, 0x73, 0x50, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x5f,
	0x61, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x52, 0x0a, 0x69, 0x73, 0x49, 0x6e, 0x41, 0x43, 0x79, 0x63, 0x6c, 0x65,
	0x12, 0x29, 0x0a, 0x04, 0x65, 0x64, 0x67, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x04, 0x65, 0x64, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x12, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x5f, 0x61, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c,
	0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x10, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x41, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x12,
	0x41, 0x0a, 0x19, 0x68, 0x61, 0x73, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x17, 0x68, 0x61, 0x73, 0x43, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x57, 0x0a, 0x23, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f,
	0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6f, 0x6e, 0x5f, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x61, 0x6c, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x1f, 0x63, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x4f,
	0x6e, 0x4e, 0x65, 0x78, 0x74, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x63, 0x12, 0x5d, 0x0a, 0x29, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x65, 0x78, 0x63,
	0x65, 0x6c, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x6e, 0x5f, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x72, 0x65, 0x63, 0x61, 0x6c, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x23, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65,
	0x46, 0x6f, 0x72, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x6e,
	0x4e, 0x65, 0x78, 0x74, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x63, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x64,
	0x67, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x43, 0x45,
	0x2e, 0x45, 0x64, 0x67, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x65,
	0x64, 0x67, 0x65, 0x73, 0x22, 0x7b, 0x0a, 0x17, 0x43, 0x65, 0x6c, 0x6c, 0x44, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12,
	0x38, 0x0a, 0x0b, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x43, 0x65, 0x6c, 0x6c,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x63,
	0x65, 0x6c, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x75, 0x6d,
	0x5f, 0x64, 0x69, 0x72, 0x74, 0x79, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x44, 0x69, 0x72, 0x74, 0x79, 0x43, 0x65, 0x6c, 0x6c,
	0x73, 0x22, 0xc0, 0x02, 0x0a, 0x19, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x6f, 0x77, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x03, 0x72, 0x6f, 0x77, 0x12, 0x49, 0x0a, 0x20, 0x64, 0x69, 0x72,
	0x74, 0x79, 0x5f, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x70, 0x72, 0x65,
	0x63, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x1c, 0x64, 0x69, 0x72, 0x74, 0x79, 0x53, 0x65, 0x6c,
	0x66, 0x50, 0x6c, 0x75, 0x73, 0x50, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x61, 0x5f,
	0x63, 0x79, 0x63, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x0a, 0x69, 0x73, 0x49, 0x6e, 0x41, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x41,
	0x0a, 0x19, 0x68, 0x61, 0x73, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x17, 0x68, 0x61, 0x73, 0x43, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x41, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x65, 0x64,
	0x67, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x43, 0x45,
	0x2e, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x45, 0x64, 0x67, 0x65, 0x73, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x45,
	0x64, 0x67, 0x65, 0x73, 0x22, 0x63, 0x0a, 0x1f, 0x43, 0x65, 0x6c, 0x6c, 0x44, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x65, 0x6c, 0x6c, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x54,
	0x53, 0x43, 0x45, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x45, 0x78,
	0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x63,
	0x65, 0x6c, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0xd9, 0x01, 0x0a, 0x15, 0x43, 0x65,
	0x6c, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x69, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x2a, 0x0a, 0x11, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x62,
	0x65, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x69, 0x6c, 0x65,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x74,
	0x69, 0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x69, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x42, 0x65, 0x67, 0x69,
	0x6e, 0x12, 0x42, 0x0a, 0x0c, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x43,
	0x65, 0x6c, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65,
	0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0b, 0x63, 0x65, 0x6c, 0x6c, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x5a, 0x0a, 0x1c, 0x43, 0x65, 0x6c, 0x6c, 0x44, 0x65, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x54, 0x69, 0x6c, 0x65, 0x64, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x3a, 0x0a, 0x11, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x0f, 0x63, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x69, 0x6c, 0x65,
	0x73, 0x22, 0xe7, 0x09, 0x0a, 0x1b, 0x56, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x65, 0x44, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x12, 0x39, 0x0a, 0x19, 0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x16, 0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x33, 0x0a, 0x16,
	0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x65,
	0x6c, 0x6c, 0x5f, 0x72, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x13, 0x76, 0x6f,
	0x6c, 0x61, 0x74, 0x69, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x6f,
	0x77, 0x12, 0x3d, 0x0a, 0x1b, 0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x72, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x18, 0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x65,
	0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x43, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x12, 0x37, 0x0a, 0x18, 0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x6e,
	0x64, 0x6f, 0x6d, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x72, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x15, 0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x64,
	0x6f, 0x6d, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x6f, 0x77, 0x12, 0x3d, 0x0a, 0x1b, 0x76, 0x6f, 0x6c,
	0x61, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x63, 0x65, 0x6c,
	0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x18,
	0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x43, 0x65,
	0x6c, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x37, 0x0a, 0x18, 0x76, 0x6f, 0x6c, 0x61,
	0x74, 0x69, 0x6c, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x63, 0x65, 0x6c, 0x6c,
	0x5f, 0x72, 0x6f, 0x77, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x15, 0x76, 0x6f, 0x6c, 0x61,
	0x74, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x6f,
	0x77, 0x12, 0x41, 0x0a, 0x1d, 0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x1a, 0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69,
	0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x6c, 0x6c, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x3b, 0x0a, 0x1a, 0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x65,
	0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x72,
	0x6f, 0x77, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x17, 0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69,
	0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x6f,
	0x77, 0x12, 0x3f, 0x0a, 0x1c, 0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x19, 0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c,
	0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x73, 0x73, 0x43, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x12, 0x39, 0x0a, 0x19, 0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x72, 0x6f, 0x77, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x16, 0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x65, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x73, 0x73, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x6f, 0x77, 0x12, 0x46, 0x0a,
	0x20, 0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x1c, 0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6c, 0x6c, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x40, 0x0a, 0x1d, 0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c,
	0x65, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x65,
	0x6c, 0x6c, 0x5f, 0x72, 0x6f, 0x77, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x19, 0x76, 0x6f,
	0x6c, 0x61, 0x74, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x43, 0x65, 0x6c, 0x6c, 0x52, 0x6f, 0x77, 0x12, 0x4f, 0x0a, 0x25, 0x76, 0x6f, 0x6c, 0x61, 0x74,
	0x69, 0x6c, 0x65, 0x5f, 0x73, 0x68, 0x65, 0x65, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x18, 0x11, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x20, 0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x65,
	0x53, 0x68, 0x65, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x65,
	0x6c, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x49, 0x0a, 0x22, 0x76, 0x6f, 0x6c, 0x61,
	0x74, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x68, 0x65, 0x65, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x72, 0x6f, 0x77, 0x18, 0x12,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x1d, 0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x65, 0x53, 0x68,
	0x65, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x65, 0x6c, 0x6c,
	0x52, 0x6f, 0x77, 0x12, 0x49, 0x0a, 0x21, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x65, 0x6c,
	0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x1e,
	0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x6e, 0x63, 0x79, 0x43, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x43,
	0x0a, 0x1e, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x72, 0x6f, 0x77,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x1b, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x65, 0x6c, 0x6c,
	0x52, 0x6f, 0x77, 0x12, 0x63, 0x0a, 0x20, 0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x65, 0x5f,
	0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x54, 0x53, 0x43, 0x45, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1d, 0x76, 0x6f, 0x6c, 0x61, 0x74,
	0x69, 0x6c, 0x65, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x43, 0x65, 0x6c, 0x6c, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x51, 0x0a, 0x16, 0x76, 0x6f, 0x6c, 0x61,
	0x74, 0x69, 0x6c, 0x65, 0x5f, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x65,
	0x6c, 0x6c, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e,
	0x43, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x14, 0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x65, 0x47,
	0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x43, 0x65, 0x6c, 0x6c, 0x22, 0xa7, 0x04, 0x0a, 0x23,
	0x56, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e,
	0x63, 0x69, 0x65, 0x73, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x12, 0x49, 0x0a, 0x13, 0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6f, 0x72,
	0x64, 0x53, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x11, 0x76, 0x6f, 0x6c,
	0x61, 0x74, 0x69, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x4d,
	0x0a, 0x15, 0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x54, 0x53, 0x43, 0x45, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x53, 0x65,
	0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x13, 0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69,
	0x6c, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x4d, 0x0a,
	0x15, 0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65,
	0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54,
	0x53, 0x43, 0x45, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x13, 0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c,
	0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x5f, 0x0a, 0x1f,
	0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x68, 0x65, 0x65, 0x74, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x43, 0x65, 0x6c,
	0x6c, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x1b, 0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x65, 0x53, 0x68, 0x65, 0x65, 0x74, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x56, 0x0a,
	0x1a, 0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6f,
	0x72, 0x64, 0x53, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x17, 0x76, 0x6f,
	0x6c, 0x61, 0x74, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x43, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x5e, 0x0a, 0x1b, 0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c,
	0x65, 0x5f, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f,
	0x72, 0x65, 0x66, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x54, 0x53, 0x43,
	0x45, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65,
	0x66, 0x53, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x18, 0x76, 0x6f, 0x6c,
	0x61, 0x74, 0x69, 0x6c, 0x65, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x43, 0x65, 0x6c,
	0x6c, 0x52, 0x65, 0x66, 0x73, 0x22, 0x74, 0x0a, 0x20, 0x52, 0x54, 0x72, 0x65, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x61, 0x78, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x2c, 0x0a,
	0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x54,
	0x53, 0x43, 0x45, 0x2e, 0x52, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x22, 0x85, 0x01, 0x0a, 0x1c,
	0x52, 0x54, 0x72, 0x65, 0x65, 0x4c, 0x65, 0x61, 0x66, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x61, 0x78,
	0x12, 0x41, 0x0a, 0x0e, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e,
	0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x0d, 0x63, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x22, 0xee, 0x01, 0x0a, 0x10, 0x52, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5c, 0x0a, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x52, 0x54, 0x72, 0x65,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x14, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x50, 0x0a, 0x12, 0x6c, 0x65, 0x61, 0x66, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x52, 0x54, 0x72, 0x65, 0x65, 0x4c, 0x65, 0x61, 0x66, 0x4e,
	0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x10, 0x6c, 0x65, 0x61, 0x66, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x22, 0xbe, 0x02, 0x0a, 0x0c, 0x52, 0x54, 0x72, 0x65, 0x65, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x61, 0x74,
	0x61, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6e, 0x75, 0x6d,
	0x5f, 0x64, 0x69, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x61, 0x74,
	0x61, 0x4e, 0x75, 0x6d, 0x44, 0x69, 0x6d, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0d,
	0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6c, 0x65, 0x6d, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2d,
	0x0a, 0x13, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x5f, 0x72, 0x65, 0x61, 0x6c,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x10, 0x64, 0x61, 0x74,
	0x61, 0x45, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x24, 0x0a,
	0x0e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x78, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x69, 0x6e, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x07, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x61, 0x74,
	0x61, 0x4d, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x04, 0x72, 0x6f, 0x6f,
	0x74, 0x18, 0x08, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x52,
	0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x04, 0x72, 0x6f, 0x6f, 0x74, 0x22, 0x93, 0x02, 0x0a, 0x1a, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42,
	0x61, 0x63, 0x6b, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6f,
	0x72, 0x64, 0x5f, 0x72, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x65,
	0x6c, 0x6c, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x52, 0x6f, 0x77, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x65,
	0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6f, 0x72, 0x64,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x44, 0x0a, 0x0f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0e, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x18,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x65, 0x0a, 0x18, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x49, 0x0a, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x5f,
	0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x61, 0x63,
	0x6b, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x0e, 0x62, 0x61, 0x63, 0x6b, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e,
	0x63, 0x79, 0x22, 0xa5, 0x02, 0x0a, 0x1a, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x65, 0x63,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x69, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x74, 0x6f, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x6f, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x57, 0x0a, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x54,
	0x69, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x46, 0x72, 0x6f, 0x6d, 0x54,
	0x6f, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0b, 0x66,
	0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0x8d, 0x01, 0x0a, 0x12, 0x46,
	0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x43, 0x65, 0x6c,
	0x6c, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x12, 0x3b, 0x0a,
	0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x63, 0x74, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x43, 0x65, 0x6c,
	0x6c, 0x52, 0x65, 0x63, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0c, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x74, 0x22, 0x63, 0x0a, 0x1d, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x54,
	0x69, 0x6c, 0x65, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x42, 0x0a, 0x15, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x74, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x13, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x50, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x69, 0x6c, 0x65, 0x22,
	0xf6, 0x08, 0x0a, 0x1b, 0x53, 0x70, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x53, 0x0a, 0x0d, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2e,
	0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0c,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2e, 0x0a, 0x04,
	0x63, 0x65, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x43,
	0x45, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x04, 0x63, 0x65, 0x6c, 0x6c, 0x12, 0x5e, 0x0a, 0x1d,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x19, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x6f, 0x72,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x5c, 0x0a, 0x1c,
	0x62, 0x6f, 0x64, 0x79, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x43,
	0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x18, 0x62, 0x6f, 0x64, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x1f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f,
	0x74, 0x6f, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x53, 0x70, 0x61, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x65,
	0x6c, 0x6c, 0x73, 0x52, 0x1b, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x73,
	0x12, 0x86, 0x01, 0x0a, 0x20, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x54, 0x53,
	0x43, 0x45, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x6f,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x52, 0x1c, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x6f, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x1a, 0xd0, 0x01, 0x0a, 0x1b, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x6f, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x12, 0x53, 0x0a, 0x0d, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e,
	0x53, 0x70, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e,
	0x63, 0x69, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0c, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x44, 0x0a, 0x0f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x63,
	0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0e, 0x63, 0x65,
	0x6c, 0x6c, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x1a, 0xe7, 0x01, 0x0a,
	0x1c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x54, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x53, 0x0a, 0x0d, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x54,
	0x53, 0x43, 0x45, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0c, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x5a, 0x0a, 0x17, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x54, 0x53,
	0x43, 0x45, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x15, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x30, 0x0a, 0x0c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c,
	0x54, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x5f, 0x48,
	0x45, 0x41, 0x44, 0x45, 0x52, 0x53, 0x10, 0x01, 0x22, 0x87, 0x07, 0x0a, 0x23, 0x53, 0x70, 0x61,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x12, 0x75, 0x0a, 0x15, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x73,
	0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x70, 0x61, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x42, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x44,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x45, 0x78, 0x70, 0x61, 0x6e,
	0x64, 0x65, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x43,
	0x6f, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x66, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x12, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x66, 0x65, 0x72, 0x73,
	0x54, 0x6f, 0x53, 0x70, 0x61, 0x6e, 0x73, 0x12, 0x4f, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x46, 0x6f, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x4d, 0x0a, 0x14, 0x62, 0x6f, 0x64, 0x79,
	0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x11, 0x62, 0x6f, 0x64, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x46,
	0x6f, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x4f, 0x0a, 0x0b, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0b, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x74, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x64, 0x1a, 0xe8, 0x01, 0x0a, 0x1f, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x07,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x5b, 0x0a, 0x0d, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x36,
	0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64,
	0x65, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0c, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x4d, 0x0a, 0x06, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x53, 0x70, 0x61, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73,
	0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x06, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x1a, 0xda, 0x01, 0x0a, 0x18, 0x43, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x66, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x3b, 0x0a, 0x0a, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x43, 0x65, 0x6c, 0x6c,
	0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x0a, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x80, 0x01,
	0x0a, 0x17, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x49, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x44,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x45, 0x78, 0x70, 0x61, 0x6e,
	0x64, 0x65, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x57,
	0x69, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x14, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x42, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x22, 0x30, 0x0a, 0x0c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x13, 0x0a,
	0x0f, 0x49, 0x4e, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x53,
	0x10, 0x01, 0x22, 0x6a, 0x0a, 0x1d, 0x57, 0x68, 0x6f, 0x6c, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x12, 0x49, 0x0a, 0x0e, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74,
	0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x54, 0x53,
	0x43, 0x45, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x0d, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x22, 0x71,
	0x0a, 0x25, 0x57, 0x68, 0x6f, 0x6c, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x44, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x48, 0x0a, 0x0f, 0x64, 0x65, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x66, 0x53, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x0e, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x6c, 0x6c,
	0x73, 0x22, 0x9d, 0x03, 0x0a, 0x11, 0x43, 0x65, 0x6c, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x43,
	0x65, 0x6c, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x46, 0x6f, 0x72, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x06, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x1a, 0xde, 0x01, 0x0a, 0x0c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x46,
	0x6f, 0x72, 0x43, 0x65, 0x6c, 0x6c, 0x12, 0x3b, 0x0a, 0x0a, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x43,
	0x45, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x66, 0x6c, 0x61,
	0x76, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x54, 0x53, 0x43, 0x45,
	0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x52, 0x0b,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x12, 0x49, 0x0a, 0x0f, 0x65,
	0x72, 0x72, 0x5f, 0x64, 0x75, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x44, 0x75, 0x65,
	0x54, 0x6f, 0x43, 0x65, 0x6c, 0x6c, 0x22, 0x69, 0x0a, 0x0b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x46,
	0x6c, 0x61, 0x76, 0x6f, 0x72, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45,
	0x46, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x49, 0x52,
	0x43, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x52, 0x45, 0x46, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44,
	0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x04, 0x22, 0x82, 0x04, 0x0a, 0x15, 0x55, 0x75, 0x69, 0x64, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x66, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x73,
	0x12, 0x54, 0x0a, 0x0f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x5f, 0x72,
	0x65, 0x66, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x54, 0x53, 0x43, 0x45,
	0x2e, 0x55, 0x75, 0x69, 0x64, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x69, 0x74, 0x68,
	0x55, 0x75, 0x69, 0x64, 0x52, 0x65, 0x66, 0x52, 0x0d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x75,
	0x69, 0x64, 0x52, 0x65, 0x66, 0x73, 0x1a, 0x6c, 0x0a, 0x08, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x66, 0x12, 0x28, 0x0a, 0x0a, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49,
	0x44, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x09,
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6f, 0x72, 0x64,
	0x53, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x08, 0x63, 0x6f, 0x6f, 0x72,
	0x64, 0x53, 0x65, 0x74, 0x1a, 0x60, 0x0a, 0x07, 0x55, 0x75, 0x69, 0x64, 0x52, 0x65, 0x66, 0x12,
	0x1d, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x36,
	0x0a, 0x09, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6f,
	0x72, 0x64, 0x53, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x08, 0x63, 0x6f,
	0x6f, 0x72, 0x64, 0x53, 0x65, 0x74, 0x1a, 0x7e, 0x0a, 0x10, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x57,
	0x69, 0x74, 0x68, 0x55, 0x75, 0x69, 0x64, 0x52, 0x65, 0x66, 0x12, 0x28, 0x0a, 0x0a, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x75, 0x75, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x66,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x55,
	0x75, 0x69, 0x64, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x52, 0x65, 0x66, 0x52, 0x08, 0x75, 0x75,
	0x69, 0x64, 0x52, 0x65, 0x66, 0x73, 0x22, 0x94, 0x09, 0x0a, 0x1f, 0x46, 0x6f, 0x72, 0x6d, 0x75,
	0x6c, 0x61, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x35, 0x0a, 0x11, 0x66, 0x6f,
	0x72, 0x6d, 0x75, 0x6c, 0x61, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44,
	0x52, 0x0f, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x69,
	0x64, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x75, 0x6c, 0x61, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x46, 0x6f,
	0x72, 0x6d, 0x75, 0x6c, 0x61, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0a,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x3a, 0x01, 0x30, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x52,
	0x0a, 0x11, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x54, 0x53, 0x43, 0x45,
	0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x10, 0x63, 0x65, 0x6c, 0x6c, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x12, 0x4d, 0x0a, 0x12, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x65, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x11,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x12, 0x5e, 0x0a, 0x15, 0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x64, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x56, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x65,
	0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x45, 0x78, 0x70, 0x61,
	0x6e, 0x64, 0x65, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x14, 0x76, 0x6f, 0x6c,
	0x61, 0x74, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x12, 0x6b, 0x0a, 0x1c, 0x73, 0x70, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x53,
	0x70, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x1a, 0x73, 0x70, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x65,
	0x0a, 0x19, 0x73, 0x70, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x64,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x45, 0x78, 0x70,
	0x61, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x17, 0x73, 0x70,
	0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x77, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x65, 0x0a, 0x18, 0x77, 0x68, 0x6f, 0x6c, 0x65, 0x5f, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x57,
	0x68, 0x6f, 0x6c, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x16, 0x77, 0x68, 0x6f, 0x6c, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0b,
	0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x63, 0x65, 0x6c, 0x6c,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x33, 0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c,
	0x61, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x66,
	0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x0e, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0c,
	0x62, 0x61, 0x73, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x5a, 0x0a, 0x17,
	0x74, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x54, 0x53, 0x43, 0x45, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x54, 0x69, 0x6c, 0x65, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x15, 0x74, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x44, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x0f, 0x75, 0x75, 0x69, 0x64,
	0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0e,
	0x75, 0x75, 0x69, 0x64, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x5d,
	0x0a, 0x18, 0x74, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x65, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x54, 0x69, 0x6c, 0x65, 0x64, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x16, 0x74, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x22, 0xdc, 0x05,
	0x0a, 0x17, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x3c, 0x0a, 0x10, 0x66, 0x6f, 0x72,
	0x6d, 0x75, 0x6c, 0x61, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x43, 0x46, 0x55, 0x55, 0x49, 0x44,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0e, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x11, 0x63, 0x65, 0x6c, 0x6c, 0x5f,
	0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x44, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x10, 0x63, 0x65, 0x6c, 0x6c, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x12, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x11, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x12, 0x56, 0x0a, 0x15, 0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x64,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x56, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c,
	0x65, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x14, 0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x65, 0x44, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x63, 0x0a, 0x1c, 0x73, 0x70,
	0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x64, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x1a, 0x73, 0x70, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12,
	0x5d, 0x0a, 0x19, 0x73, 0x70, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x6f, 0x77, 0x5f,
	0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x17, 0x73, 0x70, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x52,
	0x6f, 0x77, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x5d,
	0x0a, 0x18, 0x77, 0x68, 0x6f, 0x6c, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x64, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x57, 0x68, 0x6f, 0x6c, 0x65, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x16, 0x77, 0x68, 0x6f, 0x6c, 0x65, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x38, 0x0a,
	0x0b, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x63, 0x65, 0x6c,
	0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x33, 0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x6d, 0x75,
	0x6c, 0x61, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0c,
	0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0x6a, 0x0a, 0x18,
	0x53, 0x75, 0x62, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49,
	0x44, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2f, 0x0a, 0x0e, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0c, 0x62, 0x61, 0x73,
	0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x09, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x22, 0x9a, 0x02, 0x0a, 0x11, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x49, 0x44, 0x4d, 0x61, 0x70, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x4b,
	0x0a, 0x09, 0x6d, 0x61, 0x70, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x44,
	0x4d, 0x61, 0x70, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x49, 0x44, 0x4d, 0x61, 0x70, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x6d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x43, 0x0a, 0x1e, 0x75,
	0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x1b, 0x75, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64,
	0x1a, 0x73, 0x0a, 0x16, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x4d, 0x61, 0x70, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x43,
	0x46, 0x55, 0x55, 0x49, 0x44, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x07, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x49, 0x64, 0x22, 0x37, 0x0a, 0x14, 0x55, 0x69, 0x64, 0x4c, 0x6f, 0x6f, 0x6b,
	0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x1f, 0x0a,
	0x05, 0x75, 0x75, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x05, 0x75, 0x75, 0x69, 0x64, 0x73, 0x22, 0xb5,
	0x03, 0x0a, 0x18, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x4b, 0x0a, 0x12, 0x66,
	0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x46,
	0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x10, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3d, 0x0a, 0x0a, 0x64, 0x69, 0x72, 0x74,
	0x79, 0x5f, 0x6c, 0x65, 0x61, 0x66, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54,
	0x53, 0x43, 0x45, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x64, 0x69,
	0x72, 0x74, 0x79, 0x4c, 0x65, 0x61, 0x66, 0x12, 0x39, 0x0a, 0x0c, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x54, 0x53, 0x43, 0x45, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x4d, 0x61, 0x70, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x4d,
	0x61, 0x70, 0x12, 0x56, 0x0a, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x64,
	0x69, 0x72, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x61, 0x66, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43,
	0x65, 0x6c, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x44, 0x69, 0x72, 0x74, 0x79, 0x4c, 0x65, 0x61, 0x66, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66,
	0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x12, 0x4c, 0x0a, 0x1a, 0x66, 0x6f, 0x72, 0x6d,
	0x75, 0x6c, 0x61, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x18, 0x66, 0x6f,
	0x72, 0x6d, 0x75, 0x6c, 0x61, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0d, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0xea, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x12, 0x48, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x1a, 0x82,
	0x01, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x3e, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x09, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x43, 0x65, 0x6c, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xc1, 0x01, 0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x3f, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x1a, 0x44, 0x0a, 0x0e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70,
	0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x06, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x9d, 0x01, 0x0a,
	0x18, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x69, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a,
	0x11, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65,
	0x64, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65,
	0x64, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0xae, 0x01, 0x0a,
	0x1e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x42, 0x79, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12,
	0x2d, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x43, 0x46, 0x55, 0x55, 0x49, 0x44, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x5d,
	0x0a, 0x1b, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50,
	0x61, 0x69, 0x72, 0x52, 0x18, 0x6e, 0x61, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x69, 0x72, 0x22, 0xd2, 0x01,
	0x0a, 0x1c, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x3b,
	0x0a, 0x11, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x75, 0x0a, 0x23, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x62, 0x79, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x42, 0x79, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x1e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x42, 0x79, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x65, 0x64, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x79, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x22, 0x9e, 0x01, 0x0a, 0x13, 0x55, 0x75, 0x69, 0x64, 0x53, 0x65, 0x74, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x75, 0x75,
	0x69, 0x64, 0x53, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x54, 0x53,
	0x43, 0x45, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x53, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x53, 0x65, 0x74, 0x52, 0x07,
	0x75, 0x75, 0x69, 0x64, 0x53, 0x65, 0x74, 0x1a, 0x4a, 0x0a, 0x07, 0x55, 0x75, 0x69, 0x64, 0x53,
	0x65, 0x74, 0x12, 0x1d, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4f, 0x66,
	0x53, 0x65, 0x74, 0x22, 0xa5, 0x02, 0x0a, 0x17, 0x55, 0x75, 0x69, 0x64, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12,
	0x5a, 0x0a, 0x12, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x5f, 0x66, 0x6f, 0x72,
	0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x54, 0x53,
	0x43, 0x45, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x4d, 0x61, 0x70, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x52,
	0x65, 0x66, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x75, 0x69, 0x64, 0x52, 0x0f, 0x63, 0x65, 0x6c, 0x6c,
	0x52, 0x65, 0x66, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x75, 0x69, 0x64, 0x1a, 0xad, 0x01, 0x0a, 0x0f,
	0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x66, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x1d, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x3d,
	0x0a, 0x08, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x07, 0x63, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x66, 0x12, 0x3c, 0x0a,
	0x09, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x66, 0x53, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x08, 0x63, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x66, 0x73, 0x22, 0xa3, 0x03, 0x0a, 0x15,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x70, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x5b, 0x0a, 0x11, 0x72, 0x65, 0x66, 0x73, 0x5f, 0x66, 0x6f,
	0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x4e,
	0x6f, 0x64, 0x65, 0x4d, 0x61, 0x70, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x42, 0x79, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x73, 0x46, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x42, 0x79, 0x1a, 0x85, 0x01, 0x0a, 0x14, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x66, 0x73, 0x46,
	0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x0e, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0c,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x55, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09,
	0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43,
	0x65, 0x6c, 0x6c, 0x52, 0x65, 0x66, 0x53, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x08, 0x63, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x66, 0x73, 0x1a, 0xa4, 0x01, 0x0a, 0x14, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x42, 0x79, 0x12, 0x2b, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x5f,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x55, 0x55, 0x49, 0x44, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x55, 0x69, 0x64,
	0x12, 0x5f, 0x0a, 0x13, 0x72, 0x65, 0x66, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x54, 0x53, 0x43, 0x45, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x4e, 0x6f, 0x64, 0x65,
	0x4d, 0x61, 0x70, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x52,
	0x65, 0x66, 0x73, 0x46, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x10, 0x72, 0x65, 0x66, 0x73, 0x46, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x64,
	0x65, 0x22, 0xe8, 0x09, 0x0a, 0x18, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x24,
	0x0a, 0x0e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x31, 0x39, 0x30, 0x34,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x31, 0x39, 0x30, 0x34, 0x12, 0x4d, 0x0a, 0x12, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e,
	0x63, 0x79, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x11, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x17, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x15, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x77, 0x0a, 0x16, 0x65,
	0x78, 0x63, 0x65, 0x6c, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x54, 0x53,
	0x43, 0x45, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x45, 0x78, 0x63, 0x65,
	0x6c, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x3a,
	0x0e, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x31, 0x39, 0x30, 0x30, 0x52,
	0x13, 0x65, 0x78, 0x63, 0x65, 0x6c, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x43, 0x0a, 0x1f, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x66, 0x6f, 0x72, 0x5f, 0x34, 0x5f, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x73,
	0x61, 0x76, 0x65, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x34, 0x32, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x73, 0x65, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53, 0x65, 0x65, 0x64, 0x12, 0x4b, 0x0a, 0x12, 0x75,
	0x75, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x61,
	0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x55,
	0x75, 0x69, 0x64, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x10, 0x75, 0x75, 0x69, 0x64, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x2d, 0x0a, 0x12, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x4c, 0x0a, 0x11, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x69,
	0x64, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x55, 0x49, 0x44, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x0f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x69, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x3a, 0x0a, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x41,
	0x0a, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x42, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x70, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61,
	0x70, 0x12, 0x3e, 0x0a, 0x13, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x11,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x12, 0x32, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x69, 0x72,
	0x74, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x66, 0x73, 0x54, 0x6f,
	0x44, 0x69, 0x72, 0x74, 0x79, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x73, 0x61, 0x76, 0x65, 0x64, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x4f, 0x0a,
	0x1f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x6e, 0x72, 0x6d,
	0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49,
	0x44, 0x52, 0x1b, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x4e, 0x72, 0x6d, 0x12, 0x4b,
	0x0a, 0x1d, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x6e, 0x72, 0x6d, 0x18,
	0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44,
	0x52, 0x19, 0x65, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x4e, 0x72, 0x6d, 0x22, 0x5f, 0x0a, 0x13, 0x45,
	0x78, 0x63, 0x65, 0x6c, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x31, 0x39, 0x30, 0x30, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x31, 0x39, 0x30, 0x30, 0x5f, 0x4c, 0x45, 0x47, 0x41, 0x43, 0x59, 0x10,
	0x02, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x31,
	0x39, 0x30, 0x34, 0x5f, 0x4c, 0x45, 0x47, 0x41, 0x43, 0x59, 0x10, 0x03, 0x22, 0xef, 0x01, 0x0a,
	0x1d, 0x50, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52,
	0x6f, 0x77, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x31,
	0x0a, 0x15, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x69, 0x73, 0x5f, 0x61,
	0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x12, 0x62,
	0x65, 0x67, 0x69, 0x6e, 0x52, 0x6f, 0x77, 0x49, 0x73, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x65, 0x12, 0x37, 0x0a, 0x18, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x5f, 0x69, 0x73, 0x5f, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x08, 0x52, 0x15, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x49, 0x73, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x65, 0x6e,
	0x64, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x69, 0x73, 0x5f, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x65, 0x6e, 0x64, 0x52, 0x6f, 0x77, 0x49,
	0x73, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x65, 0x6e, 0x64,
	0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x69, 0x73, 0x5f, 0x61, 0x62, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x65, 0x6e, 0x64, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x73, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x22, 0x82,
	0x06, 0x0a, 0x18, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2b, 0x0a, 0x0c, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0a, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x42, 0x79, 0x55, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x55,
	0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0d, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x02, 0x28, 0x11, 0x52, 0x0a,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x4b, 0x0a, 0x0a, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x75, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x43,
	0x61, 0x74, 0x52, 0x65, 0x66, 0x55, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x55, 0x69, 0x64, 0x73, 0x12, 0x4a, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x6f, 0x77, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x37, 0x0a, 0x12,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x75,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55,
	0x55, 0x49, 0x44, 0x52, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x55, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x12, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x10, 0x61, 0x62,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x69, 0x64, 0x12, 0x3c,
	0x0a, 0x1b, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x73, 0x5f,
	0x74, 0x6f, 0x5f, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x17, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x73, 0x54, 0x6f, 0x50, 0x69, 0x76, 0x6f, 0x74, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x42, 0x0a, 0x1e,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x6f,
	0x5f, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x73, 0x54, 0x6f, 0x50, 0x69, 0x76, 0x6f, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x61, 0x67, 0x67, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x3b, 0x0a, 0x1a, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x6f, 0x77, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x2c, 0x0a, 0x0d, 0x43, 0x61, 0x74, 0x52, 0x65, 0x66, 0x55,
	0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x22, 0xcc, 0x40, 0x0a, 0x13, 0x41, 0x53, 0x54, 0x4e, 0x6f, 0x64, 0x65, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x41,
	0x53, 0x54, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x54, 0x53, 0x43, 0x45, 0x2e, 0x41, 0x53, 0x54, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x41, 0x53, 0x54, 0x4e, 0x6f, 0x64, 0x65,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x07, 0x41, 0x53, 0x54, 0x4e, 0x6f, 0x64, 0x65,
	0x1a, 0xb4, 0x01, 0x0a, 0x20, 0x41, 0x53, 0x54, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x65, 0x6c,
	0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6f, 0x77, 0x5f, 0x68, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x6f, 0x77, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x6f, 0x77,
	0x5f, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x79, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d,
	0x52, 0x0b, 0x72, 0x6f, 0x77, 0x49, 0x73, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x79, 0x12, 0x28, 0x0a,
	0x10, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x69, 0x63, 0x6b,
	0x79, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49,
	0x73, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x79, 0x1a, 0xd4, 0x04, 0x0a, 0x25, 0x41, 0x53, 0x54, 0x43,
	0x72, 0x6f, 0x73, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6f, 0x77, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x6f, 0x77, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x6f, 0x77, 0x5f, 0x69, 0x73, 0x5f,
	0x73, 0x74, 0x69, 0x63, 0x6b, 0x79, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x6f,
	0x77, 0x49, 0x73, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x5f, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x79, 0x18, 0x04, 0x20,
	0x02, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x73, 0x53, 0x74, 0x69,
	0x63, 0x6b, 0x79, 0x12, 0x2d, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x43, 0x46, 0x55, 0x55,
	0x49, 0x44, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x57, 0x0a, 0x29, 0x41, 0x53, 0x54, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x68, 0x65, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x24, 0x41, 0x53, 0x54, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x57, 0x68, 0x69, 0x74, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x41, 0x66, 0x74,
	0x65, 0x72, 0x53, 0x68, 0x65, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x59, 0x0a, 0x2a, 0x41,
	0x53, 0x54, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x77, 0x68, 0x69,
	0x74, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x25, 0x41, 0x53, 0x54, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x57, 0x68, 0x69,
	0x74, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x57, 0x0a, 0x29, 0x41, 0x53, 0x54, 0x5f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x24, 0x41, 0x53, 0x54, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x57, 0x68, 0x69, 0x74, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x5d, 0x0a, 0x2c, 0x41, 0x53, 0x54, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x62, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x27, 0x41, 0x53, 0x54, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x57, 0x68, 0x69, 0x74, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x42, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x57,
	0x0a, 0x1a, 0x41, 0x53, 0x54, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x43, 0x6f, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x11, 0x52, 0x06, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x21, 0x0a, 0x08, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x08, 0x61,
	0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x1a, 0x4e, 0x0a, 0x17, 0x41, 0x53, 0x54, 0x52, 0x6f,
	0x77, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x02, 0x28, 0x11, 0x52,
	0x03, 0x72, 0x6f, 0x77, 0x12, 0x21, 0x0a, 0x08, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x08, 0x61,
	0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x1a, 0x29, 0x0a, 0x0a, 0x41, 0x53, 0x54, 0x55, 0x69,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x1a, 0xb6, 0x02, 0x0a, 0x0b, 0x41, 0x53, 0x54, 0x55, 0x69, 0x64, 0x54, 0x72, 0x61,
	0x63, 0x74, 0x12, 0x44, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x55, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x41, 0x53,
	0x54, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x2e, 0x41, 0x53, 0x54, 0x55, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0a, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x55, 0x69, 0x64, 0x73, 0x12, 0x3e, 0x0a, 0x07, 0x72, 0x6f, 0x77, 0x55,
	0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x54, 0x53, 0x43, 0x45,
	0x2e, 0x41, 0x53, 0x54, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x2e, 0x41, 0x53, 0x54, 0x55, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x07, 0x72, 0x6f, 0x77, 0x55, 0x69, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x69, 0x73, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x66, 0x12, 0x46, 0x0a, 0x07, 0x70, 0x75,
	0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x54, 0x53,
	0x43, 0x45, 0x2e, 0x41, 0x53, 0x54, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x41, 0x53, 0x54, 0x55, 0x69, 0x64, 0x54, 0x72, 0x61,
	0x63, 0x74, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x52, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f,
	0x73, 0x65, 0x12, 0x37, 0x0a, 0x14, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x72,
	0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x13, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x52, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x1a, 0xdf, 0x01, 0x0a, 0x0d,
	0x41, 0x53, 0x54, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x79, 0x42, 0x69, 0x74, 0x73, 0x12, 0x31, 0x0a,
	0x15, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x69, 0x73, 0x5f, 0x61, 0x62,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x12, 0x62, 0x65,
	0x67, 0x69, 0x6e, 0x52, 0x6f, 0x77, 0x49, 0x73, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65,
	0x12, 0x37, 0x0a, 0x18, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x5f, 0x69, 0x73, 0x5f, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x08, 0x52, 0x15, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49,
	0x73, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x65, 0x6e, 0x64,
	0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x69, 0x73, 0x5f, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x08, 0x52, 0x10, 0x65, 0x6e, 0x64, 0x52, 0x6f, 0x77, 0x49, 0x73,
	0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x65, 0x6e, 0x64, 0x5f,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x69, 0x73, 0x5f, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x08, 0x52, 0x13, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x49, 0x73, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x1a, 0x98, 0x01,
	0x0a, 0x0f, 0x41, 0x53, 0x54, 0x55, 0x69, 0x64, 0x54, 0x72, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x3b, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x41, 0x53, 0x54, 0x4e, 0x6f, 0x64, 0x65, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x41, 0x53, 0x54, 0x55,
	0x69, 0x64, 0x54, 0x72, 0x61, 0x63, 0x74, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x48,
	0x0a, 0x0b, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x79, 0x5f, 0x62, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x41, 0x53, 0x54, 0x4e, 0x6f,
	0x64, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x41,
	0x53, 0x54, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x79, 0x42, 0x69, 0x74, 0x73, 0x52, 0x0a, 0x73, 0x74,
	0x69, 0x63, 0x6b, 0x79, 0x42, 0x69, 0x74, 0x73, 0x1a, 0xb3, 0x01, 0x0a, 0x17, 0x41, 0x53, 0x54,
	0x55, 0x69, 0x64, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x12, 0x28, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55,
	0x55, 0x49, 0x44, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x55, 0x69, 0x64, 0x12, 0x22,
	0x0a, 0x07, 0x72, 0x6f, 0x77, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x06, 0x72, 0x6f, 0x77, 0x55,
	0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x61, 0x62, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72,
	0x6f, 0x77, 0x5f, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28,
	0x08, 0x52, 0x0b, 0x72, 0x6f, 0x77, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x1a, 0xa6,
	0x01, 0x0a, 0x11, 0x41, 0x53, 0x54, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x41, 0x53, 0x54, 0x5f, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x13, 0x41, 0x53, 0x54, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2d, 0x0a, 0x13, 0x41, 0x53, 0x54,
	0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x10, 0x41, 0x53, 0x54, 0x52, 0x6f, 0x77, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2d, 0x0a, 0x13, 0x41, 0x53, 0x54, 0x5f,
	0x61, 0x67, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x41, 0x53, 0x54, 0x41, 0x67, 0x67, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x1a, 0x60, 0x0a, 0x1b, 0x41, 0x53, 0x54, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x54,
	0x53, 0x43, 0x45, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0b, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x66, 0x1a, 0xf5, 0x05, 0x0a, 0x14, 0x41, 0x53,
	0x54, 0x43, 0x6f, 0x6c, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x12, 0x79, 0x0a, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x54, 0x53,
	0x43, 0x45, 0x2e, 0x41, 0x53, 0x54, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x41, 0x53, 0x54, 0x43, 0x6f, 0x6c, 0x6f, 0x6e, 0x54,
	0x72, 0x61, 0x63, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x41, 0x53, 0x54, 0x43,
	0x6f, 0x6c, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0e, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x73, 0x0a,
	0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x6f, 0x77, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x41, 0x53, 0x54, 0x4e, 0x6f,
	0x64, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x41,
	0x53, 0x54, 0x43, 0x6f, 0x6c, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x74, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x2e, 0x41, 0x53, 0x54, 0x43, 0x6f, 0x6c, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63,
	0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52,
	0x6f, 0x77, 0x12, 0x79, 0x0a, 0x0f, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x5f, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x54, 0x53,
	0x43, 0x45, 0x2e, 0x41, 0x53, 0x54, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x41, 0x53, 0x54, 0x43, 0x6f, 0x6c, 0x6f, 0x6e, 0x54,
	0x72, 0x61, 0x63, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x41, 0x53, 0x54, 0x43,
	0x6f, 0x6c, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x74, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0e, 0x61,
	0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x73, 0x0a,
	0x0c, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x77, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x41, 0x53, 0x54, 0x4e, 0x6f,
	0x64, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x41,
	0x53, 0x54, 0x43, 0x6f, 0x6c, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x74, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x2e, 0x41, 0x53, 0x54, 0x43, 0x6f, 0x6c, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63,
	0x74, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0b, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x52,
	0x6f, 0x77, 0x12, 0x37, 0x0a, 0x14, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x72,
	0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x13, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x52, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x1a, 0x61, 0x0a, 0x21, 0x41,
	0x53, 0x54, 0x43, 0x6f, 0x6c, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x65, 0x67, 0x69,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x6e, 0x64, 0x1a, 0x61,
	0x0a, 0x21, 0x41, 0x53, 0x54, 0x43, 0x6f, 0x6c, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x74, 0x41,
	0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x62, 0x65, 0x67,
	0x69, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x42,
	0x65, 0x67, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x65, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x6e,
	0x64, 0x1a, 0xc3, 0x03, 0x0a, 0x26, 0x41, 0x53, 0x54, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2d, 0x0a, 0x08,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x43, 0x46, 0x55, 0x55, 0x49, 0x44, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x57, 0x0a, 0x29, 0x41,
	0x53, 0x54, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x77, 0x68, 0x69,
	0x74, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x68,
	0x65, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x24,
	0x41, 0x53, 0x54, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x57, 0x68, 0x69, 0x74,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x53, 0x68, 0x65, 0x65, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x59, 0x0a, 0x2a, 0x41, 0x53, 0x54, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x25, 0x41, 0x53, 0x54, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x57, 0x68, 0x69, 0x74, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x57, 0x0a, 0x29, 0x41, 0x53, 0x54, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x24, 0x41, 0x53, 0x54, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x57, 0x68, 0x69, 0x74, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5d, 0x0a, 0x2c, 0x41, 0x53, 0x54, 0x5f,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x65, 0x6c, 0x6c,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x27,
	0x41, 0x53, 0x54, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x57, 0x68, 0x69, 0x74,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x43, 0x65, 0x6c, 0x6c,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0xb6, 0x02, 0x0a, 0x14, 0x41, 0x53, 0x54, 0x4c,
	0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x57, 0x68, 0x69, 0x74, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x3e, 0x0a, 0x1c, 0x41, 0x53, 0x54, 0x5f, 0x6c, 0x65, 0x74, 0x5f, 0x77, 0x68, 0x69, 0x74,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x41, 0x53, 0x54, 0x4c, 0x65, 0x74, 0x57, 0x68,
	0x69, 0x74, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x74,
	0x12, 0x4c, 0x0a, 0x23, 0x41, 0x53, 0x54, 0x5f, 0x6c, 0x65, 0x74, 0x5f, 0x77, 0x68, 0x69, 0x74,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x41,
	0x53, 0x54, 0x4c, 0x65, 0x74, 0x57, 0x68, 0x69, 0x74, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x41,
	0x66, 0x74, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x44,
	0x0a, 0x1f, 0x41, 0x53, 0x54, 0x5f, 0x6c, 0x65, 0x74, 0x5f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x71, 0x75, 0x61, 0x6c,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x41, 0x53, 0x54, 0x4c, 0x65, 0x74, 0x57,
	0x68, 0x69, 0x74, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x45, 0x71,
	0x75, 0x61, 0x6c, 0x73, 0x12, 0x4a, 0x0a, 0x22, 0x41, 0x53, 0x54, 0x5f, 0x6c, 0x65, 0x74, 0x5f,
	0x77, 0x68, 0x69, 0x74, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x5f, 0x64, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1e, 0x41, 0x53, 0x54, 0x4c, 0x65, 0x74, 0x57, 0x68, 0x69, 0x74, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72,
	0x1a, 0xb3, 0x18, 0x0a, 0x0e, 0x41, 0x53, 0x54, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x12, 0x49, 0x0a, 0x0d, 0x41, 0x53, 0x54, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x54, 0x53, 0x43,
	0x45, 0x2e, 0x41, 0x53, 0x54, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x41, 0x53, 0x54, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0b, 0x41, 0x53, 0x54, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35,
	0x0a, 0x17, 0x41, 0x53, 0x54, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x14, 0x41, 0x53, 0x54, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x39, 0x0a, 0x19, 0x41, 0x53, 0x54, 0x5f, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x41, 0x72,
	0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x41, 0x53, 0x54, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x75, 0x6d, 0x41, 0x72, 0x67, 0x73,
	0x12, 0x33, 0x0a, 0x16, 0x41, 0x53, 0x54, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x13, 0x41, 0x53, 0x54, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x18, 0x41, 0x53, 0x54, 0x5f, 0x62, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x41, 0x53, 0x54, 0x42, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x33,
	0x0a, 0x16, 0x41, 0x53, 0x54, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x41, 0x53, 0x54, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x31, 0x0a, 0x15, 0x41, 0x53, 0x54, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x12, 0x41, 0x53, 0x54, 0x44, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x49, 0x0a, 0x22, 0x41, 0x53, 0x54, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1d, 0x41, 0x53, 0x54, 0x44, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x53,
	0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x12, 0x49, 0x0a, 0x22, 0x41, 0x53, 0x54, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x41,
	0x53, 0x54, 0x44, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x41, 0x0a, 0x1e,
	0x41, 0x53, 0x54, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x41, 0x53, 0x54, 0x44, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12,
	0x39, 0x0a, 0x19, 0x41, 0x53, 0x54, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x4e, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x16, 0x41, 0x53, 0x54, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x6f, 0x64, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x33, 0x0a, 0x16, 0x41, 0x53,
	0x54, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x41, 0x53, 0x54, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12,
	0x35, 0x0a, 0x17, 0x41, 0x53, 0x54, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x14, 0x41, 0x53, 0x54, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64,
	0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x53, 0x0a, 0x27, 0x41, 0x53, 0x54, 0x5f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x73,
	0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x22, 0x41, 0x53, 0x54, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x55, 0x6e, 0x69, 0x74, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x28, 0x41,
	0x53, 0x54, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x73,
	0x6d, 0x61, 0x6c, 0x6c, 0x65, 0x73, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x23, 0x41,
	0x53, 0x54, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x65,
	0x73, 0x74, 0x12, 0x4f, 0x0a, 0x25, 0x41, 0x53, 0x54, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x20, 0x41, 0x53, 0x54, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f,
	0x64, 0x65, 0x55, 0x73, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x55, 0x6e,
	0x69, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x41, 0x53, 0x54, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x41, 0x53, 0x54, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4e, 0x6f, 0x64,
	0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x31, 0x0a, 0x15, 0x41, 0x53, 0x54, 0x5f,
	0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x43, 0x6f,
	0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x41, 0x53, 0x54, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x75, 0x6d, 0x43, 0x6f, 0x6c, 0x12, 0x31, 0x0a, 0x15, 0x41,
	0x53, 0x54, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x52, 0x6f, 0x77, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x41, 0x53, 0x54, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x75, 0x6d, 0x52, 0x6f, 0x77, 0x12, 0x31,
	0x0a, 0x15, 0x41, 0x53, 0x54, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x41, 0x72, 0x67, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x41,
	0x53, 0x54, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x75, 0x6d, 0x41, 0x72, 0x67,
	0x73, 0x12, 0x4a, 0x0a, 0x14, 0x41, 0x53, 0x54, 0x5f, 0x74, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x41, 0x53, 0x54, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x11, 0x41, 0x53, 0x54, 0x54,
	0x68, 0x75, 0x6e, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x8f, 0x01,
	0x0a, 0x27, 0x41, 0x53, 0x54, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x65, 0x6c, 0x6c,
	0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3a, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x41, 0x53, 0x54, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x41, 0x53, 0x54, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x22, 0x41, 0x53, 0x54,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x9f, 0x01, 0x0a, 0x2d, 0x41, 0x53, 0x54, 0x5f, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x41,
	0x53, 0x54, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x2e, 0x41, 0x53, 0x54, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x27, 0x41, 0x53, 0x54, 0x43, 0x72, 0x6f,
	0x73, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x46, 0x0a, 0x20, 0x41, 0x53, 0x54, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x41, 0x53, 0x54,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x6f, 0x64, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x48, 0x0a, 0x21, 0x41, 0x53, 0x54,
	0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x41, 0x72, 0x67, 0x73, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x41, 0x53, 0x54, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x75, 0x6d, 0x41,
	0x72, 0x67, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x41, 0x53, 0x54, 0x5f, 0x77, 0x68, 0x69, 0x74, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x41, 0x53, 0x54,
	0x57, 0x68, 0x69, 0x74, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x53, 0x0a, 0x0a, 0x41, 0x53,
	0x54, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x41, 0x53, 0x54, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x41, 0x53, 0x54, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x09, 0x41, 0x53, 0x54, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12,
	0x4a, 0x0a, 0x07, 0x41, 0x53, 0x54, 0x5f, 0x72, 0x6f, 0x77, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x41, 0x53, 0x54, 0x4e, 0x6f, 0x64, 0x65, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x41, 0x53, 0x54, 0x52,
	0x6f, 0x77, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x06, 0x41, 0x53, 0x54, 0x52, 0x6f, 0x77, 0x12, 0x8f, 0x01, 0x0a, 0x24,
	0x41, 0x53, 0x54, 0x5f, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x54, 0x53, 0x43,
	0x45, 0x2e, 0x41, 0x53, 0x54, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x41, 0x53, 0x54, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1f, 0x41, 0x53,
	0x54, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5f, 0x0a,
	0x12, 0x41, 0x53, 0x54, 0x5f, 0x75, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x54, 0x53, 0x43, 0x45,
	0x2e, 0x41, 0x53, 0x54, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x2e, 0x41, 0x53, 0x54, 0x55, 0x69, 0x64, 0x43, 0x6f, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x10, 0x41, 0x53,
	0x54, 0x55, 0x69, 0x64, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x4f,
	0x0a, 0x0f, 0x41, 0x53, 0x54, 0x5f, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x79, 0x5f, 0x62, 0x69, 0x74,
	0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x41,
	0x53, 0x54, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x2e, 0x41, 0x53, 0x54, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x79, 0x42, 0x69, 0x74, 0x73,
	0x52, 0x0d, 0x41, 0x53, 0x54, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x79, 0x42, 0x69, 0x74, 0x73, 0x12,
	0x5c, 0x0a, 0x16, 0x41, 0x53, 0x54, 0x5f, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x5f, 0x73, 0x74,
	0x69, 0x63, 0x6b, 0x79, 0x5f, 0x62, 0x69, 0x74, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x41, 0x53, 0x54, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x41, 0x53, 0x54, 0x53, 0x74,
	0x69, 0x63, 0x6b, 0x79, 0x42, 0x69, 0x74, 0x73, 0x52, 0x13, 0x41, 0x53, 0x54, 0x46, 0x72, 0x6f,
	0x7a, 0x65, 0x6e, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x79, 0x42, 0x69, 0x74, 0x73, 0x12, 0x2c, 0x0a,
	0x12, 0x41, 0x53, 0x54, 0x5f, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x41, 0x53, 0x54, 0x4c, 0x65,
	0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x0a, 0x41,
	0x53, 0x54, 0x5f, 0x6c, 0x65, 0x74, 0x5f, 0x65, 0x32, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x41, 0x53, 0x54, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x08, 0x41, 0x53, 0x54, 0x4c,
	0x65, 0x74, 0x45, 0x32, 0x12, 0x5c, 0x0a, 0x12, 0x41, 0x53, 0x54, 0x5f, 0x6c, 0x65, 0x74, 0x5f,
	0x77, 0x68, 0x69, 0x74, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x41, 0x53, 0x54, 0x4e, 0x6f, 0x64, 0x65, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x41, 0x53, 0x54, 0x4c,
	0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x57, 0x68, 0x69, 0x74, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x52, 0x10, 0x41, 0x53, 0x54, 0x4c, 0x65, 0x74, 0x57, 0x68, 0x69, 0x74, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x41, 0x53, 0x54, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x41, 0x53, 0x54, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x12, 0x4f, 0x0a, 0x0e, 0x41, 0x53, 0x54, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x54, 0x53, 0x43, 0x45,
	0x2e, 0x41, 0x53, 0x54, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x2e, 0x41, 0x53, 0x54, 0x55, 0x69, 0x64, 0x54, 0x72, 0x61, 0x63, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x0c, 0x41, 0x53, 0x54, 0x54, 0x72, 0x61, 0x63, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x5f, 0x0a, 0x10, 0x41, 0x53, 0x54, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x54,
	0x53, 0x43, 0x45, 0x2e, 0x41, 0x53, 0x54, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x41, 0x53, 0x54, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x0e, 0x41, 0x53, 0x54, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x66, 0x12, 0x56, 0x0a, 0x0f, 0x41, 0x53, 0x54, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x6e,
	0x5f, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x54,
	0x53, 0x43, 0x45, 0x2e, 0x41, 0x53, 0x54, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x41, 0x53, 0x54, 0x43, 0x6f, 0x6c, 0x6f, 0x6e,
	0x54, 0x72, 0x61, 0x63, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0d, 0x41, 0x53,
	0x54, 0x43, 0x6f, 0x6c, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x74, 0x12, 0x3c, 0x0a, 0x1b, 0x41,
	0x53, 0x54, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x64,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x6c, 0x6f, 0x77, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x17, 0x41, 0x53, 0x54, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x4c, 0x6f, 0x77, 0x12, 0x3e, 0x0a, 0x1c, 0x41, 0x53, 0x54,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x18, 0x41, 0x53, 0x54, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x69, 0x67, 0x68, 0x12, 0x5b, 0x0a, 0x13, 0x41, 0x53, 0x54,
	0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73,
	0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x41, 0x53,
	0x54, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x2e, 0x41, 0x53, 0x54, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x73, 0x52, 0x11, 0x41, 0x53, 0x54, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x22, 0xcd, 0x08, 0x0a, 0x0b, 0x41, 0x53, 0x54, 0x4e, 0x6f,
	0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x44, 0x44, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x55, 0x42,
	0x54, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x02, 0x12,
	0x17, 0x0a, 0x13, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x49, 0x56, 0x49,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x50,
	0x4f, 0x57, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x43,
	0x4f, 0x4e, 0x43, 0x41, 0x54, 0x45, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x44,
	0x45, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x54,
	0x48, 0x41, 0x4e, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x07, 0x12, 0x21, 0x0a, 0x1d, 0x47, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x4f, 0x52, 0x5f, 0x45, 0x51,
	0x55, 0x41, 0x4c, 0x5f, 0x54, 0x4f, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x08, 0x12, 0x12, 0x0a,
	0x0e, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10,
	0x09, 0x12, 0x1e, 0x0a, 0x1a, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x4f,
	0x52, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x5f, 0x54, 0x4f, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10,
	0x0a, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x5f, 0x54, 0x4f, 0x5f, 0x4e, 0x4f,
	0x44, 0x45, 0x10, 0x0b, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x51, 0x55, 0x41,
	0x4c, 0x5f, 0x54, 0x4f, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x0c, 0x12, 0x11, 0x0a, 0x0d, 0x4e,
	0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x0d, 0x12, 0x12,
	0x0a, 0x0e, 0x50, 0x4c, 0x55, 0x53, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x4e, 0x4f, 0x44, 0x45,
	0x10, 0x0e, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f,
	0x44, 0x45, 0x10, 0x0f, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x10, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x55, 0x4d, 0x42, 0x45,
	0x52, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x11, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x4f, 0x4f, 0x4c,
	0x45, 0x41, 0x4e, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x12, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54,
	0x52, 0x49, 0x4e, 0x47, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x13, 0x12, 0x0d, 0x0a, 0x09, 0x44,
	0x41, 0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x14, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x55,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x15, 0x12, 0x17, 0x0a,
	0x13, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x5f, 0x41, 0x52, 0x47, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x4e, 0x4f, 0x44, 0x45, 0x10, 0x16, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f,
	0x4e, 0x4f, 0x44, 0x45, 0x10, 0x17, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x52, 0x52, 0x41, 0x59, 0x5f,
	0x4e, 0x4f, 0x44, 0x45, 0x10, 0x18, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x4e,
	0x4f, 0x44, 0x45, 0x10, 0x19, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x48, 0x55, 0x4e, 0x4b, 0x5f, 0x4e,
	0x4f, 0x44, 0x45, 0x10, 0x1a, 0x12, 0x1d, 0x0a, 0x19, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x43,
	0x45, 0x4c, 0x4c, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x4f,
	0x44, 0x45, 0x10, 0x1b, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x52, 0x4f, 0x53, 0x53, 0x5f, 0x54, 0x41,
	0x42, 0x4c, 0x45, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e,
	0x43, 0x45, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x1c, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4c,
	0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x1d, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x46,
	0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x44,
	0x45, 0x10, 0x1e, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x46,
	0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x1f, 0x12, 0x1a,
	0x0a, 0x16, 0x41, 0x50, 0x50, 0x45, 0x4e, 0x44, 0x5f, 0x57, 0x48, 0x49, 0x54, 0x45, 0x53, 0x50,
	0x41, 0x43, 0x45, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x20, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x52,
	0x45, 0x50, 0x45, 0x4e, 0x44, 0x5f, 0x57, 0x48, 0x49, 0x54, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45,
	0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x21, 0x12, 0x1d, 0x0a, 0x19, 0x42, 0x45, 0x47, 0x49, 0x4e,
	0x5f, 0x45, 0x4d, 0x42, 0x45, 0x44, 0x44, 0x45, 0x44, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x41,
	0x52, 0x52, 0x41, 0x59, 0x10, 0x22, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x4e, 0x44, 0x5f, 0x54, 0x48,
	0x55, 0x4e, 0x4b, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x23, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x45,
	0x4c, 0x4c, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x4f, 0x44,
	0x45, 0x10, 0x24, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x4c, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x44,
	0x45, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x55, 0x49, 0x44, 0x53, 0x10, 0x2d, 0x12, 0x1d, 0x0a,
	0x19, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x55, 0x49, 0x44, 0x53, 0x10, 0x2e, 0x12, 0x16, 0x0a, 0x12,
	0x55, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x4f,
	0x44, 0x45, 0x10, 0x30, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x45, 0x54, 0x5f, 0x42, 0x49, 0x4e, 0x44,
	0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x34, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x45, 0x54, 0x5f, 0x56,
	0x41, 0x52, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x35, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x45, 0x54,
	0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10,
	0x36, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x49, 0x4e, 0x4b, 0x45, 0x44, 0x5f, 0x43, 0x45, 0x4c, 0x4c,
	0x5f, 0x52, 0x45, 0x46, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x3f, 0x12, 0x1a, 0x0a, 0x16, 0x4c,
	0x49, 0x4e, 0x4b, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x52, 0x45, 0x46,
	0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x40, 0x12, 0x17, 0x0a, 0x13, 0x4c, 0x49, 0x4e, 0x4b, 0x45,
	0x44, 0x5f, 0x52, 0x4f, 0x57, 0x5f, 0x52, 0x45, 0x46, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x41,
	0x12, 0x15, 0x0a, 0x11, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x46,
	0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x42, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x4c, 0x4f, 0x4e,
	0x5f, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x43, 0x12, 0x17, 0x0a,
	0x13, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x46, 0x5f,
	0x4e, 0x4f, 0x44, 0x45, 0x10, 0x44, 0x22, 0x99, 0x02, 0x0a, 0x12, 0x41, 0x53, 0x54, 0x55, 0x69,
	0x64, 0x54, 0x72, 0x61, 0x63, 0x74, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x11, 0x0a,
	0x0d, 0x55, 0x49, 0x44, 0x53, 0x5f, 0x49, 0x4e, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x11, 0x0a, 0x0d, 0x55, 0x49, 0x44, 0x53, 0x5f, 0x50, 0x52, 0x45, 0x4d, 0x45, 0x52, 0x47,
	0x45, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x49, 0x44, 0x53, 0x5f, 0x50, 0x52, 0x45, 0x4d,
	0x4f, 0x56, 0x45, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x55,
	0x49, 0x44, 0x53, 0x5f, 0x45, 0x58, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0f,
	0x0a, 0x0b, 0x55, 0x49, 0x44, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x04, 0x12,
	0x19, 0x0a, 0x15, 0x55, 0x49, 0x44, 0x53, 0x5f, 0x50, 0x52, 0x45, 0x4d, 0x45, 0x52, 0x47, 0x45,
	0x5f, 0x54, 0x4f, 0x50, 0x4c, 0x45, 0x46, 0x54, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x49,
	0x44, 0x53, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x5f, 0x4d, 0x4f,
	0x56, 0x45, 0x10, 0x06, 0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x55, 0x4c, 0x4c, 0x54, 0x55, 0x50, 0x4c,
	0x45, 0x5f, 0x52, 0x4f, 0x57, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x48, 0x45, 0x41,
	0x44, 0x45, 0x52, 0x10, 0x07, 0x12, 0x20, 0x0a, 0x1c, 0x46, 0x55, 0x4c, 0x4c, 0x54, 0x55, 0x50,
	0x4c, 0x45, 0x5f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x55, 0x4c,
	0x45, 0x5f, 0x55, 0x49, 0x44, 0x10, 0x08, 0x12, 0x29, 0x0a, 0x25, 0x46, 0x55, 0x4c, 0x4c, 0x54,
	0x55, 0x50, 0x4c, 0x45, 0x5f, 0x52, 0x4f, 0x57, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f,
	0x52, 0x55, 0x4c, 0x45, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x50, 0x41, 0x49, 0x52, 0x53,
	0x10, 0x09, 0x22, 0x95, 0x03, 0x0a, 0x1e, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x3f, 0x0a, 0x18, 0x65, 0x78, 0x63, 0x65, 0x6c, 0x5f, 0x69,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x16,
	0x65, 0x78, 0x63, 0x65, 0x6c, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x2b, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x65, 0x72, 0x63, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x26, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x6f, 0x44, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x65, 0x72, 0x63, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x1c, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x19, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x73, 0x55, 0x69, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x12, 0x43, 0x0a, 0x1a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x5f, 0x66,
	0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x18, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x19, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x52, 0x17, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x22, 0xe7, 0x03, 0x0a, 0x0e, 0x46,
	0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x3f, 0x0a,
	0x0e, 0x41, 0x53, 0x54, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x41, 0x53, 0x54,
	0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x0c, 0x41, 0x53, 0x54, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x1f,
	0x0a, 0x0b, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x68, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12,
	0x19, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x52, 0x6f, 0x77, 0x12, 0x3c, 0x0a, 0x17, 0x68, 0x6f,
	0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x14, 0x68, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x73,
	0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x36, 0x0a, 0x14, 0x68, 0x6f, 0x73, 0x74,
	0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x11, 0x68,
	0x6f, 0x73, 0x74, 0x52, 0x6f, 0x77, 0x49, 0x73, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x51, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x54, 0x53,
	0x43, 0x45, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x12, 0x2f, 0x0a, 0x0e, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0c, 0x68, 0x6f, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x55, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x0f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0d, 0x68, 0x6f, 0x73, 0x74, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x55, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x0c, 0x68, 0x6f, 0x73, 0x74, 0x5f,
	0x72, 0x6f, 0x77, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0a, 0x68, 0x6f, 0x73, 0x74, 0x52, 0x6f,
	0x77, 0x55, 0x69, 0x64, 0x22, 0x5b, 0x0a, 0x0e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x6f, 0x72, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c,
	0x61, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x46,
	0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x07, 0x66,
	0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x75, 0x6d, 0x5f, 0x61, 0x72,
	0x67, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x41, 0x72, 0x67,
	0x73, 0x22, 0xc5, 0x05, 0x0a, 0x13, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0a,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x38, 0x0a,
	0x18, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x74, 0x68, 0x6f, 0x75, 0x73, 0x61, 0x6e, 0x64, 0x73, 0x5f,
	0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x16, 0x73, 0x68, 0x6f, 0x77, 0x54, 0x68, 0x6f, 0x75, 0x73, 0x61, 0x6e, 0x64, 0x73, 0x53, 0x65,
	0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x75, 0x73, 0x65, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x75, 0x73, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x62, 0x61, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x73,
	0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x73, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x62, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x4d, 0x69, 0x6e, 0x75, 0x73,
	0x53, 0x69, 0x67, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63,
	0x79, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x12, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12,
	0x32, 0x0a, 0x15, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x74,
	0x5f, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x4c, 0x61, 0x72, 0x67,
	0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x65, 0x73, 0x74, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x14, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69,
	0x74, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x65, 0x73, 0x74, 0x22, 0xbc, 0x01, 0x0a, 0x16, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x65, 0x66, 0x74,
	0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0d, 0x74,
	0x6f, 0x70, 0x4c, 0x65, 0x66, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x20, 0x0a, 0x0c,
	0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x72, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x70, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x6f, 0x77, 0x12, 0x2e,
	0x0a, 0x13, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x11, 0x62, 0x6f, 0x74,
	0x74, 0x6f, 0x6d, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x28,
	0x0a, 0x10, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x72,
	0x6f, 0x77, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0e, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d,
	0x52, 0x69, 0x67, 0x68, 0x74, 0x52, 0x6f, 0x77, 0x22, 0xb2, 0x01, 0x0a, 0x19, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x6f, 0x66, 0x5f, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x12, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x46,
	0x6f, 0x6f, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x62, 0x0a, 0x1f, 0x62, 0x6f, 0x64,
	0x79, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x43,
	0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x1b, 0x62, 0x6f, 0x64, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x89, 0x01,
	0x0a, 0x17, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x4d, 0x6f, 0x76,
	0x65, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x72, 0x63,
	0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x73,
	0x72, 0x63, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x72, 0x63, 0x5f,
	0x72, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x72, 0x63, 0x52, 0x6f,
	0x77, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x12, 0x17, 0x0a, 0x07, 0x64, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x06, 0x64, 0x73, 0x74, 0x52, 0x6f, 0x77, 0x22, 0xc0, 0x0a, 0x0a, 0x15, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x55, 0x49, 0x44, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x12, 0x26, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49,
	0x44, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0c,
	0x6e, 0x65, 0x78, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x69, 0x64, 0x12, 0x4e, 0x0a, 0x1f,
	0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x6f, 0x72,
	0x5f, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44,
	0x52, 0x1a, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72,
	0x52, 0x6f, 0x77, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x57, 0x0a, 0x24,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x1e, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x69, 0x64, 0x64, 0x65,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x52, 0x6f, 0x77, 0x73, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x54, 0x0a, 0x22, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x73, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x1d, 0x68, 0x69,
	0x64, 0x64, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x5d, 0x0a, 0x27, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x5f, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x21, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x69, 0x64,
	0x64, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x48, 0x0a, 0x1b, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x18, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x55, 0x69, 0x64, 0x12, 0x51, 0x0a, 0x20, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x08, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x1c, 0x6e, 0x65, 0x78, 0x74, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x5a, 0x0a, 0x25, 0x73, 0x6f, 0x72, 0x74, 0x5f,
	0x72, 0x75, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49,
	0x44, 0x52, 0x20, 0x73, 0x6f, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x55, 0x69, 0x64, 0x12, 0x63, 0x0a, 0x2a, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x6f, 0x72, 0x74,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55,
	0x49, 0x44, 0x52, 0x24, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x0f, 0x6d, 0x65, 0x72, 0x67,
	0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0d, 0x6d, 0x65,
	0x72, 0x67, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x14, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f,
	0x75, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x55, 0x55, 0x49, 0x44, 0x52, 0x11, 0x6e, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x4c, 0x0a, 0x1d, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x1a, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x73, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x55, 0x0a, 0x22, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x73, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x10, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x1e, 0x6e, 0x65,
	0x78, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x0c,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x11, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0a, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x55, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x11, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x12,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52,
	0x0e, 0x6e, 0x65, 0x78, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x55, 0x69, 0x64, 0x12,
	0x48, 0x0a, 0x1b, 0x70, 0x65, 0x6e, 0x63, 0x69, 0x6c, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x13,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52,
	0x18, 0x70, 0x65, 0x6e, 0x63, 0x69, 0x6c, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x51, 0x0a, 0x20, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x70, 0x65, 0x6e, 0x63, 0x69, 0x6c, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x14, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x1c,
	0x6e, 0x65, 0x78, 0x74, 0x50, 0x65, 0x6e, 0x63, 0x69, 0x6c, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x69, 0x64, 0x22, 0xf5, 0x01, 0x0a,
	0x1a, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x49, 0x44,
	0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x5c, 0x0a, 0x0d, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x38, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x49, 0x44, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x49, 0x44, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0b, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x55, 0x69, 0x64, 0x4d, 0x61, 0x70, 0x1a, 0x79, 0x0a, 0x17, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x55, 0x49, 0x44, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x12, 0x2f, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x55, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x55, 0x69, 0x64, 0x22, 0x85, 0x06, 0x0a, 0x14, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x46, 0x0a,
	0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0e, 0x32, 0x25, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42,
	0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62,
	0x79, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x55,
	0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76,
	0x69, 0x6f, 0x75, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x4a,
	0x0a, 0x17, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x4d, 0x61, 0x70, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x14, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x54, 0x6f,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x70, 0x12, 0x4a, 0x0a, 0x17, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x4d, 0x61, 0x70, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x4d, 0x61, 0x70, 0x12, 0x37, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x75, 0x69, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x10, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x69, 0x64, 0x73, 0x12,
	0x6e, 0x0a, 0x17, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x15, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x1a,
	0x57, 0x0a, 0x1b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x6f, 0x6c, 0x64, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0d, 0x52, 0x08, 0x6f, 0x6c, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6e,
	0x65, 0x77, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x08,
	0x6e, 0x65, 0x77, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x91, 0x01, 0x0a, 0x0a, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45,
	0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x10, 0x03, 0x12, 0x13,
	0x0a, 0x0f, 0x41, 0x44, 0x44, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4c, 0x45, 0x56, 0x45,
	0x4c, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x4f, 0x4d, 0x4f, 0x54, 0x45, 0x10, 0x05,
	0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x10, 0x06, 0x22, 0x8f, 0x01, 0x0a,
	0x1e, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x64,
	0x65, 0x55, 0x49, 0x44, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12,
	0x2b, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44,
	0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x55, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x12,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x5f, 0x6d,
	0x61, 0x70, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55,
	0x55, 0x49, 0x44, 0x4d, 0x61, 0x70, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x55, 0x69, 0x64, 0x4d, 0x61, 0x70, 0x22, 0xae,
	0x01, 0x0a, 0x12, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x55, 0x69, 0x64, 0x73, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x75, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x65, 0x64, 0x55, 0x69, 0x64, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x65, 0x64, 0x55, 0x69, 0x64, 0x52, 0x04, 0x75, 0x69, 0x64, 0x73, 0x1a, 0x5f,
	0x0a, 0x0a, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x55, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x0d,
	0x75, 0x69, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0b,
	0x75, 0x69, 0x64, 0x46, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x22, 0x0a, 0x0d, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x0d, 0x52, 0x0b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x46, 0x6f, 0x72, 0x55, 0x69, 0x64, 0x22,
	0xa6, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x0d, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x0a, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x75, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x09, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x69, 0x64, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0d,
	0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0xe3, 0x03, 0x0a, 0x1b, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x4f, 0x72, 0x52, 0x6f, 0x77, 0x55, 0x75, 0x69, 0x64, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x72,
	0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x52, 0x6f, 0x77,
	0x73, 0x12, 0x26, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52,
	0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x14, 0x63, 0x6f, 0x6e,
	0x64, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55,
	0x49, 0x44, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x64, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62,
	0x79, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x55,
	0x69, 0x64, 0x12, 0x2c, 0x0a, 0x04, 0x75, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x55,
	0x69, 0x64, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x04, 0x75, 0x69, 0x64, 0x73,
	0x12, 0x43, 0x0a, 0x0d, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x52,
	0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0c, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x07, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x54, 0x53, 0x43,
	0x45, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x61,
	0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x41, 0x74,
	0x55, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x13, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x6f, 0x70,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x11, 0x69, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x4f, 0x70, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x55, 0x69, 0x64, 0x22, 0xab,
	0x01, 0x0a, 0x11, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x12, 0x26, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55,
	0x49, 0x44, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0b,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x75, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64,
	0x55, 0x69, 0x64, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x55, 0x69, 0x64, 0x73, 0x12, 0x33, 0x0a, 0x08, 0x72, 0x6f, 0x77, 0x5f, 0x75,
	0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x43, 0x45,
	0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x55, 0x69, 0x64, 0x73, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x07, 0x72, 0x6f, 0x77, 0x55, 0x69, 0x64, 0x73, 0x22, 0xcd, 0x02, 0x0a,
	0x16, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x76, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x73, 0x72, 0x63, 0x5f, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x54, 0x53,
	0x43, 0x45, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x09, 0x73, 0x72, 0x63, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12,
	0x36, 0x0a, 0x0a, 0x64, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x09, 0x64, 0x73,
	0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70, 0x61, 0x6e, 0x5f,
	0x72, 0x6f, 0x77, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x70, 0x61, 0x6e,
	0x52, 0x6f, 0x77, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x70, 0x61, 0x6e,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x47, 0x0a, 0x13, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x11, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x72, 0x63, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x12, 0x3a, 0x0a, 0x14, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x11, 0x66, 0x69, 0x6e, 0x61, 0x6c,
	0x44, 0x65, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x69, 0x64, 0x22, 0x54, 0x0a, 0x12,
	0x4d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x5f, 0x72,
	0x6f, 0x77, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x52,
	0x6f, 0x77, 0x22, 0x3d, 0x0a, 0x13, 0x48, 0x61, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x26, 0x0a, 0x09, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x69,
	0x64, 0x22, 0x61, 0x0a, 0x15, 0x43, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0a,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x72, 0x6f, 0x77, 0x22, 0x59, 0x0a, 0x1b, 0x43, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6f, 0x72,
	0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x43,
	0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x09, 0x63, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x22,
	0x81, 0x01, 0x0a, 0x20, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c,
	0x52, 0x65, 0x66, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x61, 0x69, 0x72, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x66,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x43, 0x65,
	0x6c, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x07, 0x63, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x66, 0x12, 0x26, 0x0a, 0x06, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x22, 0x7a, 0x0a, 0x1f, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x43,
	0x65, 0x6c, 0x6c, 0x52, 0x65, 0x66, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x57, 0x0a, 0x14, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x72,
	0x65, 0x66, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x45, 0x78, 0x70, 0x61,
	0x6e, 0x64, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x66, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x50, 0x61, 0x69, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x11, 0x63, 0x65,
	0x6c, 0x6c, 0x52, 0x65, 0x66, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x61, 0x69, 0x72, 0x22,
	0xb0, 0x01, 0x0a, 0x15, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x41, 0x74, 0x43, 0x6f, 0x6f,
	0x72, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x03,
	0x72, 0x6f, 0x77, 0x12, 0x2e, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x46, 0x6f, 0x72, 0x6d,
	0x75, 0x6c, 0x61, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x6d,
	0x75, 0x6c, 0x61, 0x12, 0x3d, 0x0a, 0x17, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x5f, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x15, 0x72, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x75,
	0x6c, 0x61, 0x22, 0xb1, 0x01, 0x0a, 0x1f, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x43, 0x6f,
	0x6f, 0x72, 0x64, 0x50, 0x61, 0x69, 0x72, 0x73, 0x42, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x26, 0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55,
	0x55, 0x49, 0x44, 0x52, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x47, 0x0a,
	0x11, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x5f, 0x61, 0x74, 0x5f, 0x63, 0x6f, 0x6f, 0x72,
	0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e,
	0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x41, 0x74, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0f, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x41, 0x74,
	0x43, 0x6f, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x6d, 0x0a, 0x16, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c,
	0x61, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x6e, 0x64, 0x6f, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x12, 0x53, 0x0a, 0x12, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x5f, 0x66, 0x6f, 0x72,
	0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x54,
	0x53, 0x43, 0x45, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x43, 0x6f, 0x6f, 0x72, 0x64,
	0x50, 0x61, 0x69, 0x72, 0x73, 0x42, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x10, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x46, 0x6f, 0x72,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0x8d, 0x01, 0x0a, 0x1c, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c,
	0x61, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x42, 0x0a, 0x15, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x13, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x22, 0x65, 0x0a, 0x17, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x12, 0x2b, 0x0a, 0x03, 0x61, 0x73, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x54, 0x53, 0x43, 0x45, 0x2e, 0x41, 0x53, 0x54, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x03, 0x61, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0d, 0x52, 0x09, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x49, 0x64, 0x22, 0x96, 0x01, 0x0a,
	0x1f, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x12, 0x2b, 0x0a, 0x03, 0x61, 0x73, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x54, 0x53, 0x43, 0x45, 0x2e, 0x41, 0x53, 0x54, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x03, 0x61, 0x73, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0d, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x5f,
	0x72, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x75,
	0x6c, 0x61, 0x52, 0x6f, 0x77, 0x22, 0xde, 0x02, 0x0a, 0x1c, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65,
	0x64, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x43, 0x46, 0x55, 0x55, 0x49,
	0x44, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x3f,
	0x0a, 0x11, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x10, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x5d, 0x0a, 0x1b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x65, 0x64, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x19, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x76,
	0x0a, 0x24, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x61,
	0x6e, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x54,
	0x53, 0x43, 0x45, 0x2e, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x65, 0x64, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x21, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x45, 0x78,
	0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xcb, 0x02, 0x0a, 0x13, 0x56, 0x69, 0x65, 0x77, 0x54,
	0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x66, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x26,
	0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x08, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x55, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x09, 0x75, 0x69, 0x64, 0x5f, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x54, 0x53, 0x43, 0x45,
	0x2e, 0x41, 0x53, 0x54, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x2e, 0x41, 0x53, 0x54, 0x55, 0x69, 0x64, 0x54, 0x72, 0x61, 0x63, 0x74,
	0x52, 0x08, 0x75, 0x69, 0x64, 0x54, 0x72, 0x61, 0x63, 0x74, 0x12, 0x4a, 0x0a, 0x0e, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x6f, 0x77, 0x46, 0x6c, 0x61, 0x67, 0x73,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x61, 0x67, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2c,
	0x0a, 0x12, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x11, 0x52, 0x10, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x26, 0x0a, 0x0f,
	0x72, 0x6f, 0x77, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0d, 0x72, 0x6f, 0x77, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x22, 0x99, 0x01, 0x0a, 0x17, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x43, 0x65, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x54, 0x53, 0x4b,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x33, 0x0a, 0x12, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x69, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x10,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x49, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x22, 0xc8, 0x01, 0x0a, 0x14, 0x44, 0x61, 0x74, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x33, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x54, 0x53, 0x4b, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x06, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x30, 0x0a, 0x12, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x69,
	0x73, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x10, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x49, 0x73, 0x49, 0x6d,
	0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12, 0x33, 0x0a, 0x12, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x5f, 0x69, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x10, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x49, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x22, 0xd2, 0x02, 0x0a, 0x16,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x65, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x33, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x54, 0x53, 0x4b, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x06, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x30, 0x0a, 0x12, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f,
	0x69, 0x73, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x10, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x49, 0x73, 0x49,
	0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12, 0x33, 0x0a, 0x12, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x5f, 0x69, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x10, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x49, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x6c, 0x6f, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x4c, 0x6f, 0x77, 0x12, 0x21, 0x0a,
	0x0c, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x69, 0x67, 0x68,
	0x22, 0xaa, 0x02, 0x0a, 0x16, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x65, 0x6c, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x33, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x54, 0x53, 0x4b, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x06,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x30, 0x0a, 0x12, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x5f, 0x69, 0x73, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x10, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x49, 0x73,
	0x49, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12, 0x33, 0x0a, 0x12, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x5f, 0x69, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x10, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x49, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12, 0x20, 0x0a,
	0x08, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x07, 0x69, 0x73, 0x52, 0x65, 0x67, 0x65, 0x78, 0x12,
	0x3c, 0x0a, 0x17, 0x69, 0x73, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x14, 0x69, 0x73, 0x43, 0x61, 0x73, 0x65, 0x53,
	0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x67, 0x65, 0x78, 0x22, 0xb4, 0x01,
	0x0a, 0x15, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x65, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e,
	0x66, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x22, 0x81, 0x04, 0x0a, 0x10, 0x43, 0x65, 0x6c, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x63, 0x65, 0x6c,
	0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0e, 0x32, 0x24, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x63, 0x65, 0x6c, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x0d, 0x62, 0x6f, 0x6f, 0x6c, 0x65,
	0x61, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x43, 0x65, 0x6c,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0c, 0x62,
	0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x09, 0x64, 0x61, 0x74,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x54,
	0x53, 0x43, 0x45, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x65, 0x6c, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x54, 0x53, 0x43, 0x45, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x65, 0x6c, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0b, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x54, 0x53, 0x43, 0x45, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x65, 0x6c, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x60, 0x0a, 0x0d, 0x43, 0x65, 0x6c, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x49, 0x4c, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x4f, 0x4f, 0x4c, 0x45, 0x41, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x41, 0x54, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x52, 0x49, 0x4e,
	0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x05, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x2f, 0x6b, 0x70,
	0x62,
}

var (
	file_TSCEArchives_proto_rawDescOnce sync.Once
	file_TSCEArchives_proto_rawDescData = file_TSCEArchives_proto_rawDesc
)

func file_TSCEArchives_proto_rawDescGZIP() []byte {
	file_TSCEArchives_proto_rawDescOnce.Do(func() {
		file_TSCEArchives_proto_rawDescData = protoimpl.X.CompressGZIP(file_TSCEArchives_proto_rawDescData)
	})
	return file_TSCEArchives_proto_rawDescData
}

var file_TSCEArchives_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_TSCEArchives_proto_msgTypes = make([]protoimpl.MessageInfo, 143)
var file_TSCEArchives_proto_goTypes = []interface{}{
	(ReferenceArchive_ReferenceType)(0),                                                // 0: TSCE.ReferenceArchive.ReferenceType
	(SpanningDependenciesArchive_RangeContext)(0),                                      // 1: TSCE.SpanningDependenciesArchive.RangeContext
	(SpanningDependenciesExpandedArchive_RangeContext)(0),                              // 2: TSCE.SpanningDependenciesExpandedArchive.RangeContext
	(CellErrorsArchive_ErrorFlavor)(0),                                                 // 3: TSCE.CellErrorsArchive.ErrorFlavor
	(CalculationEngineArchive_ExcelImportDateMode)(0),                                  // 4: TSCE.CalculationEngineArchive.ExcelImportDateMode
	(ASTNodeArrayArchive_ASTNodeType)(0),                                               // 5: TSCE.ASTNodeArrayArchive.ASTNodeType
	(ASTNodeArrayArchive_ASTUidTractPurpose)(0),                                        // 6: TSCE.ASTNodeArrayArchive.ASTUidTractPurpose
	(GroupByChangeArchive_ChangeType)(0),                                               // 7: TSCE.GroupByChangeArchive.ChangeType
	(CellValueArchive_CellValueType)(0),                                                // 8: TSCE.CellValueArchive.CellValueType
	(*CellReferenceArchive)(nil),                                                       // 9: TSCE.CellReferenceArchive
	(*InternalCellReferenceArchive)(nil),                                               // 10: TSCE.InternalCellReferenceArchive
	(*RelativeCellRefArchive)(nil),                                                     // 11: TSCE.RelativeCellRefArchive
	(*RangeReferenceArchive)(nil),                                                      // 12: TSCE.RangeReferenceArchive
	(*InternalRangeReferenceArchive)(nil),                                              // 13: TSCE.InternalRangeReferenceArchive
	(*IndexSetArchive)(nil),                                                            // 14: TSCE.IndexSetArchive
	(*CellCoordSetArchive)(nil),                                                        // 15: TSCE.CellCoordSetArchive
	(*InternalCellRefSetArchive)(nil),                                                  // 16: TSCE.InternalCellRefSetArchive
	(*ColumnRowSize)(nil),                                                              // 17: TSCE.ColumnRowSize
	(*CellRectArchive)(nil),                                                            // 18: TSCE.CellRectArchive
	(*CellRefSetArchive)(nil),                                                          // 19: TSCE.CellRefSetArchive
	(*UidCoordSetArchive)(nil),                                                         // 20: TSCE.UidCoordSetArchive
	(*UidCellRefSetArchive)(nil),                                                       // 21: TSCE.UidCellRefSetArchive
	(*ReferencesToDirtyArchive)(nil),                                                   // 22: TSCE.ReferencesToDirtyArchive
	(*CoordMapperArchive)(nil),                                                         // 23: TSCE.CoordMapperArchive
	(*ReferenceArchive)(nil),                                                           // 24: TSCE.ReferenceArchive
	(*EdgeArchive)(nil),                                                                // 25: TSCE.EdgeArchive
	(*EdgesArchive)(nil),                                                               // 26: TSCE.EdgesArchive
	(*ExpandedEdgesArchive)(nil),                                                       // 27: TSCE.ExpandedEdgesArchive
	(*CellRecordArchive)(nil),                                                          // 28: TSCE.CellRecordArchive
	(*CellDependenciesArchive)(nil),                                                    // 29: TSCE.CellDependenciesArchive
	(*CellRecordExpandedArchive)(nil),                                                  // 30: TSCE.CellRecordExpandedArchive
	(*CellDependenciesExpandedArchive)(nil),                                            // 31: TSCE.CellDependenciesExpandedArchive
	(*CellRecordTileArchive)(nil),                                                      // 32: TSCE.CellRecordTileArchive
	(*CellDependenciesTiledArchive)(nil),                                               // 33: TSCE.CellDependenciesTiledArchive
	(*VolatileDependenciesArchive)(nil),                                                // 34: TSCE.VolatileDependenciesArchive
	(*VolatileDependenciesExpandedArchive)(nil),                                        // 35: TSCE.VolatileDependenciesExpandedArchive
	(*RTreeInternalNodeContentsArchive)(nil),                                           // 36: TSCE.RTreeInternalNodeContentsArchive
	(*RTreeLeafNodeContentsArchive)(nil),                                               // 37: TSCE.RTreeLeafNodeContentsArchive
	(*RTreeNodeArchive)(nil),                                                           // 38: TSCE.RTreeNodeArchive
	(*RTreeArchive)(nil),                                                               // 39: TSCE.RTreeArchive
	(*RangeBackDependencyArchive)(nil),                                                 // 40: TSCE.RangeBackDependencyArchive
	(*RangeDependenciesArchive)(nil),                                                   // 41: TSCE.RangeDependenciesArchive
	(*RangePrecedentsTileArchive)(nil),                                                 // 42: TSCE.RangePrecedentsTileArchive
	(*RangeDependenciesTiledArchive)(nil),                                              // 43: TSCE.RangeDependenciesTiledArchive
	(*SpanningDependenciesArchive)(nil),                                                // 44: TSCE.SpanningDependenciesArchive
	(*SpanningDependenciesExpandedArchive)(nil),                                        // 45: TSCE.SpanningDependenciesExpandedArchive
	(*WholeOwnerDependenciesArchive)(nil),                                              // 46: TSCE.WholeOwnerDependenciesArchive
	(*WholeOwnerDependenciesExpandedArchive)(nil),                                      // 47: TSCE.WholeOwnerDependenciesExpandedArchive
	(*CellErrorsArchive)(nil),                                                          // 48: TSCE.CellErrorsArchive
	(*UuidReferencesArchive)(nil),                                                      // 49: TSCE.UuidReferencesArchive
	(*FormulaOwnerDependenciesArchive)(nil),                                            // 50: TSCE.FormulaOwnerDependenciesArchive
	(*FormulaOwnerInfoArchive)(nil),                                                    // 51: TSCE.FormulaOwnerInfoArchive
	(*SubFormulaOwnerIDArchive)(nil),                                                   // 52: TSCE.SubFormulaOwnerIDArchive
	(*OwnerIDMapArchive)(nil),                                                          // 53: TSCE.OwnerIDMapArchive
	(*UidLookupListArchive)(nil),                                                       // 54: TSCE.UidLookupListArchive
	(*DependencyTrackerArchive)(nil),                                                   // 55: TSCE.DependencyTrackerArchive
	(*RemoteDataSpecifierArchive)(nil),                                                 // 56: TSCE.RemoteDataSpecifierArchive
	(*RemoteDataValueMapArchive)(nil),                                                  // 57: TSCE.RemoteDataValueMapArchive
	(*StockArchive)(nil),                                                               // 58: TSCE.StockArchive
	(*RemoteDataStoreArchive)(nil),                                                     // 59: TSCE.RemoteDataStoreArchive
	(*NameTrackedReferencePair)(nil),                                                   // 60: TSCE.NameTrackedReferencePair
	(*NamesByTrackedReferenceArchive)(nil),                                             // 61: TSCE.NamesByTrackedReferenceArchive
	(*NamedReferenceManagerArchive)(nil),                                               // 62: TSCE.NamedReferenceManagerArchive
	(*UuidSetStoreArchive)(nil),                                                        // 63: TSCE.UuidSetStoreArchive
	(*UuidReferenceMapArchive)(nil),                                                    // 64: TSCE.UuidReferenceMapArchive
	(*GroupByNodeMapArchive)(nil),                                                      // 65: TSCE.GroupByNodeMapArchive
	(*CalculationEngineArchive)(nil),                                                   // 66: TSCE.CalculationEngineArchive
	(*PreserveColumnRowFlagsArchive)(nil),                                              // 67: TSCE.PreserveColumnRowFlagsArchive
	(*CategoryReferenceArchive)(nil),                                                   // 68: TSCE.CategoryReferenceArchive
	(*ASTNodeArrayArchive)(nil),                                                        // 69: TSCE.ASTNodeArrayArchive
	(*FormulaTranslationFlagsArchive)(nil),                                             // 70: TSCE.FormulaTranslationFlagsArchive
	(*FormulaArchive)(nil),                                                             // 71: TSCE.FormulaArchive
	(*FunctorArchive)(nil),                                                             // 72: TSCE.FunctorArchive
	(*FormatStructArchive)(nil),                                                        // 73: TSCE.FormatStructArchive
	(*RangeCoordinateArchive)(nil),                                                     // 74: TSCE.RangeCoordinateArchive
	(*TableTransposeInfoArchive)(nil),                                                  // 75: TSCE.TableTransposeInfoArchive
	(*MergeOriginMovedArchive)(nil),                                                    // 76: TSCE.MergeOriginMovedArchive
	(*OwnerUIDMapperArchive)(nil),                                                      // 77: TSCE.OwnerUIDMapperArchive
	(*RewriteTableUIDInfoArchive)(nil),                                                 // 78: TSCE.RewriteTableUIDInfoArchive
	(*GroupByChangeArchive)(nil),                                                       // 79: TSCE.GroupByChangeArchive
	(*RewriteGroupNodeUIDInfoArchive)(nil),                                             // 80: TSCE.RewriteGroupNodeUIDInfoArchive
	(*IndexedUidsArchive)(nil),                                                         // 81: TSCE.IndexedUidsArchive
	(*RewriteRangeEntryArchive)(nil),                                                   // 82: TSCE.RewriteRangeEntryArchive
	(*ColumnOrRowUuidsInfoArchive)(nil),                                                // 83: TSCE.ColumnOrRowUuidsInfoArchive
	(*RegionInfoArchive)(nil),                                                          // 84: TSCE.RegionInfoArchive
	(*RegionMovedInfoArchive)(nil),                                                     // 85: TSCE.RegionMovedInfoArchive
	(*MergeSourceArchive)(nil),                                                         // 86: TSCE.MergeSourceArchive
	(*HauntedOwnerArchive)(nil),                                                        // 87: TSCE.HauntedOwnerArchive
	(*CellCoordinateArchive)(nil),                                                      // 88: TSCE.CellCoordinateArchive
	(*CellCoordinateVectorArchive)(nil),                                                // 89: TSCE.CellCoordinateVectorArchive
	(*ExpandedCellRefObjectPairArchive)(nil),                                           // 90: TSCE.ExpandedCellRefObjectPairArchive
	(*ExpandedCellRefObjectMapArchive)(nil),                                            // 91: TSCE.ExpandedCellRefObjectMapArchive
	(*FormulaAtCoordArchive)(nil),                                                      // 92: TSCE.FormulaAtCoordArchive
	(*FormulaCoordPairsByOwnerArchive)(nil),                                            // 93: TSCE.FormulaCoordPairsByOwnerArchive
	(*FormulasForUndoArchive)(nil),                                                     // 94: TSCE.FormulasForUndoArchive
	(*FormulaRewriteCommandArchive)(nil),                                               // 95: TSCE.FormulaRewriteCommandArchive
	(*TrackedReferenceArchive)(nil),                                                    // 96: TSCE.TrackedReferenceArchive
	(*ExpandedTrackedReferenceArchive)(nil),                                            // 97: TSCE.ExpandedTrackedReferenceArchive
	(*TrackedReferenceStoreArchive)(nil),                                               // 98: TSCE.TrackedReferenceStoreArchive
	(*ViewTractRefArchive)(nil),                                                        // 99: TSCE.ViewTractRefArchive
	(*BooleanCellValueArchive)(nil),                                                    // 100: TSCE.BooleanCellValueArchive
	(*DateCellValueArchive)(nil),                                                       // 101: TSCE.DateCellValueArchive
	(*NumberCellValueArchive)(nil),                                                     // 102: TSCE.NumberCellValueArchive
	(*StringCellValueArchive)(nil),                                                     // 103: TSCE.StringCellValueArchive
	(*ErrorCellValueArchive)(nil),                                                      // 104: TSCE.ErrorCellValueArchive
	(*CellValueArchive)(nil),                                                           // 105: TSCE.CellValueArchive
	(*IndexSetArchive_IndexSetEntry)(nil),                                              // 106: TSCE.IndexSetArchive.IndexSetEntry
	(*CellCoordSetArchive_ColumnEntry)(nil),                                            // 107: TSCE.CellCoordSetArchive.ColumnEntry
	(*InternalCellRefSetArchive_OwnerEntry)(nil),                                       // 108: TSCE.InternalCellRefSetArchive.OwnerEntry
	(*CellRefSetArchive_OwnerEntry)(nil),                                               // 109: TSCE.CellRefSetArchive.OwnerEntry
	(*UidCoordSetArchive_ColumnEntry)(nil),                                             // 110: TSCE.UidCoordSetArchive.ColumnEntry
	(*UidCellRefSetArchive_OwnerEntry)(nil),                                            // 111: TSCE.UidCellRefSetArchive.OwnerEntry
	(*CoordMapperArchive_BaseToViewEntry)(nil),                                         // 112: TSCE.CoordMapperArchive.BaseToViewEntry
	(*CoordMapperArchive_SummaryToViewEntry)(nil),                                      // 113: TSCE.CoordMapperArchive.SummaryToViewEntry
	(*RangePrecedentsTileArchive_FromToRangeArchive)(nil),                              // 114: TSCE.RangePrecedentsTileArchive.FromToRangeArchive
	(*SpanningDependenciesArchive_ReferringColumnToLocalCells)(nil),                    // 115: TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells
	(*SpanningDependenciesArchive_ReferringColumnToRemoteCells)(nil),                   // 116: TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells
	(*SpanningDependenciesExpandedArchive_ExtentRange)(nil),                            // 117: TSCE.SpanningDependenciesExpandedArchive.ExtentRange
	(*SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext)(nil),        // 118: TSCE.SpanningDependenciesExpandedArchive.ExtentRangeWithTableWithContext
	(*SpanningDependenciesExpandedArchive_CellCoordRefersToExtents)(nil),               // 119: TSCE.SpanningDependenciesExpandedArchive.CellCoordRefersToExtents
	(*CellErrorsArchive_ErrorForCell)(nil),                                             // 120: TSCE.CellErrorsArchive.ErrorForCell
	(*UuidReferencesArchive_TableRef)(nil),                                             // 121: TSCE.UuidReferencesArchive.TableRef
	(*UuidReferencesArchive_UuidRef)(nil),                                              // 122: TSCE.UuidReferencesArchive.UuidRef
	(*UuidReferencesArchive_TableWithUuidRef)(nil),                                     // 123: TSCE.UuidReferencesArchive.TableWithUuidRef
	(*OwnerIDMapArchive_OwnerIDMapArchiveEntry)(nil),                                   // 124: TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry
	(*RemoteDataValueMapArchive_RemoteDataMapEntry)(nil),                               // 125: TSCE.RemoteDataValueMapArchive.RemoteDataMapEntry
	(*StockArchive_AttributeEntry)(nil),                                                // 126: TSCE.StockArchive.AttributeEntry
	(*UuidSetStoreArchive_UuidSet)(nil),                                                // 127: TSCE.UuidSetStoreArchive.UuidSet
	(*UuidReferenceMapArchive_CellRefsForUuid)(nil),                                    // 128: TSCE.UuidReferenceMapArchive.CellRefsForUuid
	(*GroupByNodeMapArchive_CellRefsForGroupNode)(nil),                                 // 129: TSCE.GroupByNodeMapArchive.CellRefsForGroupNode
	(*GroupByNodeMapArchive_GroupNodesForGroupBy)(nil),                                 // 130: TSCE.GroupByNodeMapArchive.GroupNodesForGroupBy
	(*CategoryReferenceArchive_CatRefUidList)(nil),                                     // 131: TSCE.CategoryReferenceArchive.CatRefUidList
	(*ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive)(nil),                       // 132: TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive
	(*ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive)(nil),                  // 133: TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive
	(*ASTNodeArrayArchive_ASTColumnCoordinateArchive)(nil),                             // 134: TSCE.ASTNodeArrayArchive.ASTColumnCoordinateArchive
	(*ASTNodeArrayArchive_ASTRowCoordinateArchive)(nil),                                // 135: TSCE.ASTNodeArrayArchive.ASTRowCoordinateArchive
	(*ASTNodeArrayArchive_ASTUidList)(nil),                                             // 136: TSCE.ASTNodeArrayArchive.ASTUidList
	(*ASTNodeArrayArchive_ASTUidTract)(nil),                                            // 137: TSCE.ASTNodeArrayArchive.ASTUidTract
	(*ASTNodeArrayArchive_ASTStickyBits)(nil),                                          // 138: TSCE.ASTNodeArrayArchive.ASTStickyBits
	(*ASTNodeArrayArchive_ASTUidTractList)(nil),                                        // 139: TSCE.ASTNodeArrayArchive.ASTUidTractList
	(*ASTNodeArrayArchive_ASTUidCoordinateArchive)(nil),                                // 140: TSCE.ASTNodeArrayArchive.ASTUidCoordinateArchive
	(*ASTNodeArrayArchive_ASTCategoryLevels)(nil),                                      // 141: TSCE.ASTNodeArrayArchive.ASTCategoryLevels
	(*ASTNodeArrayArchive_ASTCategoryReferenceArchive)(nil),                            // 142: TSCE.ASTNodeArrayArchive.ASTCategoryReferenceArchive
	(*ASTNodeArrayArchive_ASTColonTractArchive)(nil),                                   // 143: TSCE.ASTNodeArrayArchive.ASTColonTractArchive
	(*ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive)(nil),                 // 144: TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive
	(*ASTNodeArrayArchive_ASTLetNodeWhitespace)(nil),                                   // 145: TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace
	(*ASTNodeArrayArchive_ASTNodeArchive)(nil),                                         // 146: TSCE.ASTNodeArrayArchive.ASTNodeArchive
	(*ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive)(nil), // 147: TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractRelativeRangeArchive
	(*ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive)(nil), // 148: TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractAbsoluteRangeArchive
	(*RewriteTableUIDInfoArchive_TableUIDMapEntryArchive)(nil),                         // 149: TSCE.RewriteTableUIDInfoArchive.TableUIDMapEntryArchive
	(*GroupByChangeArchive_GroupingColumnChangeArchive)(nil),                           // 150: TSCE.GroupByChangeArchive.GroupingColumnChangeArchive
	(*IndexedUidsArchive_IndexedUid)(nil),                                              // 151: TSCE.IndexedUidsArchive.IndexedUid
	(*CFUUIDArchive)(nil),                                                              // 152: TSP.CFUUIDArchive
	(*UUID)(nil),                                                                       // 153: TSP.UUID
	(*Reference)(nil),                                                                  // 154: TSP.Reference
	(*UUIDMapArchive)(nil),                                                             // 155: TSP.UUIDMapArchive
	(*CommandArchive)(nil),                                                             // 156: TSK.CommandArchive
	(*TSKFormatStructArchive)(nil),                                                     // 157: TSK.TSKFormatStructArchive
}
var file_TSCEArchives_proto_depIdxs = []int32{
	152, // 0: TSCE.CellReferenceArchive.table_id:type_name -> TSP.CFUUIDArchive
	88,  // 1: TSCE.InternalCellReferenceArchive.coordinate:type_name -> TSCE.CellCoordinateArchive
	153, // 2: TSCE.RelativeCellRefArchive.table_uid:type_name -> TSP.UUID
	152, // 3: TSCE.RangeReferenceArchive.table_id:type_name -> TSP.CFUUIDArchive
	74,  // 4: TSCE.InternalRangeReferenceArchive.range:type_name -> TSCE.RangeCoordinateArchive
	106, // 5: TSCE.IndexSetArchive.entries:type_name -> TSCE.IndexSetArchive.IndexSetEntry
	107, // 6: TSCE.CellCoordSetArchive.column_entries:type_name -> TSCE.CellCoordSetArchive.ColumnEntry
	108, // 7: TSCE.InternalCellRefSetArchive.owner_entries:type_name -> TSCE.InternalCellRefSetArchive.OwnerEntry
	88,  // 8: TSCE.CellRectArchive.origin:type_name -> TSCE.CellCoordinateArchive
	17,  // 9: TSCE.CellRectArchive.size:type_name -> TSCE.ColumnRowSize
	109, // 10: TSCE.CellRefSetArchive.owner_entries:type_name -> TSCE.CellRefSetArchive.OwnerEntry
	110, // 11: TSCE.UidCoordSetArchive.column_entries:type_name -> TSCE.UidCoordSetArchive.ColumnEntry
	111, // 12: TSCE.UidCellRefSetArchive.owner_entries:type_name -> TSCE.UidCellRefSetArchive.OwnerEntry
	14,  // 13: TSCE.ReferencesToDirtyArchive.to_dirty_owner_ids:type_name -> TSCE.IndexSetArchive
	16,  // 14: TSCE.ReferencesToDirtyArchive.to_dirty_cells:type_name -> TSCE.InternalCellRefSetArchive
	16,  // 15: TSCE.ReferencesToDirtyArchive.to_dirty_cells_additional:type_name -> TSCE.InternalCellRefSetArchive
	13,  // 16: TSCE.ReferencesToDirtyArchive.to_dirty_range_refs:type_name -> TSCE.InternalRangeReferenceArchive
	16,  // 17: TSCE.ReferencesToDirtyArchive.calc_in_progress_cells:type_name -> TSCE.InternalCellRefSetArchive
	153, // 18: TSCE.CoordMapperArchive.table_uid:type_name -> TSP.UUID
	14,  // 19: TSCE.CoordMapperArchive.summary_rows_set:type_name -> TSCE.IndexSetArchive
	14,  // 20: TSCE.CoordMapperArchive.summary_columns_set:type_name -> TSCE.IndexSetArchive
	14,  // 21: TSCE.CoordMapperArchive.label_rows_set:type_name -> TSCE.IndexSetArchive
	112, // 22: TSCE.CoordMapperArchive.base_to_view_row_map:type_name -> TSCE.CoordMapperArchive.BaseToViewEntry
	112, // 23: TSCE.CoordMapperArchive.base_to_view_column_map:type_name -> TSCE.CoordMapperArchive.BaseToViewEntry
	113, // 24: TSCE.CoordMapperArchive.summary_to_view_row_map:type_name -> TSCE.CoordMapperArchive.SummaryToViewEntry
	113, // 25: TSCE.CoordMapperArchive.summary_to_view_column_map:type_name -> TSCE.CoordMapperArchive.SummaryToViewEntry
	0,   // 26: TSCE.ReferenceArchive.reference_type:type_name -> TSCE.ReferenceArchive.ReferenceType
	9,   // 27: TSCE.ReferenceArchive.cell_reference:type_name -> TSCE.CellReferenceArchive
	12,  // 28: TSCE.ReferenceArchive.range_reference:type_name -> TSCE.RangeReferenceArchive
	152, // 29: TSCE.EdgeArchive.owner_id:type_name -> TSP.CFUUIDArchive
	152, // 30: TSCE.EdgesArchive.owner_id_for_edge:type_name -> TSP.CFUUIDArchive
	25,  // 31: TSCE.CellRecordArchive.edge:type_name -> TSCE.EdgeArchive
	26,  // 32: TSCE.CellRecordArchive.edges:type_name -> TSCE.EdgesArchive
	28,  // 33: TSCE.CellDependenciesArchive.cell_record:type_name -> TSCE.CellRecordArchive
	27,  // 34: TSCE.CellRecordExpandedArchive.expanded_edges:type_name -> TSCE.ExpandedEdgesArchive
	30,  // 35: TSCE.CellDependenciesExpandedArchive.cell_record:type_name -> TSCE.CellRecordExpandedArchive
	30,  // 36: TSCE.CellRecordTileArchive.cell_records:type_name -> TSCE.CellRecordExpandedArchive
	154, // 37: TSCE.CellDependenciesTiledArchive.cell_record_tiles:type_name -> TSP.Reference
	9,   // 38: TSCE.VolatileDependenciesArchive.volatile_geometry_cell_reference:type_name -> TSCE.CellReferenceArchive
	88,  // 39: TSCE.VolatileDependenciesArchive.volatile_geometry_cell:type_name -> TSCE.CellCoordinateArchive
	15,  // 40: TSCE.VolatileDependenciesExpandedArchive.volatile_time_cells:type_name -> TSCE.CellCoordSetArchive
	15,  // 41: TSCE.VolatileDependenciesExpandedArchive.volatile_random_cells:type_name -> TSCE.CellCoordSetArchive
	15,  // 42: TSCE.VolatileDependenciesExpandedArchive.volatile_locale_cells:type_name -> TSCE.CellCoordSetArchive
	15,  // 43: TSCE.VolatileDependenciesExpandedArchive.volatile_sheet_table_name_cells:type_name -> TSCE.CellCoordSetArchive
	15,  // 44: TSCE.VolatileDependenciesExpandedArchive.volatile_remote_data_cells:type_name -> TSCE.CellCoordSetArchive
	16,  // 45: TSCE.VolatileDependenciesExpandedArchive.volatile_geometry_cell_refs:type_name -> TSCE.InternalCellRefSetArchive
	38,  // 46: TSCE.RTreeInternalNodeContentsArchive.child:type_name -> TSCE.RTreeNodeArchive
	9,   // 47: TSCE.RTreeLeafNodeContentsArchive.cell_reference:type_name -> TSCE.CellReferenceArchive
	36,  // 48: TSCE.RTreeNodeArchive.internal_node_contents:type_name -> TSCE.RTreeInternalNodeContentsArchive
	37,  // 49: TSCE.RTreeNodeArchive.leaf_node_contents:type_name -> TSCE.RTreeLeafNodeContentsArchive
	38,  // 50: TSCE.RTreeArchive.root:type_name -> TSCE.RTreeNodeArchive
	12,  // 51: TSCE.RangeBackDependencyArchive.range_reference:type_name -> TSCE.RangeReferenceArchive
	13,  // 52: TSCE.RangeBackDependencyArchive.internal_range_reference:type_name -> TSCE.InternalRangeReferenceArchive
	40,  // 53: TSCE.RangeDependenciesArchive.back_dependency:type_name -> TSCE.RangeBackDependencyArchive
	114, // 54: TSCE.RangePrecedentsTileArchive.from_to_range:type_name -> TSCE.RangePrecedentsTileArchive.FromToRangeArchive
	154, // 55: TSCE.RangeDependenciesTiledArchive.range_precedents_tile:type_name -> TSP.Reference
	1,   // 56: TSCE.SpanningDependenciesArchive.range_context:type_name -> TSCE.SpanningDependenciesArchive.RangeContext
	9,   // 57: TSCE.SpanningDependenciesArchive.cell:type_name -> TSCE.CellReferenceArchive
	74,  // 58: TSCE.SpanningDependenciesArchive.total_range_for_deleted_table:type_name -> TSCE.RangeCoordinateArchive
	74,  // 59: TSCE.SpanningDependenciesArchive.body_range_for_deleted_table:type_name -> TSCE.RangeCoordinateArchive
	115, // 60: TSCE.SpanningDependenciesArchive.referring_column_to_local_cells:type_name -> TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells
	116, // 61: TSCE.SpanningDependenciesArchive.referring_column_to_remote_cells:type_name -> TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells
	119, // 62: TSCE.SpanningDependenciesExpandedArchive.coord_refers_to_spans:type_name -> TSCE.SpanningDependenciesExpandedArchive.CellCoordRefersToExtents
	74,  // 63: TSCE.SpanningDependenciesExpandedArchive.total_range_for_table:type_name -> TSCE.RangeCoordinateArchive
	74,  // 64: TSCE.SpanningDependenciesExpandedArchive.body_range_for_table:type_name -> TSCE.RangeCoordinateArchive
	10,  // 65: TSCE.WholeOwnerDependenciesArchive.dependent_cell:type_name -> TSCE.InternalCellReferenceArchive
	16,  // 66: TSCE.WholeOwnerDependenciesExpandedArchive.dependent_cells:type_name -> TSCE.InternalCellRefSetArchive
	120, // 67: TSCE.CellErrorsArchive.errors:type_name -> TSCE.CellErrorsArchive.ErrorForCell
	121, // 68: TSCE.UuidReferencesArchive.table_refs:type_name -> TSCE.UuidReferencesArchive.TableRef
	123, // 69: TSCE.UuidReferencesArchive.table_uuid_refs:type_name -> TSCE.UuidReferencesArchive.TableWithUuidRef
	153, // 70: TSCE.FormulaOwnerDependenciesArchive.formula_owner_uid:type_name -> TSP.UUID
	31,  // 71: TSCE.FormulaOwnerDependenciesArchive.cell_dependencies:type_name -> TSCE.CellDependenciesExpandedArchive
	41,  // 72: TSCE.FormulaOwnerDependenciesArchive.range_dependencies:type_name -> TSCE.RangeDependenciesArchive
	35,  // 73: TSCE.FormulaOwnerDependenciesArchive.volatile_dependencies:type_name -> TSCE.VolatileDependenciesExpandedArchive
	45,  // 74: TSCE.FormulaOwnerDependenciesArchive.spanning_column_dependencies:type_name -> TSCE.SpanningDependenciesExpandedArchive
	45,  // 75: TSCE.FormulaOwnerDependenciesArchive.spanning_row_dependencies:type_name -> TSCE.SpanningDependenciesExpandedArchive
	47,  // 76: TSCE.FormulaOwnerDependenciesArchive.whole_owner_dependencies:type_name -> TSCE.WholeOwnerDependenciesExpandedArchive
	48,  // 77: TSCE.FormulaOwnerDependenciesArchive.cell_errors:type_name -> TSCE.CellErrorsArchive
	154, // 78: TSCE.FormulaOwnerDependenciesArchive.formula_owner:type_name -> TSP.Reference
	153, // 79: TSCE.FormulaOwnerDependenciesArchive.base_owner_uid:type_name -> TSP.UUID
	33,  // 80: TSCE.FormulaOwnerDependenciesArchive.tiled_cell_dependencies:type_name -> TSCE.CellDependenciesTiledArchive
	49,  // 81: TSCE.FormulaOwnerDependenciesArchive.uuid_references:type_name -> TSCE.UuidReferencesArchive
	43,  // 82: TSCE.FormulaOwnerDependenciesArchive.tiled_range_dependencies:type_name -> TSCE.RangeDependenciesTiledArchive
	152, // 83: TSCE.FormulaOwnerInfoArchive.formula_owner_id:type_name -> TSP.CFUUIDArchive
	29,  // 84: TSCE.FormulaOwnerInfoArchive.cell_dependencies:type_name -> TSCE.CellDependenciesArchive
	41,  // 85: TSCE.FormulaOwnerInfoArchive.range_dependencies:type_name -> TSCE.RangeDependenciesArchive
	34,  // 86: TSCE.FormulaOwnerInfoArchive.volatile_dependencies:type_name -> TSCE.VolatileDependenciesArchive
	44,  // 87: TSCE.FormulaOwnerInfoArchive.spanning_column_dependencies:type_name -> TSCE.SpanningDependenciesArchive
	44,  // 88: TSCE.FormulaOwnerInfoArchive.spanning_row_dependencies:type_name -> TSCE.SpanningDependenciesArchive
	46,  // 89: TSCE.FormulaOwnerInfoArchive.whole_owner_dependencies:type_name -> TSCE.WholeOwnerDependenciesArchive
	48,  // 90: TSCE.FormulaOwnerInfoArchive.cell_errors:type_name -> TSCE.CellErrorsArchive
	154, // 91: TSCE.FormulaOwnerInfoArchive.formula_owner:type_name -> TSP.Reference
	153, // 92: TSCE.SubFormulaOwnerIDArchive.base_owner_uid:type_name -> TSP.UUID
	124, // 93: TSCE.OwnerIDMapArchive.map_entry:type_name -> TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry
	153, // 94: TSCE.UidLookupListArchive.uuids:type_name -> TSP.UUID
	51,  // 95: TSCE.DependencyTrackerArchive.formula_owner_info:type_name -> TSCE.FormulaOwnerInfoArchive
	9,   // 96: TSCE.DependencyTrackerArchive.dirty_leaf:type_name -> TSCE.CellReferenceArchive
	53,  // 97: TSCE.DependencyTrackerArchive.owner_id_map:type_name -> TSCE.OwnerIDMapArchive
	10,  // 98: TSCE.DependencyTrackerArchive.internal_dirty_leaf:type_name -> TSCE.InternalCellReferenceArchive
	154, // 99: TSCE.DependencyTrackerArchive.formula_owner_dependencies:type_name -> TSP.Reference
	125, // 100: TSCE.RemoteDataValueMapArchive.entry:type_name -> TSCE.RemoteDataValueMapArchive.RemoteDataMapEntry
	126, // 101: TSCE.StockArchive.attribute:type_name -> TSCE.StockArchive.AttributeEntry
	57,  // 102: TSCE.RemoteDataStoreArchive.value_map:type_name -> TSCE.RemoteDataValueMapArchive
	58,  // 103: TSCE.RemoteDataStoreArchive.stocks:type_name -> TSCE.StockArchive
	154, // 104: TSCE.NameTrackedReferencePair.tracked_reference:type_name -> TSP.Reference
	152, // 105: TSCE.NamesByTrackedReferenceArchive.table_id:type_name -> TSP.CFUUIDArchive
	60,  // 106: TSCE.NamesByTrackedReferenceArchive.name_tracked_reference_pair:type_name -> TSCE.NameTrackedReferencePair
	154, // 107: TSCE.NamedReferenceManagerArchive.reference_tracker:type_name -> TSP.Reference
	61,  // 108: TSCE.NamedReferenceManagerArchive.names_by_tracked_reference_by_table:type_name -> TSCE.NamesByTrackedReferenceArchive
	127, // 109: TSCE.UuidSetStoreArchive.uuidSet:type_name -> TSCE.UuidSetStoreArchive.UuidSet
	128, // 110: TSCE.UuidReferenceMapArchive.cell_refs_for_uuid:type_name -> TSCE.UuidReferenceMapArchive.CellRefsForUuid
	130, // 111: TSCE.GroupByNodeMapArchive.refs_for_group_by:type_name -> TSCE.GroupByNodeMapArchive.GroupNodesForGroupBy
	55,  // 112: TSCE.CalculationEngineArchive.dependency_tracker:type_name -> TSCE.DependencyTrackerArchive
	154, // 113: TSCE.CalculationEngineArchive.named_reference_manager:type_name -> TSP.Reference
	4,   // 114: TSCE.CalculationEngineArchive.excel_import_date_mode:type_name -> TSCE.CalculationEngineArchive.ExcelImportDateMode
	64,  // 115: TSCE.CalculationEngineArchive.uuid_reference_map:type_name -> TSCE.UuidReferenceMapArchive
	78,  // 116: TSCE.CalculationEngineArchive.table_uid_history:type_name -> TSCE.RewriteTableUIDInfoArchive
	154, // 117: TSCE.CalculationEngineArchive.remote_data_store:type_name -> TSP.Reference
	65,  // 118: TSCE.CalculationEngineArchive.group_node_map:type_name -> TSCE.GroupByNodeMapArchive
	154, // 119: TSCE.CalculationEngineArchive.header_name_manager:type_name -> TSP.Reference
	154, // 120: TSCE.CalculationEngineArchive.refs_to_dirty:type_name -> TSP.Reference
	153, // 121: TSCE.CalculationEngineArchive.begin_tracking_names_legacy_nrm:type_name -> TSP.UUID
	153, // 122: TSCE.CalculationEngineArchive.end_tracking_names_legacy_nrm:type_name -> TSP.UUID
	153, // 123: TSCE.CategoryReferenceArchive.group_by_uid:type_name -> TSP.UUID
	153, // 124: TSCE.CategoryReferenceArchive.column_uid:type_name -> TSP.UUID
	131, // 125: TSCE.CategoryReferenceArchive.group_uids:type_name -> TSCE.CategoryReferenceArchive.CatRefUidList
	67,  // 126: TSCE.CategoryReferenceArchive.preserve_flags:type_name -> TSCE.PreserveColumnRowFlagsArchive
	153, // 127: TSCE.CategoryReferenceArchive.relative_group_uid:type_name -> TSP.UUID
	153, // 128: TSCE.CategoryReferenceArchive.absolute_group_uid:type_name -> TSP.UUID
	146, // 129: TSCE.ASTNodeArrayArchive.AST_node:type_name -> TSCE.ASTNodeArrayArchive.ASTNodeArchive
	69,  // 130: TSCE.FormulaArchive.AST_node_array:type_name -> TSCE.ASTNodeArrayArchive
	70,  // 131: TSCE.FormulaArchive.translation_flags:type_name -> TSCE.FormulaTranslationFlagsArchive
	153, // 132: TSCE.FormulaArchive.host_table_uid:type_name -> TSP.UUID
	153, // 133: TSCE.FormulaArchive.host_column_uid:type_name -> TSP.UUID
	153, // 134: TSCE.FormulaArchive.host_row_uid:type_name -> TSP.UUID
	71,  // 135: TSCE.FunctorArchive.formula:type_name -> TSCE.FormulaArchive
	74,  // 136: TSCE.TableTransposeInfoArchive.body_range_for_transposed_table:type_name -> TSCE.RangeCoordinateArchive
	153, // 137: TSCE.OwnerUIDMapperArchive.table_uid:type_name -> TSP.UUID
	153, // 138: TSCE.OwnerUIDMapperArchive.next_table_uid:type_name -> TSP.UUID
	153, // 139: TSCE.OwnerUIDMapperArchive.hidden_state_for_rows_owner_uid:type_name -> TSP.UUID
	153, // 140: TSCE.OwnerUIDMapperArchive.next_hidden_state_for_rows_owner_uid:type_name -> TSP.UUID
	153, // 141: TSCE.OwnerUIDMapperArchive.hidden_state_for_columns_owner_uid:type_name -> TSP.UUID
	153, // 142: TSCE.OwnerUIDMapperArchive.next_hidden_state_for_columns_owner_uid:type_name -> TSP.UUID
	153, // 143: TSCE.OwnerUIDMapperArchive.conditional_style_owner_uid:type_name -> TSP.UUID
	153, // 144: TSCE.OwnerUIDMapperArchive.next_conditional_style_owner_uid:type_name -> TSP.UUID
	153, // 145: TSCE.OwnerUIDMapperArchive.sort_rule_reference_tracker_owner_uid:type_name -> TSP.UUID
	153, // 146: TSCE.OwnerUIDMapperArchive.next_sort_rule_reference_tracker_owner_uid:type_name -> TSP.UUID
	153, // 147: TSCE.OwnerUIDMapperArchive.merge_owner_uid:type_name -> TSP.UUID
	153, // 148: TSCE.OwnerUIDMapperArchive.next_merge_owner_uid:type_name -> TSP.UUID
	153, // 149: TSCE.OwnerUIDMapperArchive.category_aggregates_owner_uid:type_name -> TSP.UUID
	153, // 150: TSCE.OwnerUIDMapperArchive.next_category_aggregates_owner_uid:type_name -> TSP.UUID
	153, // 151: TSCE.OwnerUIDMapperArchive.group_by_uid:type_name -> TSP.UUID
	153, // 152: TSCE.OwnerUIDMapperArchive.next_group_by_uid:type_name -> TSP.UUID
	153, // 153: TSCE.OwnerUIDMapperArchive.pencil_annotation_owner_uid:type_name -> TSP.UUID
	153, // 154: TSCE.OwnerUIDMapperArchive.next_pencil_annotation_owner_uid:type_name -> TSP.UUID
	149, // 155: TSCE.RewriteTableUIDInfoArchive.table_uid_map:type_name -> TSCE.RewriteTableUIDInfoArchive.TableUIDMapEntryArchive
	7,   // 156: TSCE.GroupByChangeArchive.change_type:type_name -> TSCE.GroupByChangeArchive.ChangeType
	153, // 157: TSCE.GroupByChangeArchive.group_by_uid:type_name -> TSP.UUID
	155, // 158: TSCE.GroupByChangeArchive.previous_to_updated_map:type_name -> TSP.UUIDMapArchive
	155, // 159: TSCE.GroupByChangeArchive.updated_to_previous_map:type_name -> TSP.UUIDMapArchive
	153, // 160: TSCE.GroupByChangeArchive.removed_group_uids:type_name -> TSP.UUID
	150, // 161: TSCE.GroupByChangeArchive.grouping_column_changes:type_name -> TSCE.GroupByChangeArchive.GroupingColumnChangeArchive
	153, // 162: TSCE.RewriteGroupNodeUIDInfoArchive.group_by_uid:type_name -> TSP.UUID
	155, // 163: TSCE.RewriteGroupNodeUIDInfoArchive.group_node_uid_map:type_name -> TSP.UUIDMapArchive
	151, // 164: TSCE.IndexedUidsArchive.uids:type_name -> TSCE.IndexedUidsArchive.IndexedUid
	153, // 165: TSCE.RewriteRangeEntryArchive.range_uids:type_name -> TSP.UUID
	153, // 166: TSCE.ColumnOrRowUuidsInfoArchive.table_uid:type_name -> TSP.UUID
	153, // 167: TSCE.ColumnOrRowUuidsInfoArchive.cond_style_owner_uid:type_name -> TSP.UUID
	153, // 168: TSCE.ColumnOrRowUuidsInfoArchive.group_by_uid:type_name -> TSP.UUID
	81,  // 169: TSCE.ColumnOrRowUuidsInfoArchive.uids:type_name -> TSCE.IndexedUidsArchive
	82,  // 170: TSCE.ColumnOrRowUuidsInfoArchive.range_entries:type_name -> TSCE.RewriteRangeEntryArchive
	74,  // 171: TSCE.ColumnOrRowUuidsInfoArchive.table_range:type_name -> TSCE.RangeCoordinateArchive
	153, // 172: TSCE.ColumnOrRowUuidsInfoArchive.insert_at_uid:type_name -> TSP.UUID
	153, // 173: TSCE.ColumnOrRowUuidsInfoArchive.insert_opposite_uid:type_name -> TSP.UUID
	153, // 174: TSCE.RegionInfoArchive.table_uid:type_name -> TSP.UUID
	81,  // 175: TSCE.RegionInfoArchive.column_uids:type_name -> TSCE.IndexedUidsArchive
	81,  // 176: TSCE.RegionInfoArchive.row_uids:type_name -> TSCE.IndexedUidsArchive
	84,  // 177: TSCE.RegionMovedInfoArchive.src_region:type_name -> TSCE.RegionInfoArchive
	84,  // 178: TSCE.RegionMovedInfoArchive.dst_region:type_name -> TSCE.RegionInfoArchive
	84,  // 179: TSCE.RegionMovedInfoArchive.original_src_region:type_name -> TSCE.RegionInfoArchive
	153, // 180: TSCE.RegionMovedInfoArchive.final_dest_table_uid:type_name -> TSP.UUID
	153, // 181: TSCE.HauntedOwnerArchive.owner_uid:type_name -> TSP.UUID
	88,  // 182: TSCE.CellCoordinateVectorArchive.cell_coord:type_name -> TSCE.CellCoordinateArchive
	9,   // 183: TSCE.ExpandedCellRefObjectPairArchive.cell_ref:type_name -> TSCE.CellReferenceArchive
	154, // 184: TSCE.ExpandedCellRefObjectPairArchive.object:type_name -> TSP.Reference
	90,  // 185: TSCE.ExpandedCellRefObjectMapArchive.cell_ref_object_pair:type_name -> TSCE.ExpandedCellRefObjectPairArchive
	71,  // 186: TSCE.FormulaAtCoordArchive.formula:type_name -> TSCE.FormulaArchive
	153, // 187: TSCE.FormulaCoordPairsByOwnerArchive.owner_uid:type_name -> TSP.UUID
	92,  // 188: TSCE.FormulaCoordPairsByOwnerArchive.formula_at_coords:type_name -> TSCE.FormulaAtCoordArchive
	93,  // 189: TSCE.FormulasForUndoArchive.formulas_for_owner:type_name -> TSCE.FormulaCoordPairsByOwnerArchive
	154, // 190: TSCE.FormulaRewriteCommandArchive.table_rewrite_command:type_name -> TSP.Reference
	156, // 191: TSCE.FormulaRewriteCommandArchive.super:type_name -> TSK.CommandArchive
	69,  // 192: TSCE.TrackedReferenceArchive.ast:type_name -> TSCE.ASTNodeArrayArchive
	69,  // 193: TSCE.ExpandedTrackedReferenceArchive.ast:type_name -> TSCE.ASTNodeArrayArchive
	152, // 194: TSCE.TrackedReferenceStoreArchive.uuid:type_name -> TSP.CFUUIDArchive
	154, // 195: TSCE.TrackedReferenceStoreArchive.tracked_reference:type_name -> TSP.Reference
	96,  // 196: TSCE.TrackedReferenceStoreArchive.contained_tracked_reference:type_name -> TSCE.TrackedReferenceArchive
	97,  // 197: TSCE.TrackedReferenceStoreArchive.contained_expanded_tracked_reference:type_name -> TSCE.ExpandedTrackedReferenceArchive
	153, // 198: TSCE.ViewTractRefArchive.table_uid:type_name -> TSP.UUID
	137, // 199: TSCE.ViewTractRefArchive.uid_tract:type_name -> TSCE.ASTNodeArrayArchive.ASTUidTract
	67,  // 200: TSCE.ViewTractRefArchive.preserve_flags:type_name -> TSCE.PreserveColumnRowFlagsArchive
	157, // 201: TSCE.BooleanCellValueArchive.format:type_name -> TSK.TSKFormatStructArchive
	157, // 202: TSCE.DateCellValueArchive.format:type_name -> TSK.TSKFormatStructArchive
	157, // 203: TSCE.NumberCellValueArchive.format:type_name -> TSK.TSKFormatStructArchive
	157, // 204: TSCE.StringCellValueArchive.format:type_name -> TSK.TSKFormatStructArchive
	8,   // 205: TSCE.CellValueArchive.cell_value_type:type_name -> TSCE.CellValueArchive.CellValueType
	100, // 206: TSCE.CellValueArchive.boolean_value:type_name -> TSCE.BooleanCellValueArchive
	101, // 207: TSCE.CellValueArchive.date_value:type_name -> TSCE.DateCellValueArchive
	102, // 208: TSCE.CellValueArchive.number_value:type_name -> TSCE.NumberCellValueArchive
	103, // 209: TSCE.CellValueArchive.string_value:type_name -> TSCE.StringCellValueArchive
	104, // 210: TSCE.CellValueArchive.error_value:type_name -> TSCE.ErrorCellValueArchive
	14,  // 211: TSCE.CellCoordSetArchive.ColumnEntry.row_set:type_name -> TSCE.IndexSetArchive
	15,  // 212: TSCE.InternalCellRefSetArchive.OwnerEntry.coord_set:type_name -> TSCE.CellCoordSetArchive
	153, // 213: TSCE.CellRefSetArchive.OwnerEntry.owner_uid:type_name -> TSP.UUID
	15,  // 214: TSCE.CellRefSetArchive.OwnerEntry.coord_set:type_name -> TSCE.CellCoordSetArchive
	153, // 215: TSCE.UidCoordSetArchive.ColumnEntry.column:type_name -> TSP.UUID
	153, // 216: TSCE.UidCoordSetArchive.ColumnEntry.row_set:type_name -> TSP.UUID
	153, // 217: TSCE.UidCellRefSetArchive.OwnerEntry.owner_uid:type_name -> TSP.UUID
	20,  // 218: TSCE.UidCellRefSetArchive.OwnerEntry.coord_set:type_name -> TSCE.UidCoordSetArchive
	88,  // 219: TSCE.RangePrecedentsTileArchive.FromToRangeArchive.from_coord:type_name -> TSCE.CellCoordinateArchive
	18,  // 220: TSCE.RangePrecedentsTileArchive.FromToRangeArchive.refers_to_rect:type_name -> TSCE.CellRectArchive
	1,   // 221: TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells.range_context:type_name -> TSCE.SpanningDependenciesArchive.RangeContext
	88,  // 222: TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells.cell_coordinate:type_name -> TSCE.CellCoordinateArchive
	1,   // 223: TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells.range_context:type_name -> TSCE.SpanningDependenciesArchive.RangeContext
	10,  // 224: TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells.internal_cell_reference:type_name -> TSCE.InternalCellReferenceArchive
	2,   // 225: TSCE.SpanningDependenciesExpandedArchive.ExtentRangeWithTableWithContext.range_context:type_name -> TSCE.SpanningDependenciesExpandedArchive.RangeContext
	117, // 226: TSCE.SpanningDependenciesExpandedArchive.ExtentRangeWithTableWithContext.ranges:type_name -> TSCE.SpanningDependenciesExpandedArchive.ExtentRange
	88,  // 227: TSCE.SpanningDependenciesExpandedArchive.CellCoordRefersToExtents.coordinate:type_name -> TSCE.CellCoordinateArchive
	118, // 228: TSCE.SpanningDependenciesExpandedArchive.CellCoordRefersToExtents.ranges_by_table_context:type_name -> TSCE.SpanningDependenciesExpandedArchive.ExtentRangeWithTableWithContext
	88,  // 229: TSCE.CellErrorsArchive.ErrorForCell.coordinate:type_name -> TSCE.CellCoordinateArchive
	3,   // 230: TSCE.CellErrorsArchive.ErrorForCell.error_flavor:type_name -> TSCE.CellErrorsArchive.ErrorFlavor
	10,  // 231: TSCE.CellErrorsArchive.ErrorForCell.err_due_to_cell:type_name -> TSCE.InternalCellReferenceArchive
	153, // 232: TSCE.UuidReferencesArchive.TableRef.owner_uuid:type_name -> TSP.UUID
	15,  // 233: TSCE.UuidReferencesArchive.TableRef.coord_set:type_name -> TSCE.CellCoordSetArchive
	153, // 234: TSCE.UuidReferencesArchive.UuidRef.uuid:type_name -> TSP.UUID
	15,  // 235: TSCE.UuidReferencesArchive.UuidRef.coord_set:type_name -> TSCE.CellCoordSetArchive
	153, // 236: TSCE.UuidReferencesArchive.TableWithUuidRef.owner_uuid:type_name -> TSP.UUID
	122, // 237: TSCE.UuidReferencesArchive.TableWithUuidRef.uuid_refs:type_name -> TSCE.UuidReferencesArchive.UuidRef
	152, // 238: TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry.owner_id:type_name -> TSP.CFUUIDArchive
	56,  // 239: TSCE.RemoteDataValueMapArchive.RemoteDataMapEntry.specifier:type_name -> TSCE.RemoteDataSpecifierArchive
	105, // 240: TSCE.RemoteDataValueMapArchive.RemoteDataMapEntry.value:type_name -> TSCE.CellValueArchive
	153, // 241: TSCE.UuidSetStoreArchive.UuidSet.uuid:type_name -> TSP.UUID
	153, // 242: TSCE.UuidReferenceMapArchive.CellRefsForUuid.uuid:type_name -> TSP.UUID
	10,  // 243: TSCE.UuidReferenceMapArchive.CellRefsForUuid.cell_ref:type_name -> TSCE.InternalCellReferenceArchive
	16,  // 244: TSCE.UuidReferenceMapArchive.CellRefsForUuid.cell_refs:type_name -> TSCE.InternalCellRefSetArchive
	153, // 245: TSCE.GroupByNodeMapArchive.CellRefsForGroupNode.group_node_uid:type_name -> TSP.UUID
	16,  // 246: TSCE.GroupByNodeMapArchive.CellRefsForGroupNode.cell_refs:type_name -> TSCE.InternalCellRefSetArchive
	153, // 247: TSCE.GroupByNodeMapArchive.GroupNodesForGroupBy.group_by_uid:type_name -> TSP.UUID
	129, // 248: TSCE.GroupByNodeMapArchive.GroupNodesForGroupBy.refs_for_group_node:type_name -> TSCE.GroupByNodeMapArchive.CellRefsForGroupNode
	153, // 249: TSCE.CategoryReferenceArchive.CatRefUidList.uid:type_name -> TSP.UUID
	152, // 250: TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.table_id:type_name -> TSP.CFUUIDArchive
	153, // 251: TSCE.ASTNodeArrayArchive.ASTUidList.uid:type_name -> TSP.UUID
	136, // 252: TSCE.ASTNodeArrayArchive.ASTUidTract.columnUids:type_name -> TSCE.ASTNodeArrayArchive.ASTUidList
	136, // 253: TSCE.ASTNodeArrayArchive.ASTUidTract.rowUids:type_name -> TSCE.ASTNodeArrayArchive.ASTUidList
	6,   // 254: TSCE.ASTNodeArrayArchive.ASTUidTract.purpose:type_name -> TSCE.ASTNodeArrayArchive.ASTUidTractPurpose
	137, // 255: TSCE.ASTNodeArrayArchive.ASTUidTractList.tract:type_name -> TSCE.ASTNodeArrayArchive.ASTUidTract
	138, // 256: TSCE.ASTNodeArrayArchive.ASTUidTractList.sticky_bits:type_name -> TSCE.ASTNodeArrayArchive.ASTStickyBits
	153, // 257: TSCE.ASTNodeArrayArchive.ASTUidCoordinateArchive.column_uid:type_name -> TSP.UUID
	153, // 258: TSCE.ASTNodeArrayArchive.ASTUidCoordinateArchive.row_uid:type_name -> TSP.UUID
	68,  // 259: TSCE.ASTNodeArrayArchive.ASTCategoryReferenceArchive.category_ref:type_name -> TSCE.CategoryReferenceArchive
	147, // 260: TSCE.ASTNodeArrayArchive.ASTColonTractArchive.relative_column:type_name -> TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractRelativeRangeArchive
	147, // 261: TSCE.ASTNodeArrayArchive.ASTColonTractArchive.relative_row:type_name -> TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractRelativeRangeArchive
	148, // 262: TSCE.ASTNodeArrayArchive.ASTColonTractArchive.absolute_column:type_name -> TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractAbsoluteRangeArchive
	148, // 263: TSCE.ASTNodeArrayArchive.ASTColonTractArchive.absolute_row:type_name -> TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractAbsoluteRangeArchive
	152, // 264: TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.table_id:type_name -> TSP.CFUUIDArchive
	5,   // 265: TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_node_type:type_name -> TSCE.ASTNodeArrayArchive.ASTNodeType
	69,  // 266: TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_thunk_node_array:type_name -> TSCE.ASTNodeArrayArchive
	132, // 267: TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_local_cell_reference_node_reference:type_name -> TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive
	133, // 268: TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_cross_table_cell_reference_node_reference:type_name -> TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive
	134, // 269: TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_column:type_name -> TSCE.ASTNodeArrayArchive.ASTColumnCoordinateArchive
	135, // 270: TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_row:type_name -> TSCE.ASTNodeArrayArchive.ASTRowCoordinateArchive
	144, // 271: TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_cross_table_reference_extra_info:type_name -> TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive
	140, // 272: TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_uid_coordinate:type_name -> TSCE.ASTNodeArrayArchive.ASTUidCoordinateArchive
	138, // 273: TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_sticky_bits:type_name -> TSCE.ASTNodeArrayArchive.ASTStickyBits
	138, // 274: TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_frozen_sticky_bits:type_name -> TSCE.ASTNodeArrayArchive.ASTStickyBits
	69,  // 275: TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_let_e2:type_name -> TSCE.ASTNodeArrayArchive
	145, // 276: TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_let_whitespace:type_name -> TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace
	139, // 277: TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_tract_list:type_name -> TSCE.ASTNodeArrayArchive.ASTUidTractList
	142, // 278: TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_category_ref:type_name -> TSCE.ASTNodeArrayArchive.ASTCategoryReferenceArchive
	143, // 279: TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_colon_tract:type_name -> TSCE.ASTNodeArrayArchive.ASTColonTractArchive
	141, // 280: TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_category_levels:type_name -> TSCE.ASTNodeArrayArchive.ASTCategoryLevels
	153, // 281: TSCE.RewriteTableUIDInfoArchive.TableUIDMapEntryArchive.prev_table_uid:type_name -> TSP.UUID
	153, // 282: TSCE.RewriteTableUIDInfoArchive.TableUIDMapEntryArchive.new_table_uid:type_name -> TSP.UUID
	153, // 283: TSCE.IndexedUidsArchive.IndexedUid.uid_for_index:type_name -> TSP.UUID
	284, // [284:284] is the sub-list for method output_type
	284, // [284:284] is the sub-list for method input_type
	284, // [284:284] is the sub-list for extension type_name
	284, // [284:284] is the sub-list for extension extendee
	0,   // [0:284] is the sub-list for field type_name
}

func init() { file_TSCEArchives_proto_init() }
func file_TSCEArchives_proto_init() {
	if File_TSCEArchives_proto != nil {
		return
	}
	file_TSPMessages_proto_init()
	file_TSKArchives_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_TSCEArchives_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellReferenceArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternalCellReferenceArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelativeCellRefArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RangeReferenceArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternalRangeReferenceArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexSetArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellCoordSetArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternalCellRefSetArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnRowSize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellRectArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellRefSetArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UidCoordSetArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UidCellRefSetArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferencesToDirtyArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoordMapperArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferenceArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgeArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgesArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpandedEdgesArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellRecordArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellDependenciesArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellRecordExpandedArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellDependenciesExpandedArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellRecordTileArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellDependenciesTiledArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolatileDependenciesArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolatileDependenciesExpandedArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RTreeInternalNodeContentsArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RTreeLeafNodeContentsArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RTreeNodeArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RTreeArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RangeBackDependencyArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RangeDependenciesArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RangePrecedentsTileArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RangeDependenciesTiledArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpanningDependenciesArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpanningDependenciesExpandedArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WholeOwnerDependenciesArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WholeOwnerDependenciesExpandedArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellErrorsArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UuidReferencesArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormulaOwnerDependenciesArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormulaOwnerInfoArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubFormulaOwnerIDArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OwnerIDMapArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UidLookupListArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DependencyTrackerArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteDataSpecifierArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteDataValueMapArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteDataStoreArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NameTrackedReferencePair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamesByTrackedReferenceArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamedReferenceManagerArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UuidSetStoreArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UuidReferenceMapArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupByNodeMapArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalculationEngineArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreserveColumnRowFlagsArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryReferenceArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ASTNodeArrayArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormulaTranslationFlagsArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormulaArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunctorArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormatStructArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RangeCoordinateArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableTransposeInfoArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergeOriginMovedArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OwnerUIDMapperArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewriteTableUIDInfoArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupByChangeArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewriteGroupNodeUIDInfoArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexedUidsArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewriteRangeEntryArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnOrRowUuidsInfoArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegionInfoArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegionMovedInfoArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergeSourceArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HauntedOwnerArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellCoordinateArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellCoordinateVectorArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpandedCellRefObjectPairArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpandedCellRefObjectMapArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormulaAtCoordArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormulaCoordPairsByOwnerArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormulasForUndoArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormulaRewriteCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackedReferenceArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpandedTrackedReferenceArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackedReferenceStoreArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ViewTractRefArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BooleanCellValueArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DateCellValueArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NumberCellValueArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringCellValueArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorCellValueArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellValueArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexSetArchive_IndexSetEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellCoordSetArchive_ColumnEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternalCellRefSetArchive_OwnerEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellRefSetArchive_OwnerEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UidCoordSetArchive_ColumnEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UidCellRefSetArchive_OwnerEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoordMapperArchive_BaseToViewEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoordMapperArchive_SummaryToViewEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RangePrecedentsTileArchive_FromToRangeArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpanningDependenciesArchive_ReferringColumnToLocalCells); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpanningDependenciesArchive_ReferringColumnToRemoteCells); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpanningDependenciesExpandedArchive_ExtentRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpanningDependenciesExpandedArchive_CellCoordRefersToExtents); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellErrorsArchive_ErrorForCell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UuidReferencesArchive_TableRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UuidReferencesArchive_UuidRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UuidReferencesArchive_TableWithUuidRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OwnerIDMapArchive_OwnerIDMapArchiveEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteDataValueMapArchive_RemoteDataMapEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockArchive_AttributeEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UuidSetStoreArchive_UuidSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UuidReferenceMapArchive_CellRefsForUuid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupByNodeMapArchive_CellRefsForGroupNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupByNodeMapArchive_GroupNodesForGroupBy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryReferenceArchive_CatRefUidList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ASTNodeArrayArchive_ASTColumnCoordinateArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ASTNodeArrayArchive_ASTRowCoordinateArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ASTNodeArrayArchive_ASTUidList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ASTNodeArrayArchive_ASTUidTract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ASTNodeArrayArchive_ASTStickyBits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ASTNodeArrayArchive_ASTUidTractList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ASTNodeArrayArchive_ASTUidCoordinateArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ASTNodeArrayArchive_ASTCategoryLevels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ASTNodeArrayArchive_ASTCategoryReferenceArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ASTNodeArrayArchive_ASTColonTractArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ASTNodeArrayArchive_ASTLetNodeWhitespace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ASTNodeArrayArchive_ASTNodeArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewriteTableUIDInfoArchive_TableUIDMapEntryArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupByChangeArchive_GroupingColumnChangeArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCEArchives_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexedUidsArchive_IndexedUid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_TSCEArchives_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   143,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_TSCEArchives_proto_goTypes,
		DependencyIndexes: file_TSCEArchives_proto_depIdxs,
		EnumInfos:         file_TSCEArchives_proto_enumTypes,
		MessageInfos:      file_TSCEArchives_proto_msgTypes,
	}.Build()
	File_TSCEArchives_proto = out.File
	file_TSCEArchives_proto_rawDesc = nil
	file_TSCEArchives_proto_goTypes = nil
	file_TSCEArchives_proto_depIdxs = nil
}
