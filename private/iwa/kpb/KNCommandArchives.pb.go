// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: KNCommandArchives.proto

package kpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AnimationReferent int32

const (
	AnimationReferent_kRelativeToStart AnimationReferent = 1
	AnimationReferent_kRelativeToEnd   AnimationReferent = 2
)

// Enum value maps for AnimationReferent.
var (
	AnimationReferent_name = map[int32]string{
		1: "kRelativeToStart",
		2: "kRelativeToEnd",
	}
	AnimationReferent_value = map[string]int32{
		"kRelativeToStart": 1,
		"kRelativeToEnd":   2,
	}
)

func (x AnimationReferent) Enum() *AnimationReferent {
	p := new(AnimationReferent)
	*p = x
	return p
}

func (x AnimationReferent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AnimationReferent) Descriptor() protoreflect.EnumDescriptor {
	return file_KNCommandArchives_proto_enumTypes[0].Descriptor()
}

func (AnimationReferent) Type() protoreflect.EnumType {
	return &file_KNCommandArchives_proto_enumTypes[0]
}

func (x AnimationReferent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AnimationReferent) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AnimationReferent(num)
	return nil
}

// Deprecated: Use AnimationReferent.Descriptor instead.
func (AnimationReferent) EnumDescriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{0}
}

type CommandShowInsertSlideArchive_Kind int32

const (
	CommandShowInsertSlideArchive_kKindInsertSlide             CommandShowInsertSlideArchive_Kind = 0
	CommandShowInsertSlideArchive_kKindInsertSlideForPaste     CommandShowInsertSlideArchive_Kind = 1
	CommandShowInsertSlideArchive_kKindInsertSlideForDuplicate CommandShowInsertSlideArchive_Kind = 2
)

// Enum value maps for CommandShowInsertSlideArchive_Kind.
var (
	CommandShowInsertSlideArchive_Kind_name = map[int32]string{
		0: "kKindInsertSlide",
		1: "kKindInsertSlideForPaste",
		2: "kKindInsertSlideForDuplicate",
	}
	CommandShowInsertSlideArchive_Kind_value = map[string]int32{
		"kKindInsertSlide":             0,
		"kKindInsertSlideForPaste":     1,
		"kKindInsertSlideForDuplicate": 2,
	}
)

func (x CommandShowInsertSlideArchive_Kind) Enum() *CommandShowInsertSlideArchive_Kind {
	p := new(CommandShowInsertSlideArchive_Kind)
	*p = x
	return p
}

func (x CommandShowInsertSlideArchive_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommandShowInsertSlideArchive_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_KNCommandArchives_proto_enumTypes[1].Descriptor()
}

func (CommandShowInsertSlideArchive_Kind) Type() protoreflect.EnumType {
	return &file_KNCommandArchives_proto_enumTypes[1]
}

func (x CommandShowInsertSlideArchive_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CommandShowInsertSlideArchive_Kind) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CommandShowInsertSlideArchive_Kind(num)
	return nil
}

// Deprecated: Use CommandShowInsertSlideArchive_Kind.Descriptor instead.
func (CommandShowInsertSlideArchive_Kind) EnumDescriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{16, 0}
}

type CommandLiveVideoInfoSetValue_Property int32

const (
	CommandLiveVideoInfoSetValue_Scale            CommandLiveVideoInfoSetValue_Property = 0
	CommandLiveVideoInfoSetValue_NormalizedOffset CommandLiveVideoInfoSetValue_Property = 1
	CommandLiveVideoInfoSetValue_MaskKind         CommandLiveVideoInfoSetValue_Property = 2
	CommandLiveVideoInfoSetValue_MaskCornerRadius CommandLiveVideoInfoSetValue_Property = 3
	CommandLiveVideoInfoSetValue_IsPlaceholder    CommandLiveVideoInfoSetValue_Property = 4
)

// Enum value maps for CommandLiveVideoInfoSetValue_Property.
var (
	CommandLiveVideoInfoSetValue_Property_name = map[int32]string{
		0: "Scale",
		1: "NormalizedOffset",
		2: "MaskKind",
		3: "MaskCornerRadius",
		4: "IsPlaceholder",
	}
	CommandLiveVideoInfoSetValue_Property_value = map[string]int32{
		"Scale":            0,
		"NormalizedOffset": 1,
		"MaskKind":         2,
		"MaskCornerRadius": 3,
		"IsPlaceholder":    4,
	}
)

func (x CommandLiveVideoInfoSetValue_Property) Enum() *CommandLiveVideoInfoSetValue_Property {
	p := new(CommandLiveVideoInfoSetValue_Property)
	*p = x
	return p
}

func (x CommandLiveVideoInfoSetValue_Property) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommandLiveVideoInfoSetValue_Property) Descriptor() protoreflect.EnumDescriptor {
	return file_KNCommandArchives_proto_enumTypes[2].Descriptor()
}

func (CommandLiveVideoInfoSetValue_Property) Type() protoreflect.EnumType {
	return &file_KNCommandArchives_proto_enumTypes[2]
}

func (x CommandLiveVideoInfoSetValue_Property) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CommandLiveVideoInfoSetValue_Property) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CommandLiveVideoInfoSetValue_Property(num)
	return nil
}

// Deprecated: Use CommandLiveVideoInfoSetValue_Property.Descriptor instead.
func (CommandLiveVideoInfoSetValue_Property) EnumDescriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{60, 0}
}

type CommandLiveVideoSourceSetValue_Property int32

const (
	CommandLiveVideoSourceSetValue_SourceName                CommandLiveVideoSourceSetValue_Property = 0
	CommandLiveVideoSourceSetValue_CaptureDeviceDescription  CommandLiveVideoSourceSetValue_Property = 1
	CommandLiveVideoSourceSetValue_PosterImageData           CommandLiveVideoSourceSetValue_Property = 2
	CommandLiveVideoSourceSetValue_SymbolAbbreviationText    CommandLiveVideoSourceSetValue_Property = 3
	CommandLiveVideoSourceSetValue_SymbolImageIdentifier     CommandLiveVideoSourceSetValue_Property = 4
	CommandLiveVideoSourceSetValue_SymbolTintColorIdentifier CommandLiveVideoSourceSetValue_Property = 5
)

// Enum value maps for CommandLiveVideoSourceSetValue_Property.
var (
	CommandLiveVideoSourceSetValue_Property_name = map[int32]string{
		0: "SourceName",
		1: "CaptureDeviceDescription",
		2: "PosterImageData",
		3: "SymbolAbbreviationText",
		4: "SymbolImageIdentifier",
		5: "SymbolTintColorIdentifier",
	}
	CommandLiveVideoSourceSetValue_Property_value = map[string]int32{
		"SourceName":                0,
		"CaptureDeviceDescription":  1,
		"PosterImageData":           2,
		"SymbolAbbreviationText":    3,
		"SymbolImageIdentifier":     4,
		"SymbolTintColorIdentifier": 5,
	}
)

func (x CommandLiveVideoSourceSetValue_Property) Enum() *CommandLiveVideoSourceSetValue_Property {
	p := new(CommandLiveVideoSourceSetValue_Property)
	*p = x
	return p
}

func (x CommandLiveVideoSourceSetValue_Property) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommandLiveVideoSourceSetValue_Property) Descriptor() protoreflect.EnumDescriptor {
	return file_KNCommandArchives_proto_enumTypes[3].Descriptor()
}

func (CommandLiveVideoSourceSetValue_Property) Type() protoreflect.EnumType {
	return &file_KNCommandArchives_proto_enumTypes[3]
}

func (x CommandLiveVideoSourceSetValue_Property) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CommandLiveVideoSourceSetValue_Property) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CommandLiveVideoSourceSetValue_Property(num)
	return nil
}

// Deprecated: Use CommandLiveVideoSourceSetValue_Property.Descriptor instead.
func (CommandLiveVideoSourceSetValue_Property) EnumDescriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{61, 0}
}

type UIStateCommandGroupArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                     *CommandGroupArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	UiState                   *Reference           `protobuf:"bytes,2,req,name=uiState" json:"uiState,omitempty"`
	Property                  *string              `protobuf:"bytes,3,req,name=property" json:"property,omitempty"`
	SlideNodesToEdit          []*Reference         `protobuf:"bytes,4,rep,name=slideNodesToEdit" json:"slideNodesToEdit,omitempty"`
	TemplateSlideNodesToApply []*Reference         `protobuf:"bytes,5,rep,name=template_slide_nodes_to_apply,json=templateSlideNodesToApply" json:"template_slide_nodes_to_apply,omitempty"`
	ThumbnailSizes            []*Size              `protobuf:"bytes,6,rep,name=thumbnailSizes" json:"thumbnailSizes,omitempty"`
	SelectedSlideNodes        []*Reference         `protobuf:"bytes,7,rep,name=selectedSlideNodes" json:"selectedSlideNodes,omitempty"`
	RestoreSelectedSlideNodes []*Reference         `protobuf:"bytes,8,rep,name=restoreSelectedSlideNodes" json:"restoreSelectedSlideNodes,omitempty"`
}

func (x *UIStateCommandGroupArchive) Reset() {
	*x = UIStateCommandGroupArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UIStateCommandGroupArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UIStateCommandGroupArchive) ProtoMessage() {}

func (x *UIStateCommandGroupArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UIStateCommandGroupArchive.ProtoReflect.Descriptor instead.
func (*UIStateCommandGroupArchive) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{0}
}

func (x *UIStateCommandGroupArchive) GetSuper() *CommandGroupArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *UIStateCommandGroupArchive) GetUiState() *Reference {
	if x != nil {
		return x.UiState
	}
	return nil
}

func (x *UIStateCommandGroupArchive) GetProperty() string {
	if x != nil && x.Property != nil {
		return *x.Property
	}
	return ""
}

func (x *UIStateCommandGroupArchive) GetSlideNodesToEdit() []*Reference {
	if x != nil {
		return x.SlideNodesToEdit
	}
	return nil
}

func (x *UIStateCommandGroupArchive) GetTemplateSlideNodesToApply() []*Reference {
	if x != nil {
		return x.TemplateSlideNodesToApply
	}
	return nil
}

func (x *UIStateCommandGroupArchive) GetThumbnailSizes() []*Size {
	if x != nil {
		return x.ThumbnailSizes
	}
	return nil
}

func (x *UIStateCommandGroupArchive) GetSelectedSlideNodes() []*Reference {
	if x != nil {
		return x.SelectedSlideNodes
	}
	return nil
}

func (x *UIStateCommandGroupArchive) GetRestoreSelectedSlideNodes() []*Reference {
	if x != nil {
		return x.RestoreSelectedSlideNodes
	}
	return nil
}

type CommandSlideInsertDrawablesArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                                                 *CommandArchive       `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	SlideId                                               *UUID                 `protobuf:"bytes,2,req,name=slide_id,json=slideId" json:"slide_id,omitempty"`
	Drawables                                             []*Reference          `protobuf:"bytes,3,rep,name=drawables" json:"drawables,omitempty"`
	WorkingDrawables                                      []*Reference          `protobuf:"bytes,18,rep,name=working_drawables,json=workingDrawables" json:"working_drawables,omitempty"`
	ArgsList                                              *MixedIdOperationArgs `protobuf:"bytes,4,opt,name=args_list,json=argsList" json:"args_list,omitempty"`
	UpdateGeometryToMatchObjectPlaceholder                *bool                 `protobuf:"varint,5,req,name=update_geometry_to_match_object_placeholder,json=updateGeometryToMatchObjectPlaceholder" json:"update_geometry_to_match_object_placeholder,omitempty"`
	IdsOfDrawablesUsingObjectPlaceholderGeometry          []*UUID               `protobuf:"bytes,6,rep,name=ids_of_drawables_using_object_placeholder_geometry,json=idsOfDrawablesUsingObjectPlaceholderGeometry" json:"ids_of_drawables_using_object_placeholder_geometry,omitempty"`
	SagePlaceholderTagsList                               []string              `protobuf:"bytes,7,rep,name=sage_placeholder_tags_list,json=sagePlaceholderTagsList" json:"sage_placeholder_tags_list,omitempty"`
	InstructionalTextList                                 []string              `protobuf:"bytes,20,rep,name=instructional_text_list,json=instructionalTextList" json:"instructional_text_list,omitempty"`
	UndoArchive                                           *Reference            `protobuf:"bytes,8,opt,name=undo_archive,json=undoArchive" json:"undo_archive,omitempty"`
	IsPasting                                             *bool                 `protobuf:"varint,9,opt,name=is_pasting,json=isPasting" json:"is_pasting,omitempty"`
	InsertBuildDescriptions                               []*Reference          `protobuf:"bytes,10,rep,name=insert_build_descriptions,json=insertBuildDescriptions" json:"insert_build_descriptions,omitempty"`
	WorkingInsertBuildDescriptions                        []*Reference          `protobuf:"bytes,19,rep,name=working_insert_build_descriptions,json=workingInsertBuildDescriptions" json:"working_insert_build_descriptions,omitempty"`
	RemoveBuildDescriptions                               []*Reference          `protobuf:"bytes,11,rep,name=remove_build_descriptions,json=removeBuildDescriptions" json:"remove_build_descriptions,omitempty"`
	RemoveSlideSpecificHyperlinks                         *bool                 `protobuf:"varint,12,opt,name=remove_slide_specific_hyperlinks,json=removeSlideSpecificHyperlinks" json:"remove_slide_specific_hyperlinks,omitempty"`
	CustomFormatKeys                                      []*UUID               `protobuf:"bytes,13,rep,name=custom_format_keys,json=customFormatKeys" json:"custom_format_keys,omitempty"`
	SavedNextUntitledResolverIndex                        *uint32               `protobuf:"varint,16,opt,name=saved_next_untitled_resolver_index,json=savedNextUntitledResolverIndex" json:"saved_next_untitled_resolver_index,omitempty"`
	GeometryOfObjectPlaceholderForComparisonToRestoreLink *GeometryArchive      `protobuf:"bytes,17,opt,name=geometry_of_object_placeholder_for_comparison_to_restore_link,json=geometryOfObjectPlaceholderForComparisonToRestoreLink" json:"geometry_of_object_placeholder_for_comparison_to_restore_link,omitempty"`
}

func (x *CommandSlideInsertDrawablesArchive) Reset() {
	*x = CommandSlideInsertDrawablesArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSlideInsertDrawablesArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSlideInsertDrawablesArchive) ProtoMessage() {}

func (x *CommandSlideInsertDrawablesArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSlideInsertDrawablesArchive.ProtoReflect.Descriptor instead.
func (*CommandSlideInsertDrawablesArchive) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{1}
}

func (x *CommandSlideInsertDrawablesArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandSlideInsertDrawablesArchive) GetSlideId() *UUID {
	if x != nil {
		return x.SlideId
	}
	return nil
}

func (x *CommandSlideInsertDrawablesArchive) GetDrawables() []*Reference {
	if x != nil {
		return x.Drawables
	}
	return nil
}

func (x *CommandSlideInsertDrawablesArchive) GetWorkingDrawables() []*Reference {
	if x != nil {
		return x.WorkingDrawables
	}
	return nil
}

func (x *CommandSlideInsertDrawablesArchive) GetArgsList() *MixedIdOperationArgs {
	if x != nil {
		return x.ArgsList
	}
	return nil
}

func (x *CommandSlideInsertDrawablesArchive) GetUpdateGeometryToMatchObjectPlaceholder() bool {
	if x != nil && x.UpdateGeometryToMatchObjectPlaceholder != nil {
		return *x.UpdateGeometryToMatchObjectPlaceholder
	}
	return false
}

func (x *CommandSlideInsertDrawablesArchive) GetIdsOfDrawablesUsingObjectPlaceholderGeometry() []*UUID {
	if x != nil {
		return x.IdsOfDrawablesUsingObjectPlaceholderGeometry
	}
	return nil
}

func (x *CommandSlideInsertDrawablesArchive) GetSagePlaceholderTagsList() []string {
	if x != nil {
		return x.SagePlaceholderTagsList
	}
	return nil
}

func (x *CommandSlideInsertDrawablesArchive) GetInstructionalTextList() []string {
	if x != nil {
		return x.InstructionalTextList
	}
	return nil
}

func (x *CommandSlideInsertDrawablesArchive) GetUndoArchive() *Reference {
	if x != nil {
		return x.UndoArchive
	}
	return nil
}

func (x *CommandSlideInsertDrawablesArchive) GetIsPasting() bool {
	if x != nil && x.IsPasting != nil {
		return *x.IsPasting
	}
	return false
}

func (x *CommandSlideInsertDrawablesArchive) GetInsertBuildDescriptions() []*Reference {
	if x != nil {
		return x.InsertBuildDescriptions
	}
	return nil
}

func (x *CommandSlideInsertDrawablesArchive) GetWorkingInsertBuildDescriptions() []*Reference {
	if x != nil {
		return x.WorkingInsertBuildDescriptions
	}
	return nil
}

func (x *CommandSlideInsertDrawablesArchive) GetRemoveBuildDescriptions() []*Reference {
	if x != nil {
		return x.RemoveBuildDescriptions
	}
	return nil
}

func (x *CommandSlideInsertDrawablesArchive) GetRemoveSlideSpecificHyperlinks() bool {
	if x != nil && x.RemoveSlideSpecificHyperlinks != nil {
		return *x.RemoveSlideSpecificHyperlinks
	}
	return false
}

func (x *CommandSlideInsertDrawablesArchive) GetCustomFormatKeys() []*UUID {
	if x != nil {
		return x.CustomFormatKeys
	}
	return nil
}

func (x *CommandSlideInsertDrawablesArchive) GetSavedNextUntitledResolverIndex() uint32 {
	if x != nil && x.SavedNextUntitledResolverIndex != nil {
		return *x.SavedNextUntitledResolverIndex
	}
	return 0
}

func (x *CommandSlideInsertDrawablesArchive) GetGeometryOfObjectPlaceholderForComparisonToRestoreLink() *GeometryArchive {
	if x != nil {
		return x.GeometryOfObjectPlaceholderForComparisonToRestoreLink
	}
	return nil
}

type CommandSlideSetPlaceholdersForTagsArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super    *CommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	SlideId  *UUID           `protobuf:"bytes,2,req,name=slide_id,json=slideId" json:"slide_id,omitempty"`
	Infos    []*Reference    `protobuf:"bytes,3,rep,name=infos" json:"infos,omitempty"`
	Tags     []string        `protobuf:"bytes,4,rep,name=tags" json:"tags,omitempty"`
	OldInfos []*Reference    `protobuf:"bytes,6,rep,name=old_infos,json=oldInfos" json:"old_infos,omitempty"`
	OldTags  []string        `protobuf:"bytes,5,rep,name=old_tags,json=oldTags" json:"old_tags,omitempty"`
}

func (x *CommandSlideSetPlaceholdersForTagsArchive) Reset() {
	*x = CommandSlideSetPlaceholdersForTagsArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSlideSetPlaceholdersForTagsArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSlideSetPlaceholdersForTagsArchive) ProtoMessage() {}

func (x *CommandSlideSetPlaceholdersForTagsArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSlideSetPlaceholdersForTagsArchive.ProtoReflect.Descriptor instead.
func (*CommandSlideSetPlaceholdersForTagsArchive) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{2}
}

func (x *CommandSlideSetPlaceholdersForTagsArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandSlideSetPlaceholdersForTagsArchive) GetSlideId() *UUID {
	if x != nil {
		return x.SlideId
	}
	return nil
}

func (x *CommandSlideSetPlaceholdersForTagsArchive) GetInfos() []*Reference {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *CommandSlideSetPlaceholdersForTagsArchive) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CommandSlideSetPlaceholdersForTagsArchive) GetOldInfos() []*Reference {
	if x != nil {
		return x.OldInfos
	}
	return nil
}

func (x *CommandSlideSetPlaceholdersForTagsArchive) GetOldTags() []string {
	if x != nil {
		return x.OldTags
	}
	return nil
}

type CommandTemplateSlideSetPlaceholderForTagArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super         *CommandSlideSetPlaceholdersForTagsArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	PlaceholderId *UUID                                      `protobuf:"bytes,2,req,name=placeholder_id,json=placeholderId" json:"placeholder_id,omitempty"`
	Tag           *string                                    `protobuf:"bytes,3,opt,name=tag" json:"tag,omitempty"`
}

func (x *CommandTemplateSlideSetPlaceholderForTagArchive) Reset() {
	*x = CommandTemplateSlideSetPlaceholderForTagArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandTemplateSlideSetPlaceholderForTagArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandTemplateSlideSetPlaceholderForTagArchive) ProtoMessage() {}

func (x *CommandTemplateSlideSetPlaceholderForTagArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandTemplateSlideSetPlaceholderForTagArchive.ProtoReflect.Descriptor instead.
func (*CommandTemplateSlideSetPlaceholderForTagArchive) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{3}
}

func (x *CommandTemplateSlideSetPlaceholderForTagArchive) GetSuper() *CommandSlideSetPlaceholdersForTagsArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandTemplateSlideSetPlaceholderForTagArchive) GetPlaceholderId() *UUID {
	if x != nil {
		return x.PlaceholderId
	}
	return nil
}

func (x *CommandTemplateSlideSetPlaceholderForTagArchive) GetTag() string {
	if x != nil && x.Tag != nil {
		return *x.Tag
	}
	return ""
}

type CommandSlidePropagateSetPlaceholderForTagArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super         *CommandSlideSetPlaceholdersForTagsArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	PlaceholderId *UUID                                      `protobuf:"bytes,2,req,name=placeholder_id,json=placeholderId" json:"placeholder_id,omitempty"`
	OriginalId    *UUID                                      `protobuf:"bytes,3,req,name=original_id,json=originalId" json:"original_id,omitempty"`
}

func (x *CommandSlidePropagateSetPlaceholderForTagArchive) Reset() {
	*x = CommandSlidePropagateSetPlaceholderForTagArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSlidePropagateSetPlaceholderForTagArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSlidePropagateSetPlaceholderForTagArchive) ProtoMessage() {}

func (x *CommandSlidePropagateSetPlaceholderForTagArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSlidePropagateSetPlaceholderForTagArchive.ProtoReflect.Descriptor instead.
func (*CommandSlidePropagateSetPlaceholderForTagArchive) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{4}
}

func (x *CommandSlidePropagateSetPlaceholderForTagArchive) GetSuper() *CommandSlideSetPlaceholdersForTagsArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandSlidePropagateSetPlaceholderForTagArchive) GetPlaceholderId() *UUID {
	if x != nil {
		return x.PlaceholderId
	}
	return nil
}

func (x *CommandSlidePropagateSetPlaceholderForTagArchive) GetOriginalId() *UUID {
	if x != nil {
		return x.OriginalId
	}
	return nil
}

type CommandSlideRemoveDrawableArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                                   *CommandArchive       `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	SlideId                                 *UUID                 `protobuf:"bytes,2,req,name=slide_id,json=slideId" json:"slide_id,omitempty"`
	SortedDrawables                         []*Reference          `protobuf:"bytes,3,rep,name=sortedDrawables" json:"sortedDrawables,omitempty"`
	ArgsList                                *MixedIdOperationArgs `protobuf:"bytes,4,req,name=args_list,json=argsList" json:"args_list,omitempty"`
	DrawableIndexesForUndo                  []uint32              `protobuf:"varint,10,rep,name=drawable_indexes_for_undo,json=drawableIndexesForUndo" json:"drawable_indexes_for_undo,omitempty"`
	PlaceholderTags                         []string              `protobuf:"bytes,5,rep,name=placeholderTags" json:"placeholderTags,omitempty"`
	InstructionalTextList                   []string              `protobuf:"bytes,11,rep,name=instructional_text_list,json=instructionalTextList" json:"instructional_text_list,omitempty"`
	InsertBuildDescriptions                 []*Reference          `protobuf:"bytes,6,rep,name=insert_build_descriptions,json=insertBuildDescriptions" json:"insert_build_descriptions,omitempty"`
	RemoveBuildDescriptions                 []*Reference          `protobuf:"bytes,7,rep,name=remove_build_descriptions,json=removeBuildDescriptions" json:"remove_build_descriptions,omitempty"`
	DrawablesUsingObjectPlaceholderGeometry []*Reference          `protobuf:"bytes,8,rep,name=drawables_using_object_placeholder_geometry,json=drawablesUsingObjectPlaceholderGeometry" json:"drawables_using_object_placeholder_geometry,omitempty"`
	InverseInsertHyperlinkCommands          []*Reference          `protobuf:"bytes,9,rep,name=inverse_insert_hyperlink_commands,json=inverseInsertHyperlinkCommands" json:"inverse_insert_hyperlink_commands,omitempty"`
}

func (x *CommandSlideRemoveDrawableArchive) Reset() {
	*x = CommandSlideRemoveDrawableArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSlideRemoveDrawableArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSlideRemoveDrawableArchive) ProtoMessage() {}

func (x *CommandSlideRemoveDrawableArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSlideRemoveDrawableArchive.ProtoReflect.Descriptor instead.
func (*CommandSlideRemoveDrawableArchive) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{5}
}

func (x *CommandSlideRemoveDrawableArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandSlideRemoveDrawableArchive) GetSlideId() *UUID {
	if x != nil {
		return x.SlideId
	}
	return nil
}

func (x *CommandSlideRemoveDrawableArchive) GetSortedDrawables() []*Reference {
	if x != nil {
		return x.SortedDrawables
	}
	return nil
}

func (x *CommandSlideRemoveDrawableArchive) GetArgsList() *MixedIdOperationArgs {
	if x != nil {
		return x.ArgsList
	}
	return nil
}

func (x *CommandSlideRemoveDrawableArchive) GetDrawableIndexesForUndo() []uint32 {
	if x != nil {
		return x.DrawableIndexesForUndo
	}
	return nil
}

func (x *CommandSlideRemoveDrawableArchive) GetPlaceholderTags() []string {
	if x != nil {
		return x.PlaceholderTags
	}
	return nil
}

func (x *CommandSlideRemoveDrawableArchive) GetInstructionalTextList() []string {
	if x != nil {
		return x.InstructionalTextList
	}
	return nil
}

func (x *CommandSlideRemoveDrawableArchive) GetInsertBuildDescriptions() []*Reference {
	if x != nil {
		return x.InsertBuildDescriptions
	}
	return nil
}

func (x *CommandSlideRemoveDrawableArchive) GetRemoveBuildDescriptions() []*Reference {
	if x != nil {
		return x.RemoveBuildDescriptions
	}
	return nil
}

func (x *CommandSlideRemoveDrawableArchive) GetDrawablesUsingObjectPlaceholderGeometry() []*Reference {
	if x != nil {
		return x.DrawablesUsingObjectPlaceholderGeometry
	}
	return nil
}

func (x *CommandSlideRemoveDrawableArchive) GetInverseInsertHyperlinkCommands() []*Reference {
	if x != nil {
		return x.InverseInsertHyperlinkCommands
	}
	return nil
}

type CommandSlideMoveDrawableZOrderArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                         *CommandArchive             `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	OldOrderedInfos               []*Reference                `protobuf:"bytes,4,rep,name=old_ordered_infos,json=oldOrderedInfos" json:"old_ordered_infos,omitempty"`
	ArgsList                      []*RearrangeIdOperationArgs `protobuf:"bytes,6,rep,name=args_list,json=argsList" json:"args_list,omitempty"`
	SlideId                       *UUID                       `protobuf:"bytes,7,req,name=slide_id,json=slideId" json:"slide_id,omitempty"`
	OldOrderedInfosOnSlideForUndo []*Reference                `protobuf:"bytes,8,rep,name=old_ordered_infos_on_slide_for_undo,json=oldOrderedInfosOnSlideForUndo" json:"old_ordered_infos_on_slide_for_undo,omitempty"`
}

func (x *CommandSlideMoveDrawableZOrderArchive) Reset() {
	*x = CommandSlideMoveDrawableZOrderArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSlideMoveDrawableZOrderArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSlideMoveDrawableZOrderArchive) ProtoMessage() {}

func (x *CommandSlideMoveDrawableZOrderArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSlideMoveDrawableZOrderArchive.ProtoReflect.Descriptor instead.
func (*CommandSlideMoveDrawableZOrderArchive) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{6}
}

func (x *CommandSlideMoveDrawableZOrderArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandSlideMoveDrawableZOrderArchive) GetOldOrderedInfos() []*Reference {
	if x != nil {
		return x.OldOrderedInfos
	}
	return nil
}

func (x *CommandSlideMoveDrawableZOrderArchive) GetArgsList() []*RearrangeIdOperationArgs {
	if x != nil {
		return x.ArgsList
	}
	return nil
}

func (x *CommandSlideMoveDrawableZOrderArchive) GetSlideId() *UUID {
	if x != nil {
		return x.SlideId
	}
	return nil
}

func (x *CommandSlideMoveDrawableZOrderArchive) GetOldOrderedInfosOnSlideForUndo() []*Reference {
	if x != nil {
		return x.OldOrderedInfosOnSlideForUndo
	}
	return nil
}

type CommandSlideNodeSetPropertyArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super           *CommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	SlideNodeIdPath *UUIDPath       `protobuf:"bytes,2,req,name=slide_node_id_path,json=slideNodeIdPath" json:"slide_node_id_path,omitempty"`
	Property        *string         `protobuf:"bytes,3,req,name=property" json:"property,omitempty"`
	OldValue        *bool           `protobuf:"varint,4,req,name=old_value,json=oldValue" json:"old_value,omitempty"`
	Value           *bool           `protobuf:"varint,5,req,name=value" json:"value,omitempty"`
}

func (x *CommandSlideNodeSetPropertyArchive) Reset() {
	*x = CommandSlideNodeSetPropertyArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSlideNodeSetPropertyArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSlideNodeSetPropertyArchive) ProtoMessage() {}

func (x *CommandSlideNodeSetPropertyArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSlideNodeSetPropertyArchive.ProtoReflect.Descriptor instead.
func (*CommandSlideNodeSetPropertyArchive) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{7}
}

func (x *CommandSlideNodeSetPropertyArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandSlideNodeSetPropertyArchive) GetSlideNodeIdPath() *UUIDPath {
	if x != nil {
		return x.SlideNodeIdPath
	}
	return nil
}

func (x *CommandSlideNodeSetPropertyArchive) GetProperty() string {
	if x != nil && x.Property != nil {
		return *x.Property
	}
	return ""
}

func (x *CommandSlideNodeSetPropertyArchive) GetOldValue() bool {
	if x != nil && x.OldValue != nil {
		return *x.OldValue
	}
	return false
}

func (x *CommandSlideNodeSetPropertyArchive) GetValue() bool {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return false
}

type CommandSlideNodeSetViewStatePropertyArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super           *CommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	SlideNodeIdPath *UUIDPath       `protobuf:"bytes,2,req,name=slide_node_id_path,json=slideNodeIdPath" json:"slide_node_id_path,omitempty"`
	Property        *string         `protobuf:"bytes,3,req,name=property" json:"property,omitempty"`
	OldValue        *bool           `protobuf:"varint,4,req,name=old_value,json=oldValue" json:"old_value,omitempty"`
	Value           *bool           `protobuf:"varint,5,req,name=value" json:"value,omitempty"`
}

func (x *CommandSlideNodeSetViewStatePropertyArchive) Reset() {
	*x = CommandSlideNodeSetViewStatePropertyArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSlideNodeSetViewStatePropertyArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSlideNodeSetViewStatePropertyArchive) ProtoMessage() {}

func (x *CommandSlideNodeSetViewStatePropertyArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSlideNodeSetViewStatePropertyArchive.ProtoReflect.Descriptor instead.
func (*CommandSlideNodeSetViewStatePropertyArchive) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{8}
}

func (x *CommandSlideNodeSetViewStatePropertyArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandSlideNodeSetViewStatePropertyArchive) GetSlideNodeIdPath() *UUIDPath {
	if x != nil {
		return x.SlideNodeIdPath
	}
	return nil
}

func (x *CommandSlideNodeSetViewStatePropertyArchive) GetProperty() string {
	if x != nil && x.Property != nil {
		return *x.Property
	}
	return ""
}

func (x *CommandSlideNodeSetViewStatePropertyArchive) GetOldValue() bool {
	if x != nil && x.OldValue != nil {
		return *x.OldValue
	}
	return false
}

func (x *CommandSlideNodeSetViewStatePropertyArchive) GetValue() bool {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return false
}

type CommandSlideSetBackgroundFillArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super       *CommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	SlideIdPath *UUIDPath       `protobuf:"bytes,2,req,name=slide_id_path,json=slideIdPath" json:"slide_id_path,omitempty"`
	OldFill     *FillArchive    `protobuf:"bytes,3,opt,name=old_fill,json=oldFill" json:"old_fill,omitempty"`
	NewFill     *FillArchive    `protobuf:"bytes,4,req,name=new_fill,json=newFill" json:"new_fill,omitempty"`
}

func (x *CommandSlideSetBackgroundFillArchive) Reset() {
	*x = CommandSlideSetBackgroundFillArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSlideSetBackgroundFillArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSlideSetBackgroundFillArchive) ProtoMessage() {}

func (x *CommandSlideSetBackgroundFillArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSlideSetBackgroundFillArchive.ProtoReflect.Descriptor instead.
func (*CommandSlideSetBackgroundFillArchive) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{9}
}

func (x *CommandSlideSetBackgroundFillArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandSlideSetBackgroundFillArchive) GetSlideIdPath() *UUIDPath {
	if x != nil {
		return x.SlideIdPath
	}
	return nil
}

func (x *CommandSlideSetBackgroundFillArchive) GetOldFill() *FillArchive {
	if x != nil {
		return x.OldFill
	}
	return nil
}

func (x *CommandSlideSetBackgroundFillArchive) GetNewFill() *FillArchive {
	if x != nil {
		return x.NewFill
	}
	return nil
}

type CommandSlideSetStyleArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super         *CommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	SlideIdPath   *UUIDPath       `protobuf:"bytes,2,req,name=slide_id_path,json=slideIdPath" json:"slide_id_path,omitempty"`
	SlideStyle    *Reference      `protobuf:"bytes,3,req,name=slide_style,json=slideStyle" json:"slide_style,omitempty"`
	OldSlideStyle *Reference      `protobuf:"bytes,4,opt,name=old_slide_style,json=oldSlideStyle" json:"old_slide_style,omitempty"`
}

func (x *CommandSlideSetStyleArchive) Reset() {
	*x = CommandSlideSetStyleArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSlideSetStyleArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSlideSetStyleArchive) ProtoMessage() {}

func (x *CommandSlideSetStyleArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSlideSetStyleArchive.ProtoReflect.Descriptor instead.
func (*CommandSlideSetStyleArchive) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{10}
}

func (x *CommandSlideSetStyleArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandSlideSetStyleArchive) GetSlideIdPath() *UUIDPath {
	if x != nil {
		return x.SlideIdPath
	}
	return nil
}

func (x *CommandSlideSetStyleArchive) GetSlideStyle() *Reference {
	if x != nil {
		return x.SlideStyle
	}
	return nil
}

func (x *CommandSlideSetStyleArchive) GetOldSlideStyle() *Reference {
	if x != nil {
		return x.OldSlideStyle
	}
	return nil
}

type CommandShowMarkOutOfSyncRecordingArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                   *CommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Show                    *Reference      `protobuf:"bytes,2,req,name=show" json:"show,omitempty"`
	OldRecording            *Reference      `protobuf:"bytes,3,opt,name=old_recording,json=oldRecording" json:"old_recording,omitempty"`
	OldIsRecordingOutOfSync *bool           `protobuf:"varint,4,opt,name=old_is_recording_out_of_sync,json=oldIsRecordingOutOfSync,def=0" json:"old_is_recording_out_of_sync,omitempty"`
	NewIsRecordingOutOfSync *bool           `protobuf:"varint,5,opt,name=new_is_recording_out_of_sync,json=newIsRecordingOutOfSync,def=0" json:"new_is_recording_out_of_sync,omitempty"`
	OldModificationDate     *Date           `protobuf:"bytes,6,opt,name=old_modification_date,json=oldModificationDate" json:"old_modification_date,omitempty"`
	NewModificationDate     *Date           `protobuf:"bytes,7,opt,name=new_modification_date,json=newModificationDate" json:"new_modification_date,omitempty"`
}

// Default values for CommandShowMarkOutOfSyncRecordingArchive fields.
const (
	Default_CommandShowMarkOutOfSyncRecordingArchive_OldIsRecordingOutOfSync = bool(false)
	Default_CommandShowMarkOutOfSyncRecordingArchive_NewIsRecordingOutOfSync = bool(false)
)

func (x *CommandShowMarkOutOfSyncRecordingArchive) Reset() {
	*x = CommandShowMarkOutOfSyncRecordingArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandShowMarkOutOfSyncRecordingArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandShowMarkOutOfSyncRecordingArchive) ProtoMessage() {}

func (x *CommandShowMarkOutOfSyncRecordingArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandShowMarkOutOfSyncRecordingArchive.ProtoReflect.Descriptor instead.
func (*CommandShowMarkOutOfSyncRecordingArchive) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{11}
}

func (x *CommandShowMarkOutOfSyncRecordingArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandShowMarkOutOfSyncRecordingArchive) GetShow() *Reference {
	if x != nil {
		return x.Show
	}
	return nil
}

func (x *CommandShowMarkOutOfSyncRecordingArchive) GetOldRecording() *Reference {
	if x != nil {
		return x.OldRecording
	}
	return nil
}

func (x *CommandShowMarkOutOfSyncRecordingArchive) GetOldIsRecordingOutOfSync() bool {
	if x != nil && x.OldIsRecordingOutOfSync != nil {
		return *x.OldIsRecordingOutOfSync
	}
	return Default_CommandShowMarkOutOfSyncRecordingArchive_OldIsRecordingOutOfSync
}

func (x *CommandShowMarkOutOfSyncRecordingArchive) GetNewIsRecordingOutOfSync() bool {
	if x != nil && x.NewIsRecordingOutOfSync != nil {
		return *x.NewIsRecordingOutOfSync
	}
	return Default_CommandShowMarkOutOfSyncRecordingArchive_NewIsRecordingOutOfSync
}

func (x *CommandShowMarkOutOfSyncRecordingArchive) GetOldModificationDate() *Date {
	if x != nil {
		return x.OldModificationDate
	}
	return nil
}

func (x *CommandShowMarkOutOfSyncRecordingArchive) GetNewModificationDate() *Date {
	if x != nil {
		return x.NewModificationDate
	}
	return nil
}

type CommandShowMarkOutOfSyncRecordingIfNeededArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super          *CommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	OutOfSyncToken *UUID           `protobuf:"bytes,2,opt,name=out_of_sync_token,json=outOfSyncToken" json:"out_of_sync_token,omitempty"`
}

func (x *CommandShowMarkOutOfSyncRecordingIfNeededArchive) Reset() {
	*x = CommandShowMarkOutOfSyncRecordingIfNeededArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandShowMarkOutOfSyncRecordingIfNeededArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandShowMarkOutOfSyncRecordingIfNeededArchive) ProtoMessage() {}

func (x *CommandShowMarkOutOfSyncRecordingIfNeededArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandShowMarkOutOfSyncRecordingIfNeededArchive.ProtoReflect.Descriptor instead.
func (*CommandShowMarkOutOfSyncRecordingIfNeededArchive) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{12}
}

func (x *CommandShowMarkOutOfSyncRecordingIfNeededArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandShowMarkOutOfSyncRecordingIfNeededArchive) GetOutOfSyncToken() *UUID {
	if x != nil {
		return x.OutOfSyncToken
	}
	return nil
}

type CommandShowRemoveRecordingArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super        *CommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Show         *Reference      `protobuf:"bytes,2,req,name=show" json:"show,omitempty"`
	OldRecording *Reference      `protobuf:"bytes,3,opt,name=old_recording,json=oldRecording" json:"old_recording,omitempty"`
}

func (x *CommandShowRemoveRecordingArchive) Reset() {
	*x = CommandShowRemoveRecordingArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandShowRemoveRecordingArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandShowRemoveRecordingArchive) ProtoMessage() {}

func (x *CommandShowRemoveRecordingArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandShowRemoveRecordingArchive.ProtoReflect.Descriptor instead.
func (*CommandShowRemoveRecordingArchive) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{13}
}

func (x *CommandShowRemoveRecordingArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandShowRemoveRecordingArchive) GetShow() *Reference {
	if x != nil {
		return x.Show
	}
	return nil
}

func (x *CommandShowRemoveRecordingArchive) GetOldRecording() *Reference {
	if x != nil {
		return x.OldRecording
	}
	return nil
}

type CommandShowReplaceRecordingArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                *CommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Show                 *Reference      `protobuf:"bytes,2,req,name=show" json:"show,omitempty"`
	ReplacementRecording *Reference      `protobuf:"bytes,3,req,name=replacement_recording,json=replacementRecording" json:"replacement_recording,omitempty"`
	OldRecording         *Reference      `protobuf:"bytes,5,opt,name=old_recording,json=oldRecording" json:"old_recording,omitempty"`
}

func (x *CommandShowReplaceRecordingArchive) Reset() {
	*x = CommandShowReplaceRecordingArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandShowReplaceRecordingArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandShowReplaceRecordingArchive) ProtoMessage() {}

func (x *CommandShowReplaceRecordingArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandShowReplaceRecordingArchive.ProtoReflect.Descriptor instead.
func (*CommandShowReplaceRecordingArchive) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{14}
}

func (x *CommandShowReplaceRecordingArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandShowReplaceRecordingArchive) GetShow() *Reference {
	if x != nil {
		return x.Show
	}
	return nil
}

func (x *CommandShowReplaceRecordingArchive) GetReplacementRecording() *Reference {
	if x != nil {
		return x.ReplacementRecording
	}
	return nil
}

func (x *CommandShowReplaceRecordingArchive) GetOldRecording() *Reference {
	if x != nil {
		return x.OldRecording
	}
	return nil
}

type CommandShowSetValueArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super    *CommandArchive                           `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Show     *Reference                                `protobuf:"bytes,2,req,name=show" json:"show,omitempty"`
	Property *string                                   `protobuf:"bytes,3,req,name=property" json:"property,omitempty"`
	OldValue *CommandShowSetValueArchive_PropertyValue `protobuf:"bytes,4,req,name=old_value,json=oldValue" json:"old_value,omitempty"`
	NewValue *CommandShowSetValueArchive_PropertyValue `protobuf:"bytes,5,req,name=new_value,json=newValue" json:"new_value,omitempty"`
}

func (x *CommandShowSetValueArchive) Reset() {
	*x = CommandShowSetValueArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandShowSetValueArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandShowSetValueArchive) ProtoMessage() {}

func (x *CommandShowSetValueArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandShowSetValueArchive.ProtoReflect.Descriptor instead.
func (*CommandShowSetValueArchive) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{15}
}

func (x *CommandShowSetValueArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandShowSetValueArchive) GetShow() *Reference {
	if x != nil {
		return x.Show
	}
	return nil
}

func (x *CommandShowSetValueArchive) GetProperty() string {
	if x != nil && x.Property != nil {
		return *x.Property
	}
	return ""
}

func (x *CommandShowSetValueArchive) GetOldValue() *CommandShowSetValueArchive_PropertyValue {
	if x != nil {
		return x.OldValue
	}
	return nil
}

func (x *CommandShowSetValueArchive) GetNewValue() *CommandShowSetValueArchive_PropertyValue {
	if x != nil {
		return x.NewValue
	}
	return nil
}

type CommandShowInsertSlideArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                                   *CommandArchive                     `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	SlideNodesBeingInserted                 []*Reference                        `protobuf:"bytes,2,rep,name=slide_nodes_being_inserted,json=slideNodesBeingInserted" json:"slide_nodes_being_inserted,omitempty"`
	WorkingSlideNodesBeingInserted          []*Reference                        `protobuf:"bytes,14,rep,name=working_slide_nodes_being_inserted,json=workingSlideNodesBeingInserted" json:"working_slide_nodes_being_inserted,omitempty"`
	InsertedArgsList                        []*AddIdOperationArgs               `protobuf:"bytes,3,rep,name=inserted_args_list,json=insertedArgsList" json:"inserted_args_list,omitempty"`
	IdsOfSlideNodesWithDepthChanges         []*UUID                             `protobuf:"bytes,4,rep,name=ids_of_slide_nodes_with_depth_changes,json=idsOfSlideNodesWithDepthChanges" json:"ids_of_slide_nodes_with_depth_changes,omitempty"`
	DepthsOfSlideNodesWithDepthChanges      []uint32                            `protobuf:"varint,5,rep,name=depths_of_slide_nodes_with_depth_changes,json=depthsOfSlideNodesWithDepthChanges" json:"depths_of_slide_nodes_with_depth_changes,omitempty"`
	OldDepthsOfSlideNodesWithDepthChanges   []uint32                            `protobuf:"varint,6,rep,name=old_depths_of_slide_nodes_with_depth_changes,json=oldDepthsOfSlideNodesWithDepthChanges" json:"old_depths_of_slide_nodes_with_depth_changes,omitempty"`
	SlideNodesForDepthFixUp                 []*Reference                        `protobuf:"bytes,7,rep,name=slide_nodes_for_depth_fix_up,json=slideNodesForDepthFixUp" json:"slide_nodes_for_depth_fix_up,omitempty"`
	DepthsOfSlideNodesForDepthFixUp         []uint32                            `protobuf:"varint,8,rep,name=depths_of_slide_nodes_for_depth_fix_up,json=depthsOfSlideNodesForDepthFixUp" json:"depths_of_slide_nodes_for_depth_fix_up,omitempty"`
	OldDepthsOfSlideNodesForDepthFixUp      []uint32                            `protobuf:"varint,9,rep,name=old_depths_of_slide_nodes_for_depth_fix_up,json=oldDepthsOfSlideNodesForDepthFixUp" json:"old_depths_of_slide_nodes_for_depth_fix_up,omitempty"`
	Kind                                    *CommandShowInsertSlideArchive_Kind `protobuf:"varint,10,opt,name=kind,enum=KN.CommandShowInsertSlideArchive_Kind,def=0" json:"kind,omitempty"`
	TemplateSlideNodesBeingInserted         []*Reference                        `protobuf:"bytes,11,rep,name=template_slide_nodes_being_inserted,json=templateSlideNodesBeingInserted" json:"template_slide_nodes_being_inserted,omitempty"`
	CustomFormatKeys                        []*UUID                             `protobuf:"bytes,12,rep,name=custom_format_keys,json=customFormatKeys" json:"custom_format_keys,omitempty"`
	CollapsedStateOfSlideNodesBeingInserted []bool                              `protobuf:"varint,13,rep,name=collapsed_state_of_slide_nodes_being_inserted,json=collapsedStateOfSlideNodesBeingInserted" json:"collapsed_state_of_slide_nodes_being_inserted,omitempty"`
	UndoArchive                             *Reference                          `protobuf:"bytes,15,opt,name=undo_archive,json=undoArchive" json:"undo_archive,omitempty"`
}

// Default values for CommandShowInsertSlideArchive fields.
const (
	Default_CommandShowInsertSlideArchive_Kind = CommandShowInsertSlideArchive_kKindInsertSlide
)

func (x *CommandShowInsertSlideArchive) Reset() {
	*x = CommandShowInsertSlideArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandShowInsertSlideArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandShowInsertSlideArchive) ProtoMessage() {}

func (x *CommandShowInsertSlideArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandShowInsertSlideArchive.ProtoReflect.Descriptor instead.
func (*CommandShowInsertSlideArchive) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{16}
}

func (x *CommandShowInsertSlideArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandShowInsertSlideArchive) GetSlideNodesBeingInserted() []*Reference {
	if x != nil {
		return x.SlideNodesBeingInserted
	}
	return nil
}

func (x *CommandShowInsertSlideArchive) GetWorkingSlideNodesBeingInserted() []*Reference {
	if x != nil {
		return x.WorkingSlideNodesBeingInserted
	}
	return nil
}

func (x *CommandShowInsertSlideArchive) GetInsertedArgsList() []*AddIdOperationArgs {
	if x != nil {
		return x.InsertedArgsList
	}
	return nil
}

func (x *CommandShowInsertSlideArchive) GetIdsOfSlideNodesWithDepthChanges() []*UUID {
	if x != nil {
		return x.IdsOfSlideNodesWithDepthChanges
	}
	return nil
}

func (x *CommandShowInsertSlideArchive) GetDepthsOfSlideNodesWithDepthChanges() []uint32 {
	if x != nil {
		return x.DepthsOfSlideNodesWithDepthChanges
	}
	return nil
}

func (x *CommandShowInsertSlideArchive) GetOldDepthsOfSlideNodesWithDepthChanges() []uint32 {
	if x != nil {
		return x.OldDepthsOfSlideNodesWithDepthChanges
	}
	return nil
}

func (x *CommandShowInsertSlideArchive) GetSlideNodesForDepthFixUp() []*Reference {
	if x != nil {
		return x.SlideNodesForDepthFixUp
	}
	return nil
}

func (x *CommandShowInsertSlideArchive) GetDepthsOfSlideNodesForDepthFixUp() []uint32 {
	if x != nil {
		return x.DepthsOfSlideNodesForDepthFixUp
	}
	return nil
}

func (x *CommandShowInsertSlideArchive) GetOldDepthsOfSlideNodesForDepthFixUp() []uint32 {
	if x != nil {
		return x.OldDepthsOfSlideNodesForDepthFixUp
	}
	return nil
}

func (x *CommandShowInsertSlideArchive) GetKind() CommandShowInsertSlideArchive_Kind {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return Default_CommandShowInsertSlideArchive_Kind
}

func (x *CommandShowInsertSlideArchive) GetTemplateSlideNodesBeingInserted() []*Reference {
	if x != nil {
		return x.TemplateSlideNodesBeingInserted
	}
	return nil
}

func (x *CommandShowInsertSlideArchive) GetCustomFormatKeys() []*UUID {
	if x != nil {
		return x.CustomFormatKeys
	}
	return nil
}

func (x *CommandShowInsertSlideArchive) GetCollapsedStateOfSlideNodesBeingInserted() []bool {
	if x != nil {
		return x.CollapsedStateOfSlideNodesBeingInserted
	}
	return nil
}

func (x *CommandShowInsertSlideArchive) GetUndoArchive() *Reference {
	if x != nil {
		return x.UndoArchive
	}
	return nil
}

type CommandShowMoveSlideArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                                 *CommandArchive             `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	SlideNodesBeingMovedLinearly          []*Reference                `protobuf:"bytes,2,rep,name=slide_nodes_being_moved_linearly,json=slideNodesBeingMovedLinearly" json:"slide_nodes_being_moved_linearly,omitempty"`
	RearrangedArgsList                    []*RearrangeIdOperationArgs `protobuf:"bytes,3,rep,name=rearranged_args_list,json=rearrangedArgsList" json:"rearranged_args_list,omitempty"`
	IdsOfSlideNodesWithDepthChanges       []*UUID                     `protobuf:"bytes,4,rep,name=ids_of_slide_nodes_with_depth_changes,json=idsOfSlideNodesWithDepthChanges" json:"ids_of_slide_nodes_with_depth_changes,omitempty"`
	DepthsOfSlideNodesWithDepthChanges    []uint32                    `protobuf:"varint,5,rep,name=depths_of_slide_nodes_with_depth_changes,json=depthsOfSlideNodesWithDepthChanges" json:"depths_of_slide_nodes_with_depth_changes,omitempty"`
	OldDepthsOfSlideNodesWithDepthChanges []uint32                    `protobuf:"varint,6,rep,name=old_depths_of_slide_nodes_with_depth_changes,json=oldDepthsOfSlideNodesWithDepthChanges" json:"old_depths_of_slide_nodes_with_depth_changes,omitempty"`
	SlideNodesForDepthFixUp               []*Reference                `protobuf:"bytes,7,rep,name=slide_nodes_for_depth_fix_up,json=slideNodesForDepthFixUp" json:"slide_nodes_for_depth_fix_up,omitempty"`
	DepthsOfSlideNodesForDepthFixUp       []uint32                    `protobuf:"varint,8,rep,name=depths_of_slide_nodes_for_depth_fix_up,json=depthsOfSlideNodesForDepthFixUp" json:"depths_of_slide_nodes_for_depth_fix_up,omitempty"`
	OldDepthsOfSlideNodesForDepthFixUp    []uint32                    `protobuf:"varint,9,rep,name=old_depths_of_slide_nodes_for_depth_fix_up,json=oldDepthsOfSlideNodesForDepthFixUp" json:"old_depths_of_slide_nodes_for_depth_fix_up,omitempty"`
}

func (x *CommandShowMoveSlideArchive) Reset() {
	*x = CommandShowMoveSlideArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandShowMoveSlideArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandShowMoveSlideArchive) ProtoMessage() {}

func (x *CommandShowMoveSlideArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandShowMoveSlideArchive.ProtoReflect.Descriptor instead.
func (*CommandShowMoveSlideArchive) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{17}
}

func (x *CommandShowMoveSlideArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandShowMoveSlideArchive) GetSlideNodesBeingMovedLinearly() []*Reference {
	if x != nil {
		return x.SlideNodesBeingMovedLinearly
	}
	return nil
}

func (x *CommandShowMoveSlideArchive) GetRearrangedArgsList() []*RearrangeIdOperationArgs {
	if x != nil {
		return x.RearrangedArgsList
	}
	return nil
}

func (x *CommandShowMoveSlideArchive) GetIdsOfSlideNodesWithDepthChanges() []*UUID {
	if x != nil {
		return x.IdsOfSlideNodesWithDepthChanges
	}
	return nil
}

func (x *CommandShowMoveSlideArchive) GetDepthsOfSlideNodesWithDepthChanges() []uint32 {
	if x != nil {
		return x.DepthsOfSlideNodesWithDepthChanges
	}
	return nil
}

func (x *CommandShowMoveSlideArchive) GetOldDepthsOfSlideNodesWithDepthChanges() []uint32 {
	if x != nil {
		return x.OldDepthsOfSlideNodesWithDepthChanges
	}
	return nil
}

func (x *CommandShowMoveSlideArchive) GetSlideNodesForDepthFixUp() []*Reference {
	if x != nil {
		return x.SlideNodesForDepthFixUp
	}
	return nil
}

func (x *CommandShowMoveSlideArchive) GetDepthsOfSlideNodesForDepthFixUp() []uint32 {
	if x != nil {
		return x.DepthsOfSlideNodesForDepthFixUp
	}
	return nil
}

func (x *CommandShowMoveSlideArchive) GetOldDepthsOfSlideNodesForDepthFixUp() []uint32 {
	if x != nil {
		return x.OldDepthsOfSlideNodesForDepthFixUp
	}
	return nil
}

type CommandShowRemoveSlideArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                                  *CommandArchive          `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	SlideNodesBeingRemoved                 []*Reference             `protobuf:"bytes,2,rep,name=slide_nodes_being_removed,json=slideNodesBeingRemoved" json:"slide_nodes_being_removed,omitempty"`
	RemovedArgsList                        []*RemoveIdOperationArgs `protobuf:"bytes,3,rep,name=removed_args_list,json=removedArgsList" json:"removed_args_list,omitempty"`
	IdsOfSlideNodesWithDepthChanges        []*UUID                  `protobuf:"bytes,4,rep,name=ids_of_slide_nodes_with_depth_changes,json=idsOfSlideNodesWithDepthChanges" json:"ids_of_slide_nodes_with_depth_changes,omitempty"`
	DepthsOfSlideNodesWithDepthChanges     []uint32                 `protobuf:"varint,5,rep,name=depths_of_slide_nodes_with_depth_changes,json=depthsOfSlideNodesWithDepthChanges" json:"depths_of_slide_nodes_with_depth_changes,omitempty"`
	OldDepthsOfSlideNodesWithDepthChanges  []uint32                 `protobuf:"varint,6,rep,name=old_depths_of_slide_nodes_with_depth_changes,json=oldDepthsOfSlideNodesWithDepthChanges" json:"old_depths_of_slide_nodes_with_depth_changes,omitempty"`
	SlideNodesForDepthFixUp                []*Reference             `protobuf:"bytes,7,rep,name=slide_nodes_for_depth_fix_up,json=slideNodesForDepthFixUp" json:"slide_nodes_for_depth_fix_up,omitempty"`
	DepthsOfSlideNodesForDepthFixUp        []uint32                 `protobuf:"varint,8,rep,name=depths_of_slide_nodes_for_depth_fix_up,json=depthsOfSlideNodesForDepthFixUp" json:"depths_of_slide_nodes_for_depth_fix_up,omitempty"`
	OldDepthsOfSlideNodesForDepthFixUp     []uint32                 `protobuf:"varint,9,rep,name=old_depths_of_slide_nodes_for_depth_fix_up,json=oldDepthsOfSlideNodesForDepthFixUp" json:"old_depths_of_slide_nodes_for_depth_fix_up,omitempty"`
	CollapsedStateOfSlideNodesBeingRemoved []bool                   `protobuf:"varint,11,rep,name=collapsed_state_of_slide_nodes_being_removed,json=collapsedStateOfSlideNodesBeingRemoved" json:"collapsed_state_of_slide_nodes_being_removed,omitempty"`
}

func (x *CommandShowRemoveSlideArchive) Reset() {
	*x = CommandShowRemoveSlideArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandShowRemoveSlideArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandShowRemoveSlideArchive) ProtoMessage() {}

func (x *CommandShowRemoveSlideArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandShowRemoveSlideArchive.ProtoReflect.Descriptor instead.
func (*CommandShowRemoveSlideArchive) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{18}
}

func (x *CommandShowRemoveSlideArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandShowRemoveSlideArchive) GetSlideNodesBeingRemoved() []*Reference {
	if x != nil {
		return x.SlideNodesBeingRemoved
	}
	return nil
}

func (x *CommandShowRemoveSlideArchive) GetRemovedArgsList() []*RemoveIdOperationArgs {
	if x != nil {
		return x.RemovedArgsList
	}
	return nil
}

func (x *CommandShowRemoveSlideArchive) GetIdsOfSlideNodesWithDepthChanges() []*UUID {
	if x != nil {
		return x.IdsOfSlideNodesWithDepthChanges
	}
	return nil
}

func (x *CommandShowRemoveSlideArchive) GetDepthsOfSlideNodesWithDepthChanges() []uint32 {
	if x != nil {
		return x.DepthsOfSlideNodesWithDepthChanges
	}
	return nil
}

func (x *CommandShowRemoveSlideArchive) GetOldDepthsOfSlideNodesWithDepthChanges() []uint32 {
	if x != nil {
		return x.OldDepthsOfSlideNodesWithDepthChanges
	}
	return nil
}

func (x *CommandShowRemoveSlideArchive) GetSlideNodesForDepthFixUp() []*Reference {
	if x != nil {
		return x.SlideNodesForDepthFixUp
	}
	return nil
}

func (x *CommandShowRemoveSlideArchive) GetDepthsOfSlideNodesForDepthFixUp() []uint32 {
	if x != nil {
		return x.DepthsOfSlideNodesForDepthFixUp
	}
	return nil
}

func (x *CommandShowRemoveSlideArchive) GetOldDepthsOfSlideNodesForDepthFixUp() []uint32 {
	if x != nil {
		return x.OldDepthsOfSlideNodesForDepthFixUp
	}
	return nil
}

func (x *CommandShowRemoveSlideArchive) GetCollapsedStateOfSlideNodesBeingRemoved() []bool {
	if x != nil {
		return x.CollapsedStateOfSlideNodesBeingRemoved
	}
	return nil
}

type CommandShowChangeThemeArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                   *CommandArchive                                     `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Show                    *Reference                                          `protobuf:"bytes,2,req,name=show" json:"show,omitempty"`
	Theme                   *Reference                                          `protobuf:"bytes,3,req,name=theme" json:"theme,omitempty"`
	OldTheme                *Reference                                          `protobuf:"bytes,4,opt,name=old_theme,json=oldTheme" json:"old_theme,omitempty"`
	TemplateIdentifier      *string                                             `protobuf:"bytes,5,opt,name=template_identifier,json=templateIdentifier" json:"template_identifier,omitempty"`
	OldTemplateIdentifier   *string                                             `protobuf:"bytes,6,opt,name=old_template_identifier,json=oldTemplateIdentifier" json:"old_template_identifier,omitempty"`
	IdentifierToStyleMap    *CommandShowChangeThemeArchive_IdentifierToStyleMap `protobuf:"bytes,7,opt,name=identifier_to_style_map,json=identifierToStyleMap" json:"identifier_to_style_map,omitempty"`
	OldIdentifierToStyleMap *CommandShowChangeThemeArchive_IdentifierToStyleMap `protobuf:"bytes,8,opt,name=old_identifier_to_style_map,json=oldIdentifierToStyleMap" json:"old_identifier_to_style_map,omitempty"`
}

func (x *CommandShowChangeThemeArchive) Reset() {
	*x = CommandShowChangeThemeArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandShowChangeThemeArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandShowChangeThemeArchive) ProtoMessage() {}

func (x *CommandShowChangeThemeArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandShowChangeThemeArchive.ProtoReflect.Descriptor instead.
func (*CommandShowChangeThemeArchive) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{19}
}

func (x *CommandShowChangeThemeArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandShowChangeThemeArchive) GetShow() *Reference {
	if x != nil {
		return x.Show
	}
	return nil
}

func (x *CommandShowChangeThemeArchive) GetTheme() *Reference {
	if x != nil {
		return x.Theme
	}
	return nil
}

func (x *CommandShowChangeThemeArchive) GetOldTheme() *Reference {
	if x != nil {
		return x.OldTheme
	}
	return nil
}

func (x *CommandShowChangeThemeArchive) GetTemplateIdentifier() string {
	if x != nil && x.TemplateIdentifier != nil {
		return *x.TemplateIdentifier
	}
	return ""
}

func (x *CommandShowChangeThemeArchive) GetOldTemplateIdentifier() string {
	if x != nil && x.OldTemplateIdentifier != nil {
		return *x.OldTemplateIdentifier
	}
	return ""
}

func (x *CommandShowChangeThemeArchive) GetIdentifierToStyleMap() *CommandShowChangeThemeArchive_IdentifierToStyleMap {
	if x != nil {
		return x.IdentifierToStyleMap
	}
	return nil
}

func (x *CommandShowChangeThemeArchive) GetOldIdentifierToStyleMap() *CommandShowChangeThemeArchive_IdentifierToStyleMap {
	if x != nil {
		return x.OldIdentifierToStyleMap
	}
	return nil
}

type CommandShowChangeSlideSizeArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *CommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Size  *Size           `protobuf:"bytes,2,req,name=size" json:"size,omitempty"`
}

func (x *CommandShowChangeSlideSizeArchive) Reset() {
	*x = CommandShowChangeSlideSizeArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandShowChangeSlideSizeArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandShowChangeSlideSizeArchive) ProtoMessage() {}

func (x *CommandShowChangeSlideSizeArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandShowChangeSlideSizeArchive.ProtoReflect.Descriptor instead.
func (*CommandShowChangeSlideSizeArchive) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{20}
}

func (x *CommandShowChangeSlideSizeArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandShowChangeSlideSizeArchive) GetSize() *Size {
	if x != nil {
		return x.Size
	}
	return nil
}

type CommandSetThemeCustomEffectTimingCurveArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super         *CommandArchive    `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Name          *string            `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	PathSource    *PathSourceArchive `protobuf:"bytes,3,opt,name=path_source,json=pathSource" json:"path_source,omitempty"`
	OldPathSource *PathSourceArchive `protobuf:"bytes,4,opt,name=old_path_source,json=oldPathSource" json:"old_path_source,omitempty"`
}

func (x *CommandSetThemeCustomEffectTimingCurveArchive) Reset() {
	*x = CommandSetThemeCustomEffectTimingCurveArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSetThemeCustomEffectTimingCurveArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSetThemeCustomEffectTimingCurveArchive) ProtoMessage() {}

func (x *CommandSetThemeCustomEffectTimingCurveArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSetThemeCustomEffectTimingCurveArchive.ProtoReflect.Descriptor instead.
func (*CommandSetThemeCustomEffectTimingCurveArchive) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{21}
}

func (x *CommandSetThemeCustomEffectTimingCurveArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandSetThemeCustomEffectTimingCurveArchive) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CommandSetThemeCustomEffectTimingCurveArchive) GetPathSource() *PathSourceArchive {
	if x != nil {
		return x.PathSource
	}
	return nil
}

func (x *CommandSetThemeCustomEffectTimingCurveArchive) GetOldPathSource() *PathSourceArchive {
	if x != nil {
		return x.OldPathSource
	}
	return nil
}

type CommandMoveTemplatesArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                    *ContainerReorderChildrenCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	TemplateSlides           []*Reference                            `protobuf:"bytes,3,rep,name=template_slides,json=templateSlides" json:"template_slides,omitempty"`
	PreviousIndexesKeys      []*Reference                            `protobuf:"bytes,4,rep,name=previous_indexes_keys,json=previousIndexesKeys" json:"previous_indexes_keys,omitempty"`
	PreviousIndexesValues    []uint32                                `protobuf:"varint,5,rep,name=previous_indexes_values,json=previousIndexesValues" json:"previous_indexes_values,omitempty"`
	FinalTemplateArrangement []*Reference                            `protobuf:"bytes,6,rep,name=final_template_arrangement,json=finalTemplateArrangement" json:"final_template_arrangement,omitempty"`
}

func (x *CommandMoveTemplatesArchive) Reset() {
	*x = CommandMoveTemplatesArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandMoveTemplatesArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandMoveTemplatesArchive) ProtoMessage() {}

func (x *CommandMoveTemplatesArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandMoveTemplatesArchive.ProtoReflect.Descriptor instead.
func (*CommandMoveTemplatesArchive) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{22}
}

func (x *CommandMoveTemplatesArchive) GetSuper() *ContainerReorderChildrenCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandMoveTemplatesArchive) GetTemplateSlides() []*Reference {
	if x != nil {
		return x.TemplateSlides
	}
	return nil
}

func (x *CommandMoveTemplatesArchive) GetPreviousIndexesKeys() []*Reference {
	if x != nil {
		return x.PreviousIndexesKeys
	}
	return nil
}

func (x *CommandMoveTemplatesArchive) GetPreviousIndexesValues() []uint32 {
	if x != nil {
		return x.PreviousIndexesValues
	}
	return nil
}

func (x *CommandMoveTemplatesArchive) GetFinalTemplateArrangement() []*Reference {
	if x != nil {
		return x.FinalTemplateArrangement
	}
	return nil
}

type CommandInsertTemplateArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                                  *CommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	UndoTemplateChangeCommands             []*Reference    `protobuf:"bytes,7,rep,name=undo_template_change_commands,json=undoTemplateChangeCommands" json:"undo_template_change_commands,omitempty"`
	SetInsertedSlideAsDefaultTemplateSlide *bool           `protobuf:"varint,8,req,name=set_inserted_slide_as_default_template_slide,json=setInsertedSlideAsDefaultTemplateSlide" json:"set_inserted_slide_as_default_template_slide,omitempty"`
	UndoReplacementTemplateSlideNode       *Reference      `protobuf:"bytes,9,opt,name=undo_replacement_template_slide_node,json=undoReplacementTemplateSlideNode" json:"undo_replacement_template_slide_node,omitempty"`
}

func (x *CommandInsertTemplateArchive) Reset() {
	*x = CommandInsertTemplateArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandInsertTemplateArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandInsertTemplateArchive) ProtoMessage() {}

func (x *CommandInsertTemplateArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandInsertTemplateArchive.ProtoReflect.Descriptor instead.
func (*CommandInsertTemplateArchive) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{23}
}

func (x *CommandInsertTemplateArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandInsertTemplateArchive) GetUndoTemplateChangeCommands() []*Reference {
	if x != nil {
		return x.UndoTemplateChangeCommands
	}
	return nil
}

func (x *CommandInsertTemplateArchive) GetSetInsertedSlideAsDefaultTemplateSlide() bool {
	if x != nil && x.SetInsertedSlideAsDefaultTemplateSlide != nil {
		return *x.SetInsertedSlideAsDefaultTemplateSlide
	}
	return false
}

func (x *CommandInsertTemplateArchive) GetUndoReplacementTemplateSlideNode() *Reference {
	if x != nil {
		return x.UndoReplacementTemplateSlideNode
	}
	return nil
}

type CommandPrimitiveInsertTemplateArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                       *ContainerInsertChildrenCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	WasInsertedWithDrop         *bool                                  `protobuf:"varint,2,req,name=was_inserted_with_drop,json=wasInsertedWithDrop" json:"was_inserted_with_drop,omitempty"`
	CustomFormatKeys            []*UUID                                `protobuf:"bytes,3,rep,name=custom_format_keys,json=customFormatKeys" json:"custom_format_keys,omitempty"`
	PreviousClassicThemeRecords []*Reference                           `protobuf:"bytes,4,rep,name=previous_classic_theme_records,json=previousClassicThemeRecords" json:"previous_classic_theme_records,omitempty"`
}

func (x *CommandPrimitiveInsertTemplateArchive) Reset() {
	*x = CommandPrimitiveInsertTemplateArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandPrimitiveInsertTemplateArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandPrimitiveInsertTemplateArchive) ProtoMessage() {}

func (x *CommandPrimitiveInsertTemplateArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandPrimitiveInsertTemplateArchive.ProtoReflect.Descriptor instead.
func (*CommandPrimitiveInsertTemplateArchive) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{24}
}

func (x *CommandPrimitiveInsertTemplateArchive) GetSuper() *ContainerInsertChildrenCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandPrimitiveInsertTemplateArchive) GetWasInsertedWithDrop() bool {
	if x != nil && x.WasInsertedWithDrop != nil {
		return *x.WasInsertedWithDrop
	}
	return false
}

func (x *CommandPrimitiveInsertTemplateArchive) GetCustomFormatKeys() []*UUID {
	if x != nil {
		return x.CustomFormatKeys
	}
	return nil
}

func (x *CommandPrimitiveInsertTemplateArchive) GetPreviousClassicThemeRecords() []*Reference {
	if x != nil {
		return x.PreviousClassicThemeRecords
	}
	return nil
}

type CommandRemoveTemplateArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                               *CommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	ReplacementTemplateSlideNode        *Reference      `protobuf:"bytes,5,opt,name=replacement_template_slide_node,json=replacementTemplateSlideNode" json:"replacement_template_slide_node,omitempty"`
	TemplateChangeCommands              []*Reference    `protobuf:"bytes,6,rep,name=template_change_commands,json=templateChangeCommands" json:"template_change_commands,omitempty"`
	DefaultTemplateSlideNodeWasReplaced *bool           `protobuf:"varint,7,opt,name=default_template_slide_node_was_replaced,json=defaultTemplateSlideNodeWasReplaced" json:"default_template_slide_node_was_replaced,omitempty"`
}

func (x *CommandRemoveTemplateArchive) Reset() {
	*x = CommandRemoveTemplateArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandRemoveTemplateArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandRemoveTemplateArchive) ProtoMessage() {}

func (x *CommandRemoveTemplateArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandRemoveTemplateArchive.ProtoReflect.Descriptor instead.
func (*CommandRemoveTemplateArchive) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{25}
}

func (x *CommandRemoveTemplateArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandRemoveTemplateArchive) GetReplacementTemplateSlideNode() *Reference {
	if x != nil {
		return x.ReplacementTemplateSlideNode
	}
	return nil
}

func (x *CommandRemoveTemplateArchive) GetTemplateChangeCommands() []*Reference {
	if x != nil {
		return x.TemplateChangeCommands
	}
	return nil
}

func (x *CommandRemoveTemplateArchive) GetDefaultTemplateSlideNodeWasReplaced() bool {
	if x != nil && x.DefaultTemplateSlideNodeWasReplaced != nil {
		return *x.DefaultTemplateSlideNodeWasReplaced
	}
	return false
}

type CommandPrimitiveRemoveTemplateArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                       *ContainerRemoveChildrenCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	PreviousClassicThemeRecords []*Reference                           `protobuf:"bytes,3,rep,name=previous_classic_theme_records,json=previousClassicThemeRecords" json:"previous_classic_theme_records,omitempty"`
}

func (x *CommandPrimitiveRemoveTemplateArchive) Reset() {
	*x = CommandPrimitiveRemoveTemplateArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandPrimitiveRemoveTemplateArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandPrimitiveRemoveTemplateArchive) ProtoMessage() {}

func (x *CommandPrimitiveRemoveTemplateArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandPrimitiveRemoveTemplateArchive.ProtoReflect.Descriptor instead.
func (*CommandPrimitiveRemoveTemplateArchive) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{26}
}

func (x *CommandPrimitiveRemoveTemplateArchive) GetSuper() *ContainerRemoveChildrenCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandPrimitiveRemoveTemplateArchive) GetPreviousClassicThemeRecords() []*Reference {
	if x != nil {
		return x.PreviousClassicThemeRecords
	}
	return nil
}

type CommandSlideInsertBuildArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                           *CommandArchive              `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	InsertBuildDescription          *Reference                   `protobuf:"bytes,2,req,name=insert_build_description,json=insertBuildDescription" json:"insert_build_description,omitempty"`
	IdentifierForChunkToInsertAfter *BuildChunkIdentifierArchive `protobuf:"bytes,3,opt,name=identifier_for_chunk_to_insert_after,json=identifierForChunkToInsertAfter" json:"identifier_for_chunk_to_insert_after,omitempty"`
	ShouldCreateChunks              *bool                        `protobuf:"varint,4,opt,name=should_create_chunks,json=shouldCreateChunks" json:"should_create_chunks,omitempty"`
	OldTuplesToUpdate               []*Reference                 `protobuf:"bytes,5,rep,name=old_tuples_to_update,json=oldTuplesToUpdate" json:"old_tuples_to_update,omitempty"`
	WasInitializedOverTheWire       *bool                        `protobuf:"varint,6,opt,name=was_initialized_over_the_wire,json=wasInitializedOverTheWire" json:"was_initialized_over_the_wire,omitempty"`
	HasBeenCommitted                *bool                        `protobuf:"varint,7,opt,name=has_been_committed,json=hasBeenCommitted" json:"has_been_committed,omitempty"`
}

func (x *CommandSlideInsertBuildArchive) Reset() {
	*x = CommandSlideInsertBuildArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSlideInsertBuildArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSlideInsertBuildArchive) ProtoMessage() {}

func (x *CommandSlideInsertBuildArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSlideInsertBuildArchive.ProtoReflect.Descriptor instead.
func (*CommandSlideInsertBuildArchive) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{27}
}

func (x *CommandSlideInsertBuildArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandSlideInsertBuildArchive) GetInsertBuildDescription() *Reference {
	if x != nil {
		return x.InsertBuildDescription
	}
	return nil
}

func (x *CommandSlideInsertBuildArchive) GetIdentifierForChunkToInsertAfter() *BuildChunkIdentifierArchive {
	if x != nil {
		return x.IdentifierForChunkToInsertAfter
	}
	return nil
}

func (x *CommandSlideInsertBuildArchive) GetShouldCreateChunks() bool {
	if x != nil && x.ShouldCreateChunks != nil {
		return *x.ShouldCreateChunks
	}
	return false
}

func (x *CommandSlideInsertBuildArchive) GetOldTuplesToUpdate() []*Reference {
	if x != nil {
		return x.OldTuplesToUpdate
	}
	return nil
}

func (x *CommandSlideInsertBuildArchive) GetWasInitializedOverTheWire() bool {
	if x != nil && x.WasInitializedOverTheWire != nil {
		return *x.WasInitializedOverTheWire
	}
	return false
}

func (x *CommandSlideInsertBuildArchive) GetHasBeenCommitted() bool {
	if x != nil && x.HasBeenCommitted != nil {
		return *x.HasBeenCommitted
	}
	return false
}

type InsertBuildDescriptionArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlideId                          *UUID                          `protobuf:"bytes,1,req,name=slide_id,json=slideId" json:"slide_id,omitempty"`
	BuildToInsert                    *Reference                     `protobuf:"bytes,2,req,name=build_to_insert,json=buildToInsert" json:"build_to_insert,omitempty"`
	ChunksToInsert                   []*Reference                   `protobuf:"bytes,3,rep,name=chunks_to_insert,json=chunksToInsert" json:"chunks_to_insert,omitempty"`
	ShouldAssignChunkIdentifiers     *bool                          `protobuf:"varint,4,req,name=should_assign_chunk_identifiers,json=shouldAssignChunkIdentifiers" json:"should_assign_chunk_identifiers,omitempty"`
	IdentifersForChunksToInsertAfter []*BuildChunkIdentifierArchive `protobuf:"bytes,5,rep,name=identifers_for_chunks_to_insert_after,json=identifersForChunksToInsertAfter" json:"identifers_for_chunks_to_insert_after,omitempty"`
	TuplesToUpdate                   []*Reference                   `protobuf:"bytes,6,rep,name=tuples_to_update,json=tuplesToUpdate" json:"tuples_to_update,omitempty"`
	FallbackChunkIdentifiers         []*BuildChunkIdentifierArchive `protobuf:"bytes,7,rep,name=fallback_chunk_identifiers,json=fallbackChunkIdentifiers" json:"fallback_chunk_identifiers,omitempty"`
	IsForPaste                       *bool                          `protobuf:"varint,8,req,name=is_for_paste,json=isForPaste" json:"is_for_paste,omitempty"`
}

func (x *InsertBuildDescriptionArchive) Reset() {
	*x = InsertBuildDescriptionArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertBuildDescriptionArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertBuildDescriptionArchive) ProtoMessage() {}

func (x *InsertBuildDescriptionArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertBuildDescriptionArchive.ProtoReflect.Descriptor instead.
func (*InsertBuildDescriptionArchive) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{28}
}

func (x *InsertBuildDescriptionArchive) GetSlideId() *UUID {
	if x != nil {
		return x.SlideId
	}
	return nil
}

func (x *InsertBuildDescriptionArchive) GetBuildToInsert() *Reference {
	if x != nil {
		return x.BuildToInsert
	}
	return nil
}

func (x *InsertBuildDescriptionArchive) GetChunksToInsert() []*Reference {
	if x != nil {
		return x.ChunksToInsert
	}
	return nil
}

func (x *InsertBuildDescriptionArchive) GetShouldAssignChunkIdentifiers() bool {
	if x != nil && x.ShouldAssignChunkIdentifiers != nil {
		return *x.ShouldAssignChunkIdentifiers
	}
	return false
}

func (x *InsertBuildDescriptionArchive) GetIdentifersForChunksToInsertAfter() []*BuildChunkIdentifierArchive {
	if x != nil {
		return x.IdentifersForChunksToInsertAfter
	}
	return nil
}

func (x *InsertBuildDescriptionArchive) GetTuplesToUpdate() []*Reference {
	if x != nil {
		return x.TuplesToUpdate
	}
	return nil
}

func (x *InsertBuildDescriptionArchive) GetFallbackChunkIdentifiers() []*BuildChunkIdentifierArchive {
	if x != nil {
		return x.FallbackChunkIdentifiers
	}
	return nil
}

func (x *InsertBuildDescriptionArchive) GetIsForPaste() bool {
	if x != nil && x.IsForPaste != nil {
		return *x.IsForPaste
	}
	return false
}

type UndoObjectArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *TSDUndoObjectArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
}

func (x *UndoObjectArchive) Reset() {
	*x = UndoObjectArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UndoObjectArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UndoObjectArchive) ProtoMessage() {}

func (x *UndoObjectArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UndoObjectArchive.ProtoReflect.Descriptor instead.
func (*UndoObjectArchive) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{29}
}

func (x *UndoObjectArchive) GetSuper() *TSDUndoObjectArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

type CommandSlideRemoveBuildArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                             *CommandArchive                `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	RemoveBuildDescription            *Reference                     `protobuf:"bytes,2,req,name=remove_build_description,json=removeBuildDescription" json:"remove_build_description,omitempty"`
	Build                             *Reference                     `protobuf:"bytes,3,opt,name=build" json:"build,omitempty"`
	ChunksToInsert                    []*Reference                   `protobuf:"bytes,4,rep,name=chunks_to_insert,json=chunksToInsert" json:"chunks_to_insert,omitempty"`
	IdentifiersForChunksToInsertAfter []*BuildChunkIdentifierArchive `protobuf:"bytes,5,rep,name=identifiers_for_chunks_to_insert_after,json=identifiersForChunksToInsertAfter" json:"identifiers_for_chunks_to_insert_after,omitempty"`
	OldTuplesToUpdate                 []*Reference                   `protobuf:"bytes,6,rep,name=old_tuples_to_update,json=oldTuplesToUpdate" json:"old_tuples_to_update,omitempty"`
	FallbackChunkIdentifiers          []*BuildChunkIdentifierArchive `protobuf:"bytes,7,rep,name=fallback_chunk_identifiers,json=fallbackChunkIdentifiers" json:"fallback_chunk_identifiers,omitempty"`
}

func (x *CommandSlideRemoveBuildArchive) Reset() {
	*x = CommandSlideRemoveBuildArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSlideRemoveBuildArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSlideRemoveBuildArchive) ProtoMessage() {}

func (x *CommandSlideRemoveBuildArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSlideRemoveBuildArchive.ProtoReflect.Descriptor instead.
func (*CommandSlideRemoveBuildArchive) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{30}
}

func (x *CommandSlideRemoveBuildArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandSlideRemoveBuildArchive) GetRemoveBuildDescription() *Reference {
	if x != nil {
		return x.RemoveBuildDescription
	}
	return nil
}

func (x *CommandSlideRemoveBuildArchive) GetBuild() *Reference {
	if x != nil {
		return x.Build
	}
	return nil
}

func (x *CommandSlideRemoveBuildArchive) GetChunksToInsert() []*Reference {
	if x != nil {
		return x.ChunksToInsert
	}
	return nil
}

func (x *CommandSlideRemoveBuildArchive) GetIdentifiersForChunksToInsertAfter() []*BuildChunkIdentifierArchive {
	if x != nil {
		return x.IdentifiersForChunksToInsertAfter
	}
	return nil
}

func (x *CommandSlideRemoveBuildArchive) GetOldTuplesToUpdate() []*Reference {
	if x != nil {
		return x.OldTuplesToUpdate
	}
	return nil
}

func (x *CommandSlideRemoveBuildArchive) GetFallbackChunkIdentifiers() []*BuildChunkIdentifierArchive {
	if x != nil {
		return x.FallbackChunkIdentifiers
	}
	return nil
}

type RemoveBuildDescriptionArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlideId                      *UUID        `protobuf:"bytes,1,opt,name=slide_id,json=slideId" json:"slide_id,omitempty"`
	BuildId                      *UUID        `protobuf:"bytes,2,opt,name=build_id,json=buildId" json:"build_id,omitempty"`
	ShouldRemoveChunks           *bool        `protobuf:"varint,3,opt,name=should_remove_chunks,json=shouldRemoveChunks" json:"should_remove_chunks,omitempty"`
	ShouldRemoveChunkIdentifiers *bool        `protobuf:"varint,4,opt,name=should_remove_chunk_identifiers,json=shouldRemoveChunkIdentifiers" json:"should_remove_chunk_identifiers,omitempty"`
	TuplesToUpdate               []*Reference `protobuf:"bytes,5,rep,name=tuples_to_update,json=tuplesToUpdate" json:"tuples_to_update,omitempty"`
}

func (x *RemoveBuildDescriptionArchive) Reset() {
	*x = RemoveBuildDescriptionArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveBuildDescriptionArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveBuildDescriptionArchive) ProtoMessage() {}

func (x *RemoveBuildDescriptionArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveBuildDescriptionArchive.ProtoReflect.Descriptor instead.
func (*RemoveBuildDescriptionArchive) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{31}
}

func (x *RemoveBuildDescriptionArchive) GetSlideId() *UUID {
	if x != nil {
		return x.SlideId
	}
	return nil
}

func (x *RemoveBuildDescriptionArchive) GetBuildId() *UUID {
	if x != nil {
		return x.BuildId
	}
	return nil
}

func (x *RemoveBuildDescriptionArchive) GetShouldRemoveChunks() bool {
	if x != nil && x.ShouldRemoveChunks != nil {
		return *x.ShouldRemoveChunks
	}
	return false
}

func (x *RemoveBuildDescriptionArchive) GetShouldRemoveChunkIdentifiers() bool {
	if x != nil && x.ShouldRemoveChunkIdentifiers != nil {
		return *x.ShouldRemoveChunkIdentifiers
	}
	return false
}

func (x *RemoveBuildDescriptionArchive) GetTuplesToUpdate() []*Reference {
	if x != nil {
		return x.TuplesToUpdate
	}
	return nil
}

type CommandSlideInsertBuildChunkArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                           *CommandArchive              `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	SlideId                         *UUID                        `protobuf:"bytes,2,req,name=slide_id,json=slideId" json:"slide_id,omitempty"`
	ChunkToInsert                   *Reference                   `protobuf:"bytes,3,req,name=chunk_to_insert,json=chunkToInsert" json:"chunk_to_insert,omitempty"`
	IdentifierForChunkToInsertAfter *BuildChunkIdentifierArchive `protobuf:"bytes,4,opt,name=identifier_for_chunk_to_insert_after,json=identifierForChunkToInsertAfter" json:"identifier_for_chunk_to_insert_after,omitempty"`
	TuplesToUpdate                  []*Reference                 `protobuf:"bytes,5,rep,name=tuples_to_update,json=tuplesToUpdate" json:"tuples_to_update,omitempty"`
	OldTuplesToUpdate               []*Reference                 `protobuf:"bytes,6,rep,name=old_tuples_to_update,json=oldTuplesToUpdate" json:"old_tuples_to_update,omitempty"`
	NeedsSelectionUpdate            *bool                        `protobuf:"varint,7,opt,name=needs_selection_update,json=needsSelectionUpdate" json:"needs_selection_update,omitempty"`
	ShouldAssignChunkIdentifier     *bool                        `protobuf:"varint,8,opt,name=should_assign_chunk_identifier,json=shouldAssignChunkIdentifier" json:"should_assign_chunk_identifier,omitempty"`
}

func (x *CommandSlideInsertBuildChunkArchive) Reset() {
	*x = CommandSlideInsertBuildChunkArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSlideInsertBuildChunkArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSlideInsertBuildChunkArchive) ProtoMessage() {}

func (x *CommandSlideInsertBuildChunkArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSlideInsertBuildChunkArchive.ProtoReflect.Descriptor instead.
func (*CommandSlideInsertBuildChunkArchive) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{32}
}

func (x *CommandSlideInsertBuildChunkArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandSlideInsertBuildChunkArchive) GetSlideId() *UUID {
	if x != nil {
		return x.SlideId
	}
	return nil
}

func (x *CommandSlideInsertBuildChunkArchive) GetChunkToInsert() *Reference {
	if x != nil {
		return x.ChunkToInsert
	}
	return nil
}

func (x *CommandSlideInsertBuildChunkArchive) GetIdentifierForChunkToInsertAfter() *BuildChunkIdentifierArchive {
	if x != nil {
		return x.IdentifierForChunkToInsertAfter
	}
	return nil
}

func (x *CommandSlideInsertBuildChunkArchive) GetTuplesToUpdate() []*Reference {
	if x != nil {
		return x.TuplesToUpdate
	}
	return nil
}

func (x *CommandSlideInsertBuildChunkArchive) GetOldTuplesToUpdate() []*Reference {
	if x != nil {
		return x.OldTuplesToUpdate
	}
	return nil
}

func (x *CommandSlideInsertBuildChunkArchive) GetNeedsSelectionUpdate() bool {
	if x != nil && x.NeedsSelectionUpdate != nil {
		return *x.NeedsSelectionUpdate
	}
	return false
}

func (x *CommandSlideInsertBuildChunkArchive) GetShouldAssignChunkIdentifier() bool {
	if x != nil && x.ShouldAssignChunkIdentifier != nil {
		return *x.ShouldAssignChunkIdentifier
	}
	return false
}

type CommandSlideRemoveBuildChunkArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                           *CommandArchive              `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	SlideId                         *UUID                        `protobuf:"bytes,2,req,name=slide_id,json=slideId" json:"slide_id,omitempty"`
	RemovedChunk                    *Reference                   `protobuf:"bytes,3,opt,name=removed_chunk,json=removedChunk" json:"removed_chunk,omitempty"`
	IdentifierForChunkToRemove      *BuildChunkIdentifierArchive `protobuf:"bytes,4,opt,name=identifier_for_chunk_to_remove,json=identifierForChunkToRemove" json:"identifier_for_chunk_to_remove,omitempty"`
	IdentifierForChunkToInsertAfter *BuildChunkIdentifierArchive `protobuf:"bytes,5,opt,name=identifier_for_chunk_to_insert_after,json=identifierForChunkToInsertAfter" json:"identifier_for_chunk_to_insert_after,omitempty"`
	TuplesToUpdate                  []*Reference                 `protobuf:"bytes,6,rep,name=tuples_to_update,json=tuplesToUpdate" json:"tuples_to_update,omitempty"`
	OldTuplesToUpdate               []*Reference                 `protobuf:"bytes,7,rep,name=old_tuples_to_update,json=oldTuplesToUpdate" json:"old_tuples_to_update,omitempty"`
	NeedsSelectionUpdate            *bool                        `protobuf:"varint,8,opt,name=needs_selection_update,json=needsSelectionUpdate" json:"needs_selection_update,omitempty"`
}

func (x *CommandSlideRemoveBuildChunkArchive) Reset() {
	*x = CommandSlideRemoveBuildChunkArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSlideRemoveBuildChunkArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSlideRemoveBuildChunkArchive) ProtoMessage() {}

func (x *CommandSlideRemoveBuildChunkArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSlideRemoveBuildChunkArchive.ProtoReflect.Descriptor instead.
func (*CommandSlideRemoveBuildChunkArchive) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{33}
}

func (x *CommandSlideRemoveBuildChunkArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandSlideRemoveBuildChunkArchive) GetSlideId() *UUID {
	if x != nil {
		return x.SlideId
	}
	return nil
}

func (x *CommandSlideRemoveBuildChunkArchive) GetRemovedChunk() *Reference {
	if x != nil {
		return x.RemovedChunk
	}
	return nil
}

func (x *CommandSlideRemoveBuildChunkArchive) GetIdentifierForChunkToRemove() *BuildChunkIdentifierArchive {
	if x != nil {
		return x.IdentifierForChunkToRemove
	}
	return nil
}

func (x *CommandSlideRemoveBuildChunkArchive) GetIdentifierForChunkToInsertAfter() *BuildChunkIdentifierArchive {
	if x != nil {
		return x.IdentifierForChunkToInsertAfter
	}
	return nil
}

func (x *CommandSlideRemoveBuildChunkArchive) GetTuplesToUpdate() []*Reference {
	if x != nil {
		return x.TuplesToUpdate
	}
	return nil
}

func (x *CommandSlideRemoveBuildChunkArchive) GetOldTuplesToUpdate() []*Reference {
	if x != nil {
		return x.OldTuplesToUpdate
	}
	return nil
}

func (x *CommandSlideRemoveBuildChunkArchive) GetNeedsSelectionUpdate() bool {
	if x != nil && x.NeedsSelectionUpdate != nil {
		return *x.NeedsSelectionUpdate
	}
	return false
}

type CommandSlideMoveBuildChunksArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                                                      *CommandArchive                `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	IdentifiersForChunksToMove                                 []*BuildChunkIdentifierArchive `protobuf:"bytes,2,rep,name=identifiers_for_chunks_to_move,json=identifiersForChunksToMove" json:"identifiers_for_chunks_to_move,omitempty"`
	IdentifiersForChunksToMoveAfter                            []*BuildChunkIdentifierArchive `protobuf:"bytes,3,rep,name=identifiers_for_chunks_to_move_after,json=identifiersForChunksToMoveAfter" json:"identifiers_for_chunks_to_move_after,omitempty"`
	IdentifiersForChunksToMoveAfterForUndo                     []*BuildChunkIdentifierArchive `protobuf:"bytes,4,rep,name=identifiers_for_chunks_to_move_after_for_undo,json=identifiersForChunksToMoveAfterForUndo" json:"identifiers_for_chunks_to_move_after_for_undo,omitempty"`
	TuplesToUpdate                                             []*Reference                   `protobuf:"bytes,5,rep,name=tuples_to_update,json=tuplesToUpdate" json:"tuples_to_update,omitempty"`
	OldTuplesToUpdate                                          []*Reference                   `protobuf:"bytes,6,rep,name=old_tuples_to_update,json=oldTuplesToUpdate" json:"old_tuples_to_update,omitempty"`
	IdentifiersForChunksToMoveIncludingClusteredInactiveChunks []*BuildChunkIdentifierArchive `protobuf:"bytes,7,rep,name=identifiers_for_chunks_to_move_including_clustered_inactive_chunks,json=identifiersForChunksToMoveIncludingClusteredInactiveChunks" json:"identifiers_for_chunks_to_move_including_clustered_inactive_chunks,omitempty"`
}

func (x *CommandSlideMoveBuildChunksArchive) Reset() {
	*x = CommandSlideMoveBuildChunksArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSlideMoveBuildChunksArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSlideMoveBuildChunksArchive) ProtoMessage() {}

func (x *CommandSlideMoveBuildChunksArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSlideMoveBuildChunksArchive.ProtoReflect.Descriptor instead.
func (*CommandSlideMoveBuildChunksArchive) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{34}
}

func (x *CommandSlideMoveBuildChunksArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandSlideMoveBuildChunksArchive) GetIdentifiersForChunksToMove() []*BuildChunkIdentifierArchive {
	if x != nil {
		return x.IdentifiersForChunksToMove
	}
	return nil
}

func (x *CommandSlideMoveBuildChunksArchive) GetIdentifiersForChunksToMoveAfter() []*BuildChunkIdentifierArchive {
	if x != nil {
		return x.IdentifiersForChunksToMoveAfter
	}
	return nil
}

func (x *CommandSlideMoveBuildChunksArchive) GetIdentifiersForChunksToMoveAfterForUndo() []*BuildChunkIdentifierArchive {
	if x != nil {
		return x.IdentifiersForChunksToMoveAfterForUndo
	}
	return nil
}

func (x *CommandSlideMoveBuildChunksArchive) GetTuplesToUpdate() []*Reference {
	if x != nil {
		return x.TuplesToUpdate
	}
	return nil
}

func (x *CommandSlideMoveBuildChunksArchive) GetOldTuplesToUpdate() []*Reference {
	if x != nil {
		return x.OldTuplesToUpdate
	}
	return nil
}

func (x *CommandSlideMoveBuildChunksArchive) GetIdentifiersForChunksToMoveIncludingClusteredInactiveChunks() []*BuildChunkIdentifierArchive {
	if x != nil {
		return x.IdentifiersForChunksToMoveIncludingClusteredInactiveChunks
	}
	return nil
}

type CommandBuildSetValueArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                                    *CommandArchive                `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Tuple                                    *Reference                     `protobuf:"bytes,2,opt,name=tuple" json:"tuple,omitempty"`
	ChunksToAdd                              []*Reference                   `protobuf:"bytes,3,rep,name=chunks_to_add,json=chunksToAdd" json:"chunks_to_add,omitempty"`
	IdentifiersForChunksToInsertAfter        []*BuildChunkIdentifierArchive `protobuf:"bytes,4,rep,name=identifiers_for_chunks_to_insert_after,json=identifiersForChunksToInsertAfter" json:"identifiers_for_chunks_to_insert_after,omitempty"`
	IdentifiersForChunksToRemove             []*BuildChunkIdentifierArchive `protobuf:"bytes,5,rep,name=identifiers_for_chunks_to_remove,json=identifiersForChunksToRemove" json:"identifiers_for_chunks_to_remove,omitempty"`
	TuplesToUpdate                           []*Reference                   `protobuf:"bytes,6,rep,name=tuples_to_update,json=tuplesToUpdate" json:"tuples_to_update,omitempty"`
	OldTupleForMainProperty                  *Reference                     `protobuf:"bytes,7,opt,name=old_tuple_for_main_property,json=oldTupleForMainProperty" json:"old_tuple_for_main_property,omitempty"`
	OldTuplesToUpdateForSubCommands          []*Reference                   `protobuf:"bytes,8,rep,name=old_tuples_to_update_for_sub_commands,json=oldTuplesToUpdateForSubCommands" json:"old_tuples_to_update_for_sub_commands,omitempty"`
	IdentifiersForAddedChunks                []*BuildChunkIdentifierArchive `protobuf:"bytes,9,rep,name=identifiers_for_added_chunks,json=identifiersForAddedChunks" json:"identifiers_for_added_chunks,omitempty"`
	GeneratedIdentifiers                     []*BuildChunkIdentifierArchive `protobuf:"bytes,10,rep,name=generated_identifiers,json=generatedIdentifiers" json:"generated_identifiers,omitempty"`
	RemovedChunks                            []*Reference                   `protobuf:"bytes,11,rep,name=removed_chunks,json=removedChunks" json:"removed_chunks,omitempty"`
	IdentifiersForChunksPriorToRemovedChunks []*BuildChunkIdentifierArchive `protobuf:"bytes,12,rep,name=identifiers_for_chunks_prior_to_removed_chunks,json=identifiersForChunksPriorToRemovedChunks" json:"identifiers_for_chunks_prior_to_removed_chunks,omitempty"`
	OldChunk_IDSeed                          *uint32                        `protobuf:"varint,13,opt,name=old_chunk_ID_seed,json=oldChunkIDSeed" json:"old_chunk_ID_seed,omitempty"`
	OldChunkIdentifiers                      []*BuildChunkIdentifierArchive `protobuf:"bytes,14,rep,name=old_chunk_identifiers,json=oldChunkIdentifiers" json:"old_chunk_identifiers,omitempty"`
	ChunksRemovedDuringUndo                  []*Reference                   `protobuf:"bytes,15,rep,name=chunks_removed_during_undo,json=chunksRemovedDuringUndo" json:"chunks_removed_during_undo,omitempty"`
}

func (x *CommandBuildSetValueArchive) Reset() {
	*x = CommandBuildSetValueArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandBuildSetValueArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandBuildSetValueArchive) ProtoMessage() {}

func (x *CommandBuildSetValueArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandBuildSetValueArchive.ProtoReflect.Descriptor instead.
func (*CommandBuildSetValueArchive) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{35}
}

func (x *CommandBuildSetValueArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandBuildSetValueArchive) GetTuple() *Reference {
	if x != nil {
		return x.Tuple
	}
	return nil
}

func (x *CommandBuildSetValueArchive) GetChunksToAdd() []*Reference {
	if x != nil {
		return x.ChunksToAdd
	}
	return nil
}

func (x *CommandBuildSetValueArchive) GetIdentifiersForChunksToInsertAfter() []*BuildChunkIdentifierArchive {
	if x != nil {
		return x.IdentifiersForChunksToInsertAfter
	}
	return nil
}

func (x *CommandBuildSetValueArchive) GetIdentifiersForChunksToRemove() []*BuildChunkIdentifierArchive {
	if x != nil {
		return x.IdentifiersForChunksToRemove
	}
	return nil
}

func (x *CommandBuildSetValueArchive) GetTuplesToUpdate() []*Reference {
	if x != nil {
		return x.TuplesToUpdate
	}
	return nil
}

func (x *CommandBuildSetValueArchive) GetOldTupleForMainProperty() *Reference {
	if x != nil {
		return x.OldTupleForMainProperty
	}
	return nil
}

func (x *CommandBuildSetValueArchive) GetOldTuplesToUpdateForSubCommands() []*Reference {
	if x != nil {
		return x.OldTuplesToUpdateForSubCommands
	}
	return nil
}

func (x *CommandBuildSetValueArchive) GetIdentifiersForAddedChunks() []*BuildChunkIdentifierArchive {
	if x != nil {
		return x.IdentifiersForAddedChunks
	}
	return nil
}

func (x *CommandBuildSetValueArchive) GetGeneratedIdentifiers() []*BuildChunkIdentifierArchive {
	if x != nil {
		return x.GeneratedIdentifiers
	}
	return nil
}

func (x *CommandBuildSetValueArchive) GetRemovedChunks() []*Reference {
	if x != nil {
		return x.RemovedChunks
	}
	return nil
}

func (x *CommandBuildSetValueArchive) GetIdentifiersForChunksPriorToRemovedChunks() []*BuildChunkIdentifierArchive {
	if x != nil {
		return x.IdentifiersForChunksPriorToRemovedChunks
	}
	return nil
}

func (x *CommandBuildSetValueArchive) GetOldChunk_IDSeed() uint32 {
	if x != nil && x.OldChunk_IDSeed != nil {
		return *x.OldChunk_IDSeed
	}
	return 0
}

func (x *CommandBuildSetValueArchive) GetOldChunkIdentifiers() []*BuildChunkIdentifierArchive {
	if x != nil {
		return x.OldChunkIdentifiers
	}
	return nil
}

func (x *CommandBuildSetValueArchive) GetChunksRemovedDuringUndo() []*Reference {
	if x != nil {
		return x.ChunksRemovedDuringUndo
	}
	return nil
}

type CommandBuildUpdateChunkReferentsArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super             *CommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	BuildId           *UUID           `protobuf:"bytes,2,req,name=build_id,json=buildId" json:"build_id,omitempty"`
	TuplesToUpdate    []*Reference    `protobuf:"bytes,3,rep,name=tuples_to_update,json=tuplesToUpdate" json:"tuples_to_update,omitempty"`
	OldTuplesToUpdate []*Reference    `protobuf:"bytes,4,rep,name=old_tuples_to_update,json=oldTuplesToUpdate" json:"old_tuples_to_update,omitempty"`
}

func (x *CommandBuildUpdateChunkReferentsArchive) Reset() {
	*x = CommandBuildUpdateChunkReferentsArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandBuildUpdateChunkReferentsArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandBuildUpdateChunkReferentsArchive) ProtoMessage() {}

func (x *CommandBuildUpdateChunkReferentsArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandBuildUpdateChunkReferentsArchive.ProtoReflect.Descriptor instead.
func (*CommandBuildUpdateChunkReferentsArchive) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{36}
}

func (x *CommandBuildUpdateChunkReferentsArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandBuildUpdateChunkReferentsArchive) GetBuildId() *UUID {
	if x != nil {
		return x.BuildId
	}
	return nil
}

func (x *CommandBuildUpdateChunkReferentsArchive) GetTuplesToUpdate() []*Reference {
	if x != nil {
		return x.TuplesToUpdate
	}
	return nil
}

func (x *CommandBuildUpdateChunkReferentsArchive) GetOldTuplesToUpdate() []*Reference {
	if x != nil {
		return x.OldTuplesToUpdate
	}
	return nil
}

type CommandBuildUpdateChunkCountArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                                    *CommandArchive                `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	SlideId                                  *UUID                          `protobuf:"bytes,2,req,name=slide_id,json=slideId" json:"slide_id,omitempty"`
	DrawableIds                              []*UUID                        `protobuf:"bytes,3,rep,name=drawable_ids,json=drawableIds" json:"drawable_ids,omitempty"`
	ExpectedDeliveryStyleTuples              []*Reference                   `protobuf:"bytes,4,rep,name=expected_delivery_style_tuples,json=expectedDeliveryStyleTuples" json:"expected_delivery_style_tuples,omitempty"`
	ChunksToAdd                              []*Reference                   `protobuf:"bytes,5,rep,name=chunks_to_add,json=chunksToAdd" json:"chunks_to_add,omitempty"`
	IdentifiersForChunksToInsertAfter        []*BuildChunkIdentifierArchive `protobuf:"bytes,6,rep,name=identifiers_for_chunks_to_insert_after,json=identifiersForChunksToInsertAfter" json:"identifiers_for_chunks_to_insert_after,omitempty"`
	IdentifiersForChunksToRemove             []*BuildChunkIdentifierArchive `protobuf:"bytes,7,rep,name=identifiers_for_chunks_to_remove,json=identifiersForChunksToRemove" json:"identifiers_for_chunks_to_remove,omitempty"`
	TuplesToUpdate                           []*Reference                   `protobuf:"bytes,8,rep,name=tuples_to_update,json=tuplesToUpdate" json:"tuples_to_update,omitempty"`
	NeedsAsyncProcessChangesSelectionUpdate  *bool                          `protobuf:"varint,9,opt,name=needs_async_process_changes_selection_update,json=needsAsyncProcessChangesSelectionUpdate" json:"needs_async_process_changes_selection_update,omitempty"`
	OldTuplesToUpdate                        []*Reference                   `protobuf:"bytes,10,rep,name=old_tuples_to_update,json=oldTuplesToUpdate" json:"old_tuples_to_update,omitempty"`
	IdentifiersForAddedChunks                []*BuildChunkIdentifierArchive `protobuf:"bytes,11,rep,name=identifiers_for_added_chunks,json=identifiersForAddedChunks" json:"identifiers_for_added_chunks,omitempty"`
	GeneratedIdentifiers                     []*BuildChunkIdentifierArchive `protobuf:"bytes,12,rep,name=generated_identifiers,json=generatedIdentifiers" json:"generated_identifiers,omitempty"`
	RemovedChunks                            []*Reference                   `protobuf:"bytes,13,rep,name=removed_chunks,json=removedChunks" json:"removed_chunks,omitempty"`
	IdentifiersForChunksPriorToRemovedChunks []*BuildChunkIdentifierArchive `protobuf:"bytes,14,rep,name=identifiers_for_chunks_prior_to_removed_chunks,json=identifiersForChunksPriorToRemovedChunks" json:"identifiers_for_chunks_prior_to_removed_chunks,omitempty"`
	OldDeliveryStyleTuples                   []*Reference                   `protobuf:"bytes,15,rep,name=old_delivery_style_tuples,json=oldDeliveryStyleTuples" json:"old_delivery_style_tuples,omitempty"`
	OldChunk_IDSeeds                         []uint32                       `protobuf:"varint,16,rep,name=old_chunk_ID_seeds,json=oldChunkIDSeeds" json:"old_chunk_ID_seeds,omitempty"`
	OldChunkIdentifiers                      []*BuildChunkIdentifierArchive `protobuf:"bytes,17,rep,name=old_chunk_identifiers,json=oldChunkIdentifiers" json:"old_chunk_identifiers,omitempty"`
	WorkingBuilds                            []*Reference                   `protobuf:"bytes,18,rep,name=working_builds,json=workingBuilds" json:"working_builds,omitempty"`
	ChunksRemovedDuringUndo                  []*Reference                   `protobuf:"bytes,19,rep,name=chunks_removed_during_undo,json=chunksRemovedDuringUndo" json:"chunks_removed_during_undo,omitempty"`
	ChunksAddedDuringUndo                    []*Reference                   `protobuf:"bytes,20,rep,name=chunks_added_during_undo,json=chunksAddedDuringUndo" json:"chunks_added_during_undo,omitempty"`
}

func (x *CommandBuildUpdateChunkCountArchive) Reset() {
	*x = CommandBuildUpdateChunkCountArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandBuildUpdateChunkCountArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandBuildUpdateChunkCountArchive) ProtoMessage() {}

func (x *CommandBuildUpdateChunkCountArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandBuildUpdateChunkCountArchive.ProtoReflect.Descriptor instead.
func (*CommandBuildUpdateChunkCountArchive) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{37}
}

func (x *CommandBuildUpdateChunkCountArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandBuildUpdateChunkCountArchive) GetSlideId() *UUID {
	if x != nil {
		return x.SlideId
	}
	return nil
}

func (x *CommandBuildUpdateChunkCountArchive) GetDrawableIds() []*UUID {
	if x != nil {
		return x.DrawableIds
	}
	return nil
}

func (x *CommandBuildUpdateChunkCountArchive) GetExpectedDeliveryStyleTuples() []*Reference {
	if x != nil {
		return x.ExpectedDeliveryStyleTuples
	}
	return nil
}

func (x *CommandBuildUpdateChunkCountArchive) GetChunksToAdd() []*Reference {
	if x != nil {
		return x.ChunksToAdd
	}
	return nil
}

func (x *CommandBuildUpdateChunkCountArchive) GetIdentifiersForChunksToInsertAfter() []*BuildChunkIdentifierArchive {
	if x != nil {
		return x.IdentifiersForChunksToInsertAfter
	}
	return nil
}

func (x *CommandBuildUpdateChunkCountArchive) GetIdentifiersForChunksToRemove() []*BuildChunkIdentifierArchive {
	if x != nil {
		return x.IdentifiersForChunksToRemove
	}
	return nil
}

func (x *CommandBuildUpdateChunkCountArchive) GetTuplesToUpdate() []*Reference {
	if x != nil {
		return x.TuplesToUpdate
	}
	return nil
}

func (x *CommandBuildUpdateChunkCountArchive) GetNeedsAsyncProcessChangesSelectionUpdate() bool {
	if x != nil && x.NeedsAsyncProcessChangesSelectionUpdate != nil {
		return *x.NeedsAsyncProcessChangesSelectionUpdate
	}
	return false
}

func (x *CommandBuildUpdateChunkCountArchive) GetOldTuplesToUpdate() []*Reference {
	if x != nil {
		return x.OldTuplesToUpdate
	}
	return nil
}

func (x *CommandBuildUpdateChunkCountArchive) GetIdentifiersForAddedChunks() []*BuildChunkIdentifierArchive {
	if x != nil {
		return x.IdentifiersForAddedChunks
	}
	return nil
}

func (x *CommandBuildUpdateChunkCountArchive) GetGeneratedIdentifiers() []*BuildChunkIdentifierArchive {
	if x != nil {
		return x.GeneratedIdentifiers
	}
	return nil
}

func (x *CommandBuildUpdateChunkCountArchive) GetRemovedChunks() []*Reference {
	if x != nil {
		return x.RemovedChunks
	}
	return nil
}

func (x *CommandBuildUpdateChunkCountArchive) GetIdentifiersForChunksPriorToRemovedChunks() []*BuildChunkIdentifierArchive {
	if x != nil {
		return x.IdentifiersForChunksPriorToRemovedChunks
	}
	return nil
}

func (x *CommandBuildUpdateChunkCountArchive) GetOldDeliveryStyleTuples() []*Reference {
	if x != nil {
		return x.OldDeliveryStyleTuples
	}
	return nil
}

func (x *CommandBuildUpdateChunkCountArchive) GetOldChunk_IDSeeds() []uint32 {
	if x != nil {
		return x.OldChunk_IDSeeds
	}
	return nil
}

func (x *CommandBuildUpdateChunkCountArchive) GetOldChunkIdentifiers() []*BuildChunkIdentifierArchive {
	if x != nil {
		return x.OldChunkIdentifiers
	}
	return nil
}

func (x *CommandBuildUpdateChunkCountArchive) GetWorkingBuilds() []*Reference {
	if x != nil {
		return x.WorkingBuilds
	}
	return nil
}

func (x *CommandBuildUpdateChunkCountArchive) GetChunksRemovedDuringUndo() []*Reference {
	if x != nil {
		return x.ChunksRemovedDuringUndo
	}
	return nil
}

func (x *CommandBuildUpdateChunkCountArchive) GetChunksAddedDuringUndo() []*Reference {
	if x != nil {
		return x.ChunksAddedDuringUndo
	}
	return nil
}

type CommandBuildChunkSetValueArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super             *CommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	TuplesToUpdate    []*Reference    `protobuf:"bytes,2,rep,name=tuples_to_update,json=tuplesToUpdate" json:"tuples_to_update,omitempty"`
	OldTuplesToUpdate []*Reference    `protobuf:"bytes,3,rep,name=old_tuples_to_update,json=oldTuplesToUpdate" json:"old_tuples_to_update,omitempty"`
}

func (x *CommandBuildChunkSetValueArchive) Reset() {
	*x = CommandBuildChunkSetValueArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandBuildChunkSetValueArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandBuildChunkSetValueArchive) ProtoMessage() {}

func (x *CommandBuildChunkSetValueArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandBuildChunkSetValueArchive.ProtoReflect.Descriptor instead.
func (*CommandBuildChunkSetValueArchive) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{38}
}

func (x *CommandBuildChunkSetValueArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandBuildChunkSetValueArchive) GetTuplesToUpdate() []*Reference {
	if x != nil {
		return x.TuplesToUpdate
	}
	return nil
}

func (x *CommandBuildChunkSetValueArchive) GetOldTuplesToUpdate() []*Reference {
	if x != nil {
		return x.OldTuplesToUpdate
	}
	return nil
}

type CommandTransitionSetValueArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super           *CommandArchive              `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	SlideNodeIdPath *UUIDPath                    `protobuf:"bytes,2,req,name=slide_node_id_path,json=slideNodeIdPath" json:"slide_node_id_path,omitempty"`
	OldAttributes   *TransitionAttributesArchive `protobuf:"bytes,3,opt,name=old_attributes,json=oldAttributes" json:"old_attributes,omitempty"`
	Attributes      *TransitionAttributesArchive `protobuf:"bytes,4,opt,name=attributes" json:"attributes,omitempty"`
	Property        *string                      `protobuf:"bytes,5,opt,name=property" json:"property,omitempty"`
}

func (x *CommandTransitionSetValueArchive) Reset() {
	*x = CommandTransitionSetValueArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandTransitionSetValueArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandTransitionSetValueArchive) ProtoMessage() {}

func (x *CommandTransitionSetValueArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandTransitionSetValueArchive.ProtoReflect.Descriptor instead.
func (*CommandTransitionSetValueArchive) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{39}
}

func (x *CommandTransitionSetValueArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandTransitionSetValueArchive) GetSlideNodeIdPath() *UUIDPath {
	if x != nil {
		return x.SlideNodeIdPath
	}
	return nil
}

func (x *CommandTransitionSetValueArchive) GetOldAttributes() *TransitionAttributesArchive {
	if x != nil {
		return x.OldAttributes
	}
	return nil
}

func (x *CommandTransitionSetValueArchive) GetAttributes() *TransitionAttributesArchive {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *CommandTransitionSetValueArchive) GetProperty() string {
	if x != nil && x.Property != nil {
		return *x.Property
	}
	return ""
}

type CommandShowSetSlideNumberVisibilityArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                         *CommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	SlideNumbersVisible           *bool           `protobuf:"varint,3,req,name=slide_numbers_visible,json=slideNumbersVisible" json:"slide_numbers_visible,omitempty"`
	IdsOfSlideNodesToSkip         []*UUID         `protobuf:"bytes,4,rep,name=ids_of_slide_nodes_to_skip,json=idsOfSlideNodesToSkip" json:"ids_of_slide_nodes_to_skip,omitempty"`
	IdsOfSlideNodesAlreadyCorrect []*UUID         `protobuf:"bytes,5,rep,name=ids_of_slide_nodes_already_correct,json=idsOfSlideNodesAlreadyCorrect" json:"ids_of_slide_nodes_already_correct,omitempty"`
	IsUndo                        *bool           `protobuf:"varint,6,req,name=is_undo,json=isUndo" json:"is_undo,omitempty"`
}

func (x *CommandShowSetSlideNumberVisibilityArchive) Reset() {
	*x = CommandShowSetSlideNumberVisibilityArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandShowSetSlideNumberVisibilityArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandShowSetSlideNumberVisibilityArchive) ProtoMessage() {}

func (x *CommandShowSetSlideNumberVisibilityArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandShowSetSlideNumberVisibilityArchive.ProtoReflect.Descriptor instead.
func (*CommandShowSetSlideNumberVisibilityArchive) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{40}
}

func (x *CommandShowSetSlideNumberVisibilityArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandShowSetSlideNumberVisibilityArchive) GetSlideNumbersVisible() bool {
	if x != nil && x.SlideNumbersVisible != nil {
		return *x.SlideNumbersVisible
	}
	return false
}

func (x *CommandShowSetSlideNumberVisibilityArchive) GetIdsOfSlideNodesToSkip() []*UUID {
	if x != nil {
		return x.IdsOfSlideNodesToSkip
	}
	return nil
}

func (x *CommandShowSetSlideNumberVisibilityArchive) GetIdsOfSlideNodesAlreadyCorrect() []*UUID {
	if x != nil {
		return x.IdsOfSlideNodesAlreadyCorrect
	}
	return nil
}

func (x *CommandShowSetSlideNumberVisibilityArchive) GetIsUndo() bool {
	if x != nil && x.IsUndo != nil {
		return *x.IsUndo
	}
	return false
}

type CommandTemplateSetThumbnailTextArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super      *CommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	TemplateId *UUID           `protobuf:"bytes,2,req,name=template_id,json=templateId" json:"template_id,omitempty"`
	IsBody     *bool           `protobuf:"varint,3,req,name=is_body,json=isBody" json:"is_body,omitempty"`
	NewText    *string         `protobuf:"bytes,4,opt,name=new_text,json=newText" json:"new_text,omitempty"`
	OldText    *string         `protobuf:"bytes,5,opt,name=old_text,json=oldText" json:"old_text,omitempty"`
}

func (x *CommandTemplateSetThumbnailTextArchive) Reset() {
	*x = CommandTemplateSetThumbnailTextArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandTemplateSetThumbnailTextArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandTemplateSetThumbnailTextArchive) ProtoMessage() {}

func (x *CommandTemplateSetThumbnailTextArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandTemplateSetThumbnailTextArchive.ProtoReflect.Descriptor instead.
func (*CommandTemplateSetThumbnailTextArchive) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{41}
}

func (x *CommandTemplateSetThumbnailTextArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandTemplateSetThumbnailTextArchive) GetTemplateId() *UUID {
	if x != nil {
		return x.TemplateId
	}
	return nil
}

func (x *CommandTemplateSetThumbnailTextArchive) GetIsBody() bool {
	if x != nil && x.IsBody != nil {
		return *x.IsBody
	}
	return false
}

func (x *CommandTemplateSetThumbnailTextArchive) GetNewText() string {
	if x != nil && x.NewText != nil {
		return *x.NewText
	}
	return ""
}

func (x *CommandTemplateSetThumbnailTextArchive) GetOldText() string {
	if x != nil && x.OldText != nil {
		return *x.OldText
	}
	return ""
}

type CommandTemplateSetBodyStylesArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super              *CommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	TemplateId         *UUID           `protobuf:"bytes,2,req,name=template_id,json=templateId" json:"template_id,omitempty"`
	NewParagraphStyles []*Reference    `protobuf:"bytes,3,rep,name=new_paragraph_styles,json=newParagraphStyles" json:"new_paragraph_styles,omitempty"`
	NewListStyles      []*Reference    `protobuf:"bytes,4,rep,name=new_list_styles,json=newListStyles" json:"new_list_styles,omitempty"`
	OldParagraphStyles []*Reference    `protobuf:"bytes,5,rep,name=old_paragraph_styles,json=oldParagraphStyles" json:"old_paragraph_styles,omitempty"`
	OldListStyles      []*Reference    `protobuf:"bytes,6,rep,name=old_list_styles,json=oldListStyles" json:"old_list_styles,omitempty"`
}

func (x *CommandTemplateSetBodyStylesArchive) Reset() {
	*x = CommandTemplateSetBodyStylesArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandTemplateSetBodyStylesArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandTemplateSetBodyStylesArchive) ProtoMessage() {}

func (x *CommandTemplateSetBodyStylesArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandTemplateSetBodyStylesArchive.ProtoReflect.Descriptor instead.
func (*CommandTemplateSetBodyStylesArchive) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{42}
}

func (x *CommandTemplateSetBodyStylesArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandTemplateSetBodyStylesArchive) GetTemplateId() *UUID {
	if x != nil {
		return x.TemplateId
	}
	return nil
}

func (x *CommandTemplateSetBodyStylesArchive) GetNewParagraphStyles() []*Reference {
	if x != nil {
		return x.NewParagraphStyles
	}
	return nil
}

func (x *CommandTemplateSetBodyStylesArchive) GetNewListStyles() []*Reference {
	if x != nil {
		return x.NewListStyles
	}
	return nil
}

func (x *CommandTemplateSetBodyStylesArchive) GetOldParagraphStyles() []*Reference {
	if x != nil {
		return x.OldParagraphStyles
	}
	return nil
}

func (x *CommandTemplateSetBodyStylesArchive) GetOldListStyles() []*Reference {
	if x != nil {
		return x.OldListStyles
	}
	return nil
}

type CommandChangeTemplateSlideArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                *CommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	SlideIdPath          *UUIDPath       `protobuf:"bytes,2,req,name=slide_id_path,json=slideIdPath" json:"slide_id_path,omitempty"`
	TemplateSlideNode    *Reference      `protobuf:"bytes,3,req,name=template_slide_node,json=templateSlideNode" json:"template_slide_node,omitempty"`
	OldTemplateSlideNode *Reference      `protobuf:"bytes,4,opt,name=old_template_slide_node,json=oldTemplateSlideNode" json:"old_template_slide_node,omitempty"`
	IsUndoRedo           *bool           `protobuf:"varint,5,req,name=is_undo_redo,json=isUndoRedo" json:"is_undo_redo,omitempty"`
	TargetPrototype      *Reference      `protobuf:"bytes,6,opt,name=target_prototype,json=targetPrototype" json:"target_prototype,omitempty"`
}

func (x *CommandChangeTemplateSlideArchive) Reset() {
	*x = CommandChangeTemplateSlideArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandChangeTemplateSlideArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandChangeTemplateSlideArchive) ProtoMessage() {}

func (x *CommandChangeTemplateSlideArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandChangeTemplateSlideArchive.ProtoReflect.Descriptor instead.
func (*CommandChangeTemplateSlideArchive) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{43}
}

func (x *CommandChangeTemplateSlideArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandChangeTemplateSlideArchive) GetSlideIdPath() *UUIDPath {
	if x != nil {
		return x.SlideIdPath
	}
	return nil
}

func (x *CommandChangeTemplateSlideArchive) GetTemplateSlideNode() *Reference {
	if x != nil {
		return x.TemplateSlideNode
	}
	return nil
}

func (x *CommandChangeTemplateSlideArchive) GetOldTemplateSlideNode() *Reference {
	if x != nil {
		return x.OldTemplateSlideNode
	}
	return nil
}

func (x *CommandChangeTemplateSlideArchive) GetIsUndoRedo() bool {
	if x != nil && x.IsUndoRedo != nil {
		return *x.IsUndoRedo
	}
	return false
}

func (x *CommandChangeTemplateSlideArchive) GetTargetPrototype() *Reference {
	if x != nil {
		return x.TargetPrototype
	}
	return nil
}

type CommandSlidePrimitiveSetTemplateArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                *CommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	SlideIdPath          *UUIDPath       `protobuf:"bytes,2,req,name=slide_id_path,json=slideIdPath" json:"slide_id_path,omitempty"`
	TemplateId           *UUID           `protobuf:"bytes,3,req,name=template_id,json=templateId" json:"template_id,omitempty"`
	OldTemplateSlideNode *Reference      `protobuf:"bytes,4,opt,name=old_template_slide_node,json=oldTemplateSlideNode" json:"old_template_slide_node,omitempty"`
}

func (x *CommandSlidePrimitiveSetTemplateArchive) Reset() {
	*x = CommandSlidePrimitiveSetTemplateArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSlidePrimitiveSetTemplateArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSlidePrimitiveSetTemplateArchive) ProtoMessage() {}

func (x *CommandSlidePrimitiveSetTemplateArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSlidePrimitiveSetTemplateArchive.ProtoReflect.Descriptor instead.
func (*CommandSlidePrimitiveSetTemplateArchive) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{44}
}

func (x *CommandSlidePrimitiveSetTemplateArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandSlidePrimitiveSetTemplateArchive) GetSlideIdPath() *UUIDPath {
	if x != nil {
		return x.SlideIdPath
	}
	return nil
}

func (x *CommandSlidePrimitiveSetTemplateArchive) GetTemplateId() *UUID {
	if x != nil {
		return x.TemplateId
	}
	return nil
}

func (x *CommandSlidePrimitiveSetTemplateArchive) GetOldTemplateSlideNode() *Reference {
	if x != nil {
		return x.OldTemplateSlideNode
	}
	return nil
}

type CommandSlideResetTemplateBackgroundObjectsArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super       *CommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	SlideIdPath *UUIDPath       `protobuf:"bytes,2,opt,name=slide_id_path,json=slideIdPath" json:"slide_id_path,omitempty"`
}

func (x *CommandSlideResetTemplateBackgroundObjectsArchive) Reset() {
	*x = CommandSlideResetTemplateBackgroundObjectsArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSlideResetTemplateBackgroundObjectsArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSlideResetTemplateBackgroundObjectsArchive) ProtoMessage() {}

func (x *CommandSlideResetTemplateBackgroundObjectsArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSlideResetTemplateBackgroundObjectsArchive.ProtoReflect.Descriptor instead.
func (*CommandSlideResetTemplateBackgroundObjectsArchive) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{45}
}

func (x *CommandSlideResetTemplateBackgroundObjectsArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandSlideResetTemplateBackgroundObjectsArchive) GetSlideIdPath() *UUIDPath {
	if x != nil {
		return x.SlideIdPath
	}
	return nil
}

type CommandShowSetSoundtrack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super         *CommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Show          *Reference      `protobuf:"bytes,2,opt,name=show" json:"show,omitempty"`
	Soundtrack    *Reference      `protobuf:"bytes,3,opt,name=soundtrack" json:"soundtrack,omitempty"`
	OldSoundtrack *Reference      `protobuf:"bytes,4,opt,name=old_soundtrack,json=oldSoundtrack" json:"old_soundtrack,omitempty"`
}

func (x *CommandShowSetSoundtrack) Reset() {
	*x = CommandShowSetSoundtrack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandShowSetSoundtrack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandShowSetSoundtrack) ProtoMessage() {}

func (x *CommandShowSetSoundtrack) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandShowSetSoundtrack.ProtoReflect.Descriptor instead.
func (*CommandShowSetSoundtrack) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{46}
}

func (x *CommandShowSetSoundtrack) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandShowSetSoundtrack) GetShow() *Reference {
	if x != nil {
		return x.Show
	}
	return nil
}

func (x *CommandShowSetSoundtrack) GetSoundtrack() *Reference {
	if x != nil {
		return x.Soundtrack
	}
	return nil
}

func (x *CommandShowSetSoundtrack) GetOldSoundtrack() *Reference {
	if x != nil {
		return x.OldSoundtrack
	}
	return nil
}

type CommandSoundtrackSetValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super        *CommandArchive                          `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	SoundtrackId *UUID                                    `protobuf:"bytes,2,opt,name=soundtrack_id,json=soundtrackId" json:"soundtrack_id,omitempty"`
	Property     *string                                  `protobuf:"bytes,3,opt,name=property" json:"property,omitempty"`
	OldValue     *CommandSoundtrackSetValue_PropertyValue `protobuf:"bytes,4,opt,name=old_value,json=oldValue" json:"old_value,omitempty"`
	NewValue     *CommandSoundtrackSetValue_PropertyValue `protobuf:"bytes,5,opt,name=new_value,json=newValue" json:"new_value,omitempty"`
}

func (x *CommandSoundtrackSetValue) Reset() {
	*x = CommandSoundtrackSetValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSoundtrackSetValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSoundtrackSetValue) ProtoMessage() {}

func (x *CommandSoundtrackSetValue) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSoundtrackSetValue.ProtoReflect.Descriptor instead.
func (*CommandSoundtrackSetValue) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{47}
}

func (x *CommandSoundtrackSetValue) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandSoundtrackSetValue) GetSoundtrackId() *UUID {
	if x != nil {
		return x.SoundtrackId
	}
	return nil
}

func (x *CommandSoundtrackSetValue) GetProperty() string {
	if x != nil && x.Property != nil {
		return *x.Property
	}
	return ""
}

func (x *CommandSoundtrackSetValue) GetOldValue() *CommandSoundtrackSetValue_PropertyValue {
	if x != nil {
		return x.OldValue
	}
	return nil
}

func (x *CommandSoundtrackSetValue) GetNewValue() *CommandSoundtrackSetValue_PropertyValue {
	if x != nil {
		return x.NewValue
	}
	return nil
}

type CommandSlideUpdateTemplateDrawables struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                    *CommandArchive             `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	SlideId                  *UUID                       `protobuf:"bytes,2,req,name=slide_id,json=slideId" json:"slide_id,omitempty"`
	IdPlacementOperationArgs []*IdPlacementOperationArgs `protobuf:"bytes,3,rep,name=id_placement_operation_args,json=idPlacementOperationArgs" json:"id_placement_operation_args,omitempty"`
	OldChildInfosForUndo     []*Reference                `protobuf:"bytes,4,rep,name=old_child_infos_for_undo,json=oldChildInfosForUndo" json:"old_child_infos_for_undo,omitempty"`
}

func (x *CommandSlideUpdateTemplateDrawables) Reset() {
	*x = CommandSlideUpdateTemplateDrawables{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSlideUpdateTemplateDrawables) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSlideUpdateTemplateDrawables) ProtoMessage() {}

func (x *CommandSlideUpdateTemplateDrawables) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSlideUpdateTemplateDrawables.ProtoReflect.Descriptor instead.
func (*CommandSlideUpdateTemplateDrawables) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{48}
}

func (x *CommandSlideUpdateTemplateDrawables) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandSlideUpdateTemplateDrawables) GetSlideId() *UUID {
	if x != nil {
		return x.SlideId
	}
	return nil
}

func (x *CommandSlideUpdateTemplateDrawables) GetIdPlacementOperationArgs() []*IdPlacementOperationArgs {
	if x != nil {
		return x.IdPlacementOperationArgs
	}
	return nil
}

func (x *CommandSlideUpdateTemplateDrawables) GetOldChildInfosForUndo() []*Reference {
	if x != nil {
		return x.OldChildInfosForUndo
	}
	return nil
}

type ChartInfoGeometryCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                *InfoGeometryCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	PreviousLegendOffset *Point                      `protobuf:"bytes,2,req,name=previous_legend_offset,json=previousLegendOffset" json:"previous_legend_offset,omitempty"`
	PreviousLegendSize   *Size                       `protobuf:"bytes,3,req,name=previous_legend_size,json=previousLegendSize" json:"previous_legend_size,omitempty"`
	AdjustedLegendOffset *Point                      `protobuf:"bytes,4,req,name=adjusted_legend_offset,json=adjustedLegendOffset" json:"adjusted_legend_offset,omitempty"`
	AdjustedLegendSize   *Size                       `protobuf:"bytes,5,req,name=adjusted_legend_size,json=adjustedLegendSize" json:"adjusted_legend_size,omitempty"`
}

func (x *ChartInfoGeometryCommandArchive) Reset() {
	*x = ChartInfoGeometryCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartInfoGeometryCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartInfoGeometryCommandArchive) ProtoMessage() {}

func (x *ChartInfoGeometryCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartInfoGeometryCommandArchive.ProtoReflect.Descriptor instead.
func (*ChartInfoGeometryCommandArchive) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{49}
}

func (x *ChartInfoGeometryCommandArchive) GetSuper() *InfoGeometryCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *ChartInfoGeometryCommandArchive) GetPreviousLegendOffset() *Point {
	if x != nil {
		return x.PreviousLegendOffset
	}
	return nil
}

func (x *ChartInfoGeometryCommandArchive) GetPreviousLegendSize() *Size {
	if x != nil {
		return x.PreviousLegendSize
	}
	return nil
}

func (x *ChartInfoGeometryCommandArchive) GetAdjustedLegendOffset() *Point {
	if x != nil {
		return x.AdjustedLegendOffset
	}
	return nil
}

func (x *ChartInfoGeometryCommandArchive) GetAdjustedLegendSize() *Size {
	if x != nil {
		return x.AdjustedLegendSize
	}
	return nil
}

type CanvasSelectionTransformerArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransformerHelper               *InfoCollectionSelectionTransformerHelperArchive `protobuf:"bytes,1,req,name=transformer_helper,json=transformerHelper" json:"transformer_helper,omitempty"`
	BuildChunkIds                   []*BuildChunkIdentifierArchive                   `protobuf:"bytes,2,rep,name=build_chunk_ids,json=buildChunkIds" json:"build_chunk_ids,omitempty"`
	ActionBuildIds                  []*UUID                                          `protobuf:"bytes,3,rep,name=action_build_ids,json=actionBuildIds" json:"action_build_ids,omitempty"`
	OriginallySelectedDrawableUuids []*UUID                                          `protobuf:"bytes,4,rep,name=originally_selected_drawable_uuids,json=originallySelectedDrawableUuids" json:"originally_selected_drawable_uuids,omitempty"`
}

func (x *CanvasSelectionTransformerArchive) Reset() {
	*x = CanvasSelectionTransformerArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CanvasSelectionTransformerArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CanvasSelectionTransformerArchive) ProtoMessage() {}

func (x *CanvasSelectionTransformerArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CanvasSelectionTransformerArchive.ProtoReflect.Descriptor instead.
func (*CanvasSelectionTransformerArchive) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{50}
}

func (x *CanvasSelectionTransformerArchive) GetTransformerHelper() *InfoCollectionSelectionTransformerHelperArchive {
	if x != nil {
		return x.TransformerHelper
	}
	return nil
}

func (x *CanvasSelectionTransformerArchive) GetBuildChunkIds() []*BuildChunkIdentifierArchive {
	if x != nil {
		return x.BuildChunkIds
	}
	return nil
}

func (x *CanvasSelectionTransformerArchive) GetActionBuildIds() []*UUID {
	if x != nil {
		return x.ActionBuildIds
	}
	return nil
}

func (x *CanvasSelectionTransformerArchive) GetOriginallySelectedDrawableUuids() []*UUID {
	if x != nil {
		return x.OriginallySelectedDrawableUuids
	}
	return nil
}

type ActionGhostSelectionTransformerArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ActionGhostSelectionTransformerArchive) Reset() {
	*x = ActionGhostSelectionTransformerArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionGhostSelectionTransformerArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionGhostSelectionTransformerArchive) ProtoMessage() {}

func (x *ActionGhostSelectionTransformerArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionGhostSelectionTransformerArchive.ProtoReflect.Descriptor instead.
func (*ActionGhostSelectionTransformerArchive) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{51}
}

type DocumentSelectionTransformerArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocumentSelection *Reference `protobuf:"bytes,1,req,name=document_selection,json=documentSelection" json:"document_selection,omitempty"`
}

func (x *DocumentSelectionTransformerArchive) Reset() {
	*x = DocumentSelectionTransformerArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentSelectionTransformerArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentSelectionTransformerArchive) ProtoMessage() {}

func (x *DocumentSelectionTransformerArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentSelectionTransformerArchive.ProtoReflect.Descriptor instead.
func (*DocumentSelectionTransformerArchive) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{52}
}

func (x *DocumentSelectionTransformerArchive) GetDocumentSelection() *Reference {
	if x != nil {
		return x.DocumentSelection
	}
	return nil
}

type NoteCanvasSelectionTransformerArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransformerHelper *InfoCollectionSelectionTransformerHelperArchive `protobuf:"bytes,1,req,name=transformer_helper,json=transformerHelper" json:"transformer_helper,omitempty"`
}

func (x *NoteCanvasSelectionTransformerArchive) Reset() {
	*x = NoteCanvasSelectionTransformerArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoteCanvasSelectionTransformerArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteCanvasSelectionTransformerArchive) ProtoMessage() {}

func (x *NoteCanvasSelectionTransformerArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteCanvasSelectionTransformerArchive.ProtoReflect.Descriptor instead.
func (*NoteCanvasSelectionTransformerArchive) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{53}
}

func (x *NoteCanvasSelectionTransformerArchive) GetTransformerHelper() *InfoCollectionSelectionTransformerHelperArchive {
	if x != nil {
		return x.TransformerHelper
	}
	return nil
}

type OutlineCanvasSelectionTransformerArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CanvasSelectionTransformer *Reference `protobuf:"bytes,1,req,name=canvas_selection_transformer,json=canvasSelectionTransformer" json:"canvas_selection_transformer,omitempty"`
	StorageUuidPath            *UUIDPath  `protobuf:"bytes,2,opt,name=storage_uuid_path,json=storageUuidPath" json:"storage_uuid_path,omitempty"`
}

func (x *OutlineCanvasSelectionTransformerArchive) Reset() {
	*x = OutlineCanvasSelectionTransformerArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutlineCanvasSelectionTransformerArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutlineCanvasSelectionTransformerArchive) ProtoMessage() {}

func (x *OutlineCanvasSelectionTransformerArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutlineCanvasSelectionTransformerArchive.ProtoReflect.Descriptor instead.
func (*OutlineCanvasSelectionTransformerArchive) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{54}
}

func (x *OutlineCanvasSelectionTransformerArchive) GetCanvasSelectionTransformer() *Reference {
	if x != nil {
		return x.CanvasSelectionTransformer
	}
	return nil
}

func (x *OutlineCanvasSelectionTransformerArchive) GetStorageUuidPath() *UUIDPath {
	if x != nil {
		return x.StorageUuidPath
	}
	return nil
}

type SlideCollectionSelectionTransformerHelperArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlideNodes                   []*UUIDPath `protobuf:"bytes,1,rep,name=slide_nodes,json=slideNodes" json:"slide_nodes,omitempty"`
	SlideNodeToEdit              *UUIDPath   `protobuf:"bytes,2,opt,name=slide_node_to_edit,json=slideNodeToEdit" json:"slide_node_to_edit,omitempty"`
	SlideCollectionIsTheme       *bool       `protobuf:"varint,3,opt,name=slide_collection_is_theme,json=slideCollectionIsTheme,def=0" json:"slide_collection_is_theme,omitempty"`
	PreviousPrimarySelectedIndex *uint32     `protobuf:"varint,4,opt,name=previous_primary_selected_index,json=previousPrimarySelectedIndex" json:"previous_primary_selected_index,omitempty"`
}

// Default values for SlideCollectionSelectionTransformerHelperArchive fields.
const (
	Default_SlideCollectionSelectionTransformerHelperArchive_SlideCollectionIsTheme = bool(false)
)

func (x *SlideCollectionSelectionTransformerHelperArchive) Reset() {
	*x = SlideCollectionSelectionTransformerHelperArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlideCollectionSelectionTransformerHelperArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlideCollectionSelectionTransformerHelperArchive) ProtoMessage() {}

func (x *SlideCollectionSelectionTransformerHelperArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlideCollectionSelectionTransformerHelperArchive.ProtoReflect.Descriptor instead.
func (*SlideCollectionSelectionTransformerHelperArchive) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{55}
}

func (x *SlideCollectionSelectionTransformerHelperArchive) GetSlideNodes() []*UUIDPath {
	if x != nil {
		return x.SlideNodes
	}
	return nil
}

func (x *SlideCollectionSelectionTransformerHelperArchive) GetSlideNodeToEdit() *UUIDPath {
	if x != nil {
		return x.SlideNodeToEdit
	}
	return nil
}

func (x *SlideCollectionSelectionTransformerHelperArchive) GetSlideCollectionIsTheme() bool {
	if x != nil && x.SlideCollectionIsTheme != nil {
		return *x.SlideCollectionIsTheme
	}
	return Default_SlideCollectionSelectionTransformerHelperArchive_SlideCollectionIsTheme
}

func (x *SlideCollectionSelectionTransformerHelperArchive) GetPreviousPrimarySelectedIndex() uint32 {
	if x != nil && x.PreviousPrimarySelectedIndex != nil {
		return *x.PreviousPrimarySelectedIndex
	}
	return 0
}

type SlideCollectionSelectionTransformerArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransformerHelper *SlideCollectionSelectionTransformerHelperArchive `protobuf:"bytes,1,req,name=transformer_helper,json=transformerHelper" json:"transformer_helper,omitempty"`
}

func (x *SlideCollectionSelectionTransformerArchive) Reset() {
	*x = SlideCollectionSelectionTransformerArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlideCollectionSelectionTransformerArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlideCollectionSelectionTransformerArchive) ProtoMessage() {}

func (x *SlideCollectionSelectionTransformerArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlideCollectionSelectionTransformerArchive.ProtoReflect.Descriptor instead.
func (*SlideCollectionSelectionTransformerArchive) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{56}
}

func (x *SlideCollectionSelectionTransformerArchive) GetTransformerHelper() *SlideCollectionSelectionTransformerHelperArchive {
	if x != nil {
		return x.TransformerHelper
	}
	return nil
}

type OutlineSelectionTransformerArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransformerHelper               *SlideCollectionSelectionTransformerHelperArchive `protobuf:"bytes,1,req,name=transformer_helper,json=transformerHelper" json:"transformer_helper,omitempty"`
	CanHaveRangeInSelectedParagraph *bool                                             `protobuf:"varint,2,opt,name=can_have_range_in_selected_paragraph,json=canHaveRangeInSelectedParagraph,def=0" json:"can_have_range_in_selected_paragraph,omitempty"`
	SelectionRangeAddresses         []*RangeAddress                                   `protobuf:"bytes,3,rep,name=selection_range_addresses,json=selectionRangeAddresses" json:"selection_range_addresses,omitempty"`
}

// Default values for OutlineSelectionTransformerArchive fields.
const (
	Default_OutlineSelectionTransformerArchive_CanHaveRangeInSelectedParagraph = bool(false)
)

func (x *OutlineSelectionTransformerArchive) Reset() {
	*x = OutlineSelectionTransformerArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutlineSelectionTransformerArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutlineSelectionTransformerArchive) ProtoMessage() {}

func (x *OutlineSelectionTransformerArchive) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutlineSelectionTransformerArchive.ProtoReflect.Descriptor instead.
func (*OutlineSelectionTransformerArchive) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{57}
}

func (x *OutlineSelectionTransformerArchive) GetTransformerHelper() *SlideCollectionSelectionTransformerHelperArchive {
	if x != nil {
		return x.TransformerHelper
	}
	return nil
}

func (x *OutlineSelectionTransformerArchive) GetCanHaveRangeInSelectedParagraph() bool {
	if x != nil && x.CanHaveRangeInSelectedParagraph != nil {
		return *x.CanHaveRangeInSelectedParagraph
	}
	return Default_OutlineSelectionTransformerArchive_CanHaveRangeInSelectedParagraph
}

func (x *OutlineSelectionTransformerArchive) GetSelectionRangeAddresses() []*RangeAddress {
	if x != nil {
		return x.SelectionRangeAddresses
	}
	return nil
}

type CommandLiveVideoInfoApplyPreset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *BaseApplyPresetCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
}

func (x *CommandLiveVideoInfoApplyPreset) Reset() {
	*x = CommandLiveVideoInfoApplyPreset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandLiveVideoInfoApplyPreset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandLiveVideoInfoApplyPreset) ProtoMessage() {}

func (x *CommandLiveVideoInfoApplyPreset) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandLiveVideoInfoApplyPreset.ProtoReflect.Descriptor instead.
func (*CommandLiveVideoInfoApplyPreset) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{58}
}

func (x *CommandLiveVideoInfoApplyPreset) GetSuper() *BaseApplyPresetCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

type CommandLiveVideoInfoSetSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                                          *CommandArchive                                `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	LiveVideoInfoIdPath                            *UUIDPath                                      `protobuf:"bytes,2,req,name=live_video_info_id_path,json=liveVideoInfoIdPath" json:"live_video_info_id_path,omitempty"`
	SourceId                                       *UUID                                          `protobuf:"bytes,3,opt,name=source_id,json=sourceId" json:"source_id,omitempty"`
	LocalCollaborationCommandUsageToken            *UUID                                          `protobuf:"bytes,4,opt,name=local_collaboration_command_usage_token,json=localCollaborationCommandUsageToken" json:"local_collaboration_command_usage_token,omitempty"`
	WorkingSourceOldCollaborationCommandUsageState *LiveVideoSourceCollaborationCommandUsageState `protobuf:"bytes,5,opt,name=working_source_old_collaboration_command_usage_state,json=workingSourceOldCollaborationCommandUsageState" json:"working_source_old_collaboration_command_usage_state,omitempty"`
	OldSource                                      *Reference                                     `protobuf:"bytes,6,opt,name=old_source,json=oldSource" json:"old_source,omitempty"`
	OldSourceId                                    *UUID                                          `protobuf:"bytes,7,opt,name=old_source_id,json=oldSourceId" json:"old_source_id,omitempty"`
}

func (x *CommandLiveVideoInfoSetSource) Reset() {
	*x = CommandLiveVideoInfoSetSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandLiveVideoInfoSetSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandLiveVideoInfoSetSource) ProtoMessage() {}

func (x *CommandLiveVideoInfoSetSource) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandLiveVideoInfoSetSource.ProtoReflect.Descriptor instead.
func (*CommandLiveVideoInfoSetSource) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{59}
}

func (x *CommandLiveVideoInfoSetSource) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandLiveVideoInfoSetSource) GetLiveVideoInfoIdPath() *UUIDPath {
	if x != nil {
		return x.LiveVideoInfoIdPath
	}
	return nil
}

func (x *CommandLiveVideoInfoSetSource) GetSourceId() *UUID {
	if x != nil {
		return x.SourceId
	}
	return nil
}

func (x *CommandLiveVideoInfoSetSource) GetLocalCollaborationCommandUsageToken() *UUID {
	if x != nil {
		return x.LocalCollaborationCommandUsageToken
	}
	return nil
}

func (x *CommandLiveVideoInfoSetSource) GetWorkingSourceOldCollaborationCommandUsageState() *LiveVideoSourceCollaborationCommandUsageState {
	if x != nil {
		return x.WorkingSourceOldCollaborationCommandUsageState
	}
	return nil
}

func (x *CommandLiveVideoInfoSetSource) GetOldSource() *Reference {
	if x != nil {
		return x.OldSource
	}
	return nil
}

func (x *CommandLiveVideoInfoSetSource) GetOldSourceId() *UUID {
	if x != nil {
		return x.OldSourceId
	}
	return nil
}

type CommandLiveVideoInfoSetValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super               *CommandArchive                             `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	LiveVideoInfoIdPath *UUIDPath                                   `protobuf:"bytes,2,req,name=live_video_info_id_path,json=liveVideoInfoIdPath" json:"live_video_info_id_path,omitempty"`
	Property            *CommandLiveVideoInfoSetValue_Property      `protobuf:"varint,3,req,name=property,enum=KN.CommandLiveVideoInfoSetValue_Property" json:"property,omitempty"`
	Value               *CommandLiveVideoInfoSetValue_PropertyValue `protobuf:"bytes,4,opt,name=value" json:"value,omitempty"`
	OldValue            *CommandLiveVideoInfoSetValue_PropertyValue `protobuf:"bytes,5,opt,name=old_value,json=oldValue" json:"old_value,omitempty"`
}

func (x *CommandLiveVideoInfoSetValue) Reset() {
	*x = CommandLiveVideoInfoSetValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandLiveVideoInfoSetValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandLiveVideoInfoSetValue) ProtoMessage() {}

func (x *CommandLiveVideoInfoSetValue) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandLiveVideoInfoSetValue.ProtoReflect.Descriptor instead.
func (*CommandLiveVideoInfoSetValue) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{60}
}

func (x *CommandLiveVideoInfoSetValue) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandLiveVideoInfoSetValue) GetLiveVideoInfoIdPath() *UUIDPath {
	if x != nil {
		return x.LiveVideoInfoIdPath
	}
	return nil
}

func (x *CommandLiveVideoInfoSetValue) GetProperty() CommandLiveVideoInfoSetValue_Property {
	if x != nil && x.Property != nil {
		return *x.Property
	}
	return CommandLiveVideoInfoSetValue_Scale
}

func (x *CommandLiveVideoInfoSetValue) GetValue() *CommandLiveVideoInfoSetValue_PropertyValue {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *CommandLiveVideoInfoSetValue) GetOldValue() *CommandLiveVideoInfoSetValue_PropertyValue {
	if x != nil {
		return x.OldValue
	}
	return nil
}

type CommandLiveVideoSourceSetValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super             *CommandArchive                               `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	LiveVideoSourceId *UUID                                         `protobuf:"bytes,2,req,name=live_video_source_id,json=liveVideoSourceId" json:"live_video_source_id,omitempty"`
	Property          *CommandLiveVideoSourceSetValue_Property      `protobuf:"varint,3,req,name=property,enum=KN.CommandLiveVideoSourceSetValue_Property" json:"property,omitempty"`
	Value             *CommandLiveVideoSourceSetValue_PropertyValue `protobuf:"bytes,4,opt,name=value" json:"value,omitempty"`
	OldValue          *CommandLiveVideoSourceSetValue_PropertyValue `protobuf:"bytes,5,opt,name=old_value,json=oldValue" json:"old_value,omitempty"`
}

func (x *CommandLiveVideoSourceSetValue) Reset() {
	*x = CommandLiveVideoSourceSetValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandLiveVideoSourceSetValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandLiveVideoSourceSetValue) ProtoMessage() {}

func (x *CommandLiveVideoSourceSetValue) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandLiveVideoSourceSetValue.ProtoReflect.Descriptor instead.
func (*CommandLiveVideoSourceSetValue) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{61}
}

func (x *CommandLiveVideoSourceSetValue) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandLiveVideoSourceSetValue) GetLiveVideoSourceId() *UUID {
	if x != nil {
		return x.LiveVideoSourceId
	}
	return nil
}

func (x *CommandLiveVideoSourceSetValue) GetProperty() CommandLiveVideoSourceSetValue_Property {
	if x != nil && x.Property != nil {
		return *x.Property
	}
	return CommandLiveVideoSourceSetValue_SourceName
}

func (x *CommandLiveVideoSourceSetValue) GetValue() *CommandLiveVideoSourceSetValue_PropertyValue {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *CommandLiveVideoSourceSetValue) GetOldValue() *CommandLiveVideoSourceSetValue_PropertyValue {
	if x != nil {
		return x.OldValue
	}
	return nil
}

type CommandLiveVideoStyleSetValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super  *BaseStyleSetValueCommandArchive    `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Change *MediaStylePropertyChangeSetArchive `protobuf:"bytes,2,opt,name=change" json:"change,omitempty"`
}

func (x *CommandLiveVideoStyleSetValue) Reset() {
	*x = CommandLiveVideoStyleSetValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandLiveVideoStyleSetValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandLiveVideoStyleSetValue) ProtoMessage() {}

func (x *CommandLiveVideoStyleSetValue) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandLiveVideoStyleSetValue.ProtoReflect.Descriptor instead.
func (*CommandLiveVideoStyleSetValue) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{62}
}

func (x *CommandLiveVideoStyleSetValue) GetSuper() *BaseStyleSetValueCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandLiveVideoStyleSetValue) GetChange() *MediaStylePropertyChangeSetArchive {
	if x != nil {
		return x.Change
	}
	return nil
}

type CommandThemeAddLiveVideoSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super           *CommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	LiveVideoSource *Reference      `protobuf:"bytes,2,opt,name=live_video_source,json=liveVideoSource" json:"live_video_source,omitempty"`
	IsImplicit      *bool           `protobuf:"varint,3,opt,name=is_implicit,json=isImplicit" json:"is_implicit,omitempty"`
}

func (x *CommandThemeAddLiveVideoSource) Reset() {
	*x = CommandThemeAddLiveVideoSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandThemeAddLiveVideoSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandThemeAddLiveVideoSource) ProtoMessage() {}

func (x *CommandThemeAddLiveVideoSource) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandThemeAddLiveVideoSource.ProtoReflect.Descriptor instead.
func (*CommandThemeAddLiveVideoSource) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{63}
}

func (x *CommandThemeAddLiveVideoSource) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandThemeAddLiveVideoSource) GetLiveVideoSource() *Reference {
	if x != nil {
		return x.LiveVideoSource
	}
	return nil
}

func (x *CommandThemeAddLiveVideoSource) GetIsImplicit() bool {
	if x != nil && x.IsImplicit != nil {
		return *x.IsImplicit
	}
	return false
}

type CommandThemeRemoveLiveVideoSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                  *CommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	LiveVideoSourceId      *UUID           `protobuf:"bytes,2,req,name=live_video_source_id,json=liveVideoSourceId" json:"live_video_source_id,omitempty"`
	IsImplicit             *bool           `protobuf:"varint,3,opt,name=is_implicit,json=isImplicit" json:"is_implicit,omitempty"`
	RemovedLiveVideoSource *Reference      `protobuf:"bytes,4,opt,name=removed_live_video_source,json=removedLiveVideoSource" json:"removed_live_video_source,omitempty"`
}

func (x *CommandThemeRemoveLiveVideoSource) Reset() {
	*x = CommandThemeRemoveLiveVideoSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandThemeRemoveLiveVideoSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandThemeRemoveLiveVideoSource) ProtoMessage() {}

func (x *CommandThemeRemoveLiveVideoSource) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandThemeRemoveLiveVideoSource.ProtoReflect.Descriptor instead.
func (*CommandThemeRemoveLiveVideoSource) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{64}
}

func (x *CommandThemeRemoveLiveVideoSource) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandThemeRemoveLiveVideoSource) GetLiveVideoSourceId() *UUID {
	if x != nil {
		return x.LiveVideoSourceId
	}
	return nil
}

func (x *CommandThemeRemoveLiveVideoSource) GetIsImplicit() bool {
	if x != nil && x.IsImplicit != nil {
		return *x.IsImplicit
	}
	return false
}

func (x *CommandThemeRemoveLiveVideoSource) GetRemovedLiveVideoSource() *Reference {
	if x != nil {
		return x.RemovedLiveVideoSource
	}
	return nil
}

type CommandShowSetValueArchive_PropertyValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BoolValue     *bool                   `protobuf:"varint,1,opt,name=bool_value,json=boolValue" json:"bool_value,omitempty"`
	DoubleValue   *float64                `protobuf:"fixed64,2,opt,name=double_value,json=doubleValue" json:"double_value,omitempty"`
	ShowModeValue *ShowArchive_KNShowMode `protobuf:"varint,3,opt,name=show_mode_value,json=showModeValue,enum=KN.ShowArchive_KNShowMode" json:"show_mode_value,omitempty"`
	SizeValue     *Size                   `protobuf:"bytes,4,opt,name=size_value,json=sizeValue" json:"size_value,omitempty"`
}

func (x *CommandShowSetValueArchive_PropertyValue) Reset() {
	*x = CommandShowSetValueArchive_PropertyValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandShowSetValueArchive_PropertyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandShowSetValueArchive_PropertyValue) ProtoMessage() {}

func (x *CommandShowSetValueArchive_PropertyValue) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandShowSetValueArchive_PropertyValue.ProtoReflect.Descriptor instead.
func (*CommandShowSetValueArchive_PropertyValue) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{15, 0}
}

func (x *CommandShowSetValueArchive_PropertyValue) GetBoolValue() bool {
	if x != nil && x.BoolValue != nil {
		return *x.BoolValue
	}
	return false
}

func (x *CommandShowSetValueArchive_PropertyValue) GetDoubleValue() float64 {
	if x != nil && x.DoubleValue != nil {
		return *x.DoubleValue
	}
	return 0
}

func (x *CommandShowSetValueArchive_PropertyValue) GetShowModeValue() ShowArchive_KNShowMode {
	if x != nil && x.ShowModeValue != nil {
		return *x.ShowModeValue
	}
	return ShowArchive_kKNShowModeNormal
}

func (x *CommandShowSetValueArchive_PropertyValue) GetSizeValue() *Size {
	if x != nil {
		return x.SizeValue
	}
	return nil
}

type CommandShowChangeThemeArchive_IdentifierToStyleMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Styles []*StylesheetArchive_IdentifiedStyleEntry `protobuf:"bytes,1,rep,name=styles" json:"styles,omitempty"`
}

func (x *CommandShowChangeThemeArchive_IdentifierToStyleMap) Reset() {
	*x = CommandShowChangeThemeArchive_IdentifierToStyleMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandShowChangeThemeArchive_IdentifierToStyleMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandShowChangeThemeArchive_IdentifierToStyleMap) ProtoMessage() {}

func (x *CommandShowChangeThemeArchive_IdentifierToStyleMap) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandShowChangeThemeArchive_IdentifierToStyleMap.ProtoReflect.Descriptor instead.
func (*CommandShowChangeThemeArchive_IdentifierToStyleMap) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{19, 0}
}

func (x *CommandShowChangeThemeArchive_IdentifierToStyleMap) GetStyles() []*StylesheetArchive_IdentifiedStyleEntry {
	if x != nil {
		return x.Styles
	}
	return nil
}

type CommandSoundtrackSetValue_PropertyValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DoubleValue          *float64                   `protobuf:"fixed64,1,opt,name=double_value,json=doubleValue" json:"double_value,omitempty"`
	ModeValue            *Soundtrack_SoundtrackMode `protobuf:"varint,2,opt,name=mode_value,json=modeValue,enum=KN.Soundtrack_SoundtrackMode" json:"mode_value,omitempty"`
	MediaReferenceValues []*DataReference           `protobuf:"bytes,3,rep,name=media_reference_values,json=mediaReferenceValues" json:"media_reference_values,omitempty"`
}

func (x *CommandSoundtrackSetValue_PropertyValue) Reset() {
	*x = CommandSoundtrackSetValue_PropertyValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSoundtrackSetValue_PropertyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSoundtrackSetValue_PropertyValue) ProtoMessage() {}

func (x *CommandSoundtrackSetValue_PropertyValue) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSoundtrackSetValue_PropertyValue.ProtoReflect.Descriptor instead.
func (*CommandSoundtrackSetValue_PropertyValue) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{47, 0}
}

func (x *CommandSoundtrackSetValue_PropertyValue) GetDoubleValue() float64 {
	if x != nil && x.DoubleValue != nil {
		return *x.DoubleValue
	}
	return 0
}

func (x *CommandSoundtrackSetValue_PropertyValue) GetModeValue() Soundtrack_SoundtrackMode {
	if x != nil && x.ModeValue != nil {
		return *x.ModeValue
	}
	return Soundtrack_kKNSoundtrackModePlayOnce
}

func (x *CommandSoundtrackSetValue_PropertyValue) GetMediaReferenceValues() []*DataReference {
	if x != nil {
		return x.MediaReferenceValues
	}
	return nil
}

type CommandLiveVideoInfoSetValue_PropertyValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scale            *float64 `protobuf:"fixed64,1,opt,name=scale" json:"scale,omitempty"`
	NormalizedOffset *Point   `protobuf:"bytes,2,opt,name=normalized_offset,json=normalizedOffset" json:"normalized_offset,omitempty"`
	MaskKind         *int32   `protobuf:"varint,3,opt,name=mask_kind,json=maskKind" json:"mask_kind,omitempty"`
	MaskCornerRadius *float64 `protobuf:"fixed64,4,opt,name=mask_corner_radius,json=maskCornerRadius" json:"mask_corner_radius,omitempty"`
	IsPlaceholder    *bool    `protobuf:"varint,5,opt,name=is_placeholder,json=isPlaceholder" json:"is_placeholder,omitempty"`
}

func (x *CommandLiveVideoInfoSetValue_PropertyValue) Reset() {
	*x = CommandLiveVideoInfoSetValue_PropertyValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandLiveVideoInfoSetValue_PropertyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandLiveVideoInfoSetValue_PropertyValue) ProtoMessage() {}

func (x *CommandLiveVideoInfoSetValue_PropertyValue) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandLiveVideoInfoSetValue_PropertyValue.ProtoReflect.Descriptor instead.
func (*CommandLiveVideoInfoSetValue_PropertyValue) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{60, 0}
}

func (x *CommandLiveVideoInfoSetValue_PropertyValue) GetScale() float64 {
	if x != nil && x.Scale != nil {
		return *x.Scale
	}
	return 0
}

func (x *CommandLiveVideoInfoSetValue_PropertyValue) GetNormalizedOffset() *Point {
	if x != nil {
		return x.NormalizedOffset
	}
	return nil
}

func (x *CommandLiveVideoInfoSetValue_PropertyValue) GetMaskKind() int32 {
	if x != nil && x.MaskKind != nil {
		return *x.MaskKind
	}
	return 0
}

func (x *CommandLiveVideoInfoSetValue_PropertyValue) GetMaskCornerRadius() float64 {
	if x != nil && x.MaskCornerRadius != nil {
		return *x.MaskCornerRadius
	}
	return 0
}

func (x *CommandLiveVideoInfoSetValue_PropertyValue) GetIsPlaceholder() bool {
	if x != nil && x.IsPlaceholder != nil {
		return *x.IsPlaceholder
	}
	return false
}

type CommandLiveVideoSourceSetValue_PropertyValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                      *string                            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	CaptureDeviceDescription  *LiveVideoCaptureDeviceDescription `protobuf:"bytes,2,opt,name=capture_device_description,json=captureDeviceDescription" json:"capture_device_description,omitempty"`
	PosterImageData           *DataReference                     `protobuf:"bytes,3,opt,name=poster_image_data,json=posterImageData" json:"poster_image_data,omitempty"`
	SymbolAbbreviationText    *string                            `protobuf:"bytes,4,opt,name=symbol_abbreviation_text,json=symbolAbbreviationText" json:"symbol_abbreviation_text,omitempty"`
	SymbolImageIdentifier     *int32                             `protobuf:"varint,5,opt,name=symbol_image_identifier,json=symbolImageIdentifier" json:"symbol_image_identifier,omitempty"`
	SymbolTintColorIdentifier *int32                             `protobuf:"varint,6,opt,name=symbol_tint_color_identifier,json=symbolTintColorIdentifier" json:"symbol_tint_color_identifier,omitempty"`
}

func (x *CommandLiveVideoSourceSetValue_PropertyValue) Reset() {
	*x = CommandLiveVideoSourceSetValue_PropertyValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_KNCommandArchives_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandLiveVideoSourceSetValue_PropertyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandLiveVideoSourceSetValue_PropertyValue) ProtoMessage() {}

func (x *CommandLiveVideoSourceSetValue_PropertyValue) ProtoReflect() protoreflect.Message {
	mi := &file_KNCommandArchives_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandLiveVideoSourceSetValue_PropertyValue.ProtoReflect.Descriptor instead.
func (*CommandLiveVideoSourceSetValue_PropertyValue) Descriptor() ([]byte, []int) {
	return file_KNCommandArchives_proto_rawDescGZIP(), []int{61, 0}
}

func (x *CommandLiveVideoSourceSetValue_PropertyValue) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CommandLiveVideoSourceSetValue_PropertyValue) GetCaptureDeviceDescription() *LiveVideoCaptureDeviceDescription {
	if x != nil {
		return x.CaptureDeviceDescription
	}
	return nil
}

func (x *CommandLiveVideoSourceSetValue_PropertyValue) GetPosterImageData() *DataReference {
	if x != nil {
		return x.PosterImageData
	}
	return nil
}

func (x *CommandLiveVideoSourceSetValue_PropertyValue) GetSymbolAbbreviationText() string {
	if x != nil && x.SymbolAbbreviationText != nil {
		return *x.SymbolAbbreviationText
	}
	return ""
}

func (x *CommandLiveVideoSourceSetValue_PropertyValue) GetSymbolImageIdentifier() int32 {
	if x != nil && x.SymbolImageIdentifier != nil {
		return *x.SymbolImageIdentifier
	}
	return 0
}

func (x *CommandLiveVideoSourceSetValue_PropertyValue) GetSymbolTintColorIdentifier() int32 {
	if x != nil && x.SymbolTintColorIdentifier != nil {
		return *x.SymbolTintColorIdentifier
	}
	return 0
}

var File_KNCommandArchives_proto protoreflect.FileDescriptor

var file_KNCommandArchives_proto_rawDesc = []byte{
	0x0a, 0x17, 0x4b, 0x4e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x4b, 0x4e, 0x1a, 0x11, 0x54,
	0x53, 0x50, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x11, 0x54, 0x53, 0x4b, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x54, 0x53, 0x53, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x54, 0x53, 0x44, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x54, 0x53, 0x44, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x5f, 0x73, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x18, 0x54, 0x53, 0x44, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x4b, 0x4e, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe1, 0x03, 0x0a,
	0x1a, 0x55, 0x49, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x4b,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x07, 0x75,
	0x69, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x75, 0x69,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x12, 0x3a, 0x0a, 0x10, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x54,
	0x6f, 0x45, 0x64, 0x69, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x73, 0x6c, 0x69,
	0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x54, 0x6f, 0x45, 0x64, 0x69, 0x74, 0x12, 0x50, 0x0a,
	0x1d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x19, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x6c,
	0x69, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x54, 0x6f, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12,
	0x31, 0x0a, 0x0e, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x53, 0x69, 0x7a, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x53, 0x69,
	0x7a, 0x65, 0x52, 0x0e, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x53, 0x69, 0x7a,
	0x65, 0x73, 0x12, 0x3e, 0x0a, 0x12, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x6c,
	0x69, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x12,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x12, 0x4c, 0x0a, 0x19, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x19, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x22, 0x86, 0x0a, 0x0a, 0x22, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x6c, 0x69, 0x64,
	0x65, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x44, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x12, 0x24, 0x0a, 0x08, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52,
	0x07, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x09, 0x64, 0x72, 0x61, 0x77,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x64, 0x72, 0x61,
	0x77, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x64, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x72, 0x61, 0x77, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4b, 0x4e, 0x2e, 0x4d, 0x69, 0x78, 0x65,
	0x64, 0x49, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x67, 0x73,
	0x52, 0x08, 0x61, 0x72, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5b, 0x0a, 0x2b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x6f,
	0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x02, 0x28, 0x08, 0x52,
	0x26, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x54,
	0x6f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x73, 0x0a, 0x32, 0x69, 0x64, 0x73, 0x5f, 0x6f,
	0x66, 0x5f, 0x64, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x75, 0x73, 0x69, 0x6e,
	0x67, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x2c,
	0x69, 0x64, 0x73, 0x4f, 0x66, 0x44, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x55, 0x73,
	0x69, 0x6e, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x3b, 0x0a, 0x1a,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x5f, 0x74, 0x61, 0x67, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x17, 0x73, 0x61, 0x67, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x54, 0x61, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x31, 0x0a, 0x0c, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x75, 0x6e, 0x64, 0x6f, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x61, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x4a, 0x0a, 0x19, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x17, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x59, 0x0a, 0x21, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x1e, 0x77, 0x6f, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4a, 0x0a, 0x19, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x17, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x47, 0x0a, 0x20, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x5f, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f,
	0x68, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x1d, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x12,
	0x37, 0x0a, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x4a, 0x0a, 0x22, 0x73, 0x61, 0x76, 0x65,
	0x64, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x64, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e, 0x73, 0x61, 0x76, 0x65, 0x64, 0x4e, 0x65, 0x78, 0x74, 0x55,
	0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x92, 0x01, 0x0a, 0x3d, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x54,
	0x53, 0x44, 0x2e, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x35, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x4f, 0x66, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x46,
	0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x54, 0x6f, 0x52, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x22, 0xfe, 0x01, 0x0a, 0x29, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x53, 0x65, 0x74, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x67, 0x73,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x12, 0x24, 0x0a, 0x08, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52,
	0x07, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x05, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x12, 0x2b, 0x0a, 0x09, 0x6f, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x6c, 0x64, 0x54, 0x61, 0x67, 0x73, 0x22, 0xba, 0x01, 0x0a, 0x2f, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x6c,
	0x69, 0x64, 0x65, 0x53, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x67, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x43,
	0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x4b, 0x4e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x53,
	0x65, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x46, 0x6f,
	0x72, 0x54, 0x61, 0x67, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0xd5, 0x01, 0x0a, 0x30, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x46,
	0x6f, 0x72, 0x54, 0x61, 0x67, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x43, 0x0a, 0x05,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x4b, 0x4e,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x53, 0x65, 0x74,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x54,
	0x61, 0x67, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x12, 0x30, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x55, 0x55, 0x49, 0x44, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55,
	0x55, 0x49, 0x44, 0x52, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x22,
	0xe3, 0x05, 0x0a, 0x21, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x6c, 0x69, 0x64, 0x65,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x12, 0x24, 0x0a, 0x08, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x07, 0x73,
	0x6c, 0x69, 0x64, 0x65, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x0f, 0x73, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x44, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x0f, 0x73, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x44, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x12, 0x35, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4b, 0x4e, 0x2e, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x49, 0x64,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x67, 0x73, 0x52, 0x08, 0x61,
	0x72, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x64, 0x72, 0x61, 0x77, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f,
	0x75, 0x6e, 0x64, 0x6f, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x16, 0x64, 0x72, 0x61, 0x77,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x6e,
	0x64, 0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x54, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x54, 0x61, 0x67, 0x73, 0x12, 0x36, 0x0a, 0x17,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x65,
	0x78, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x54, 0x65, 0x78, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x19, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x17, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x4a, 0x0a, 0x19, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x17, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x6c, 0x0a, 0x2b,
	0x64, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x5f,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x5f, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x27, 0x64, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x55, 0x73, 0x69, 0x6e,
	0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x59, 0x0a, 0x21, 0x69, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x68, 0x79, 0x70,
	0x65, 0x72, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x1e, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x73, 0x22, 0xcc, 0x02, 0x0a, 0x25, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x4d, 0x6f, 0x76, 0x65, 0x44, 0x72, 0x61, 0x77, 0x61, 0x62,
	0x6c, 0x65, 0x5a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12,
	0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x11, 0x6f, 0x6c,
	0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x6f, 0x6c, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x65,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x3a, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x54, 0x53, 0x4b, 0x2e,
	0x52, 0x65, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x67, 0x73, 0x52, 0x08, 0x61, 0x72, 0x67, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x24, 0x0a, 0x08, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52,
	0x07, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x49, 0x64, 0x12, 0x5a, 0x0a, 0x23, 0x6f, 0x6c, 0x64, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x5f, 0x6f, 0x6e,
	0x5f, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x75, 0x6e, 0x64, 0x6f, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x1d, 0x6f, 0x6c, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x65,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x4f, 0x6e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x46, 0x6f, 0x72,
	0x55, 0x6e, 0x64, 0x6f, 0x22, 0xda, 0x01, 0x0a, 0x22, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x53, 0x6c, 0x69, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x12, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x50, 0x61, 0x74,
	0x68, 0x52, 0x0f, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x1b,
	0x0a, 0x09, 0x6f, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28,
	0x08, 0x52, 0x08, 0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xe3, 0x01, 0x0a, 0x2b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x6c, 0x69,
	0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x74, 0x56, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x12,
	0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55,
	0x55, 0x49, 0x44, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0f, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x08,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xde, 0x01, 0x0a, 0x24, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x53, 0x65, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x0d, 0x73,
	0x6c, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x50, 0x61, 0x74,
	0x68, 0x52, 0x0b, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x49, 0x64, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2b,
	0x0a, 0x08, 0x6f, 0x6c, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x07, 0x6f, 0x6c, 0x64, 0x46, 0x69, 0x6c, 0x6c, 0x12, 0x2b, 0x0a, 0x08, 0x6e,
	0x65, 0x77, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x54, 0x53, 0x44, 0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x07, 0x6e, 0x65, 0x77, 0x46, 0x69, 0x6c, 0x6c, 0x22, 0xe4, 0x01, 0x0a, 0x1b, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x53, 0x65, 0x74, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x0d, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x55, 0x55, 0x49, 0x44, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0b, 0x73, 0x6c, 0x69, 0x64, 0x65,
	0x49, 0x64, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2f, 0x0a, 0x0b, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x73, 0x6c, 0x69,
	0x64, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x0f, 0x6f, 0x6c, 0x64, 0x5f, 0x73,
	0x6c, 0x69, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x0d, 0x6f, 0x6c, 0x64, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x22,
	0xb8, 0x03, 0x0a, 0x28, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x4d,
	0x61, 0x72, 0x6b, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53,
	0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x04, 0x73, 0x68, 0x6f, 0x77, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x04, 0x73, 0x68, 0x6f, 0x77, 0x12, 0x33, 0x0a, 0x0d, 0x6f,
	0x6c, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x0c, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x44, 0x0a, 0x1c, 0x6f, 0x6c, 0x64, 0x5f, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x79, 0x6e, 0x63,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x17, 0x6f,
	0x6c, 0x64, 0x49, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x4f, 0x75, 0x74,
	0x4f, 0x66, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x44, 0x0a, 0x1c, 0x6e, 0x65, 0x77, 0x5f, 0x69, 0x73,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6f,
	0x66, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x52, 0x17, 0x6e, 0x65, 0x77, 0x49, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x3d, 0x0a, 0x15,
	0x6f, 0x6c, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x13, 0x6f, 0x6c, 0x64, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x15, 0x6e,
	0x65, 0x77, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x13, 0x6e, 0x65, 0x77, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x30, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x4d, 0x61, 0x72, 0x6b, 0x4f, 0x75,
	0x74, 0x4f, 0x66, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x49, 0x66, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12,
	0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x11, 0x6f, 0x75,
	0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44,
	0x52, 0x0e, 0x6f, 0x75, 0x74, 0x4f, 0x66, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0xa7, 0x01, 0x0a, 0x21, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x68, 0x6f, 0x77,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x12, 0x22, 0x0a, 0x04, 0x73, 0x68, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x04, 0x73, 0x68, 0x6f, 0x77, 0x12, 0x33, 0x0a, 0x0d, 0x6f, 0x6c, 0x64, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x6f, 0x6c,
	0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x22, 0xed, 0x01, 0x0a, 0x22, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x04,
	0x73, 0x68, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x04, 0x73, 0x68, 0x6f, 0x77,
	0x12, 0x43, 0x0a, 0x15, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x14, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x33, 0x0a, 0x0d, 0x6f, 0x6c, 0x64, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x6f, 0x6c,
	0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x22, 0xdf, 0x03, 0x0a, 0x1a, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x04, 0x73, 0x68, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x04, 0x73, 0x68, 0x6f, 0x77, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x12, 0x49, 0x0a, 0x09, 0x6f, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x4b, 0x4e, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x49, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x4b, 0x4e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53,
	0x68, 0x6f, 0x77, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x08, 0x6e, 0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xbf, 0x01, 0x0a, 0x0d, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x42,
	0x0a, 0x0f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x4b, 0x4e, 0x2e, 0x53, 0x68, 0x6f,
	0x77, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x4b, 0x4e, 0x53, 0x68, 0x6f, 0x77, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x28, 0x0a, 0x0a, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x53, 0x69, 0x7a,
	0x65, 0x52, 0x09, 0x73, 0x69, 0x7a, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x96, 0x0a, 0x0a,
	0x1d, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29,
	0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x1a, 0x73, 0x6c, 0x69,
	0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x5f, 0x69,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x17, 0x73,
	0x6c, 0x69, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x42, 0x65, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x12, 0x5a, 0x0a, 0x22, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x62, 0x65,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x1e, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x69, 0x64, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x42, 0x65, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x65, 0x64, 0x12, 0x45, 0x0a, 0x12, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x72, 0x67, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x41, 0x64, 0x64, 0x49, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x72, 0x67, 0x73, 0x52, 0x10, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x65,
	0x64, 0x41, 0x72, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x59, 0x0a, 0x25, 0x69, 0x64, 0x73,
	0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55,
	0x55, 0x49, 0x44, 0x52, 0x1f, 0x69, 0x64, 0x73, 0x4f, 0x66, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x70, 0x74, 0x68, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x28, 0x64, 0x65, 0x70, 0x74, 0x68, 0x73, 0x5f, 0x6f,
	0x66, 0x5f, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x22, 0x64, 0x65, 0x70, 0x74, 0x68, 0x73, 0x4f, 0x66,
	0x53, 0x6c, 0x69, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65,
	0x70, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x5b, 0x0a, 0x2c, 0x6f, 0x6c,
	0x64, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x6c, 0x69, 0x64,
	0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x64, 0x65, 0x70,
	0x74, 0x68, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x25, 0x6f, 0x6c, 0x64, 0x44, 0x65, 0x70, 0x74, 0x68, 0x73, 0x4f, 0x66, 0x53, 0x6c, 0x69,
	0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x70, 0x74, 0x68,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x1c, 0x73, 0x6c, 0x69, 0x64, 0x65,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68,
	0x5f, 0x66, 0x69, 0x78, 0x5f, 0x75, 0x70, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x17, 0x73,
	0x6c, 0x69, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x44, 0x65, 0x70, 0x74,
	0x68, 0x46, 0x69, 0x78, 0x55, 0x70, 0x12, 0x4f, 0x0a, 0x26, 0x64, 0x65, 0x70, 0x74, 0x68, 0x73,
	0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f,
	0x66, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x5f, 0x66, 0x69, 0x78, 0x5f, 0x75, 0x70,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x1f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x73, 0x4f, 0x66,
	0x53, 0x6c, 0x69, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x44, 0x65, 0x70,
	0x74, 0x68, 0x46, 0x69, 0x78, 0x55, 0x70, 0x12, 0x56, 0x0a, 0x2a, 0x6f, 0x6c, 0x64, 0x5f, 0x64,
	0x65, 0x70, 0x74, 0x68, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x5f, 0x66,
	0x69, 0x78, 0x5f, 0x75, 0x70, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x22, 0x6f, 0x6c, 0x64,
	0x44, 0x65, 0x70, 0x74, 0x68, 0x73, 0x4f, 0x66, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x46, 0x6f, 0x72, 0x44, 0x65, 0x70, 0x74, 0x68, 0x46, 0x69, 0x78, 0x55, 0x70, 0x12,
	0x4c, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e,
	0x4b, 0x4e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x3a, 0x10, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x5c, 0x0a,
	0x23, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x1f, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x42, 0x65,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x12, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x6b, 0x65, 0x79,
	0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55,
	0x49, 0x44, 0x52, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x4b, 0x65, 0x79, 0x73, 0x12, 0x5e, 0x0a, 0x2d, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x6c, 0x69, 0x64, 0x65,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x08, 0x52, 0x27, 0x63, 0x6f, 0x6c,
	0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x53, 0x6c, 0x69,
	0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x42, 0x65, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x0c, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x75, 0x6e, 0x64, 0x6f,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x22, 0x5c, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12,
	0x14, 0x0a, 0x10, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x53, 0x6c,
	0x69, 0x64, 0x65, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x50, 0x61, 0x73, 0x74,
	0x65, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x10, 0x02, 0x22, 0xf7, 0x05, 0x0a, 0x1b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x53, 0x68, 0x6f, 0x77, 0x4d, 0x6f, 0x76, 0x65, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x12, 0x56, 0x0a, 0x20, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f,
	0x62, 0x65, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65,
	0x61, 0x72, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x1c, 0x73, 0x6c, 0x69, 0x64,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x42, 0x65, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x76, 0x65, 0x64,
	0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x12, 0x4f, 0x0a, 0x14, 0x72, 0x65, 0x61, 0x72,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x52, 0x65, 0x61,
	0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x72, 0x67, 0x73, 0x52, 0x12, 0x72, 0x65, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x64, 0x41, 0x72, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x59, 0x0a, 0x25, 0x69, 0x64, 0x73,
	0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55,
	0x55, 0x49, 0x44, 0x52, 0x1f, 0x69, 0x64, 0x73, 0x4f, 0x66, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x70, 0x74, 0x68, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x28, 0x64, 0x65, 0x70, 0x74, 0x68, 0x73, 0x5f, 0x6f,
	0x66, 0x5f, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x22, 0x64, 0x65, 0x70, 0x74, 0x68, 0x73, 0x4f, 0x66,
	0x53, 0x6c, 0x69, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65,
	0x70, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x5b, 0x0a, 0x2c, 0x6f, 0x6c,
	0x64, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x6c, 0x69, 0x64,
	0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x64, 0x65, 0x70,
	0x74, 0x68, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x25, 0x6f, 0x6c, 0x64, 0x44, 0x65, 0x70, 0x74, 0x68, 0x73, 0x4f, 0x66, 0x53, 0x6c, 0x69,
	0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x70, 0x74, 0x68,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x1c, 0x73, 0x6c, 0x69, 0x64, 0x65,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68,
	0x5f, 0x66, 0x69, 0x78, 0x5f, 0x75, 0x70, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x17, 0x73,
	0x6c, 0x69, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x44, 0x65, 0x70, 0x74,
	0x68, 0x46, 0x69, 0x78, 0x55, 0x70, 0x12, 0x4f, 0x0a, 0x26, 0x64, 0x65, 0x70, 0x74, 0x68, 0x73,
	0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f,
	0x66, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x5f, 0x66, 0x69, 0x78, 0x5f, 0x75, 0x70,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x1f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x73, 0x4f, 0x66,
	0x53, 0x6c, 0x69, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x44, 0x65, 0x70,
	0x74, 0x68, 0x46, 0x69, 0x78, 0x55, 0x70, 0x12, 0x56, 0x0a, 0x2a, 0x6f, 0x6c, 0x64, 0x5f, 0x64,
	0x65, 0x70, 0x74, 0x68, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x5f, 0x66,
	0x69, 0x78, 0x5f, 0x75, 0x70, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x22, 0x6f, 0x6c, 0x64,
	0x44, 0x65, 0x70, 0x74, 0x68, 0x73, 0x4f, 0x66, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x46, 0x6f, 0x72, 0x44, 0x65, 0x70, 0x74, 0x68, 0x46, 0x69, 0x78, 0x55, 0x70, 0x22,
	0xc1, 0x06, 0x0a, 0x1d, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x19,
	0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x62, 0x65, 0x69, 0x6e,
	0x67, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x16, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x42, 0x65, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x46, 0x0a, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x64, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49,
	0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x67, 0x73, 0x52, 0x0f,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x41, 0x72, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x59, 0x0a, 0x25, 0x69, 0x64, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x1f, 0x69, 0x64, 0x73, 0x4f, 0x66,
	0x53, 0x6c, 0x69, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65,
	0x70, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x28, 0x64, 0x65,
	0x70, 0x74, 0x68, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x22, 0x64, 0x65,
	0x70, 0x74, 0x68, 0x73, 0x4f, 0x66, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x70, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x12, 0x5b, 0x0a, 0x2c, 0x6f, 0x6c, 0x64, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x73, 0x5f, 0x6f,
	0x66, 0x5f, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x25, 0x6f, 0x6c, 0x64, 0x44, 0x65, 0x70, 0x74, 0x68,
	0x73, 0x4f, 0x66, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x57, 0x69, 0x74,
	0x68, 0x44, 0x65, 0x70, 0x74, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x4d, 0x0a,
	0x1c, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72,
	0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x5f, 0x66, 0x69, 0x78, 0x5f, 0x75, 0x70, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x17, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x46,
	0x6f, 0x72, 0x44, 0x65, 0x70, 0x74, 0x68, 0x46, 0x69, 0x78, 0x55, 0x70, 0x12, 0x4f, 0x0a, 0x26,
	0x64, 0x65, 0x70, 0x74, 0x68, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x5f,
	0x66, 0x69, 0x78, 0x5f, 0x75, 0x70, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x1f, 0x64, 0x65,
	0x70, 0x74, 0x68, 0x73, 0x4f, 0x66, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x46, 0x6f, 0x72, 0x44, 0x65, 0x70, 0x74, 0x68, 0x46, 0x69, 0x78, 0x55, 0x70, 0x12, 0x56, 0x0a,
	0x2a, 0x6f, 0x6c, 0x64, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x73,
	0x6c, 0x69, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x64,
	0x65, 0x70, 0x74, 0x68, 0x5f, 0x66, 0x69, 0x78, 0x5f, 0x75, 0x70, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x22, 0x6f, 0x6c, 0x64, 0x44, 0x65, 0x70, 0x74, 0x68, 0x73, 0x4f, 0x66, 0x53, 0x6c,
	0x69, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x44, 0x65, 0x70, 0x74, 0x68,
	0x46, 0x69, 0x78, 0x55, 0x70, 0x12, 0x5c, 0x0a, 0x2c, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x6c, 0x69, 0x64,
	0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x08, 0x52, 0x26, 0x63, 0x6f, 0x6c,
	0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x53, 0x6c, 0x69,
	0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x42, 0x65, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x64, 0x22, 0xec, 0x04, 0x0a, 0x1d, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53,
	0x68, 0x6f, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x12, 0x22, 0x0a, 0x04, 0x73, 0x68, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x04,
	0x73, 0x68, 0x6f, 0x77, 0x12, 0x24, 0x0a, 0x05, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x05, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x6f, 0x6c,
	0x64, 0x5f, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x6f,
	0x6c, 0x64, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x17, 0x6f, 0x6c, 0x64, 0x5f,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6f, 0x6c, 0x64, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x6d, 0x0a, 0x17, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x74,
	0x6f, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x4b, 0x4e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x68,
	0x6f, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54,
	0x6f, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x52, 0x14, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x6f, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x12,
	0x74, 0x0a, 0x1b, 0x6f, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x4b, 0x4e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x53, 0x68, 0x6f, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x68, 0x65, 0x6d, 0x65,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x54, 0x6f, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x52, 0x17, 0x6f, 0x6c,
	0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x6f, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x4d, 0x61, 0x70, 0x1a, 0x5b, 0x0a, 0x14, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x54, 0x6f, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x43, 0x0a,
	0x06, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x54, 0x53, 0x53, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x68, 0x65, 0x65, 0x74, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x73, 0x22, 0x6d, 0x0a, 0x21, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x68, 0x6f,
	0x77, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x12, 0x1d, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x22, 0xe7, 0x01, 0x0a, 0x2d, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x74,
	0x54, 0x68, 0x65, 0x6d, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x72, 0x76, 0x65, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x50, 0x61,
	0x74, 0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x0a, 0x70, 0x61, 0x74, 0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x0f, 0x6f,
	0x6c, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0d, 0x6f, 0x6c,
	0x64, 0x50, 0x61, 0x74, 0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xe3, 0x02, 0x0a, 0x1b,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x41, 0x0a, 0x05, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x54, 0x53, 0x44,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x37,
	0x0a, 0x0f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x6c, 0x69, 0x64, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x15, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x13, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x15, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x1a, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x18, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x41, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0xda, 0x02, 0x0a, 0x1c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x51, 0x0a,
	0x1d, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x1a, 0x75, 0x6e, 0x64, 0x6f, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73,
	0x12, 0x5c, 0x0a, 0x2c, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64,
	0x5f, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f, 0x61, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x6c, 0x69, 0x64, 0x65,
	0x18, 0x08, 0x20, 0x02, 0x28, 0x08, 0x52, 0x26, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x65, 0x64, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x41, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x12, 0x5e,
	0x0a, 0x24, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x6c, 0x69, 0x64,
	0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x20, 0x75, 0x6e,
	0x64, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0xac,
	0x02, 0x0a, 0x25, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74,
	0x69, 0x76, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x40, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x43, 0x68, 0x69,
	0x6c, 0x64, 0x72, 0x65, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x16, 0x77, 0x61,
	0x73, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f,
	0x64, 0x72, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x13, 0x77, 0x61, 0x73, 0x49,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x44, 0x72, 0x6f, 0x70, 0x12,
	0x37, 0x0a, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x53, 0x0a, 0x1e, 0x70, 0x72, 0x65, 0x76,
	0x69, 0x6f, 0x75, 0x73, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x63, 0x5f, 0x74, 0x68, 0x65,
	0x6d, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x1b, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x63, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xc1, 0x02,
	0x0a, 0x1c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29,
	0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x1f, 0x72, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x5f, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x1c, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x48, 0x0a, 0x18, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x16, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x55, 0x0a, 0x28, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x73,
	0x6c, 0x69, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x77, 0x61, 0x73, 0x5f, 0x72, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x23, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x6c, 0x69,
	0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x57, 0x61, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x64, 0x22, 0xbe, 0x01, 0x0a, 0x25, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69,
	0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x40, 0x0a, 0x05, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x54, 0x53, 0x44,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x53, 0x0a,
	0x1e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x63, 0x5f, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x1b, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x63, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x22, 0xe8, 0x03, 0x0a, 0x1e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x6c,
	0x69, 0x64, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x12, 0x48, 0x0a, 0x18, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x16, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6e, 0x0a, 0x24, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x61, 0x66, 0x74,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4b, 0x4e, 0x2e, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x54, 0x6f, 0x49,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x68,
	0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x12, 0x3f, 0x0a, 0x14,
	0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x11, 0x6f, 0x6c, 0x64, 0x54,
	0x75, 0x70, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a,
	0x1d, 0x77, 0x61, 0x73, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x5f, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x68, 0x65, 0x5f, 0x77, 0x69, 0x72, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x77, 0x61, 0x73, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x68, 0x65, 0x57, 0x69, 0x72, 0x65, 0x12,
	0x2c, 0x0a, 0x12, 0x68, 0x61, 0x73, 0x5f, 0x62, 0x65, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x68, 0x61, 0x73,
	0x42, 0x65, 0x65, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x22, 0xab, 0x04,
	0x0a, 0x1d, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12,
	0x24, 0x0a, 0x08, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x07, 0x73, 0x6c,
	0x69, 0x64, 0x65, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x0f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74,
	0x6f, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0d,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x6f, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x12, 0x38, 0x0a,
	0x10, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x54,
	0x6f, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x12, 0x45, 0x0a, 0x1f, 0x73, 0x68, 0x6f, 0x75, 0x6c,
	0x64, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x02, 0x28, 0x08,
	0x52, 0x1c, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x70,
	0x0a, 0x25, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x66, 0x6f, 0x72,
	0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x4b, 0x4e, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x20,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x65, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x73, 0x54, 0x6f, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72,
	0x12, 0x38, 0x0a, 0x10, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x74, 0x75, 0x70, 0x6c,
	0x65, 0x73, 0x54, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x5d, 0x0a, 0x1a, 0x66, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x4b, 0x4e, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x18, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f,
	0x66, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x73, 0x74, 0x65, 0x18, 0x08, 0x20, 0x02, 0x28, 0x08, 0x52,
	0x0a, 0x69, 0x73, 0x46, 0x6f, 0x72, 0x50, 0x61, 0x73, 0x74, 0x65, 0x22, 0x44, 0x0a, 0x11, 0x55,
	0x6e, 0x64, 0x6f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x12, 0x2f, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x54, 0x53, 0x44, 0x55, 0x6e, 0x64, 0x6f, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x22, 0x89, 0x04, 0x0a, 0x1e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x6c, 0x69,
	0x64, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12,
	0x48, 0x0a, 0x18, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x16, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x05, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x12,
	0x38, 0x0a, 0x10, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x73, 0x54, 0x6f, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x12, 0x72, 0x0a, 0x26, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x61, 0x66,
	0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4b, 0x4e, 0x2e, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x21, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73,
	0x54, 0x6f, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x3f, 0x0a,
	0x14, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x11, 0x6f, 0x6c, 0x64,
	0x54, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x5d,
	0x0a, 0x1a, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4b, 0x4e, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x18, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x22, 0x9e, 0x02,
	0x0a, 0x1d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12,
	0x24, 0x0a, 0x08, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x07, 0x73, 0x6c,
	0x69, 0x64, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55,
	0x49, 0x44, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x73,
	0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x73, 0x68, 0x6f, 0x75, 0x6c,
	0x64, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x12, 0x45, 0x0a,
	0x1f, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x10, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x74,
	0x6f, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e,
	0x74, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x94,
	0x04, 0x0a, 0x23, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x49,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x12, 0x24, 0x0a, 0x08, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x07,
	0x73, 0x6c, 0x69, 0x64, 0x65, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x0f, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x0d, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x54, 0x6f, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x12,
	0x6e, 0x0a, 0x24, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x66, 0x6f,
	0x72, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x4b, 0x4e, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x54, 0x6f, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12,
	0x38, 0x0a, 0x10, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x74, 0x75, 0x70, 0x6c, 0x65,
	0x73, 0x54, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x14, 0x6f, 0x6c, 0x64,
	0x5f, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x11, 0x6f, 0x6c, 0x64, 0x54, 0x75, 0x70, 0x6c,
	0x65, 0x73, 0x54, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x6e, 0x65,
	0x65, 0x64, 0x73, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x6e, 0x65, 0x65, 0x64,
	0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x43, 0x0a, 0x1e, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0xb1, 0x04, 0x0a, 0x23, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a,
	0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54,
	0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x08, 0x73, 0x6c, 0x69, 0x64,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x07, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x49, 0x64, 0x12, 0x33,
	0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x12, 0x63, 0x0a, 0x1e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x74, 0x6f, 0x5f, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4b, 0x4e,
	0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x54, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x6e, 0x0a, 0x24, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4b, 0x4e, 0x2e, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x54, 0x6f, 0x49, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x10, 0x74, 0x75, 0x70, 0x6c,
	0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x0e, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x3f, 0x0a, 0x14, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x73,
	0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x11, 0x6f, 0x6c, 0x64, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x5f, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x14, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0xc9, 0x05, 0x0a, 0x22, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x4d, 0x6f, 0x76, 0x65, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x63, 0x0a, 0x1e, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4b, 0x4e, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x1a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x73, 0x46, 0x6f, 0x72, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x54, 0x6f, 0x4d, 0x6f, 0x76, 0x65,
	0x12, 0x6e, 0x0a, 0x24, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x5f,
	0x66, 0x6f, 0x72, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x6f,
	0x76, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x4b, 0x4e, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x1f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x73, 0x54, 0x6f, 0x4d, 0x6f, 0x76, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72,
	0x12, 0x7e, 0x0a, 0x2d, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x5f,
	0x66, 0x6f, 0x72, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x6f,
	0x76, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x75, 0x6e, 0x64,
	0x6f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4b, 0x4e, 0x2e, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x26, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x54, 0x6f,
	0x4d, 0x6f, 0x76, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x55, 0x6e, 0x64, 0x6f,
	0x12, 0x38, 0x0a, 0x10, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x74, 0x75, 0x70, 0x6c,
	0x65, 0x73, 0x54, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x14, 0x6f, 0x6c,
	0x64, 0x5f, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x11, 0x6f, 0x6c, 0x64, 0x54, 0x75, 0x70,
	0x6c, 0x65, 0x73, 0x54, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0xa7, 0x01, 0x0a, 0x42,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x5f, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4b, 0x4e, 0x2e, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x3a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x54,
	0x6f, 0x4d, 0x6f, 0x76, 0x65, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x73, 0x22, 0xa7, 0x09, 0x0a, 0x1b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x12, 0x24, 0x0a, 0x05, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x05, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x0d, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73,
	0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x73, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x12, 0x72, 0x0a, 0x26, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4b, 0x4e, 0x2e,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x21, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x73, 0x54, 0x6f, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x67,
	0x0a, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x5f, 0x66, 0x6f,
	0x72, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4b, 0x4e, 0x2e, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1c, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x54,
	0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x38, 0x0a, 0x10, 0x74, 0x75, 0x70, 0x6c, 0x65,
	0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x0e, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x4c, 0x0a, 0x1b, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x66,
	0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x17, 0x6f, 0x6c, 0x64, 0x54, 0x75, 0x70, 0x6c, 0x65,
	0x46, 0x6f, 0x72, 0x4d, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12,
	0x5e, 0x0a, 0x25, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x74, 0x6f,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x73, 0x75, 0x62, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x1f,
	0x6f, 0x6c, 0x64, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x46, 0x6f, 0x72, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12,
	0x60, 0x0a, 0x1c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x5f, 0x66,
	0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4b, 0x4e, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x19, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x65, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x73, 0x12, 0x54, 0x0a, 0x15, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x4b, 0x4e, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x14, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x35, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x64, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x12, 0x81,
	0x01, 0x0a, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x5f, 0x66,
	0x6f, 0x72, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x5f,
	0x74, 0x6f, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4b, 0x4e, 0x2e, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x28, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x54, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x73, 0x12, 0x29, 0x0a, 0x11, 0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f,
	0x49, 0x44, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6f,
	0x6c, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x44, 0x53, 0x65, 0x65, 0x64, 0x12, 0x53, 0x0a,
	0x15, 0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4b,
	0x4e, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x13, 0x6f,
	0x6c, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x73, 0x12, 0x4b, 0x0a, 0x1a, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x5f, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x64, 0x5f, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x6e, 0x64, 0x6f,
	0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x17, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x64, 0x44, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x64, 0x6f, 0x22,
	0xf5, 0x01, 0x0a, 0x27, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x74, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55,
	0x55, 0x49, 0x44, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x10,
	0x74, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x54, 0x6f,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x14, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x75,
	0x70, 0x6c, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x11, 0x6f, 0x6c, 0x64, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x54,
	0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0xf1, 0x0b, 0x0a, 0x23, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12,
	0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x08, 0x73, 0x6c,
	0x69, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x07, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x49, 0x64,
	0x12, 0x2c, 0x0a, 0x0c, 0x64, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49,
	0x44, 0x52, 0x0b, 0x64, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x12, 0x53,
	0x0a, 0x1e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x1b, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x54, 0x75, 0x70,
	0x6c, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x0d, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x5f, 0x74, 0x6f,
	0x5f, 0x61, 0x64, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x73, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x12, 0x72, 0x0a, 0x26, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4b, 0x4e, 0x2e, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x21, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x54, 0x6f,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x67, 0x0a, 0x20, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4b, 0x4e, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x54, 0x6f, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x12, 0x38, 0x0a, 0x10, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x74,
	0x6f, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e,
	0x74, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x5d,
	0x0a, 0x2c, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x5f, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x27, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x41, 0x73, 0x79, 0x6e, 0x63,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a,
	0x14, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x11, 0x6f, 0x6c, 0x64,
	0x54, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x60,
	0x0a, 0x1c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x5f, 0x66, 0x6f,
	0x72, 0x5f, 0x61, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4b, 0x4e, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x19, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x65, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73,
	0x12, 0x54, 0x0a, 0x15, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x4b, 0x4e, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x14, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x35, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x64, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0d,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x12, 0x81, 0x01,
	0x0a, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x5f, 0x66, 0x6f,
	0x72, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x5f, 0x74,
	0x6f, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73,
	0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4b, 0x4e, 0x2e, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x28, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x54, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x73, 0x12, 0x49, 0x0a, 0x19, 0x6f, 0x6c, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x0f,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x16, 0x6f, 0x6c, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x12,
	0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x49, 0x44, 0x5f, 0x73, 0x65, 0x65,
	0x64, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x6f, 0x6c, 0x64, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x49, 0x44, 0x53, 0x65, 0x65, 0x64, 0x73, 0x12, 0x53, 0x0a, 0x15, 0x6f, 0x6c, 0x64,
	0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4b, 0x4e, 0x2e, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x13, 0x6f, 0x6c, 0x64, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x35,
	0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x73,
	0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x73, 0x12, 0x4b, 0x0a, 0x1a, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x5f,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x75,
	0x6e, 0x64, 0x6f, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x17, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x73, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x44, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x6e,
	0x64, 0x6f, 0x12, 0x47, 0x0a, 0x18, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x5f, 0x61, 0x64, 0x64,
	0x65, 0x64, 0x5f, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x6e, 0x64, 0x6f, 0x18, 0x14,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x15, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x41, 0x64, 0x64, 0x65,
	0x64, 0x44, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x64, 0x6f, 0x22, 0xc8, 0x01, 0x0a, 0x20,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x10, 0x74,
	0x75, 0x70, 0x6c, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x14, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x75, 0x70,
	0x6c, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x11, 0x6f, 0x6c, 0x64, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x54, 0x6f,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0xae, 0x02, 0x0a, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x12, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x50, 0x61, 0x74,
	0x68, 0x52, 0x0f, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x46, 0x0a, 0x0e, 0x6f, 0x6c, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4b, 0x4e, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0d, 0x6f, 0x6c, 0x64,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0a, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x4b, 0x4e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x22, 0xc0, 0x02, 0x0a, 0x2a, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x65, 0x74, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x08,
	0x52, 0x13, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x56, 0x69,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x44, 0x0a, 0x1a, 0x69, 0x64, 0x73, 0x5f, 0x6f, 0x66, 0x5f,
	0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x73,
	0x6b, 0x69, 0x70, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x55, 0x55, 0x49, 0x44, 0x52, 0x15, 0x69, 0x64, 0x73, 0x4f, 0x66, 0x53, 0x6c, 0x69, 0x64, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x54, 0x6f, 0x53, 0x6b, 0x69, 0x70, 0x12, 0x54, 0x0a, 0x22, 0x69,
	0x64, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x5f, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63,
	0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55,
	0x49, 0x44, 0x52, 0x1d, 0x69, 0x64, 0x73, 0x4f, 0x66, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x75, 0x6e, 0x64, 0x6f, 0x18, 0x06, 0x20, 0x02,
	0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x55, 0x6e, 0x64, 0x6f, 0x22, 0xce, 0x01, 0x0a, 0x26, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x74, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x12, 0x2a, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44,
	0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x69, 0x73, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x02, 0x28, 0x08, 0x52, 0x06, 0x69,
	0x73, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x54, 0x65, 0x78, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6f, 0x6c, 0x64, 0x54, 0x65, 0x78, 0x74, 0x22, 0xf0, 0x02, 0x0a, 0x23,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x2a,
	0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0a,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x14, 0x6e, 0x65,
	0x77, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x12, 0x6e, 0x65, 0x77, 0x50, 0x61, 0x72,
	0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x0f,
	0x6e, 0x65, 0x77, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x6e, 0x65, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x14, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x12, 0x6f, 0x6c, 0x64, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x0f, 0x6f, 0x6c, 0x64, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x0d, 0x6f, 0x6c, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x22, 0xe5,
	0x02, 0x0a, 0x21, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12,
	0x31, 0x0a, 0x0d, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49,
	0x44, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0b, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x49, 0x64, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x3e, 0x0a, 0x13, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x73,
	0x6c, 0x69, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x11, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x45, 0x0a, 0x17, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x5f, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x14, 0x6f, 0x6c, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x53, 0x6c, 0x69, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f,
	0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x72, 0x65, 0x64, 0x6f, 0x18, 0x05, 0x20, 0x02, 0x28, 0x08, 0x52,
	0x0a, 0x69, 0x73, 0x55, 0x6e, 0x64, 0x6f, 0x52, 0x65, 0x64, 0x6f, 0x12, 0x39, 0x0a, 0x10, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xfa, 0x01, 0x0a, 0x27, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x53, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x31, 0x0a,
	0x0d, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x50,
	0x61, 0x74, 0x68, 0x52, 0x0b, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x49, 0x64, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x2a, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44,
	0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x17,
	0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x6c, 0x69,
	0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x14, 0x6f,
	0x6c, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x31, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53,
	0x6c, 0x69, 0x64, 0x65, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x0d, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x64,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0b, 0x73, 0x6c, 0x69, 0x64,
	0x65, 0x49, 0x64, 0x50, 0x61, 0x74, 0x68, 0x22, 0xd0, 0x01, 0x0a, 0x18, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12,
	0x22, 0x0a, 0x04, 0x73, 0x68, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x04, 0x73,
	0x68, 0x6f, 0x77, 0x12, 0x2e, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x12, 0x35, 0x0a, 0x0e, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x6f, 0x75, 0x6e, 0x64,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x6f, 0x6c, 0x64,
	0x53, 0x6f, 0x75, 0x6e, 0x64, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x22, 0xe3, 0x03, 0x0a, 0x19, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12,
	0x48, 0x0a, 0x09, 0x6f, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x4b, 0x4e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53,
	0x6f, 0x75, 0x6e, 0x64, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x48, 0x0a, 0x09, 0x6e, 0x65, 0x77,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x4b,
	0x4e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0xba, 0x01, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x4b,
	0x4e, 0x2e, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x2e, 0x53, 0x6f, 0x75,
	0x6e, 0x64, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x6d, 0x6f, 0x64,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x48, 0x0a, 0x16, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x14, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x22, 0x9c, 0x02, 0x0a, 0x23, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x6c, 0x69, 0x64,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x44,
	0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x08, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44,
	0x52, 0x07, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x49, 0x64, 0x12, 0x5c, 0x0a, 0x1b, 0x69, 0x64, 0x5f,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x49, 0x64, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x67, 0x73, 0x52, 0x18, 0x69,
	0x64, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x72, 0x67, 0x73, 0x12, 0x46, 0x0a, 0x18, 0x6f, 0x6c, 0x64, 0x5f, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x75,
	0x6e, 0x64, 0x6f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x14, 0x6f, 0x6c, 0x64, 0x43, 0x68,
	0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x6e, 0x64, 0x6f, 0x22,
	0xd6, 0x02, 0x0a, 0x1f, 0x43, 0x68, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x47, 0x65, 0x6f,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x47, 0x65, 0x6f,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x16, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x14, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
	0x4c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x14,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x12, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x4c,
	0x65, 0x67, 0x65, 0x6e, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x40, 0x0a, 0x16, 0x61, 0x64, 0x6a,
	0x75, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x14, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x4c,
	0x65, 0x67, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x14, 0x61,
	0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x53, 0x69, 0x7a, 0x65, 0x52, 0x12, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x4c, 0x65,
	0x67, 0x65, 0x6e, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xde, 0x02, 0x0a, 0x21, 0x43, 0x61, 0x6e,
	0x76, 0x61, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x63,
	0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x5f, 0x68, 0x65,
	0x6c, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x54, 0x53, 0x44,
	0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x65, 0x72, 0x48, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x48, 0x65, 0x6c,
	0x70, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x0f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4b,
	0x4e, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0d, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x73, 0x12, 0x33, 0x0a, 0x10,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49,
	0x44, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64,
	0x73, 0x12, 0x56, 0x0a, 0x22, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x5f,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x1f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x6c, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x72, 0x61, 0x77,
	0x61, 0x62, 0x6c, 0x65, 0x55, 0x75, 0x69, 0x64, 0x73, 0x22, 0x28, 0x0a, 0x26, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x68, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x22, 0x64, 0x0a, 0x23, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x3d, 0x0a, 0x12, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x11, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8c, 0x01, 0x0a, 0x25, 0x4e, 0x6f,
	0x74, 0x65, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x12, 0x63, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d,
	0x65, 0x72, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x48, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d,
	0x65, 0x72, 0x48, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x22, 0xb7, 0x01, 0x0a, 0x28, 0x4f, 0x75, 0x74,
	0x6c, 0x69, 0x6e, 0x65, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x50, 0x0a, 0x1c, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x5f,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x6f, 0x72, 0x6d, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x1a, 0x63, 0x61, 0x6e,
	0x76, 0x61, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x11, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x50, 0x61, 0x74,
	0x68, 0x52, 0x0f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x55, 0x75, 0x69, 0x64, 0x50, 0x61,
	0x74, 0x68, 0x22, 0xa7, 0x02, 0x0a, 0x30, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x48, 0x65, 0x6c, 0x70, 0x65, 0x72,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a, 0x0b, 0x73, 0x6c, 0x69, 0x64, 0x65,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0a, 0x73, 0x6c, 0x69,
	0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x12, 0x73, 0x6c, 0x69, 0x64, 0x65,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x50, 0x61,
	0x74, 0x68, 0x52, 0x0f, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x6f, 0x45,
	0x64, 0x69, 0x74, 0x12, 0x40, 0x0a, 0x19, 0x73, 0x6c, 0x69, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x73, 0x5f, 0x74, 0x68, 0x65, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x16, 0x73,
	0x6c, 0x69, 0x64, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x73,
	0x54, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x1f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x91, 0x01, 0x0a,
	0x2a, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x63, 0x0a, 0x12, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x4b, 0x4e, 0x2e, 0x53, 0x6c, 0x69,
	0x64, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72,
	0x48, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x11, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x48, 0x65, 0x6c, 0x70, 0x65, 0x72,
	0x22, 0xae, 0x02, 0x0a, 0x22, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x63, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x4b, 0x4e, 0x2e, 0x53, 0x6c, 0x69, 0x64, 0x65, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x48, 0x65, 0x6c, 0x70,
	0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x48, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x12, 0x54, 0x0a, 0x24,
	0x63, 0x61, 0x6e, 0x5f, 0x68, 0x61, 0x76, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69,
	0x6e, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x52, 0x1f, 0x63, 0x61, 0x6e, 0x48, 0x61, 0x76, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49,
	0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x12, 0x4d, 0x0a, 0x19, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x17, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x22, 0x5b, 0x0a, 0x1f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x76, 0x65,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x12, 0x38, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x22, 0x98,
	0x04, 0x0a, 0x1d, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x76, 0x65, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x17, 0x6c,
	0x69, 0x76, 0x65, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x69,
	0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x50, 0x61, 0x74, 0x68, 0x52, 0x13, 0x6c, 0x69, 0x76,
	0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x64, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x26, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x08,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x5f, 0x0a, 0x27, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x55, 0x55, 0x49, 0x44, 0x52, 0x23, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x6c, 0x6c, 0x61,
	0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x9f, 0x01, 0x0a, 0x34, 0x77, 0x6f,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6f, 0x6c, 0x64,
	0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x4b, 0x4e, 0x2e, 0x4c, 0x69,
	0x76, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6c,
	0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x6c, 0x64, 0x43, 0x6f, 0x6c,
	0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x0a, 0x6f,
	0x6c, 0x64, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x09, 0x6f, 0x6c, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x0d, 0x6f, 0x6c,
	0x64, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0b, 0x6f, 0x6c,
	0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x22, 0x9f, 0x05, 0x0a, 0x1c, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x76, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x6e,
	0x66, 0x6f, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x17, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49,
	0x44, 0x50, 0x61, 0x74, 0x68, 0x52, 0x13, 0x6c, 0x69, 0x76, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x49, 0x6e, 0x66, 0x6f, 0x49, 0x64, 0x50, 0x61, 0x74, 0x68, 0x12, 0x45, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x4b,
	0x4e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x76, 0x65, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x4b, 0x4e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x76,
	0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4b, 0x0a, 0x09, 0x6f, 0x6c, 0x64, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x4b, 0x4e, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x76, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6f, 0x6c, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x1a, 0xd0, 0x01, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x37, 0x0a, 0x11,
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x10, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x73, 0x6b, 0x4b, 0x69,
	0x6e, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x72, 0x6e, 0x65,
	0x72, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10,
	0x6d, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x22, 0x62, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x10, 0x00, 0x12, 0x14,
	0x0a, 0x10, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x61, 0x73, 0x6b, 0x4b, 0x69, 0x6e, 0x64,
	0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x72, 0x6e, 0x65, 0x72,
	0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x73, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x10, 0x04, 0x22, 0x8b, 0x07, 0x0a, 0x1e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x76, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x29,
	0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x14, 0x6c, 0x69, 0x76,
	0x65, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55,
	0x49, 0x44, 0x52, 0x11, 0x6c, 0x69, 0x76, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x4b, 0x4e, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x76, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x46,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x4b, 0x4e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x76, 0x65, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4d, 0x0a, 0x09, 0x6f, 0x6c, 0x64, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x4b, 0x4e, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x76, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6f, 0x6c, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xfb, 0x02, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x63, 0x0a, 0x1a, 0x63,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x4b, 0x4e, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x61,
	0x70, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x18, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3e, 0x0a, 0x11, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x0f, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x38, 0x0a, 0x18, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x61, 0x62, 0x62, 0x72, 0x65,
	0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x16, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x41, 0x62, 0x62, 0x72, 0x65, 0x76,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x3f, 0x0a, 0x1c, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x74, 0x69, 0x6e,
	0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x54, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x22, 0xa3, 0x01, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x10, 0x00,
	0x12, 0x1c, 0x0a, 0x18, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x13,
	0x0a, 0x0f, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x41, 0x62, 0x62,
	0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x10, 0x03, 0x12,
	0x19, 0x0a, 0x15, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x54, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x10, 0x05, 0x22, 0x9f, 0x01, 0x0a, 0x1d, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x76, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x54, 0x53, 0x44,
	0x2e, 0x42, 0x61, 0x73, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x54, 0x53, 0x44, 0x53, 0x4f, 0x53,
	0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x1e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x41, 0x64, 0x64, 0x4c,
	0x69, 0x76, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x29,
	0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x11, 0x6c, 0x69, 0x76,
	0x65, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x6c, 0x69, 0x76, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x69, 0x6d, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x49, 0x6d,
	0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x22, 0xf6, 0x01, 0x0a, 0x21, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x69, 0x76,
	0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x05,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53,
	0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x14, 0x6c, 0x69, 0x76, 0x65, 0x5f,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44,
	0x52, 0x11, 0x6c, 0x69, 0x76, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x49, 0x6d, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x12, 0x49, 0x0a, 0x19, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x5f,
	0x6c, 0x69, 0x76, 0x65, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x16, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64,
	0x4c, 0x69, 0x76, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2a,
	0x3d, 0x0a, 0x11, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x54, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x6f, 0x45, 0x6e, 0x64, 0x10, 0x02, 0x42, 0x07,
	0x5a, 0x05, 0x2e, 0x2f, 0x6b, 0x70, 0x62,
}

var (
	file_KNCommandArchives_proto_rawDescOnce sync.Once
	file_KNCommandArchives_proto_rawDescData = file_KNCommandArchives_proto_rawDesc
)

func file_KNCommandArchives_proto_rawDescGZIP() []byte {
	file_KNCommandArchives_proto_rawDescOnce.Do(func() {
		file_KNCommandArchives_proto_rawDescData = protoimpl.X.CompressGZIP(file_KNCommandArchives_proto_rawDescData)
	})
	return file_KNCommandArchives_proto_rawDescData
}

var file_KNCommandArchives_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_KNCommandArchives_proto_msgTypes = make([]protoimpl.MessageInfo, 70)
var file_KNCommandArchives_proto_goTypes = []interface{}{
	(AnimationReferent)(0),                                     // 0: KN.AnimationReferent
	(CommandShowInsertSlideArchive_Kind)(0),                    // 1: KN.CommandShowInsertSlideArchive.Kind
	(CommandLiveVideoInfoSetValue_Property)(0),                 // 2: KN.CommandLiveVideoInfoSetValue.Property
	(CommandLiveVideoSourceSetValue_Property)(0),               // 3: KN.CommandLiveVideoSourceSetValue.Property
	(*UIStateCommandGroupArchive)(nil),                         // 4: KN.UIStateCommandGroupArchive
	(*CommandSlideInsertDrawablesArchive)(nil),                 // 5: KN.CommandSlideInsertDrawablesArchive
	(*CommandSlideSetPlaceholdersForTagsArchive)(nil),          // 6: KN.CommandSlideSetPlaceholdersForTagsArchive
	(*CommandTemplateSlideSetPlaceholderForTagArchive)(nil),    // 7: KN.CommandTemplateSlideSetPlaceholderForTagArchive
	(*CommandSlidePropagateSetPlaceholderForTagArchive)(nil),   // 8: KN.CommandSlidePropagateSetPlaceholderForTagArchive
	(*CommandSlideRemoveDrawableArchive)(nil),                  // 9: KN.CommandSlideRemoveDrawableArchive
	(*CommandSlideMoveDrawableZOrderArchive)(nil),              // 10: KN.CommandSlideMoveDrawableZOrderArchive
	(*CommandSlideNodeSetPropertyArchive)(nil),                 // 11: KN.CommandSlideNodeSetPropertyArchive
	(*CommandSlideNodeSetViewStatePropertyArchive)(nil),        // 12: KN.CommandSlideNodeSetViewStatePropertyArchive
	(*CommandSlideSetBackgroundFillArchive)(nil),               // 13: KN.CommandSlideSetBackgroundFillArchive
	(*CommandSlideSetStyleArchive)(nil),                        // 14: KN.CommandSlideSetStyleArchive
	(*CommandShowMarkOutOfSyncRecordingArchive)(nil),           // 15: KN.CommandShowMarkOutOfSyncRecordingArchive
	(*CommandShowMarkOutOfSyncRecordingIfNeededArchive)(nil),   // 16: KN.CommandShowMarkOutOfSyncRecordingIfNeededArchive
	(*CommandShowRemoveRecordingArchive)(nil),                  // 17: KN.CommandShowRemoveRecordingArchive
	(*CommandShowReplaceRecordingArchive)(nil),                 // 18: KN.CommandShowReplaceRecordingArchive
	(*CommandShowSetValueArchive)(nil),                         // 19: KN.CommandShowSetValueArchive
	(*CommandShowInsertSlideArchive)(nil),                      // 20: KN.CommandShowInsertSlideArchive
	(*CommandShowMoveSlideArchive)(nil),                        // 21: KN.CommandShowMoveSlideArchive
	(*CommandShowRemoveSlideArchive)(nil),                      // 22: KN.CommandShowRemoveSlideArchive
	(*CommandShowChangeThemeArchive)(nil),                      // 23: KN.CommandShowChangeThemeArchive
	(*CommandShowChangeSlideSizeArchive)(nil),                  // 24: KN.CommandShowChangeSlideSizeArchive
	(*CommandSetThemeCustomEffectTimingCurveArchive)(nil),      // 25: KN.CommandSetThemeCustomEffectTimingCurveArchive
	(*CommandMoveTemplatesArchive)(nil),                        // 26: KN.CommandMoveTemplatesArchive
	(*CommandInsertTemplateArchive)(nil),                       // 27: KN.CommandInsertTemplateArchive
	(*CommandPrimitiveInsertTemplateArchive)(nil),              // 28: KN.CommandPrimitiveInsertTemplateArchive
	(*CommandRemoveTemplateArchive)(nil),                       // 29: KN.CommandRemoveTemplateArchive
	(*CommandPrimitiveRemoveTemplateArchive)(nil),              // 30: KN.CommandPrimitiveRemoveTemplateArchive
	(*CommandSlideInsertBuildArchive)(nil),                     // 31: KN.CommandSlideInsertBuildArchive
	(*InsertBuildDescriptionArchive)(nil),                      // 32: KN.InsertBuildDescriptionArchive
	(*UndoObjectArchive)(nil),                                  // 33: KN.UndoObjectArchive
	(*CommandSlideRemoveBuildArchive)(nil),                     // 34: KN.CommandSlideRemoveBuildArchive
	(*RemoveBuildDescriptionArchive)(nil),                      // 35: KN.RemoveBuildDescriptionArchive
	(*CommandSlideInsertBuildChunkArchive)(nil),                // 36: KN.CommandSlideInsertBuildChunkArchive
	(*CommandSlideRemoveBuildChunkArchive)(nil),                // 37: KN.CommandSlideRemoveBuildChunkArchive
	(*CommandSlideMoveBuildChunksArchive)(nil),                 // 38: KN.CommandSlideMoveBuildChunksArchive
	(*CommandBuildSetValueArchive)(nil),                        // 39: KN.CommandBuildSetValueArchive
	(*CommandBuildUpdateChunkReferentsArchive)(nil),            // 40: KN.CommandBuildUpdateChunkReferentsArchive
	(*CommandBuildUpdateChunkCountArchive)(nil),                // 41: KN.CommandBuildUpdateChunkCountArchive
	(*CommandBuildChunkSetValueArchive)(nil),                   // 42: KN.CommandBuildChunkSetValueArchive
	(*CommandTransitionSetValueArchive)(nil),                   // 43: KN.CommandTransitionSetValueArchive
	(*CommandShowSetSlideNumberVisibilityArchive)(nil),         // 44: KN.CommandShowSetSlideNumberVisibilityArchive
	(*CommandTemplateSetThumbnailTextArchive)(nil),             // 45: KN.CommandTemplateSetThumbnailTextArchive
	(*CommandTemplateSetBodyStylesArchive)(nil),                // 46: KN.CommandTemplateSetBodyStylesArchive
	(*CommandChangeTemplateSlideArchive)(nil),                  // 47: KN.CommandChangeTemplateSlideArchive
	(*CommandSlidePrimitiveSetTemplateArchive)(nil),            // 48: KN.CommandSlidePrimitiveSetTemplateArchive
	(*CommandSlideResetTemplateBackgroundObjectsArchive)(nil),  // 49: KN.CommandSlideResetTemplateBackgroundObjectsArchive
	(*CommandShowSetSoundtrack)(nil),                           // 50: KN.CommandShowSetSoundtrack
	(*CommandSoundtrackSetValue)(nil),                          // 51: KN.CommandSoundtrackSetValue
	(*CommandSlideUpdateTemplateDrawables)(nil),                // 52: KN.CommandSlideUpdateTemplateDrawables
	(*ChartInfoGeometryCommandArchive)(nil),                    // 53: KN.ChartInfoGeometryCommandArchive
	(*CanvasSelectionTransformerArchive)(nil),                  // 54: KN.CanvasSelectionTransformerArchive
	(*ActionGhostSelectionTransformerArchive)(nil),             // 55: KN.ActionGhostSelectionTransformerArchive
	(*DocumentSelectionTransformerArchive)(nil),                // 56: KN.DocumentSelectionTransformerArchive
	(*NoteCanvasSelectionTransformerArchive)(nil),              // 57: KN.NoteCanvasSelectionTransformerArchive
	(*OutlineCanvasSelectionTransformerArchive)(nil),           // 58: KN.OutlineCanvasSelectionTransformerArchive
	(*SlideCollectionSelectionTransformerHelperArchive)(nil),   // 59: KN.SlideCollectionSelectionTransformerHelperArchive
	(*SlideCollectionSelectionTransformerArchive)(nil),         // 60: KN.SlideCollectionSelectionTransformerArchive
	(*OutlineSelectionTransformerArchive)(nil),                 // 61: KN.OutlineSelectionTransformerArchive
	(*CommandLiveVideoInfoApplyPreset)(nil),                    // 62: KN.CommandLiveVideoInfoApplyPreset
	(*CommandLiveVideoInfoSetSource)(nil),                      // 63: KN.CommandLiveVideoInfoSetSource
	(*CommandLiveVideoInfoSetValue)(nil),                       // 64: KN.CommandLiveVideoInfoSetValue
	(*CommandLiveVideoSourceSetValue)(nil),                     // 65: KN.CommandLiveVideoSourceSetValue
	(*CommandLiveVideoStyleSetValue)(nil),                      // 66: KN.CommandLiveVideoStyleSetValue
	(*CommandThemeAddLiveVideoSource)(nil),                     // 67: KN.CommandThemeAddLiveVideoSource
	(*CommandThemeRemoveLiveVideoSource)(nil),                  // 68: KN.CommandThemeRemoveLiveVideoSource
	(*CommandShowSetValueArchive_PropertyValue)(nil),           // 69: KN.CommandShowSetValueArchive.PropertyValue
	(*CommandShowChangeThemeArchive_IdentifierToStyleMap)(nil), // 70: KN.CommandShowChangeThemeArchive.IdentifierToStyleMap
	(*CommandSoundtrackSetValue_PropertyValue)(nil),            // 71: KN.CommandSoundtrackSetValue.PropertyValue
	(*CommandLiveVideoInfoSetValue_PropertyValue)(nil),         // 72: KN.CommandLiveVideoInfoSetValue.PropertyValue
	(*CommandLiveVideoSourceSetValue_PropertyValue)(nil),       // 73: KN.CommandLiveVideoSourceSetValue.PropertyValue
	(*CommandGroupArchive)(nil),                                // 74: TSK.CommandGroupArchive
	(*Reference)(nil),                                          // 75: TSP.Reference
	(*Size)(nil),                                               // 76: TSP.Size
	(*CommandArchive)(nil),                                     // 77: TSK.CommandArchive
	(*UUID)(nil),                                               // 78: TSP.UUID
	(*MixedIdOperationArgs)(nil),                               // 79: KN.MixedIdOperationArgs
	(*GeometryArchive)(nil),                                    // 80: TSD.GeometryArchive
	(*RearrangeIdOperationArgs)(nil),                           // 81: TSK.RearrangeIdOperationArgs
	(*UUIDPath)(nil),                                           // 82: TSP.UUIDPath
	(*FillArchive)(nil),                                        // 83: TSD.FillArchive
	(*Date)(nil),                                               // 84: TSP.Date
	(*AddIdOperationArgs)(nil),                                 // 85: TSK.AddIdOperationArgs
	(*RemoveIdOperationArgs)(nil),                              // 86: TSK.RemoveIdOperationArgs
	(*PathSourceArchive)(nil),                                  // 87: TSD.PathSourceArchive
	(*ContainerReorderChildrenCommandArchive)(nil),             // 88: TSD.ContainerReorderChildrenCommandArchive
	(*ContainerInsertChildrenCommandArchive)(nil),              // 89: TSD.ContainerInsertChildrenCommandArchive
	(*ContainerRemoveChildrenCommandArchive)(nil),              // 90: TSD.ContainerRemoveChildrenCommandArchive
	(*BuildChunkIdentifierArchive)(nil),                        // 91: KN.BuildChunkIdentifierArchive
	(*TSDUndoObjectArchive)(nil),                               // 92: TSD.TSDUndoObjectArchive
	(*TransitionAttributesArchive)(nil),                        // 93: KN.TransitionAttributesArchive
	(*IdPlacementOperationArgs)(nil),                           // 94: TSK.IdPlacementOperationArgs
	(*InfoGeometryCommandArchive)(nil),                         // 95: TSD.InfoGeometryCommandArchive
	(*Point)(nil),                                              // 96: TSP.Point
	(*InfoCollectionSelectionTransformerHelperArchive)(nil),    // 97: TSD.InfoCollectionSelectionTransformerHelperArchive
	(*RangeAddress)(nil),                                       // 98: TSK.RangeAddress
	(*BaseApplyPresetCommandArchive)(nil),                      // 99: TSD.BaseApplyPresetCommandArchive
	(*LiveVideoSourceCollaborationCommandUsageState)(nil),      // 100: KN.LiveVideoSourceCollaborationCommandUsageState
	(*BaseStyleSetValueCommandArchive)(nil),                    // 101: TSD.BaseStyleSetValueCommandArchive
	(*MediaStylePropertyChangeSetArchive)(nil),                 // 102: TSDSOS.MediaStylePropertyChangeSetArchive
	(ShowArchive_KNShowMode)(0),                                // 103: KN.ShowArchive.KNShowMode
	(*StylesheetArchive_IdentifiedStyleEntry)(nil),             // 104: TSS.StylesheetArchive.IdentifiedStyleEntry
	(Soundtrack_SoundtrackMode)(0),                             // 105: KN.Soundtrack.SoundtrackMode
	(*DataReference)(nil),                                      // 106: TSP.DataReference
	(*LiveVideoCaptureDeviceDescription)(nil),                  // 107: KN.LiveVideoCaptureDeviceDescription
}
var file_KNCommandArchives_proto_depIdxs = []int32{
	74,  // 0: KN.UIStateCommandGroupArchive.super:type_name -> TSK.CommandGroupArchive
	75,  // 1: KN.UIStateCommandGroupArchive.uiState:type_name -> TSP.Reference
	75,  // 2: KN.UIStateCommandGroupArchive.slideNodesToEdit:type_name -> TSP.Reference
	75,  // 3: KN.UIStateCommandGroupArchive.template_slide_nodes_to_apply:type_name -> TSP.Reference
	76,  // 4: KN.UIStateCommandGroupArchive.thumbnailSizes:type_name -> TSP.Size
	75,  // 5: KN.UIStateCommandGroupArchive.selectedSlideNodes:type_name -> TSP.Reference
	75,  // 6: KN.UIStateCommandGroupArchive.restoreSelectedSlideNodes:type_name -> TSP.Reference
	77,  // 7: KN.CommandSlideInsertDrawablesArchive.super:type_name -> TSK.CommandArchive
	78,  // 8: KN.CommandSlideInsertDrawablesArchive.slide_id:type_name -> TSP.UUID
	75,  // 9: KN.CommandSlideInsertDrawablesArchive.drawables:type_name -> TSP.Reference
	75,  // 10: KN.CommandSlideInsertDrawablesArchive.working_drawables:type_name -> TSP.Reference
	79,  // 11: KN.CommandSlideInsertDrawablesArchive.args_list:type_name -> KN.MixedIdOperationArgs
	78,  // 12: KN.CommandSlideInsertDrawablesArchive.ids_of_drawables_using_object_placeholder_geometry:type_name -> TSP.UUID
	75,  // 13: KN.CommandSlideInsertDrawablesArchive.undo_archive:type_name -> TSP.Reference
	75,  // 14: KN.CommandSlideInsertDrawablesArchive.insert_build_descriptions:type_name -> TSP.Reference
	75,  // 15: KN.CommandSlideInsertDrawablesArchive.working_insert_build_descriptions:type_name -> TSP.Reference
	75,  // 16: KN.CommandSlideInsertDrawablesArchive.remove_build_descriptions:type_name -> TSP.Reference
	78,  // 17: KN.CommandSlideInsertDrawablesArchive.custom_format_keys:type_name -> TSP.UUID
	80,  // 18: KN.CommandSlideInsertDrawablesArchive.geometry_of_object_placeholder_for_comparison_to_restore_link:type_name -> TSD.GeometryArchive
	77,  // 19: KN.CommandSlideSetPlaceholdersForTagsArchive.super:type_name -> TSK.CommandArchive
	78,  // 20: KN.CommandSlideSetPlaceholdersForTagsArchive.slide_id:type_name -> TSP.UUID
	75,  // 21: KN.CommandSlideSetPlaceholdersForTagsArchive.infos:type_name -> TSP.Reference
	75,  // 22: KN.CommandSlideSetPlaceholdersForTagsArchive.old_infos:type_name -> TSP.Reference
	6,   // 23: KN.CommandTemplateSlideSetPlaceholderForTagArchive.super:type_name -> KN.CommandSlideSetPlaceholdersForTagsArchive
	78,  // 24: KN.CommandTemplateSlideSetPlaceholderForTagArchive.placeholder_id:type_name -> TSP.UUID
	6,   // 25: KN.CommandSlidePropagateSetPlaceholderForTagArchive.super:type_name -> KN.CommandSlideSetPlaceholdersForTagsArchive
	78,  // 26: KN.CommandSlidePropagateSetPlaceholderForTagArchive.placeholder_id:type_name -> TSP.UUID
	78,  // 27: KN.CommandSlidePropagateSetPlaceholderForTagArchive.original_id:type_name -> TSP.UUID
	77,  // 28: KN.CommandSlideRemoveDrawableArchive.super:type_name -> TSK.CommandArchive
	78,  // 29: KN.CommandSlideRemoveDrawableArchive.slide_id:type_name -> TSP.UUID
	75,  // 30: KN.CommandSlideRemoveDrawableArchive.sortedDrawables:type_name -> TSP.Reference
	79,  // 31: KN.CommandSlideRemoveDrawableArchive.args_list:type_name -> KN.MixedIdOperationArgs
	75,  // 32: KN.CommandSlideRemoveDrawableArchive.insert_build_descriptions:type_name -> TSP.Reference
	75,  // 33: KN.CommandSlideRemoveDrawableArchive.remove_build_descriptions:type_name -> TSP.Reference
	75,  // 34: KN.CommandSlideRemoveDrawableArchive.drawables_using_object_placeholder_geometry:type_name -> TSP.Reference
	75,  // 35: KN.CommandSlideRemoveDrawableArchive.inverse_insert_hyperlink_commands:type_name -> TSP.Reference
	77,  // 36: KN.CommandSlideMoveDrawableZOrderArchive.super:type_name -> TSK.CommandArchive
	75,  // 37: KN.CommandSlideMoveDrawableZOrderArchive.old_ordered_infos:type_name -> TSP.Reference
	81,  // 38: KN.CommandSlideMoveDrawableZOrderArchive.args_list:type_name -> TSK.RearrangeIdOperationArgs
	78,  // 39: KN.CommandSlideMoveDrawableZOrderArchive.slide_id:type_name -> TSP.UUID
	75,  // 40: KN.CommandSlideMoveDrawableZOrderArchive.old_ordered_infos_on_slide_for_undo:type_name -> TSP.Reference
	77,  // 41: KN.CommandSlideNodeSetPropertyArchive.super:type_name -> TSK.CommandArchive
	82,  // 42: KN.CommandSlideNodeSetPropertyArchive.slide_node_id_path:type_name -> TSP.UUIDPath
	77,  // 43: KN.CommandSlideNodeSetViewStatePropertyArchive.super:type_name -> TSK.CommandArchive
	82,  // 44: KN.CommandSlideNodeSetViewStatePropertyArchive.slide_node_id_path:type_name -> TSP.UUIDPath
	77,  // 45: KN.CommandSlideSetBackgroundFillArchive.super:type_name -> TSK.CommandArchive
	82,  // 46: KN.CommandSlideSetBackgroundFillArchive.slide_id_path:type_name -> TSP.UUIDPath
	83,  // 47: KN.CommandSlideSetBackgroundFillArchive.old_fill:type_name -> TSD.FillArchive
	83,  // 48: KN.CommandSlideSetBackgroundFillArchive.new_fill:type_name -> TSD.FillArchive
	77,  // 49: KN.CommandSlideSetStyleArchive.super:type_name -> TSK.CommandArchive
	82,  // 50: KN.CommandSlideSetStyleArchive.slide_id_path:type_name -> TSP.UUIDPath
	75,  // 51: KN.CommandSlideSetStyleArchive.slide_style:type_name -> TSP.Reference
	75,  // 52: KN.CommandSlideSetStyleArchive.old_slide_style:type_name -> TSP.Reference
	77,  // 53: KN.CommandShowMarkOutOfSyncRecordingArchive.super:type_name -> TSK.CommandArchive
	75,  // 54: KN.CommandShowMarkOutOfSyncRecordingArchive.show:type_name -> TSP.Reference
	75,  // 55: KN.CommandShowMarkOutOfSyncRecordingArchive.old_recording:type_name -> TSP.Reference
	84,  // 56: KN.CommandShowMarkOutOfSyncRecordingArchive.old_modification_date:type_name -> TSP.Date
	84,  // 57: KN.CommandShowMarkOutOfSyncRecordingArchive.new_modification_date:type_name -> TSP.Date
	77,  // 58: KN.CommandShowMarkOutOfSyncRecordingIfNeededArchive.super:type_name -> TSK.CommandArchive
	78,  // 59: KN.CommandShowMarkOutOfSyncRecordingIfNeededArchive.out_of_sync_token:type_name -> TSP.UUID
	77,  // 60: KN.CommandShowRemoveRecordingArchive.super:type_name -> TSK.CommandArchive
	75,  // 61: KN.CommandShowRemoveRecordingArchive.show:type_name -> TSP.Reference
	75,  // 62: KN.CommandShowRemoveRecordingArchive.old_recording:type_name -> TSP.Reference
	77,  // 63: KN.CommandShowReplaceRecordingArchive.super:type_name -> TSK.CommandArchive
	75,  // 64: KN.CommandShowReplaceRecordingArchive.show:type_name -> TSP.Reference
	75,  // 65: KN.CommandShowReplaceRecordingArchive.replacement_recording:type_name -> TSP.Reference
	75,  // 66: KN.CommandShowReplaceRecordingArchive.old_recording:type_name -> TSP.Reference
	77,  // 67: KN.CommandShowSetValueArchive.super:type_name -> TSK.CommandArchive
	75,  // 68: KN.CommandShowSetValueArchive.show:type_name -> TSP.Reference
	69,  // 69: KN.CommandShowSetValueArchive.old_value:type_name -> KN.CommandShowSetValueArchive.PropertyValue
	69,  // 70: KN.CommandShowSetValueArchive.new_value:type_name -> KN.CommandShowSetValueArchive.PropertyValue
	77,  // 71: KN.CommandShowInsertSlideArchive.super:type_name -> TSK.CommandArchive
	75,  // 72: KN.CommandShowInsertSlideArchive.slide_nodes_being_inserted:type_name -> TSP.Reference
	75,  // 73: KN.CommandShowInsertSlideArchive.working_slide_nodes_being_inserted:type_name -> TSP.Reference
	85,  // 74: KN.CommandShowInsertSlideArchive.inserted_args_list:type_name -> TSK.AddIdOperationArgs
	78,  // 75: KN.CommandShowInsertSlideArchive.ids_of_slide_nodes_with_depth_changes:type_name -> TSP.UUID
	75,  // 76: KN.CommandShowInsertSlideArchive.slide_nodes_for_depth_fix_up:type_name -> TSP.Reference
	1,   // 77: KN.CommandShowInsertSlideArchive.kind:type_name -> KN.CommandShowInsertSlideArchive.Kind
	75,  // 78: KN.CommandShowInsertSlideArchive.template_slide_nodes_being_inserted:type_name -> TSP.Reference
	78,  // 79: KN.CommandShowInsertSlideArchive.custom_format_keys:type_name -> TSP.UUID
	75,  // 80: KN.CommandShowInsertSlideArchive.undo_archive:type_name -> TSP.Reference
	77,  // 81: KN.CommandShowMoveSlideArchive.super:type_name -> TSK.CommandArchive
	75,  // 82: KN.CommandShowMoveSlideArchive.slide_nodes_being_moved_linearly:type_name -> TSP.Reference
	81,  // 83: KN.CommandShowMoveSlideArchive.rearranged_args_list:type_name -> TSK.RearrangeIdOperationArgs
	78,  // 84: KN.CommandShowMoveSlideArchive.ids_of_slide_nodes_with_depth_changes:type_name -> TSP.UUID
	75,  // 85: KN.CommandShowMoveSlideArchive.slide_nodes_for_depth_fix_up:type_name -> TSP.Reference
	77,  // 86: KN.CommandShowRemoveSlideArchive.super:type_name -> TSK.CommandArchive
	75,  // 87: KN.CommandShowRemoveSlideArchive.slide_nodes_being_removed:type_name -> TSP.Reference
	86,  // 88: KN.CommandShowRemoveSlideArchive.removed_args_list:type_name -> TSK.RemoveIdOperationArgs
	78,  // 89: KN.CommandShowRemoveSlideArchive.ids_of_slide_nodes_with_depth_changes:type_name -> TSP.UUID
	75,  // 90: KN.CommandShowRemoveSlideArchive.slide_nodes_for_depth_fix_up:type_name -> TSP.Reference
	77,  // 91: KN.CommandShowChangeThemeArchive.super:type_name -> TSK.CommandArchive
	75,  // 92: KN.CommandShowChangeThemeArchive.show:type_name -> TSP.Reference
	75,  // 93: KN.CommandShowChangeThemeArchive.theme:type_name -> TSP.Reference
	75,  // 94: KN.CommandShowChangeThemeArchive.old_theme:type_name -> TSP.Reference
	70,  // 95: KN.CommandShowChangeThemeArchive.identifier_to_style_map:type_name -> KN.CommandShowChangeThemeArchive.IdentifierToStyleMap
	70,  // 96: KN.CommandShowChangeThemeArchive.old_identifier_to_style_map:type_name -> KN.CommandShowChangeThemeArchive.IdentifierToStyleMap
	77,  // 97: KN.CommandShowChangeSlideSizeArchive.super:type_name -> TSK.CommandArchive
	76,  // 98: KN.CommandShowChangeSlideSizeArchive.size:type_name -> TSP.Size
	77,  // 99: KN.CommandSetThemeCustomEffectTimingCurveArchive.super:type_name -> TSK.CommandArchive
	87,  // 100: KN.CommandSetThemeCustomEffectTimingCurveArchive.path_source:type_name -> TSD.PathSourceArchive
	87,  // 101: KN.CommandSetThemeCustomEffectTimingCurveArchive.old_path_source:type_name -> TSD.PathSourceArchive
	88,  // 102: KN.CommandMoveTemplatesArchive.super:type_name -> TSD.ContainerReorderChildrenCommandArchive
	75,  // 103: KN.CommandMoveTemplatesArchive.template_slides:type_name -> TSP.Reference
	75,  // 104: KN.CommandMoveTemplatesArchive.previous_indexes_keys:type_name -> TSP.Reference
	75,  // 105: KN.CommandMoveTemplatesArchive.final_template_arrangement:type_name -> TSP.Reference
	77,  // 106: KN.CommandInsertTemplateArchive.super:type_name -> TSK.CommandArchive
	75,  // 107: KN.CommandInsertTemplateArchive.undo_template_change_commands:type_name -> TSP.Reference
	75,  // 108: KN.CommandInsertTemplateArchive.undo_replacement_template_slide_node:type_name -> TSP.Reference
	89,  // 109: KN.CommandPrimitiveInsertTemplateArchive.super:type_name -> TSD.ContainerInsertChildrenCommandArchive
	78,  // 110: KN.CommandPrimitiveInsertTemplateArchive.custom_format_keys:type_name -> TSP.UUID
	75,  // 111: KN.CommandPrimitiveInsertTemplateArchive.previous_classic_theme_records:type_name -> TSP.Reference
	77,  // 112: KN.CommandRemoveTemplateArchive.super:type_name -> TSK.CommandArchive
	75,  // 113: KN.CommandRemoveTemplateArchive.replacement_template_slide_node:type_name -> TSP.Reference
	75,  // 114: KN.CommandRemoveTemplateArchive.template_change_commands:type_name -> TSP.Reference
	90,  // 115: KN.CommandPrimitiveRemoveTemplateArchive.super:type_name -> TSD.ContainerRemoveChildrenCommandArchive
	75,  // 116: KN.CommandPrimitiveRemoveTemplateArchive.previous_classic_theme_records:type_name -> TSP.Reference
	77,  // 117: KN.CommandSlideInsertBuildArchive.super:type_name -> TSK.CommandArchive
	75,  // 118: KN.CommandSlideInsertBuildArchive.insert_build_description:type_name -> TSP.Reference
	91,  // 119: KN.CommandSlideInsertBuildArchive.identifier_for_chunk_to_insert_after:type_name -> KN.BuildChunkIdentifierArchive
	75,  // 120: KN.CommandSlideInsertBuildArchive.old_tuples_to_update:type_name -> TSP.Reference
	78,  // 121: KN.InsertBuildDescriptionArchive.slide_id:type_name -> TSP.UUID
	75,  // 122: KN.InsertBuildDescriptionArchive.build_to_insert:type_name -> TSP.Reference
	75,  // 123: KN.InsertBuildDescriptionArchive.chunks_to_insert:type_name -> TSP.Reference
	91,  // 124: KN.InsertBuildDescriptionArchive.identifers_for_chunks_to_insert_after:type_name -> KN.BuildChunkIdentifierArchive
	75,  // 125: KN.InsertBuildDescriptionArchive.tuples_to_update:type_name -> TSP.Reference
	91,  // 126: KN.InsertBuildDescriptionArchive.fallback_chunk_identifiers:type_name -> KN.BuildChunkIdentifierArchive
	92,  // 127: KN.UndoObjectArchive.super:type_name -> TSD.TSDUndoObjectArchive
	77,  // 128: KN.CommandSlideRemoveBuildArchive.super:type_name -> TSK.CommandArchive
	75,  // 129: KN.CommandSlideRemoveBuildArchive.remove_build_description:type_name -> TSP.Reference
	75,  // 130: KN.CommandSlideRemoveBuildArchive.build:type_name -> TSP.Reference
	75,  // 131: KN.CommandSlideRemoveBuildArchive.chunks_to_insert:type_name -> TSP.Reference
	91,  // 132: KN.CommandSlideRemoveBuildArchive.identifiers_for_chunks_to_insert_after:type_name -> KN.BuildChunkIdentifierArchive
	75,  // 133: KN.CommandSlideRemoveBuildArchive.old_tuples_to_update:type_name -> TSP.Reference
	91,  // 134: KN.CommandSlideRemoveBuildArchive.fallback_chunk_identifiers:type_name -> KN.BuildChunkIdentifierArchive
	78,  // 135: KN.RemoveBuildDescriptionArchive.slide_id:type_name -> TSP.UUID
	78,  // 136: KN.RemoveBuildDescriptionArchive.build_id:type_name -> TSP.UUID
	75,  // 137: KN.RemoveBuildDescriptionArchive.tuples_to_update:type_name -> TSP.Reference
	77,  // 138: KN.CommandSlideInsertBuildChunkArchive.super:type_name -> TSK.CommandArchive
	78,  // 139: KN.CommandSlideInsertBuildChunkArchive.slide_id:type_name -> TSP.UUID
	75,  // 140: KN.CommandSlideInsertBuildChunkArchive.chunk_to_insert:type_name -> TSP.Reference
	91,  // 141: KN.CommandSlideInsertBuildChunkArchive.identifier_for_chunk_to_insert_after:type_name -> KN.BuildChunkIdentifierArchive
	75,  // 142: KN.CommandSlideInsertBuildChunkArchive.tuples_to_update:type_name -> TSP.Reference
	75,  // 143: KN.CommandSlideInsertBuildChunkArchive.old_tuples_to_update:type_name -> TSP.Reference
	77,  // 144: KN.CommandSlideRemoveBuildChunkArchive.super:type_name -> TSK.CommandArchive
	78,  // 145: KN.CommandSlideRemoveBuildChunkArchive.slide_id:type_name -> TSP.UUID
	75,  // 146: KN.CommandSlideRemoveBuildChunkArchive.removed_chunk:type_name -> TSP.Reference
	91,  // 147: KN.CommandSlideRemoveBuildChunkArchive.identifier_for_chunk_to_remove:type_name -> KN.BuildChunkIdentifierArchive
	91,  // 148: KN.CommandSlideRemoveBuildChunkArchive.identifier_for_chunk_to_insert_after:type_name -> KN.BuildChunkIdentifierArchive
	75,  // 149: KN.CommandSlideRemoveBuildChunkArchive.tuples_to_update:type_name -> TSP.Reference
	75,  // 150: KN.CommandSlideRemoveBuildChunkArchive.old_tuples_to_update:type_name -> TSP.Reference
	77,  // 151: KN.CommandSlideMoveBuildChunksArchive.super:type_name -> TSK.CommandArchive
	91,  // 152: KN.CommandSlideMoveBuildChunksArchive.identifiers_for_chunks_to_move:type_name -> KN.BuildChunkIdentifierArchive
	91,  // 153: KN.CommandSlideMoveBuildChunksArchive.identifiers_for_chunks_to_move_after:type_name -> KN.BuildChunkIdentifierArchive
	91,  // 154: KN.CommandSlideMoveBuildChunksArchive.identifiers_for_chunks_to_move_after_for_undo:type_name -> KN.BuildChunkIdentifierArchive
	75,  // 155: KN.CommandSlideMoveBuildChunksArchive.tuples_to_update:type_name -> TSP.Reference
	75,  // 156: KN.CommandSlideMoveBuildChunksArchive.old_tuples_to_update:type_name -> TSP.Reference
	91,  // 157: KN.CommandSlideMoveBuildChunksArchive.identifiers_for_chunks_to_move_including_clustered_inactive_chunks:type_name -> KN.BuildChunkIdentifierArchive
	77,  // 158: KN.CommandBuildSetValueArchive.super:type_name -> TSK.CommandArchive
	75,  // 159: KN.CommandBuildSetValueArchive.tuple:type_name -> TSP.Reference
	75,  // 160: KN.CommandBuildSetValueArchive.chunks_to_add:type_name -> TSP.Reference
	91,  // 161: KN.CommandBuildSetValueArchive.identifiers_for_chunks_to_insert_after:type_name -> KN.BuildChunkIdentifierArchive
	91,  // 162: KN.CommandBuildSetValueArchive.identifiers_for_chunks_to_remove:type_name -> KN.BuildChunkIdentifierArchive
	75,  // 163: KN.CommandBuildSetValueArchive.tuples_to_update:type_name -> TSP.Reference
	75,  // 164: KN.CommandBuildSetValueArchive.old_tuple_for_main_property:type_name -> TSP.Reference
	75,  // 165: KN.CommandBuildSetValueArchive.old_tuples_to_update_for_sub_commands:type_name -> TSP.Reference
	91,  // 166: KN.CommandBuildSetValueArchive.identifiers_for_added_chunks:type_name -> KN.BuildChunkIdentifierArchive
	91,  // 167: KN.CommandBuildSetValueArchive.generated_identifiers:type_name -> KN.BuildChunkIdentifierArchive
	75,  // 168: KN.CommandBuildSetValueArchive.removed_chunks:type_name -> TSP.Reference
	91,  // 169: KN.CommandBuildSetValueArchive.identifiers_for_chunks_prior_to_removed_chunks:type_name -> KN.BuildChunkIdentifierArchive
	91,  // 170: KN.CommandBuildSetValueArchive.old_chunk_identifiers:type_name -> KN.BuildChunkIdentifierArchive
	75,  // 171: KN.CommandBuildSetValueArchive.chunks_removed_during_undo:type_name -> TSP.Reference
	77,  // 172: KN.CommandBuildUpdateChunkReferentsArchive.super:type_name -> TSK.CommandArchive
	78,  // 173: KN.CommandBuildUpdateChunkReferentsArchive.build_id:type_name -> TSP.UUID
	75,  // 174: KN.CommandBuildUpdateChunkReferentsArchive.tuples_to_update:type_name -> TSP.Reference
	75,  // 175: KN.CommandBuildUpdateChunkReferentsArchive.old_tuples_to_update:type_name -> TSP.Reference
	77,  // 176: KN.CommandBuildUpdateChunkCountArchive.super:type_name -> TSK.CommandArchive
	78,  // 177: KN.CommandBuildUpdateChunkCountArchive.slide_id:type_name -> TSP.UUID
	78,  // 178: KN.CommandBuildUpdateChunkCountArchive.drawable_ids:type_name -> TSP.UUID
	75,  // 179: KN.CommandBuildUpdateChunkCountArchive.expected_delivery_style_tuples:type_name -> TSP.Reference
	75,  // 180: KN.CommandBuildUpdateChunkCountArchive.chunks_to_add:type_name -> TSP.Reference
	91,  // 181: KN.CommandBuildUpdateChunkCountArchive.identifiers_for_chunks_to_insert_after:type_name -> KN.BuildChunkIdentifierArchive
	91,  // 182: KN.CommandBuildUpdateChunkCountArchive.identifiers_for_chunks_to_remove:type_name -> KN.BuildChunkIdentifierArchive
	75,  // 183: KN.CommandBuildUpdateChunkCountArchive.tuples_to_update:type_name -> TSP.Reference
	75,  // 184: KN.CommandBuildUpdateChunkCountArchive.old_tuples_to_update:type_name -> TSP.Reference
	91,  // 185: KN.CommandBuildUpdateChunkCountArchive.identifiers_for_added_chunks:type_name -> KN.BuildChunkIdentifierArchive
	91,  // 186: KN.CommandBuildUpdateChunkCountArchive.generated_identifiers:type_name -> KN.BuildChunkIdentifierArchive
	75,  // 187: KN.CommandBuildUpdateChunkCountArchive.removed_chunks:type_name -> TSP.Reference
	91,  // 188: KN.CommandBuildUpdateChunkCountArchive.identifiers_for_chunks_prior_to_removed_chunks:type_name -> KN.BuildChunkIdentifierArchive
	75,  // 189: KN.CommandBuildUpdateChunkCountArchive.old_delivery_style_tuples:type_name -> TSP.Reference
	91,  // 190: KN.CommandBuildUpdateChunkCountArchive.old_chunk_identifiers:type_name -> KN.BuildChunkIdentifierArchive
	75,  // 191: KN.CommandBuildUpdateChunkCountArchive.working_builds:type_name -> TSP.Reference
	75,  // 192: KN.CommandBuildUpdateChunkCountArchive.chunks_removed_during_undo:type_name -> TSP.Reference
	75,  // 193: KN.CommandBuildUpdateChunkCountArchive.chunks_added_during_undo:type_name -> TSP.Reference
	77,  // 194: KN.CommandBuildChunkSetValueArchive.super:type_name -> TSK.CommandArchive
	75,  // 195: KN.CommandBuildChunkSetValueArchive.tuples_to_update:type_name -> TSP.Reference
	75,  // 196: KN.CommandBuildChunkSetValueArchive.old_tuples_to_update:type_name -> TSP.Reference
	77,  // 197: KN.CommandTransitionSetValueArchive.super:type_name -> TSK.CommandArchive
	82,  // 198: KN.CommandTransitionSetValueArchive.slide_node_id_path:type_name -> TSP.UUIDPath
	93,  // 199: KN.CommandTransitionSetValueArchive.old_attributes:type_name -> KN.TransitionAttributesArchive
	93,  // 200: KN.CommandTransitionSetValueArchive.attributes:type_name -> KN.TransitionAttributesArchive
	77,  // 201: KN.CommandShowSetSlideNumberVisibilityArchive.super:type_name -> TSK.CommandArchive
	78,  // 202: KN.CommandShowSetSlideNumberVisibilityArchive.ids_of_slide_nodes_to_skip:type_name -> TSP.UUID
	78,  // 203: KN.CommandShowSetSlideNumberVisibilityArchive.ids_of_slide_nodes_already_correct:type_name -> TSP.UUID
	77,  // 204: KN.CommandTemplateSetThumbnailTextArchive.super:type_name -> TSK.CommandArchive
	78,  // 205: KN.CommandTemplateSetThumbnailTextArchive.template_id:type_name -> TSP.UUID
	77,  // 206: KN.CommandTemplateSetBodyStylesArchive.super:type_name -> TSK.CommandArchive
	78,  // 207: KN.CommandTemplateSetBodyStylesArchive.template_id:type_name -> TSP.UUID
	75,  // 208: KN.CommandTemplateSetBodyStylesArchive.new_paragraph_styles:type_name -> TSP.Reference
	75,  // 209: KN.CommandTemplateSetBodyStylesArchive.new_list_styles:type_name -> TSP.Reference
	75,  // 210: KN.CommandTemplateSetBodyStylesArchive.old_paragraph_styles:type_name -> TSP.Reference
	75,  // 211: KN.CommandTemplateSetBodyStylesArchive.old_list_styles:type_name -> TSP.Reference
	77,  // 212: KN.CommandChangeTemplateSlideArchive.super:type_name -> TSK.CommandArchive
	82,  // 213: KN.CommandChangeTemplateSlideArchive.slide_id_path:type_name -> TSP.UUIDPath
	75,  // 214: KN.CommandChangeTemplateSlideArchive.template_slide_node:type_name -> TSP.Reference
	75,  // 215: KN.CommandChangeTemplateSlideArchive.old_template_slide_node:type_name -> TSP.Reference
	75,  // 216: KN.CommandChangeTemplateSlideArchive.target_prototype:type_name -> TSP.Reference
	77,  // 217: KN.CommandSlidePrimitiveSetTemplateArchive.super:type_name -> TSK.CommandArchive
	82,  // 218: KN.CommandSlidePrimitiveSetTemplateArchive.slide_id_path:type_name -> TSP.UUIDPath
	78,  // 219: KN.CommandSlidePrimitiveSetTemplateArchive.template_id:type_name -> TSP.UUID
	75,  // 220: KN.CommandSlidePrimitiveSetTemplateArchive.old_template_slide_node:type_name -> TSP.Reference
	77,  // 221: KN.CommandSlideResetTemplateBackgroundObjectsArchive.super:type_name -> TSK.CommandArchive
	82,  // 222: KN.CommandSlideResetTemplateBackgroundObjectsArchive.slide_id_path:type_name -> TSP.UUIDPath
	77,  // 223: KN.CommandShowSetSoundtrack.super:type_name -> TSK.CommandArchive
	75,  // 224: KN.CommandShowSetSoundtrack.show:type_name -> TSP.Reference
	75,  // 225: KN.CommandShowSetSoundtrack.soundtrack:type_name -> TSP.Reference
	75,  // 226: KN.CommandShowSetSoundtrack.old_soundtrack:type_name -> TSP.Reference
	77,  // 227: KN.CommandSoundtrackSetValue.super:type_name -> TSK.CommandArchive
	78,  // 228: KN.CommandSoundtrackSetValue.soundtrack_id:type_name -> TSP.UUID
	71,  // 229: KN.CommandSoundtrackSetValue.old_value:type_name -> KN.CommandSoundtrackSetValue.PropertyValue
	71,  // 230: KN.CommandSoundtrackSetValue.new_value:type_name -> KN.CommandSoundtrackSetValue.PropertyValue
	77,  // 231: KN.CommandSlideUpdateTemplateDrawables.super:type_name -> TSK.CommandArchive
	78,  // 232: KN.CommandSlideUpdateTemplateDrawables.slide_id:type_name -> TSP.UUID
	94,  // 233: KN.CommandSlideUpdateTemplateDrawables.id_placement_operation_args:type_name -> TSK.IdPlacementOperationArgs
	75,  // 234: KN.CommandSlideUpdateTemplateDrawables.old_child_infos_for_undo:type_name -> TSP.Reference
	95,  // 235: KN.ChartInfoGeometryCommandArchive.super:type_name -> TSD.InfoGeometryCommandArchive
	96,  // 236: KN.ChartInfoGeometryCommandArchive.previous_legend_offset:type_name -> TSP.Point
	76,  // 237: KN.ChartInfoGeometryCommandArchive.previous_legend_size:type_name -> TSP.Size
	96,  // 238: KN.ChartInfoGeometryCommandArchive.adjusted_legend_offset:type_name -> TSP.Point
	76,  // 239: KN.ChartInfoGeometryCommandArchive.adjusted_legend_size:type_name -> TSP.Size
	97,  // 240: KN.CanvasSelectionTransformerArchive.transformer_helper:type_name -> TSD.InfoCollectionSelectionTransformerHelperArchive
	91,  // 241: KN.CanvasSelectionTransformerArchive.build_chunk_ids:type_name -> KN.BuildChunkIdentifierArchive
	78,  // 242: KN.CanvasSelectionTransformerArchive.action_build_ids:type_name -> TSP.UUID
	78,  // 243: KN.CanvasSelectionTransformerArchive.originally_selected_drawable_uuids:type_name -> TSP.UUID
	75,  // 244: KN.DocumentSelectionTransformerArchive.document_selection:type_name -> TSP.Reference
	97,  // 245: KN.NoteCanvasSelectionTransformerArchive.transformer_helper:type_name -> TSD.InfoCollectionSelectionTransformerHelperArchive
	75,  // 246: KN.OutlineCanvasSelectionTransformerArchive.canvas_selection_transformer:type_name -> TSP.Reference
	82,  // 247: KN.OutlineCanvasSelectionTransformerArchive.storage_uuid_path:type_name -> TSP.UUIDPath
	82,  // 248: KN.SlideCollectionSelectionTransformerHelperArchive.slide_nodes:type_name -> TSP.UUIDPath
	82,  // 249: KN.SlideCollectionSelectionTransformerHelperArchive.slide_node_to_edit:type_name -> TSP.UUIDPath
	59,  // 250: KN.SlideCollectionSelectionTransformerArchive.transformer_helper:type_name -> KN.SlideCollectionSelectionTransformerHelperArchive
	59,  // 251: KN.OutlineSelectionTransformerArchive.transformer_helper:type_name -> KN.SlideCollectionSelectionTransformerHelperArchive
	98,  // 252: KN.OutlineSelectionTransformerArchive.selection_range_addresses:type_name -> TSK.RangeAddress
	99,  // 253: KN.CommandLiveVideoInfoApplyPreset.super:type_name -> TSD.BaseApplyPresetCommandArchive
	77,  // 254: KN.CommandLiveVideoInfoSetSource.super:type_name -> TSK.CommandArchive
	82,  // 255: KN.CommandLiveVideoInfoSetSource.live_video_info_id_path:type_name -> TSP.UUIDPath
	78,  // 256: KN.CommandLiveVideoInfoSetSource.source_id:type_name -> TSP.UUID
	78,  // 257: KN.CommandLiveVideoInfoSetSource.local_collaboration_command_usage_token:type_name -> TSP.UUID
	100, // 258: KN.CommandLiveVideoInfoSetSource.working_source_old_collaboration_command_usage_state:type_name -> KN.LiveVideoSourceCollaborationCommandUsageState
	75,  // 259: KN.CommandLiveVideoInfoSetSource.old_source:type_name -> TSP.Reference
	78,  // 260: KN.CommandLiveVideoInfoSetSource.old_source_id:type_name -> TSP.UUID
	77,  // 261: KN.CommandLiveVideoInfoSetValue.super:type_name -> TSK.CommandArchive
	82,  // 262: KN.CommandLiveVideoInfoSetValue.live_video_info_id_path:type_name -> TSP.UUIDPath
	2,   // 263: KN.CommandLiveVideoInfoSetValue.property:type_name -> KN.CommandLiveVideoInfoSetValue.Property
	72,  // 264: KN.CommandLiveVideoInfoSetValue.value:type_name -> KN.CommandLiveVideoInfoSetValue.PropertyValue
	72,  // 265: KN.CommandLiveVideoInfoSetValue.old_value:type_name -> KN.CommandLiveVideoInfoSetValue.PropertyValue
	77,  // 266: KN.CommandLiveVideoSourceSetValue.super:type_name -> TSK.CommandArchive
	78,  // 267: KN.CommandLiveVideoSourceSetValue.live_video_source_id:type_name -> TSP.UUID
	3,   // 268: KN.CommandLiveVideoSourceSetValue.property:type_name -> KN.CommandLiveVideoSourceSetValue.Property
	73,  // 269: KN.CommandLiveVideoSourceSetValue.value:type_name -> KN.CommandLiveVideoSourceSetValue.PropertyValue
	73,  // 270: KN.CommandLiveVideoSourceSetValue.old_value:type_name -> KN.CommandLiveVideoSourceSetValue.PropertyValue
	101, // 271: KN.CommandLiveVideoStyleSetValue.super:type_name -> TSD.BaseStyleSetValueCommandArchive
	102, // 272: KN.CommandLiveVideoStyleSetValue.change:type_name -> TSDSOS.MediaStylePropertyChangeSetArchive
	77,  // 273: KN.CommandThemeAddLiveVideoSource.super:type_name -> TSK.CommandArchive
	75,  // 274: KN.CommandThemeAddLiveVideoSource.live_video_source:type_name -> TSP.Reference
	77,  // 275: KN.CommandThemeRemoveLiveVideoSource.super:type_name -> TSK.CommandArchive
	78,  // 276: KN.CommandThemeRemoveLiveVideoSource.live_video_source_id:type_name -> TSP.UUID
	75,  // 277: KN.CommandThemeRemoveLiveVideoSource.removed_live_video_source:type_name -> TSP.Reference
	103, // 278: KN.CommandShowSetValueArchive.PropertyValue.show_mode_value:type_name -> KN.ShowArchive.KNShowMode
	76,  // 279: KN.CommandShowSetValueArchive.PropertyValue.size_value:type_name -> TSP.Size
	104, // 280: KN.CommandShowChangeThemeArchive.IdentifierToStyleMap.styles:type_name -> TSS.StylesheetArchive.IdentifiedStyleEntry
	105, // 281: KN.CommandSoundtrackSetValue.PropertyValue.mode_value:type_name -> KN.Soundtrack.SoundtrackMode
	106, // 282: KN.CommandSoundtrackSetValue.PropertyValue.media_reference_values:type_name -> TSP.DataReference
	96,  // 283: KN.CommandLiveVideoInfoSetValue.PropertyValue.normalized_offset:type_name -> TSP.Point
	107, // 284: KN.CommandLiveVideoSourceSetValue.PropertyValue.capture_device_description:type_name -> KN.LiveVideoCaptureDeviceDescription
	106, // 285: KN.CommandLiveVideoSourceSetValue.PropertyValue.poster_image_data:type_name -> TSP.DataReference
	286, // [286:286] is the sub-list for method output_type
	286, // [286:286] is the sub-list for method input_type
	286, // [286:286] is the sub-list for extension type_name
	286, // [286:286] is the sub-list for extension extendee
	0,   // [0:286] is the sub-list for field type_name
}

func init() { file_KNCommandArchives_proto_init() }
func file_KNCommandArchives_proto_init() {
	if File_KNCommandArchives_proto != nil {
		return
	}
	file_TSPMessages_proto_init()
	file_TSKArchives_proto_init()
	file_TSSArchives_proto_init()
	file_TSDArchives_proto_init()
	file_TSDArchives_sos_proto_init()
	file_TSDCommandArchives_proto_init()
	file_KNArchives_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_KNCommandArchives_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UIStateCommandGroupArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNCommandArchives_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSlideInsertDrawablesArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNCommandArchives_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSlideSetPlaceholdersForTagsArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNCommandArchives_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandTemplateSlideSetPlaceholderForTagArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNCommandArchives_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSlidePropagateSetPlaceholderForTagArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNCommandArchives_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSlideRemoveDrawableArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNCommandArchives_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSlideMoveDrawableZOrderArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNCommandArchives_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSlideNodeSetPropertyArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNCommandArchives_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSlideNodeSetViewStatePropertyArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNCommandArchives_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSlideSetBackgroundFillArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNCommandArchives_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSlideSetStyleArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNCommandArchives_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandShowMarkOutOfSyncRecordingArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNCommandArchives_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandShowMarkOutOfSyncRecordingIfNeededArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNCommandArchives_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandShowRemoveRecordingArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNCommandArchives_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandShowReplaceRecordingArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNCommandArchives_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandShowSetValueArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNCommandArchives_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandShowInsertSlideArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNCommandArchives_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandShowMoveSlideArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNCommandArchives_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandShowRemoveSlideArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNCommandArchives_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandShowChangeThemeArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNCommandArchives_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandShowChangeSlideSizeArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNCommandArchives_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSetThemeCustomEffectTimingCurveArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNCommandArchives_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandMoveTemplatesArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNCommandArchives_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandInsertTemplateArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNCommandArchives_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandPrimitiveInsertTemplateArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNCommandArchives_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandRemoveTemplateArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNCommandArchives_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandPrimitiveRemoveTemplateArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNCommandArchives_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSlideInsertBuildArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNCommandArchives_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertBuildDescriptionArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNCommandArchives_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UndoObjectArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNCommandArchives_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSlideRemoveBuildArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNCommandArchives_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveBuildDescriptionArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNCommandArchives_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSlideInsertBuildChunkArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNCommandArchives_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSlideRemoveBuildChunkArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNCommandArchives_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSlideMoveBuildChunksArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNCommandArchives_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandBuildSetValueArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNCommandArchives_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandBuildUpdateChunkReferentsArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNCommandArchives_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandBuildUpdateChunkCountArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNCommandArchives_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandBuildChunkSetValueArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNCommandArchives_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandTransitionSetValueArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNCommandArchives_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandShowSetSlideNumberVisibilityArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNCommandArchives_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandTemplateSetThumbnailTextArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNCommandArchives_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandTemplateSetBodyStylesArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNCommandArchives_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandChangeTemplateSlideArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNCommandArchives_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSlidePrimitiveSetTemplateArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNCommandArchives_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSlideResetTemplateBackgroundObjectsArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNCommandArchives_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandShowSetSoundtrack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNCommandArchives_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSoundtrackSetValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNCommandArchives_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSlideUpdateTemplateDrawables); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNCommandArchives_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartInfoGeometryCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNCommandArchives_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CanvasSelectionTransformerArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNCommandArchives_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionGhostSelectionTransformerArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNCommandArchives_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentSelectionTransformerArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNCommandArchives_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoteCanvasSelectionTransformerArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNCommandArchives_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutlineCanvasSelectionTransformerArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNCommandArchives_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlideCollectionSelectionTransformerHelperArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNCommandArchives_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlideCollectionSelectionTransformerArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNCommandArchives_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutlineSelectionTransformerArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNCommandArchives_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandLiveVideoInfoApplyPreset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNCommandArchives_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandLiveVideoInfoSetSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNCommandArchives_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandLiveVideoInfoSetValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNCommandArchives_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandLiveVideoSourceSetValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNCommandArchives_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandLiveVideoStyleSetValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNCommandArchives_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandThemeAddLiveVideoSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNCommandArchives_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandThemeRemoveLiveVideoSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNCommandArchives_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandShowSetValueArchive_PropertyValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNCommandArchives_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandShowChangeThemeArchive_IdentifierToStyleMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNCommandArchives_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSoundtrackSetValue_PropertyValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNCommandArchives_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandLiveVideoInfoSetValue_PropertyValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_KNCommandArchives_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandLiveVideoSourceSetValue_PropertyValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_KNCommandArchives_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   70,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_KNCommandArchives_proto_goTypes,
		DependencyIndexes: file_KNCommandArchives_proto_depIdxs,
		EnumInfos:         file_KNCommandArchives_proto_enumTypes,
		MessageInfos:      file_KNCommandArchives_proto_msgTypes,
	}.Build()
	File_KNCommandArchives_proto = out.File
	file_KNCommandArchives_proto_rawDesc = nil
	file_KNCommandArchives_proto_goTypes = nil
	file_KNCommandArchives_proto_depIdxs = nil
}
