// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: TSAArchives.proto

package kpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GalleryInfoCaptionMode int32

const (
	GalleryInfoCaptionMode_GalleryInfoCaptionModeNone      GalleryInfoCaptionMode = 0
	GalleryInfoCaptionMode_GalleryInfoCaptionModePerImage  GalleryInfoCaptionMode = 1
	GalleryInfoCaptionMode_GalleryInfoCaptionModeAllImages GalleryInfoCaptionMode = 2
)

// Enum value maps for GalleryInfoCaptionMode.
var (
	GalleryInfoCaptionMode_name = map[int32]string{
		0: "GalleryInfoCaptionModeNone",
		1: "GalleryInfoCaptionModePerImage",
		2: "GalleryInfoCaptionModeAllImages",
	}
	GalleryInfoCaptionMode_value = map[string]int32{
		"GalleryInfoCaptionModeNone":      0,
		"GalleryInfoCaptionModePerImage":  1,
		"GalleryInfoCaptionModeAllImages": 2,
	}
)

func (x GalleryInfoCaptionMode) Enum() *GalleryInfoCaptionMode {
	p := new(GalleryInfoCaptionMode)
	*p = x
	return p
}

func (x GalleryInfoCaptionMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GalleryInfoCaptionMode) Descriptor() protoreflect.EnumDescriptor {
	return file_TSAArchives_proto_enumTypes[0].Descriptor()
}

func (GalleryInfoCaptionMode) Type() protoreflect.EnumType {
	return &file_TSAArchives_proto_enumTypes[0]
}

func (x GalleryInfoCaptionMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GalleryInfoCaptionMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GalleryInfoCaptionMode(num)
	return nil
}

// Deprecated: Use GalleryInfoCaptionMode.Descriptor instead.
func (GalleryInfoCaptionMode) EnumDescriptor() ([]byte, []int) {
	return file_TSAArchives_proto_rawDescGZIP(), []int{0}
}

type GalleryInfoProperty int32

const (
	GalleryInfoProperty_GalleryInfoCaptionProperty GalleryInfoProperty = 0
)

// Enum value maps for GalleryInfoProperty.
var (
	GalleryInfoProperty_name = map[int32]string{
		0: "GalleryInfoCaptionProperty",
	}
	GalleryInfoProperty_value = map[string]int32{
		"GalleryInfoCaptionProperty": 0,
	}
)

func (x GalleryInfoProperty) Enum() *GalleryInfoProperty {
	p := new(GalleryInfoProperty)
	*p = x
	return p
}

func (x GalleryInfoProperty) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GalleryInfoProperty) Descriptor() protoreflect.EnumDescriptor {
	return file_TSAArchives_proto_enumTypes[1].Descriptor()
}

func (GalleryInfoProperty) Type() protoreflect.EnumType {
	return &file_TSAArchives_proto_enumTypes[1]
}

func (x GalleryInfoProperty) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GalleryInfoProperty) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GalleryInfoProperty(num)
	return nil
}

// Deprecated: Use GalleryInfoProperty.Descriptor instead.
func (GalleryInfoProperty) EnumDescriptor() ([]byte, []int) {
	return file_TSAArchives_proto_rawDescGZIP(), []int{1}
}

type GalleryCaptionMode int32

const (
	GalleryCaptionMode_GalleryCaptionModeNone      GalleryCaptionMode = 0
	GalleryCaptionMode_GalleryCaptionModePerImage  GalleryCaptionMode = 1
	GalleryCaptionMode_GalleryCaptionModeAllImages GalleryCaptionMode = 2
)

// Enum value maps for GalleryCaptionMode.
var (
	GalleryCaptionMode_name = map[int32]string{
		0: "GalleryCaptionModeNone",
		1: "GalleryCaptionModePerImage",
		2: "GalleryCaptionModeAllImages",
	}
	GalleryCaptionMode_value = map[string]int32{
		"GalleryCaptionModeNone":      0,
		"GalleryCaptionModePerImage":  1,
		"GalleryCaptionModeAllImages": 2,
	}
)

func (x GalleryCaptionMode) Enum() *GalleryCaptionMode {
	p := new(GalleryCaptionMode)
	*p = x
	return p
}

func (x GalleryCaptionMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GalleryCaptionMode) Descriptor() protoreflect.EnumDescriptor {
	return file_TSAArchives_proto_enumTypes[2].Descriptor()
}

func (GalleryCaptionMode) Type() protoreflect.EnumType {
	return &file_TSAArchives_proto_enumTypes[2]
}

func (x GalleryCaptionMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GalleryCaptionMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GalleryCaptionMode(num)
	return nil
}

// Deprecated: Use GalleryCaptionMode.Descriptor instead.
func (GalleryCaptionMode) EnumDescriptor() ([]byte, []int) {
	return file_TSAArchives_proto_rawDescGZIP(), []int{2}
}

type GalleryItemProperty int32

const (
	GalleryItemProperty_GalleryItemPropertyImageData                GalleryItemProperty = 0
	GalleryItemProperty_GalleryItemPropertyThumbnailImageData       GalleryItemProperty = 1
	GalleryItemProperty_GalleryItemPropertyAccessibilityDescription GalleryItemProperty = 2
)

// Enum value maps for GalleryItemProperty.
var (
	GalleryItemProperty_name = map[int32]string{
		0: "GalleryItemPropertyImageData",
		1: "GalleryItemPropertyThumbnailImageData",
		2: "GalleryItemPropertyAccessibilityDescription",
	}
	GalleryItemProperty_value = map[string]int32{
		"GalleryItemPropertyImageData":                0,
		"GalleryItemPropertyThumbnailImageData":       1,
		"GalleryItemPropertyAccessibilityDescription": 2,
	}
)

func (x GalleryItemProperty) Enum() *GalleryItemProperty {
	p := new(GalleryItemProperty)
	*p = x
	return p
}

func (x GalleryItemProperty) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GalleryItemProperty) Descriptor() protoreflect.EnumDescriptor {
	return file_TSAArchives_proto_enumTypes[3].Descriptor()
}

func (GalleryItemProperty) Type() protoreflect.EnumType {
	return &file_TSAArchives_proto_enumTypes[3]
}

func (x GalleryItemProperty) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GalleryItemProperty) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GalleryItemProperty(num)
	return nil
}

// Deprecated: Use GalleryItemProperty.Descriptor instead.
func (GalleryItemProperty) EnumDescriptor() ([]byte, []int) {
	return file_TSAArchives_proto_rawDescGZIP(), []int{3}
}

type TSADocumentArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                                         *TSKDocumentArchive             `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	TextPresetDisplayItems                        []*TextPresetDisplayItemArchive `protobuf:"bytes,2,rep,name=text_preset_display_items,json=textPresetDisplayItems" json:"text_preset_display_items,omitempty"`
	DocumentLanguage                              *string                         `protobuf:"bytes,3,opt,name=document_language,json=documentLanguage" json:"document_language,omitempty"`
	CalculationEngine                             *Reference                      `protobuf:"bytes,4,opt,name=calculation_engine,json=calculationEngine" json:"calculation_engine,omitempty"`
	ViewState                                     *Reference                      `protobuf:"bytes,5,opt,name=view_state,json=viewState" json:"view_state,omitempty"`
	FunctionBrowserState                          *Reference                      `protobuf:"bytes,6,opt,name=function_browser_state,json=functionBrowserState" json:"function_browser_state,omitempty"`
	TablesCustomFormatList                        *Reference                      `protobuf:"bytes,7,opt,name=tables_custom_format_list,json=tablesCustomFormatList" json:"tables_custom_format_list,omitempty"`
	NeedsMediaCompatibilityUpgrade                *bool                           `protobuf:"varint,8,opt,name=needs_media_compatibility_upgrade,json=needsMediaCompatibilityUpgrade" json:"needs_media_compatibility_upgrade,omitempty"`
	TemplateIdentifier                            *string                         `protobuf:"bytes,9,opt,name=template_identifier,json=templateIdentifier" json:"template_identifier,omitempty"`
	ShortcutController                            *Reference                      `protobuf:"bytes,10,opt,name=shortcut_controller,json=shortcutController" json:"shortcut_controller,omitempty"`
	AnnotationCacheDeprecated                     *Reference                      `protobuf:"bytes,11,opt,name=annotation_cache_deprecated,json=annotationCacheDeprecated" json:"annotation_cache_deprecated,omitempty"`
	CustomFormatList                              *Reference                      `protobuf:"bytes,12,opt,name=custom_format_list,json=customFormatList" json:"custom_format_list,omitempty"`
	AnnotationCacheDeprecated_2                   *Reference                      `protobuf:"bytes,13,opt,name=annotation_cache_deprecated_2,json=annotationCacheDeprecated2" json:"annotation_cache_deprecated_2,omitempty"`
	CollaborativeMediaCompatibilityUpgradeDidFail *bool                           `protobuf:"varint,14,opt,name=collaborative_media_compatibility_upgrade_did_fail,json=collaborativeMediaCompatibilityUpgradeDidFail" json:"collaborative_media_compatibility_upgrade_did_fail,omitempty"`
	CanUseHevc                                    *bool                           `protobuf:"varint,15,opt,name=can_use_hevc,json=canUseHevc" json:"can_use_hevc,omitempty"`
	IsContentSource                               *bool                           `protobuf:"varint,16,opt,name=is_content_source,json=isContentSource" json:"is_content_source,omitempty"`
}

func (x *TSADocumentArchive) Reset() {
	*x = TSADocumentArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSAArchives_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSADocumentArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSADocumentArchive) ProtoMessage() {}

func (x *TSADocumentArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSAArchives_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSADocumentArchive.ProtoReflect.Descriptor instead.
func (*TSADocumentArchive) Descriptor() ([]byte, []int) {
	return file_TSAArchives_proto_rawDescGZIP(), []int{0}
}

func (x *TSADocumentArchive) GetSuper() *TSKDocumentArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *TSADocumentArchive) GetTextPresetDisplayItems() []*TextPresetDisplayItemArchive {
	if x != nil {
		return x.TextPresetDisplayItems
	}
	return nil
}

func (x *TSADocumentArchive) GetDocumentLanguage() string {
	if x != nil && x.DocumentLanguage != nil {
		return *x.DocumentLanguage
	}
	return ""
}

func (x *TSADocumentArchive) GetCalculationEngine() *Reference {
	if x != nil {
		return x.CalculationEngine
	}
	return nil
}

func (x *TSADocumentArchive) GetViewState() *Reference {
	if x != nil {
		return x.ViewState
	}
	return nil
}

func (x *TSADocumentArchive) GetFunctionBrowserState() *Reference {
	if x != nil {
		return x.FunctionBrowserState
	}
	return nil
}

func (x *TSADocumentArchive) GetTablesCustomFormatList() *Reference {
	if x != nil {
		return x.TablesCustomFormatList
	}
	return nil
}

func (x *TSADocumentArchive) GetNeedsMediaCompatibilityUpgrade() bool {
	if x != nil && x.NeedsMediaCompatibilityUpgrade != nil {
		return *x.NeedsMediaCompatibilityUpgrade
	}
	return false
}

func (x *TSADocumentArchive) GetTemplateIdentifier() string {
	if x != nil && x.TemplateIdentifier != nil {
		return *x.TemplateIdentifier
	}
	return ""
}

func (x *TSADocumentArchive) GetShortcutController() *Reference {
	if x != nil {
		return x.ShortcutController
	}
	return nil
}

func (x *TSADocumentArchive) GetAnnotationCacheDeprecated() *Reference {
	if x != nil {
		return x.AnnotationCacheDeprecated
	}
	return nil
}

func (x *TSADocumentArchive) GetCustomFormatList() *Reference {
	if x != nil {
		return x.CustomFormatList
	}
	return nil
}

func (x *TSADocumentArchive) GetAnnotationCacheDeprecated_2() *Reference {
	if x != nil {
		return x.AnnotationCacheDeprecated_2
	}
	return nil
}

func (x *TSADocumentArchive) GetCollaborativeMediaCompatibilityUpgradeDidFail() bool {
	if x != nil && x.CollaborativeMediaCompatibilityUpgradeDidFail != nil {
		return *x.CollaborativeMediaCompatibilityUpgradeDidFail
	}
	return false
}

func (x *TSADocumentArchive) GetCanUseHevc() bool {
	if x != nil && x.CanUseHevc != nil {
		return *x.CanUseHevc
	}
	return false
}

func (x *TSADocumentArchive) GetIsContentSource() bool {
	if x != nil && x.IsContentSource != nil {
		return *x.IsContentSource
	}
	return false
}

type FunctionBrowserStateArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecentFunctions  []uint32 `protobuf:"varint,1,rep,name=recent_functions,json=recentFunctions" json:"recent_functions,omitempty"`
	BackFunctions    []uint32 `protobuf:"varint,2,rep,name=back_functions,json=backFunctions" json:"back_functions,omitempty"`
	ForwardFunctions []uint32 `protobuf:"varint,3,rep,name=forward_functions,json=forwardFunctions" json:"forward_functions,omitempty"`
	CurrentFunction  *uint32  `protobuf:"varint,4,opt,name=current_function,json=currentFunction" json:"current_function,omitempty"`
}

func (x *FunctionBrowserStateArchive) Reset() {
	*x = FunctionBrowserStateArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSAArchives_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunctionBrowserStateArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionBrowserStateArchive) ProtoMessage() {}

func (x *FunctionBrowserStateArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSAArchives_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionBrowserStateArchive.ProtoReflect.Descriptor instead.
func (*FunctionBrowserStateArchive) Descriptor() ([]byte, []int) {
	return file_TSAArchives_proto_rawDescGZIP(), []int{1}
}

func (x *FunctionBrowserStateArchive) GetRecentFunctions() []uint32 {
	if x != nil {
		return x.RecentFunctions
	}
	return nil
}

func (x *FunctionBrowserStateArchive) GetBackFunctions() []uint32 {
	if x != nil {
		return x.BackFunctions
	}
	return nil
}

func (x *FunctionBrowserStateArchive) GetForwardFunctions() []uint32 {
	if x != nil {
		return x.ForwardFunctions
	}
	return nil
}

func (x *FunctionBrowserStateArchive) GetCurrentFunction() uint32 {
	if x != nil && x.CurrentFunction != nil {
		return *x.CurrentFunction
	}
	return 0
}

type ThemePresetsArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CaptionStylePresets []*Reference `protobuf:"bytes,1,rep,name=caption_style_presets,json=captionStylePresets" json:"caption_style_presets,omitempty"`
}

func (x *ThemePresetsArchive) Reset() {
	*x = ThemePresetsArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSAArchives_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThemePresetsArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThemePresetsArchive) ProtoMessage() {}

func (x *ThemePresetsArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSAArchives_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThemePresetsArchive.ProtoReflect.Descriptor instead.
func (*ThemePresetsArchive) Descriptor() ([]byte, []int) {
	return file_TSAArchives_proto_rawDescGZIP(), []int{2}
}

func (x *ThemePresetsArchive) GetCaptionStylePresets() []*Reference {
	if x != nil {
		return x.CaptionStylePresets
	}
	return nil
}

type ShortcutControllerArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*ShortcutControllerArchive_ShortcutMapEntry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
}

func (x *ShortcutControllerArchive) Reset() {
	*x = ShortcutControllerArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSAArchives_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShortcutControllerArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShortcutControllerArchive) ProtoMessage() {}

func (x *ShortcutControllerArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSAArchives_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShortcutControllerArchive.ProtoReflect.Descriptor instead.
func (*ShortcutControllerArchive) Descriptor() ([]byte, []int) {
	return file_TSAArchives_proto_rawDescGZIP(), []int{3}
}

func (x *ShortcutControllerArchive) GetEntries() []*ShortcutControllerArchive_ShortcutMapEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type PropagatePresetCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                    *CommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	PresetChangeCommand      *Reference      `protobuf:"bytes,2,req,name=preset_change_command,json=presetChangeCommand" json:"preset_change_command,omitempty"`
	AlwaysPreserveAppearance *bool           `protobuf:"varint,3,req,name=always_preserve_appearance,json=alwaysPreserveAppearance" json:"always_preserve_appearance,omitempty"`
}

func (x *PropagatePresetCommandArchive) Reset() {
	*x = PropagatePresetCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSAArchives_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropagatePresetCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropagatePresetCommandArchive) ProtoMessage() {}

func (x *PropagatePresetCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSAArchives_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropagatePresetCommandArchive.ProtoReflect.Descriptor instead.
func (*PropagatePresetCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSAArchives_proto_rawDescGZIP(), []int{4}
}

func (x *PropagatePresetCommandArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *PropagatePresetCommandArchive) GetPresetChangeCommand() *Reference {
	if x != nil {
		return x.PresetChangeCommand
	}
	return nil
}

func (x *PropagatePresetCommandArchive) GetAlwaysPreserveAppearance() bool {
	if x != nil && x.AlwaysPreserveAppearance != nil {
		return *x.AlwaysPreserveAppearance
	}
	return false
}

type ShortcutCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super       *CommandArchive `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	OldStyle    *Reference      `protobuf:"bytes,2,opt,name=old_style,json=oldStyle" json:"old_style,omitempty"`
	NewStyle    *Reference      `protobuf:"bytes,3,opt,name=new_style,json=newStyle" json:"new_style,omitempty"`
	OldShortcut *string         `protobuf:"bytes,4,opt,name=old_shortcut,json=oldShortcut" json:"old_shortcut,omitempty"`
	NewShortcut *string         `protobuf:"bytes,5,opt,name=new_shortcut,json=newShortcut" json:"new_shortcut,omitempty"`
}

func (x *ShortcutCommandArchive) Reset() {
	*x = ShortcutCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSAArchives_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShortcutCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShortcutCommandArchive) ProtoMessage() {}

func (x *ShortcutCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSAArchives_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShortcutCommandArchive.ProtoReflect.Descriptor instead.
func (*ShortcutCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSAArchives_proto_rawDescGZIP(), []int{5}
}

func (x *ShortcutCommandArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *ShortcutCommandArchive) GetOldStyle() *Reference {
	if x != nil {
		return x.OldStyle
	}
	return nil
}

func (x *ShortcutCommandArchive) GetNewStyle() *Reference {
	if x != nil {
		return x.NewStyle
	}
	return nil
}

func (x *ShortcutCommandArchive) GetOldShortcut() string {
	if x != nil && x.OldShortcut != nil {
		return *x.OldShortcut
	}
	return ""
}

func (x *ShortcutCommandArchive) GetNewShortcut() string {
	if x != nil && x.NewShortcut != nil {
		return *x.NewShortcut
	}
	return ""
}

type AddCustomFormatCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super           *CommandArchive      `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	CustomFormat    *CustomFormatArchive `protobuf:"bytes,2,opt,name=custom_format,json=customFormat" json:"custom_format,omitempty"`
	CustomFormatKey *UUID                `protobuf:"bytes,3,opt,name=custom_format_key,json=customFormatKey" json:"custom_format_key,omitempty"`
}

func (x *AddCustomFormatCommandArchive) Reset() {
	*x = AddCustomFormatCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSAArchives_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCustomFormatCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCustomFormatCommandArchive) ProtoMessage() {}

func (x *AddCustomFormatCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSAArchives_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCustomFormatCommandArchive.ProtoReflect.Descriptor instead.
func (*AddCustomFormatCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSAArchives_proto_rawDescGZIP(), []int{6}
}

func (x *AddCustomFormatCommandArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *AddCustomFormatCommandArchive) GetCustomFormat() *CustomFormatArchive {
	if x != nil {
		return x.CustomFormat
	}
	return nil
}

func (x *AddCustomFormatCommandArchive) GetCustomFormatKey() *UUID {
	if x != nil {
		return x.CustomFormatKey
	}
	return nil
}

type UpdateCustomFormatCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super           *CommandArchive      `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	CustomFormat    *CustomFormatArchive `protobuf:"bytes,2,opt,name=custom_format,json=customFormat" json:"custom_format,omitempty"`
	OldCustomFormat *CustomFormatArchive `protobuf:"bytes,3,opt,name=old_custom_format,json=oldCustomFormat" json:"old_custom_format,omitempty"`
	CustomFormatKey *UUID                `protobuf:"bytes,4,opt,name=custom_format_key,json=customFormatKey" json:"custom_format_key,omitempty"`
}

func (x *UpdateCustomFormatCommandArchive) Reset() {
	*x = UpdateCustomFormatCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSAArchives_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCustomFormatCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCustomFormatCommandArchive) ProtoMessage() {}

func (x *UpdateCustomFormatCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSAArchives_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCustomFormatCommandArchive.ProtoReflect.Descriptor instead.
func (*UpdateCustomFormatCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSAArchives_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateCustomFormatCommandArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *UpdateCustomFormatCommandArchive) GetCustomFormat() *CustomFormatArchive {
	if x != nil {
		return x.CustomFormat
	}
	return nil
}

func (x *UpdateCustomFormatCommandArchive) GetOldCustomFormat() *CustomFormatArchive {
	if x != nil {
		return x.OldCustomFormat
	}
	return nil
}

func (x *UpdateCustomFormatCommandArchive) GetCustomFormatKey() *UUID {
	if x != nil {
		return x.CustomFormatKey
	}
	return nil
}

type ReplaceCustomFormatCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super             *CommandArchive         `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	CustomFormat      *CustomFormatArchive    `protobuf:"bytes,2,opt,name=custom_format,json=customFormat" json:"custom_format,omitempty"`
	CustomFormatKey   *UUID                   `protobuf:"bytes,3,opt,name=custom_format_key,json=customFormatKey" json:"custom_format_key,omitempty"`
	ReplacementFormat *TSKFormatStructArchive `protobuf:"bytes,4,opt,name=replacement_format,json=replacementFormat" json:"replacement_format,omitempty"`
}

func (x *ReplaceCustomFormatCommandArchive) Reset() {
	*x = ReplaceCustomFormatCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSAArchives_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplaceCustomFormatCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceCustomFormatCommandArchive) ProtoMessage() {}

func (x *ReplaceCustomFormatCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSAArchives_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceCustomFormatCommandArchive.ProtoReflect.Descriptor instead.
func (*ReplaceCustomFormatCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSAArchives_proto_rawDescGZIP(), []int{8}
}

func (x *ReplaceCustomFormatCommandArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *ReplaceCustomFormatCommandArchive) GetCustomFormat() *CustomFormatArchive {
	if x != nil {
		return x.CustomFormat
	}
	return nil
}

func (x *ReplaceCustomFormatCommandArchive) GetCustomFormatKey() *UUID {
	if x != nil {
		return x.CustomFormatKey
	}
	return nil
}

func (x *ReplaceCustomFormatCommandArchive) GetReplacementFormat() *TSKFormatStructArchive {
	if x != nil {
		return x.ReplacementFormat
	}
	return nil
}

type NeedsMediaCompatibilityUpgradeCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                                            *CommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	NeedsMediaCompatibilityUpgrade                   *bool           `protobuf:"varint,2,opt,name=needs_media_compatibility_upgrade,json=needsMediaCompatibilityUpgrade" json:"needs_media_compatibility_upgrade,omitempty"`
	OldNeedsMediaCompatibilityUpgrade                *bool           `protobuf:"varint,3,opt,name=old_needs_media_compatibility_upgrade,json=oldNeedsMediaCompatibilityUpgrade" json:"old_needs_media_compatibility_upgrade,omitempty"`
	CollaborativeMediaCompatibilityUpgradeDidFail    *bool           `protobuf:"varint,4,opt,name=collaborative_media_compatibility_upgrade_did_fail,json=collaborativeMediaCompatibilityUpgradeDidFail" json:"collaborative_media_compatibility_upgrade_did_fail,omitempty"`
	OldCollaborativeMediaCompatibilityUpgradeDidFail *bool           `protobuf:"varint,5,opt,name=old_collaborative_media_compatibility_upgrade_did_fail,json=oldCollaborativeMediaCompatibilityUpgradeDidFail" json:"old_collaborative_media_compatibility_upgrade_did_fail,omitempty"`
	CanUseHevc                                       *bool           `protobuf:"varint,6,opt,name=can_use_hevc,json=canUseHevc" json:"can_use_hevc,omitempty"`
	OldCanUseHevc                                    *bool           `protobuf:"varint,7,opt,name=old_can_use_hevc,json=oldCanUseHevc" json:"old_can_use_hevc,omitempty"`
}

func (x *NeedsMediaCompatibilityUpgradeCommandArchive) Reset() {
	*x = NeedsMediaCompatibilityUpgradeCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSAArchives_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NeedsMediaCompatibilityUpgradeCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NeedsMediaCompatibilityUpgradeCommandArchive) ProtoMessage() {}

func (x *NeedsMediaCompatibilityUpgradeCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSAArchives_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NeedsMediaCompatibilityUpgradeCommandArchive.ProtoReflect.Descriptor instead.
func (*NeedsMediaCompatibilityUpgradeCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSAArchives_proto_rawDescGZIP(), []int{9}
}

func (x *NeedsMediaCompatibilityUpgradeCommandArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *NeedsMediaCompatibilityUpgradeCommandArchive) GetNeedsMediaCompatibilityUpgrade() bool {
	if x != nil && x.NeedsMediaCompatibilityUpgrade != nil {
		return *x.NeedsMediaCompatibilityUpgrade
	}
	return false
}

func (x *NeedsMediaCompatibilityUpgradeCommandArchive) GetOldNeedsMediaCompatibilityUpgrade() bool {
	if x != nil && x.OldNeedsMediaCompatibilityUpgrade != nil {
		return *x.OldNeedsMediaCompatibilityUpgrade
	}
	return false
}

func (x *NeedsMediaCompatibilityUpgradeCommandArchive) GetCollaborativeMediaCompatibilityUpgradeDidFail() bool {
	if x != nil && x.CollaborativeMediaCompatibilityUpgradeDidFail != nil {
		return *x.CollaborativeMediaCompatibilityUpgradeDidFail
	}
	return false
}

func (x *NeedsMediaCompatibilityUpgradeCommandArchive) GetOldCollaborativeMediaCompatibilityUpgradeDidFail() bool {
	if x != nil && x.OldCollaborativeMediaCompatibilityUpgradeDidFail != nil {
		return *x.OldCollaborativeMediaCompatibilityUpgradeDidFail
	}
	return false
}

func (x *NeedsMediaCompatibilityUpgradeCommandArchive) GetCanUseHevc() bool {
	if x != nil && x.CanUseHevc != nil {
		return *x.CanUseHevc
	}
	return false
}

func (x *NeedsMediaCompatibilityUpgradeCommandArchive) GetOldCanUseHevc() bool {
	if x != nil && x.OldCanUseHevc != nil {
		return *x.OldCanUseHevc
	}
	return false
}

type ChangeDocumentLocaleCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                *CommandArchive           `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	OldLocaleId          *string                   `protobuf:"bytes,2,opt,name=old_locale_id,json=oldLocaleId" json:"old_locale_id,omitempty"`
	NewLocaleId          *string                   `protobuf:"bytes,3,opt,name=new_locale_id,json=newLocaleId" json:"new_locale_id,omitempty"`
	OldFormattingSymbols *FormattingSymbolsArchive `protobuf:"bytes,4,opt,name=old_formatting_symbols,json=oldFormattingSymbols" json:"old_formatting_symbols,omitempty"`
	NewFormattingSymbols *FormattingSymbolsArchive `protobuf:"bytes,5,opt,name=new_formatting_symbols,json=newFormattingSymbols" json:"new_formatting_symbols,omitempty"`
}

func (x *ChangeDocumentLocaleCommandArchive) Reset() {
	*x = ChangeDocumentLocaleCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSAArchives_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeDocumentLocaleCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeDocumentLocaleCommandArchive) ProtoMessage() {}

func (x *ChangeDocumentLocaleCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSAArchives_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeDocumentLocaleCommandArchive.ProtoReflect.Descriptor instead.
func (*ChangeDocumentLocaleCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSAArchives_proto_rawDescGZIP(), []int{10}
}

func (x *ChangeDocumentLocaleCommandArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *ChangeDocumentLocaleCommandArchive) GetOldLocaleId() string {
	if x != nil && x.OldLocaleId != nil {
		return *x.OldLocaleId
	}
	return ""
}

func (x *ChangeDocumentLocaleCommandArchive) GetNewLocaleId() string {
	if x != nil && x.NewLocaleId != nil {
		return *x.NewLocaleId
	}
	return ""
}

func (x *ChangeDocumentLocaleCommandArchive) GetOldFormattingSymbols() *FormattingSymbolsArchive {
	if x != nil {
		return x.OldFormattingSymbols
	}
	return nil
}

func (x *ChangeDocumentLocaleCommandArchive) GetNewFormattingSymbols() *FormattingSymbolsArchive {
	if x != nil {
		return x.NewFormattingSymbols
	}
	return nil
}

type InducedVerifyObjectsWithServerCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                              *CommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	ObjectIdList                       []*UUID         `protobuf:"bytes,2,rep,name=object_id_list,json=objectIdList" json:"object_id_list,omitempty"`
	ObjectIdListUndefined              *bool           `protobuf:"varint,3,opt,name=object_id_list_undefined,json=objectIdListUndefined" json:"object_id_list_undefined,omitempty"`
	ServerObjectSOSStringList          []string        `protobuf:"bytes,4,rep,name=server_object_s_o_s_string_list,json=serverObjectSOSStringList" json:"server_object_s_o_s_string_list,omitempty"`
	ServerObjectSOSStringListUndefined *bool           `protobuf:"varint,5,opt,name=server_object_s_o_s_string_list_undefined,json=serverObjectSOSStringListUndefined" json:"server_object_s_o_s_string_list_undefined,omitempty"`
	PendingRecalc                      *bool           `protobuf:"varint,6,req,name=pending_recalc,json=pendingRecalc" json:"pending_recalc,omitempty"`
	RemoteDataSyncKey                  *float64        `protobuf:"fixed64,7,req,name=remote_data_sync_key,json=remoteDataSyncKey" json:"remote_data_sync_key,omitempty"`
}

func (x *InducedVerifyObjectsWithServerCommandArchive) Reset() {
	*x = InducedVerifyObjectsWithServerCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSAArchives_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InducedVerifyObjectsWithServerCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InducedVerifyObjectsWithServerCommandArchive) ProtoMessage() {}

func (x *InducedVerifyObjectsWithServerCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSAArchives_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InducedVerifyObjectsWithServerCommandArchive.ProtoReflect.Descriptor instead.
func (*InducedVerifyObjectsWithServerCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSAArchives_proto_rawDescGZIP(), []int{11}
}

func (x *InducedVerifyObjectsWithServerCommandArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *InducedVerifyObjectsWithServerCommandArchive) GetObjectIdList() []*UUID {
	if x != nil {
		return x.ObjectIdList
	}
	return nil
}

func (x *InducedVerifyObjectsWithServerCommandArchive) GetObjectIdListUndefined() bool {
	if x != nil && x.ObjectIdListUndefined != nil {
		return *x.ObjectIdListUndefined
	}
	return false
}

func (x *InducedVerifyObjectsWithServerCommandArchive) GetServerObjectSOSStringList() []string {
	if x != nil {
		return x.ServerObjectSOSStringList
	}
	return nil
}

func (x *InducedVerifyObjectsWithServerCommandArchive) GetServerObjectSOSStringListUndefined() bool {
	if x != nil && x.ServerObjectSOSStringListUndefined != nil {
		return *x.ServerObjectSOSStringListUndefined
	}
	return false
}

func (x *InducedVerifyObjectsWithServerCommandArchive) GetPendingRecalc() bool {
	if x != nil && x.PendingRecalc != nil {
		return *x.PendingRecalc
	}
	return false
}

func (x *InducedVerifyObjectsWithServerCommandArchive) GetRemoteDataSyncKey() float64 {
	if x != nil && x.RemoteDataSyncKey != nil {
		return *x.RemoteDataSyncKey
	}
	return 0
}

type InducedVerifyTransformHistoryWithServerCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                                  *CommandArchive          `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	ServerOperationStorageEntries          []*OperationStorageEntry `protobuf:"bytes,2,rep,name=server_operation_storage_entries,json=serverOperationStorageEntries" json:"server_operation_storage_entries,omitempty"`
	ServerOperationStorageEntriesUndefined *bool                    `protobuf:"varint,3,opt,name=server_operation_storage_entries_undefined,json=serverOperationStorageEntriesUndefined" json:"server_operation_storage_entries_undefined,omitempty"`
}

func (x *InducedVerifyTransformHistoryWithServerCommandArchive) Reset() {
	*x = InducedVerifyTransformHistoryWithServerCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSAArchives_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InducedVerifyTransformHistoryWithServerCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InducedVerifyTransformHistoryWithServerCommandArchive) ProtoMessage() {}

func (x *InducedVerifyTransformHistoryWithServerCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSAArchives_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InducedVerifyTransformHistoryWithServerCommandArchive.ProtoReflect.Descriptor instead.
func (*InducedVerifyTransformHistoryWithServerCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSAArchives_proto_rawDescGZIP(), []int{12}
}

func (x *InducedVerifyTransformHistoryWithServerCommandArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *InducedVerifyTransformHistoryWithServerCommandArchive) GetServerOperationStorageEntries() []*OperationStorageEntry {
	if x != nil {
		return x.ServerOperationStorageEntries
	}
	return nil
}

func (x *InducedVerifyTransformHistoryWithServerCommandArchive) GetServerOperationStorageEntriesUndefined() bool {
	if x != nil && x.ServerOperationStorageEntriesUndefined != nil {
		return *x.ServerOperationStorageEntriesUndefined
	}
	return false
}

type StyleUpdatePropertyMapCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *TSWPStyleUpdatePropertyMapCommandArchive `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
}

func (x *StyleUpdatePropertyMapCommandArchive) Reset() {
	*x = StyleUpdatePropertyMapCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSAArchives_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StyleUpdatePropertyMapCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StyleUpdatePropertyMapCommandArchive) ProtoMessage() {}

func (x *StyleUpdatePropertyMapCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSAArchives_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StyleUpdatePropertyMapCommandArchive.ProtoReflect.Descriptor instead.
func (*StyleUpdatePropertyMapCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSAArchives_proto_rawDescGZIP(), []int{13}
}

func (x *StyleUpdatePropertyMapCommandArchive) GetSuper() *TSWPStyleUpdatePropertyMapCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

type RemoteDataChangeCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super             *CommandArchive            `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	ValueMap          *RemoteDataValueMapArchive `protobuf:"bytes,2,req,name=value_map,json=valueMap" json:"value_map,omitempty"`
	Quotes            []*StockArchive            `protobuf:"bytes,3,rep,name=quotes" json:"quotes,omitempty"`
	RemoteDataSyncKey *float64                   `protobuf:"fixed64,4,req,name=remote_data_sync_key,json=remoteDataSyncKey" json:"remote_data_sync_key,omitempty"`
}

func (x *RemoteDataChangeCommandArchive) Reset() {
	*x = RemoteDataChangeCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSAArchives_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteDataChangeCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteDataChangeCommandArchive) ProtoMessage() {}

func (x *RemoteDataChangeCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSAArchives_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteDataChangeCommandArchive.ProtoReflect.Descriptor instead.
func (*RemoteDataChangeCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSAArchives_proto_rawDescGZIP(), []int{14}
}

func (x *RemoteDataChangeCommandArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *RemoteDataChangeCommandArchive) GetValueMap() *RemoteDataValueMapArchive {
	if x != nil {
		return x.ValueMap
	}
	return nil
}

func (x *RemoteDataChangeCommandArchive) GetQuotes() []*StockArchive {
	if x != nil {
		return x.Quotes
	}
	return nil
}

func (x *RemoteDataChangeCommandArchive) GetRemoteDataSyncKey() float64 {
	if x != nil && x.RemoteDataSyncKey != nil {
		return *x.RemoteDataSyncKey
	}
	return 0
}

type GalleryInfoSetValueCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super      *CommandArchive                                  `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	InfoIdPath *UUIDPath                                        `protobuf:"bytes,2,opt,name=info_id_path,json=infoIdPath" json:"info_id_path,omitempty"`
	Property   *GalleryInfoProperty                             `protobuf:"varint,3,opt,name=property,enum=TSA.GalleryInfoProperty" json:"property,omitempty"`
	Value      *GalleryInfoSetValueCommandArchive_PropertyValue `protobuf:"bytes,4,opt,name=value" json:"value,omitempty"`
	OldValue   *GalleryInfoSetValueCommandArchive_PropertyValue `protobuf:"bytes,5,opt,name=old_value,json=oldValue" json:"old_value,omitempty"`
}

func (x *GalleryInfoSetValueCommandArchive) Reset() {
	*x = GalleryInfoSetValueCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSAArchives_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GalleryInfoSetValueCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GalleryInfoSetValueCommandArchive) ProtoMessage() {}

func (x *GalleryInfoSetValueCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSAArchives_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GalleryInfoSetValueCommandArchive.ProtoReflect.Descriptor instead.
func (*GalleryInfoSetValueCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSAArchives_proto_rawDescGZIP(), []int{15}
}

func (x *GalleryInfoSetValueCommandArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *GalleryInfoSetValueCommandArchive) GetInfoIdPath() *UUIDPath {
	if x != nil {
		return x.InfoIdPath
	}
	return nil
}

func (x *GalleryInfoSetValueCommandArchive) GetProperty() GalleryInfoProperty {
	if x != nil && x.Property != nil {
		return *x.Property
	}
	return GalleryInfoProperty_GalleryInfoCaptionProperty
}

func (x *GalleryInfoSetValueCommandArchive) GetValue() *GalleryInfoSetValueCommandArchive_PropertyValue {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *GalleryInfoSetValueCommandArchive) GetOldValue() *GalleryInfoSetValueCommandArchive_PropertyValue {
	if x != nil {
		return x.OldValue
	}
	return nil
}

type GalleryInfoInsertItemsCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *ContainerInsertChildrenCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Items []*Reference                           `protobuf:"bytes,2,rep,name=items" json:"items,omitempty"`
}

func (x *GalleryInfoInsertItemsCommandArchive) Reset() {
	*x = GalleryInfoInsertItemsCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSAArchives_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GalleryInfoInsertItemsCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GalleryInfoInsertItemsCommandArchive) ProtoMessage() {}

func (x *GalleryInfoInsertItemsCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSAArchives_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GalleryInfoInsertItemsCommandArchive.ProtoReflect.Descriptor instead.
func (*GalleryInfoInsertItemsCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSAArchives_proto_rawDescGZIP(), []int{16}
}

func (x *GalleryInfoInsertItemsCommandArchive) GetSuper() *ContainerInsertChildrenCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *GalleryInfoInsertItemsCommandArchive) GetItems() []*Reference {
	if x != nil {
		return x.Items
	}
	return nil
}

type GalleryInfoRemoveItemsCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *ContainerRemoveChildrenCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
}

func (x *GalleryInfoRemoveItemsCommandArchive) Reset() {
	*x = GalleryInfoRemoveItemsCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSAArchives_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GalleryInfoRemoveItemsCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GalleryInfoRemoveItemsCommandArchive) ProtoMessage() {}

func (x *GalleryInfoRemoveItemsCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSAArchives_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GalleryInfoRemoveItemsCommandArchive.ProtoReflect.Descriptor instead.
func (*GalleryInfoRemoveItemsCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSAArchives_proto_rawDescGZIP(), []int{17}
}

func (x *GalleryInfoRemoveItemsCommandArchive) GetSuper() *ContainerRemoveChildrenCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

type GalleryItemSetGeometryCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super      *CommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	ItemIdPath *UUIDPath       `protobuf:"bytes,2,opt,name=item_id_path,json=itemIdPath" json:"item_id_path,omitempty"`
	Offset     *Point          `protobuf:"bytes,3,opt,name=offset" json:"offset,omitempty"`
	Scale      *float32        `protobuf:"fixed32,4,opt,name=scale,def=1" json:"scale,omitempty"`
	OldOffset  *Point          `protobuf:"bytes,5,opt,name=old_offset,json=oldOffset" json:"old_offset,omitempty"`
	OldScale   *float32        `protobuf:"fixed32,6,opt,name=old_scale,json=oldScale" json:"old_scale,omitempty"`
}

// Default values for GalleryItemSetGeometryCommand fields.
const (
	Default_GalleryItemSetGeometryCommand_Scale = float32(1)
)

func (x *GalleryItemSetGeometryCommand) Reset() {
	*x = GalleryItemSetGeometryCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSAArchives_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GalleryItemSetGeometryCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GalleryItemSetGeometryCommand) ProtoMessage() {}

func (x *GalleryItemSetGeometryCommand) ProtoReflect() protoreflect.Message {
	mi := &file_TSAArchives_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GalleryItemSetGeometryCommand.ProtoReflect.Descriptor instead.
func (*GalleryItemSetGeometryCommand) Descriptor() ([]byte, []int) {
	return file_TSAArchives_proto_rawDescGZIP(), []int{18}
}

func (x *GalleryItemSetGeometryCommand) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *GalleryItemSetGeometryCommand) GetItemIdPath() *UUIDPath {
	if x != nil {
		return x.ItemIdPath
	}
	return nil
}

func (x *GalleryItemSetGeometryCommand) GetOffset() *Point {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *GalleryItemSetGeometryCommand) GetScale() float32 {
	if x != nil && x.Scale != nil {
		return *x.Scale
	}
	return Default_GalleryItemSetGeometryCommand_Scale
}

func (x *GalleryItemSetGeometryCommand) GetOldOffset() *Point {
	if x != nil {
		return x.OldOffset
	}
	return nil
}

func (x *GalleryItemSetGeometryCommand) GetOldScale() float32 {
	if x != nil && x.OldScale != nil {
		return *x.OldScale
	}
	return 0
}

type GalleryItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset                     *Point                   `protobuf:"bytes,1,opt,name=offset" json:"offset,omitempty"`
	Scale                      *float32                 `protobuf:"fixed32,2,opt,name=scale" json:"scale,omitempty"`
	ImageData                  *DataReference           `protobuf:"bytes,3,opt,name=image_data,json=imageData" json:"image_data,omitempty"`
	ThumbnailImageData         *DataReference           `protobuf:"bytes,4,opt,name=thumbnail_image_data,json=thumbnailImageData" json:"thumbnail_image_data,omitempty"`
	ImageAdjustments           *ImageAdjustmentsArchive `protobuf:"bytes,5,opt,name=image_adjustments,json=imageAdjustments" json:"image_adjustments,omitempty"`
	AdjustedImageData          *DataReference           `protobuf:"bytes,6,opt,name=adjusted_image_data,json=adjustedImageData" json:"adjusted_image_data,omitempty"`
	ThumbnailAdjustedImageData *DataReference           `protobuf:"bytes,7,opt,name=thumbnail_adjusted_image_data,json=thumbnailAdjustedImageData" json:"thumbnail_adjusted_image_data,omitempty"`
	CaptionStorage             *Reference               `protobuf:"bytes,8,opt,name=caption_storage,json=captionStorage" json:"caption_storage,omitempty"`
	AccessibilityDescription   *string                  `protobuf:"bytes,9,opt,name=accessibility_description,json=accessibilityDescription" json:"accessibility_description,omitempty"`
}

func (x *GalleryItem) Reset() {
	*x = GalleryItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSAArchives_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GalleryItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GalleryItem) ProtoMessage() {}

func (x *GalleryItem) ProtoReflect() protoreflect.Message {
	mi := &file_TSAArchives_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GalleryItem.ProtoReflect.Descriptor instead.
func (*GalleryItem) Descriptor() ([]byte, []int) {
	return file_TSAArchives_proto_rawDescGZIP(), []int{19}
}

func (x *GalleryItem) GetOffset() *Point {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *GalleryItem) GetScale() float32 {
	if x != nil && x.Scale != nil {
		return *x.Scale
	}
	return 0
}

func (x *GalleryItem) GetImageData() *DataReference {
	if x != nil {
		return x.ImageData
	}
	return nil
}

func (x *GalleryItem) GetThumbnailImageData() *DataReference {
	if x != nil {
		return x.ThumbnailImageData
	}
	return nil
}

func (x *GalleryItem) GetImageAdjustments() *ImageAdjustmentsArchive {
	if x != nil {
		return x.ImageAdjustments
	}
	return nil
}

func (x *GalleryItem) GetAdjustedImageData() *DataReference {
	if x != nil {
		return x.AdjustedImageData
	}
	return nil
}

func (x *GalleryItem) GetThumbnailAdjustedImageData() *DataReference {
	if x != nil {
		return x.ThumbnailAdjustedImageData
	}
	return nil
}

func (x *GalleryItem) GetCaptionStorage() *Reference {
	if x != nil {
		return x.CaptionStorage
	}
	return nil
}

func (x *GalleryItem) GetAccessibilityDescription() string {
	if x != nil && x.AccessibilityDescription != nil {
		return *x.AccessibilityDescription
	}
	return ""
}

type GalleryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items          []*Reference        `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	CaptionMode    *GalleryCaptionMode `protobuf:"varint,2,opt,name=caption_mode,json=captionMode,enum=TSA.GalleryCaptionMode" json:"caption_mode,omitempty"`
	CaptionStorage *Reference          `protobuf:"bytes,3,opt,name=caption_storage,json=captionStorage" json:"caption_storage,omitempty"`
}

func (x *GalleryInfo) Reset() {
	*x = GalleryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSAArchives_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GalleryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GalleryInfo) ProtoMessage() {}

func (x *GalleryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_TSAArchives_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GalleryInfo.ProtoReflect.Descriptor instead.
func (*GalleryInfo) Descriptor() ([]byte, []int) {
	return file_TSAArchives_proto_rawDescGZIP(), []int{20}
}

func (x *GalleryInfo) GetItems() []*Reference {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *GalleryInfo) GetCaptionMode() GalleryCaptionMode {
	if x != nil && x.CaptionMode != nil {
		return *x.CaptionMode
	}
	return GalleryCaptionMode_GalleryCaptionModeNone
}

func (x *GalleryInfo) GetCaptionStorage() *Reference {
	if x != nil {
		return x.CaptionStorage
	}
	return nil
}

type GallerySelectionTransformer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                  *DrawableSelectionTransformerArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	GalleryUuidPath        *UUIDPath                            `protobuf:"bytes,2,opt,name=gallery_uuid_path,json=galleryUuidPath" json:"gallery_uuid_path,omitempty"`
	CaptionStorageUuidPath *UUIDPath                            `protobuf:"bytes,3,opt,name=caption_storage_uuid_path,json=captionStorageUuidPath" json:"caption_storage_uuid_path,omitempty"`
}

func (x *GallerySelectionTransformer) Reset() {
	*x = GallerySelectionTransformer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSAArchives_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GallerySelectionTransformer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GallerySelectionTransformer) ProtoMessage() {}

func (x *GallerySelectionTransformer) ProtoReflect() protoreflect.Message {
	mi := &file_TSAArchives_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GallerySelectionTransformer.ProtoReflect.Descriptor instead.
func (*GallerySelectionTransformer) Descriptor() ([]byte, []int) {
	return file_TSAArchives_proto_rawDescGZIP(), []int{21}
}

func (x *GallerySelectionTransformer) GetSuper() *DrawableSelectionTransformerArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *GallerySelectionTransformer) GetGalleryUuidPath() *UUIDPath {
	if x != nil {
		return x.GalleryUuidPath
	}
	return nil
}

func (x *GallerySelectionTransformer) GetCaptionStorageUuidPath() *UUIDPath {
	if x != nil {
		return x.CaptionStorageUuidPath
	}
	return nil
}

type GalleryItemSelection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisplayedItem *Reference   `protobuf:"bytes,1,opt,name=displayed_item,json=displayedItem" json:"displayed_item,omitempty"`
	Items         []*Reference `protobuf:"bytes,2,rep,name=items" json:"items,omitempty"`
}

func (x *GalleryItemSelection) Reset() {
	*x = GalleryItemSelection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSAArchives_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GalleryItemSelection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GalleryItemSelection) ProtoMessage() {}

func (x *GalleryItemSelection) ProtoReflect() protoreflect.Message {
	mi := &file_TSAArchives_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GalleryItemSelection.ProtoReflect.Descriptor instead.
func (*GalleryItemSelection) Descriptor() ([]byte, []int) {
	return file_TSAArchives_proto_rawDescGZIP(), []int{22}
}

func (x *GalleryItemSelection) GetDisplayedItem() *Reference {
	if x != nil {
		return x.DisplayedItem
	}
	return nil
}

func (x *GalleryItemSelection) GetItems() []*Reference {
	if x != nil {
		return x.Items
	}
	return nil
}

type GalleryItemSelectionTransformer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransformerHelper      *GalleryItemSelectionTransformerHelper `protobuf:"bytes,1,opt,name=transformer_helper,json=transformerHelper" json:"transformer_helper,omitempty"`
	CaptionStorageUuidPath *UUIDPath                              `protobuf:"bytes,2,opt,name=caption_storage_uuid_path,json=captionStorageUuidPath" json:"caption_storage_uuid_path,omitempty"`
}

func (x *GalleryItemSelectionTransformer) Reset() {
	*x = GalleryItemSelectionTransformer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSAArchives_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GalleryItemSelectionTransformer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GalleryItemSelectionTransformer) ProtoMessage() {}

func (x *GalleryItemSelectionTransformer) ProtoReflect() protoreflect.Message {
	mi := &file_TSAArchives_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GalleryItemSelectionTransformer.ProtoReflect.Descriptor instead.
func (*GalleryItemSelectionTransformer) Descriptor() ([]byte, []int) {
	return file_TSAArchives_proto_rawDescGZIP(), []int{23}
}

func (x *GalleryItemSelectionTransformer) GetTransformerHelper() *GalleryItemSelectionTransformerHelper {
	if x != nil {
		return x.TransformerHelper
	}
	return nil
}

func (x *GalleryItemSelectionTransformer) GetCaptionStorageUuidPath() *UUIDPath {
	if x != nil {
		return x.CaptionStorageUuidPath
	}
	return nil
}

type GalleryItemSelectionTransformerHelper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisplayedItemUuidPath *UUIDPath   `protobuf:"bytes,1,opt,name=displayed_item_uuid_path,json=displayedItemUuidPath" json:"displayed_item_uuid_path,omitempty"`
	ItemUuidPaths         []*UUIDPath `protobuf:"bytes,2,rep,name=item_uuid_paths,json=itemUuidPaths" json:"item_uuid_paths,omitempty"`
}

func (x *GalleryItemSelectionTransformerHelper) Reset() {
	*x = GalleryItemSelectionTransformerHelper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSAArchives_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GalleryItemSelectionTransformerHelper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GalleryItemSelectionTransformerHelper) ProtoMessage() {}

func (x *GalleryItemSelectionTransformerHelper) ProtoReflect() protoreflect.Message {
	mi := &file_TSAArchives_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GalleryItemSelectionTransformerHelper.ProtoReflect.Descriptor instead.
func (*GalleryItemSelectionTransformerHelper) Descriptor() ([]byte, []int) {
	return file_TSAArchives_proto_rawDescGZIP(), []int{24}
}

func (x *GalleryItemSelectionTransformerHelper) GetDisplayedItemUuidPath() *UUIDPath {
	if x != nil {
		return x.DisplayedItemUuidPath
	}
	return nil
}

func (x *GalleryItemSelectionTransformerHelper) GetItemUuidPaths() []*UUIDPath {
	if x != nil {
		return x.ItemUuidPaths
	}
	return nil
}

type GalleryItemSetValueCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super      *CommandArchive                           `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	ItemIdPath *UUIDPath                                 `protobuf:"bytes,2,opt,name=item_id_path,json=itemIdPath" json:"item_id_path,omitempty"`
	Property   *GalleryItemProperty                      `protobuf:"varint,3,opt,name=property,enum=TSA.GalleryItemProperty" json:"property,omitempty"`
	Value      *GalleryItemSetValueCommand_PropertyValue `protobuf:"bytes,4,opt,name=value" json:"value,omitempty"`
	OldValue   *GalleryItemSetValueCommand_PropertyValue `protobuf:"bytes,5,opt,name=old_value,json=oldValue" json:"old_value,omitempty"`
}

func (x *GalleryItemSetValueCommand) Reset() {
	*x = GalleryItemSetValueCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSAArchives_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GalleryItemSetValueCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GalleryItemSetValueCommand) ProtoMessage() {}

func (x *GalleryItemSetValueCommand) ProtoReflect() protoreflect.Message {
	mi := &file_TSAArchives_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GalleryItemSetValueCommand.ProtoReflect.Descriptor instead.
func (*GalleryItemSetValueCommand) Descriptor() ([]byte, []int) {
	return file_TSAArchives_proto_rawDescGZIP(), []int{25}
}

func (x *GalleryItemSetValueCommand) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *GalleryItemSetValueCommand) GetItemIdPath() *UUIDPath {
	if x != nil {
		return x.ItemIdPath
	}
	return nil
}

func (x *GalleryItemSetValueCommand) GetProperty() GalleryItemProperty {
	if x != nil && x.Property != nil {
		return *x.Property
	}
	return GalleryItemProperty_GalleryItemPropertyImageData
}

func (x *GalleryItemSetValueCommand) GetValue() *GalleryItemSetValueCommand_PropertyValue {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *GalleryItemSetValueCommand) GetOldValue() *GalleryItemSetValueCommand_PropertyValue {
	if x != nil {
		return x.OldValue
	}
	return nil
}

type WebVideoInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url             *string        `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	PosterImageData *DataReference `protobuf:"bytes,2,opt,name=poster_image_data,json=posterImageData" json:"poster_image_data,omitempty"`
	Attribution     *Attribution   `protobuf:"bytes,3,opt,name=attribution" json:"attribution,omitempty"`
}

func (x *WebVideoInfo) Reset() {
	*x = WebVideoInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSAArchives_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebVideoInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebVideoInfo) ProtoMessage() {}

func (x *WebVideoInfo) ProtoReflect() protoreflect.Message {
	mi := &file_TSAArchives_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebVideoInfo.ProtoReflect.Descriptor instead.
func (*WebVideoInfo) Descriptor() ([]byte, []int) {
	return file_TSAArchives_proto_rawDescGZIP(), []int{26}
}

func (x *WebVideoInfo) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *WebVideoInfo) GetPosterImageData() *DataReference {
	if x != nil {
		return x.PosterImageData
	}
	return nil
}

func (x *WebVideoInfo) GetAttribution() *Attribution {
	if x != nil {
		return x.Attribution
	}
	return nil
}

type CaptionPlacementArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CaptionAnchorLocation  *int32 `protobuf:"varint,1,opt,name=caption_anchor_location,json=captionAnchorLocation" json:"caption_anchor_location,omitempty"`
	DrawableAnchorLocation *int32 `protobuf:"varint,2,opt,name=drawable_anchor_location,json=drawableAnchorLocation" json:"drawable_anchor_location,omitempty"`
}

func (x *CaptionPlacementArchive) Reset() {
	*x = CaptionPlacementArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSAArchives_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaptionPlacementArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptionPlacementArchive) ProtoMessage() {}

func (x *CaptionPlacementArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSAArchives_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptionPlacementArchive.ProtoReflect.Descriptor instead.
func (*CaptionPlacementArchive) Descriptor() ([]byte, []int) {
	return file_TSAArchives_proto_rawDescGZIP(), []int{27}
}

func (x *CaptionPlacementArchive) GetCaptionAnchorLocation() int32 {
	if x != nil && x.CaptionAnchorLocation != nil {
		return *x.CaptionAnchorLocation
	}
	return 0
}

func (x *CaptionPlacementArchive) GetDrawableAnchorLocation() int32 {
	if x != nil && x.DrawableAnchorLocation != nil {
		return *x.DrawableAnchorLocation
	}
	return 0
}

type CaptionInfoArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super         *ShapeInfoArchive   `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Placement     *Reference          `protobuf:"bytes,2,opt,name=placement" json:"placement,omitempty"`
	ChildInfoKind *CaptionOrTitleKind `protobuf:"varint,3,opt,name=childInfoKind,enum=TSD.CaptionOrTitleKind" json:"childInfoKind,omitempty"`
}

func (x *CaptionInfoArchive) Reset() {
	*x = CaptionInfoArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSAArchives_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaptionInfoArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptionInfoArchive) ProtoMessage() {}

func (x *CaptionInfoArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSAArchives_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptionInfoArchive.ProtoReflect.Descriptor instead.
func (*CaptionInfoArchive) Descriptor() ([]byte, []int) {
	return file_TSAArchives_proto_rawDescGZIP(), []int{28}
}

func (x *CaptionInfoArchive) GetSuper() *ShapeInfoArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CaptionInfoArchive) GetPlacement() *Reference {
	if x != nil {
		return x.Placement
	}
	return nil
}

func (x *CaptionInfoArchive) GetChildInfoKind() CaptionOrTitleKind {
	if x != nil && x.ChildInfoKind != nil {
		return *x.ChildInfoKind
	}
	return CaptionOrTitleKind_Caption
}

type TitlePlacementCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                *InfoCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	PlacingChildInfoKind *CaptionOrTitleKind `protobuf:"varint,2,opt,name=placing_child_info_kind,json=placingChildInfoKind,enum=TSD.CaptionOrTitleKind" json:"placing_child_info_kind,omitempty"`
	Placement            *Reference          `protobuf:"bytes,3,opt,name=placement" json:"placement,omitempty"`
	OldPlacement         *Reference          `protobuf:"bytes,4,opt,name=old_placement,json=oldPlacement" json:"old_placement,omitempty"`
}

func (x *TitlePlacementCommandArchive) Reset() {
	*x = TitlePlacementCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSAArchives_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TitlePlacementCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TitlePlacementCommandArchive) ProtoMessage() {}

func (x *TitlePlacementCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSAArchives_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TitlePlacementCommandArchive.ProtoReflect.Descriptor instead.
func (*TitlePlacementCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSAArchives_proto_rawDescGZIP(), []int{29}
}

func (x *TitlePlacementCommandArchive) GetSuper() *InfoCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *TitlePlacementCommandArchive) GetPlacingChildInfoKind() CaptionOrTitleKind {
	if x != nil && x.PlacingChildInfoKind != nil {
		return *x.PlacingChildInfoKind
	}
	return CaptionOrTitleKind_Caption
}

func (x *TitlePlacementCommandArchive) GetPlacement() *Reference {
	if x != nil {
		return x.Placement
	}
	return nil
}

func (x *TitlePlacementCommandArchive) GetOldPlacement() *Reference {
	if x != nil {
		return x.OldPlacement
	}
	return nil
}

type ShortcutControllerArchive_ShortcutMapEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Shortcut *string    `protobuf:"bytes,1,req,name=shortcut" json:"shortcut,omitempty"`
	Style    *Reference `protobuf:"bytes,2,req,name=style" json:"style,omitempty"`
}

func (x *ShortcutControllerArchive_ShortcutMapEntry) Reset() {
	*x = ShortcutControllerArchive_ShortcutMapEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSAArchives_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShortcutControllerArchive_ShortcutMapEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShortcutControllerArchive_ShortcutMapEntry) ProtoMessage() {}

func (x *ShortcutControllerArchive_ShortcutMapEntry) ProtoReflect() protoreflect.Message {
	mi := &file_TSAArchives_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShortcutControllerArchive_ShortcutMapEntry.ProtoReflect.Descriptor instead.
func (*ShortcutControllerArchive_ShortcutMapEntry) Descriptor() ([]byte, []int) {
	return file_TSAArchives_proto_rawDescGZIP(), []int{3, 0}
}

func (x *ShortcutControllerArchive_ShortcutMapEntry) GetShortcut() string {
	if x != nil && x.Shortcut != nil {
		return *x.Shortcut
	}
	return ""
}

func (x *ShortcutControllerArchive_ShortcutMapEntry) GetStyle() *Reference {
	if x != nil {
		return x.Style
	}
	return nil
}

type GalleryInfoSetValueCommandArchive_PropertyValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CaptionMode *GalleryInfoCaptionMode `protobuf:"varint,1,opt,name=caption_mode,json=captionMode,enum=TSA.GalleryInfoCaptionMode" json:"caption_mode,omitempty"`
}

func (x *GalleryInfoSetValueCommandArchive_PropertyValue) Reset() {
	*x = GalleryInfoSetValueCommandArchive_PropertyValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSAArchives_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GalleryInfoSetValueCommandArchive_PropertyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GalleryInfoSetValueCommandArchive_PropertyValue) ProtoMessage() {}

func (x *GalleryInfoSetValueCommandArchive_PropertyValue) ProtoReflect() protoreflect.Message {
	mi := &file_TSAArchives_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GalleryInfoSetValueCommandArchive_PropertyValue.ProtoReflect.Descriptor instead.
func (*GalleryInfoSetValueCommandArchive_PropertyValue) Descriptor() ([]byte, []int) {
	return file_TSAArchives_proto_rawDescGZIP(), []int{15, 0}
}

func (x *GalleryInfoSetValueCommandArchive_PropertyValue) GetCaptionMode() GalleryInfoCaptionMode {
	if x != nil && x.CaptionMode != nil {
		return *x.CaptionMode
	}
	return GalleryInfoCaptionMode_GalleryInfoCaptionModeNone
}

type GalleryItemSetValueCommand_PropertyValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageData                *DataReference `protobuf:"bytes,1,opt,name=image_data,json=imageData" json:"image_data,omitempty"`
	AccessibilityDescription *string        `protobuf:"bytes,2,opt,name=accessibility_description,json=accessibilityDescription" json:"accessibility_description,omitempty"`
}

func (x *GalleryItemSetValueCommand_PropertyValue) Reset() {
	*x = GalleryItemSetValueCommand_PropertyValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSAArchives_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GalleryItemSetValueCommand_PropertyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GalleryItemSetValueCommand_PropertyValue) ProtoMessage() {}

func (x *GalleryItemSetValueCommand_PropertyValue) ProtoReflect() protoreflect.Message {
	mi := &file_TSAArchives_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GalleryItemSetValueCommand_PropertyValue.ProtoReflect.Descriptor instead.
func (*GalleryItemSetValueCommand_PropertyValue) Descriptor() ([]byte, []int) {
	return file_TSAArchives_proto_rawDescGZIP(), []int{25, 0}
}

func (x *GalleryItemSetValueCommand_PropertyValue) GetImageData() *DataReference {
	if x != nil {
		return x.ImageData
	}
	return nil
}

func (x *GalleryItemSetValueCommand_PropertyValue) GetAccessibilityDescription() string {
	if x != nil && x.AccessibilityDescription != nil {
		return *x.AccessibilityDescription
	}
	return ""
}

var file_TSAArchives_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*TSSThemeArchive)(nil),
		ExtensionType: (*ThemePresetsArchive)(nil),
		Field:         210,
		Name:          "TSA.ThemePresetsArchive.extension",
		Tag:           "bytes,210,opt,name=extension",
		Filename:      "TSAArchives.proto",
	},
	{
		ExtendedType:  (*ImageArchive)(nil),
		ExtensionType: (*GalleryInfo)(nil),
		Field:         200,
		Name:          "TSA.GalleryInfo.gallery_info",
		Tag:           "bytes,200,opt,name=gallery_info",
		Filename:      "TSAArchives.proto",
	},
	{
		ExtendedType:  (*ImageArchive)(nil),
		ExtensionType: (*WebVideoInfo)(nil),
		Field:         300,
		Name:          "TSA.WebVideoInfo.web_video_info",
		Tag:           "bytes,300,opt,name=web_video_info",
		Filename:      "TSAArchives.proto",
	},
}

// Extension fields to TSSThemeArchive.
var (
	// optional TSA.ThemePresetsArchive extension = 210;
	E_ThemePresetsArchive_Extension = &file_TSAArchives_proto_extTypes[0]
)

// Extension fields to ImageArchive.
var (
	// optional TSA.GalleryInfo gallery_info = 200;
	E_GalleryInfo_GalleryInfo = &file_TSAArchives_proto_extTypes[1]
	// optional TSA.WebVideoInfo web_video_info = 300;
	E_WebVideoInfo_WebVideoInfo = &file_TSAArchives_proto_extTypes[2]
)

var File_TSAArchives_proto protoreflect.FileDescriptor

var file_TSAArchives_proto_rawDesc = []byte{
	0x0a, 0x11, 0x54, 0x53, 0x41, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x03, 0x54, 0x53, 0x41, 0x1a, 0x11, 0x54, 0x53, 0x44, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x54, 0x53, 0x44,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x54, 0x53, 0x4b, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x54, 0x53, 0x50, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x54, 0x53, 0x57,
	0x50, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x19, 0x54, 0x53, 0x57, 0x50, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x54, 0x53, 0x53, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x54,
	0x53, 0x43, 0x45, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xa5, 0x08, 0x0a, 0x12, 0x54, 0x53, 0x41, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x54, 0x53,
	0x4b, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x5d, 0x0a, 0x19, 0x74, 0x65, 0x78, 0x74, 0x5f,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x54, 0x53, 0x57,
	0x50, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x16,
	0x74, 0x65, 0x78, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x12, 0x3d, 0x0a, 0x12, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x11, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x12, 0x2d, 0x0a, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x44, 0x0a, 0x16, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x72,
	0x6f, 0x77, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x14, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x72, 0x6f, 0x77, 0x73,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x49, 0x0a, 0x19, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x16, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x49, 0x0a, 0x21, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x5f, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x6e,
	0x65, 0x65, 0x64, 0x73, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x2f, 0x0a,
	0x13, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x3f,
	0x0a, 0x13, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x12, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x63, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12,
	0x4e, 0x0a, 0x1b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x19, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x3c, 0x0a, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x51, 0x0a,
	0x1d, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x5f, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x32, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x1a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x32,
	0x12, 0x69, 0x0a, 0x32, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x69,
	0x64, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x2d, 0x63, 0x6f,
	0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x55, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x44, 0x69, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x63,
	0x61, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x68, 0x65, 0x76, 0x63, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x48, 0x65, 0x76, 0x63, 0x12, 0x2a, 0x0a,
	0x11, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xc7, 0x01, 0x0a, 0x1b, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x62, 0x61,
	0x63, 0x6b, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x10, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xa8, 0x01, 0x0a, 0x13, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x42, 0x0a, 0x15, 0x63,
	0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x13, 0x63, 0x61, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x32,
	0x4d, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x2e, 0x54,
	0x53, 0x53, 0x2e, 0x54, 0x53, 0x53, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x18, 0xd2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x41, 0x2e,
	0x54, 0x68, 0x65, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xbc,
	0x01, 0x0a, 0x19, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x49, 0x0a, 0x07,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x54, 0x53, 0x41, 0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x53, 0x68,
	0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x54, 0x0a, 0x10, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x63, 0x75, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x22, 0xcc, 0x01,
	0x0a, 0x1d, 0x50, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12,
	0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x15, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x13, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x3c,
	0x0a, 0x1a, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x5f, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x08, 0x52, 0x18, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x50, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xe3, 0x01, 0x0a,
	0x16, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x12, 0x2b, 0x0a, 0x09, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x6f, 0x6c, 0x64, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12,
	0x2b, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6f, 0x6c, 0x64, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63,
	0x75, 0x74, 0x22, 0xc0, 0x01, 0x0a, 0x1d, 0x41, 0x64, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12,
	0x3d, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x35,
	0x0a, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x55, 0x55, 0x49, 0x44, 0x52, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x4b, 0x65, 0x79, 0x22, 0x89, 0x02, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54,
	0x53, 0x4b, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x44, 0x0a, 0x11, 0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0f, 0x6f, 0x6c, 0x64, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x35, 0x0a, 0x11, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44,
	0x52, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4b, 0x65,
	0x79, 0x22, 0x90, 0x02, 0x0a, 0x21, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x4b, 0x2e,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x12, 0x35, 0x0a, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x4a, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x54, 0x53, 0x4b, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x22, 0x9e, 0x04, 0x0a, 0x2c, 0x4e, 0x65, 0x65, 0x64, 0x73, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x12, 0x49, 0x0a, 0x21, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x75, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x6e, 0x65, 0x65,
	0x64, 0x73, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x50, 0x0a, 0x25, 0x6f,
	0x6c, 0x64, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x75, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x21, 0x6f, 0x6c, 0x64, 0x4e,
	0x65, 0x65, 0x64, 0x73, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x69, 0x0a,
	0x32, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x69, 0x64, 0x5f, 0x66,
	0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x2d, 0x63, 0x6f, 0x6c, 0x6c, 0x61,
	0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x44, 0x69, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x12, 0x70, 0x0a, 0x36, 0x6f, 0x6c, 0x64, 0x5f,
	0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x69, 0x64, 0x5f, 0x66, 0x61,
	0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x30, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x6c,
	0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x55, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x44, 0x69, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x61,
	0x6e, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x68, 0x65, 0x76, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x63, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x48, 0x65, 0x76, 0x63, 0x12, 0x27, 0x0a, 0x10,
	0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x61, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x68, 0x65, 0x76, 0x63,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6f, 0x6c, 0x64, 0x43, 0x61, 0x6e, 0x55, 0x73,
	0x65, 0x48, 0x65, 0x76, 0x63, 0x22, 0xc1, 0x02, 0x0a, 0x22, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53,
	0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x6c, 0x64, 0x5f, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6f, 0x6c, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6e,
	0x65, 0x77, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x53, 0x0a, 0x16, 0x6f, 0x6c, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x14,
	0x6f, 0x6c, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x73, 0x12, 0x53, 0x0a, 0x16, 0x6e, 0x65, 0x77, 0x5f, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x14, 0x6e, 0x65, 0x77, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x22, 0xb6, 0x03, 0x0a, 0x2c, 0x49, 0x6e,
	0x64, 0x75, 0x63, 0x65, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x0e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0c, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12,
	0x42, 0x0a, 0x1f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x73, 0x5f, 0x6f, 0x5f, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x19, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x4f, 0x53, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x29, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x5f, 0x6f, 0x5f, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x22, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x53, 0x4f, 0x53, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73,
	0x74, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x63, 0x61, 0x6c, 0x63, 0x18, 0x06, 0x20, 0x02,
	0x28, 0x08, 0x52, 0x0d, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x61, 0x6c,
	0x63, 0x12, 0x2f, 0x0a, 0x14, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x02, 0x28, 0x01, 0x52,
	0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x4b,
	0x65, 0x79, 0x22, 0xa3, 0x02, 0x0a, 0x35, 0x49, 0x6e, 0x64, 0x75, 0x63, 0x65, 0x64, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x57, 0x69, 0x74, 0x68, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53,
	0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x63, 0x0a, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x1d, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x2a,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x26, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x55,
	0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x22, 0x6c, 0x0a, 0x24, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4d,
	0x61, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x12, 0x44, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4d, 0x61,
	0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x22, 0xe6, 0x01, 0x0a, 0x1e, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6d, 0x61,
	0x70, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61,
	0x70, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4d,
	0x61, 0x70, 0x12, 0x2a, 0x0a, 0x06, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x06, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x2f,
	0x0a, 0x14, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x79,
	0x6e, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x02, 0x28, 0x01, 0x52, 0x11, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x4b, 0x65, 0x79, 0x22,
	0xa5, 0x03, 0x0a, 0x21, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x53,
	0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x12, 0x2f, 0x0a, 0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49,
	0x44, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0a, 0x69, 0x6e, 0x66, 0x6f, 0x49, 0x64, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x34, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x41, 0x2e, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x4a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x54, 0x53, 0x41, 0x2e, 0x47, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x51, 0x0a, 0x09, 0x6f, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x54, 0x53, 0x41, 0x2e, 0x47, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6f, 0x6c,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x4f, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x63, 0x61, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e,
	0x54, 0x53, 0x41, 0x2e, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x43,
	0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x63, 0x61, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x24, 0x47, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x12, 0x40, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x12, 0x24, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x68, 0x0a, 0x24, 0x47, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x12, 0x40, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x22, 0x80, 0x02, 0x0a, 0x1d, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x49, 0x74,
	0x65, 0x6d, 0x53, 0x65, 0x74, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12,
	0x2f, 0x0a, 0x0c, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44,
	0x50, 0x61, 0x74, 0x68, 0x52, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x22, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x17, 0x0a, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x02, 0x3a, 0x01, 0x31, 0x52, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x29, 0x0a,
	0x0a, 0x6f, 0x6c, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x09, 0x6f,
	0x6c, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x6c, 0x64, 0x5f,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6f, 0x6c, 0x64,
	0x53, 0x63, 0x61, 0x6c, 0x65, 0x22, 0x9c, 0x04, 0x0a, 0x0b, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x79, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x22, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x12,
	0x31, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x44, 0x0a, 0x14, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x5f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x12, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x49, 0x0a, 0x11, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41,
	0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x10, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x13, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x5f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x11, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x55, 0x0a, 0x1d, 0x74, 0x68, 0x75, 0x6d, 0x62,
	0x6e, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x1a, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x6a,
	0x75, 0x73, 0x74, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x37,
	0x0a, 0x0f, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x19, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf1, 0x01, 0x0a, 0x0b, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x3a, 0x0a, 0x0c, 0x63, 0x61,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x54, 0x53, 0x41, 0x2e, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x43, 0x61,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x63, 0x61, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x37, 0x0a, 0x0f, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x0e, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x32,
	0x47, 0x0a, 0x0c, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12,
	0x11, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54, 0x53, 0x41, 0x2e,
	0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x67, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xe2, 0x01, 0x0a, 0x1b, 0x47, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x44, 0x72,
	0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x11, 0x67, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x79, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x50, 0x61,
	0x74, 0x68, 0x52, 0x0f, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x55, 0x75, 0x69, 0x64, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x48, 0x0a, 0x19, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49,
	0x44, 0x50, 0x61, 0x74, 0x68, 0x52, 0x16, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x55, 0x75, 0x69, 0x64, 0x50, 0x61, 0x74, 0x68, 0x22, 0x73, 0x0a,
	0x14, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x24, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x22, 0xc6, 0x01, 0x0a, 0x1f, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x49, 0x74,
	0x65, 0x6d, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x59, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x6f, 0x72, 0x6d, 0x65, 0x72, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x54, 0x53, 0x41, 0x2e, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79,
	0x49, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x48, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x52, 0x11,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x48, 0x65, 0x6c, 0x70, 0x65,
	0x72, 0x12, 0x48, 0x0a, 0x19, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x50,
	0x61, 0x74, 0x68, 0x52, 0x16, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x55, 0x75, 0x69, 0x64, 0x50, 0x61, 0x74, 0x68, 0x22, 0xa6, 0x01, 0x0a, 0x25,
	0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x48,
	0x65, 0x6c, 0x70, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x18, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55,
	0x49, 0x44, 0x50, 0x61, 0x74, 0x68, 0x52, 0x15, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x64, 0x49, 0x74, 0x65, 0x6d, 0x55, 0x75, 0x69, 0x64, 0x50, 0x61, 0x74, 0x68, 0x12, 0x35, 0x0a,
	0x0f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49,
	0x44, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0d, 0x69, 0x74, 0x65, 0x6d, 0x55, 0x75, 0x69, 0x64, 0x50,
	0x61, 0x74, 0x68, 0x73, 0x22, 0xc0, 0x03, 0x0a, 0x1a, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79,
	0x49, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x2f,
	0x0a, 0x0c, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x50,
	0x61, 0x74, 0x68, 0x52, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x34, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x41, 0x2e, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x49,
	0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x43, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x54, 0x53, 0x41, 0x2e, 0x47, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4a, 0x0a, 0x09, 0x6f, 0x6c,
	0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x54, 0x53, 0x41, 0x2e, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x53,
	0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6f, 0x6c,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x7f, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x31, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x19, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe1, 0x01, 0x0a, 0x0c, 0x57, 0x65, 0x62, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x3e, 0x0a, 0x11, 0x70, 0x6f,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x70, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x0b, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x4b,
	0x0a, 0x0e, 0x77, 0x65, 0x62, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x12, 0x11, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x18, 0xac, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x54, 0x53, 0x41,
	0x2e, 0x57, 0x65, 0x62, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x77,
	0x65, 0x62, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x8b, 0x01, 0x0a, 0x17,
	0x43, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x61, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x38, 0x0a, 0x18, 0x64, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x6e, 0x63, 0x68,
	0x6f, 0x72, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x16, 0x64, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xaf, 0x01, 0x0a, 0x12, 0x43, 0x61,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x12, 0x2c, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x2c,
	0x0a, 0x09, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0d,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x72, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x0d, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x4b, 0x69, 0x6e, 0x64, 0x22, 0x80, 0x02, 0x0a, 0x1c,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2d, 0x0a, 0x05,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x54, 0x53,
	0x44, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x17, 0x70,
	0x6c, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x54,
	0x53, 0x44, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x14, 0x70, 0x6c, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x43, 0x68,
	0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x2c, 0x0a, 0x09, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x0d, 0x6f, 0x6c, 0x64,
	0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x0c, 0x6f, 0x6c, 0x64, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2a, 0x81,
	0x01, 0x0a, 0x16, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x61,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x47, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x6f, 0x64, 0x65, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x47, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x6f, 0x64, 0x65, 0x50, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x10, 0x01, 0x12, 0x23, 0x0a,
	0x1f, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x61, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x41, 0x6c, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73,
	0x10, 0x02, 0x2a, 0x35, 0x0a, 0x13, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x1a, 0x47, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x10, 0x00, 0x2a, 0x71, 0x0a, 0x12, 0x47, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x79, 0x43, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x1a, 0x0a, 0x16, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x43, 0x61, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x47,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x43, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x50, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x47,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x43, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x41, 0x6c, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x10, 0x02, 0x2a, 0x93, 0x01, 0x0a,
	0x13, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x1c, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x49,
	0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x79, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x54, 0x68, 0x75,
	0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x10,
	0x01, 0x12, 0x2f, 0x0a, 0x2b, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x10, 0x02, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x2f, 0x6b, 0x70, 0x62,
}

var (
	file_TSAArchives_proto_rawDescOnce sync.Once
	file_TSAArchives_proto_rawDescData = file_TSAArchives_proto_rawDesc
)

func file_TSAArchives_proto_rawDescGZIP() []byte {
	file_TSAArchives_proto_rawDescOnce.Do(func() {
		file_TSAArchives_proto_rawDescData = protoimpl.X.CompressGZIP(file_TSAArchives_proto_rawDescData)
	})
	return file_TSAArchives_proto_rawDescData
}

var file_TSAArchives_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_TSAArchives_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_TSAArchives_proto_goTypes = []interface{}{
	(GalleryInfoCaptionMode)(0),                                   // 0: TSA.GalleryInfoCaptionMode
	(GalleryInfoProperty)(0),                                      // 1: TSA.GalleryInfoProperty
	(GalleryCaptionMode)(0),                                       // 2: TSA.GalleryCaptionMode
	(GalleryItemProperty)(0),                                      // 3: TSA.GalleryItemProperty
	(*TSADocumentArchive)(nil),                                    // 4: TSA.TSADocumentArchive
	(*FunctionBrowserStateArchive)(nil),                           // 5: TSA.FunctionBrowserStateArchive
	(*ThemePresetsArchive)(nil),                                   // 6: TSA.ThemePresetsArchive
	(*ShortcutControllerArchive)(nil),                             // 7: TSA.ShortcutControllerArchive
	(*PropagatePresetCommandArchive)(nil),                         // 8: TSA.PropagatePresetCommandArchive
	(*ShortcutCommandArchive)(nil),                                // 9: TSA.ShortcutCommandArchive
	(*AddCustomFormatCommandArchive)(nil),                         // 10: TSA.AddCustomFormatCommandArchive
	(*UpdateCustomFormatCommandArchive)(nil),                      // 11: TSA.UpdateCustomFormatCommandArchive
	(*ReplaceCustomFormatCommandArchive)(nil),                     // 12: TSA.ReplaceCustomFormatCommandArchive
	(*NeedsMediaCompatibilityUpgradeCommandArchive)(nil),          // 13: TSA.NeedsMediaCompatibilityUpgradeCommandArchive
	(*ChangeDocumentLocaleCommandArchive)(nil),                    // 14: TSA.ChangeDocumentLocaleCommandArchive
	(*InducedVerifyObjectsWithServerCommandArchive)(nil),          // 15: TSA.InducedVerifyObjectsWithServerCommandArchive
	(*InducedVerifyTransformHistoryWithServerCommandArchive)(nil), // 16: TSA.InducedVerifyTransformHistoryWithServerCommandArchive
	(*StyleUpdatePropertyMapCommandArchive)(nil),                  // 17: TSA.StyleUpdatePropertyMapCommandArchive
	(*RemoteDataChangeCommandArchive)(nil),                        // 18: TSA.RemoteDataChangeCommandArchive
	(*GalleryInfoSetValueCommandArchive)(nil),                     // 19: TSA.GalleryInfoSetValueCommandArchive
	(*GalleryInfoInsertItemsCommandArchive)(nil),                  // 20: TSA.GalleryInfoInsertItemsCommandArchive
	(*GalleryInfoRemoveItemsCommandArchive)(nil),                  // 21: TSA.GalleryInfoRemoveItemsCommandArchive
	(*GalleryItemSetGeometryCommand)(nil),                         // 22: TSA.GalleryItemSetGeometryCommand
	(*GalleryItem)(nil),                                           // 23: TSA.GalleryItem
	(*GalleryInfo)(nil),                                           // 24: TSA.GalleryInfo
	(*GallerySelectionTransformer)(nil),                           // 25: TSA.GallerySelectionTransformer
	(*GalleryItemSelection)(nil),                                  // 26: TSA.GalleryItemSelection
	(*GalleryItemSelectionTransformer)(nil),                       // 27: TSA.GalleryItemSelectionTransformer
	(*GalleryItemSelectionTransformerHelper)(nil),                 // 28: TSA.GalleryItemSelectionTransformerHelper
	(*GalleryItemSetValueCommand)(nil),                            // 29: TSA.GalleryItemSetValueCommand
	(*WebVideoInfo)(nil),                                          // 30: TSA.WebVideoInfo
	(*CaptionPlacementArchive)(nil),                               // 31: TSA.CaptionPlacementArchive
	(*CaptionInfoArchive)(nil),                                    // 32: TSA.CaptionInfoArchive
	(*TitlePlacementCommandArchive)(nil),                          // 33: TSA.TitlePlacementCommandArchive
	(*ShortcutControllerArchive_ShortcutMapEntry)(nil),            // 34: TSA.ShortcutControllerArchive.ShortcutMapEntry
	(*GalleryInfoSetValueCommandArchive_PropertyValue)(nil),       // 35: TSA.GalleryInfoSetValueCommandArchive.PropertyValue
	(*GalleryItemSetValueCommand_PropertyValue)(nil),              // 36: TSA.GalleryItemSetValueCommand.PropertyValue
	(*TSKDocumentArchive)(nil),                                    // 37: TSK.TSKDocumentArchive
	(*TextPresetDisplayItemArchive)(nil),                          // 38: TSWP.TextPresetDisplayItemArchive
	(*Reference)(nil),                                             // 39: TSP.Reference
	(*CommandArchive)(nil),                                        // 40: TSK.CommandArchive
	(*CustomFormatArchive)(nil),                                   // 41: TSK.CustomFormatArchive
	(*UUID)(nil),                                                  // 42: TSP.UUID
	(*TSKFormatStructArchive)(nil),                                // 43: TSK.TSKFormatStructArchive
	(*FormattingSymbolsArchive)(nil),                              // 44: TSK.FormattingSymbolsArchive
	(*OperationStorageEntry)(nil),                                 // 45: TSK.OperationStorageEntry
	(*TSWPStyleUpdatePropertyMapCommandArchive)(nil),              // 46: TSWP.TSWPStyleUpdatePropertyMapCommandArchive
	(*RemoteDataValueMapArchive)(nil),                             // 47: TSCE.RemoteDataValueMapArchive
	(*StockArchive)(nil),                                          // 48: TSCE.StockArchive
	(*UUIDPath)(nil),                                              // 49: TSP.UUIDPath
	(*ContainerInsertChildrenCommandArchive)(nil),                 // 50: TSD.ContainerInsertChildrenCommandArchive
	(*ContainerRemoveChildrenCommandArchive)(nil),                 // 51: TSD.ContainerRemoveChildrenCommandArchive
	(*Point)(nil),                                                 // 52: TSP.Point
	(*DataReference)(nil),                                         // 53: TSP.DataReference
	(*ImageAdjustmentsArchive)(nil),                               // 54: TSD.ImageAdjustmentsArchive
	(*DrawableSelectionTransformerArchive)(nil),                   // 55: TSD.DrawableSelectionTransformerArchive
	(*Attribution)(nil),                                           // 56: TSD.Attribution
	(*ShapeInfoArchive)(nil),                                      // 57: TSWP.ShapeInfoArchive
	(CaptionOrTitleKind)(0),                                       // 58: TSD.CaptionOrTitleKind
	(*InfoCommandArchive)(nil),                                    // 59: TSD.InfoCommandArchive
	(*TSSThemeArchive)(nil),                                       // 60: TSS.TSSThemeArchive
	(*ImageArchive)(nil),                                          // 61: TSD.ImageArchive
}
var file_TSAArchives_proto_depIdxs = []int32{
	37, // 0: TSA.TSADocumentArchive.super:type_name -> TSK.TSKDocumentArchive
	38, // 1: TSA.TSADocumentArchive.text_preset_display_items:type_name -> TSWP.TextPresetDisplayItemArchive
	39, // 2: TSA.TSADocumentArchive.calculation_engine:type_name -> TSP.Reference
	39, // 3: TSA.TSADocumentArchive.view_state:type_name -> TSP.Reference
	39, // 4: TSA.TSADocumentArchive.function_browser_state:type_name -> TSP.Reference
	39, // 5: TSA.TSADocumentArchive.tables_custom_format_list:type_name -> TSP.Reference
	39, // 6: TSA.TSADocumentArchive.shortcut_controller:type_name -> TSP.Reference
	39, // 7: TSA.TSADocumentArchive.annotation_cache_deprecated:type_name -> TSP.Reference
	39, // 8: TSA.TSADocumentArchive.custom_format_list:type_name -> TSP.Reference
	39, // 9: TSA.TSADocumentArchive.annotation_cache_deprecated_2:type_name -> TSP.Reference
	39, // 10: TSA.ThemePresetsArchive.caption_style_presets:type_name -> TSP.Reference
	34, // 11: TSA.ShortcutControllerArchive.entries:type_name -> TSA.ShortcutControllerArchive.ShortcutMapEntry
	40, // 12: TSA.PropagatePresetCommandArchive.super:type_name -> TSK.CommandArchive
	39, // 13: TSA.PropagatePresetCommandArchive.preset_change_command:type_name -> TSP.Reference
	40, // 14: TSA.ShortcutCommandArchive.super:type_name -> TSK.CommandArchive
	39, // 15: TSA.ShortcutCommandArchive.old_style:type_name -> TSP.Reference
	39, // 16: TSA.ShortcutCommandArchive.new_style:type_name -> TSP.Reference
	40, // 17: TSA.AddCustomFormatCommandArchive.super:type_name -> TSK.CommandArchive
	41, // 18: TSA.AddCustomFormatCommandArchive.custom_format:type_name -> TSK.CustomFormatArchive
	42, // 19: TSA.AddCustomFormatCommandArchive.custom_format_key:type_name -> TSP.UUID
	40, // 20: TSA.UpdateCustomFormatCommandArchive.super:type_name -> TSK.CommandArchive
	41, // 21: TSA.UpdateCustomFormatCommandArchive.custom_format:type_name -> TSK.CustomFormatArchive
	41, // 22: TSA.UpdateCustomFormatCommandArchive.old_custom_format:type_name -> TSK.CustomFormatArchive
	42, // 23: TSA.UpdateCustomFormatCommandArchive.custom_format_key:type_name -> TSP.UUID
	40, // 24: TSA.ReplaceCustomFormatCommandArchive.super:type_name -> TSK.CommandArchive
	41, // 25: TSA.ReplaceCustomFormatCommandArchive.custom_format:type_name -> TSK.CustomFormatArchive
	42, // 26: TSA.ReplaceCustomFormatCommandArchive.custom_format_key:type_name -> TSP.UUID
	43, // 27: TSA.ReplaceCustomFormatCommandArchive.replacement_format:type_name -> TSK.TSKFormatStructArchive
	40, // 28: TSA.NeedsMediaCompatibilityUpgradeCommandArchive.super:type_name -> TSK.CommandArchive
	40, // 29: TSA.ChangeDocumentLocaleCommandArchive.super:type_name -> TSK.CommandArchive
	44, // 30: TSA.ChangeDocumentLocaleCommandArchive.old_formatting_symbols:type_name -> TSK.FormattingSymbolsArchive
	44, // 31: TSA.ChangeDocumentLocaleCommandArchive.new_formatting_symbols:type_name -> TSK.FormattingSymbolsArchive
	40, // 32: TSA.InducedVerifyObjectsWithServerCommandArchive.super:type_name -> TSK.CommandArchive
	42, // 33: TSA.InducedVerifyObjectsWithServerCommandArchive.object_id_list:type_name -> TSP.UUID
	40, // 34: TSA.InducedVerifyTransformHistoryWithServerCommandArchive.super:type_name -> TSK.CommandArchive
	45, // 35: TSA.InducedVerifyTransformHistoryWithServerCommandArchive.server_operation_storage_entries:type_name -> TSK.OperationStorageEntry
	46, // 36: TSA.StyleUpdatePropertyMapCommandArchive.super:type_name -> TSWP.TSWPStyleUpdatePropertyMapCommandArchive
	40, // 37: TSA.RemoteDataChangeCommandArchive.super:type_name -> TSK.CommandArchive
	47, // 38: TSA.RemoteDataChangeCommandArchive.value_map:type_name -> TSCE.RemoteDataValueMapArchive
	48, // 39: TSA.RemoteDataChangeCommandArchive.quotes:type_name -> TSCE.StockArchive
	40, // 40: TSA.GalleryInfoSetValueCommandArchive.super:type_name -> TSK.CommandArchive
	49, // 41: TSA.GalleryInfoSetValueCommandArchive.info_id_path:type_name -> TSP.UUIDPath
	1,  // 42: TSA.GalleryInfoSetValueCommandArchive.property:type_name -> TSA.GalleryInfoProperty
	35, // 43: TSA.GalleryInfoSetValueCommandArchive.value:type_name -> TSA.GalleryInfoSetValueCommandArchive.PropertyValue
	35, // 44: TSA.GalleryInfoSetValueCommandArchive.old_value:type_name -> TSA.GalleryInfoSetValueCommandArchive.PropertyValue
	50, // 45: TSA.GalleryInfoInsertItemsCommandArchive.super:type_name -> TSD.ContainerInsertChildrenCommandArchive
	39, // 46: TSA.GalleryInfoInsertItemsCommandArchive.items:type_name -> TSP.Reference
	51, // 47: TSA.GalleryInfoRemoveItemsCommandArchive.super:type_name -> TSD.ContainerRemoveChildrenCommandArchive
	40, // 48: TSA.GalleryItemSetGeometryCommand.super:type_name -> TSK.CommandArchive
	49, // 49: TSA.GalleryItemSetGeometryCommand.item_id_path:type_name -> TSP.UUIDPath
	52, // 50: TSA.GalleryItemSetGeometryCommand.offset:type_name -> TSP.Point
	52, // 51: TSA.GalleryItemSetGeometryCommand.old_offset:type_name -> TSP.Point
	52, // 52: TSA.GalleryItem.offset:type_name -> TSP.Point
	53, // 53: TSA.GalleryItem.image_data:type_name -> TSP.DataReference
	53, // 54: TSA.GalleryItem.thumbnail_image_data:type_name -> TSP.DataReference
	54, // 55: TSA.GalleryItem.image_adjustments:type_name -> TSD.ImageAdjustmentsArchive
	53, // 56: TSA.GalleryItem.adjusted_image_data:type_name -> TSP.DataReference
	53, // 57: TSA.GalleryItem.thumbnail_adjusted_image_data:type_name -> TSP.DataReference
	39, // 58: TSA.GalleryItem.caption_storage:type_name -> TSP.Reference
	39, // 59: TSA.GalleryInfo.items:type_name -> TSP.Reference
	2,  // 60: TSA.GalleryInfo.caption_mode:type_name -> TSA.GalleryCaptionMode
	39, // 61: TSA.GalleryInfo.caption_storage:type_name -> TSP.Reference
	55, // 62: TSA.GallerySelectionTransformer.super:type_name -> TSD.DrawableSelectionTransformerArchive
	49, // 63: TSA.GallerySelectionTransformer.gallery_uuid_path:type_name -> TSP.UUIDPath
	49, // 64: TSA.GallerySelectionTransformer.caption_storage_uuid_path:type_name -> TSP.UUIDPath
	39, // 65: TSA.GalleryItemSelection.displayed_item:type_name -> TSP.Reference
	39, // 66: TSA.GalleryItemSelection.items:type_name -> TSP.Reference
	28, // 67: TSA.GalleryItemSelectionTransformer.transformer_helper:type_name -> TSA.GalleryItemSelectionTransformerHelper
	49, // 68: TSA.GalleryItemSelectionTransformer.caption_storage_uuid_path:type_name -> TSP.UUIDPath
	49, // 69: TSA.GalleryItemSelectionTransformerHelper.displayed_item_uuid_path:type_name -> TSP.UUIDPath
	49, // 70: TSA.GalleryItemSelectionTransformerHelper.item_uuid_paths:type_name -> TSP.UUIDPath
	40, // 71: TSA.GalleryItemSetValueCommand.super:type_name -> TSK.CommandArchive
	49, // 72: TSA.GalleryItemSetValueCommand.item_id_path:type_name -> TSP.UUIDPath
	3,  // 73: TSA.GalleryItemSetValueCommand.property:type_name -> TSA.GalleryItemProperty
	36, // 74: TSA.GalleryItemSetValueCommand.value:type_name -> TSA.GalleryItemSetValueCommand.PropertyValue
	36, // 75: TSA.GalleryItemSetValueCommand.old_value:type_name -> TSA.GalleryItemSetValueCommand.PropertyValue
	53, // 76: TSA.WebVideoInfo.poster_image_data:type_name -> TSP.DataReference
	56, // 77: TSA.WebVideoInfo.attribution:type_name -> TSD.Attribution
	57, // 78: TSA.CaptionInfoArchive.super:type_name -> TSWP.ShapeInfoArchive
	39, // 79: TSA.CaptionInfoArchive.placement:type_name -> TSP.Reference
	58, // 80: TSA.CaptionInfoArchive.childInfoKind:type_name -> TSD.CaptionOrTitleKind
	59, // 81: TSA.TitlePlacementCommandArchive.super:type_name -> TSD.InfoCommandArchive
	58, // 82: TSA.TitlePlacementCommandArchive.placing_child_info_kind:type_name -> TSD.CaptionOrTitleKind
	39, // 83: TSA.TitlePlacementCommandArchive.placement:type_name -> TSP.Reference
	39, // 84: TSA.TitlePlacementCommandArchive.old_placement:type_name -> TSP.Reference
	39, // 85: TSA.ShortcutControllerArchive.ShortcutMapEntry.style:type_name -> TSP.Reference
	0,  // 86: TSA.GalleryInfoSetValueCommandArchive.PropertyValue.caption_mode:type_name -> TSA.GalleryInfoCaptionMode
	53, // 87: TSA.GalleryItemSetValueCommand.PropertyValue.image_data:type_name -> TSP.DataReference
	60, // 88: TSA.ThemePresetsArchive.extension:extendee -> TSS.TSSThemeArchive
	61, // 89: TSA.GalleryInfo.gallery_info:extendee -> TSD.ImageArchive
	61, // 90: TSA.WebVideoInfo.web_video_info:extendee -> TSD.ImageArchive
	6,  // 91: TSA.ThemePresetsArchive.extension:type_name -> TSA.ThemePresetsArchive
	24, // 92: TSA.GalleryInfo.gallery_info:type_name -> TSA.GalleryInfo
	30, // 93: TSA.WebVideoInfo.web_video_info:type_name -> TSA.WebVideoInfo
	94, // [94:94] is the sub-list for method output_type
	94, // [94:94] is the sub-list for method input_type
	91, // [91:94] is the sub-list for extension type_name
	88, // [88:91] is the sub-list for extension extendee
	0,  // [0:88] is the sub-list for field type_name
}

func init() { file_TSAArchives_proto_init() }
func file_TSAArchives_proto_init() {
	if File_TSAArchives_proto != nil {
		return
	}
	file_TSDArchives_proto_init()
	file_TSDCommandArchives_proto_init()
	file_TSKArchives_proto_init()
	file_TSPMessages_proto_init()
	file_TSWPArchives_proto_init()
	file_TSWPCommandArchives_proto_init()
	file_TSSArchives_proto_init()
	file_TSCEArchives_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_TSAArchives_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSADocumentArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSAArchives_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunctionBrowserStateArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSAArchives_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThemePresetsArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSAArchives_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShortcutControllerArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSAArchives_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropagatePresetCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSAArchives_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShortcutCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSAArchives_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCustomFormatCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSAArchives_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCustomFormatCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSAArchives_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplaceCustomFormatCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSAArchives_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NeedsMediaCompatibilityUpgradeCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSAArchives_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeDocumentLocaleCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSAArchives_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InducedVerifyObjectsWithServerCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSAArchives_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InducedVerifyTransformHistoryWithServerCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSAArchives_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StyleUpdatePropertyMapCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSAArchives_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteDataChangeCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSAArchives_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GalleryInfoSetValueCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSAArchives_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GalleryInfoInsertItemsCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSAArchives_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GalleryInfoRemoveItemsCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSAArchives_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GalleryItemSetGeometryCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSAArchives_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GalleryItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSAArchives_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GalleryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSAArchives_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GallerySelectionTransformer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSAArchives_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GalleryItemSelection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSAArchives_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GalleryItemSelectionTransformer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSAArchives_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GalleryItemSelectionTransformerHelper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSAArchives_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GalleryItemSetValueCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSAArchives_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebVideoInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSAArchives_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaptionPlacementArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSAArchives_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaptionInfoArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSAArchives_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TitlePlacementCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSAArchives_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShortcutControllerArchive_ShortcutMapEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSAArchives_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GalleryInfoSetValueCommandArchive_PropertyValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSAArchives_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GalleryItemSetValueCommand_PropertyValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_TSAArchives_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   33,
			NumExtensions: 3,
			NumServices:   0,
		},
		GoTypes:           file_TSAArchives_proto_goTypes,
		DependencyIndexes: file_TSAArchives_proto_depIdxs,
		EnumInfos:         file_TSAArchives_proto_enumTypes,
		MessageInfos:      file_TSAArchives_proto_msgTypes,
		ExtensionInfos:    file_TSAArchives_proto_extTypes,
	}.Build()
	File_TSAArchives_proto = out.File
	file_TSAArchives_proto_rawDesc = nil
	file_TSAArchives_proto_goTypes = nil
	file_TSAArchives_proto_depIdxs = nil
}
