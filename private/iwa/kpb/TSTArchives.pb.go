// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: TSTArchives.proto

package kpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CellType int32

const (
	CellType_genericCellType      CellType = 0
	CellType_spanCellType         CellType = 1
	CellType_numberCellType       CellType = 2
	CellType_textCellType         CellType = 3
	CellType_formulaCellType      CellType = 4
	CellType_dateCellType         CellType = 5
	CellType_boolCellType         CellType = 6
	CellType_durationCellType     CellType = 7
	CellType_formulaErrorCellType CellType = 8
	CellType_automaticCellType    CellType = 9
)

// Enum value maps for CellType.
var (
	CellType_name = map[int32]string{
		0: "genericCellType",
		1: "spanCellType",
		2: "numberCellType",
		3: "textCellType",
		4: "formulaCellType",
		5: "dateCellType",
		6: "boolCellType",
		7: "durationCellType",
		8: "formulaErrorCellType",
		9: "automaticCellType",
	}
	CellType_value = map[string]int32{
		"genericCellType":      0,
		"spanCellType":         1,
		"numberCellType":       2,
		"textCellType":         3,
		"formulaCellType":      4,
		"dateCellType":         5,
		"boolCellType":         6,
		"durationCellType":     7,
		"formulaErrorCellType": 8,
		"automaticCellType":    9,
	}
)

func (x CellType) Enum() *CellType {
	p := new(CellType)
	*p = x
	return p
}

func (x CellType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CellType) Descriptor() protoreflect.EnumDescriptor {
	return file_TSTArchives_proto_enumTypes[0].Descriptor()
}

func (CellType) Type() protoreflect.EnumType {
	return &file_TSTArchives_proto_enumTypes[0]
}

func (x CellType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CellType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CellType(num)
	return nil
}

// Deprecated: Use CellType.Descriptor instead.
func (CellType) EnumDescriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{0}
}

type CellValueType int32

const (
	CellValueType_emptyCellValueType    CellValueType = 0
	CellValueType_numberCellValueType   CellValueType = 1
	CellValueType_stringCellValueType   CellValueType = 2
	CellValueType_providedCellValueType CellValueType = 3
	CellValueType_dateCellValueType     CellValueType = 4
	CellValueType_boolCellValueType     CellValueType = 5
	CellValueType_durationCellValueType CellValueType = 6
	CellValueType_errorCellValueType    CellValueType = 7
	CellValueType_richTextCellType      CellValueType = 8
	CellValueType_currencyCellValueType CellValueType = 9
)

// Enum value maps for CellValueType.
var (
	CellValueType_name = map[int32]string{
		0: "emptyCellValueType",
		1: "numberCellValueType",
		2: "stringCellValueType",
		3: "providedCellValueType",
		4: "dateCellValueType",
		5: "boolCellValueType",
		6: "durationCellValueType",
		7: "errorCellValueType",
		8: "richTextCellType",
		9: "currencyCellValueType",
	}
	CellValueType_value = map[string]int32{
		"emptyCellValueType":    0,
		"numberCellValueType":   1,
		"stringCellValueType":   2,
		"providedCellValueType": 3,
		"dateCellValueType":     4,
		"boolCellValueType":     5,
		"durationCellValueType": 6,
		"errorCellValueType":    7,
		"richTextCellType":      8,
		"currencyCellValueType": 9,
	}
)

func (x CellValueType) Enum() *CellValueType {
	p := new(CellValueType)
	*p = x
	return p
}

func (x CellValueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CellValueType) Descriptor() protoreflect.EnumDescriptor {
	return file_TSTArchives_proto_enumTypes[1].Descriptor()
}

func (CellValueType) Type() protoreflect.EnumType {
	return &file_TSTArchives_proto_enumTypes[1]
}

func (x CellValueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CellValueType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CellValueType(num)
	return nil
}

// Deprecated: Use CellValueType.Descriptor instead.
func (CellValueType) EnumDescriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{1}
}

type TableDimensionArchive int32

const (
	TableDimensionArchive_dimensionNeither TableDimensionArchive = -1
	TableDimensionArchive_dimensionRow     TableDimensionArchive = 0
	TableDimensionArchive_dimensionColumn  TableDimensionArchive = 1
)

// Enum value maps for TableDimensionArchive.
var (
	TableDimensionArchive_name = map[int32]string{
		-1: "dimensionNeither",
		0:  "dimensionRow",
		1:  "dimensionColumn",
	}
	TableDimensionArchive_value = map[string]int32{
		"dimensionNeither": -1,
		"dimensionRow":     0,
		"dimensionColumn":  1,
	}
)

func (x TableDimensionArchive) Enum() *TableDimensionArchive {
	p := new(TableDimensionArchive)
	*p = x
	return p
}

func (x TableDimensionArchive) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TableDimensionArchive) Descriptor() protoreflect.EnumDescriptor {
	return file_TSTArchives_proto_enumTypes[2].Descriptor()
}

func (TableDimensionArchive) Type() protoreflect.EnumType {
	return &file_TSTArchives_proto_enumTypes[2]
}

func (x TableDimensionArchive) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TableDimensionArchive) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TableDimensionArchive(num)
	return nil
}

// Deprecated: Use TableDimensionArchive.Descriptor instead.
func (TableDimensionArchive) EnumDescriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{2}
}

type SelectionTypeArchive int32

const (
	SelectionTypeArchive_deprecatedCellSelectionType        SelectionTypeArchive = 0
	SelectionTypeArchive_rowSelectionType                   SelectionTypeArchive = 1
	SelectionTypeArchive_columnSelectionType                SelectionTypeArchive = 2
	SelectionTypeArchive_deprecatedCellEditingSelectionType SelectionTypeArchive = 3
	SelectionTypeArchive_deprecatedTableNameSelectionType   SelectionTypeArchive = 4
	SelectionTypeArchive_deprecatedTableSelectionType       SelectionTypeArchive = 5
	SelectionTypeArchive_regionSelectionType                SelectionTypeArchive = 6
	SelectionTypeArchive_noSelectionType                    SelectionTypeArchive = 7
)

// Enum value maps for SelectionTypeArchive.
var (
	SelectionTypeArchive_name = map[int32]string{
		0: "deprecatedCellSelectionType",
		1: "rowSelectionType",
		2: "columnSelectionType",
		3: "deprecatedCellEditingSelectionType",
		4: "deprecatedTableNameSelectionType",
		5: "deprecatedTableSelectionType",
		6: "regionSelectionType",
		7: "noSelectionType",
	}
	SelectionTypeArchive_value = map[string]int32{
		"deprecatedCellSelectionType":        0,
		"rowSelectionType":                   1,
		"columnSelectionType":                2,
		"deprecatedCellEditingSelectionType": 3,
		"deprecatedTableNameSelectionType":   4,
		"deprecatedTableSelectionType":       5,
		"regionSelectionType":                6,
		"noSelectionType":                    7,
	}
)

func (x SelectionTypeArchive) Enum() *SelectionTypeArchive {
	p := new(SelectionTypeArchive)
	*p = x
	return p
}

func (x SelectionTypeArchive) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SelectionTypeArchive) Descriptor() protoreflect.EnumDescriptor {
	return file_TSTArchives_proto_enumTypes[3].Descriptor()
}

func (SelectionTypeArchive) Type() protoreflect.EnumType {
	return &file_TSTArchives_proto_enumTypes[3]
}

func (x SelectionTypeArchive) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SelectionTypeArchive) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SelectionTypeArchive(num)
	return nil
}

// Deprecated: Use SelectionTypeArchive.Descriptor instead.
func (SelectionTypeArchive) EnumDescriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{3}
}

type FillDirectionArchive int32

const (
	FillDirectionArchive_kTSTFillDownArchive  FillDirectionArchive = 1
	FillDirectionArchive_kTSTFillUpArchive    FillDirectionArchive = 2
	FillDirectionArchive_kTSTFillRightArchive FillDirectionArchive = 3
	FillDirectionArchive_kTSTFillLeftArchive  FillDirectionArchive = 4
)

// Enum value maps for FillDirectionArchive.
var (
	FillDirectionArchive_name = map[int32]string{
		1: "kTSTFillDownArchive",
		2: "kTSTFillUpArchive",
		3: "kTSTFillRightArchive",
		4: "kTSTFillLeftArchive",
	}
	FillDirectionArchive_value = map[string]int32{
		"kTSTFillDownArchive":  1,
		"kTSTFillUpArchive":    2,
		"kTSTFillRightArchive": 3,
		"kTSTFillLeftArchive":  4,
	}
)

func (x FillDirectionArchive) Enum() *FillDirectionArchive {
	p := new(FillDirectionArchive)
	*p = x
	return p
}

func (x FillDirectionArchive) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FillDirectionArchive) Descriptor() protoreflect.EnumDescriptor {
	return file_TSTArchives_proto_enumTypes[4].Descriptor()
}

func (FillDirectionArchive) Type() protoreflect.EnumType {
	return &file_TSTArchives_proto_enumTypes[4]
}

func (x FillDirectionArchive) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *FillDirectionArchive) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = FillDirectionArchive(num)
	return nil
}

// Deprecated: Use FillDirectionArchive.Descriptor instead.
func (FillDirectionArchive) EnumDescriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{4}
}

type MergeActionArchive int32

const (
	MergeActionArchive_mergeActionInsert MergeActionArchive = 1
	MergeActionArchive_mergeActionRemove MergeActionArchive = 2
	MergeActionArchive_mergeActionShrink MergeActionArchive = 3
	MergeActionArchive_mergeActionGrow   MergeActionArchive = 4
)

// Enum value maps for MergeActionArchive.
var (
	MergeActionArchive_name = map[int32]string{
		1: "mergeActionInsert",
		2: "mergeActionRemove",
		3: "mergeActionShrink",
		4: "mergeActionGrow",
	}
	MergeActionArchive_value = map[string]int32{
		"mergeActionInsert": 1,
		"mergeActionRemove": 2,
		"mergeActionShrink": 3,
		"mergeActionGrow":   4,
	}
)

func (x MergeActionArchive) Enum() *MergeActionArchive {
	p := new(MergeActionArchive)
	*p = x
	return p
}

func (x MergeActionArchive) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MergeActionArchive) Descriptor() protoreflect.EnumDescriptor {
	return file_TSTArchives_proto_enumTypes[5].Descriptor()
}

func (MergeActionArchive) Type() protoreflect.EnumType {
	return &file_TSTArchives_proto_enumTypes[5]
}

func (x MergeActionArchive) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MergeActionArchive) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MergeActionArchive(num)
	return nil
}

// Deprecated: Use MergeActionArchive.Descriptor instead.
func (MergeActionArchive) EnumDescriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{5}
}

type HideShowActionArchive int32

const (
	HideShowActionArchive_hideShowActionHide HideShowActionArchive = 0
	HideShowActionArchive_hideShowActionShow HideShowActionArchive = 1
)

// Enum value maps for HideShowActionArchive.
var (
	HideShowActionArchive_name = map[int32]string{
		0: "hideShowActionHide",
		1: "hideShowActionShow",
	}
	HideShowActionArchive_value = map[string]int32{
		"hideShowActionHide": 0,
		"hideShowActionShow": 1,
	}
)

func (x HideShowActionArchive) Enum() *HideShowActionArchive {
	p := new(HideShowActionArchive)
	*p = x
	return p
}

func (x HideShowActionArchive) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HideShowActionArchive) Descriptor() protoreflect.EnumDescriptor {
	return file_TSTArchives_proto_enumTypes[6].Descriptor()
}

func (HideShowActionArchive) Type() protoreflect.EnumType {
	return &file_TSTArchives_proto_enumTypes[6]
}

func (x HideShowActionArchive) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *HideShowActionArchive) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = HideShowActionArchive(num)
	return nil
}

// Deprecated: Use HideShowActionArchive.Descriptor instead.
func (HideShowActionArchive) EnumDescriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{6}
}

type PopUpMenuModel_CellValueType int32

const (
	PopUpMenuModel_NIL_TYPE     PopUpMenuModel_CellValueType = 1
	PopUpMenuModel_BOOLEAN_TYPE PopUpMenuModel_CellValueType = 2
	PopUpMenuModel_DATE_TYPE    PopUpMenuModel_CellValueType = 3
	PopUpMenuModel_NUMBER_TYPE  PopUpMenuModel_CellValueType = 4
	PopUpMenuModel_STRING_TYPE  PopUpMenuModel_CellValueType = 5
)

// Enum value maps for PopUpMenuModel_CellValueType.
var (
	PopUpMenuModel_CellValueType_name = map[int32]string{
		1: "NIL_TYPE",
		2: "BOOLEAN_TYPE",
		3: "DATE_TYPE",
		4: "NUMBER_TYPE",
		5: "STRING_TYPE",
	}
	PopUpMenuModel_CellValueType_value = map[string]int32{
		"NIL_TYPE":     1,
		"BOOLEAN_TYPE": 2,
		"DATE_TYPE":    3,
		"NUMBER_TYPE":  4,
		"STRING_TYPE":  5,
	}
)

func (x PopUpMenuModel_CellValueType) Enum() *PopUpMenuModel_CellValueType {
	p := new(PopUpMenuModel_CellValueType)
	*p = x
	return p
}

func (x PopUpMenuModel_CellValueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PopUpMenuModel_CellValueType) Descriptor() protoreflect.EnumDescriptor {
	return file_TSTArchives_proto_enumTypes[7].Descriptor()
}

func (PopUpMenuModel_CellValueType) Type() protoreflect.EnumType {
	return &file_TSTArchives_proto_enumTypes[7]
}

func (x PopUpMenuModel_CellValueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PopUpMenuModel_CellValueType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PopUpMenuModel_CellValueType(num)
	return nil
}

// Deprecated: Use PopUpMenuModel_CellValueType.Descriptor instead.
func (PopUpMenuModel_CellValueType) EnumDescriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{11, 0}
}

type ImportWarningSetArchive_FormulaWarningType int32

const (
	ImportWarningSetArchive_THREE_D_REFERENCE                ImportWarningSetArchive_FormulaWarningType = 1
	ImportWarningSetArchive_ARRAYED_FORMULA                  ImportWarningSetArchive_FormulaWarningType = 2
	ImportWarningSetArchive_DIFFERENT_BEHAVIOR_FOR_FUNCTION  ImportWarningSetArchive_FormulaWarningType = 3
	ImportWarningSetArchive_ERROR_TOKEN                      ImportWarningSetArchive_FormulaWarningType = 4
	ImportWarningSetArchive_EXTERNAL_REFERENCE               ImportWarningSetArchive_FormulaWarningType = 5
	ImportWarningSetArchive_NATURAL_LANGUAGE_FORMULA         ImportWarningSetArchive_FormulaWarningType = 6
	ImportWarningSetArchive_REFERENCE_OUT_OF_BOUNDS          ImportWarningSetArchive_FormulaWarningType = 7
	ImportWarningSetArchive_SHARED_FORMULA_BASE_NOT_FOUND    ImportWarningSetArchive_FormulaWarningType = 8
	ImportWarningSetArchive_UNKNOWN_NAME                     ImportWarningSetArchive_FormulaWarningType = 9
	ImportWarningSetArchive_UNSUPPORTED_FORMULA              ImportWarningSetArchive_FormulaWarningType = 10
	ImportWarningSetArchive_UNSUPPORTED_FUNCTION             ImportWarningSetArchive_FormulaWarningType = 11
	ImportWarningSetArchive_UNSUPPORTED_NAME                 ImportWarningSetArchive_FormulaWarningType = 12
	ImportWarningSetArchive_TRANSPOSED_NO_ISSUES             ImportWarningSetArchive_FormulaWarningType = 13
	ImportWarningSetArchive_TRANSPOSED_WITH_ISSUES           ImportWarningSetArchive_FormulaWarningType = 14
	ImportWarningSetArchive_TRANSPOSED_WITH_ISSUES_UNCHANGED ImportWarningSetArchive_FormulaWarningType = 15
)

// Enum value maps for ImportWarningSetArchive_FormulaWarningType.
var (
	ImportWarningSetArchive_FormulaWarningType_name = map[int32]string{
		1:  "THREE_D_REFERENCE",
		2:  "ARRAYED_FORMULA",
		3:  "DIFFERENT_BEHAVIOR_FOR_FUNCTION",
		4:  "ERROR_TOKEN",
		5:  "EXTERNAL_REFERENCE",
		6:  "NATURAL_LANGUAGE_FORMULA",
		7:  "REFERENCE_OUT_OF_BOUNDS",
		8:  "SHARED_FORMULA_BASE_NOT_FOUND",
		9:  "UNKNOWN_NAME",
		10: "UNSUPPORTED_FORMULA",
		11: "UNSUPPORTED_FUNCTION",
		12: "UNSUPPORTED_NAME",
		13: "TRANSPOSED_NO_ISSUES",
		14: "TRANSPOSED_WITH_ISSUES",
		15: "TRANSPOSED_WITH_ISSUES_UNCHANGED",
	}
	ImportWarningSetArchive_FormulaWarningType_value = map[string]int32{
		"THREE_D_REFERENCE":                1,
		"ARRAYED_FORMULA":                  2,
		"DIFFERENT_BEHAVIOR_FOR_FUNCTION":  3,
		"ERROR_TOKEN":                      4,
		"EXTERNAL_REFERENCE":               5,
		"NATURAL_LANGUAGE_FORMULA":         6,
		"REFERENCE_OUT_OF_BOUNDS":          7,
		"SHARED_FORMULA_BASE_NOT_FOUND":    8,
		"UNKNOWN_NAME":                     9,
		"UNSUPPORTED_FORMULA":              10,
		"UNSUPPORTED_FUNCTION":             11,
		"UNSUPPORTED_NAME":                 12,
		"TRANSPOSED_NO_ISSUES":             13,
		"TRANSPOSED_WITH_ISSUES":           14,
		"TRANSPOSED_WITH_ISSUES_UNCHANGED": 15,
	}
)

func (x ImportWarningSetArchive_FormulaWarningType) Enum() *ImportWarningSetArchive_FormulaWarningType {
	p := new(ImportWarningSetArchive_FormulaWarningType)
	*p = x
	return p
}

func (x ImportWarningSetArchive_FormulaWarningType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImportWarningSetArchive_FormulaWarningType) Descriptor() protoreflect.EnumDescriptor {
	return file_TSTArchives_proto_enumTypes[8].Descriptor()
}

func (ImportWarningSetArchive_FormulaWarningType) Type() protoreflect.EnumType {
	return &file_TSTArchives_proto_enumTypes[8]
}

func (x ImportWarningSetArchive_FormulaWarningType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ImportWarningSetArchive_FormulaWarningType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ImportWarningSetArchive_FormulaWarningType(num)
	return nil
}

// Deprecated: Use ImportWarningSetArchive_FormulaWarningType.Descriptor instead.
func (ImportWarningSetArchive_FormulaWarningType) EnumDescriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{12, 0}
}

type TableDataList_ListType int32

const (
	TableDataList_STRING                      TableDataList_ListType = 1
	TableDataList_FORMAT                      TableDataList_ListType = 2
	TableDataList_FORMULA                     TableDataList_ListType = 3
	TableDataList_STYLE                       TableDataList_ListType = 4
	TableDataList_FORMULA_ERROR               TableDataList_ListType = 5
	TableDataList_CUSTOM_FORMAT               TableDataList_ListType = 6
	TableDataList_MULTIPLE_CHOICE_LIST_FORMAT TableDataList_ListType = 7
	TableDataList_RICH_TEXT_PAYLOAD           TableDataList_ListType = 8
	TableDataList_CONDITIONAL_STYLE           TableDataList_ListType = 9
	TableDataList_COMMENT_STORAGE             TableDataList_ListType = 10
	TableDataList_IMPORT_WARNING              TableDataList_ListType = 11
	TableDataList_CONTROL_CELL_SPEC           TableDataList_ListType = 12
)

// Enum value maps for TableDataList_ListType.
var (
	TableDataList_ListType_name = map[int32]string{
		1:  "STRING",
		2:  "FORMAT",
		3:  "FORMULA",
		4:  "STYLE",
		5:  "FORMULA_ERROR",
		6:  "CUSTOM_FORMAT",
		7:  "MULTIPLE_CHOICE_LIST_FORMAT",
		8:  "RICH_TEXT_PAYLOAD",
		9:  "CONDITIONAL_STYLE",
		10: "COMMENT_STORAGE",
		11: "IMPORT_WARNING",
		12: "CONTROL_CELL_SPEC",
	}
	TableDataList_ListType_value = map[string]int32{
		"STRING":                      1,
		"FORMAT":                      2,
		"FORMULA":                     3,
		"STYLE":                       4,
		"FORMULA_ERROR":               5,
		"CUSTOM_FORMAT":               6,
		"MULTIPLE_CHOICE_LIST_FORMAT": 7,
		"RICH_TEXT_PAYLOAD":           8,
		"CONDITIONAL_STYLE":           9,
		"COMMENT_STORAGE":             10,
		"IMPORT_WARNING":              11,
		"CONTROL_CELL_SPEC":           12,
	}
)

func (x TableDataList_ListType) Enum() *TableDataList_ListType {
	p := new(TableDataList_ListType)
	*p = x
	return p
}

func (x TableDataList_ListType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TableDataList_ListType) Descriptor() protoreflect.EnumDescriptor {
	return file_TSTArchives_proto_enumTypes[9].Descriptor()
}

func (TableDataList_ListType) Type() protoreflect.EnumType {
	return &file_TSTArchives_proto_enumTypes[9]
}

func (x TableDataList_ListType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TableDataList_ListType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TableDataList_ListType(num)
	return nil
}

// Deprecated: Use TableDataList_ListType.Descriptor instead.
func (TableDataList_ListType) EnumDescriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{15, 0}
}

type TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive_Direction int32

const (
	TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive_ascending  TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive_Direction = 0
	TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive_descending TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive_Direction = 1
)

// Enum value maps for TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive_Direction.
var (
	TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive_Direction_name = map[int32]string{
		0: "ascending",
		1: "descending",
	}
	TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive_Direction_value = map[string]int32{
		"ascending":  0,
		"descending": 1,
	}
)

func (x TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive_Direction) Enum() *TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive_Direction {
	p := new(TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive_Direction)
	*p = x
	return p
}

func (x TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_TSTArchives_proto_enumTypes[10].Descriptor()
}

func (TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive_Direction) Type() protoreflect.EnumType {
	return &file_TSTArchives_proto_enumTypes[10]
}

func (x TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive_Direction) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive_Direction(num)
	return nil
}

// Deprecated: Use TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive_Direction.Descriptor instead.
func (TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive_Direction) EnumDescriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{25, 0, 0}
}

type TableSortOrderArchive_SortType int32

const (
	TableSortOrderArchive_entire_table TableSortOrderArchive_SortType = 0
	TableSortOrderArchive_row_range    TableSortOrderArchive_SortType = 1
)

// Enum value maps for TableSortOrderArchive_SortType.
var (
	TableSortOrderArchive_SortType_name = map[int32]string{
		0: "entire_table",
		1: "row_range",
	}
	TableSortOrderArchive_SortType_value = map[string]int32{
		"entire_table": 0,
		"row_range":    1,
	}
)

func (x TableSortOrderArchive_SortType) Enum() *TableSortOrderArchive_SortType {
	p := new(TableSortOrderArchive_SortType)
	*p = x
	return p
}

func (x TableSortOrderArchive_SortType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TableSortOrderArchive_SortType) Descriptor() protoreflect.EnumDescriptor {
	return file_TSTArchives_proto_enumTypes[11].Descriptor()
}

func (TableSortOrderArchive_SortType) Type() protoreflect.EnumType {
	return &file_TSTArchives_proto_enumTypes[11]
}

func (x TableSortOrderArchive_SortType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TableSortOrderArchive_SortType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TableSortOrderArchive_SortType(num)
	return nil
}

// Deprecated: Use TableSortOrderArchive_SortType.Descriptor instead.
func (TableSortOrderArchive_SortType) EnumDescriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{26, 0}
}

type TableSortOrderArchive_SortRuleArchive_Direction int32

const (
	TableSortOrderArchive_SortRuleArchive_ascending  TableSortOrderArchive_SortRuleArchive_Direction = 0
	TableSortOrderArchive_SortRuleArchive_descending TableSortOrderArchive_SortRuleArchive_Direction = 1
)

// Enum value maps for TableSortOrderArchive_SortRuleArchive_Direction.
var (
	TableSortOrderArchive_SortRuleArchive_Direction_name = map[int32]string{
		0: "ascending",
		1: "descending",
	}
	TableSortOrderArchive_SortRuleArchive_Direction_value = map[string]int32{
		"ascending":  0,
		"descending": 1,
	}
)

func (x TableSortOrderArchive_SortRuleArchive_Direction) Enum() *TableSortOrderArchive_SortRuleArchive_Direction {
	p := new(TableSortOrderArchive_SortRuleArchive_Direction)
	*p = x
	return p
}

func (x TableSortOrderArchive_SortRuleArchive_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TableSortOrderArchive_SortRuleArchive_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_TSTArchives_proto_enumTypes[12].Descriptor()
}

func (TableSortOrderArchive_SortRuleArchive_Direction) Type() protoreflect.EnumType {
	return &file_TSTArchives_proto_enumTypes[12]
}

func (x TableSortOrderArchive_SortRuleArchive_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TableSortOrderArchive_SortRuleArchive_Direction) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TableSortOrderArchive_SortRuleArchive_Direction(num)
	return nil
}

// Deprecated: Use TableSortOrderArchive_SortRuleArchive_Direction.Descriptor instead.
func (TableSortOrderArchive_SortRuleArchive_Direction) EnumDescriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{26, 0, 0}
}

type TableSortOrderUIDArchive_SortType int32

const (
	TableSortOrderUIDArchive_entire_table TableSortOrderUIDArchive_SortType = 0
	TableSortOrderUIDArchive_row_range    TableSortOrderUIDArchive_SortType = 1
)

// Enum value maps for TableSortOrderUIDArchive_SortType.
var (
	TableSortOrderUIDArchive_SortType_name = map[int32]string{
		0: "entire_table",
		1: "row_range",
	}
	TableSortOrderUIDArchive_SortType_value = map[string]int32{
		"entire_table": 0,
		"row_range":    1,
	}
)

func (x TableSortOrderUIDArchive_SortType) Enum() *TableSortOrderUIDArchive_SortType {
	p := new(TableSortOrderUIDArchive_SortType)
	*p = x
	return p
}

func (x TableSortOrderUIDArchive_SortType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TableSortOrderUIDArchive_SortType) Descriptor() protoreflect.EnumDescriptor {
	return file_TSTArchives_proto_enumTypes[13].Descriptor()
}

func (TableSortOrderUIDArchive_SortType) Type() protoreflect.EnumType {
	return &file_TSTArchives_proto_enumTypes[13]
}

func (x TableSortOrderUIDArchive_SortType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TableSortOrderUIDArchive_SortType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TableSortOrderUIDArchive_SortType(num)
	return nil
}

// Deprecated: Use TableSortOrderUIDArchive_SortType.Descriptor instead.
func (TableSortOrderUIDArchive_SortType) EnumDescriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{27, 0}
}

type TableSortOrderUIDArchive_SortRuleArchive_Direction int32

const (
	TableSortOrderUIDArchive_SortRuleArchive_ascending  TableSortOrderUIDArchive_SortRuleArchive_Direction = 0
	TableSortOrderUIDArchive_SortRuleArchive_descending TableSortOrderUIDArchive_SortRuleArchive_Direction = 1
)

// Enum value maps for TableSortOrderUIDArchive_SortRuleArchive_Direction.
var (
	TableSortOrderUIDArchive_SortRuleArchive_Direction_name = map[int32]string{
		0: "ascending",
		1: "descending",
	}
	TableSortOrderUIDArchive_SortRuleArchive_Direction_value = map[string]int32{
		"ascending":  0,
		"descending": 1,
	}
)

func (x TableSortOrderUIDArchive_SortRuleArchive_Direction) Enum() *TableSortOrderUIDArchive_SortRuleArchive_Direction {
	p := new(TableSortOrderUIDArchive_SortRuleArchive_Direction)
	*p = x
	return p
}

func (x TableSortOrderUIDArchive_SortRuleArchive_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TableSortOrderUIDArchive_SortRuleArchive_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_TSTArchives_proto_enumTypes[14].Descriptor()
}

func (TableSortOrderUIDArchive_SortRuleArchive_Direction) Type() protoreflect.EnumType {
	return &file_TSTArchives_proto_enumTypes[14]
}

func (x TableSortOrderUIDArchive_SortRuleArchive_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TableSortOrderUIDArchive_SortRuleArchive_Direction) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TableSortOrderUIDArchive_SortRuleArchive_Direction(num)
	return nil
}

// Deprecated: Use TableSortOrderUIDArchive_SortRuleArchive_Direction.Descriptor instead.
func (TableSortOrderUIDArchive_SortRuleArchive_Direction) EnumDescriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{27, 0, 0}
}

type FilterSetArchive_FilterSetType int32

const (
	FilterSetArchive_FilterSetArchiveTypeAll FilterSetArchive_FilterSetType = 0
	FilterSetArchive_FilterSetArchiveTypeAny FilterSetArchive_FilterSetType = 1
)

// Enum value maps for FilterSetArchive_FilterSetType.
var (
	FilterSetArchive_FilterSetType_name = map[int32]string{
		0: "FilterSetArchiveTypeAll",
		1: "FilterSetArchiveTypeAny",
	}
	FilterSetArchive_FilterSetType_value = map[string]int32{
		"FilterSetArchiveTypeAll": 0,
		"FilterSetArchiveTypeAny": 1,
	}
)

func (x FilterSetArchive_FilterSetType) Enum() *FilterSetArchive_FilterSetType {
	p := new(FilterSetArchive_FilterSetType)
	*p = x
	return p
}

func (x FilterSetArchive_FilterSetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilterSetArchive_FilterSetType) Descriptor() protoreflect.EnumDescriptor {
	return file_TSTArchives_proto_enumTypes[15].Descriptor()
}

func (FilterSetArchive_FilterSetType) Type() protoreflect.EnumType {
	return &file_TSTArchives_proto_enumTypes[15]
}

func (x FilterSetArchive_FilterSetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *FilterSetArchive_FilterSetType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = FilterSetArchive_FilterSetType(num)
	return nil
}

// Deprecated: Use FilterSetArchive_FilterSetType.Descriptor instead.
func (FilterSetArchive_FilterSetType) EnumDescriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{71, 0}
}

type HiddenStateExtentArchive_RowOrColumnDirection int32

const (
	HiddenStateExtentArchive_ColumnDirection HiddenStateExtentArchive_RowOrColumnDirection = 0
	HiddenStateExtentArchive_RowDirection    HiddenStateExtentArchive_RowOrColumnDirection = 1
)

// Enum value maps for HiddenStateExtentArchive_RowOrColumnDirection.
var (
	HiddenStateExtentArchive_RowOrColumnDirection_name = map[int32]string{
		0: "ColumnDirection",
		1: "RowDirection",
	}
	HiddenStateExtentArchive_RowOrColumnDirection_value = map[string]int32{
		"ColumnDirection": 0,
		"RowDirection":    1,
	}
)

func (x HiddenStateExtentArchive_RowOrColumnDirection) Enum() *HiddenStateExtentArchive_RowOrColumnDirection {
	p := new(HiddenStateExtentArchive_RowOrColumnDirection)
	*p = x
	return p
}

func (x HiddenStateExtentArchive_RowOrColumnDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HiddenStateExtentArchive_RowOrColumnDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_TSTArchives_proto_enumTypes[16].Descriptor()
}

func (HiddenStateExtentArchive_RowOrColumnDirection) Type() protoreflect.EnumType {
	return &file_TSTArchives_proto_enumTypes[16]
}

func (x HiddenStateExtentArchive_RowOrColumnDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *HiddenStateExtentArchive_RowOrColumnDirection) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = HiddenStateExtentArchive_RowOrColumnDirection(num)
	return nil
}

// Deprecated: Use HiddenStateExtentArchive_RowOrColumnDirection.Descriptor instead.
func (HiddenStateExtentArchive_RowOrColumnDirection) EnumDescriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{73, 0}
}

type MultiTableRemapperArchive_Purpose int32

const (
	MultiTableRemapperArchive_DEFAULT                             MultiTableRemapperArchive_Purpose = 0
	MultiTableRemapperArchive_GROUPING                            MultiTableRemapperArchive_Purpose = 1
	MultiTableRemapperArchive_PAGES_SECTION_DUPLICATION_NONCOLLAB MultiTableRemapperArchive_Purpose = 2
)

// Enum value maps for MultiTableRemapperArchive_Purpose.
var (
	MultiTableRemapperArchive_Purpose_name = map[int32]string{
		0: "DEFAULT",
		1: "GROUPING",
		2: "PAGES_SECTION_DUPLICATION_NONCOLLAB",
	}
	MultiTableRemapperArchive_Purpose_value = map[string]int32{
		"DEFAULT":                             0,
		"GROUPING":                            1,
		"PAGES_SECTION_DUPLICATION_NONCOLLAB": 2,
	}
)

func (x MultiTableRemapperArchive_Purpose) Enum() *MultiTableRemapperArchive_Purpose {
	p := new(MultiTableRemapperArchive_Purpose)
	*p = x
	return p
}

func (x MultiTableRemapperArchive_Purpose) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MultiTableRemapperArchive_Purpose) Descriptor() protoreflect.EnumDescriptor {
	return file_TSTArchives_proto_enumTypes[17].Descriptor()
}

func (MultiTableRemapperArchive_Purpose) Type() protoreflect.EnumType {
	return &file_TSTArchives_proto_enumTypes[17]
}

func (x MultiTableRemapperArchive_Purpose) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MultiTableRemapperArchive_Purpose) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MultiTableRemapperArchive_Purpose(num)
	return nil
}

// Deprecated: Use MultiTableRemapperArchive_Purpose.Descriptor instead.
func (MultiTableRemapperArchive_Purpose) EnumDescriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{123, 0}
}

type CellID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackedData    *uint32                `protobuf:"fixed32,1,req,name=packedData" json:"packedData,omitempty"`
	ExpandedCoord *CellCoordinateArchive `protobuf:"bytes,2,opt,name=expanded_coord,json=expandedCoord" json:"expanded_coord,omitempty"`
}

func (x *CellID) Reset() {
	*x = CellID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellID) ProtoMessage() {}

func (x *CellID) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellID.ProtoReflect.Descriptor instead.
func (*CellID) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{0}
}

func (x *CellID) GetPackedData() uint32 {
	if x != nil && x.PackedData != nil {
		return *x.PackedData
	}
	return 0
}

func (x *CellID) GetExpandedCoord() *CellCoordinateArchive {
	if x != nil {
		return x.ExpandedCoord
	}
	return nil
}

type CellUIDLookupListArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColumnUids    *UidLookupListArchive `protobuf:"bytes,1,opt,name=column_uids,json=columnUids" json:"column_uids,omitempty"`
	RowUids       *UidLookupListArchive `protobuf:"bytes,2,opt,name=row_uids,json=rowUids" json:"row_uids,omitempty"`
	ColumnIndexes []int32               `protobuf:"varint,3,rep,name=column_indexes,json=columnIndexes" json:"column_indexes,omitempty"`
	RowIndexes    []int32               `protobuf:"varint,4,rep,name=row_indexes,json=rowIndexes" json:"row_indexes,omitempty"`
}

func (x *CellUIDLookupListArchive) Reset() {
	*x = CellUIDLookupListArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellUIDLookupListArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellUIDLookupListArchive) ProtoMessage() {}

func (x *CellUIDLookupListArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellUIDLookupListArchive.ProtoReflect.Descriptor instead.
func (*CellUIDLookupListArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{1}
}

func (x *CellUIDLookupListArchive) GetColumnUids() *UidLookupListArchive {
	if x != nil {
		return x.ColumnUids
	}
	return nil
}

func (x *CellUIDLookupListArchive) GetRowUids() *UidLookupListArchive {
	if x != nil {
		return x.RowUids
	}
	return nil
}

func (x *CellUIDLookupListArchive) GetColumnIndexes() []int32 {
	if x != nil {
		return x.ColumnIndexes
	}
	return nil
}

func (x *CellUIDLookupListArchive) GetRowIndexes() []int32 {
	if x != nil {
		return x.RowIndexes
	}
	return nil
}

type CellUIDListArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RowUids                 []*UUID                   `protobuf:"bytes,1,rep,name=row_uids,json=rowUids" json:"row_uids,omitempty"`
	ColumnUids              []*UUID                   `protobuf:"bytes,2,rep,name=column_uids,json=columnUids" json:"column_uids,omitempty"`
	CompressedRowIndexes    []int32                   `protobuf:"varint,3,rep,name=compressed_row_indexes,json=compressedRowIndexes" json:"compressed_row_indexes,omitempty"`
	CompressedColumnIndexes []int32                   `protobuf:"varint,4,rep,name=compressed_column_indexes,json=compressedColumnIndexes" json:"compressed_column_indexes,omitempty"`
	UncompressedLookupList  *CellUIDLookupListArchive `protobuf:"bytes,5,opt,name=uncompressed_lookup_list,json=uncompressedLookupList" json:"uncompressed_lookup_list,omitempty"`
}

func (x *CellUIDListArchive) Reset() {
	*x = CellUIDListArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellUIDListArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellUIDListArchive) ProtoMessage() {}

func (x *CellUIDListArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellUIDListArchive.ProtoReflect.Descriptor instead.
func (*CellUIDListArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{2}
}

func (x *CellUIDListArchive) GetRowUids() []*UUID {
	if x != nil {
		return x.RowUids
	}
	return nil
}

func (x *CellUIDListArchive) GetColumnUids() []*UUID {
	if x != nil {
		return x.ColumnUids
	}
	return nil
}

func (x *CellUIDListArchive) GetCompressedRowIndexes() []int32 {
	if x != nil {
		return x.CompressedRowIndexes
	}
	return nil
}

func (x *CellUIDListArchive) GetCompressedColumnIndexes() []int32 {
	if x != nil {
		return x.CompressedColumnIndexes
	}
	return nil
}

func (x *CellUIDListArchive) GetUncompressedLookupList() *CellUIDLookupListArchive {
	if x != nil {
		return x.UncompressedLookupList
	}
	return nil
}

type TableSize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackedData *uint32 `protobuf:"fixed32,1,req,name=packedData" json:"packedData,omitempty"`
	NumColumns *uint32 `protobuf:"varint,2,opt,name=num_columns,json=numColumns" json:"num_columns,omitempty"`
	NumRows    *uint32 `protobuf:"varint,3,opt,name=num_rows,json=numRows" json:"num_rows,omitempty"`
}

func (x *TableSize) Reset() {
	*x = TableSize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableSize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableSize) ProtoMessage() {}

func (x *TableSize) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableSize.ProtoReflect.Descriptor instead.
func (*TableSize) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{3}
}

func (x *TableSize) GetPackedData() uint32 {
	if x != nil && x.PackedData != nil {
		return *x.PackedData
	}
	return 0
}

func (x *TableSize) GetNumColumns() uint32 {
	if x != nil && x.NumColumns != nil {
		return *x.NumColumns
	}
	return 0
}

func (x *TableSize) GetNumRows() uint32 {
	if x != nil && x.NumRows != nil {
		return *x.NumRows
	}
	return 0
}

type ExpandedTableSize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumColumns *uint32 `protobuf:"varint,1,req,name=num_columns,json=numColumns" json:"num_columns,omitempty"`
	NumRows    *uint32 `protobuf:"varint,2,req,name=num_rows,json=numRows" json:"num_rows,omitempty"`
}

func (x *ExpandedTableSize) Reset() {
	*x = ExpandedTableSize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpandedTableSize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpandedTableSize) ProtoMessage() {}

func (x *ExpandedTableSize) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpandedTableSize.ProtoReflect.Descriptor instead.
func (*ExpandedTableSize) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{4}
}

func (x *ExpandedTableSize) GetNumColumns() uint32 {
	if x != nil && x.NumColumns != nil {
		return *x.NumColumns
	}
	return 0
}

func (x *ExpandedTableSize) GetNumRows() uint32 {
	if x != nil && x.NumRows != nil {
		return *x.NumRows
	}
	return 0
}

type CellRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Origin *CellID    `protobuf:"bytes,1,req,name=origin" json:"origin,omitempty"`
	Size   *TableSize `protobuf:"bytes,2,req,name=size" json:"size,omitempty"`
}

func (x *CellRange) Reset() {
	*x = CellRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellRange) ProtoMessage() {}

func (x *CellRange) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellRange.ProtoReflect.Descriptor instead.
func (*CellRange) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{5}
}

func (x *CellRange) GetOrigin() *CellID {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *CellRange) GetSize() *TableSize {
	if x != nil {
		return x.Size
	}
	return nil
}

type ExpandedCellRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Origin *CellCoordinateArchive `protobuf:"bytes,1,req,name=origin" json:"origin,omitempty"`
	Size   *ExpandedTableSize     `protobuf:"bytes,2,req,name=size" json:"size,omitempty"`
}

func (x *ExpandedCellRange) Reset() {
	*x = ExpandedCellRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpandedCellRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpandedCellRange) ProtoMessage() {}

func (x *ExpandedCellRange) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpandedCellRange.ProtoReflect.Descriptor instead.
func (*ExpandedCellRange) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{6}
}

func (x *ExpandedCellRange) GetOrigin() *CellCoordinateArchive {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *ExpandedCellRange) GetSize() *ExpandedTableSize {
	if x != nil {
		return x.Size
	}
	return nil
}

type TableSelection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellRange              *CellRange            `protobuf:"bytes,1,req,name=cellRange" json:"cellRange,omitempty"`
	ExtendedCellRange      *CellRange            `protobuf:"bytes,2,req,name=extendedCellRange" json:"extendedCellRange,omitempty"`
	ExtendedCellRangeValid *bool                 `protobuf:"varint,3,req,name=extendedCellRangeValid" json:"extendedCellRangeValid,omitempty"`
	SelectionType          *SelectionTypeArchive `protobuf:"varint,4,req,name=selection_type,json=selectionType,enum=TST.SelectionTypeArchive" json:"selection_type,omitempty"`
}

func (x *TableSelection) Reset() {
	*x = TableSelection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableSelection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableSelection) ProtoMessage() {}

func (x *TableSelection) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableSelection.ProtoReflect.Descriptor instead.
func (*TableSelection) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{7}
}

func (x *TableSelection) GetCellRange() *CellRange {
	if x != nil {
		return x.CellRange
	}
	return nil
}

func (x *TableSelection) GetExtendedCellRange() *CellRange {
	if x != nil {
		return x.ExtendedCellRange
	}
	return nil
}

func (x *TableSelection) GetExtendedCellRangeValid() bool {
	if x != nil && x.ExtendedCellRangeValid != nil {
		return *x.ExtendedCellRangeValid
	}
	return false
}

func (x *TableSelection) GetSelectionType() SelectionTypeArchive {
	if x != nil && x.SelectionType != nil {
		return *x.SelectionType
	}
	return SelectionTypeArchive_deprecatedCellSelectionType
}

type TileRowInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TileRowIndex            *uint32 `protobuf:"varint,1,req,name=tile_row_index,json=tileRowIndex" json:"tile_row_index,omitempty"`
	CellCount               *uint32 `protobuf:"varint,2,req,name=cell_count,json=cellCount" json:"cell_count,omitempty"`
	CellStorageBufferPreBnc []byte  `protobuf:"bytes,3,req,name=cell_storage_buffer_pre_bnc,json=cellStorageBufferPreBnc" json:"cell_storage_buffer_pre_bnc,omitempty"`
	CellOffsetsPreBnc       []byte  `protobuf:"bytes,4,req,name=cell_offsets_pre_bnc,json=cellOffsetsPreBnc" json:"cell_offsets_pre_bnc,omitempty"`
	StorageVersion          *uint32 `protobuf:"varint,5,opt,name=storage_version,json=storageVersion" json:"storage_version,omitempty"`
	CellStorageBuffer       []byte  `protobuf:"bytes,6,opt,name=cell_storage_buffer,json=cellStorageBuffer" json:"cell_storage_buffer,omitempty"`
	CellOffsets             []byte  `protobuf:"bytes,7,opt,name=cell_offsets,json=cellOffsets" json:"cell_offsets,omitempty"`
	HasWideOffsets          *bool   `protobuf:"varint,8,opt,name=has_wide_offsets,json=hasWideOffsets" json:"has_wide_offsets,omitempty"`
}

func (x *TileRowInfo) Reset() {
	*x = TileRowInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TileRowInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TileRowInfo) ProtoMessage() {}

func (x *TileRowInfo) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TileRowInfo.ProtoReflect.Descriptor instead.
func (*TileRowInfo) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{8}
}

func (x *TileRowInfo) GetTileRowIndex() uint32 {
	if x != nil && x.TileRowIndex != nil {
		return *x.TileRowIndex
	}
	return 0
}

func (x *TileRowInfo) GetCellCount() uint32 {
	if x != nil && x.CellCount != nil {
		return *x.CellCount
	}
	return 0
}

func (x *TileRowInfo) GetCellStorageBufferPreBnc() []byte {
	if x != nil {
		return x.CellStorageBufferPreBnc
	}
	return nil
}

func (x *TileRowInfo) GetCellOffsetsPreBnc() []byte {
	if x != nil {
		return x.CellOffsetsPreBnc
	}
	return nil
}

func (x *TileRowInfo) GetStorageVersion() uint32 {
	if x != nil && x.StorageVersion != nil {
		return *x.StorageVersion
	}
	return 0
}

func (x *TileRowInfo) GetCellStorageBuffer() []byte {
	if x != nil {
		return x.CellStorageBuffer
	}
	return nil
}

func (x *TileRowInfo) GetCellOffsets() []byte {
	if x != nil {
		return x.CellOffsets
	}
	return nil
}

func (x *TileRowInfo) GetHasWideOffsets() bool {
	if x != nil && x.HasWideOffsets != nil {
		return *x.HasWideOffsets
	}
	return false
}

type Tile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxColumn         *uint32        `protobuf:"varint,1,req,name=maxColumn" json:"maxColumn,omitempty"`
	MaxRow            *uint32        `protobuf:"varint,2,req,name=maxRow" json:"maxRow,omitempty"`
	NumCells          *uint32        `protobuf:"varint,3,req,name=numCells" json:"numCells,omitempty"`
	Numrows           *uint32        `protobuf:"varint,4,req,name=numrows" json:"numrows,omitempty"`
	RowInfos          []*TileRowInfo `protobuf:"bytes,5,rep,name=rowInfos" json:"rowInfos,omitempty"`
	StorageVersion    *uint32        `protobuf:"varint,6,opt,name=storage_version,json=storageVersion" json:"storage_version,omitempty"`
	LastSavedIn_BNC   *bool          `protobuf:"varint,7,opt,name=last_saved_in_BNC,json=lastSavedInBNC" json:"last_saved_in_BNC,omitempty"`
	ShouldUseWideRows *bool          `protobuf:"varint,8,opt,name=should_use_wide_rows,json=shouldUseWideRows" json:"should_use_wide_rows,omitempty"`
}

func (x *Tile) Reset() {
	*x = Tile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tile) ProtoMessage() {}

func (x *Tile) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tile.ProtoReflect.Descriptor instead.
func (*Tile) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{9}
}

func (x *Tile) GetMaxColumn() uint32 {
	if x != nil && x.MaxColumn != nil {
		return *x.MaxColumn
	}
	return 0
}

func (x *Tile) GetMaxRow() uint32 {
	if x != nil && x.MaxRow != nil {
		return *x.MaxRow
	}
	return 0
}

func (x *Tile) GetNumCells() uint32 {
	if x != nil && x.NumCells != nil {
		return *x.NumCells
	}
	return 0
}

func (x *Tile) GetNumrows() uint32 {
	if x != nil && x.Numrows != nil {
		return *x.Numrows
	}
	return 0
}

func (x *Tile) GetRowInfos() []*TileRowInfo {
	if x != nil {
		return x.RowInfos
	}
	return nil
}

func (x *Tile) GetStorageVersion() uint32 {
	if x != nil && x.StorageVersion != nil {
		return *x.StorageVersion
	}
	return 0
}

func (x *Tile) GetLastSavedIn_BNC() bool {
	if x != nil && x.LastSavedIn_BNC != nil {
		return *x.LastSavedIn_BNC
	}
	return false
}

func (x *Tile) GetShouldUseWideRows() bool {
	if x != nil && x.ShouldUseWideRows != nil {
		return *x.ShouldUseWideRows
	}
	return false
}

type TileStorage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tiles             []*TileStorage_Tile `protobuf:"bytes,1,rep,name=tiles" json:"tiles,omitempty"`
	TileSize          *uint32             `protobuf:"varint,2,opt,name=tile_size,json=tileSize" json:"tile_size,omitempty"`
	ShouldUseWideRows *bool               `protobuf:"varint,3,opt,name=should_use_wide_rows,json=shouldUseWideRows" json:"should_use_wide_rows,omitempty"`
}

func (x *TileStorage) Reset() {
	*x = TileStorage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TileStorage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TileStorage) ProtoMessage() {}

func (x *TileStorage) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TileStorage.ProtoReflect.Descriptor instead.
func (*TileStorage) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{10}
}

func (x *TileStorage) GetTiles() []*TileStorage_Tile {
	if x != nil {
		return x.Tiles
	}
	return nil
}

func (x *TileStorage) GetTileSize() uint32 {
	if x != nil && x.TileSize != nil {
		return *x.TileSize
	}
	return 0
}

func (x *TileStorage) GetShouldUseWideRows() bool {
	if x != nil && x.ShouldUseWideRows != nil {
		return *x.ShouldUseWideRows
	}
	return false
}

type PopUpMenuModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Do not use.
	Item     []*PopUpMenuModel_CellValue `protobuf:"bytes,1,rep,name=item" json:"item,omitempty"`
	TsceItem []*CellValueArchive         `protobuf:"bytes,2,rep,name=tsce_item,json=tsceItem" json:"tsce_item,omitempty"`
}

func (x *PopUpMenuModel) Reset() {
	*x = PopUpMenuModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PopUpMenuModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PopUpMenuModel) ProtoMessage() {}

func (x *PopUpMenuModel) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PopUpMenuModel.ProtoReflect.Descriptor instead.
func (*PopUpMenuModel) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{11}
}

// Deprecated: Do not use.
func (x *PopUpMenuModel) GetItem() []*PopUpMenuModel_CellValue {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *PopUpMenuModel) GetTsceItem() []*CellValueArchive {
	if x != nil {
		return x.TsceItem
	}
	return nil
}

type ImportWarningSetArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FormulaImportWarning                         *ImportWarningSetArchive_FormulaImportWarning `protobuf:"bytes,1,opt,name=formula_import_warning,json=formulaImportWarning" json:"formula_import_warning,omitempty"`
	CondFormatAboveAvgEqualAvg                   *bool                                         `protobuf:"varint,2,opt,name=cond_format_above_avg_equal_avg,json=condFormatAboveAvgEqualAvg,def=0" json:"cond_format_above_avg_equal_avg,omitempty"`
	CondFormatAboveAvgStdDev                     *bool                                         `protobuf:"varint,3,opt,name=cond_format_above_avg_std_dev,json=condFormatAboveAvgStdDev,def=0" json:"cond_format_above_avg_std_dev,omitempty"`
	CondFormatComplexFormula                     *bool                                         `protobuf:"varint,4,opt,name=cond_format_complex_formula,json=condFormatComplexFormula,def=0" json:"cond_format_complex_formula,omitempty"`
	CondFormatContainsErrors                     *bool                                         `protobuf:"varint,5,opt,name=cond_format_contains_errors,json=condFormatContainsErrors,def=0" json:"cond_format_contains_errors,omitempty"`
	CondFormatExpr                               *bool                                         `protobuf:"varint,6,opt,name=cond_format_expr,json=condFormatExpr,def=0" json:"cond_format_expr,omitempty"`
	CondFormatNotContainsErrors                  *bool                                         `protobuf:"varint,7,opt,name=cond_format_not_contains_errors,json=condFormatNotContainsErrors,def=0" json:"cond_format_not_contains_errors,omitempty"`
	CondFormatParametersNotAllSameType           *bool                                         `protobuf:"varint,8,opt,name=cond_format_parameters_not_all_same_type,json=condFormatParametersNotAllSameType,def=0" json:"cond_format_parameters_not_all_same_type,omitempty"`
	CondFormatStopIfTrue                         *bool                                         `protobuf:"varint,9,opt,name=cond_format_stop_if_true,json=condFormatStopIfTrue,def=0" json:"cond_format_stop_if_true,omitempty"`
	CondFormatUnsupportedOperator                *bool                                         `protobuf:"varint,10,opt,name=cond_format_unsupported_operator,json=condFormatUnsupportedOperator,def=0" json:"cond_format_unsupported_operator,omitempty"`
	CondFormatUnsupportedStyling                 *bool                                         `protobuf:"varint,11,opt,name=cond_format_unsupported_styling,json=condFormatUnsupportedStyling,def=0" json:"cond_format_unsupported_styling,omitempty"`
	CondFormatUnsupportedTimePeriod              *bool                                         `protobuf:"varint,12,opt,name=cond_format_unsupported_time_period,json=condFormatUnsupportedTimePeriod,def=0" json:"cond_format_unsupported_time_period,omitempty"`
	ErrorCellWithNoFormula                       *bool                                         `protobuf:"varint,13,opt,name=error_cell_with_no_formula,json=errorCellWithNoFormula,def=0" json:"error_cell_with_no_formula,omitempty"`
	UnsupportedCondFormat                        *bool                                         `protobuf:"varint,14,opt,name=unsupported_cond_format,json=unsupportedCondFormat,def=0" json:"unsupported_cond_format,omitempty"`
	OriginalDataFormat                           *string                                       `protobuf:"bytes,15,opt,name=original_data_format,json=originalDataFormat" json:"original_data_format,omitempty"`
	FormulaWarningFilteredColumnFormulaNotCopied *bool                                         `protobuf:"varint,16,opt,name=formula_warning_filtered_column_formula_not_copied,json=formulaWarningFilteredColumnFormulaNotCopied,def=0" json:"formula_warning_filtered_column_formula_not_copied,omitempty"`
	DurationFormatRangeChanged                   *bool                                         `protobuf:"varint,17,opt,name=duration_format_range_changed,json=durationFormatRangeChanged,def=0" json:"duration_format_range_changed,omitempty"`
}

// Default values for ImportWarningSetArchive fields.
const (
	Default_ImportWarningSetArchive_CondFormatAboveAvgEqualAvg                   = bool(false)
	Default_ImportWarningSetArchive_CondFormatAboveAvgStdDev                     = bool(false)
	Default_ImportWarningSetArchive_CondFormatComplexFormula                     = bool(false)
	Default_ImportWarningSetArchive_CondFormatContainsErrors                     = bool(false)
	Default_ImportWarningSetArchive_CondFormatExpr                               = bool(false)
	Default_ImportWarningSetArchive_CondFormatNotContainsErrors                  = bool(false)
	Default_ImportWarningSetArchive_CondFormatParametersNotAllSameType           = bool(false)
	Default_ImportWarningSetArchive_CondFormatStopIfTrue                         = bool(false)
	Default_ImportWarningSetArchive_CondFormatUnsupportedOperator                = bool(false)
	Default_ImportWarningSetArchive_CondFormatUnsupportedStyling                 = bool(false)
	Default_ImportWarningSetArchive_CondFormatUnsupportedTimePeriod              = bool(false)
	Default_ImportWarningSetArchive_ErrorCellWithNoFormula                       = bool(false)
	Default_ImportWarningSetArchive_UnsupportedCondFormat                        = bool(false)
	Default_ImportWarningSetArchive_FormulaWarningFilteredColumnFormulaNotCopied = bool(false)
	Default_ImportWarningSetArchive_DurationFormatRangeChanged                   = bool(false)
)

func (x *ImportWarningSetArchive) Reset() {
	*x = ImportWarningSetArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportWarningSetArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportWarningSetArchive) ProtoMessage() {}

func (x *ImportWarningSetArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportWarningSetArchive.ProtoReflect.Descriptor instead.
func (*ImportWarningSetArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{12}
}

func (x *ImportWarningSetArchive) GetFormulaImportWarning() *ImportWarningSetArchive_FormulaImportWarning {
	if x != nil {
		return x.FormulaImportWarning
	}
	return nil
}

func (x *ImportWarningSetArchive) GetCondFormatAboveAvgEqualAvg() bool {
	if x != nil && x.CondFormatAboveAvgEqualAvg != nil {
		return *x.CondFormatAboveAvgEqualAvg
	}
	return Default_ImportWarningSetArchive_CondFormatAboveAvgEqualAvg
}

func (x *ImportWarningSetArchive) GetCondFormatAboveAvgStdDev() bool {
	if x != nil && x.CondFormatAboveAvgStdDev != nil {
		return *x.CondFormatAboveAvgStdDev
	}
	return Default_ImportWarningSetArchive_CondFormatAboveAvgStdDev
}

func (x *ImportWarningSetArchive) GetCondFormatComplexFormula() bool {
	if x != nil && x.CondFormatComplexFormula != nil {
		return *x.CondFormatComplexFormula
	}
	return Default_ImportWarningSetArchive_CondFormatComplexFormula
}

func (x *ImportWarningSetArchive) GetCondFormatContainsErrors() bool {
	if x != nil && x.CondFormatContainsErrors != nil {
		return *x.CondFormatContainsErrors
	}
	return Default_ImportWarningSetArchive_CondFormatContainsErrors
}

func (x *ImportWarningSetArchive) GetCondFormatExpr() bool {
	if x != nil && x.CondFormatExpr != nil {
		return *x.CondFormatExpr
	}
	return Default_ImportWarningSetArchive_CondFormatExpr
}

func (x *ImportWarningSetArchive) GetCondFormatNotContainsErrors() bool {
	if x != nil && x.CondFormatNotContainsErrors != nil {
		return *x.CondFormatNotContainsErrors
	}
	return Default_ImportWarningSetArchive_CondFormatNotContainsErrors
}

func (x *ImportWarningSetArchive) GetCondFormatParametersNotAllSameType() bool {
	if x != nil && x.CondFormatParametersNotAllSameType != nil {
		return *x.CondFormatParametersNotAllSameType
	}
	return Default_ImportWarningSetArchive_CondFormatParametersNotAllSameType
}

func (x *ImportWarningSetArchive) GetCondFormatStopIfTrue() bool {
	if x != nil && x.CondFormatStopIfTrue != nil {
		return *x.CondFormatStopIfTrue
	}
	return Default_ImportWarningSetArchive_CondFormatStopIfTrue
}

func (x *ImportWarningSetArchive) GetCondFormatUnsupportedOperator() bool {
	if x != nil && x.CondFormatUnsupportedOperator != nil {
		return *x.CondFormatUnsupportedOperator
	}
	return Default_ImportWarningSetArchive_CondFormatUnsupportedOperator
}

func (x *ImportWarningSetArchive) GetCondFormatUnsupportedStyling() bool {
	if x != nil && x.CondFormatUnsupportedStyling != nil {
		return *x.CondFormatUnsupportedStyling
	}
	return Default_ImportWarningSetArchive_CondFormatUnsupportedStyling
}

func (x *ImportWarningSetArchive) GetCondFormatUnsupportedTimePeriod() bool {
	if x != nil && x.CondFormatUnsupportedTimePeriod != nil {
		return *x.CondFormatUnsupportedTimePeriod
	}
	return Default_ImportWarningSetArchive_CondFormatUnsupportedTimePeriod
}

func (x *ImportWarningSetArchive) GetErrorCellWithNoFormula() bool {
	if x != nil && x.ErrorCellWithNoFormula != nil {
		return *x.ErrorCellWithNoFormula
	}
	return Default_ImportWarningSetArchive_ErrorCellWithNoFormula
}

func (x *ImportWarningSetArchive) GetUnsupportedCondFormat() bool {
	if x != nil && x.UnsupportedCondFormat != nil {
		return *x.UnsupportedCondFormat
	}
	return Default_ImportWarningSetArchive_UnsupportedCondFormat
}

func (x *ImportWarningSetArchive) GetOriginalDataFormat() string {
	if x != nil && x.OriginalDataFormat != nil {
		return *x.OriginalDataFormat
	}
	return ""
}

func (x *ImportWarningSetArchive) GetFormulaWarningFilteredColumnFormulaNotCopied() bool {
	if x != nil && x.FormulaWarningFilteredColumnFormulaNotCopied != nil {
		return *x.FormulaWarningFilteredColumnFormulaNotCopied
	}
	return Default_ImportWarningSetArchive_FormulaWarningFilteredColumnFormulaNotCopied
}

func (x *ImportWarningSetArchive) GetDurationFormatRangeChanged() bool {
	if x != nil && x.DurationFormatRangeChanged != nil {
		return *x.DurationFormatRangeChanged
	}
	return Default_ImportWarningSetArchive_DurationFormatRangeChanged
}

type CellRefImportWarningSetPairArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellRef    *CellReferenceArchive    `protobuf:"bytes,1,req,name=cell_ref,json=cellRef" json:"cell_ref,omitempty"`
	WarningSet *ImportWarningSetArchive `protobuf:"bytes,3,opt,name=warning_set,json=warningSet" json:"warning_set,omitempty"`
}

func (x *CellRefImportWarningSetPairArchive) Reset() {
	*x = CellRefImportWarningSetPairArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellRefImportWarningSetPairArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellRefImportWarningSetPairArchive) ProtoMessage() {}

func (x *CellRefImportWarningSetPairArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellRefImportWarningSetPairArchive.ProtoReflect.Descriptor instead.
func (*CellRefImportWarningSetPairArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{13}
}

func (x *CellRefImportWarningSetPairArchive) GetCellRef() *CellReferenceArchive {
	if x != nil {
		return x.CellRef
	}
	return nil
}

func (x *CellRefImportWarningSetPairArchive) GetWarningSet() *ImportWarningSetArchive {
	if x != nil {
		return x.WarningSet
	}
	return nil
}

type ImportWarningSetByCellRefArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellrefWarningSetPair []*CellRefImportWarningSetPairArchive `protobuf:"bytes,1,rep,name=cellref_warning_set_pair,json=cellrefWarningSetPair" json:"cellref_warning_set_pair,omitempty"`
}

func (x *ImportWarningSetByCellRefArchive) Reset() {
	*x = ImportWarningSetByCellRefArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportWarningSetByCellRefArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportWarningSetByCellRefArchive) ProtoMessage() {}

func (x *ImportWarningSetByCellRefArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportWarningSetByCellRefArchive.ProtoReflect.Descriptor instead.
func (*ImportWarningSetByCellRefArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{14}
}

func (x *ImportWarningSetByCellRefArchive) GetCellrefWarningSetPair() []*CellRefImportWarningSetPairArchive {
	if x != nil {
		return x.CellrefWarningSetPair
	}
	return nil
}

type TableDataList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ListType   *TableDataList_ListType    `protobuf:"varint,1,req,name=listType,enum=TST.TableDataList_ListType" json:"listType,omitempty"`
	NextListID *uint32                    `protobuf:"varint,2,req,name=nextListID" json:"nextListID,omitempty"`
	Entries    []*TableDataList_ListEntry `protobuf:"bytes,3,rep,name=entries" json:"entries,omitempty"`
	Segments   []*Reference               `protobuf:"bytes,4,rep,name=segments" json:"segments,omitempty"`
}

func (x *TableDataList) Reset() {
	*x = TableDataList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableDataList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableDataList) ProtoMessage() {}

func (x *TableDataList) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableDataList.ProtoReflect.Descriptor instead.
func (*TableDataList) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{15}
}

func (x *TableDataList) GetListType() TableDataList_ListType {
	if x != nil && x.ListType != nil {
		return *x.ListType
	}
	return TableDataList_STRING
}

func (x *TableDataList) GetNextListID() uint32 {
	if x != nil && x.NextListID != nil {
		return *x.NextListID
	}
	return 0
}

func (x *TableDataList) GetEntries() []*TableDataList_ListEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *TableDataList) GetSegments() []*Reference {
	if x != nil {
		return x.Segments
	}
	return nil
}

type TableDataListSegment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ListType *TableDataList_ListType    `protobuf:"varint,1,req,name=list_type,json=listType,enum=TST.TableDataList_ListType" json:"list_type,omitempty"`
	KeyRange *Range                     `protobuf:"bytes,2,req,name=key_range,json=keyRange" json:"key_range,omitempty"`
	Entries  []*TableDataList_ListEntry `protobuf:"bytes,3,rep,name=entries" json:"entries,omitempty"`
}

func (x *TableDataListSegment) Reset() {
	*x = TableDataListSegment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableDataListSegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableDataListSegment) ProtoMessage() {}

func (x *TableDataListSegment) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableDataListSegment.ProtoReflect.Descriptor instead.
func (*TableDataListSegment) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{16}
}

func (x *TableDataListSegment) GetListType() TableDataList_ListType {
	if x != nil && x.ListType != nil {
		return *x.ListType
	}
	return TableDataList_STRING
}

func (x *TableDataListSegment) GetKeyRange() *Range {
	if x != nil {
		return x.KeyRange
	}
	return nil
}

func (x *TableDataListSegment) GetEntries() []*TableDataList_ListEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type TableRBTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes []*TableRBTree_Node `protobuf:"bytes,1,rep,name=nodes" json:"nodes,omitempty"`
}

func (x *TableRBTree) Reset() {
	*x = TableRBTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableRBTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableRBTree) ProtoMessage() {}

func (x *TableRBTree) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableRBTree.ProtoReflect.Descriptor instead.
func (*TableRBTree) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{17}
}

func (x *TableRBTree) GetNodes() []*TableRBTree_Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type HeaderStorageBucket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketHashFunction *uint32                       `protobuf:"varint,1,req,name=bucketHashFunction" json:"bucketHashFunction,omitempty"`
	Headers            []*HeaderStorageBucket_Header `protobuf:"bytes,2,rep,name=headers" json:"headers,omitempty"`
}

func (x *HeaderStorageBucket) Reset() {
	*x = HeaderStorageBucket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeaderStorageBucket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeaderStorageBucket) ProtoMessage() {}

func (x *HeaderStorageBucket) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeaderStorageBucket.ProtoReflect.Descriptor instead.
func (*HeaderStorageBucket) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{18}
}

func (x *HeaderStorageBucket) GetBucketHashFunction() uint32 {
	if x != nil && x.BucketHashFunction != nil {
		return *x.BucketHashFunction
	}
	return 0
}

func (x *HeaderStorageBucket) GetHeaders() []*HeaderStorageBucket_Header {
	if x != nil {
		return x.Headers
	}
	return nil
}

type HeaderStorage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketHashFunction *uint32      `protobuf:"varint,1,req,name=bucketHashFunction" json:"bucketHashFunction,omitempty"`
	Buckets            []*Reference `protobuf:"bytes,2,rep,name=buckets" json:"buckets,omitempty"`
}

func (x *HeaderStorage) Reset() {
	*x = HeaderStorage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeaderStorage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeaderStorage) ProtoMessage() {}

func (x *HeaderStorage) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeaderStorage.ProtoReflect.Descriptor instead.
func (*HeaderStorage) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{19}
}

func (x *HeaderStorage) GetBucketHashFunction() uint32 {
	if x != nil && x.BucketHashFunction != nil {
		return *x.BucketHashFunction
	}
	return 0
}

func (x *HeaderStorage) GetBuckets() []*Reference {
	if x != nil {
		return x.Buckets
	}
	return nil
}

type DataStore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RowHeaders                    *HeaderStorage `protobuf:"bytes,1,req,name=rowHeaders" json:"rowHeaders,omitempty"`
	ColumnHeaders                 *Reference     `protobuf:"bytes,2,req,name=columnHeaders" json:"columnHeaders,omitempty"`
	Tiles                         *TileStorage   `protobuf:"bytes,3,req,name=tiles" json:"tiles,omitempty"`
	StringTable                   *Reference     `protobuf:"bytes,4,req,name=stringTable" json:"stringTable,omitempty"`
	StyleTable                    *Reference     `protobuf:"bytes,5,req,name=styleTable" json:"styleTable,omitempty"`
	FormulaTable                  *Reference     `protobuf:"bytes,6,req,name=formula_table,json=formulaTable" json:"formula_table,omitempty"`
	FormulaErrorTable             *Reference     `protobuf:"bytes,12,opt,name=formulaErrorTable" json:"formulaErrorTable,omitempty"`
	FormatTablePreBnc             *Reference     `protobuf:"bytes,11,req,name=format_table_pre_bnc,json=formatTablePreBnc" json:"format_table_pre_bnc,omitempty"`
	MultipleChoiceListFormatTable *Reference     `protobuf:"bytes,16,opt,name=multipleChoiceListFormatTable" json:"multipleChoiceListFormatTable,omitempty"`
	MergeRegionMap                *Reference     `protobuf:"bytes,13,opt,name=merge_region_map,json=mergeRegionMap" json:"merge_region_map,omitempty"`
	CustomFormatTable             *Reference     `protobuf:"bytes,15,opt,name=customFormatTable" json:"customFormatTable,omitempty"`
	NextRowStripID                *uint32        `protobuf:"varint,7,req,name=nextRowStripID" json:"nextRowStripID,omitempty"`
	NextColumnStripID             *uint32        `protobuf:"varint,8,req,name=nextColumnStripID" json:"nextColumnStripID,omitempty"`
	RowTileTree                   *TableRBTree   `protobuf:"bytes,9,req,name=rowTileTree" json:"rowTileTree,omitempty"`
	ColumnTileTree                *TableRBTree   `protobuf:"bytes,10,req,name=columnTileTree" json:"columnTileTree,omitempty"`
	StorageVersionPreBnc          *uint32        `protobuf:"varint,14,opt,name=storage_version_pre_bnc,json=storageVersionPreBnc" json:"storage_version_pre_bnc,omitempty"`
	RichTextTable                 *Reference     `protobuf:"bytes,17,opt,name=rich_text_table,json=richTextTable" json:"rich_text_table,omitempty"`
	Conditionalstyletable         *Reference     `protobuf:"bytes,18,opt,name=conditionalstyletable" json:"conditionalstyletable,omitempty"`
	CommentStorageTable           *Reference     `protobuf:"bytes,19,opt,name=commentStorageTable" json:"commentStorageTable,omitempty"`
	ImportWarningSetTable         *Reference     `protobuf:"bytes,20,opt,name=importWarningSetTable" json:"importWarningSetTable,omitempty"`
	ControlCellSpecTable          *Reference     `protobuf:"bytes,21,opt,name=control_cell_spec_table,json=controlCellSpecTable" json:"control_cell_spec_table,omitempty"`
	FormatTable                   *Reference     `protobuf:"bytes,22,opt,name=format_table,json=formatTable" json:"format_table,omitempty"`
}

func (x *DataStore) Reset() {
	*x = DataStore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataStore) ProtoMessage() {}

func (x *DataStore) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataStore.ProtoReflect.Descriptor instead.
func (*DataStore) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{20}
}

func (x *DataStore) GetRowHeaders() *HeaderStorage {
	if x != nil {
		return x.RowHeaders
	}
	return nil
}

func (x *DataStore) GetColumnHeaders() *Reference {
	if x != nil {
		return x.ColumnHeaders
	}
	return nil
}

func (x *DataStore) GetTiles() *TileStorage {
	if x != nil {
		return x.Tiles
	}
	return nil
}

func (x *DataStore) GetStringTable() *Reference {
	if x != nil {
		return x.StringTable
	}
	return nil
}

func (x *DataStore) GetStyleTable() *Reference {
	if x != nil {
		return x.StyleTable
	}
	return nil
}

func (x *DataStore) GetFormulaTable() *Reference {
	if x != nil {
		return x.FormulaTable
	}
	return nil
}

func (x *DataStore) GetFormulaErrorTable() *Reference {
	if x != nil {
		return x.FormulaErrorTable
	}
	return nil
}

func (x *DataStore) GetFormatTablePreBnc() *Reference {
	if x != nil {
		return x.FormatTablePreBnc
	}
	return nil
}

func (x *DataStore) GetMultipleChoiceListFormatTable() *Reference {
	if x != nil {
		return x.MultipleChoiceListFormatTable
	}
	return nil
}

func (x *DataStore) GetMergeRegionMap() *Reference {
	if x != nil {
		return x.MergeRegionMap
	}
	return nil
}

func (x *DataStore) GetCustomFormatTable() *Reference {
	if x != nil {
		return x.CustomFormatTable
	}
	return nil
}

func (x *DataStore) GetNextRowStripID() uint32 {
	if x != nil && x.NextRowStripID != nil {
		return *x.NextRowStripID
	}
	return 0
}

func (x *DataStore) GetNextColumnStripID() uint32 {
	if x != nil && x.NextColumnStripID != nil {
		return *x.NextColumnStripID
	}
	return 0
}

func (x *DataStore) GetRowTileTree() *TableRBTree {
	if x != nil {
		return x.RowTileTree
	}
	return nil
}

func (x *DataStore) GetColumnTileTree() *TableRBTree {
	if x != nil {
		return x.ColumnTileTree
	}
	return nil
}

func (x *DataStore) GetStorageVersionPreBnc() uint32 {
	if x != nil && x.StorageVersionPreBnc != nil {
		return *x.StorageVersionPreBnc
	}
	return 0
}

func (x *DataStore) GetRichTextTable() *Reference {
	if x != nil {
		return x.RichTextTable
	}
	return nil
}

func (x *DataStore) GetConditionalstyletable() *Reference {
	if x != nil {
		return x.Conditionalstyletable
	}
	return nil
}

func (x *DataStore) GetCommentStorageTable() *Reference {
	if x != nil {
		return x.CommentStorageTable
	}
	return nil
}

func (x *DataStore) GetImportWarningSetTable() *Reference {
	if x != nil {
		return x.ImportWarningSetTable
	}
	return nil
}

func (x *DataStore) GetControlCellSpecTable() *Reference {
	if x != nil {
		return x.ControlCellSpecTable
	}
	return nil
}

func (x *DataStore) GetFormatTable() *Reference {
	if x != nil {
		return x.FormatTable
	}
	return nil
}

type TableInfoArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super      *DrawableArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	TableModel *Reference       `protobuf:"bytes,2,req,name=tableModel" json:"tableModel,omitempty"`
	// Deprecated: Do not use.
	EditingState      *Reference `protobuf:"bytes,3,opt,name=editing_state,json=editingState" json:"editing_state,omitempty"`
	SummaryModel      *Reference `protobuf:"bytes,4,opt,name=summary_model,json=summaryModel" json:"summary_model,omitempty"`
	CategoryOrder     *Reference `protobuf:"bytes,5,opt,name=category_order,json=categoryOrder" json:"category_order,omitempty"`
	ViewColumnRowUids *Reference `protobuf:"bytes,6,opt,name=view_column_row_uids,json=viewColumnRowUids" json:"view_column_row_uids,omitempty"`
	GroupByUuid       *UUID      `protobuf:"bytes,7,opt,name=group_by_uuid,json=groupByUuid" json:"group_by_uuid,omitempty"`
	HiddenStatesUuid  *UUID      `protobuf:"bytes,8,opt,name=hidden_states_uuid,json=hiddenStatesUuid" json:"hidden_states_uuid,omitempty"`
	// Deprecated: Do not use.
	FormulaCoordSpaceInPre40 *uint32              `protobuf:"varint,9,opt,name=formula_coord_space_in_pre40,json=formulaCoordSpaceInPre40" json:"formula_coord_space_in_pre40,omitempty"`
	FormulaCoordSpace        *uint32              `protobuf:"varint,10,opt,name=formula_coord_space,json=formulaCoordSpace" json:"formula_coord_space,omitempty"`
	PasteboardCoordMapper    *CoordMapperArchive  `protobuf:"bytes,13,opt,name=pasteboard_coord_mapper,json=pasteboardCoordMapper" json:"pasteboard_coord_mapper,omitempty"`
	LayoutEngine             *LayoutEngineArchive `protobuf:"bytes,14,opt,name=layout_engine,json=layoutEngine" json:"layout_engine,omitempty"`
	PivotDataModel           *Reference           `protobuf:"bytes,15,opt,name=pivot_data_model,json=pivotDataModel" json:"pivot_data_model,omitempty"`
	IsAPivotTable            *bool                `protobuf:"varint,16,opt,name=is_a_pivot_table,json=isAPivotTable" json:"is_a_pivot_table,omitempty"`
	PivotOrder               *Reference           `protobuf:"bytes,17,opt,name=pivot_order,json=pivotOrder" json:"pivot_order,omitempty"`
}

func (x *TableInfoArchive) Reset() {
	*x = TableInfoArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableInfoArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableInfoArchive) ProtoMessage() {}

func (x *TableInfoArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableInfoArchive.ProtoReflect.Descriptor instead.
func (*TableInfoArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{21}
}

func (x *TableInfoArchive) GetSuper() *DrawableArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *TableInfoArchive) GetTableModel() *Reference {
	if x != nil {
		return x.TableModel
	}
	return nil
}

// Deprecated: Do not use.
func (x *TableInfoArchive) GetEditingState() *Reference {
	if x != nil {
		return x.EditingState
	}
	return nil
}

func (x *TableInfoArchive) GetSummaryModel() *Reference {
	if x != nil {
		return x.SummaryModel
	}
	return nil
}

func (x *TableInfoArchive) GetCategoryOrder() *Reference {
	if x != nil {
		return x.CategoryOrder
	}
	return nil
}

func (x *TableInfoArchive) GetViewColumnRowUids() *Reference {
	if x != nil {
		return x.ViewColumnRowUids
	}
	return nil
}

func (x *TableInfoArchive) GetGroupByUuid() *UUID {
	if x != nil {
		return x.GroupByUuid
	}
	return nil
}

func (x *TableInfoArchive) GetHiddenStatesUuid() *UUID {
	if x != nil {
		return x.HiddenStatesUuid
	}
	return nil
}

// Deprecated: Do not use.
func (x *TableInfoArchive) GetFormulaCoordSpaceInPre40() uint32 {
	if x != nil && x.FormulaCoordSpaceInPre40 != nil {
		return *x.FormulaCoordSpaceInPre40
	}
	return 0
}

func (x *TableInfoArchive) GetFormulaCoordSpace() uint32 {
	if x != nil && x.FormulaCoordSpace != nil {
		return *x.FormulaCoordSpace
	}
	return 0
}

func (x *TableInfoArchive) GetPasteboardCoordMapper() *CoordMapperArchive {
	if x != nil {
		return x.PasteboardCoordMapper
	}
	return nil
}

func (x *TableInfoArchive) GetLayoutEngine() *LayoutEngineArchive {
	if x != nil {
		return x.LayoutEngine
	}
	return nil
}

func (x *TableInfoArchive) GetPivotDataModel() *Reference {
	if x != nil {
		return x.PivotDataModel
	}
	return nil
}

func (x *TableInfoArchive) GetIsAPivotTable() bool {
	if x != nil && x.IsAPivotTable != nil {
		return *x.IsAPivotTable
	}
	return false
}

func (x *TableInfoArchive) GetPivotOrder() *Reference {
	if x != nil {
		return x.PivotOrder
	}
	return nil
}

type CategoryInfoArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super      *DrawableArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	TableModel *Reference       `protobuf:"bytes,2,req,name=tableModel" json:"tableModel,omitempty"`
}

func (x *CategoryInfoArchive) Reset() {
	*x = CategoryInfoArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryInfoArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryInfoArchive) ProtoMessage() {}

func (x *CategoryInfoArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryInfoArchive.ProtoReflect.Descriptor instead.
func (*CategoryInfoArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{22}
}

func (x *CategoryInfoArchive) GetSuper() *DrawableArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CategoryInfoArchive) GetTableModel() *Reference {
	if x != nil {
		return x.TableModel
	}
	return nil
}

type WPTableInfoArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super   *TableInfoArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Storage *Reference        `protobuf:"bytes,2,opt,name=storage" json:"storage,omitempty"`
}

func (x *WPTableInfoArchive) Reset() {
	*x = WPTableInfoArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WPTableInfoArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WPTableInfoArchive) ProtoMessage() {}

func (x *WPTableInfoArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WPTableInfoArchive.ProtoReflect.Descriptor instead.
func (*WPTableInfoArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{23}
}

func (x *WPTableInfoArchive) GetSuper() *TableInfoArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *WPTableInfoArchive) GetStorage() *Reference {
	if x != nil {
		return x.Storage
	}
	return nil
}

type TableStyleNetworkArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BodyTextStyle                 *Reference `protobuf:"bytes,1,req,name=body_text_style,json=bodyTextStyle" json:"body_text_style,omitempty"`
	HeaderRowTextStyle            *Reference `protobuf:"bytes,2,req,name=header_row_text_style,json=headerRowTextStyle" json:"header_row_text_style,omitempty"`
	HeaderColumnTextStyle         *Reference `protobuf:"bytes,3,req,name=header_column_text_style,json=headerColumnTextStyle" json:"header_column_text_style,omitempty"`
	FooterRowTextStyle            *Reference `protobuf:"bytes,4,req,name=footer_row_text_style,json=footerRowTextStyle" json:"footer_row_text_style,omitempty"`
	BodyCellStyle                 *Reference `protobuf:"bytes,5,req,name=body_cell_style,json=bodyCellStyle" json:"body_cell_style,omitempty"`
	HeaderRowStyle                *Reference `protobuf:"bytes,6,req,name=header_row_style,json=headerRowStyle" json:"header_row_style,omitempty"`
	HeaderColumnStyle             *Reference `protobuf:"bytes,7,req,name=header_column_style,json=headerColumnStyle" json:"header_column_style,omitempty"`
	FooterRowStyle                *Reference `protobuf:"bytes,8,req,name=footer_row_style,json=footerRowStyle" json:"footer_row_style,omitempty"`
	TableStyle                    *Reference `protobuf:"bytes,9,req,name=table_style,json=tableStyle" json:"table_style,omitempty"`
	TableNameStyle                *Reference `protobuf:"bytes,10,opt,name=table_name_style,json=tableNameStyle" json:"table_name_style,omitempty"`
	TableNameShapeStyle           *Reference `protobuf:"bytes,11,opt,name=table_name_shape_style,json=tableNameShapeStyle" json:"table_name_shape_style,omitempty"`
	PresetId                      *uint32    `protobuf:"varint,12,opt,name=preset_id,json=presetId" json:"preset_id,omitempty"`
	CategoryLevel_1TextStyle      *Reference `protobuf:"bytes,13,opt,name=category_level_1_text_style,json=categoryLevel1TextStyle" json:"category_level_1_text_style,omitempty"`
	CategoryLevel_2TextStyle      *Reference `protobuf:"bytes,14,opt,name=category_level_2_text_style,json=categoryLevel2TextStyle" json:"category_level_2_text_style,omitempty"`
	CategoryLevel_3TextStyle      *Reference `protobuf:"bytes,15,opt,name=category_level_3_text_style,json=categoryLevel3TextStyle" json:"category_level_3_text_style,omitempty"`
	CategoryLevel_4TextStyle      *Reference `protobuf:"bytes,16,opt,name=category_level_4_text_style,json=categoryLevel4TextStyle" json:"category_level_4_text_style,omitempty"`
	CategoryLevel_5TextStyle      *Reference `protobuf:"bytes,17,opt,name=category_level_5_text_style,json=categoryLevel5TextStyle" json:"category_level_5_text_style,omitempty"`
	CategoryLevel_1Style          *Reference `protobuf:"bytes,18,opt,name=category_level_1_style,json=categoryLevel1Style" json:"category_level_1_style,omitempty"`
	CategoryLevel_2Style          *Reference `protobuf:"bytes,19,opt,name=category_level_2_style,json=categoryLevel2Style" json:"category_level_2_style,omitempty"`
	CategoryLevel_3Style          *Reference `protobuf:"bytes,20,opt,name=category_level_3_style,json=categoryLevel3Style" json:"category_level_3_style,omitempty"`
	CategoryLevel_4Style          *Reference `protobuf:"bytes,21,opt,name=category_level_4_style,json=categoryLevel4Style" json:"category_level_4_style,omitempty"`
	CategoryLevel_5Style          *Reference `protobuf:"bytes,22,opt,name=category_level_5_style,json=categoryLevel5Style" json:"category_level_5_style,omitempty"`
	LabelLevel_1TextStyle         *Reference `protobuf:"bytes,23,opt,name=label_level_1_text_style,json=labelLevel1TextStyle" json:"label_level_1_text_style,omitempty"`
	LabelLevel_2TextStyle         *Reference `protobuf:"bytes,24,opt,name=label_level_2_text_style,json=labelLevel2TextStyle" json:"label_level_2_text_style,omitempty"`
	LabelLevel_3TextStyle         *Reference `protobuf:"bytes,25,opt,name=label_level_3_text_style,json=labelLevel3TextStyle" json:"label_level_3_text_style,omitempty"`
	LabelLevel_4TextStyle         *Reference `protobuf:"bytes,26,opt,name=label_level_4_text_style,json=labelLevel4TextStyle" json:"label_level_4_text_style,omitempty"`
	LabelLevel_5TextStyle         *Reference `protobuf:"bytes,27,opt,name=label_level_5_text_style,json=labelLevel5TextStyle" json:"label_level_5_text_style,omitempty"`
	LabelLevel_1Style             *Reference `protobuf:"bytes,28,opt,name=label_level_1_style,json=labelLevel1Style" json:"label_level_1_style,omitempty"`
	LabelLevel_2Style             *Reference `protobuf:"bytes,29,opt,name=label_level_2_style,json=labelLevel2Style" json:"label_level_2_style,omitempty"`
	LabelLevel_3Style             *Reference `protobuf:"bytes,30,opt,name=label_level_3_style,json=labelLevel3Style" json:"label_level_3_style,omitempty"`
	LabelLevel_4Style             *Reference `protobuf:"bytes,31,opt,name=label_level_4_style,json=labelLevel4Style" json:"label_level_4_style,omitempty"`
	LabelLevel_5Style             *Reference `protobuf:"bytes,32,opt,name=label_level_5_style,json=labelLevel5Style" json:"label_level_5_style,omitempty"`
	PivotBodySummaryRowStyle      *Reference `protobuf:"bytes,33,opt,name=pivot_body_summary_row_style,json=pivotBodySummaryRowStyle" json:"pivot_body_summary_row_style,omitempty"`
	PivotBodySummaryColumnStyle   *Reference `protobuf:"bytes,34,opt,name=pivot_body_summary_column_style,json=pivotBodySummaryColumnStyle" json:"pivot_body_summary_column_style,omitempty"`
	PivotHeaderColumnSummaryStyle *Reference `protobuf:"bytes,35,opt,name=pivot_header_column_summary_style,json=pivotHeaderColumnSummaryStyle" json:"pivot_header_column_summary_style,omitempty"`
}

func (x *TableStyleNetworkArchive) Reset() {
	*x = TableStyleNetworkArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableStyleNetworkArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableStyleNetworkArchive) ProtoMessage() {}

func (x *TableStyleNetworkArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableStyleNetworkArchive.ProtoReflect.Descriptor instead.
func (*TableStyleNetworkArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{24}
}

func (x *TableStyleNetworkArchive) GetBodyTextStyle() *Reference {
	if x != nil {
		return x.BodyTextStyle
	}
	return nil
}

func (x *TableStyleNetworkArchive) GetHeaderRowTextStyle() *Reference {
	if x != nil {
		return x.HeaderRowTextStyle
	}
	return nil
}

func (x *TableStyleNetworkArchive) GetHeaderColumnTextStyle() *Reference {
	if x != nil {
		return x.HeaderColumnTextStyle
	}
	return nil
}

func (x *TableStyleNetworkArchive) GetFooterRowTextStyle() *Reference {
	if x != nil {
		return x.FooterRowTextStyle
	}
	return nil
}

func (x *TableStyleNetworkArchive) GetBodyCellStyle() *Reference {
	if x != nil {
		return x.BodyCellStyle
	}
	return nil
}

func (x *TableStyleNetworkArchive) GetHeaderRowStyle() *Reference {
	if x != nil {
		return x.HeaderRowStyle
	}
	return nil
}

func (x *TableStyleNetworkArchive) GetHeaderColumnStyle() *Reference {
	if x != nil {
		return x.HeaderColumnStyle
	}
	return nil
}

func (x *TableStyleNetworkArchive) GetFooterRowStyle() *Reference {
	if x != nil {
		return x.FooterRowStyle
	}
	return nil
}

func (x *TableStyleNetworkArchive) GetTableStyle() *Reference {
	if x != nil {
		return x.TableStyle
	}
	return nil
}

func (x *TableStyleNetworkArchive) GetTableNameStyle() *Reference {
	if x != nil {
		return x.TableNameStyle
	}
	return nil
}

func (x *TableStyleNetworkArchive) GetTableNameShapeStyle() *Reference {
	if x != nil {
		return x.TableNameShapeStyle
	}
	return nil
}

func (x *TableStyleNetworkArchive) GetPresetId() uint32 {
	if x != nil && x.PresetId != nil {
		return *x.PresetId
	}
	return 0
}

func (x *TableStyleNetworkArchive) GetCategoryLevel_1TextStyle() *Reference {
	if x != nil {
		return x.CategoryLevel_1TextStyle
	}
	return nil
}

func (x *TableStyleNetworkArchive) GetCategoryLevel_2TextStyle() *Reference {
	if x != nil {
		return x.CategoryLevel_2TextStyle
	}
	return nil
}

func (x *TableStyleNetworkArchive) GetCategoryLevel_3TextStyle() *Reference {
	if x != nil {
		return x.CategoryLevel_3TextStyle
	}
	return nil
}

func (x *TableStyleNetworkArchive) GetCategoryLevel_4TextStyle() *Reference {
	if x != nil {
		return x.CategoryLevel_4TextStyle
	}
	return nil
}

func (x *TableStyleNetworkArchive) GetCategoryLevel_5TextStyle() *Reference {
	if x != nil {
		return x.CategoryLevel_5TextStyle
	}
	return nil
}

func (x *TableStyleNetworkArchive) GetCategoryLevel_1Style() *Reference {
	if x != nil {
		return x.CategoryLevel_1Style
	}
	return nil
}

func (x *TableStyleNetworkArchive) GetCategoryLevel_2Style() *Reference {
	if x != nil {
		return x.CategoryLevel_2Style
	}
	return nil
}

func (x *TableStyleNetworkArchive) GetCategoryLevel_3Style() *Reference {
	if x != nil {
		return x.CategoryLevel_3Style
	}
	return nil
}

func (x *TableStyleNetworkArchive) GetCategoryLevel_4Style() *Reference {
	if x != nil {
		return x.CategoryLevel_4Style
	}
	return nil
}

func (x *TableStyleNetworkArchive) GetCategoryLevel_5Style() *Reference {
	if x != nil {
		return x.CategoryLevel_5Style
	}
	return nil
}

func (x *TableStyleNetworkArchive) GetLabelLevel_1TextStyle() *Reference {
	if x != nil {
		return x.LabelLevel_1TextStyle
	}
	return nil
}

func (x *TableStyleNetworkArchive) GetLabelLevel_2TextStyle() *Reference {
	if x != nil {
		return x.LabelLevel_2TextStyle
	}
	return nil
}

func (x *TableStyleNetworkArchive) GetLabelLevel_3TextStyle() *Reference {
	if x != nil {
		return x.LabelLevel_3TextStyle
	}
	return nil
}

func (x *TableStyleNetworkArchive) GetLabelLevel_4TextStyle() *Reference {
	if x != nil {
		return x.LabelLevel_4TextStyle
	}
	return nil
}

func (x *TableStyleNetworkArchive) GetLabelLevel_5TextStyle() *Reference {
	if x != nil {
		return x.LabelLevel_5TextStyle
	}
	return nil
}

func (x *TableStyleNetworkArchive) GetLabelLevel_1Style() *Reference {
	if x != nil {
		return x.LabelLevel_1Style
	}
	return nil
}

func (x *TableStyleNetworkArchive) GetLabelLevel_2Style() *Reference {
	if x != nil {
		return x.LabelLevel_2Style
	}
	return nil
}

func (x *TableStyleNetworkArchive) GetLabelLevel_3Style() *Reference {
	if x != nil {
		return x.LabelLevel_3Style
	}
	return nil
}

func (x *TableStyleNetworkArchive) GetLabelLevel_4Style() *Reference {
	if x != nil {
		return x.LabelLevel_4Style
	}
	return nil
}

func (x *TableStyleNetworkArchive) GetLabelLevel_5Style() *Reference {
	if x != nil {
		return x.LabelLevel_5Style
	}
	return nil
}

func (x *TableStyleNetworkArchive) GetPivotBodySummaryRowStyle() *Reference {
	if x != nil {
		return x.PivotBodySummaryRowStyle
	}
	return nil
}

func (x *TableStyleNetworkArchive) GetPivotBodySummaryColumnStyle() *Reference {
	if x != nil {
		return x.PivotBodySummaryColumnStyle
	}
	return nil
}

func (x *TableStyleNetworkArchive) GetPivotHeaderColumnSummaryStyle() *Reference {
	if x != nil {
		return x.PivotHeaderColumnSummaryStyle
	}
	return nil
}

type TableGroupSortOrderUIDArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupSortRules []*TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive `protobuf:"bytes,1,rep,name=group_sort_rules,json=groupSortRules" json:"group_sort_rules,omitempty"`
}

func (x *TableGroupSortOrderUIDArchive) Reset() {
	*x = TableGroupSortOrderUIDArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableGroupSortOrderUIDArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableGroupSortOrderUIDArchive) ProtoMessage() {}

func (x *TableGroupSortOrderUIDArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableGroupSortOrderUIDArchive.ProtoReflect.Descriptor instead.
func (*TableGroupSortOrderUIDArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{25}
}

func (x *TableGroupSortOrderUIDArchive) GetGroupSortRules() []*TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive {
	if x != nil {
		return x.GroupSortRules
	}
	return nil
}

type TableSortOrderArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  *TableSortOrderArchive_SortType          `protobuf:"varint,1,req,name=type,enum=TST.TableSortOrderArchive_SortType" json:"type,omitempty"`
	Rules []*TableSortOrderArchive_SortRuleArchive `protobuf:"bytes,2,rep,name=rules" json:"rules,omitempty"`
}

func (x *TableSortOrderArchive) Reset() {
	*x = TableSortOrderArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableSortOrderArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableSortOrderArchive) ProtoMessage() {}

func (x *TableSortOrderArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableSortOrderArchive.ProtoReflect.Descriptor instead.
func (*TableSortOrderArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{26}
}

func (x *TableSortOrderArchive) GetType() TableSortOrderArchive_SortType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return TableSortOrderArchive_entire_table
}

func (x *TableSortOrderArchive) GetRules() []*TableSortOrderArchive_SortRuleArchive {
	if x != nil {
		return x.Rules
	}
	return nil
}

type TableSortOrderUIDArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  *TableSortOrderUIDArchive_SortType          `protobuf:"varint,1,req,name=type,enum=TST.TableSortOrderUIDArchive_SortType" json:"type,omitempty"`
	Rules []*TableSortOrderUIDArchive_SortRuleArchive `protobuf:"bytes,2,rep,name=rules" json:"rules,omitempty"`
}

func (x *TableSortOrderUIDArchive) Reset() {
	*x = TableSortOrderUIDArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableSortOrderUIDArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableSortOrderUIDArchive) ProtoMessage() {}

func (x *TableSortOrderUIDArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableSortOrderUIDArchive.ProtoReflect.Descriptor instead.
func (*TableSortOrderUIDArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{27}
}

func (x *TableSortOrderUIDArchive) GetType() TableSortOrderUIDArchive_SortType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return TableSortOrderUIDArchive_entire_table
}

func (x *TableSortOrderUIDArchive) GetRules() []*TableSortOrderUIDArchive_SortRuleArchive {
	if x != nil {
		return x.Rules
	}
	return nil
}

type SortRuleReferenceTrackerArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReferenceTracker *Reference `protobuf:"bytes,1,req,name=reference_tracker,json=referenceTracker" json:"reference_tracker,omitempty"`
}

func (x *SortRuleReferenceTrackerArchive) Reset() {
	*x = SortRuleReferenceTrackerArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortRuleReferenceTrackerArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortRuleReferenceTrackerArchive) ProtoMessage() {}

func (x *SortRuleReferenceTrackerArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortRuleReferenceTrackerArchive.ProtoReflect.Descriptor instead.
func (*SortRuleReferenceTrackerArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{28}
}

func (x *SortRuleReferenceTrackerArchive) GetReferenceTracker() *Reference {
	if x != nil {
		return x.ReferenceTracker
	}
	return nil
}

type CellRegion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellRanges []*CellRange `protobuf:"bytes,1,rep,name=cell_ranges,json=cellRanges" json:"cell_ranges,omitempty"`
}

func (x *CellRegion) Reset() {
	*x = CellRegion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellRegion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellRegion) ProtoMessage() {}

func (x *CellRegion) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellRegion.ProtoReflect.Descriptor instead.
func (*CellRegion) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{29}
}

func (x *CellRegion) GetCellRanges() []*CellRange {
	if x != nil {
		return x.CellRanges
	}
	return nil
}

type CellUIDRegionArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellUidRanges []*UUIDRectArchive `protobuf:"bytes,1,rep,name=cell_uid_ranges,json=cellUidRanges" json:"cell_uid_ranges,omitempty"`
}

func (x *CellUIDRegionArchive) Reset() {
	*x = CellUIDRegionArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellUIDRegionArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellUIDRegionArchive) ProtoMessage() {}

func (x *CellUIDRegionArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellUIDRegionArchive.ProtoReflect.Descriptor instead.
func (*CellUIDRegionArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{30}
}

func (x *CellUIDRegionArchive) GetCellUidRanges() []*UUIDRectArchive {
	if x != nil {
		return x.CellUidRanges
	}
	return nil
}

type StructuredTextImportRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImportSettings    *StructuredTextImportSettings `protobuf:"bytes,1,req,name=import_settings,json=importSettings" json:"import_settings,omitempty"`
	ImportSource      *string                       `protobuf:"bytes,2,opt,name=import_source,json=importSource" json:"import_source,omitempty"`
	ImportDate        *float64                      `protobuf:"fixed64,3,opt,name=import_date,json=importDate" json:"import_date,omitempty"`
	SourceData        []byte                        `protobuf:"bytes,4,opt,name=source_data,json=sourceData" json:"source_data,omitempty"`
	SourceEncoding    *uint64                       `protobuf:"varint,5,opt,name=source_encoding,json=sourceEncoding" json:"source_encoding,omitempty"`
	Confidence        *float32                      `protobuf:"fixed32,6,opt,name=confidence" json:"confidence,omitempty"`
	ImportedRegion    *CellRegion                   `protobuf:"bytes,7,opt,name=imported_region,json=importedRegion" json:"imported_region,omitempty"`
	SourceRowCount    *uint64                       `protobuf:"varint,8,opt,name=source_row_count,json=sourceRowCount" json:"source_row_count,omitempty"`
	SourceColumnCount *uint64                       `protobuf:"varint,9,opt,name=source_column_count,json=sourceColumnCount" json:"source_column_count,omitempty"`
}

func (x *StructuredTextImportRecord) Reset() {
	*x = StructuredTextImportRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructuredTextImportRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructuredTextImportRecord) ProtoMessage() {}

func (x *StructuredTextImportRecord) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructuredTextImportRecord.ProtoReflect.Descriptor instead.
func (*StructuredTextImportRecord) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{31}
}

func (x *StructuredTextImportRecord) GetImportSettings() *StructuredTextImportSettings {
	if x != nil {
		return x.ImportSettings
	}
	return nil
}

func (x *StructuredTextImportRecord) GetImportSource() string {
	if x != nil && x.ImportSource != nil {
		return *x.ImportSource
	}
	return ""
}

func (x *StructuredTextImportRecord) GetImportDate() float64 {
	if x != nil && x.ImportDate != nil {
		return *x.ImportDate
	}
	return 0
}

func (x *StructuredTextImportRecord) GetSourceData() []byte {
	if x != nil {
		return x.SourceData
	}
	return nil
}

func (x *StructuredTextImportRecord) GetSourceEncoding() uint64 {
	if x != nil && x.SourceEncoding != nil {
		return *x.SourceEncoding
	}
	return 0
}

func (x *StructuredTextImportRecord) GetConfidence() float32 {
	if x != nil && x.Confidence != nil {
		return *x.Confidence
	}
	return 0
}

func (x *StructuredTextImportRecord) GetImportedRegion() *CellRegion {
	if x != nil {
		return x.ImportedRegion
	}
	return nil
}

func (x *StructuredTextImportRecord) GetSourceRowCount() uint64 {
	if x != nil && x.SourceRowCount != nil {
		return *x.SourceRowCount
	}
	return 0
}

func (x *StructuredTextImportRecord) GetSourceColumnCount() uint64 {
	if x != nil && x.SourceColumnCount != nil {
		return *x.SourceColumnCount
	}
	return 0
}

type TableModelArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId                   *string    `protobuf:"bytes,1,req,name=table_id,json=tableId" json:"table_id,omitempty"`
	FromTableId               *string    `protobuf:"bytes,43,opt,name=from_table_id,json=fromTableId" json:"from_table_id,omitempty"`
	WasCut                    *bool      `protobuf:"varint,50,opt,name=was_cut,json=wasCut" json:"was_cut,omitempty"`
	TableStyle                *Reference `protobuf:"bytes,3,req,name=table_style,json=tableStyle" json:"table_style,omitempty"`
	BodyTextStyle             *Reference `protobuf:"bytes,24,req,name=body_text_style,json=bodyTextStyle" json:"body_text_style,omitempty"`
	HeaderRowTextStyle        *Reference `protobuf:"bytes,25,req,name=header_row_text_style,json=headerRowTextStyle" json:"header_row_text_style,omitempty"`
	HeaderColumnTextStyle     *Reference `protobuf:"bytes,26,req,name=header_column_text_style,json=headerColumnTextStyle" json:"header_column_text_style,omitempty"`
	FooterRowTextStyle        *Reference `protobuf:"bytes,27,req,name=footer_row_text_style,json=footerRowTextStyle" json:"footer_row_text_style,omitempty"`
	BodyCellStyle             *Reference `protobuf:"bytes,18,req,name=body_cell_style,json=bodyCellStyle" json:"body_cell_style,omitempty"`
	HeaderRowStyle            *Reference `protobuf:"bytes,19,req,name=header_row_style,json=headerRowStyle" json:"header_row_style,omitempty"`
	HeaderColumnStyle         *Reference `protobuf:"bytes,20,req,name=header_column_style,json=headerColumnStyle" json:"header_column_style,omitempty"`
	FooterRowStyle            *Reference `protobuf:"bytes,21,req,name=footer_row_style,json=footerRowStyle" json:"footer_row_style,omitempty"`
	TableNameStyle            *Reference `protobuf:"bytes,30,opt,name=table_name_style,json=tableNameStyle" json:"table_name_style,omitempty"`
	TableNameShapeStyle       *Reference `protobuf:"bytes,36,opt,name=table_name_shape_style,json=tableNameShapeStyle" json:"table_name_shape_style,omitempty"`
	TableStylePreset          *Reference `protobuf:"bytes,48,opt,name=table_style_preset,json=tableStylePreset" json:"table_style_preset,omitempty"`
	PresetIndex               *uint32    `protobuf:"varint,28,opt,name=preset_index,json=presetIndex" json:"preset_index,omitempty"`
	BaseDataStore             *DataStore `protobuf:"bytes,4,req,name=base_data_store,json=baseDataStore" json:"base_data_store,omitempty"`
	Provider                  *Reference `protobuf:"bytes,5,opt,name=provider" json:"provider,omitempty"`
	NumberOfRows              *uint32    `protobuf:"varint,6,req,name=number_of_rows,json=numberOfRows" json:"number_of_rows,omitempty"`
	NumberOfColumns           *uint32    `protobuf:"varint,7,req,name=number_of_columns,json=numberOfColumns" json:"number_of_columns,omitempty"`
	TableName                 *string    `protobuf:"bytes,8,req,name=table_name,json=tableName" json:"table_name,omitempty"`
	TableNameEnabled          *bool      `protobuf:"varint,22,opt,name=table_name_enabled,json=tableNameEnabled" json:"table_name_enabled,omitempty"`
	TableNameHeight           *float64   `protobuf:"fixed64,33,opt,name=table_name_height,json=tableNameHeight" json:"table_name_height,omitempty"`
	TableNameBorderEnabled    *bool      `protobuf:"varint,37,opt,name=table_name_border_enabled,json=tableNameBorderEnabled" json:"table_name_border_enabled,omitempty"`
	NumberOfHeaderRows        *uint32    `protobuf:"varint,9,opt,name=number_of_header_rows,json=numberOfHeaderRows" json:"number_of_header_rows,omitempty"`
	NumberOfHeaderColumns     *uint32    `protobuf:"varint,10,opt,name=number_of_header_columns,json=numberOfHeaderColumns" json:"number_of_header_columns,omitempty"`
	NumberOfFooterRows        *uint32    `protobuf:"varint,11,opt,name=number_of_footer_rows,json=numberOfFooterRows" json:"number_of_footer_rows,omitempty"`
	HeaderRowsFrozen          *bool      `protobuf:"varint,12,opt,name=header_rows_frozen,json=headerRowsFrozen" json:"header_rows_frozen,omitempty"`
	HeaderColumnsFrozen       *bool      `protobuf:"varint,13,opt,name=header_columns_frozen,json=headerColumnsFrozen" json:"header_columns_frozen,omitempty"`
	NumberOfHiddenRows        *uint32    `protobuf:"varint,14,opt,name=number_of_hidden_rows,json=numberOfHiddenRows" json:"number_of_hidden_rows,omitempty"`
	NumberOfHiddenColumns     *uint32    `protobuf:"varint,15,opt,name=number_of_hidden_columns,json=numberOfHiddenColumns" json:"number_of_hidden_columns,omitempty"`
	NumberOfUserHiddenRows    *uint32    `protobuf:"varint,41,opt,name=number_of_user_hidden_rows,json=numberOfUserHiddenRows" json:"number_of_user_hidden_rows,omitempty"`
	NumberOfUserHiddenColumns *uint32    `protobuf:"varint,42,opt,name=number_of_user_hidden_columns,json=numberOfUserHiddenColumns" json:"number_of_user_hidden_columns,omitempty"`
	NumberOfFilteredRows      *uint32    `protobuf:"varint,40,opt,name=number_of_filtered_rows,json=numberOfFilteredRows" json:"number_of_filtered_rows,omitempty"`
	DefaultRowHeight          *float64   `protobuf:"fixed64,16,req,name=default_row_height,json=defaultRowHeight" json:"default_row_height,omitempty"`
	DefaultColumnWidth        *float64   `protobuf:"fixed64,17,req,name=default_column_width,json=defaultColumnWidth" json:"default_column_width,omitempty"`
	// Deprecated: Do not use.
	OriginOffset                      *CellID                          `protobuf:"bytes,23,opt,name=origin_offset,json=originOffset" json:"origin_offset,omitempty"`
	RepeatingHeaderRowsEnabled        *bool                            `protobuf:"varint,29,opt,name=repeating_header_rows_enabled,json=repeatingHeaderRowsEnabled" json:"repeating_header_rows_enabled,omitempty"`
	StyleApplyClearsAll               *bool                            `protobuf:"varint,31,opt,name=style_apply_clears_all,json=styleApplyClearsAll" json:"style_apply_clears_all,omitempty"`
	RepeatingHeaderColumnsEnabled     *bool                            `protobuf:"varint,32,opt,name=repeating_header_columns_enabled,json=repeatingHeaderColumnsEnabled" json:"repeating_header_columns_enabled,omitempty"`
	HiddenStateFormulaOwnerForColumns *Reference                       `protobuf:"bytes,34,opt,name=hidden_state_formula_owner_for_columns,json=hiddenStateFormulaOwnerForColumns" json:"hidden_state_formula_owner_for_columns,omitempty"`
	HiddenStateFormulaOwnerForRows    *Reference                       `protobuf:"bytes,35,opt,name=hidden_state_formula_owner_for_rows,json=hiddenStateFormulaOwnerForRows" json:"hidden_state_formula_owner_for_rows,omitempty"`
	RowFilterSetPrePivot              *Reference                       `protobuf:"bytes,38,opt,name=row_filter_set_pre_pivot,json=rowFilterSetPrePivot" json:"row_filter_set_pre_pivot,omitempty"`
	ConditionalStyleFormulaOwnerId    *CFUUIDArchive                   `protobuf:"bytes,39,opt,name=conditional_style_formula_owner_id,json=conditionalStyleFormulaOwnerId" json:"conditional_style_formula_owner_id,omitempty"`
	SortOrder                         *TableSortOrderArchive           `protobuf:"bytes,44,opt,name=sort_order,json=sortOrder" json:"sort_order,omitempty"`
	SortRuleReferenceTracker          *SortRuleReferenceTrackerArchive `protobuf:"bytes,45,opt,name=sort_rule_reference_tracker,json=sortRuleReferenceTracker" json:"sort_rule_reference_tracker,omitempty"`
	BaseColumnRowUids                 *Reference                       `protobuf:"bytes,46,opt,name=base_column_row_uids,json=baseColumnRowUids" json:"base_column_row_uids,omitempty"`
	MergeOwner                        *MergeOwnerArchive               `protobuf:"bytes,47,opt,name=merge_owner,json=mergeOwner" json:"merge_owner,omitempty"`
	StrokeSidecar                     *Reference                       `protobuf:"bytes,49,opt,name=stroke_sidecar,json=strokeSidecar" json:"stroke_sidecar,omitempty"`
	PresetNeedsStrongOwnership        *bool                            `protobuf:"varint,51,opt,name=preset_needs_strong_ownership,json=presetNeedsStrongOwnership" json:"preset_needs_strong_ownership,omitempty"`
	TextImportRecord                  *StructuredTextImportRecord      `protobuf:"bytes,52,opt,name=text_import_record,json=textImportRecord" json:"text_import_record,omitempty"`
	CategoryLevel_1Style              *Reference                       `protobuf:"bytes,60,opt,name=category_level_1_style,json=categoryLevel1Style" json:"category_level_1_style,omitempty"`
	CategoryLevel_2Style              *Reference                       `protobuf:"bytes,61,opt,name=category_level_2_style,json=categoryLevel2Style" json:"category_level_2_style,omitempty"`
	CategoryLevel_3Style              *Reference                       `protobuf:"bytes,62,opt,name=category_level_3_style,json=categoryLevel3Style" json:"category_level_3_style,omitempty"`
	CategoryLevel_4Style              *Reference                       `protobuf:"bytes,63,opt,name=category_level_4_style,json=categoryLevel4Style" json:"category_level_4_style,omitempty"`
	CategoryLevel_5Style              *Reference                       `protobuf:"bytes,64,opt,name=category_level_5_style,json=categoryLevel5Style" json:"category_level_5_style,omitempty"`
	CategoryLevel_1TextStyle          *Reference                       `protobuf:"bytes,65,opt,name=category_level_1_text_style,json=categoryLevel1TextStyle" json:"category_level_1_text_style,omitempty"`
	CategoryLevel_2TextStyle          *Reference                       `protobuf:"bytes,66,opt,name=category_level_2_text_style,json=categoryLevel2TextStyle" json:"category_level_2_text_style,omitempty"`
	CategoryLevel_3TextStyle          *Reference                       `protobuf:"bytes,67,opt,name=category_level_3_text_style,json=categoryLevel3TextStyle" json:"category_level_3_text_style,omitempty"`
	CategoryLevel_4TextStyle          *Reference                       `protobuf:"bytes,68,opt,name=category_level_4_text_style,json=categoryLevel4TextStyle" json:"category_level_4_text_style,omitempty"`
	CategoryLevel_5TextStyle          *Reference                       `protobuf:"bytes,69,opt,name=category_level_5_text_style,json=categoryLevel5TextStyle" json:"category_level_5_text_style,omitempty"`
	HiddenStatesOwner                 *HiddenStatesOwnerArchive        `protobuf:"bytes,70,opt,name=hidden_states_owner,json=hiddenStatesOwner" json:"hidden_states_owner,omitempty"`
	LabelLevel_1Style                 *Reference                       `protobuf:"bytes,71,opt,name=label_level_1_style,json=labelLevel1Style" json:"label_level_1_style,omitempty"`
	LabelLevel_2Style                 *Reference                       `protobuf:"bytes,72,opt,name=label_level_2_style,json=labelLevel2Style" json:"label_level_2_style,omitempty"`
	LabelLevel_3Style                 *Reference                       `protobuf:"bytes,73,opt,name=label_level_3_style,json=labelLevel3Style" json:"label_level_3_style,omitempty"`
	LabelLevel_4Style                 *Reference                       `protobuf:"bytes,74,opt,name=label_level_4_style,json=labelLevel4Style" json:"label_level_4_style,omitempty"`
	LabelLevel_5Style                 *Reference                       `protobuf:"bytes,75,opt,name=label_level_5_style,json=labelLevel5Style" json:"label_level_5_style,omitempty"`
	LabelLevel_1TextStyle             *Reference                       `protobuf:"bytes,76,opt,name=label_level_1_text_style,json=labelLevel1TextStyle" json:"label_level_1_text_style,omitempty"`
	LabelLevel_2TextStyle             *Reference                       `protobuf:"bytes,77,opt,name=label_level_2_text_style,json=labelLevel2TextStyle" json:"label_level_2_text_style,omitempty"`
	LabelLevel_3TextStyle             *Reference                       `protobuf:"bytes,78,opt,name=label_level_3_text_style,json=labelLevel3TextStyle" json:"label_level_3_text_style,omitempty"`
	LabelLevel_4TextStyle             *Reference                       `protobuf:"bytes,79,opt,name=label_level_4_text_style,json=labelLevel4TextStyle" json:"label_level_4_text_style,omitempty"`
	LabelLevel_5TextStyle             *Reference                       `protobuf:"bytes,80,opt,name=label_level_5_text_style,json=labelLevel5TextStyle" json:"label_level_5_text_style,omitempty"`
	CategoryOwnerDeprecated           *CategoryOwnerArchive            `protobuf:"bytes,81,opt,name=category_owner_deprecated,json=categoryOwnerDeprecated" json:"category_owner_deprecated,omitempty"`
	PencilAnnotationOwner             *PencilAnnotationOwnerArchive    `protobuf:"bytes,82,opt,name=pencil_annotation_owner,json=pencilAnnotationOwner" json:"pencil_annotation_owner,omitempty"`
	FromGroupByUid                    *string                          `protobuf:"bytes,83,opt,name=from_group_by_uid,json=fromGroupByUid" json:"from_group_by_uid,omitempty"`
	HauntedOwner                      *HauntedOwnerArchive             `protobuf:"bytes,84,opt,name=haunted_owner,json=hauntedOwner" json:"haunted_owner,omitempty"`
	PivotOwner                        *Reference                       `protobuf:"bytes,85,opt,name=pivot_owner,json=pivotOwner" json:"pivot_owner,omitempty"`
	CategoryOwner                     *Reference                       `protobuf:"bytes,86,opt,name=category_owner,json=categoryOwner" json:"category_owner,omitempty"`
	PivotBodySummaryRowStyle          *Reference                       `protobuf:"bytes,87,opt,name=pivot_body_summary_row_style,json=pivotBodySummaryRowStyle" json:"pivot_body_summary_row_style,omitempty"`
	PivotBodySummaryColumnStyle       *Reference                       `protobuf:"bytes,88,opt,name=pivot_body_summary_column_style,json=pivotBodySummaryColumnStyle" json:"pivot_body_summary_column_style,omitempty"`
	PivotHeaderColumnSummaryStyle     *Reference                       `protobuf:"bytes,89,opt,name=pivot_header_column_summary_style,json=pivotHeaderColumnSummaryStyle" json:"pivot_header_column_summary_style,omitempty"`
	PivotValueTypesByCol              []uint32                         `protobuf:"varint,90,rep,name=pivot_value_types_by_col,json=pivotValueTypesByCol" json:"pivot_value_types_by_col,omitempty"`
	PivotDateGroupingColumns          []uint32                         `protobuf:"varint,91,rep,name=pivot_date_grouping_columns,json=pivotDateGroupingColumns" json:"pivot_date_grouping_columns,omitempty"`
	PivotDateGroupingTypes            []uint32                         `protobuf:"varint,92,rep,name=pivot_date_grouping_types,json=pivotDateGroupingTypes" json:"pivot_date_grouping_types,omitempty"`
}

func (x *TableModelArchive) Reset() {
	*x = TableModelArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableModelArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableModelArchive) ProtoMessage() {}

func (x *TableModelArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableModelArchive.ProtoReflect.Descriptor instead.
func (*TableModelArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{32}
}

func (x *TableModelArchive) GetTableId() string {
	if x != nil && x.TableId != nil {
		return *x.TableId
	}
	return ""
}

func (x *TableModelArchive) GetFromTableId() string {
	if x != nil && x.FromTableId != nil {
		return *x.FromTableId
	}
	return ""
}

func (x *TableModelArchive) GetWasCut() bool {
	if x != nil && x.WasCut != nil {
		return *x.WasCut
	}
	return false
}

func (x *TableModelArchive) GetTableStyle() *Reference {
	if x != nil {
		return x.TableStyle
	}
	return nil
}

func (x *TableModelArchive) GetBodyTextStyle() *Reference {
	if x != nil {
		return x.BodyTextStyle
	}
	return nil
}

func (x *TableModelArchive) GetHeaderRowTextStyle() *Reference {
	if x != nil {
		return x.HeaderRowTextStyle
	}
	return nil
}

func (x *TableModelArchive) GetHeaderColumnTextStyle() *Reference {
	if x != nil {
		return x.HeaderColumnTextStyle
	}
	return nil
}

func (x *TableModelArchive) GetFooterRowTextStyle() *Reference {
	if x != nil {
		return x.FooterRowTextStyle
	}
	return nil
}

func (x *TableModelArchive) GetBodyCellStyle() *Reference {
	if x != nil {
		return x.BodyCellStyle
	}
	return nil
}

func (x *TableModelArchive) GetHeaderRowStyle() *Reference {
	if x != nil {
		return x.HeaderRowStyle
	}
	return nil
}

func (x *TableModelArchive) GetHeaderColumnStyle() *Reference {
	if x != nil {
		return x.HeaderColumnStyle
	}
	return nil
}

func (x *TableModelArchive) GetFooterRowStyle() *Reference {
	if x != nil {
		return x.FooterRowStyle
	}
	return nil
}

func (x *TableModelArchive) GetTableNameStyle() *Reference {
	if x != nil {
		return x.TableNameStyle
	}
	return nil
}

func (x *TableModelArchive) GetTableNameShapeStyle() *Reference {
	if x != nil {
		return x.TableNameShapeStyle
	}
	return nil
}

func (x *TableModelArchive) GetTableStylePreset() *Reference {
	if x != nil {
		return x.TableStylePreset
	}
	return nil
}

func (x *TableModelArchive) GetPresetIndex() uint32 {
	if x != nil && x.PresetIndex != nil {
		return *x.PresetIndex
	}
	return 0
}

func (x *TableModelArchive) GetBaseDataStore() *DataStore {
	if x != nil {
		return x.BaseDataStore
	}
	return nil
}

func (x *TableModelArchive) GetProvider() *Reference {
	if x != nil {
		return x.Provider
	}
	return nil
}

func (x *TableModelArchive) GetNumberOfRows() uint32 {
	if x != nil && x.NumberOfRows != nil {
		return *x.NumberOfRows
	}
	return 0
}

func (x *TableModelArchive) GetNumberOfColumns() uint32 {
	if x != nil && x.NumberOfColumns != nil {
		return *x.NumberOfColumns
	}
	return 0
}

func (x *TableModelArchive) GetTableName() string {
	if x != nil && x.TableName != nil {
		return *x.TableName
	}
	return ""
}

func (x *TableModelArchive) GetTableNameEnabled() bool {
	if x != nil && x.TableNameEnabled != nil {
		return *x.TableNameEnabled
	}
	return false
}

func (x *TableModelArchive) GetTableNameHeight() float64 {
	if x != nil && x.TableNameHeight != nil {
		return *x.TableNameHeight
	}
	return 0
}

func (x *TableModelArchive) GetTableNameBorderEnabled() bool {
	if x != nil && x.TableNameBorderEnabled != nil {
		return *x.TableNameBorderEnabled
	}
	return false
}

func (x *TableModelArchive) GetNumberOfHeaderRows() uint32 {
	if x != nil && x.NumberOfHeaderRows != nil {
		return *x.NumberOfHeaderRows
	}
	return 0
}

func (x *TableModelArchive) GetNumberOfHeaderColumns() uint32 {
	if x != nil && x.NumberOfHeaderColumns != nil {
		return *x.NumberOfHeaderColumns
	}
	return 0
}

func (x *TableModelArchive) GetNumberOfFooterRows() uint32 {
	if x != nil && x.NumberOfFooterRows != nil {
		return *x.NumberOfFooterRows
	}
	return 0
}

func (x *TableModelArchive) GetHeaderRowsFrozen() bool {
	if x != nil && x.HeaderRowsFrozen != nil {
		return *x.HeaderRowsFrozen
	}
	return false
}

func (x *TableModelArchive) GetHeaderColumnsFrozen() bool {
	if x != nil && x.HeaderColumnsFrozen != nil {
		return *x.HeaderColumnsFrozen
	}
	return false
}

func (x *TableModelArchive) GetNumberOfHiddenRows() uint32 {
	if x != nil && x.NumberOfHiddenRows != nil {
		return *x.NumberOfHiddenRows
	}
	return 0
}

func (x *TableModelArchive) GetNumberOfHiddenColumns() uint32 {
	if x != nil && x.NumberOfHiddenColumns != nil {
		return *x.NumberOfHiddenColumns
	}
	return 0
}

func (x *TableModelArchive) GetNumberOfUserHiddenRows() uint32 {
	if x != nil && x.NumberOfUserHiddenRows != nil {
		return *x.NumberOfUserHiddenRows
	}
	return 0
}

func (x *TableModelArchive) GetNumberOfUserHiddenColumns() uint32 {
	if x != nil && x.NumberOfUserHiddenColumns != nil {
		return *x.NumberOfUserHiddenColumns
	}
	return 0
}

func (x *TableModelArchive) GetNumberOfFilteredRows() uint32 {
	if x != nil && x.NumberOfFilteredRows != nil {
		return *x.NumberOfFilteredRows
	}
	return 0
}

func (x *TableModelArchive) GetDefaultRowHeight() float64 {
	if x != nil && x.DefaultRowHeight != nil {
		return *x.DefaultRowHeight
	}
	return 0
}

func (x *TableModelArchive) GetDefaultColumnWidth() float64 {
	if x != nil && x.DefaultColumnWidth != nil {
		return *x.DefaultColumnWidth
	}
	return 0
}

// Deprecated: Do not use.
func (x *TableModelArchive) GetOriginOffset() *CellID {
	if x != nil {
		return x.OriginOffset
	}
	return nil
}

func (x *TableModelArchive) GetRepeatingHeaderRowsEnabled() bool {
	if x != nil && x.RepeatingHeaderRowsEnabled != nil {
		return *x.RepeatingHeaderRowsEnabled
	}
	return false
}

func (x *TableModelArchive) GetStyleApplyClearsAll() bool {
	if x != nil && x.StyleApplyClearsAll != nil {
		return *x.StyleApplyClearsAll
	}
	return false
}

func (x *TableModelArchive) GetRepeatingHeaderColumnsEnabled() bool {
	if x != nil && x.RepeatingHeaderColumnsEnabled != nil {
		return *x.RepeatingHeaderColumnsEnabled
	}
	return false
}

func (x *TableModelArchive) GetHiddenStateFormulaOwnerForColumns() *Reference {
	if x != nil {
		return x.HiddenStateFormulaOwnerForColumns
	}
	return nil
}

func (x *TableModelArchive) GetHiddenStateFormulaOwnerForRows() *Reference {
	if x != nil {
		return x.HiddenStateFormulaOwnerForRows
	}
	return nil
}

func (x *TableModelArchive) GetRowFilterSetPrePivot() *Reference {
	if x != nil {
		return x.RowFilterSetPrePivot
	}
	return nil
}

func (x *TableModelArchive) GetConditionalStyleFormulaOwnerId() *CFUUIDArchive {
	if x != nil {
		return x.ConditionalStyleFormulaOwnerId
	}
	return nil
}

func (x *TableModelArchive) GetSortOrder() *TableSortOrderArchive {
	if x != nil {
		return x.SortOrder
	}
	return nil
}

func (x *TableModelArchive) GetSortRuleReferenceTracker() *SortRuleReferenceTrackerArchive {
	if x != nil {
		return x.SortRuleReferenceTracker
	}
	return nil
}

func (x *TableModelArchive) GetBaseColumnRowUids() *Reference {
	if x != nil {
		return x.BaseColumnRowUids
	}
	return nil
}

func (x *TableModelArchive) GetMergeOwner() *MergeOwnerArchive {
	if x != nil {
		return x.MergeOwner
	}
	return nil
}

func (x *TableModelArchive) GetStrokeSidecar() *Reference {
	if x != nil {
		return x.StrokeSidecar
	}
	return nil
}

func (x *TableModelArchive) GetPresetNeedsStrongOwnership() bool {
	if x != nil && x.PresetNeedsStrongOwnership != nil {
		return *x.PresetNeedsStrongOwnership
	}
	return false
}

func (x *TableModelArchive) GetTextImportRecord() *StructuredTextImportRecord {
	if x != nil {
		return x.TextImportRecord
	}
	return nil
}

func (x *TableModelArchive) GetCategoryLevel_1Style() *Reference {
	if x != nil {
		return x.CategoryLevel_1Style
	}
	return nil
}

func (x *TableModelArchive) GetCategoryLevel_2Style() *Reference {
	if x != nil {
		return x.CategoryLevel_2Style
	}
	return nil
}

func (x *TableModelArchive) GetCategoryLevel_3Style() *Reference {
	if x != nil {
		return x.CategoryLevel_3Style
	}
	return nil
}

func (x *TableModelArchive) GetCategoryLevel_4Style() *Reference {
	if x != nil {
		return x.CategoryLevel_4Style
	}
	return nil
}

func (x *TableModelArchive) GetCategoryLevel_5Style() *Reference {
	if x != nil {
		return x.CategoryLevel_5Style
	}
	return nil
}

func (x *TableModelArchive) GetCategoryLevel_1TextStyle() *Reference {
	if x != nil {
		return x.CategoryLevel_1TextStyle
	}
	return nil
}

func (x *TableModelArchive) GetCategoryLevel_2TextStyle() *Reference {
	if x != nil {
		return x.CategoryLevel_2TextStyle
	}
	return nil
}

func (x *TableModelArchive) GetCategoryLevel_3TextStyle() *Reference {
	if x != nil {
		return x.CategoryLevel_3TextStyle
	}
	return nil
}

func (x *TableModelArchive) GetCategoryLevel_4TextStyle() *Reference {
	if x != nil {
		return x.CategoryLevel_4TextStyle
	}
	return nil
}

func (x *TableModelArchive) GetCategoryLevel_5TextStyle() *Reference {
	if x != nil {
		return x.CategoryLevel_5TextStyle
	}
	return nil
}

func (x *TableModelArchive) GetHiddenStatesOwner() *HiddenStatesOwnerArchive {
	if x != nil {
		return x.HiddenStatesOwner
	}
	return nil
}

func (x *TableModelArchive) GetLabelLevel_1Style() *Reference {
	if x != nil {
		return x.LabelLevel_1Style
	}
	return nil
}

func (x *TableModelArchive) GetLabelLevel_2Style() *Reference {
	if x != nil {
		return x.LabelLevel_2Style
	}
	return nil
}

func (x *TableModelArchive) GetLabelLevel_3Style() *Reference {
	if x != nil {
		return x.LabelLevel_3Style
	}
	return nil
}

func (x *TableModelArchive) GetLabelLevel_4Style() *Reference {
	if x != nil {
		return x.LabelLevel_4Style
	}
	return nil
}

func (x *TableModelArchive) GetLabelLevel_5Style() *Reference {
	if x != nil {
		return x.LabelLevel_5Style
	}
	return nil
}

func (x *TableModelArchive) GetLabelLevel_1TextStyle() *Reference {
	if x != nil {
		return x.LabelLevel_1TextStyle
	}
	return nil
}

func (x *TableModelArchive) GetLabelLevel_2TextStyle() *Reference {
	if x != nil {
		return x.LabelLevel_2TextStyle
	}
	return nil
}

func (x *TableModelArchive) GetLabelLevel_3TextStyle() *Reference {
	if x != nil {
		return x.LabelLevel_3TextStyle
	}
	return nil
}

func (x *TableModelArchive) GetLabelLevel_4TextStyle() *Reference {
	if x != nil {
		return x.LabelLevel_4TextStyle
	}
	return nil
}

func (x *TableModelArchive) GetLabelLevel_5TextStyle() *Reference {
	if x != nil {
		return x.LabelLevel_5TextStyle
	}
	return nil
}

func (x *TableModelArchive) GetCategoryOwnerDeprecated() *CategoryOwnerArchive {
	if x != nil {
		return x.CategoryOwnerDeprecated
	}
	return nil
}

func (x *TableModelArchive) GetPencilAnnotationOwner() *PencilAnnotationOwnerArchive {
	if x != nil {
		return x.PencilAnnotationOwner
	}
	return nil
}

func (x *TableModelArchive) GetFromGroupByUid() string {
	if x != nil && x.FromGroupByUid != nil {
		return *x.FromGroupByUid
	}
	return ""
}

func (x *TableModelArchive) GetHauntedOwner() *HauntedOwnerArchive {
	if x != nil {
		return x.HauntedOwner
	}
	return nil
}

func (x *TableModelArchive) GetPivotOwner() *Reference {
	if x != nil {
		return x.PivotOwner
	}
	return nil
}

func (x *TableModelArchive) GetCategoryOwner() *Reference {
	if x != nil {
		return x.CategoryOwner
	}
	return nil
}

func (x *TableModelArchive) GetPivotBodySummaryRowStyle() *Reference {
	if x != nil {
		return x.PivotBodySummaryRowStyle
	}
	return nil
}

func (x *TableModelArchive) GetPivotBodySummaryColumnStyle() *Reference {
	if x != nil {
		return x.PivotBodySummaryColumnStyle
	}
	return nil
}

func (x *TableModelArchive) GetPivotHeaderColumnSummaryStyle() *Reference {
	if x != nil {
		return x.PivotHeaderColumnSummaryStyle
	}
	return nil
}

func (x *TableModelArchive) GetPivotValueTypesByCol() []uint32 {
	if x != nil {
		return x.PivotValueTypesByCol
	}
	return nil
}

func (x *TableModelArchive) GetPivotDateGroupingColumns() []uint32 {
	if x != nil {
		return x.PivotDateGroupingColumns
	}
	return nil
}

func (x *TableModelArchive) GetPivotDateGroupingTypes() []uint32 {
	if x != nil {
		return x.PivotDateGroupingTypes
	}
	return nil
}

type SummaryModelArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableInfo                 *Reference `protobuf:"bytes,1,req,name=table_info,json=tableInfo" json:"table_info,omitempty"`
	DataStore                 *DataStore `protobuf:"bytes,2,opt,name=data_store,json=dataStore" json:"data_store,omitempty"`
	ColumnRowUids             *Reference `protobuf:"bytes,3,opt,name=column_row_uids,json=columnRowUids" json:"column_row_uids,omitempty"`
	AggregateFormulaOwnerUuid *UUID      `protobuf:"bytes,4,opt,name=aggregate_formula_owner_uuid,json=aggregateFormulaOwnerUuid" json:"aggregate_formula_owner_uuid,omitempty"`
	SummaryCellVendor         *Reference `protobuf:"bytes,5,opt,name=summary_cell_vendor,json=summaryCellVendor" json:"summary_cell_vendor,omitempty"`
	CategoryColumnWidth       *float64   `protobuf:"fixed64,10,opt,name=category_column_width,json=categoryColumnWidth" json:"category_column_width,omitempty"`
	// Deprecated: Do not use.
	SummaryRowLevel_1Height *float64 `protobuf:"fixed64,11,opt,name=summary_row_level_1_height,json=summaryRowLevel1Height" json:"summary_row_level_1_height,omitempty"`
	// Deprecated: Do not use.
	SummaryRowLevel_2Height *float64 `protobuf:"fixed64,12,opt,name=summary_row_level_2_height,json=summaryRowLevel2Height" json:"summary_row_level_2_height,omitempty"`
	// Deprecated: Do not use.
	SummaryRowLevel_3Height *float64 `protobuf:"fixed64,13,opt,name=summary_row_level_3_height,json=summaryRowLevel3Height" json:"summary_row_level_3_height,omitempty"`
	// Deprecated: Do not use.
	SummaryRowLevel_4Height *float64 `protobuf:"fixed64,14,opt,name=summary_row_level_4_height,json=summaryRowLevel4Height" json:"summary_row_level_4_height,omitempty"`
	// Deprecated: Do not use.
	SummaryRowLevel_5Height *float64 `protobuf:"fixed64,15,opt,name=summary_row_level_5_height,json=summaryRowLevel5Height" json:"summary_row_level_5_height,omitempty"`
	// Deprecated: Do not use.
	SummaryLabelRowLevel_1Height *float64 `protobuf:"fixed64,16,opt,name=summary_label_row_level_1_height,json=summaryLabelRowLevel1Height" json:"summary_label_row_level_1_height,omitempty"`
	// Deprecated: Do not use.
	SummaryLabelRowLevel_2Height *float64 `protobuf:"fixed64,17,opt,name=summary_label_row_level_2_height,json=summaryLabelRowLevel2Height" json:"summary_label_row_level_2_height,omitempty"`
	// Deprecated: Do not use.
	SummaryLabelRowLevel_3Height *float64 `protobuf:"fixed64,18,opt,name=summary_label_row_level_3_height,json=summaryLabelRowLevel3Height" json:"summary_label_row_level_3_height,omitempty"`
	// Deprecated: Do not use.
	SummaryLabelRowLevel_4Height *float64 `protobuf:"fixed64,19,opt,name=summary_label_row_level_4_height,json=summaryLabelRowLevel4Height" json:"summary_label_row_level_4_height,omitempty"`
	// Deprecated: Do not use.
	SummaryLabelRowLevel_5Height *float64 `protobuf:"fixed64,20,opt,name=summary_label_row_level_5_height,json=summaryLabelRowLevel5Height" json:"summary_label_row_level_5_height,omitempty"`
	// Deprecated: Do not use.
	LabelRowVisibility_1 *uint32 `protobuf:"varint,21,opt,name=label_row_visibility_1,json=labelRowVisibility1" json:"label_row_visibility_1,omitempty"`
	// Deprecated: Do not use.
	LabelRowVisibility_2 *uint32 `protobuf:"varint,22,opt,name=label_row_visibility_2,json=labelRowVisibility2" json:"label_row_visibility_2,omitempty"`
	// Deprecated: Do not use.
	LabelRowVisibility_3 *uint32 `protobuf:"varint,23,opt,name=label_row_visibility_3,json=labelRowVisibility3" json:"label_row_visibility_3,omitempty"`
	// Deprecated: Do not use.
	LabelRowVisibility_4 *uint32 `protobuf:"varint,24,opt,name=label_row_visibility_4,json=labelRowVisibility4" json:"label_row_visibility_4,omitempty"`
	// Deprecated: Do not use.
	LabelRowVisibility_5   *uint32                        `protobuf:"varint,25,opt,name=label_row_visibility_5,json=labelRowVisibility5" json:"label_row_visibility_5,omitempty"`
	SummaryRowHeightList   []float64                      `protobuf:"fixed64,26,rep,name=summary_row_height_list,json=summaryRowHeightList" json:"summary_row_height_list,omitempty"`
	LabelRowHeightList     []float64                      `protobuf:"fixed64,27,rep,name=label_row_height_list,json=labelRowHeightList" json:"label_row_height_list,omitempty"`
	LabelRowVisibilityList []uint32                       `protobuf:"varint,28,rep,name=label_row_visibility_list,json=labelRowVisibilityList" json:"label_row_visibility_list,omitempty"`
	GroupSortOrder         *TableGroupSortOrderUIDArchive `protobuf:"bytes,29,opt,name=group_sort_order,json=groupSortOrder" json:"group_sort_order,omitempty"`
}

func (x *SummaryModelArchive) Reset() {
	*x = SummaryModelArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummaryModelArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummaryModelArchive) ProtoMessage() {}

func (x *SummaryModelArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummaryModelArchive.ProtoReflect.Descriptor instead.
func (*SummaryModelArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{33}
}

func (x *SummaryModelArchive) GetTableInfo() *Reference {
	if x != nil {
		return x.TableInfo
	}
	return nil
}

func (x *SummaryModelArchive) GetDataStore() *DataStore {
	if x != nil {
		return x.DataStore
	}
	return nil
}

func (x *SummaryModelArchive) GetColumnRowUids() *Reference {
	if x != nil {
		return x.ColumnRowUids
	}
	return nil
}

func (x *SummaryModelArchive) GetAggregateFormulaOwnerUuid() *UUID {
	if x != nil {
		return x.AggregateFormulaOwnerUuid
	}
	return nil
}

func (x *SummaryModelArchive) GetSummaryCellVendor() *Reference {
	if x != nil {
		return x.SummaryCellVendor
	}
	return nil
}

func (x *SummaryModelArchive) GetCategoryColumnWidth() float64 {
	if x != nil && x.CategoryColumnWidth != nil {
		return *x.CategoryColumnWidth
	}
	return 0
}

// Deprecated: Do not use.
func (x *SummaryModelArchive) GetSummaryRowLevel_1Height() float64 {
	if x != nil && x.SummaryRowLevel_1Height != nil {
		return *x.SummaryRowLevel_1Height
	}
	return 0
}

// Deprecated: Do not use.
func (x *SummaryModelArchive) GetSummaryRowLevel_2Height() float64 {
	if x != nil && x.SummaryRowLevel_2Height != nil {
		return *x.SummaryRowLevel_2Height
	}
	return 0
}

// Deprecated: Do not use.
func (x *SummaryModelArchive) GetSummaryRowLevel_3Height() float64 {
	if x != nil && x.SummaryRowLevel_3Height != nil {
		return *x.SummaryRowLevel_3Height
	}
	return 0
}

// Deprecated: Do not use.
func (x *SummaryModelArchive) GetSummaryRowLevel_4Height() float64 {
	if x != nil && x.SummaryRowLevel_4Height != nil {
		return *x.SummaryRowLevel_4Height
	}
	return 0
}

// Deprecated: Do not use.
func (x *SummaryModelArchive) GetSummaryRowLevel_5Height() float64 {
	if x != nil && x.SummaryRowLevel_5Height != nil {
		return *x.SummaryRowLevel_5Height
	}
	return 0
}

// Deprecated: Do not use.
func (x *SummaryModelArchive) GetSummaryLabelRowLevel_1Height() float64 {
	if x != nil && x.SummaryLabelRowLevel_1Height != nil {
		return *x.SummaryLabelRowLevel_1Height
	}
	return 0
}

// Deprecated: Do not use.
func (x *SummaryModelArchive) GetSummaryLabelRowLevel_2Height() float64 {
	if x != nil && x.SummaryLabelRowLevel_2Height != nil {
		return *x.SummaryLabelRowLevel_2Height
	}
	return 0
}

// Deprecated: Do not use.
func (x *SummaryModelArchive) GetSummaryLabelRowLevel_3Height() float64 {
	if x != nil && x.SummaryLabelRowLevel_3Height != nil {
		return *x.SummaryLabelRowLevel_3Height
	}
	return 0
}

// Deprecated: Do not use.
func (x *SummaryModelArchive) GetSummaryLabelRowLevel_4Height() float64 {
	if x != nil && x.SummaryLabelRowLevel_4Height != nil {
		return *x.SummaryLabelRowLevel_4Height
	}
	return 0
}

// Deprecated: Do not use.
func (x *SummaryModelArchive) GetSummaryLabelRowLevel_5Height() float64 {
	if x != nil && x.SummaryLabelRowLevel_5Height != nil {
		return *x.SummaryLabelRowLevel_5Height
	}
	return 0
}

// Deprecated: Do not use.
func (x *SummaryModelArchive) GetLabelRowVisibility_1() uint32 {
	if x != nil && x.LabelRowVisibility_1 != nil {
		return *x.LabelRowVisibility_1
	}
	return 0
}

// Deprecated: Do not use.
func (x *SummaryModelArchive) GetLabelRowVisibility_2() uint32 {
	if x != nil && x.LabelRowVisibility_2 != nil {
		return *x.LabelRowVisibility_2
	}
	return 0
}

// Deprecated: Do not use.
func (x *SummaryModelArchive) GetLabelRowVisibility_3() uint32 {
	if x != nil && x.LabelRowVisibility_3 != nil {
		return *x.LabelRowVisibility_3
	}
	return 0
}

// Deprecated: Do not use.
func (x *SummaryModelArchive) GetLabelRowVisibility_4() uint32 {
	if x != nil && x.LabelRowVisibility_4 != nil {
		return *x.LabelRowVisibility_4
	}
	return 0
}

// Deprecated: Do not use.
func (x *SummaryModelArchive) GetLabelRowVisibility_5() uint32 {
	if x != nil && x.LabelRowVisibility_5 != nil {
		return *x.LabelRowVisibility_5
	}
	return 0
}

func (x *SummaryModelArchive) GetSummaryRowHeightList() []float64 {
	if x != nil {
		return x.SummaryRowHeightList
	}
	return nil
}

func (x *SummaryModelArchive) GetLabelRowHeightList() []float64 {
	if x != nil {
		return x.LabelRowHeightList
	}
	return nil
}

func (x *SummaryModelArchive) GetLabelRowVisibilityList() []uint32 {
	if x != nil {
		return x.LabelRowVisibilityList
	}
	return nil
}

func (x *SummaryModelArchive) GetGroupSortOrder() *TableGroupSortOrderUIDArchive {
	if x != nil {
		return x.GroupSortOrder
	}
	return nil
}

type SummaryModelGroupByChangeStateArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellMap                *Reference `protobuf:"bytes,1,opt,name=cell_map,json=cellMap" json:"cell_map,omitempty"`
	SummaryRowHeightList   []float64  `protobuf:"fixed64,2,rep,name=summary_row_height_list,json=summaryRowHeightList" json:"summary_row_height_list,omitempty"`
	LabelRowHeightList     []float64  `protobuf:"fixed64,3,rep,name=label_row_height_list,json=labelRowHeightList" json:"label_row_height_list,omitempty"`
	LabelRowVisibilityList []uint32   `protobuf:"varint,4,rep,name=label_row_visibility_list,json=labelRowVisibilityList" json:"label_row_visibility_list,omitempty"`
}

func (x *SummaryModelGroupByChangeStateArchive) Reset() {
	*x = SummaryModelGroupByChangeStateArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummaryModelGroupByChangeStateArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummaryModelGroupByChangeStateArchive) ProtoMessage() {}

func (x *SummaryModelGroupByChangeStateArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummaryModelGroupByChangeStateArchive.ProtoReflect.Descriptor instead.
func (*SummaryModelGroupByChangeStateArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{34}
}

func (x *SummaryModelGroupByChangeStateArchive) GetCellMap() *Reference {
	if x != nil {
		return x.CellMap
	}
	return nil
}

func (x *SummaryModelGroupByChangeStateArchive) GetSummaryRowHeightList() []float64 {
	if x != nil {
		return x.SummaryRowHeightList
	}
	return nil
}

func (x *SummaryModelGroupByChangeStateArchive) GetLabelRowHeightList() []float64 {
	if x != nil {
		return x.LabelRowHeightList
	}
	return nil
}

func (x *SummaryModelGroupByChangeStateArchive) GetLabelRowVisibilityList() []uint32 {
	if x != nil {
		return x.LabelRowVisibilityList
	}
	return nil
}

type ColumnRowUIDMapArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SortedColumnUids  []*UUID  `protobuf:"bytes,1,rep,name=sorted_column_uids,json=sortedColumnUids" json:"sorted_column_uids,omitempty"`
	ColumnIndexForUid []uint32 `protobuf:"varint,2,rep,name=column_index_for_uid,json=columnIndexForUid" json:"column_index_for_uid,omitempty"`
	ColumnUidForIndex []uint32 `protobuf:"varint,3,rep,name=column_uid_for_index,json=columnUidForIndex" json:"column_uid_for_index,omitempty"`
	SortedRowUids     []*UUID  `protobuf:"bytes,4,rep,name=sorted_row_uids,json=sortedRowUids" json:"sorted_row_uids,omitempty"`
	RowIndexForUid    []uint32 `protobuf:"varint,5,rep,name=row_index_for_uid,json=rowIndexForUid" json:"row_index_for_uid,omitempty"`
	RowUidForIndex    []uint32 `protobuf:"varint,6,rep,name=row_uid_for_index,json=rowUidForIndex" json:"row_uid_for_index,omitempty"`
}

func (x *ColumnRowUIDMapArchive) Reset() {
	*x = ColumnRowUIDMapArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnRowUIDMapArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnRowUIDMapArchive) ProtoMessage() {}

func (x *ColumnRowUIDMapArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnRowUIDMapArchive.ProtoReflect.Descriptor instead.
func (*ColumnRowUIDMapArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{35}
}

func (x *ColumnRowUIDMapArchive) GetSortedColumnUids() []*UUID {
	if x != nil {
		return x.SortedColumnUids
	}
	return nil
}

func (x *ColumnRowUIDMapArchive) GetColumnIndexForUid() []uint32 {
	if x != nil {
		return x.ColumnIndexForUid
	}
	return nil
}

func (x *ColumnRowUIDMapArchive) GetColumnUidForIndex() []uint32 {
	if x != nil {
		return x.ColumnUidForIndex
	}
	return nil
}

func (x *ColumnRowUIDMapArchive) GetSortedRowUids() []*UUID {
	if x != nil {
		return x.SortedRowUids
	}
	return nil
}

func (x *ColumnRowUIDMapArchive) GetRowIndexForUid() []uint32 {
	if x != nil {
		return x.RowIndexForUid
	}
	return nil
}

func (x *ColumnRowUIDMapArchive) GetRowUidForIndex() []uint32 {
	if x != nil {
		return x.RowUidForIndex
	}
	return nil
}

type StrokeLayerArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RowColumnIndex *uint32                                `protobuf:"varint,1,opt,name=row_column_index,json=rowColumnIndex" json:"row_column_index,omitempty"`
	StrokeRuns     []*StrokeLayerArchive_StrokeRunArchive `protobuf:"bytes,2,rep,name=stroke_runs,json=strokeRuns" json:"stroke_runs,omitempty"`
}

func (x *StrokeLayerArchive) Reset() {
	*x = StrokeLayerArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StrokeLayerArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrokeLayerArchive) ProtoMessage() {}

func (x *StrokeLayerArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrokeLayerArchive.ProtoReflect.Descriptor instead.
func (*StrokeLayerArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{36}
}

func (x *StrokeLayerArchive) GetRowColumnIndex() uint32 {
	if x != nil && x.RowColumnIndex != nil {
		return *x.RowColumnIndex
	}
	return 0
}

func (x *StrokeLayerArchive) GetStrokeRuns() []*StrokeLayerArchive_StrokeRunArchive {
	if x != nil {
		return x.StrokeRuns
	}
	return nil
}

type StrokeSidecarArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxOrder                *uint32      `protobuf:"varint,1,opt,name=max_order,json=maxOrder" json:"max_order,omitempty"`
	ColumnCount             *uint32      `protobuf:"varint,2,opt,name=column_count,json=columnCount" json:"column_count,omitempty"`
	RowCount                *uint32      `protobuf:"varint,3,opt,name=row_count,json=rowCount" json:"row_count,omitempty"`
	LeftColumnStrokeLayers  []*Reference `protobuf:"bytes,4,rep,name=left_column_stroke_layers,json=leftColumnStrokeLayers" json:"left_column_stroke_layers,omitempty"`
	RightColumnStrokeLayers []*Reference `protobuf:"bytes,5,rep,name=right_column_stroke_layers,json=rightColumnStrokeLayers" json:"right_column_stroke_layers,omitempty"`
	TopRowStrokeLayers      []*Reference `protobuf:"bytes,6,rep,name=top_row_stroke_layers,json=topRowStrokeLayers" json:"top_row_stroke_layers,omitempty"`
	BottomRowStrokeLayers   []*Reference `protobuf:"bytes,7,rep,name=bottom_row_stroke_layers,json=bottomRowStrokeLayers" json:"bottom_row_stroke_layers,omitempty"`
}

func (x *StrokeSidecarArchive) Reset() {
	*x = StrokeSidecarArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StrokeSidecarArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrokeSidecarArchive) ProtoMessage() {}

func (x *StrokeSidecarArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrokeSidecarArchive.ProtoReflect.Descriptor instead.
func (*StrokeSidecarArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{37}
}

func (x *StrokeSidecarArchive) GetMaxOrder() uint32 {
	if x != nil && x.MaxOrder != nil {
		return *x.MaxOrder
	}
	return 0
}

func (x *StrokeSidecarArchive) GetColumnCount() uint32 {
	if x != nil && x.ColumnCount != nil {
		return *x.ColumnCount
	}
	return 0
}

func (x *StrokeSidecarArchive) GetRowCount() uint32 {
	if x != nil && x.RowCount != nil {
		return *x.RowCount
	}
	return 0
}

func (x *StrokeSidecarArchive) GetLeftColumnStrokeLayers() []*Reference {
	if x != nil {
		return x.LeftColumnStrokeLayers
	}
	return nil
}

func (x *StrokeSidecarArchive) GetRightColumnStrokeLayers() []*Reference {
	if x != nil {
		return x.RightColumnStrokeLayers
	}
	return nil
}

func (x *StrokeSidecarArchive) GetTopRowStrokeLayers() []*Reference {
	if x != nil {
		return x.TopRowStrokeLayers
	}
	return nil
}

func (x *StrokeSidecarArchive) GetBottomRowStrokeLayers() []*Reference {
	if x != nil {
		return x.BottomRowStrokeLayers
	}
	return nil
}

type DurationWrapperArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DurationWrapperArchive) Reset() {
	*x = DurationWrapperArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DurationWrapperArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DurationWrapperArchive) ProtoMessage() {}

func (x *DurationWrapperArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DurationWrapperArchive.ProtoReflect.Descriptor instead.
func (*DurationWrapperArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{38}
}

type Cell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValueType                   *CellValueType           `protobuf:"varint,2,req,name=valueType,enum=TST.CellValueType" json:"valueType,omitempty"`
	CellStyle                   *Reference               `protobuf:"bytes,3,opt,name=cell_style,json=cellStyle" json:"cell_style,omitempty"`
	TextStyle                   *Reference               `protobuf:"bytes,4,opt,name=text_style,json=textStyle" json:"text_style,omitempty"`
	NumberValue                 *float64                 `protobuf:"fixed64,5,opt,name=numberValue" json:"numberValue,omitempty"`
	StringValue                 *string                  `protobuf:"bytes,6,opt,name=stringValue" json:"stringValue,omitempty"`
	BoolValue                   *bool                    `protobuf:"varint,7,opt,name=boolValue" json:"boolValue,omitempty"`
	CurrentFormat               *TSKFormatStructArchive  `protobuf:"bytes,9,opt,name=current_format,json=currentFormat" json:"current_format,omitempty"`
	FormulaError                *Reference               `protobuf:"bytes,10,opt,name=formulaError" json:"formulaError,omitempty"`
	NumberFormat                *TSKFormatStructArchive  `protobuf:"bytes,11,opt,name=number_format,json=numberFormat" json:"number_format,omitempty"`
	CurrencyFormat              *TSKFormatStructArchive  `protobuf:"bytes,12,opt,name=currency_format,json=currencyFormat" json:"currency_format,omitempty"`
	DurationFormat              *TSKFormatStructArchive  `protobuf:"bytes,13,opt,name=duration_format,json=durationFormat" json:"duration_format,omitempty"`
	DateFormat                  *TSKFormatStructArchive  `protobuf:"bytes,14,opt,name=date_format,json=dateFormat" json:"date_format,omitempty"`
	CustomFormat                *TSKFormatStructArchive  `protobuf:"bytes,16,opt,name=custom_format,json=customFormat" json:"custom_format,omitempty"`
	BaseFormat                  *TSKFormatStructArchive  `protobuf:"bytes,17,opt,name=base_format,json=baseFormat" json:"base_format,omitempty"`
	ExplicitFormatFlags         *uint32                  `protobuf:"varint,19,opt,name=explicit_format_flags,json=explicitFormatFlags" json:"explicit_format_flags,omitempty"`
	RichText                    *Reference               `protobuf:"bytes,20,opt,name=richText" json:"richText,omitempty"`
	ConditionalStyle            *Reference               `protobuf:"bytes,21,opt,name=conditional_style,json=conditionalStyle" json:"conditional_style,omitempty"`
	CommentStorage              *Reference               `protobuf:"bytes,23,opt,name=comment_storage,json=commentStorage" json:"comment_storage,omitempty"`
	ConditionalStyleAppliedRule *uint32                  `protobuf:"varint,24,opt,name=conditional_style_applied_rule,json=conditionalStyleAppliedRule" json:"conditional_style_applied_rule,omitempty"`
	ImportWarningSet            *ImportWarningSetArchive `protobuf:"bytes,25,opt,name=import_warning_set,json=importWarningSet" json:"import_warning_set,omitempty"`
	CustomFormatObject          *CustomFormatArchive     `protobuf:"bytes,26,opt,name=custom_format_object,json=customFormatObject" json:"custom_format_object,omitempty"`
	CellBorder                  *CellBorderArchive       `protobuf:"bytes,27,opt,name=cell_border,json=cellBorder" json:"cell_border,omitempty"`
	CellSpec                    *CellSpecArchive         `protobuf:"bytes,28,opt,name=cell_spec,json=cellSpec" json:"cell_spec,omitempty"`
	CellFormatKind              *uint32                  `protobuf:"varint,29,opt,name=cell_format_kind,json=cellFormatKind" json:"cell_format_kind,omitempty"`
	TextFormat                  *TSKFormatStructArchive  `protobuf:"bytes,30,opt,name=text_format,json=textFormat" json:"text_format,omitempty"`
	BooleanFormat               *TSKFormatStructArchive  `protobuf:"bytes,31,opt,name=boolean_format,json=booleanFormat" json:"boolean_format,omitempty"`
	DecimalValueLow             *uint64                  `protobuf:"varint,32,opt,name=decimal_value_low,json=decimalValueLow" json:"decimal_value_low,omitempty"`
	DecimalValueHigh            *uint64                  `protobuf:"varint,33,opt,name=decimal_value_high,json=decimalValueHigh" json:"decimal_value_high,omitempty"`
}

func (x *Cell) Reset() {
	*x = Cell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cell) ProtoMessage() {}

func (x *Cell) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cell.ProtoReflect.Descriptor instead.
func (*Cell) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{39}
}

func (x *Cell) GetValueType() CellValueType {
	if x != nil && x.ValueType != nil {
		return *x.ValueType
	}
	return CellValueType_emptyCellValueType
}

func (x *Cell) GetCellStyle() *Reference {
	if x != nil {
		return x.CellStyle
	}
	return nil
}

func (x *Cell) GetTextStyle() *Reference {
	if x != nil {
		return x.TextStyle
	}
	return nil
}

func (x *Cell) GetNumberValue() float64 {
	if x != nil && x.NumberValue != nil {
		return *x.NumberValue
	}
	return 0
}

func (x *Cell) GetStringValue() string {
	if x != nil && x.StringValue != nil {
		return *x.StringValue
	}
	return ""
}

func (x *Cell) GetBoolValue() bool {
	if x != nil && x.BoolValue != nil {
		return *x.BoolValue
	}
	return false
}

func (x *Cell) GetCurrentFormat() *TSKFormatStructArchive {
	if x != nil {
		return x.CurrentFormat
	}
	return nil
}

func (x *Cell) GetFormulaError() *Reference {
	if x != nil {
		return x.FormulaError
	}
	return nil
}

func (x *Cell) GetNumberFormat() *TSKFormatStructArchive {
	if x != nil {
		return x.NumberFormat
	}
	return nil
}

func (x *Cell) GetCurrencyFormat() *TSKFormatStructArchive {
	if x != nil {
		return x.CurrencyFormat
	}
	return nil
}

func (x *Cell) GetDurationFormat() *TSKFormatStructArchive {
	if x != nil {
		return x.DurationFormat
	}
	return nil
}

func (x *Cell) GetDateFormat() *TSKFormatStructArchive {
	if x != nil {
		return x.DateFormat
	}
	return nil
}

func (x *Cell) GetCustomFormat() *TSKFormatStructArchive {
	if x != nil {
		return x.CustomFormat
	}
	return nil
}

func (x *Cell) GetBaseFormat() *TSKFormatStructArchive {
	if x != nil {
		return x.BaseFormat
	}
	return nil
}

func (x *Cell) GetExplicitFormatFlags() uint32 {
	if x != nil && x.ExplicitFormatFlags != nil {
		return *x.ExplicitFormatFlags
	}
	return 0
}

func (x *Cell) GetRichText() *Reference {
	if x != nil {
		return x.RichText
	}
	return nil
}

func (x *Cell) GetConditionalStyle() *Reference {
	if x != nil {
		return x.ConditionalStyle
	}
	return nil
}

func (x *Cell) GetCommentStorage() *Reference {
	if x != nil {
		return x.CommentStorage
	}
	return nil
}

func (x *Cell) GetConditionalStyleAppliedRule() uint32 {
	if x != nil && x.ConditionalStyleAppliedRule != nil {
		return *x.ConditionalStyleAppliedRule
	}
	return 0
}

func (x *Cell) GetImportWarningSet() *ImportWarningSetArchive {
	if x != nil {
		return x.ImportWarningSet
	}
	return nil
}

func (x *Cell) GetCustomFormatObject() *CustomFormatArchive {
	if x != nil {
		return x.CustomFormatObject
	}
	return nil
}

func (x *Cell) GetCellBorder() *CellBorderArchive {
	if x != nil {
		return x.CellBorder
	}
	return nil
}

func (x *Cell) GetCellSpec() *CellSpecArchive {
	if x != nil {
		return x.CellSpec
	}
	return nil
}

func (x *Cell) GetCellFormatKind() uint32 {
	if x != nil && x.CellFormatKind != nil {
		return *x.CellFormatKind
	}
	return 0
}

func (x *Cell) GetTextFormat() *TSKFormatStructArchive {
	if x != nil {
		return x.TextFormat
	}
	return nil
}

func (x *Cell) GetBooleanFormat() *TSKFormatStructArchive {
	if x != nil {
		return x.BooleanFormat
	}
	return nil
}

func (x *Cell) GetDecimalValueLow() uint64 {
	if x != nil && x.DecimalValueLow != nil {
		return *x.DecimalValueLow
	}
	return 0
}

func (x *Cell) GetDecimalValueHigh() uint64 {
	if x != nil && x.DecimalValueHigh != nil {
		return *x.DecimalValueHigh
	}
	return 0
}

type MergeRegionMapArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellRange []*CellRange `protobuf:"bytes,1,rep,name=cell_range,json=cellRange" json:"cell_range,omitempty"`
}

func (x *MergeRegionMapArchive) Reset() {
	*x = MergeRegionMapArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergeRegionMapArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeRegionMapArchive) ProtoMessage() {}

func (x *MergeRegionMapArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeRegionMapArchive.ProtoReflect.Descriptor instead.
func (*MergeRegionMapArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{40}
}

func (x *MergeRegionMapArchive) GetCellRange() []*CellRange {
	if x != nil {
		return x.CellRange
	}
	return nil
}

type CellMapArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellTiles                           []*Reference             `protobuf:"bytes,2,rep,name=cell_tiles,json=cellTiles" json:"cell_tiles,omitempty"`
	UidBased                            *bool                    `protobuf:"varint,3,req,name=uid_based,json=uidBased" json:"uid_based,omitempty"`
	ExpandedCellIds                     []*CellCoordinateArchive `protobuf:"bytes,14,rep,name=expanded_cell_ids,json=expandedCellIds" json:"expanded_cell_ids,omitempty"`
	CellUidList                         *CellUIDListArchive      `protobuf:"bytes,5,opt,name=cell_uid_list,json=cellUidList" json:"cell_uid_list,omitempty"`
	MergeUidRanges                      []*UUIDRectArchive       `protobuf:"bytes,7,rep,name=merge_uid_ranges,json=mergeUidRanges" json:"merge_uid_ranges,omitempty"`
	UnmergeUidRanges                    []*UUIDRectArchive       `protobuf:"bytes,9,rep,name=unmerge_uid_ranges,json=unmergeUidRanges" json:"unmerge_uid_ranges,omitempty"`
	MergeActions                        []*MergeOperationArchive `protobuf:"bytes,13,rep,name=merge_actions,json=mergeActions" json:"merge_actions,omitempty"`
	MayModifyFormulasInCells            *bool                    `protobuf:"varint,10,opt,name=may_modify_formulas_in_cells,json=mayModifyFormulasInCells,def=1" json:"may_modify_formulas_in_cells,omitempty"`
	MayModifyValuesReferencedByFormulas *bool                    `protobuf:"varint,11,opt,name=may_modify_values_referenced_by_formulas,json=mayModifyValuesReferencedByFormulas,def=1" json:"may_modify_values_referenced_by_formulas,omitempty"`
}

// Default values for CellMapArchive fields.
const (
	Default_CellMapArchive_MayModifyFormulasInCells            = bool(true)
	Default_CellMapArchive_MayModifyValuesReferencedByFormulas = bool(true)
)

func (x *CellMapArchive) Reset() {
	*x = CellMapArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellMapArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellMapArchive) ProtoMessage() {}

func (x *CellMapArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellMapArchive.ProtoReflect.Descriptor instead.
func (*CellMapArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{41}
}

func (x *CellMapArchive) GetCellTiles() []*Reference {
	if x != nil {
		return x.CellTiles
	}
	return nil
}

func (x *CellMapArchive) GetUidBased() bool {
	if x != nil && x.UidBased != nil {
		return *x.UidBased
	}
	return false
}

func (x *CellMapArchive) GetExpandedCellIds() []*CellCoordinateArchive {
	if x != nil {
		return x.ExpandedCellIds
	}
	return nil
}

func (x *CellMapArchive) GetCellUidList() *CellUIDListArchive {
	if x != nil {
		return x.CellUidList
	}
	return nil
}

func (x *CellMapArchive) GetMergeUidRanges() []*UUIDRectArchive {
	if x != nil {
		return x.MergeUidRanges
	}
	return nil
}

func (x *CellMapArchive) GetUnmergeUidRanges() []*UUIDRectArchive {
	if x != nil {
		return x.UnmergeUidRanges
	}
	return nil
}

func (x *CellMapArchive) GetMergeActions() []*MergeOperationArchive {
	if x != nil {
		return x.MergeActions
	}
	return nil
}

func (x *CellMapArchive) GetMayModifyFormulasInCells() bool {
	if x != nil && x.MayModifyFormulasInCells != nil {
		return *x.MayModifyFormulasInCells
	}
	return Default_CellMapArchive_MayModifyFormulasInCells
}

func (x *CellMapArchive) GetMayModifyValuesReferencedByFormulas() bool {
	if x != nil && x.MayModifyValuesReferencedByFormulas != nil {
		return *x.MayModifyValuesReferencedByFormulas
	}
	return Default_CellMapArchive_MayModifyValuesReferencedByFormulas
}

type CellListArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cells                  []*CellListArchive_OptionalCell `protobuf:"bytes,1,rep,name=cells" json:"cells,omitempty"`
	TrailingEmptyCellCount *uint32                         `protobuf:"varint,2,opt,name=trailing_empty_cell_count,json=trailingEmptyCellCount" json:"trailing_empty_cell_count,omitempty"`
}

func (x *CellListArchive) Reset() {
	*x = CellListArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellListArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellListArchive) ProtoMessage() {}

func (x *CellListArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellListArchive.ProtoReflect.Descriptor instead.
func (*CellListArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{42}
}

func (x *CellListArchive) GetCells() []*CellListArchive_OptionalCell {
	if x != nil {
		return x.Cells
	}
	return nil
}

func (x *CellListArchive) GetTrailingEmptyCellCount() uint32 {
	if x != nil && x.TrailingEmptyCellCount != nil {
		return *x.TrailingEmptyCellCount
	}
	return 0
}

type ConcurrentCellMapArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellLists                           []*Reference             `protobuf:"bytes,1,rep,name=cell_lists,json=cellLists" json:"cell_lists,omitempty"`
	UidBased                            *bool                    `protobuf:"varint,2,req,name=uid_based,json=uidBased" json:"uid_based,omitempty"`
	MergeActions                        []*MergeOperationArchive `protobuf:"bytes,3,rep,name=merge_actions,json=mergeActions" json:"merge_actions,omitempty"`
	MayModifyFormulasInCells            *bool                    `protobuf:"varint,4,opt,name=may_modify_formulas_in_cells,json=mayModifyFormulasInCells,def=1" json:"may_modify_formulas_in_cells,omitempty"`
	MayModifyValuesReferencedByFormulas *bool                    `protobuf:"varint,5,opt,name=may_modify_values_referenced_by_formulas,json=mayModifyValuesReferencedByFormulas,def=1" json:"may_modify_values_referenced_by_formulas,omitempty"`
}

// Default values for ConcurrentCellMapArchive fields.
const (
	Default_ConcurrentCellMapArchive_MayModifyFormulasInCells            = bool(true)
	Default_ConcurrentCellMapArchive_MayModifyValuesReferencedByFormulas = bool(true)
)

func (x *ConcurrentCellMapArchive) Reset() {
	*x = ConcurrentCellMapArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConcurrentCellMapArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConcurrentCellMapArchive) ProtoMessage() {}

func (x *ConcurrentCellMapArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConcurrentCellMapArchive.ProtoReflect.Descriptor instead.
func (*ConcurrentCellMapArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{43}
}

func (x *ConcurrentCellMapArchive) GetCellLists() []*Reference {
	if x != nil {
		return x.CellLists
	}
	return nil
}

func (x *ConcurrentCellMapArchive) GetUidBased() bool {
	if x != nil && x.UidBased != nil {
		return *x.UidBased
	}
	return false
}

func (x *ConcurrentCellMapArchive) GetMergeActions() []*MergeOperationArchive {
	if x != nil {
		return x.MergeActions
	}
	return nil
}

func (x *ConcurrentCellMapArchive) GetMayModifyFormulasInCells() bool {
	if x != nil && x.MayModifyFormulasInCells != nil {
		return *x.MayModifyFormulasInCells
	}
	return Default_ConcurrentCellMapArchive_MayModifyFormulasInCells
}

func (x *ConcurrentCellMapArchive) GetMayModifyValuesReferencedByFormulas() bool {
	if x != nil && x.MayModifyValuesReferencedByFormulas != nil {
		return *x.MayModifyValuesReferencedByFormulas
	}
	return Default_ConcurrentCellMapArchive_MayModifyValuesReferencedByFormulas
}

type ConcurrentCellListArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cells        []*ConcurrentCellListArchive_OptionalCell `protobuf:"bytes,1,rep,name=cells" json:"cells,omitempty"`
	CellUidRange *UUIDRectArchive                          `protobuf:"bytes,2,opt,name=cell_uid_range,json=cellUidRange" json:"cell_uid_range,omitempty"`
	CellRange    *CellRange                                `protobuf:"bytes,3,opt,name=cell_range,json=cellRange" json:"cell_range,omitempty"`
}

func (x *ConcurrentCellListArchive) Reset() {
	*x = ConcurrentCellListArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConcurrentCellListArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConcurrentCellListArchive) ProtoMessage() {}

func (x *ConcurrentCellListArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConcurrentCellListArchive.ProtoReflect.Descriptor instead.
func (*ConcurrentCellListArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{44}
}

func (x *ConcurrentCellListArchive) GetCells() []*ConcurrentCellListArchive_OptionalCell {
	if x != nil {
		return x.Cells
	}
	return nil
}

func (x *ConcurrentCellListArchive) GetCellUidRange() *UUIDRectArchive {
	if x != nil {
		return x.CellUidRange
	}
	return nil
}

func (x *ConcurrentCellListArchive) GetCellRange() *CellRange {
	if x != nil {
		return x.CellRange
	}
	return nil
}

type CellFormatAndValueArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValueType              *CellValueType          `protobuf:"varint,1,req,name=valueType,enum=TST.CellValueType" json:"valueType,omitempty"`
	NumberValue            *float64                `protobuf:"fixed64,2,opt,name=numberValue" json:"numberValue,omitempty"`
	StringValue            *string                 `protobuf:"bytes,3,opt,name=stringValue" json:"stringValue,omitempty"`
	BoolValue              *bool                   `protobuf:"varint,4,opt,name=boolValue" json:"boolValue,omitempty"`
	RichTextStorage        *Reference              `protobuf:"bytes,5,opt,name=richTextStorage" json:"richTextStorage,omitempty"`
	UseAllSpareFormats     *bool                   `protobuf:"varint,6,req,name=use_all_spare_formats,json=useAllSpareFormats" json:"use_all_spare_formats,omitempty"`
	ExplicitFlags          *uint32                 `protobuf:"varint,7,req,name=explicit_flags,json=explicitFlags" json:"explicit_flags,omitempty"`
	CellFormatKind         *uint32                 `protobuf:"varint,8,req,name=cell_format_kind,json=cellFormatKind" json:"cell_format_kind,omitempty"`
	NumberFormat           *TSKFormatStructArchive `protobuf:"bytes,10,opt,name=number_format,json=numberFormat" json:"number_format,omitempty"`
	CurrencyFormat         *TSKFormatStructArchive `protobuf:"bytes,11,opt,name=currency_format,json=currencyFormat" json:"currency_format,omitempty"`
	DateFormat             *TSKFormatStructArchive `protobuf:"bytes,12,opt,name=date_format,json=dateFormat" json:"date_format,omitempty"`
	DurationFormat         *TSKFormatStructArchive `protobuf:"bytes,13,opt,name=duration_format,json=durationFormat" json:"duration_format,omitempty"`
	TextFormat             *TSKFormatStructArchive `protobuf:"bytes,14,opt,name=text_format,json=textFormat" json:"text_format,omitempty"`
	BooleanFormat          *TSKFormatStructArchive `protobuf:"bytes,15,opt,name=boolean_format,json=booleanFormat" json:"boolean_format,omitempty"`
	FormattedValue         *string                 `protobuf:"bytes,16,opt,name=formatted_value,json=formattedValue" json:"formatted_value,omitempty"`
	FormattedRichTextValue *Reference              `protobuf:"bytes,17,opt,name=formatted_rich_text_value,json=formattedRichTextValue" json:"formatted_rich_text_value,omitempty"`
	ApplySpareFormatOnly   *bool                   `protobuf:"varint,18,req,name=apply_spare_format_only,json=applySpareFormatOnly" json:"apply_spare_format_only,omitempty"`
	SpareFormatType        *bool                   `protobuf:"varint,19,req,name=spare_format_type,json=spareFormatType" json:"spare_format_type,omitempty"`
	DecimalLow             *uint64                 `protobuf:"varint,20,opt,name=decimal_low,json=decimalLow" json:"decimal_low,omitempty"`
	DecimalHigh            *uint64                 `protobuf:"varint,21,opt,name=decimal_high,json=decimalHigh" json:"decimal_high,omitempty"`
	SuppressApplyValue     *bool                   `protobuf:"varint,22,opt,name=suppress_apply_value,json=suppressApplyValue" json:"suppress_apply_value,omitempty"`
}

func (x *CellFormatAndValueArchive) Reset() {
	*x = CellFormatAndValueArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellFormatAndValueArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellFormatAndValueArchive) ProtoMessage() {}

func (x *CellFormatAndValueArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellFormatAndValueArchive.ProtoReflect.Descriptor instead.
func (*CellFormatAndValueArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{45}
}

func (x *CellFormatAndValueArchive) GetValueType() CellValueType {
	if x != nil && x.ValueType != nil {
		return *x.ValueType
	}
	return CellValueType_emptyCellValueType
}

func (x *CellFormatAndValueArchive) GetNumberValue() float64 {
	if x != nil && x.NumberValue != nil {
		return *x.NumberValue
	}
	return 0
}

func (x *CellFormatAndValueArchive) GetStringValue() string {
	if x != nil && x.StringValue != nil {
		return *x.StringValue
	}
	return ""
}

func (x *CellFormatAndValueArchive) GetBoolValue() bool {
	if x != nil && x.BoolValue != nil {
		return *x.BoolValue
	}
	return false
}

func (x *CellFormatAndValueArchive) GetRichTextStorage() *Reference {
	if x != nil {
		return x.RichTextStorage
	}
	return nil
}

func (x *CellFormatAndValueArchive) GetUseAllSpareFormats() bool {
	if x != nil && x.UseAllSpareFormats != nil {
		return *x.UseAllSpareFormats
	}
	return false
}

func (x *CellFormatAndValueArchive) GetExplicitFlags() uint32 {
	if x != nil && x.ExplicitFlags != nil {
		return *x.ExplicitFlags
	}
	return 0
}

func (x *CellFormatAndValueArchive) GetCellFormatKind() uint32 {
	if x != nil && x.CellFormatKind != nil {
		return *x.CellFormatKind
	}
	return 0
}

func (x *CellFormatAndValueArchive) GetNumberFormat() *TSKFormatStructArchive {
	if x != nil {
		return x.NumberFormat
	}
	return nil
}

func (x *CellFormatAndValueArchive) GetCurrencyFormat() *TSKFormatStructArchive {
	if x != nil {
		return x.CurrencyFormat
	}
	return nil
}

func (x *CellFormatAndValueArchive) GetDateFormat() *TSKFormatStructArchive {
	if x != nil {
		return x.DateFormat
	}
	return nil
}

func (x *CellFormatAndValueArchive) GetDurationFormat() *TSKFormatStructArchive {
	if x != nil {
		return x.DurationFormat
	}
	return nil
}

func (x *CellFormatAndValueArchive) GetTextFormat() *TSKFormatStructArchive {
	if x != nil {
		return x.TextFormat
	}
	return nil
}

func (x *CellFormatAndValueArchive) GetBooleanFormat() *TSKFormatStructArchive {
	if x != nil {
		return x.BooleanFormat
	}
	return nil
}

func (x *CellFormatAndValueArchive) GetFormattedValue() string {
	if x != nil && x.FormattedValue != nil {
		return *x.FormattedValue
	}
	return ""
}

func (x *CellFormatAndValueArchive) GetFormattedRichTextValue() *Reference {
	if x != nil {
		return x.FormattedRichTextValue
	}
	return nil
}

func (x *CellFormatAndValueArchive) GetApplySpareFormatOnly() bool {
	if x != nil && x.ApplySpareFormatOnly != nil {
		return *x.ApplySpareFormatOnly
	}
	return false
}

func (x *CellFormatAndValueArchive) GetSpareFormatType() bool {
	if x != nil && x.SpareFormatType != nil {
		return *x.SpareFormatType
	}
	return false
}

func (x *CellFormatAndValueArchive) GetDecimalLow() uint64 {
	if x != nil && x.DecimalLow != nil {
		return *x.DecimalLow
	}
	return 0
}

func (x *CellFormatAndValueArchive) GetDecimalHigh() uint64 {
	if x != nil && x.DecimalHigh != nil {
		return *x.DecimalHigh
	}
	return 0
}

func (x *CellFormatAndValueArchive) GetSuppressApplyValue() bool {
	if x != nil && x.SuppressApplyValue != nil {
		return *x.SuppressApplyValue
	}
	return false
}

type CellSpecArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InteractionType           *uint32         `protobuf:"varint,1,req,name=interaction_type,json=interactionType" json:"interaction_type,omitempty"`
	Formula                   *FormulaArchive `protobuf:"bytes,2,opt,name=formula" json:"formula,omitempty"`
	RangeControlMin           *float64        `protobuf:"fixed64,3,opt,name=range_control_min,json=rangeControlMin" json:"range_control_min,omitempty"`
	RangeControlMax           *float64        `protobuf:"fixed64,4,opt,name=range_control_max,json=rangeControlMax" json:"range_control_max,omitempty"`
	RangeControlInc           *float64        `protobuf:"fixed64,5,opt,name=range_control_inc,json=rangeControlInc" json:"range_control_inc,omitempty"`
	ChooserControlPopupModel  *Reference      `protobuf:"bytes,6,opt,name=chooser_control_popup_model,json=chooserControlPopupModel" json:"chooser_control_popup_model,omitempty"`
	ChooserControlStartWFirst *bool           `protobuf:"varint,7,opt,name=chooser_control_start_w_first,json=chooserControlStartWFirst" json:"chooser_control_start_w_first,omitempty"`
	// Deprecated: Do not use.
	CategorySummaryShouldDisplayLabel *bool `protobuf:"varint,8,opt,name=category_summary_should_display_label,json=categorySummaryShouldDisplayLabel" json:"category_summary_should_display_label,omitempty"`
}

func (x *CellSpecArchive) Reset() {
	*x = CellSpecArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellSpecArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellSpecArchive) ProtoMessage() {}

func (x *CellSpecArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellSpecArchive.ProtoReflect.Descriptor instead.
func (*CellSpecArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{46}
}

func (x *CellSpecArchive) GetInteractionType() uint32 {
	if x != nil && x.InteractionType != nil {
		return *x.InteractionType
	}
	return 0
}

func (x *CellSpecArchive) GetFormula() *FormulaArchive {
	if x != nil {
		return x.Formula
	}
	return nil
}

func (x *CellSpecArchive) GetRangeControlMin() float64 {
	if x != nil && x.RangeControlMin != nil {
		return *x.RangeControlMin
	}
	return 0
}

func (x *CellSpecArchive) GetRangeControlMax() float64 {
	if x != nil && x.RangeControlMax != nil {
		return *x.RangeControlMax
	}
	return 0
}

func (x *CellSpecArchive) GetRangeControlInc() float64 {
	if x != nil && x.RangeControlInc != nil {
		return *x.RangeControlInc
	}
	return 0
}

func (x *CellSpecArchive) GetChooserControlPopupModel() *Reference {
	if x != nil {
		return x.ChooserControlPopupModel
	}
	return nil
}

func (x *CellSpecArchive) GetChooserControlStartWFirst() bool {
	if x != nil && x.ChooserControlStartWFirst != nil {
		return *x.ChooserControlStartWFirst
	}
	return false
}

// Deprecated: Do not use.
func (x *CellSpecArchive) GetCategorySummaryShouldDisplayLabel() bool {
	if x != nil && x.CategorySummaryShouldDisplayLabel != nil {
		return *x.CategorySummaryShouldDisplayLabel
	}
	return false
}

type CommentStorageWrapperArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommentStorage *Reference `protobuf:"bytes,1,opt,name=comment_storage,json=commentStorage" json:"comment_storage,omitempty"`
}

func (x *CommentStorageWrapperArchive) Reset() {
	*x = CommentStorageWrapperArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentStorageWrapperArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentStorageWrapperArchive) ProtoMessage() {}

func (x *CommentStorageWrapperArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentStorageWrapperArchive.ProtoReflect.Descriptor instead.
func (*CommentStorageWrapperArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{47}
}

func (x *CommentStorageWrapperArchive) GetCommentStorage() *Reference {
	if x != nil {
		return x.CommentStorage
	}
	return nil
}

type CellDiffArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PropertyMapToSet   *CommandPropertyMapArchive `protobuf:"bytes,1,req,name=property_map_to_set,json=propertyMapToSet" json:"property_map_to_set,omitempty"`
	PropertyMapToReset *CommandPropertyMapArchive `protobuf:"bytes,2,req,name=property_map_to_reset,json=propertyMapToReset" json:"property_map_to_reset,omitempty"`
}

func (x *CellDiffArchive) Reset() {
	*x = CellDiffArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellDiffArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellDiffArchive) ProtoMessage() {}

func (x *CellDiffArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellDiffArchive.ProtoReflect.Descriptor instead.
func (*CellDiffArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{48}
}

func (x *CellDiffArchive) GetPropertyMapToSet() *CommandPropertyMapArchive {
	if x != nil {
		return x.PropertyMapToSet
	}
	return nil
}

func (x *CellDiffArchive) GetPropertyMapToReset() *CommandPropertyMapArchive {
	if x != nil {
		return x.PropertyMapToReset
	}
	return nil
}

type CellDiffArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LargeArray *LargeArray `protobuf:"bytes,1,opt,name=large_array,json=largeArray" json:"large_array,omitempty"`
}

func (x *CellDiffArray) Reset() {
	*x = CellDiffArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellDiffArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellDiffArray) ProtoMessage() {}

func (x *CellDiffArray) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellDiffArray.ProtoReflect.Descriptor instead.
func (*CellDiffArray) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{49}
}

func (x *CellDiffArray) GetLargeArray() *LargeArray {
	if x != nil {
		return x.LargeArray
	}
	return nil
}

type CellDiffArraySegment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LargeArraySegment *LargeArraySegment `protobuf:"bytes,1,opt,name=large_array_segment,json=largeArraySegment" json:"large_array_segment,omitempty"`
	Elements          []*CellDiffArchive `protobuf:"bytes,2,rep,name=elements" json:"elements,omitempty"`
}

func (x *CellDiffArraySegment) Reset() {
	*x = CellDiffArraySegment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellDiffArraySegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellDiffArraySegment) ProtoMessage() {}

func (x *CellDiffArraySegment) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellDiffArraySegment.ProtoReflect.Descriptor instead.
func (*CellDiffArraySegment) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{50}
}

func (x *CellDiffArraySegment) GetLargeArraySegment() *LargeArraySegment {
	if x != nil {
		return x.LargeArraySegment
	}
	return nil
}

func (x *CellDiffArraySegment) GetElements() []*CellDiffArchive {
	if x != nil {
		return x.Elements
	}
	return nil
}

type CellDiffMapArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UidBased        *bool                    `protobuf:"varint,1,req,name=uid_based,json=uidBased" json:"uid_based,omitempty"`
	ExpandedCellIds []*CellCoordinateArchive `protobuf:"bytes,2,rep,name=expanded_cell_ids,json=expandedCellIds" json:"expanded_cell_ids,omitempty"`
	CellUids        *CellUIDListArchive      `protobuf:"bytes,3,req,name=cell_uids,json=cellUids" json:"cell_uids,omitempty"`
	CellDiffArray   *Reference               `protobuf:"bytes,4,opt,name=cell_diff_array,json=cellDiffArray" json:"cell_diff_array,omitempty"`
}

func (x *CellDiffMapArchive) Reset() {
	*x = CellDiffMapArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellDiffMapArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellDiffMapArchive) ProtoMessage() {}

func (x *CellDiffMapArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellDiffMapArchive.ProtoReflect.Descriptor instead.
func (*CellDiffMapArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{51}
}

func (x *CellDiffMapArchive) GetUidBased() bool {
	if x != nil && x.UidBased != nil {
		return *x.UidBased
	}
	return false
}

func (x *CellDiffMapArchive) GetExpandedCellIds() []*CellCoordinateArchive {
	if x != nil {
		return x.ExpandedCellIds
	}
	return nil
}

func (x *CellDiffMapArchive) GetCellUids() *CellUIDListArchive {
	if x != nil {
		return x.CellUids
	}
	return nil
}

func (x *CellDiffMapArchive) GetCellDiffArray() *Reference {
	if x != nil {
		return x.CellDiffArray
	}
	return nil
}

type HierarchicalCellDiffMapArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumRowRules               *int32                                     `protobuf:"varint,1,req,name=num_row_rules,json=numRowRules" json:"num_row_rules,omitempty"`
	NumColumnRules            *int32                                     `protobuf:"varint,2,req,name=num_column_rules,json=numColumnRules" json:"num_column_rules,omitempty"`
	RowHeaderUids             []*UUID                                    `protobuf:"bytes,3,rep,name=row_header_uids,json=rowHeaderUids" json:"row_header_uids,omitempty"`
	ColumnHeaderUids          []*UUID                                    `protobuf:"bytes,4,rep,name=column_header_uids,json=columnHeaderUids" json:"column_header_uids,omitempty"`
	AggregateRuleUids         []*UUID                                    `protobuf:"bytes,5,rep,name=aggregate_rule_uids,json=aggregateRuleUids" json:"aggregate_rule_uids,omitempty"`
	ActiveFlatteningDimension *TableDimensionArchive                     `protobuf:"varint,6,req,name=active_flattening_dimension,json=activeFlatteningDimension,enum=TST.TableDimensionArchive" json:"active_flattening_dimension,omitempty"`
	RowValueUids              []*UUID                                    `protobuf:"bytes,7,rep,name=row_value_uids,json=rowValueUids" json:"row_value_uids,omitempty"`
	RowLevelPreorder          []uint32                                   `protobuf:"varint,8,rep,name=row_level_preorder,json=rowLevelPreorder" json:"row_level_preorder,omitempty"`
	ColumnValueUids           []*UUID                                    `protobuf:"bytes,9,rep,name=column_value_uids,json=columnValueUids" json:"column_value_uids,omitempty"`
	ColumnLevelPreorder       []uint32                                   `protobuf:"varint,10,rep,name=column_level_preorder,json=columnLevelPreorder" json:"column_level_preorder,omitempty"`
	CellDiffStorage           []*HierarchicalCellDiffMapArchive_BoxedRow `protobuf:"bytes,11,rep,name=cell_diff_storage,json=cellDiffStorage" json:"cell_diff_storage,omitempty"`
	RowSizes                  []float64                                  `protobuf:"fixed64,12,rep,name=row_sizes,json=rowSizes" json:"row_sizes,omitempty"`
	ColumnSizes               []float64                                  `protobuf:"fixed64,13,rep,name=column_sizes,json=columnSizes" json:"column_sizes,omitempty"`
}

func (x *HierarchicalCellDiffMapArchive) Reset() {
	*x = HierarchicalCellDiffMapArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HierarchicalCellDiffMapArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HierarchicalCellDiffMapArchive) ProtoMessage() {}

func (x *HierarchicalCellDiffMapArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HierarchicalCellDiffMapArchive.ProtoReflect.Descriptor instead.
func (*HierarchicalCellDiffMapArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{52}
}

func (x *HierarchicalCellDiffMapArchive) GetNumRowRules() int32 {
	if x != nil && x.NumRowRules != nil {
		return *x.NumRowRules
	}
	return 0
}

func (x *HierarchicalCellDiffMapArchive) GetNumColumnRules() int32 {
	if x != nil && x.NumColumnRules != nil {
		return *x.NumColumnRules
	}
	return 0
}

func (x *HierarchicalCellDiffMapArchive) GetRowHeaderUids() []*UUID {
	if x != nil {
		return x.RowHeaderUids
	}
	return nil
}

func (x *HierarchicalCellDiffMapArchive) GetColumnHeaderUids() []*UUID {
	if x != nil {
		return x.ColumnHeaderUids
	}
	return nil
}

func (x *HierarchicalCellDiffMapArchive) GetAggregateRuleUids() []*UUID {
	if x != nil {
		return x.AggregateRuleUids
	}
	return nil
}

func (x *HierarchicalCellDiffMapArchive) GetActiveFlatteningDimension() TableDimensionArchive {
	if x != nil && x.ActiveFlatteningDimension != nil {
		return *x.ActiveFlatteningDimension
	}
	return TableDimensionArchive_dimensionNeither
}

func (x *HierarchicalCellDiffMapArchive) GetRowValueUids() []*UUID {
	if x != nil {
		return x.RowValueUids
	}
	return nil
}

func (x *HierarchicalCellDiffMapArchive) GetRowLevelPreorder() []uint32 {
	if x != nil {
		return x.RowLevelPreorder
	}
	return nil
}

func (x *HierarchicalCellDiffMapArchive) GetColumnValueUids() []*UUID {
	if x != nil {
		return x.ColumnValueUids
	}
	return nil
}

func (x *HierarchicalCellDiffMapArchive) GetColumnLevelPreorder() []uint32 {
	if x != nil {
		return x.ColumnLevelPreorder
	}
	return nil
}

func (x *HierarchicalCellDiffMapArchive) GetCellDiffStorage() []*HierarchicalCellDiffMapArchive_BoxedRow {
	if x != nil {
		return x.CellDiffStorage
	}
	return nil
}

func (x *HierarchicalCellDiffMapArchive) GetRowSizes() []float64 {
	if x != nil {
		return x.RowSizes
	}
	return nil
}

func (x *HierarchicalCellDiffMapArchive) GetColumnSizes() []float64 {
	if x != nil {
		return x.ColumnSizes
	}
	return nil
}

type DoubleStyleMapArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Capacity     *uint32                                             `protobuf:"varint,1,req,name=capacity" json:"capacity,omitempty"`
	Count        *uint32                                             `protobuf:"varint,2,req,name=count" json:"count,omitempty"`
	CellMapEntry []*DoubleStyleMapArchive_DoubleStyleMapEntryArchive `protobuf:"bytes,3,rep,name=cell_map_entry,json=cellMapEntry" json:"cell_map_entry,omitempty"`
}

func (x *DoubleStyleMapArchive) Reset() {
	*x = DoubleStyleMapArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoubleStyleMapArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoubleStyleMapArchive) ProtoMessage() {}

func (x *DoubleStyleMapArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoubleStyleMapArchive.ProtoReflect.Descriptor instead.
func (*DoubleStyleMapArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{53}
}

func (x *DoubleStyleMapArchive) GetCapacity() uint32 {
	if x != nil && x.Capacity != nil {
		return *x.Capacity
	}
	return 0
}

func (x *DoubleStyleMapArchive) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *DoubleStyleMapArchive) GetCellMapEntry() []*DoubleStyleMapArchive_DoubleStyleMapEntryArchive {
	if x != nil {
		return x.CellMapEntry
	}
	return nil
}

type StyleTableMapArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Capacity *uint32                                           `protobuf:"varint,1,req,name=capacity" json:"capacity,omitempty"`
	Count    *uint32                                           `protobuf:"varint,2,req,name=count" json:"count,omitempty"`
	MapEntry []*StyleTableMapArchive_StyleTableMapEntryArchive `protobuf:"bytes,3,rep,name=map_entry,json=mapEntry" json:"map_entry,omitempty"`
}

func (x *StyleTableMapArchive) Reset() {
	*x = StyleTableMapArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StyleTableMapArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StyleTableMapArchive) ProtoMessage() {}

func (x *StyleTableMapArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StyleTableMapArchive.ProtoReflect.Descriptor instead.
func (*StyleTableMapArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{54}
}

func (x *StyleTableMapArchive) GetCapacity() uint32 {
	if x != nil && x.Capacity != nil {
		return *x.Capacity
	}
	return 0
}

func (x *StyleTableMapArchive) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *StyleTableMapArchive) GetMapEntry() []*StyleTableMapArchive_StyleTableMapEntryArchive {
	if x != nil {
		return x.MapEntry
	}
	return nil
}

type SelectionArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Do not use.
	TableModel    *Reference            `protobuf:"bytes,1,opt,name=tableModel" json:"tableModel,omitempty"`
	SelectionType *SelectionTypeArchive `protobuf:"varint,4,req,name=selection_type,json=selectionType,enum=TST.SelectionTypeArchive" json:"selection_type,omitempty"`
	AnchorCell    *CellID               `protobuf:"bytes,5,opt,name=anchor_cell,json=anchorCell" json:"anchor_cell,omitempty"`
	CellRanges    []*CellRange          `protobuf:"bytes,6,rep,name=cell_ranges,json=cellRanges" json:"cell_ranges,omitempty"`
	BaseRanges    []*CellRange          `protobuf:"bytes,7,rep,name=base_ranges,json=baseRanges" json:"base_ranges,omitempty"`
	CursorCell    *CellID               `protobuf:"bytes,8,opt,name=cursor_cell,json=cursorCell" json:"cursor_cell,omitempty"`
	TableInfo     *Reference            `protobuf:"bytes,9,opt,name=table_info,json=tableInfo" json:"table_info,omitempty"`
	CellUidRegion *CellUIDRegionArchive `protobuf:"bytes,10,opt,name=cell_uid_region,json=cellUidRegion" json:"cell_uid_region,omitempty"`
	BaseUidRegion *CellUIDRegionArchive `protobuf:"bytes,11,opt,name=base_uid_region,json=baseUidRegion" json:"base_uid_region,omitempty"`
	AnchorCellUid *UUIDCoordArchive     `protobuf:"bytes,12,opt,name=anchor_cell_uid,json=anchorCellUid" json:"anchor_cell_uid,omitempty"`
	CursorCellUid *UUIDCoordArchive     `protobuf:"bytes,13,opt,name=cursor_cell_uid,json=cursorCellUid" json:"cursor_cell_uid,omitempty"`
}

func (x *SelectionArchive) Reset() {
	*x = SelectionArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectionArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectionArchive) ProtoMessage() {}

func (x *SelectionArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectionArchive.ProtoReflect.Descriptor instead.
func (*SelectionArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{55}
}

// Deprecated: Do not use.
func (x *SelectionArchive) GetTableModel() *Reference {
	if x != nil {
		return x.TableModel
	}
	return nil
}

func (x *SelectionArchive) GetSelectionType() SelectionTypeArchive {
	if x != nil && x.SelectionType != nil {
		return *x.SelectionType
	}
	return SelectionTypeArchive_deprecatedCellSelectionType
}

func (x *SelectionArchive) GetAnchorCell() *CellID {
	if x != nil {
		return x.AnchorCell
	}
	return nil
}

func (x *SelectionArchive) GetCellRanges() []*CellRange {
	if x != nil {
		return x.CellRanges
	}
	return nil
}

func (x *SelectionArchive) GetBaseRanges() []*CellRange {
	if x != nil {
		return x.BaseRanges
	}
	return nil
}

func (x *SelectionArchive) GetCursorCell() *CellID {
	if x != nil {
		return x.CursorCell
	}
	return nil
}

func (x *SelectionArchive) GetTableInfo() *Reference {
	if x != nil {
		return x.TableInfo
	}
	return nil
}

func (x *SelectionArchive) GetCellUidRegion() *CellUIDRegionArchive {
	if x != nil {
		return x.CellUidRegion
	}
	return nil
}

func (x *SelectionArchive) GetBaseUidRegion() *CellUIDRegionArchive {
	if x != nil {
		return x.BaseUidRegion
	}
	return nil
}

func (x *SelectionArchive) GetAnchorCellUid() *UUIDCoordArchive {
	if x != nil {
		return x.AnchorCellUid
	}
	return nil
}

func (x *SelectionArchive) GetCursorCellUid() *UUIDCoordArchive {
	if x != nil {
		return x.CursorCellUid
	}
	return nil
}

type DeathhawkRdar39989167CellSelectionArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableInfo     *Reference            `protobuf:"bytes,1,opt,name=table_info,json=tableInfo" json:"table_info,omitempty"`
	SelectionType *SelectionTypeArchive `protobuf:"varint,2,opt,name=selection_type,json=selectionType,enum=TST.SelectionTypeArchive" json:"selection_type,omitempty"`
	CellUidRegion *CellUIDRegionArchive `protobuf:"bytes,3,opt,name=cell_uid_region,json=cellUidRegion" json:"cell_uid_region,omitempty"`
	BaseUidRegion *CellUIDRegionArchive `protobuf:"bytes,4,opt,name=base_uid_region,json=baseUidRegion" json:"base_uid_region,omitempty"`
	AnchorCellUid *UUIDCoordArchive     `protobuf:"bytes,5,opt,name=anchor_cell_uid,json=anchorCellUid" json:"anchor_cell_uid,omitempty"`
	CursorCellUid *UUIDCoordArchive     `protobuf:"bytes,6,opt,name=cursor_cell_uid,json=cursorCellUid" json:"cursor_cell_uid,omitempty"`
}

func (x *DeathhawkRdar39989167CellSelectionArchive) Reset() {
	*x = DeathhawkRdar39989167CellSelectionArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeathhawkRdar39989167CellSelectionArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeathhawkRdar39989167CellSelectionArchive) ProtoMessage() {}

func (x *DeathhawkRdar39989167CellSelectionArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeathhawkRdar39989167CellSelectionArchive.ProtoReflect.Descriptor instead.
func (*DeathhawkRdar39989167CellSelectionArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{56}
}

func (x *DeathhawkRdar39989167CellSelectionArchive) GetTableInfo() *Reference {
	if x != nil {
		return x.TableInfo
	}
	return nil
}

func (x *DeathhawkRdar39989167CellSelectionArchive) GetSelectionType() SelectionTypeArchive {
	if x != nil && x.SelectionType != nil {
		return *x.SelectionType
	}
	return SelectionTypeArchive_deprecatedCellSelectionType
}

func (x *DeathhawkRdar39989167CellSelectionArchive) GetCellUidRegion() *CellUIDRegionArchive {
	if x != nil {
		return x.CellUidRegion
	}
	return nil
}

func (x *DeathhawkRdar39989167CellSelectionArchive) GetBaseUidRegion() *CellUIDRegionArchive {
	if x != nil {
		return x.BaseUidRegion
	}
	return nil
}

func (x *DeathhawkRdar39989167CellSelectionArchive) GetAnchorCellUid() *UUIDCoordArchive {
	if x != nil {
		return x.AnchorCellUid
	}
	return nil
}

func (x *DeathhawkRdar39989167CellSelectionArchive) GetCursorCellUid() *UUIDCoordArchive {
	if x != nil {
		return x.CursorCellUid
	}
	return nil
}

type StrokeSelectionArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mask *int32 `protobuf:"varint,1,opt,name=mask" json:"mask,omitempty"`
}

func (x *StrokeSelectionArchive) Reset() {
	*x = StrokeSelectionArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StrokeSelectionArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrokeSelectionArchive) ProtoMessage() {}

func (x *StrokeSelectionArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrokeSelectionArchive.ProtoReflect.Descriptor instead.
func (*StrokeSelectionArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{57}
}

func (x *StrokeSelectionArchive) GetMask() int32 {
	if x != nil && x.Mask != nil {
		return *x.Mask
	}
	return 0
}

type ControlCellSelectionArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ControlCellSelectionArchive) Reset() {
	*x = ControlCellSelectionArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlCellSelectionArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlCellSelectionArchive) ProtoMessage() {}

func (x *ControlCellSelectionArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlCellSelectionArchive.ProtoReflect.Descriptor instead.
func (*ControlCellSelectionArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{58}
}

type StockCellSelectionArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StockCellSelectionArchive) Reset() {
	*x = StockCellSelectionArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockCellSelectionArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockCellSelectionArchive) ProtoMessage() {}

func (x *StockCellSelectionArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockCellSelectionArchive.ProtoReflect.Descriptor instead.
func (*StockCellSelectionArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{59}
}

type TableNameSelectionArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TableNameSelectionArchive) Reset() {
	*x = TableNameSelectionArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableNameSelectionArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableNameSelectionArchive) ProtoMessage() {}

func (x *TableNameSelectionArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableNameSelectionArchive.ProtoReflect.Descriptor instead.
func (*TableNameSelectionArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{60}
}

type AutofillSelectionArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceCellRange *CellRange `protobuf:"bytes,1,opt,name=source_cell_range,json=sourceCellRange" json:"source_cell_range,omitempty"`
	TargetCellRange *CellRange `protobuf:"bytes,2,opt,name=target_cell_range,json=targetCellRange" json:"target_cell_range,omitempty"`
}

func (x *AutofillSelectionArchive) Reset() {
	*x = AutofillSelectionArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutofillSelectionArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutofillSelectionArchive) ProtoMessage() {}

func (x *AutofillSelectionArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutofillSelectionArchive.ProtoReflect.Descriptor instead.
func (*AutofillSelectionArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{61}
}

func (x *AutofillSelectionArchive) GetSourceCellRange() *CellRange {
	if x != nil {
		return x.SourceCellRange
	}
	return nil
}

func (x *AutofillSelectionArchive) GetTargetCellRange() *CellRange {
	if x != nil {
		return x.TargetCellRange
	}
	return nil
}

type FilterRulePrePivotArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Predicate *FormulaPredicatePrePivotArchive `protobuf:"bytes,1,req,name=predicate" json:"predicate,omitempty"`
	Disabled  *bool                            `protobuf:"varint,2,opt,name=disabled" json:"disabled,omitempty"`
}

func (x *FilterRulePrePivotArchive) Reset() {
	*x = FilterRulePrePivotArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterRulePrePivotArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterRulePrePivotArchive) ProtoMessage() {}

func (x *FilterRulePrePivotArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterRulePrePivotArchive.ProtoReflect.Descriptor instead.
func (*FilterRulePrePivotArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{62}
}

func (x *FilterRulePrePivotArchive) GetPredicate() *FormulaPredicatePrePivotArchive {
	if x != nil {
		return x.Predicate
	}
	return nil
}

func (x *FilterRulePrePivotArchive) GetDisabled() bool {
	if x != nil && x.Disabled != nil {
		return *x.Disabled
	}
	return false
}

type FilterRuleArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Predicate *FormulaPredicateArchive `protobuf:"bytes,1,req,name=predicate" json:"predicate,omitempty"`
}

func (x *FilterRuleArchive) Reset() {
	*x = FilterRuleArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterRuleArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterRuleArchive) ProtoMessage() {}

func (x *FilterRuleArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterRuleArchive.ProtoReflect.Descriptor instead.
func (*FilterRuleArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{63}
}

func (x *FilterRuleArchive) GetPredicate() *FormulaPredicateArchive {
	if x != nil {
		return x.Predicate
	}
	return nil
}

type TableStyleArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super           *StyleArchive                `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	OverrideCount   *uint32                      `protobuf:"varint,10,opt,name=override_count,json=overrideCount,def=0" json:"override_count,omitempty"`
	TableProperties *TableStylePropertiesArchive `protobuf:"bytes,11,opt,name=table_properties,json=tableProperties" json:"table_properties,omitempty"`
}

// Default values for TableStyleArchive fields.
const (
	Default_TableStyleArchive_OverrideCount = uint32(0)
)

func (x *TableStyleArchive) Reset() {
	*x = TableStyleArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableStyleArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableStyleArchive) ProtoMessage() {}

func (x *TableStyleArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableStyleArchive.ProtoReflect.Descriptor instead.
func (*TableStyleArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{64}
}

func (x *TableStyleArchive) GetSuper() *StyleArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *TableStyleArchive) GetOverrideCount() uint32 {
	if x != nil && x.OverrideCount != nil {
		return *x.OverrideCount
	}
	return Default_TableStyleArchive_OverrideCount
}

func (x *TableStyleArchive) GetTableProperties() *TableStylePropertiesArchive {
	if x != nil {
		return x.TableProperties
	}
	return nil
}

type CellStyleArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super          *StyleArchive               `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	OverrideCount  *uint32                     `protobuf:"varint,10,opt,name=override_count,json=overrideCount,def=0" json:"override_count,omitempty"`
	CellProperties *CellStylePropertiesArchive `protobuf:"bytes,11,opt,name=cell_properties,json=cellProperties" json:"cell_properties,omitempty"`
}

// Default values for CellStyleArchive fields.
const (
	Default_CellStyleArchive_OverrideCount = uint32(0)
)

func (x *CellStyleArchive) Reset() {
	*x = CellStyleArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellStyleArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellStyleArchive) ProtoMessage() {}

func (x *CellStyleArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellStyleArchive.ProtoReflect.Descriptor instead.
func (*CellStyleArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{65}
}

func (x *CellStyleArchive) GetSuper() *StyleArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CellStyleArchive) GetOverrideCount() uint32 {
	if x != nil && x.OverrideCount != nil {
		return *x.OverrideCount
	}
	return Default_CellStyleArchive_OverrideCount
}

func (x *CellStyleArchive) GetCellProperties() *CellStylePropertiesArchive {
	if x != nil {
		return x.CellProperties
	}
	return nil
}

type FormulaPredArgDataArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DoubleValue          *float64 `protobuf:"fixed64,1,opt,name=double_value,json=doubleValue" json:"double_value,omitempty"`
	DecimalLow           *uint64  `protobuf:"varint,2,opt,name=decimal_low,json=decimalLow" json:"decimal_low,omitempty"`
	DecimalHigh          *uint64  `protobuf:"varint,3,opt,name=decimal_high,json=decimalHigh" json:"decimal_high,omitempty"`
	StringValue          *string  `protobuf:"bytes,4,opt,name=string_value,json=stringValue" json:"string_value,omitempty"`
	DateValue            *float64 `protobuf:"fixed64,5,opt,name=date_value,json=dateValue" json:"date_value,omitempty"`
	DurationTimeinterval *float64 `protobuf:"fixed64,6,opt,name=duration_timeinterval,json=durationTimeinterval" json:"duration_timeinterval,omitempty"`
	DurationUnits        *int32   `protobuf:"varint,7,opt,name=duration_units,json=durationUnits" json:"duration_units,omitempty"`
	BooleanValue         *bool    `protobuf:"varint,8,opt,name=boolean_value,json=booleanValue" json:"boolean_value,omitempty"`
}

func (x *FormulaPredArgDataArchive) Reset() {
	*x = FormulaPredArgDataArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormulaPredArgDataArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormulaPredArgDataArchive) ProtoMessage() {}

func (x *FormulaPredArgDataArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormulaPredArgDataArchive.ProtoReflect.Descriptor instead.
func (*FormulaPredArgDataArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{66}
}

func (x *FormulaPredArgDataArchive) GetDoubleValue() float64 {
	if x != nil && x.DoubleValue != nil {
		return *x.DoubleValue
	}
	return 0
}

func (x *FormulaPredArgDataArchive) GetDecimalLow() uint64 {
	if x != nil && x.DecimalLow != nil {
		return *x.DecimalLow
	}
	return 0
}

func (x *FormulaPredArgDataArchive) GetDecimalHigh() uint64 {
	if x != nil && x.DecimalHigh != nil {
		return *x.DecimalHigh
	}
	return 0
}

func (x *FormulaPredArgDataArchive) GetStringValue() string {
	if x != nil && x.StringValue != nil {
		return *x.StringValue
	}
	return ""
}

func (x *FormulaPredArgDataArchive) GetDateValue() float64 {
	if x != nil && x.DateValue != nil {
		return *x.DateValue
	}
	return 0
}

func (x *FormulaPredArgDataArchive) GetDurationTimeinterval() float64 {
	if x != nil && x.DurationTimeinterval != nil {
		return *x.DurationTimeinterval
	}
	return 0
}

func (x *FormulaPredArgDataArchive) GetDurationUnits() int32 {
	if x != nil && x.DurationUnits != nil {
		return *x.DurationUnits
	}
	return 0
}

func (x *FormulaPredArgDataArchive) GetBooleanValue() bool {
	if x != nil && x.BooleanValue != nil {
		return *x.BooleanValue
	}
	return false
}

type FormulaPredArgArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArgType         *int32                               `protobuf:"varint,1,req,name=arg_type,json=argType" json:"arg_type,omitempty"`
	ArgValue        *FormulaPredArgDataArchive           `protobuf:"bytes,2,opt,name=arg_value,json=argValue" json:"arg_value,omitempty"`
	BaseCellRef     *CellReferenceArchive                `protobuf:"bytes,3,opt,name=base_cell_ref,json=baseCellRef" json:"base_cell_ref,omitempty"`
	RelativeCellRef *RelativeCellRefArchive              `protobuf:"bytes,4,opt,name=relative_cell_ref,json=relativeCellRef" json:"relative_cell_ref,omitempty"`
	CategoryRef     *CategoryReferenceArchive            `protobuf:"bytes,5,opt,name=category_ref,json=categoryRef" json:"category_ref,omitempty"`
	UidTractList    *ASTNodeArrayArchive_ASTUidTractList `protobuf:"bytes,6,opt,name=uid_tract_list,json=uidTractList" json:"uid_tract_list,omitempty"`
	HostCellCoord   *CellCoordinateArchive               `protobuf:"bytes,7,opt,name=host_cell_coord,json=hostCellCoord" json:"host_cell_coord,omitempty"`
	PreserveRow     *bool                                `protobuf:"varint,8,opt,name=preserve_row,json=preserveRow" json:"preserve_row,omitempty"`
	PreserveColumn  *bool                                `protobuf:"varint,9,opt,name=preserve_column,json=preserveColumn" json:"preserve_column,omitempty"`
	ListEntries     []*FormulaPredArgDataArchive         `protobuf:"bytes,10,rep,name=list_entries,json=listEntries" json:"list_entries,omitempty"`
	ViewTractRef    *ViewTractRefArchive                 `protobuf:"bytes,11,opt,name=view_tract_ref,json=viewTractRef" json:"view_tract_ref,omitempty"`
}

func (x *FormulaPredArgArchive) Reset() {
	*x = FormulaPredArgArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormulaPredArgArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormulaPredArgArchive) ProtoMessage() {}

func (x *FormulaPredArgArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormulaPredArgArchive.ProtoReflect.Descriptor instead.
func (*FormulaPredArgArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{67}
}

func (x *FormulaPredArgArchive) GetArgType() int32 {
	if x != nil && x.ArgType != nil {
		return *x.ArgType
	}
	return 0
}

func (x *FormulaPredArgArchive) GetArgValue() *FormulaPredArgDataArchive {
	if x != nil {
		return x.ArgValue
	}
	return nil
}

func (x *FormulaPredArgArchive) GetBaseCellRef() *CellReferenceArchive {
	if x != nil {
		return x.BaseCellRef
	}
	return nil
}

func (x *FormulaPredArgArchive) GetRelativeCellRef() *RelativeCellRefArchive {
	if x != nil {
		return x.RelativeCellRef
	}
	return nil
}

func (x *FormulaPredArgArchive) GetCategoryRef() *CategoryReferenceArchive {
	if x != nil {
		return x.CategoryRef
	}
	return nil
}

func (x *FormulaPredArgArchive) GetUidTractList() *ASTNodeArrayArchive_ASTUidTractList {
	if x != nil {
		return x.UidTractList
	}
	return nil
}

func (x *FormulaPredArgArchive) GetHostCellCoord() *CellCoordinateArchive {
	if x != nil {
		return x.HostCellCoord
	}
	return nil
}

func (x *FormulaPredArgArchive) GetPreserveRow() bool {
	if x != nil && x.PreserveRow != nil {
		return *x.PreserveRow
	}
	return false
}

func (x *FormulaPredArgArchive) GetPreserveColumn() bool {
	if x != nil && x.PreserveColumn != nil {
		return *x.PreserveColumn
	}
	return false
}

func (x *FormulaPredArgArchive) GetListEntries() []*FormulaPredArgDataArchive {
	if x != nil {
		return x.ListEntries
	}
	return nil
}

func (x *FormulaPredArgArchive) GetViewTractRef() *ViewTractRefArchive {
	if x != nil {
		return x.ViewTractRef
	}
	return nil
}

type FormulaPredicatePrePivotArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Formula       *FormulaArchive `protobuf:"bytes,1,req,name=formula" json:"formula,omitempty"`
	PredicateType *int32          `protobuf:"varint,2,req,name=predicate_type,json=predicateType" json:"predicate_type,omitempty"`
	Qualifier1    *int32          `protobuf:"varint,3,req,name=qualifier1" json:"qualifier1,omitempty"`
	Qualifier2    *int32          `protobuf:"varint,4,req,name=qualifier2" json:"qualifier2,omitempty"`
	ParamIndex1   *int32          `protobuf:"varint,5,req,name=param_index1,json=paramIndex1" json:"param_index1,omitempty"`
	ParamIndex2   *int32          `protobuf:"varint,6,req,name=param_index2,json=paramIndex2" json:"param_index2,omitempty"`
	ParamIndex0   *int32          `protobuf:"varint,7,req,name=param_index0,json=paramIndex0" json:"param_index0,omitempty"`
}

func (x *FormulaPredicatePrePivotArchive) Reset() {
	*x = FormulaPredicatePrePivotArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormulaPredicatePrePivotArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormulaPredicatePrePivotArchive) ProtoMessage() {}

func (x *FormulaPredicatePrePivotArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormulaPredicatePrePivotArchive.ProtoReflect.Descriptor instead.
func (*FormulaPredicatePrePivotArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{68}
}

func (x *FormulaPredicatePrePivotArchive) GetFormula() *FormulaArchive {
	if x != nil {
		return x.Formula
	}
	return nil
}

func (x *FormulaPredicatePrePivotArchive) GetPredicateType() int32 {
	if x != nil && x.PredicateType != nil {
		return *x.PredicateType
	}
	return 0
}

func (x *FormulaPredicatePrePivotArchive) GetQualifier1() int32 {
	if x != nil && x.Qualifier1 != nil {
		return *x.Qualifier1
	}
	return 0
}

func (x *FormulaPredicatePrePivotArchive) GetQualifier2() int32 {
	if x != nil && x.Qualifier2 != nil {
		return *x.Qualifier2
	}
	return 0
}

func (x *FormulaPredicatePrePivotArchive) GetParamIndex1() int32 {
	if x != nil && x.ParamIndex1 != nil {
		return *x.ParamIndex1
	}
	return 0
}

func (x *FormulaPredicatePrePivotArchive) GetParamIndex2() int32 {
	if x != nil && x.ParamIndex2 != nil {
		return *x.ParamIndex2
	}
	return 0
}

func (x *FormulaPredicatePrePivotArchive) GetParamIndex0() int32 {
	if x != nil && x.ParamIndex0 != nil {
		return *x.ParamIndex0
	}
	return 0
}

type FormulaPredicateArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PredicateType       *int32                 `protobuf:"varint,1,req,name=predicate_type,json=predicateType" json:"predicate_type,omitempty"`
	Qualifier1          *int32                 `protobuf:"varint,2,req,name=qualifier1" json:"qualifier1,omitempty"`
	Qualifier2          *int32                 `protobuf:"varint,3,req,name=qualifier2" json:"qualifier2,omitempty"`
	ParamValue0         *FormulaPredArgArchive `protobuf:"bytes,4,opt,name=param_value0,json=paramValue0" json:"param_value0,omitempty"`
	ParamValue1         *FormulaPredArgArchive `protobuf:"bytes,5,opt,name=param_value1,json=paramValue1" json:"param_value1,omitempty"`
	ParamValue2         *FormulaPredArgArchive `protobuf:"bytes,6,opt,name=param_value2,json=paramValue2" json:"param_value2,omitempty"`
	Formula             *FormulaArchive        `protobuf:"bytes,7,opt,name=formula" json:"formula,omitempty"`
	ForConditionalStyle *bool                  `protobuf:"varint,8,opt,name=for_conditional_style,json=forConditionalStyle" json:"for_conditional_style,omitempty"`
	HostTableUid        *UUID                  `protobuf:"bytes,9,opt,name=host_table_uid,json=hostTableUid" json:"host_table_uid,omitempty"`
	HostColumnUid       *UUID                  `protobuf:"bytes,10,opt,name=host_column_uid,json=hostColumnUid" json:"host_column_uid,omitempty"`
	HostRowUid          *UUID                  `protobuf:"bytes,11,opt,name=host_row_uid,json=hostRowUid" json:"host_row_uid,omitempty"`
}

func (x *FormulaPredicateArchive) Reset() {
	*x = FormulaPredicateArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormulaPredicateArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormulaPredicateArchive) ProtoMessage() {}

func (x *FormulaPredicateArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormulaPredicateArchive.ProtoReflect.Descriptor instead.
func (*FormulaPredicateArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{69}
}

func (x *FormulaPredicateArchive) GetPredicateType() int32 {
	if x != nil && x.PredicateType != nil {
		return *x.PredicateType
	}
	return 0
}

func (x *FormulaPredicateArchive) GetQualifier1() int32 {
	if x != nil && x.Qualifier1 != nil {
		return *x.Qualifier1
	}
	return 0
}

func (x *FormulaPredicateArchive) GetQualifier2() int32 {
	if x != nil && x.Qualifier2 != nil {
		return *x.Qualifier2
	}
	return 0
}

func (x *FormulaPredicateArchive) GetParamValue0() *FormulaPredArgArchive {
	if x != nil {
		return x.ParamValue0
	}
	return nil
}

func (x *FormulaPredicateArchive) GetParamValue1() *FormulaPredArgArchive {
	if x != nil {
		return x.ParamValue1
	}
	return nil
}

func (x *FormulaPredicateArchive) GetParamValue2() *FormulaPredArgArchive {
	if x != nil {
		return x.ParamValue2
	}
	return nil
}

func (x *FormulaPredicateArchive) GetFormula() *FormulaArchive {
	if x != nil {
		return x.Formula
	}
	return nil
}

func (x *FormulaPredicateArchive) GetForConditionalStyle() bool {
	if x != nil && x.ForConditionalStyle != nil {
		return *x.ForConditionalStyle
	}
	return false
}

func (x *FormulaPredicateArchive) GetHostTableUid() *UUID {
	if x != nil {
		return x.HostTableUid
	}
	return nil
}

func (x *FormulaPredicateArchive) GetHostColumnUid() *UUID {
	if x != nil {
		return x.HostColumnUid
	}
	return nil
}

func (x *FormulaPredicateArchive) GetHostRowUid() *UUID {
	if x != nil {
		return x.HostRowUid
	}
	return nil
}

type ConditionalStyleSetArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleCount     *uint32                                                    `protobuf:"varint,1,req,name=ruleCount" json:"ruleCount,omitempty"`
	RulesPrepivot []*ConditionalStyleSetArchive_ConditionalStyleRulePrePivot `protobuf:"bytes,2,rep,name=rules_prepivot,json=rulesPrepivot" json:"rules_prepivot,omitempty"`
	Rules         *ConditionalStyleSetArchive_ConditionalStyleRules          `protobuf:"bytes,3,opt,name=rules" json:"rules,omitempty"`
}

func (x *ConditionalStyleSetArchive) Reset() {
	*x = ConditionalStyleSetArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionalStyleSetArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionalStyleSetArchive) ProtoMessage() {}

func (x *ConditionalStyleSetArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionalStyleSetArchive.ProtoReflect.Descriptor instead.
func (*ConditionalStyleSetArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{70}
}

func (x *ConditionalStyleSetArchive) GetRuleCount() uint32 {
	if x != nil && x.RuleCount != nil {
		return *x.RuleCount
	}
	return 0
}

func (x *ConditionalStyleSetArchive) GetRulesPrepivot() []*ConditionalStyleSetArchive_ConditionalStyleRulePrePivot {
	if x != nil {
		return x.RulesPrepivot
	}
	return nil
}

func (x *ConditionalStyleSetArchive) GetRules() *ConditionalStyleSetArchive_ConditionalStyleRules {
	if x != nil {
		return x.Rules
	}
	return nil
}

type FilterSetArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                         *FilterSetArchive_FilterSetType `protobuf:"varint,1,opt,name=type,enum=TST.FilterSetArchive_FilterSetType,def=0" json:"type,omitempty"`
	IsEnabled                    *bool                           `protobuf:"varint,2,opt,name=is_enabled,json=isEnabled,def=1" json:"is_enabled,omitempty"`
	FilterRulesPrepivot          []*FilterRulePrePivotArchive    `protobuf:"bytes,3,rep,name=filter_rules_prepivot,json=filterRulesPrepivot" json:"filter_rules_prepivot,omitempty"`
	NeedsFormulaRewriteForImport *bool                           `protobuf:"varint,4,opt,name=needs_formula_rewrite_for_import,json=needsFormulaRewriteForImport,def=0" json:"needs_formula_rewrite_for_import,omitempty"`
	FilterOffsets                []uint32                        `protobuf:"varint,5,rep,name=filter_offsets,json=filterOffsets" json:"filter_offsets,omitempty"`
	FilterEnabled                []bool                          `protobuf:"varint,6,rep,name=filter_enabled,json=filterEnabled" json:"filter_enabled,omitempty"`
	FilterRules                  []*FilterRuleArchive            `protobuf:"bytes,7,rep,name=filter_rules,json=filterRules" json:"filter_rules,omitempty"`
}

// Default values for FilterSetArchive fields.
const (
	Default_FilterSetArchive_Type                         = FilterSetArchive_FilterSetArchiveTypeAll
	Default_FilterSetArchive_IsEnabled                    = bool(true)
	Default_FilterSetArchive_NeedsFormulaRewriteForImport = bool(false)
)

func (x *FilterSetArchive) Reset() {
	*x = FilterSetArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterSetArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterSetArchive) ProtoMessage() {}

func (x *FilterSetArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterSetArchive.ProtoReflect.Descriptor instead.
func (*FilterSetArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{71}
}

func (x *FilterSetArchive) GetType() FilterSetArchive_FilterSetType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_FilterSetArchive_Type
}

func (x *FilterSetArchive) GetIsEnabled() bool {
	if x != nil && x.IsEnabled != nil {
		return *x.IsEnabled
	}
	return Default_FilterSetArchive_IsEnabled
}

func (x *FilterSetArchive) GetFilterRulesPrepivot() []*FilterRulePrePivotArchive {
	if x != nil {
		return x.FilterRulesPrepivot
	}
	return nil
}

func (x *FilterSetArchive) GetNeedsFormulaRewriteForImport() bool {
	if x != nil && x.NeedsFormulaRewriteForImport != nil {
		return *x.NeedsFormulaRewriteForImport
	}
	return Default_FilterSetArchive_NeedsFormulaRewriteForImport
}

func (x *FilterSetArchive) GetFilterOffsets() []uint32 {
	if x != nil {
		return x.FilterOffsets
	}
	return nil
}

func (x *FilterSetArchive) GetFilterEnabled() []bool {
	if x != nil {
		return x.FilterEnabled
	}
	return nil
}

func (x *FilterSetArchive) GetFilterRules() []*FilterRuleArchive {
	if x != nil {
		return x.FilterRules
	}
	return nil
}

type UniqueIndexArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColumnUid     *UUID                                         `protobuf:"bytes,1,req,name=column_uid,json=columnUid" json:"column_uid,omitempty"`
	UniqueEntries []*UniqueIndexArchive_UniqueIndexEntryArchive `protobuf:"bytes,2,rep,name=unique_entries,json=uniqueEntries" json:"unique_entries,omitempty"`
}

func (x *UniqueIndexArchive) Reset() {
	*x = UniqueIndexArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniqueIndexArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniqueIndexArchive) ProtoMessage() {}

func (x *UniqueIndexArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniqueIndexArchive.ProtoReflect.Descriptor instead.
func (*UniqueIndexArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{72}
}

func (x *UniqueIndexArchive) GetColumnUid() *UUID {
	if x != nil {
		return x.ColumnUid
	}
	return nil
}

func (x *UniqueIndexArchive) GetUniqueEntries() []*UniqueIndexArchive_UniqueIndexEntryArchive {
	if x != nil {
		return x.UniqueEntries
	}
	return nil
}

type HiddenStateExtentArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HiddenStateExtentUid            *UUID                                          `protobuf:"bytes,1,req,name=hidden_state_extent_uid,json=hiddenStateExtentUid" json:"hidden_state_extent_uid,omitempty"`
	HiddenStates                    []*HiddenStateExtentArchive_RowOrColumnState   `protobuf:"bytes,2,rep,name=hidden_states,json=hiddenStates" json:"hidden_states,omitempty"`
	RowOrColumnDirection            *HiddenStateExtentArchive_RowOrColumnDirection `protobuf:"varint,3,req,name=row_or_column_direction,json=rowOrColumnDirection,enum=TST.HiddenStateExtentArchive_RowOrColumnDirection" json:"row_or_column_direction,omitempty"`
	ThresholdValue                  []*CellValueArchive                            `protobuf:"bytes,5,rep,name=threshold_value,json=thresholdValue" json:"threshold_value,omitempty"`
	NeedsToUpdateFilterSetForImport *bool                                          `protobuf:"varint,6,opt,name=needs_to_update_filter_set_for_import,json=needsToUpdateFilterSetForImport,def=0" json:"needs_to_update_filter_set_for_import,omitempty"`
	CollapsedGroupUids              []*UUID                                        `protobuf:"bytes,7,rep,name=collapsed_group_uids,json=collapsedGroupUids" json:"collapsed_group_uids,omitempty"`
	FilterSet                       *Reference                                     `protobuf:"bytes,8,opt,name=filter_set,json=filterSet" json:"filter_set,omitempty"`
	ViewPivotHiddenIndexes          *IndexSetArchive                               `protobuf:"bytes,9,opt,name=view_pivot_hidden_indexes,json=viewPivotHiddenIndexes" json:"view_pivot_hidden_indexes,omitempty"`
	ViewOnlyFilteredIndexes         *IndexSetArchive                               `protobuf:"bytes,10,opt,name=view_only_filtered_indexes,json=viewOnlyFilteredIndexes" json:"view_only_filtered_indexes,omitempty"`
	UniqueIndexes                   []*UniqueIndexArchive                          `protobuf:"bytes,11,rep,name=unique_indexes,json=uniqueIndexes" json:"unique_indexes,omitempty"`
}

// Default values for HiddenStateExtentArchive fields.
const (
	Default_HiddenStateExtentArchive_NeedsToUpdateFilterSetForImport = bool(false)
)

func (x *HiddenStateExtentArchive) Reset() {
	*x = HiddenStateExtentArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HiddenStateExtentArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HiddenStateExtentArchive) ProtoMessage() {}

func (x *HiddenStateExtentArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HiddenStateExtentArchive.ProtoReflect.Descriptor instead.
func (*HiddenStateExtentArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{73}
}

func (x *HiddenStateExtentArchive) GetHiddenStateExtentUid() *UUID {
	if x != nil {
		return x.HiddenStateExtentUid
	}
	return nil
}

func (x *HiddenStateExtentArchive) GetHiddenStates() []*HiddenStateExtentArchive_RowOrColumnState {
	if x != nil {
		return x.HiddenStates
	}
	return nil
}

func (x *HiddenStateExtentArchive) GetRowOrColumnDirection() HiddenStateExtentArchive_RowOrColumnDirection {
	if x != nil && x.RowOrColumnDirection != nil {
		return *x.RowOrColumnDirection
	}
	return HiddenStateExtentArchive_ColumnDirection
}

func (x *HiddenStateExtentArchive) GetThresholdValue() []*CellValueArchive {
	if x != nil {
		return x.ThresholdValue
	}
	return nil
}

func (x *HiddenStateExtentArchive) GetNeedsToUpdateFilterSetForImport() bool {
	if x != nil && x.NeedsToUpdateFilterSetForImport != nil {
		return *x.NeedsToUpdateFilterSetForImport
	}
	return Default_HiddenStateExtentArchive_NeedsToUpdateFilterSetForImport
}

func (x *HiddenStateExtentArchive) GetCollapsedGroupUids() []*UUID {
	if x != nil {
		return x.CollapsedGroupUids
	}
	return nil
}

func (x *HiddenStateExtentArchive) GetFilterSet() *Reference {
	if x != nil {
		return x.FilterSet
	}
	return nil
}

func (x *HiddenStateExtentArchive) GetViewPivotHiddenIndexes() *IndexSetArchive {
	if x != nil {
		return x.ViewPivotHiddenIndexes
	}
	return nil
}

func (x *HiddenStateExtentArchive) GetViewOnlyFilteredIndexes() *IndexSetArchive {
	if x != nil {
		return x.ViewOnlyFilteredIndexes
	}
	return nil
}

func (x *HiddenStateExtentArchive) GetUniqueIndexes() []*UniqueIndexArchive {
	if x != nil {
		return x.UniqueIndexes
	}
	return nil
}

type HiddenStatesArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HiddenStatesUid         *UUID                     `protobuf:"bytes,1,req,name=hidden_states_uid,json=hiddenStatesUid" json:"hidden_states_uid,omitempty"`
	ColumnHiddenStateExtent *HiddenStateExtentArchive `protobuf:"bytes,2,req,name=column_hidden_state_extent,json=columnHiddenStateExtent" json:"column_hidden_state_extent,omitempty"`
	RowHiddenStateExtent    *HiddenStateExtentArchive `protobuf:"bytes,3,req,name=row_hidden_state_extent,json=rowHiddenStateExtent" json:"row_hidden_state_extent,omitempty"`
}

func (x *HiddenStatesArchive) Reset() {
	*x = HiddenStatesArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HiddenStatesArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HiddenStatesArchive) ProtoMessage() {}

func (x *HiddenStatesArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HiddenStatesArchive.ProtoReflect.Descriptor instead.
func (*HiddenStatesArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{74}
}

func (x *HiddenStatesArchive) GetHiddenStatesUid() *UUID {
	if x != nil {
		return x.HiddenStatesUid
	}
	return nil
}

func (x *HiddenStatesArchive) GetColumnHiddenStateExtent() *HiddenStateExtentArchive {
	if x != nil {
		return x.ColumnHiddenStateExtent
	}
	return nil
}

func (x *HiddenStatesArchive) GetRowHiddenStateExtent() *HiddenStateExtentArchive {
	if x != nil {
		return x.RowHiddenStateExtent
	}
	return nil
}

type HiddenStatesOwnerArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerUid     *UUID                  `protobuf:"bytes,1,req,name=owner_uid,json=ownerUid" json:"owner_uid,omitempty"`
	HiddenStates []*HiddenStatesArchive `protobuf:"bytes,2,rep,name=hidden_states,json=hiddenStates" json:"hidden_states,omitempty"`
}

func (x *HiddenStatesOwnerArchive) Reset() {
	*x = HiddenStatesOwnerArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HiddenStatesOwnerArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HiddenStatesOwnerArchive) ProtoMessage() {}

func (x *HiddenStatesOwnerArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HiddenStatesOwnerArchive.ProtoReflect.Descriptor instead.
func (*HiddenStatesOwnerArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{75}
}

func (x *HiddenStatesOwnerArchive) GetOwnerUid() *UUID {
	if x != nil {
		return x.OwnerUid
	}
	return nil
}

func (x *HiddenStatesOwnerArchive) GetHiddenStates() []*HiddenStatesArchive {
	if x != nil {
		return x.HiddenStates
	}
	return nil
}

type ExpandCollapseStateArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UidsCollapsed []*UUID                `protobuf:"bytes,1,rep,name=uids_collapsed,json=uidsCollapsed" json:"uids_collapsed,omitempty"`
	UidsExpanded  []*UUID                `protobuf:"bytes,2,rep,name=uids_expanded,json=uidsExpanded" json:"uids_expanded,omitempty"`
	Dimension     *TableDimensionArchive `protobuf:"varint,3,opt,name=dimension,enum=TST.TableDimensionArchive" json:"dimension,omitempty"`
}

func (x *ExpandCollapseStateArchive) Reset() {
	*x = ExpandCollapseStateArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpandCollapseStateArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpandCollapseStateArchive) ProtoMessage() {}

func (x *ExpandCollapseStateArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpandCollapseStateArchive.ProtoReflect.Descriptor instead.
func (*ExpandCollapseStateArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{76}
}

func (x *ExpandCollapseStateArchive) GetUidsCollapsed() []*UUID {
	if x != nil {
		return x.UidsCollapsed
	}
	return nil
}

func (x *ExpandCollapseStateArchive) GetUidsExpanded() []*UUID {
	if x != nil {
		return x.UidsExpanded
	}
	return nil
}

func (x *ExpandCollapseStateArchive) GetDimension() TableDimensionArchive {
	if x != nil && x.Dimension != nil {
		return *x.Dimension
	}
	return TableDimensionArchive_dimensionNeither
}

type TokenAttachmentArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super          *UIGraphicalAttachment `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	ExpressionNode *Reference             `protobuf:"bytes,2,opt,name=expressionNode" json:"expressionNode,omitempty"`
}

func (x *TokenAttachmentArchive) Reset() {
	*x = TokenAttachmentArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenAttachmentArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenAttachmentArchive) ProtoMessage() {}

func (x *TokenAttachmentArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenAttachmentArchive.ProtoReflect.Descriptor instead.
func (*TokenAttachmentArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{77}
}

func (x *TokenAttachmentArchive) GetSuper() *UIGraphicalAttachment {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *TokenAttachmentArchive) GetExpressionNode() *Reference {
	if x != nil {
		return x.ExpressionNode
	}
	return nil
}

type TSTFormulaArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpressionTree *Reference `protobuf:"bytes,1,opt,name=expressionTree" json:"expressionTree,omitempty"`
}

func (x *TSTFormulaArchive) Reset() {
	*x = TSTFormulaArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSTFormulaArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSTFormulaArchive) ProtoMessage() {}

func (x *TSTFormulaArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSTFormulaArchive.ProtoReflect.Descriptor instead.
func (*TSTFormulaArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{78}
}

func (x *TSTFormulaArchive) GetExpressionTree() *Reference {
	if x != nil {
		return x.ExpressionTree
	}
	return nil
}

type ExpressionNodeArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Children   []*Reference `protobuf:"bytes,1,rep,name=children" json:"children,omitempty"`
	FirstIndex *uint64      `protobuf:"varint,2,opt,name=first_index,json=firstIndex,def=0" json:"first_index,omitempty"`
	LastIndex  *uint64      `protobuf:"varint,3,opt,name=last_index,json=lastIndex,def=0" json:"last_index,omitempty"`
}

// Default values for ExpressionNodeArchive fields.
const (
	Default_ExpressionNodeArchive_FirstIndex = uint64(0)
	Default_ExpressionNodeArchive_LastIndex  = uint64(0)
)

func (x *ExpressionNodeArchive) Reset() {
	*x = ExpressionNodeArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpressionNodeArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpressionNodeArchive) ProtoMessage() {}

func (x *ExpressionNodeArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpressionNodeArchive.ProtoReflect.Descriptor instead.
func (*ExpressionNodeArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{79}
}

func (x *ExpressionNodeArchive) GetChildren() []*Reference {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *ExpressionNodeArchive) GetFirstIndex() uint64 {
	if x != nil && x.FirstIndex != nil {
		return *x.FirstIndex
	}
	return Default_ExpressionNodeArchive_FirstIndex
}

func (x *ExpressionNodeArchive) GetLastIndex() uint64 {
	if x != nil && x.LastIndex != nil {
		return *x.LastIndex
	}
	return Default_ExpressionNodeArchive_LastIndex
}

type BooleanNodeArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *ExpressionNodeArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Value *bool                  `protobuf:"varint,2,req,name=value" json:"value,omitempty"`
}

func (x *BooleanNodeArchive) Reset() {
	*x = BooleanNodeArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BooleanNodeArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BooleanNodeArchive) ProtoMessage() {}

func (x *BooleanNodeArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BooleanNodeArchive.ProtoReflect.Descriptor instead.
func (*BooleanNodeArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{80}
}

func (x *BooleanNodeArchive) GetSuper() *ExpressionNodeArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *BooleanNodeArchive) GetValue() bool {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return false
}

type NumberNodeArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super       *ExpressionNodeArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Number      *float64               `protobuf:"fixed64,2,opt,name=number" json:"number,omitempty"`
	DecimalLow  *uint64                `protobuf:"varint,3,opt,name=decimal_low,json=decimalLow" json:"decimal_low,omitempty"`
	DecimalHigh *uint64                `protobuf:"varint,4,opt,name=decimal_high,json=decimalHigh" json:"decimal_high,omitempty"`
}

func (x *NumberNodeArchive) Reset() {
	*x = NumberNodeArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NumberNodeArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumberNodeArchive) ProtoMessage() {}

func (x *NumberNodeArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumberNodeArchive.ProtoReflect.Descriptor instead.
func (*NumberNodeArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{81}
}

func (x *NumberNodeArchive) GetSuper() *ExpressionNodeArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *NumberNodeArchive) GetNumber() float64 {
	if x != nil && x.Number != nil {
		return *x.Number
	}
	return 0
}

func (x *NumberNodeArchive) GetDecimalLow() uint64 {
	if x != nil && x.DecimalLow != nil {
		return *x.DecimalLow
	}
	return 0
}

func (x *NumberNodeArchive) GetDecimalHigh() uint64 {
	if x != nil && x.DecimalHigh != nil {
		return *x.DecimalHigh
	}
	return 0
}

type StringNodeArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *ExpressionNodeArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Value *string                `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
}

func (x *StringNodeArchive) Reset() {
	*x = StringNodeArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringNodeArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringNodeArchive) ProtoMessage() {}

func (x *StringNodeArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringNodeArchive.ProtoReflect.Descriptor instead.
func (*StringNodeArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{82}
}

func (x *StringNodeArchive) GetSuper() *ExpressionNodeArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *StringNodeArchive) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type IdentifierNodeArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super      *ExpressionNodeArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Identifier *string                `protobuf:"bytes,2,opt,name=identifier" json:"identifier,omitempty"`
	Symbol     *uint32                `protobuf:"varint,3,opt,name=symbol" json:"symbol,omitempty"`
}

func (x *IdentifierNodeArchive) Reset() {
	*x = IdentifierNodeArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentifierNodeArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentifierNodeArchive) ProtoMessage() {}

func (x *IdentifierNodeArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentifierNodeArchive.ProtoReflect.Descriptor instead.
func (*IdentifierNodeArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{83}
}

func (x *IdentifierNodeArchive) GetSuper() *ExpressionNodeArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *IdentifierNodeArchive) GetIdentifier() string {
	if x != nil && x.Identifier != nil {
		return *x.Identifier
	}
	return ""
}

func (x *IdentifierNodeArchive) GetSymbol() uint32 {
	if x != nil && x.Symbol != nil {
		return *x.Symbol
	}
	return 0
}

type ArrayNodeArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super   *ExpressionNodeArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Columns *uint32                `protobuf:"varint,2,opt,name=columns" json:"columns,omitempty"`
	Rows    *uint32                `protobuf:"varint,3,opt,name=rows" json:"rows,omitempty"`
}

func (x *ArrayNodeArchive) Reset() {
	*x = ArrayNodeArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArrayNodeArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArrayNodeArchive) ProtoMessage() {}

func (x *ArrayNodeArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArrayNodeArchive.ProtoReflect.Descriptor instead.
func (*ArrayNodeArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{84}
}

func (x *ArrayNodeArchive) GetSuper() *ExpressionNodeArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *ArrayNodeArchive) GetColumns() uint32 {
	if x != nil && x.Columns != nil {
		return *x.Columns
	}
	return 0
}

func (x *ArrayNodeArchive) GetRows() uint32 {
	if x != nil && x.Rows != nil {
		return *x.Rows
	}
	return 0
}

type ListNodeArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *ExpressionNodeArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
}

func (x *ListNodeArchive) Reset() {
	*x = ListNodeArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNodeArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNodeArchive) ProtoMessage() {}

func (x *ListNodeArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNodeArchive.ProtoReflect.Descriptor instead.
func (*ListNodeArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{85}
}

func (x *ListNodeArchive) GetSuper() *ExpressionNodeArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

type OperatorNodeArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super        *ExpressionNodeArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	OperatorChar *uint32                `protobuf:"varint,2,req,name=operatorChar" json:"operatorChar,omitempty"`
}

func (x *OperatorNodeArchive) Reset() {
	*x = OperatorNodeArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperatorNodeArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorNodeArchive) ProtoMessage() {}

func (x *OperatorNodeArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorNodeArchive.ProtoReflect.Descriptor instead.
func (*OperatorNodeArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{86}
}

func (x *OperatorNodeArchive) GetSuper() *ExpressionNodeArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *OperatorNodeArchive) GetOperatorChar() uint32 {
	if x != nil && x.OperatorChar != nil {
		return *x.OperatorChar
	}
	return 0
}

type PostfixOperatorNodeArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *OperatorNodeArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
}

func (x *PostfixOperatorNodeArchive) Reset() {
	*x = PostfixOperatorNodeArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostfixOperatorNodeArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostfixOperatorNodeArchive) ProtoMessage() {}

func (x *PostfixOperatorNodeArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostfixOperatorNodeArchive.ProtoReflect.Descriptor instead.
func (*PostfixOperatorNodeArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{87}
}

func (x *PostfixOperatorNodeArchive) GetSuper() *OperatorNodeArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

type PrefixOperatorNodeArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *OperatorNodeArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
}

func (x *PrefixOperatorNodeArchive) Reset() {
	*x = PrefixOperatorNodeArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrefixOperatorNodeArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrefixOperatorNodeArchive) ProtoMessage() {}

func (x *PrefixOperatorNodeArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrefixOperatorNodeArchive.ProtoReflect.Descriptor instead.
func (*PrefixOperatorNodeArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{88}
}

func (x *PrefixOperatorNodeArchive) GetSuper() *OperatorNodeArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

type FunctionNodeArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super               *ExpressionNodeArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	FunctionIndex       *uint32                `protobuf:"varint,2,req,name=functionIndex" json:"functionIndex,omitempty"`
	InvalidFunctionName *string                `protobuf:"bytes,3,opt,name=invalidFunctionName" json:"invalidFunctionName,omitempty"`
}

func (x *FunctionNodeArchive) Reset() {
	*x = FunctionNodeArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunctionNodeArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionNodeArchive) ProtoMessage() {}

func (x *FunctionNodeArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionNodeArchive.ProtoReflect.Descriptor instead.
func (*FunctionNodeArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{89}
}

func (x *FunctionNodeArchive) GetSuper() *ExpressionNodeArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *FunctionNodeArchive) GetFunctionIndex() uint32 {
	if x != nil && x.FunctionIndex != nil {
		return *x.FunctionIndex
	}
	return 0
}

func (x *FunctionNodeArchive) GetInvalidFunctionName() string {
	if x != nil && x.InvalidFunctionName != nil {
		return *x.InvalidFunctionName
	}
	return ""
}

type FunctionEndNodeArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *ExpressionNodeArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
}

func (x *FunctionEndNodeArchive) Reset() {
	*x = FunctionEndNodeArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunctionEndNodeArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionEndNodeArchive) ProtoMessage() {}

func (x *FunctionEndNodeArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionEndNodeArchive.ProtoReflect.Descriptor instead.
func (*FunctionEndNodeArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{90}
}

func (x *FunctionEndNodeArchive) GetSuper() *ExpressionNodeArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

type DateNodeArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super  *ExpressionNodeArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Value  *string                `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
	Format *string                `protobuf:"bytes,3,opt,name=format" json:"format,omitempty"`
}

func (x *DateNodeArchive) Reset() {
	*x = DateNodeArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DateNodeArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateNodeArchive) ProtoMessage() {}

func (x *DateNodeArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateNodeArchive.ProtoReflect.Descriptor instead.
func (*DateNodeArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{91}
}

func (x *DateNodeArchive) GetSuper() *ExpressionNodeArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *DateNodeArchive) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *DateNodeArchive) GetFormat() string {
	if x != nil && x.Format != nil {
		return *x.Format
	}
	return ""
}

type ReferenceNodeArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super            *ExpressionNodeArchive    `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	RangeReference   *RangeReferenceArchive    `protobuf:"bytes,2,opt,name=rangeReference" json:"rangeReference,omitempty"`
	PreserveFlags    *uint32                   `protobuf:"varint,3,req,name=preserve_flags,json=preserveFlags" json:"preserve_flags,omitempty"`
	HostTableID      *string                   `protobuf:"bytes,4,opt,name=hostTableID" json:"hostTableID,omitempty"`
	HostCellRef      *CellReferenceArchive     `protobuf:"bytes,10,opt,name=host_cell_ref,json=hostCellRef" json:"host_cell_ref,omitempty"`
	TableUid         *UUID                     `protobuf:"bytes,5,opt,name=table_uid,json=tableUid" json:"table_uid,omitempty"`
	RangeTopLeft     *UUIDCoordArchive         `protobuf:"bytes,6,opt,name=range_top_left,json=rangeTopLeft" json:"range_top_left,omitempty"`
	RangeBottomRight *UUIDCoordArchive         `protobuf:"bytes,7,opt,name=range_bottom_right,json=rangeBottomRight" json:"range_bottom_right,omitempty"`
	CategoryRef      *CategoryReferenceArchive `protobuf:"bytes,8,opt,name=category_ref,json=categoryRef" json:"category_ref,omitempty"`
	UidRangeRect     *UUIDRectArchive          `protobuf:"bytes,9,opt,name=uid_range_rect,json=uidRangeRect" json:"uid_range_rect,omitempty"`
}

func (x *ReferenceNodeArchive) Reset() {
	*x = ReferenceNodeArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferenceNodeArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferenceNodeArchive) ProtoMessage() {}

func (x *ReferenceNodeArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferenceNodeArchive.ProtoReflect.Descriptor instead.
func (*ReferenceNodeArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{92}
}

func (x *ReferenceNodeArchive) GetSuper() *ExpressionNodeArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *ReferenceNodeArchive) GetRangeReference() *RangeReferenceArchive {
	if x != nil {
		return x.RangeReference
	}
	return nil
}

func (x *ReferenceNodeArchive) GetPreserveFlags() uint32 {
	if x != nil && x.PreserveFlags != nil {
		return *x.PreserveFlags
	}
	return 0
}

func (x *ReferenceNodeArchive) GetHostTableID() string {
	if x != nil && x.HostTableID != nil {
		return *x.HostTableID
	}
	return ""
}

func (x *ReferenceNodeArchive) GetHostCellRef() *CellReferenceArchive {
	if x != nil {
		return x.HostCellRef
	}
	return nil
}

func (x *ReferenceNodeArchive) GetTableUid() *UUID {
	if x != nil {
		return x.TableUid
	}
	return nil
}

func (x *ReferenceNodeArchive) GetRangeTopLeft() *UUIDCoordArchive {
	if x != nil {
		return x.RangeTopLeft
	}
	return nil
}

func (x *ReferenceNodeArchive) GetRangeBottomRight() *UUIDCoordArchive {
	if x != nil {
		return x.RangeBottomRight
	}
	return nil
}

func (x *ReferenceNodeArchive) GetCategoryRef() *CategoryReferenceArchive {
	if x != nil {
		return x.CategoryRef
	}
	return nil
}

func (x *ReferenceNodeArchive) GetUidRangeRect() *UUIDRectArchive {
	if x != nil {
		return x.UidRangeRect
	}
	return nil
}

type DurationNodeArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super        *ExpressionNodeArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Timeinterval *float64               `protobuf:"fixed64,2,req,name=timeinterval" json:"timeinterval,omitempty"`
	Smallest     *uint32                `protobuf:"varint,3,req,name=smallest" json:"smallest,omitempty"`
	Largest      *uint32                `protobuf:"varint,4,req,name=largest" json:"largest,omitempty"`
	Style        *uint32                `protobuf:"varint,5,req,name=style" json:"style,omitempty"`
}

func (x *DurationNodeArchive) Reset() {
	*x = DurationNodeArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DurationNodeArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DurationNodeArchive) ProtoMessage() {}

func (x *DurationNodeArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DurationNodeArchive.ProtoReflect.Descriptor instead.
func (*DurationNodeArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{93}
}

func (x *DurationNodeArchive) GetSuper() *ExpressionNodeArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *DurationNodeArchive) GetTimeinterval() float64 {
	if x != nil && x.Timeinterval != nil {
		return *x.Timeinterval
	}
	return 0
}

func (x *DurationNodeArchive) GetSmallest() uint32 {
	if x != nil && x.Smallest != nil {
		return *x.Smallest
	}
	return 0
}

func (x *DurationNodeArchive) GetLargest() uint32 {
	if x != nil && x.Largest != nil {
		return *x.Largest
	}
	return 0
}

func (x *DurationNodeArchive) GetStyle() uint32 {
	if x != nil && x.Style != nil {
		return *x.Style
	}
	return 0
}

type ArgumentPlaceholderNodeArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super         *ExpressionNodeArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	FunctionIndex *uint32                `protobuf:"varint,2,opt,name=functionIndex" json:"functionIndex,omitempty"`
	ArgumentIndex *uint32                `protobuf:"varint,3,opt,name=argumentIndex" json:"argumentIndex,omitempty"`
	Mode          *uint32                `protobuf:"varint,4,opt,name=mode" json:"mode,omitempty"`
}

func (x *ArgumentPlaceholderNodeArchive) Reset() {
	*x = ArgumentPlaceholderNodeArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArgumentPlaceholderNodeArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArgumentPlaceholderNodeArchive) ProtoMessage() {}

func (x *ArgumentPlaceholderNodeArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArgumentPlaceholderNodeArchive.ProtoReflect.Descriptor instead.
func (*ArgumentPlaceholderNodeArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{94}
}

func (x *ArgumentPlaceholderNodeArchive) GetSuper() *ExpressionNodeArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *ArgumentPlaceholderNodeArchive) GetFunctionIndex() uint32 {
	if x != nil && x.FunctionIndex != nil {
		return *x.FunctionIndex
	}
	return 0
}

func (x *ArgumentPlaceholderNodeArchive) GetArgumentIndex() uint32 {
	if x != nil && x.ArgumentIndex != nil {
		return *x.ArgumentIndex
	}
	return 0
}

func (x *ArgumentPlaceholderNodeArchive) GetMode() uint32 {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return 0
}

type EmptyExpressionNodeArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *ExpressionNodeArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
}

func (x *EmptyExpressionNodeArchive) Reset() {
	*x = EmptyExpressionNodeArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyExpressionNodeArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyExpressionNodeArchive) ProtoMessage() {}

func (x *EmptyExpressionNodeArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyExpressionNodeArchive.ProtoReflect.Descriptor instead.
func (*EmptyExpressionNodeArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{95}
}

func (x *EmptyExpressionNodeArchive) GetSuper() *ExpressionNodeArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

type LetNodeArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                     *ExpressionNodeArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	WhitespaceAfterLet        *string                `protobuf:"bytes,2,opt,name=whitespace_after_let,json=whitespaceAfterLet" json:"whitespace_after_let,omitempty"`
	WhitespaceAfterIdentifier *string                `protobuf:"bytes,3,opt,name=whitespace_after_identifier,json=whitespaceAfterIdentifier" json:"whitespace_after_identifier,omitempty"`
	WhitespaceAfterEquals     *string                `protobuf:"bytes,4,opt,name=whitespace_after_equals,json=whitespaceAfterEquals" json:"whitespace_after_equals,omitempty"`
	WhitespaceAfterDelimiter  *string                `protobuf:"bytes,5,opt,name=whitespace_after_delimiter,json=whitespaceAfterDelimiter" json:"whitespace_after_delimiter,omitempty"`
}

func (x *LetNodeArchive) Reset() {
	*x = LetNodeArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LetNodeArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LetNodeArchive) ProtoMessage() {}

func (x *LetNodeArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LetNodeArchive.ProtoReflect.Descriptor instead.
func (*LetNodeArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{96}
}

func (x *LetNodeArchive) GetSuper() *ExpressionNodeArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *LetNodeArchive) GetWhitespaceAfterLet() string {
	if x != nil && x.WhitespaceAfterLet != nil {
		return *x.WhitespaceAfterLet
	}
	return ""
}

func (x *LetNodeArchive) GetWhitespaceAfterIdentifier() string {
	if x != nil && x.WhitespaceAfterIdentifier != nil {
		return *x.WhitespaceAfterIdentifier
	}
	return ""
}

func (x *LetNodeArchive) GetWhitespaceAfterEquals() string {
	if x != nil && x.WhitespaceAfterEquals != nil {
		return *x.WhitespaceAfterEquals
	}
	return ""
}

func (x *LetNodeArchive) GetWhitespaceAfterDelimiter() string {
	if x != nil && x.WhitespaceAfterDelimiter != nil {
		return *x.WhitespaceAfterDelimiter
	}
	return ""
}

type InNodeArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *ExpressionNodeArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
}

func (x *InNodeArchive) Reset() {
	*x = InNodeArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InNodeArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InNodeArchive) ProtoMessage() {}

func (x *InNodeArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InNodeArchive.ProtoReflect.Descriptor instead.
func (*InNodeArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{97}
}

func (x *InNodeArchive) GetSuper() *ExpressionNodeArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

type VariableNodeArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super      *ExpressionNodeArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Identifier *string                `protobuf:"bytes,2,req,name=identifier" json:"identifier,omitempty"`
	Symbol     *uint32                `protobuf:"varint,3,req,name=symbol" json:"symbol,omitempty"`
}

func (x *VariableNodeArchive) Reset() {
	*x = VariableNodeArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VariableNodeArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VariableNodeArchive) ProtoMessage() {}

func (x *VariableNodeArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VariableNodeArchive.ProtoReflect.Descriptor instead.
func (*VariableNodeArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{98}
}

func (x *VariableNodeArchive) GetSuper() *ExpressionNodeArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *VariableNodeArchive) GetIdentifier() string {
	if x != nil && x.Identifier != nil {
		return *x.Identifier
	}
	return ""
}

func (x *VariableNodeArchive) GetSymbol() uint32 {
	if x != nil && x.Symbol != nil {
		return *x.Symbol
	}
	return 0
}

type LayoutHintArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsValid           *bool      `protobuf:"varint,1,req,name=isValid" json:"isValid,omitempty"`
	CellRange         *CellRange `protobuf:"bytes,2,opt,name=cellRange" json:"cellRange,omitempty"`
	HintID            *CellID    `protobuf:"bytes,3,opt,name=hintID" json:"hintID,omitempty"`
	MaximumSize       *Size      `protobuf:"bytes,4,req,name=maximumSize" json:"maximumSize,omitempty"`
	PartitionPosition *uint32    `protobuf:"varint,5,req,name=partitionPosition" json:"partitionPosition,omitempty"`
	Horizontal        *bool      `protobuf:"varint,6,req,name=horizontal" json:"horizontal,omitempty"`
	EffectiveSize     *Size      `protobuf:"bytes,7,opt,name=effectiveSize" json:"effectiveSize,omitempty"`
	PartitioningPass  *uint32    `protobuf:"varint,8,opt,name=partitioningPass" json:"partitioningPass,omitempty"`
}

func (x *LayoutHintArchive) Reset() {
	*x = LayoutHintArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LayoutHintArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LayoutHintArchive) ProtoMessage() {}

func (x *LayoutHintArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LayoutHintArchive.ProtoReflect.Descriptor instead.
func (*LayoutHintArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{99}
}

func (x *LayoutHintArchive) GetIsValid() bool {
	if x != nil && x.IsValid != nil {
		return *x.IsValid
	}
	return false
}

func (x *LayoutHintArchive) GetCellRange() *CellRange {
	if x != nil {
		return x.CellRange
	}
	return nil
}

func (x *LayoutHintArchive) GetHintID() *CellID {
	if x != nil {
		return x.HintID
	}
	return nil
}

func (x *LayoutHintArchive) GetMaximumSize() *Size {
	if x != nil {
		return x.MaximumSize
	}
	return nil
}

func (x *LayoutHintArchive) GetPartitionPosition() uint32 {
	if x != nil && x.PartitionPosition != nil {
		return *x.PartitionPosition
	}
	return 0
}

func (x *LayoutHintArchive) GetHorizontal() bool {
	if x != nil && x.Horizontal != nil {
		return *x.Horizontal
	}
	return false
}

func (x *LayoutHintArchive) GetEffectiveSize() *Size {
	if x != nil {
		return x.EffectiveSize
	}
	return nil
}

func (x *LayoutHintArchive) GetPartitioningPass() uint32 {
	if x != nil && x.PartitioningPass != nil {
		return *x.PartitioningPass
	}
	return 0
}

type CompletionTokenAttachmentArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super          *TokenAttachmentArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	CompletionText *string                 `protobuf:"bytes,2,opt,name=completionText" json:"completionText,omitempty"`
	CaretPosition  *uint32                 `protobuf:"varint,3,opt,name=caretPosition" json:"caretPosition,omitempty"`
	PrefixStart    *uint32                 `protobuf:"varint,4,opt,name=prefixStart" json:"prefixStart,omitempty"`
}

func (x *CompletionTokenAttachmentArchive) Reset() {
	*x = CompletionTokenAttachmentArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompletionTokenAttachmentArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompletionTokenAttachmentArchive) ProtoMessage() {}

func (x *CompletionTokenAttachmentArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompletionTokenAttachmentArchive.ProtoReflect.Descriptor instead.
func (*CompletionTokenAttachmentArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{100}
}

func (x *CompletionTokenAttachmentArchive) GetSuper() *TokenAttachmentArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CompletionTokenAttachmentArchive) GetCompletionText() string {
	if x != nil && x.CompletionText != nil {
		return *x.CompletionText
	}
	return ""
}

func (x *CompletionTokenAttachmentArchive) GetCaretPosition() uint32 {
	if x != nil && x.CaretPosition != nil {
		return *x.CaretPosition
	}
	return 0
}

func (x *CompletionTokenAttachmentArchive) GetPrefixStart() uint32 {
	if x != nil && x.PrefixStart != nil {
		return *x.PrefixStart
	}
	return 0
}

type HiddenStateFormulaOwnerArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerId                         *CFUUIDArchive      `protobuf:"bytes,1,opt,name=owner_id,json=ownerId" json:"owner_id,omitempty"`
	ThresholdValue                  []*CellValueArchive `protobuf:"bytes,2,rep,name=threshold_value,json=thresholdValue" json:"threshold_value,omitempty"`
	NeedsToUpdateFilterSetForImport *bool               `protobuf:"varint,3,opt,name=needs_to_update_filter_set_for_import,json=needsToUpdateFilterSetForImport,def=0" json:"needs_to_update_filter_set_for_import,omitempty"`
}

// Default values for HiddenStateFormulaOwnerArchive fields.
const (
	Default_HiddenStateFormulaOwnerArchive_NeedsToUpdateFilterSetForImport = bool(false)
)

func (x *HiddenStateFormulaOwnerArchive) Reset() {
	*x = HiddenStateFormulaOwnerArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HiddenStateFormulaOwnerArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HiddenStateFormulaOwnerArchive) ProtoMessage() {}

func (x *HiddenStateFormulaOwnerArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HiddenStateFormulaOwnerArchive.ProtoReflect.Descriptor instead.
func (*HiddenStateFormulaOwnerArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{101}
}

func (x *HiddenStateFormulaOwnerArchive) GetOwnerId() *CFUUIDArchive {
	if x != nil {
		return x.OwnerId
	}
	return nil
}

func (x *HiddenStateFormulaOwnerArchive) GetThresholdValue() []*CellValueArchive {
	if x != nil {
		return x.ThresholdValue
	}
	return nil
}

func (x *HiddenStateFormulaOwnerArchive) GetNeedsToUpdateFilterSetForImport() bool {
	if x != nil && x.NeedsToUpdateFilterSetForImport != nil {
		return *x.NeedsToUpdateFilterSetForImport
	}
	return Default_HiddenStateFormulaOwnerArchive_NeedsToUpdateFilterSetForImport
}

type FormulaStoreArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextFormulaIndex *uint32                                 `protobuf:"varint,2,req,name=next_formula_index,json=nextFormulaIndex" json:"next_formula_index,omitempty"`
	Formulas         []*FormulaStoreArchive_FormulaStorePair `protobuf:"bytes,3,rep,name=formulas" json:"formulas,omitempty"`
}

func (x *FormulaStoreArchive) Reset() {
	*x = FormulaStoreArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormulaStoreArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormulaStoreArchive) ProtoMessage() {}

func (x *FormulaStoreArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormulaStoreArchive.ProtoReflect.Descriptor instead.
func (*FormulaStoreArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{102}
}

func (x *FormulaStoreArchive) GetNextFormulaIndex() uint32 {
	if x != nil && x.NextFormulaIndex != nil {
		return *x.NextFormulaIndex
	}
	return 0
}

func (x *FormulaStoreArchive) GetFormulas() []*FormulaStoreArchive_FormulaStorePair {
	if x != nil {
		return x.Formulas
	}
	return nil
}

type MergeOperationArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MergeType           *MergeActionArchive `protobuf:"varint,1,req,name=merge_type,json=mergeType,enum=TST.MergeActionArchive" json:"merge_type,omitempty"`
	MergeRanges         []*UUIDRectArchive  `protobuf:"bytes,2,rep,name=merge_ranges,json=mergeRanges" json:"merge_ranges,omitempty"`
	MergeFormulas       []*FormulaArchive   `protobuf:"bytes,3,rep,name=merge_formulas,json=mergeFormulas" json:"merge_formulas,omitempty"`
	MergeFormulaIndexes []uint32            `protobuf:"varint,4,rep,name=merge_formula_indexes,json=mergeFormulaIndexes" json:"merge_formula_indexes,omitempty"`
}

func (x *MergeOperationArchive) Reset() {
	*x = MergeOperationArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergeOperationArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeOperationArchive) ProtoMessage() {}

func (x *MergeOperationArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeOperationArchive.ProtoReflect.Descriptor instead.
func (*MergeOperationArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{103}
}

func (x *MergeOperationArchive) GetMergeType() MergeActionArchive {
	if x != nil && x.MergeType != nil {
		return *x.MergeType
	}
	return MergeActionArchive_mergeActionInsert
}

func (x *MergeOperationArchive) GetMergeRanges() []*UUIDRectArchive {
	if x != nil {
		return x.MergeRanges
	}
	return nil
}

func (x *MergeOperationArchive) GetMergeFormulas() []*FormulaArchive {
	if x != nil {
		return x.MergeFormulas
	}
	return nil
}

func (x *MergeOperationArchive) GetMergeFormulaIndexes() []uint32 {
	if x != nil {
		return x.MergeFormulaIndexes
	}
	return nil
}

type MergeOwnerArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerId      *CFUUIDArchive       `protobuf:"bytes,1,req,name=owner_id,json=ownerId" json:"owner_id,omitempty"`
	FormulaStore *FormulaStoreArchive `protobuf:"bytes,2,opt,name=formula_store,json=formulaStore" json:"formula_store,omitempty"`
}

func (x *MergeOwnerArchive) Reset() {
	*x = MergeOwnerArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergeOwnerArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeOwnerArchive) ProtoMessage() {}

func (x *MergeOwnerArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeOwnerArchive.ProtoReflect.Descriptor instead.
func (*MergeOwnerArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{104}
}

func (x *MergeOwnerArchive) GetOwnerId() *CFUUIDArchive {
	if x != nil {
		return x.OwnerId
	}
	return nil
}

func (x *MergeOwnerArchive) GetFormulaStore() *FormulaStoreArchive {
	if x != nil {
		return x.FormulaStore
	}
	return nil
}

type TSTPencilAnnotationArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableInfo               *Reference `protobuf:"bytes,1,opt,name=table_info,json=tableInfo" json:"table_info,omitempty"`
	PencilAnnotationStorage *Reference `protobuf:"bytes,2,opt,name=pencil_annotation_storage,json=pencilAnnotationStorage" json:"pencil_annotation_storage,omitempty"`
}

func (x *TSTPencilAnnotationArchive) Reset() {
	*x = TSTPencilAnnotationArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSTPencilAnnotationArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSTPencilAnnotationArchive) ProtoMessage() {}

func (x *TSTPencilAnnotationArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSTPencilAnnotationArchive.ProtoReflect.Descriptor instead.
func (*TSTPencilAnnotationArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{105}
}

func (x *TSTPencilAnnotationArchive) GetTableInfo() *Reference {
	if x != nil {
		return x.TableInfo
	}
	return nil
}

func (x *TSTPencilAnnotationArchive) GetPencilAnnotationStorage() *Reference {
	if x != nil {
		return x.PencilAnnotationStorage
	}
	return nil
}

type PencilAnnotationOwnerArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerId      *CFUUIDArchive       `protobuf:"bytes,1,req,name=owner_id,json=ownerId" json:"owner_id,omitempty"`
	FormulaStore *FormulaStoreArchive `protobuf:"bytes,2,opt,name=formula_store,json=formulaStore" json:"formula_store,omitempty"`
	Annotations  []*Reference         `protobuf:"bytes,3,rep,name=annotations" json:"annotations,omitempty"`
}

func (x *PencilAnnotationOwnerArchive) Reset() {
	*x = PencilAnnotationOwnerArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PencilAnnotationOwnerArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PencilAnnotationOwnerArchive) ProtoMessage() {}

func (x *PencilAnnotationOwnerArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PencilAnnotationOwnerArchive.ProtoReflect.Descriptor instead.
func (*PencilAnnotationOwnerArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{106}
}

func (x *PencilAnnotationOwnerArchive) GetOwnerId() *CFUUIDArchive {
	if x != nil {
		return x.OwnerId
	}
	return nil
}

func (x *PencilAnnotationOwnerArchive) GetFormulaStore() *FormulaStoreArchive {
	if x != nil {
		return x.FormulaStore
	}
	return nil
}

func (x *PencilAnnotationOwnerArchive) GetAnnotations() []*Reference {
	if x != nil {
		return x.Annotations
	}
	return nil
}

type AccumulatorArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BoolCount             *uint32           `protobuf:"varint,1,opt,name=bool_count,json=boolCount" json:"bool_count,omitempty"`
	NumberCount           *uint32           `protobuf:"varint,2,opt,name=number_count,json=numberCount" json:"number_count,omitempty"`
	DateCount             *uint32           `protobuf:"varint,3,opt,name=date_count,json=dateCount" json:"date_count,omitempty"`
	DurationCount         *uint32           `protobuf:"varint,4,opt,name=duration_count,json=durationCount" json:"duration_count,omitempty"`
	StringCount           *uint32           `protobuf:"varint,5,opt,name=string_count,json=stringCount" json:"string_count,omitempty"`
	MinValue              *CellValueArchive `protobuf:"bytes,6,req,name=min_value,json=minValue" json:"min_value,omitempty"`
	MaxValue              *CellValueArchive `protobuf:"bytes,7,req,name=max_value,json=maxValue" json:"max_value,omitempty"`
	NumberTotalValue      *CellValueArchive `protobuf:"bytes,8,req,name=number_total_value,json=numberTotalValue" json:"number_total_value,omitempty"`
	FirstDateSeen         *CellValueArchive `protobuf:"bytes,9,opt,name=first_date_seen,json=firstDateSeen" json:"first_date_seen,omitempty"`
	TotalSecsSinceRefDate *float64          `protobuf:"fixed64,10,opt,name=total_secs_since_ref_date,json=totalSecsSinceRefDate" json:"total_secs_since_ref_date,omitempty"`
	SecsToAdd             *float64          `protobuf:"fixed64,11,opt,name=secs_to_add,json=secsToAdd" json:"secs_to_add,omitempty"`
	BoolTrueCount         *uint32           `protobuf:"varint,12,opt,name=bool_true_count,json=boolTrueCount" json:"bool_true_count,omitempty"`
	ErrorCount            *uint32           `protobuf:"varint,13,opt,name=error_count,json=errorCount" json:"error_count,omitempty"`
	IsCircularRef         *bool             `protobuf:"varint,14,opt,name=is_circular_ref,json=isCircularRef" json:"is_circular_ref,omitempty"`
	ProductValue          *CellValueArchive `protobuf:"bytes,15,opt,name=product_value,json=productValue" json:"product_value,omitempty"`
	NoContentCount        *uint32           `protobuf:"varint,16,opt,name=no_content_count,json=noContentCount" json:"no_content_count,omitempty"`
}

func (x *AccumulatorArchive) Reset() {
	*x = AccumulatorArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccumulatorArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccumulatorArchive) ProtoMessage() {}

func (x *AccumulatorArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccumulatorArchive.ProtoReflect.Descriptor instead.
func (*AccumulatorArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{107}
}

func (x *AccumulatorArchive) GetBoolCount() uint32 {
	if x != nil && x.BoolCount != nil {
		return *x.BoolCount
	}
	return 0
}

func (x *AccumulatorArchive) GetNumberCount() uint32 {
	if x != nil && x.NumberCount != nil {
		return *x.NumberCount
	}
	return 0
}

func (x *AccumulatorArchive) GetDateCount() uint32 {
	if x != nil && x.DateCount != nil {
		return *x.DateCount
	}
	return 0
}

func (x *AccumulatorArchive) GetDurationCount() uint32 {
	if x != nil && x.DurationCount != nil {
		return *x.DurationCount
	}
	return 0
}

func (x *AccumulatorArchive) GetStringCount() uint32 {
	if x != nil && x.StringCount != nil {
		return *x.StringCount
	}
	return 0
}

func (x *AccumulatorArchive) GetMinValue() *CellValueArchive {
	if x != nil {
		return x.MinValue
	}
	return nil
}

func (x *AccumulatorArchive) GetMaxValue() *CellValueArchive {
	if x != nil {
		return x.MaxValue
	}
	return nil
}

func (x *AccumulatorArchive) GetNumberTotalValue() *CellValueArchive {
	if x != nil {
		return x.NumberTotalValue
	}
	return nil
}

func (x *AccumulatorArchive) GetFirstDateSeen() *CellValueArchive {
	if x != nil {
		return x.FirstDateSeen
	}
	return nil
}

func (x *AccumulatorArchive) GetTotalSecsSinceRefDate() float64 {
	if x != nil && x.TotalSecsSinceRefDate != nil {
		return *x.TotalSecsSinceRefDate
	}
	return 0
}

func (x *AccumulatorArchive) GetSecsToAdd() float64 {
	if x != nil && x.SecsToAdd != nil {
		return *x.SecsToAdd
	}
	return 0
}

func (x *AccumulatorArchive) GetBoolTrueCount() uint32 {
	if x != nil && x.BoolTrueCount != nil {
		return *x.BoolTrueCount
	}
	return 0
}

func (x *AccumulatorArchive) GetErrorCount() uint32 {
	if x != nil && x.ErrorCount != nil {
		return *x.ErrorCount
	}
	return 0
}

func (x *AccumulatorArchive) GetIsCircularRef() bool {
	if x != nil && x.IsCircularRef != nil {
		return *x.IsCircularRef
	}
	return false
}

func (x *AccumulatorArchive) GetProductValue() *CellValueArchive {
	if x != nil {
		return x.ProductValue
	}
	return nil
}

func (x *AccumulatorArchive) GetNoContentCount() uint32 {
	if x != nil && x.NoContentCount != nil {
		return *x.NoContentCount
	}
	return 0
}

type GroupColumnArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColumnUid         *UUID           `protobuf:"bytes,1,req,name=column_uid,json=columnUid" json:"column_uid,omitempty"`
	GroupingType      *uint32         `protobuf:"varint,2,req,name=grouping_type,json=groupingType" json:"grouping_type,omitempty"`
	GroupingFunctor   *FunctorArchive `protobuf:"bytes,3,opt,name=grouping_functor,json=groupingFunctor" json:"grouping_functor,omitempty"`
	GroupingColumnUid *UUID           `protobuf:"bytes,4,opt,name=grouping_column_uid,json=groupingColumnUid" json:"grouping_column_uid,omitempty"`
}

func (x *GroupColumnArchive) Reset() {
	*x = GroupColumnArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupColumnArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupColumnArchive) ProtoMessage() {}

func (x *GroupColumnArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupColumnArchive.ProtoReflect.Descriptor instead.
func (*GroupColumnArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{108}
}

func (x *GroupColumnArchive) GetColumnUid() *UUID {
	if x != nil {
		return x.ColumnUid
	}
	return nil
}

func (x *GroupColumnArchive) GetGroupingType() uint32 {
	if x != nil && x.GroupingType != nil {
		return *x.GroupingType
	}
	return 0
}

func (x *GroupColumnArchive) GetGroupingFunctor() *FunctorArchive {
	if x != nil {
		return x.GroupingFunctor
	}
	return nil
}

func (x *GroupColumnArchive) GetGroupingColumnUid() *UUID {
	if x != nil {
		return x.GroupingColumnUid
	}
	return nil
}

type GroupColumnListArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupColumn []*GroupColumnArchive `protobuf:"bytes,1,rep,name=group_column,json=groupColumn" json:"group_column,omitempty"`
}

func (x *GroupColumnListArchive) Reset() {
	*x = GroupColumnListArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupColumnListArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupColumnListArchive) ProtoMessage() {}

func (x *GroupColumnListArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupColumnListArchive.ProtoReflect.Descriptor instead.
func (*GroupColumnListArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{109}
}

func (x *GroupColumnListArchive) GetGroupColumn() []*GroupColumnArchive {
	if x != nil {
		return x.GroupColumn
	}
	return nil
}

type ColumnAggregateArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColumnUid                  *UUID   `protobuf:"bytes,1,req,name=column_uid,json=columnUid" json:"column_uid,omitempty"`
	Level                      *uint32 `protobuf:"varint,2,req,name=level" json:"level,omitempty"`
	AggType                    *uint32 `protobuf:"varint,3,req,name=agg_type,json=aggType" json:"agg_type,omitempty"`
	ShowAsType                 *uint32 `protobuf:"varint,4,opt,name=show_as_type,json=showAsType" json:"show_as_type,omitempty"`
	ColumnAggregateUid         *UUID   `protobuf:"bytes,5,opt,name=column_aggregate_uid,json=columnAggregateUid" json:"column_aggregate_uid,omitempty"`
	RunningTotalGroupColumnUid *UUID   `protobuf:"bytes,6,opt,name=running_total_group_column_uid,json=runningTotalGroupColumnUid" json:"running_total_group_column_uid,omitempty"`
}

func (x *ColumnAggregateArchive) Reset() {
	*x = ColumnAggregateArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnAggregateArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnAggregateArchive) ProtoMessage() {}

func (x *ColumnAggregateArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnAggregateArchive.ProtoReflect.Descriptor instead.
func (*ColumnAggregateArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{110}
}

func (x *ColumnAggregateArchive) GetColumnUid() *UUID {
	if x != nil {
		return x.ColumnUid
	}
	return nil
}

func (x *ColumnAggregateArchive) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *ColumnAggregateArchive) GetAggType() uint32 {
	if x != nil && x.AggType != nil {
		return *x.AggType
	}
	return 0
}

func (x *ColumnAggregateArchive) GetShowAsType() uint32 {
	if x != nil && x.ShowAsType != nil {
		return *x.ShowAsType
	}
	return 0
}

func (x *ColumnAggregateArchive) GetColumnAggregateUid() *UUID {
	if x != nil {
		return x.ColumnAggregateUid
	}
	return nil
}

func (x *ColumnAggregateArchive) GetRunningTotalGroupColumnUid() *UUID {
	if x != nil {
		return x.RunningTotalGroupColumnUid
	}
	return nil
}

type ColumnAggregateListArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Aggregates []*ColumnAggregateArchive `protobuf:"bytes,1,rep,name=aggregates" json:"aggregates,omitempty"`
}

func (x *ColumnAggregateListArchive) Reset() {
	*x = ColumnAggregateListArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnAggregateListArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnAggregateListArchive) ProtoMessage() {}

func (x *ColumnAggregateListArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnAggregateListArchive.ProtoReflect.Descriptor instead.
func (*ColumnAggregateListArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{111}
}

func (x *ColumnAggregateListArchive) GetAggregates() []*ColumnAggregateArchive {
	if x != nil {
		return x.Aggregates
	}
	return nil
}

type GroupByArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupByUid                           *UUID                               `protobuf:"bytes,1,req,name=group_by_uid,json=groupByUid" json:"group_by_uid,omitempty"`
	GroupColumn                          []*GroupColumnArchive               `protobuf:"bytes,2,rep,name=group_column,json=groupColumn" json:"group_column,omitempty"`
	GroupNodeRoot                        *GroupByArchive_GroupNodeArchive    `protobuf:"bytes,3,req,name=group_node_root,json=groupNodeRoot" json:"group_node_root,omitempty"`
	Aggregator                           []*GroupByArchive_AggregatorArchive `protobuf:"bytes,4,rep,name=aggregator" json:"aggregator,omitempty"`
	ColumnAggType                        []*ColumnAggregateArchive           `protobuf:"bytes,5,rep,name=column_agg_type,json=columnAggType" json:"column_agg_type,omitempty"`
	IsEnabled                            *bool                               `protobuf:"varint,6,req,name=is_enabled,json=isEnabled" json:"is_enabled,omitempty"`
	IndirectAggTypeChangeFormula         *CellCoordinateArchive              `protobuf:"bytes,7,opt,name=indirect_agg_type_change_formula,json=indirectAggTypeChangeFormula" json:"indirect_agg_type_change_formula,omitempty"`
	GroupingColumnsFormula               *CellCoordinateArchive              `protobuf:"bytes,8,opt,name=grouping_columns_formula,json=groupingColumnsFormula" json:"grouping_columns_formula,omitempty"`
	AggsInGroupRootFormula               *CellCoordinateArchive              `protobuf:"bytes,9,opt,name=aggs_in_group_root_formula,json=aggsInGroupRootFormula" json:"aggs_in_group_root_formula,omitempty"`
	GroupingColumnHeadersFormula         *CellCoordinateArchive              `protobuf:"bytes,10,opt,name=grouping_column_headers_formula,json=groupingColumnHeadersFormula" json:"grouping_column_headers_formula,omitempty"`
	ColumnOrderChangedFormula            *CellCoordinateArchive              `protobuf:"bytes,11,opt,name=column_order_changed_formula,json=columnOrderChangedFormula" json:"column_order_changed_formula,omitempty"`
	RowOrderChangedFormula               *CellCoordinateArchive              `protobuf:"bytes,12,opt,name=row_order_changed_formula,json=rowOrderChangedFormula" json:"row_order_changed_formula,omitempty"`
	RowOrderChangedIgnoringRecalcFormula *CellCoordinateArchive              `protobuf:"bytes,13,opt,name=row_order_changed_ignoring_recalc_formula,json=rowOrderChangedIgnoringRecalcFormula" json:"row_order_changed_ignoring_recalc_formula,omitempty"`
	OwnerIndex                           *int32                              `protobuf:"varint,14,opt,name=owner_index,json=ownerIndex,def=8" json:"owner_index,omitempty"`
	RowUidLookup                         *UidLookupListArchive               `protobuf:"bytes,15,opt,name=row_uid_lookup,json=rowUidLookup" json:"row_uid_lookup,omitempty"`
	HiddenStatesChangedFormula           *CellCoordinateArchive              `protobuf:"bytes,16,opt,name=hidden_states_changed_formula,json=hiddenStatesChangedFormula" json:"hidden_states_changed_formula,omitempty"`
}

// Default values for GroupByArchive fields.
const (
	Default_GroupByArchive_OwnerIndex = int32(8)
)

func (x *GroupByArchive) Reset() {
	*x = GroupByArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupByArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupByArchive) ProtoMessage() {}

func (x *GroupByArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupByArchive.ProtoReflect.Descriptor instead.
func (*GroupByArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{112}
}

func (x *GroupByArchive) GetGroupByUid() *UUID {
	if x != nil {
		return x.GroupByUid
	}
	return nil
}

func (x *GroupByArchive) GetGroupColumn() []*GroupColumnArchive {
	if x != nil {
		return x.GroupColumn
	}
	return nil
}

func (x *GroupByArchive) GetGroupNodeRoot() *GroupByArchive_GroupNodeArchive {
	if x != nil {
		return x.GroupNodeRoot
	}
	return nil
}

func (x *GroupByArchive) GetAggregator() []*GroupByArchive_AggregatorArchive {
	if x != nil {
		return x.Aggregator
	}
	return nil
}

func (x *GroupByArchive) GetColumnAggType() []*ColumnAggregateArchive {
	if x != nil {
		return x.ColumnAggType
	}
	return nil
}

func (x *GroupByArchive) GetIsEnabled() bool {
	if x != nil && x.IsEnabled != nil {
		return *x.IsEnabled
	}
	return false
}

func (x *GroupByArchive) GetIndirectAggTypeChangeFormula() *CellCoordinateArchive {
	if x != nil {
		return x.IndirectAggTypeChangeFormula
	}
	return nil
}

func (x *GroupByArchive) GetGroupingColumnsFormula() *CellCoordinateArchive {
	if x != nil {
		return x.GroupingColumnsFormula
	}
	return nil
}

func (x *GroupByArchive) GetAggsInGroupRootFormula() *CellCoordinateArchive {
	if x != nil {
		return x.AggsInGroupRootFormula
	}
	return nil
}

func (x *GroupByArchive) GetGroupingColumnHeadersFormula() *CellCoordinateArchive {
	if x != nil {
		return x.GroupingColumnHeadersFormula
	}
	return nil
}

func (x *GroupByArchive) GetColumnOrderChangedFormula() *CellCoordinateArchive {
	if x != nil {
		return x.ColumnOrderChangedFormula
	}
	return nil
}

func (x *GroupByArchive) GetRowOrderChangedFormula() *CellCoordinateArchive {
	if x != nil {
		return x.RowOrderChangedFormula
	}
	return nil
}

func (x *GroupByArchive) GetRowOrderChangedIgnoringRecalcFormula() *CellCoordinateArchive {
	if x != nil {
		return x.RowOrderChangedIgnoringRecalcFormula
	}
	return nil
}

func (x *GroupByArchive) GetOwnerIndex() int32 {
	if x != nil && x.OwnerIndex != nil {
		return *x.OwnerIndex
	}
	return Default_GroupByArchive_OwnerIndex
}

func (x *GroupByArchive) GetRowUidLookup() *UidLookupListArchive {
	if x != nil {
		return x.RowUidLookup
	}
	return nil
}

func (x *GroupByArchive) GetHiddenStatesChangedFormula() *CellCoordinateArchive {
	if x != nil {
		return x.HiddenStatesChangedFormula
	}
	return nil
}

type CategoryOwnerArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerUid *UUID             `protobuf:"bytes,1,req,name=owner_uid,json=ownerUid" json:"owner_uid,omitempty"`
	GroupBy  []*GroupByArchive `protobuf:"bytes,2,rep,name=group_by,json=groupBy" json:"group_by,omitempty"`
}

func (x *CategoryOwnerArchive) Reset() {
	*x = CategoryOwnerArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryOwnerArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryOwnerArchive) ProtoMessage() {}

func (x *CategoryOwnerArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryOwnerArchive.ProtoReflect.Descriptor instead.
func (*CategoryOwnerArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{113}
}

func (x *CategoryOwnerArchive) GetOwnerUid() *UUID {
	if x != nil {
		return x.OwnerUid
	}
	return nil
}

func (x *CategoryOwnerArchive) GetGroupBy() []*GroupByArchive {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

type CategoryOwnerRefArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupBy []*Reference `protobuf:"bytes,1,rep,name=group_by,json=groupBy" json:"group_by,omitempty"`
}

func (x *CategoryOwnerRefArchive) Reset() {
	*x = CategoryOwnerRefArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryOwnerRefArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryOwnerRefArchive) ProtoMessage() {}

func (x *CategoryOwnerRefArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryOwnerRefArchive.ProtoReflect.Descriptor instead.
func (*CategoryOwnerRefArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{114}
}

func (x *CategoryOwnerRefArchive) GetGroupBy() []*Reference {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

type PivotGroupingColumnOptionsMapArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uids              []*UUID  `protobuf:"bytes,1,rep,name=uids" json:"uids,omitempty"`
	Flags             []uint32 `protobuf:"varint,2,rep,name=flags" json:"flags,omitempty"`
	AggregateRuleUids []*UUID  `protobuf:"bytes,4,rep,name=aggregate_rule_uids,json=aggregateRuleUids" json:"aggregate_rule_uids,omitempty"`
}

func (x *PivotGroupingColumnOptionsMapArchive) Reset() {
	*x = PivotGroupingColumnOptionsMapArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PivotGroupingColumnOptionsMapArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PivotGroupingColumnOptionsMapArchive) ProtoMessage() {}

func (x *PivotGroupingColumnOptionsMapArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PivotGroupingColumnOptionsMapArchive.ProtoReflect.Descriptor instead.
func (*PivotGroupingColumnOptionsMapArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{115}
}

func (x *PivotGroupingColumnOptionsMapArchive) GetUids() []*UUID {
	if x != nil {
		return x.Uids
	}
	return nil
}

func (x *PivotGroupingColumnOptionsMapArchive) GetFlags() []uint32 {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *PivotGroupingColumnOptionsMapArchive) GetAggregateRuleUids() []*UUID {
	if x != nil {
		return x.AggregateRuleUids
	}
	return nil
}

type PivotOwnerArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PivotOwnerUid             *UUID                       `protobuf:"bytes,2,opt,name=pivot_owner_uid,json=pivotOwnerUid" json:"pivot_owner_uid,omitempty"`
	GroupingColumnsForRows    *GroupColumnListArchive     `protobuf:"bytes,3,opt,name=grouping_columns_for_rows,json=groupingColumnsForRows" json:"grouping_columns_for_rows,omitempty"`
	GroupingColumnsForColumns *GroupColumnListArchive     `protobuf:"bytes,4,opt,name=grouping_columns_for_columns,json=groupingColumnsForColumns" json:"grouping_columns_for_columns,omitempty"`
	AggregateColumns          *ColumnAggregateListArchive `protobuf:"bytes,5,opt,name=aggregate_columns,json=aggregateColumns" json:"aggregate_columns,omitempty"`
	FlatteningDimension       *int32                      `protobuf:"varint,6,opt,name=flattening_dimension,json=flatteningDimension" json:"flattening_dimension,omitempty"`
	IsEmptyPivot              *bool                       `protobuf:"varint,7,opt,name=is_empty_pivot,json=isEmptyPivot" json:"is_empty_pivot,omitempty"`
	SourceTableUid            *UUID                       `protobuf:"bytes,8,opt,name=source_table_uid,json=sourceTableUid" json:"source_table_uid,omitempty"`
	RefreshTimestamp          *float64                    `protobuf:"fixed64,9,opt,name=refresh_timestamp,json=refreshTimestamp" json:"refresh_timestamp,omitempty"`
	GrpgColOptionsMap         *Reference                  `protobuf:"bytes,10,opt,name=grpg_col_options_map,json=grpgColOptionsMap" json:"grpg_col_options_map,omitempty"`
	HideGrandTotalRows        *bool                       `protobuf:"varint,11,opt,name=hide_grand_total_rows,json=hideGrandTotalRows" json:"hide_grand_total_rows,omitempty"`
	SourceTableName           *string                     `protobuf:"bytes,12,opt,name=source_table_name,json=sourceTableName" json:"source_table_name,omitempty"`
	HideGrandTotalColumns     *bool                       `protobuf:"varint,13,opt,name=hide_grand_total_columns,json=hideGrandTotalColumns" json:"hide_grand_total_columns,omitempty"`
	FormulaStore              *FormulaStoreArchive        `protobuf:"bytes,17,opt,name=formula_store,json=formulaStore" json:"formula_store,omitempty"`
	RefreshUid                *UUID                       `protobuf:"bytes,18,opt,name=refresh_uid,json=refreshUid" json:"refresh_uid,omitempty"`
	RowColumnRuleChangeUid    *UUID                       `protobuf:"bytes,19,opt,name=row_column_rule_change_uid,json=rowColumnRuleChangeUid" json:"row_column_rule_change_uid,omitempty"`
	AggregateRuleChangeUid    *UUID                       `protobuf:"bytes,20,opt,name=aggregate_rule_change_uid,json=aggregateRuleChangeUid" json:"aggregate_rule_change_uid,omitempty"`
}

func (x *PivotOwnerArchive) Reset() {
	*x = PivotOwnerArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PivotOwnerArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PivotOwnerArchive) ProtoMessage() {}

func (x *PivotOwnerArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PivotOwnerArchive.ProtoReflect.Descriptor instead.
func (*PivotOwnerArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{116}
}

func (x *PivotOwnerArchive) GetPivotOwnerUid() *UUID {
	if x != nil {
		return x.PivotOwnerUid
	}
	return nil
}

func (x *PivotOwnerArchive) GetGroupingColumnsForRows() *GroupColumnListArchive {
	if x != nil {
		return x.GroupingColumnsForRows
	}
	return nil
}

func (x *PivotOwnerArchive) GetGroupingColumnsForColumns() *GroupColumnListArchive {
	if x != nil {
		return x.GroupingColumnsForColumns
	}
	return nil
}

func (x *PivotOwnerArchive) GetAggregateColumns() *ColumnAggregateListArchive {
	if x != nil {
		return x.AggregateColumns
	}
	return nil
}

func (x *PivotOwnerArchive) GetFlatteningDimension() int32 {
	if x != nil && x.FlatteningDimension != nil {
		return *x.FlatteningDimension
	}
	return 0
}

func (x *PivotOwnerArchive) GetIsEmptyPivot() bool {
	if x != nil && x.IsEmptyPivot != nil {
		return *x.IsEmptyPivot
	}
	return false
}

func (x *PivotOwnerArchive) GetSourceTableUid() *UUID {
	if x != nil {
		return x.SourceTableUid
	}
	return nil
}

func (x *PivotOwnerArchive) GetRefreshTimestamp() float64 {
	if x != nil && x.RefreshTimestamp != nil {
		return *x.RefreshTimestamp
	}
	return 0
}

func (x *PivotOwnerArchive) GetGrpgColOptionsMap() *Reference {
	if x != nil {
		return x.GrpgColOptionsMap
	}
	return nil
}

func (x *PivotOwnerArchive) GetHideGrandTotalRows() bool {
	if x != nil && x.HideGrandTotalRows != nil {
		return *x.HideGrandTotalRows
	}
	return false
}

func (x *PivotOwnerArchive) GetSourceTableName() string {
	if x != nil && x.SourceTableName != nil {
		return *x.SourceTableName
	}
	return ""
}

func (x *PivotOwnerArchive) GetHideGrandTotalColumns() bool {
	if x != nil && x.HideGrandTotalColumns != nil {
		return *x.HideGrandTotalColumns
	}
	return false
}

func (x *PivotOwnerArchive) GetFormulaStore() *FormulaStoreArchive {
	if x != nil {
		return x.FormulaStore
	}
	return nil
}

func (x *PivotOwnerArchive) GetRefreshUid() *UUID {
	if x != nil {
		return x.RefreshUid
	}
	return nil
}

func (x *PivotOwnerArchive) GetRowColumnRuleChangeUid() *UUID {
	if x != nil {
		return x.RowColumnRuleChangeUid
	}
	return nil
}

func (x *PivotOwnerArchive) GetAggregateRuleChangeUid() *UUID {
	if x != nil {
		return x.AggregateRuleChangeUid
	}
	return nil
}

type RichTextPayloadArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Storage *Reference `protobuf:"bytes,1,req,name=storage" json:"storage,omitempty"`
	Range   *Range     `protobuf:"bytes,2,opt,name=range" json:"range,omitempty"`
	Cellid  *CellID    `protobuf:"bytes,3,req,name=cellid" json:"cellid,omitempty"`
}

func (x *RichTextPayloadArchive) Reset() {
	*x = RichTextPayloadArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RichTextPayloadArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RichTextPayloadArchive) ProtoMessage() {}

func (x *RichTextPayloadArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RichTextPayloadArchive.ProtoReflect.Descriptor instead.
func (*RichTextPayloadArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{117}
}

func (x *RichTextPayloadArchive) GetStorage() *Reference {
	if x != nil {
		return x.Storage
	}
	return nil
}

func (x *RichTextPayloadArchive) GetRange() *Range {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *RichTextPayloadArchive) GetCellid() *CellID {
	if x != nil {
		return x.Cellid
	}
	return nil
}

type FormulaEqualsTokenAttachmentArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *UIGraphicalAttachment `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
}

func (x *FormulaEqualsTokenAttachmentArchive) Reset() {
	*x = FormulaEqualsTokenAttachmentArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormulaEqualsTokenAttachmentArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormulaEqualsTokenAttachmentArchive) ProtoMessage() {}

func (x *FormulaEqualsTokenAttachmentArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormulaEqualsTokenAttachmentArchive.ProtoReflect.Descriptor instead.
func (*FormulaEqualsTokenAttachmentArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{118}
}

func (x *FormulaEqualsTokenAttachmentArchive) GetSuper() *UIGraphicalAttachment {
	if x != nil {
		return x.Super
	}
	return nil
}

type CellFillStandIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fill                         *FillArchive `protobuf:"bytes,1,req,name=fill" json:"fill,omitempty"`
	TypeIsMixed                  *bool        `protobuf:"varint,2,opt,name=type_is_mixed,json=typeIsMixed" json:"type_is_mixed,omitempty"`
	ColorHasBeenModified         *bool        `protobuf:"varint,3,opt,name=color_has_been_modified,json=colorHasBeenModified" json:"color_has_been_modified,omitempty"`
	ColorIsMixed                 *bool        `protobuf:"varint,4,opt,name=color_is_mixed,json=colorIsMixed" json:"color_is_mixed,omitempty"`
	FirstColorHasBeenModified    *bool        `protobuf:"varint,5,opt,name=first_color_has_been_modified,json=firstColorHasBeenModified" json:"first_color_has_been_modified,omitempty"`
	FirstColorIsMixed            *bool        `protobuf:"varint,6,opt,name=first_color_is_mixed,json=firstColorIsMixed" json:"first_color_is_mixed,omitempty"`
	LastColorHasBeenModified     *bool        `protobuf:"varint,7,opt,name=last_color_has_been_modified,json=lastColorHasBeenModified" json:"last_color_has_been_modified,omitempty"`
	LastColorIsMixed             *bool        `protobuf:"varint,8,opt,name=last_color_is_mixed,json=lastColorIsMixed" json:"last_color_is_mixed,omitempty"`
	GradientTypeHasBeenModified  *bool        `protobuf:"varint,9,opt,name=gradient_type_has_been_modified,json=gradientTypeHasBeenModified" json:"gradient_type_has_been_modified,omitempty"`
	GradientTypeIsMixed          *bool        `protobuf:"varint,10,opt,name=gradient_type_is_mixed,json=gradientTypeIsMixed" json:"gradient_type_is_mixed,omitempty"`
	GradientAngleHasBeenModified *bool        `protobuf:"varint,11,opt,name=gradient_angle_has_been_modified,json=gradientAngleHasBeenModified" json:"gradient_angle_has_been_modified,omitempty"`
	GradientAngleIsMixed         *bool        `protobuf:"varint,12,opt,name=gradient_angle_is_mixed,json=gradientAngleIsMixed" json:"gradient_angle_is_mixed,omitempty"`
	ImageDataHasBeenModified     *bool        `protobuf:"varint,13,opt,name=image_data_has_been_modified,json=imageDataHasBeenModified" json:"image_data_has_been_modified,omitempty"`
	ImageDataIsMixed             *bool        `protobuf:"varint,14,opt,name=image_data_is_mixed,json=imageDataIsMixed" json:"image_data_is_mixed,omitempty"`
	TintColorHasBeenModified     *bool        `protobuf:"varint,15,opt,name=tint_color_has_been_modified,json=tintColorHasBeenModified" json:"tint_color_has_been_modified,omitempty"`
	TintColorIsMixed             *bool        `protobuf:"varint,16,opt,name=tint_color_is_mixed,json=tintColorIsMixed" json:"tint_color_is_mixed,omitempty"`
	ScaleHasBeenModified         *bool        `protobuf:"varint,17,opt,name=scale_has_been_modified,json=scaleHasBeenModified" json:"scale_has_been_modified,omitempty"`
	ScaleIsMixed                 *bool        `protobuf:"varint,18,opt,name=scale_is_mixed,json=scaleIsMixed" json:"scale_is_mixed,omitempty"`
	TechniqueHasBeenModified     *bool        `protobuf:"varint,19,opt,name=technique_has_been_modified,json=techniqueHasBeenModified" json:"technique_has_been_modified,omitempty"`
	TechniqueIsMixed             *bool        `protobuf:"varint,20,opt,name=technique_is_mixed,json=techniqueIsMixed" json:"technique_is_mixed,omitempty"`
}

func (x *CellFillStandIn) Reset() {
	*x = CellFillStandIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellFillStandIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellFillStandIn) ProtoMessage() {}

func (x *CellFillStandIn) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellFillStandIn.ProtoReflect.Descriptor instead.
func (*CellFillStandIn) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{119}
}

func (x *CellFillStandIn) GetFill() *FillArchive {
	if x != nil {
		return x.Fill
	}
	return nil
}

func (x *CellFillStandIn) GetTypeIsMixed() bool {
	if x != nil && x.TypeIsMixed != nil {
		return *x.TypeIsMixed
	}
	return false
}

func (x *CellFillStandIn) GetColorHasBeenModified() bool {
	if x != nil && x.ColorHasBeenModified != nil {
		return *x.ColorHasBeenModified
	}
	return false
}

func (x *CellFillStandIn) GetColorIsMixed() bool {
	if x != nil && x.ColorIsMixed != nil {
		return *x.ColorIsMixed
	}
	return false
}

func (x *CellFillStandIn) GetFirstColorHasBeenModified() bool {
	if x != nil && x.FirstColorHasBeenModified != nil {
		return *x.FirstColorHasBeenModified
	}
	return false
}

func (x *CellFillStandIn) GetFirstColorIsMixed() bool {
	if x != nil && x.FirstColorIsMixed != nil {
		return *x.FirstColorIsMixed
	}
	return false
}

func (x *CellFillStandIn) GetLastColorHasBeenModified() bool {
	if x != nil && x.LastColorHasBeenModified != nil {
		return *x.LastColorHasBeenModified
	}
	return false
}

func (x *CellFillStandIn) GetLastColorIsMixed() bool {
	if x != nil && x.LastColorIsMixed != nil {
		return *x.LastColorIsMixed
	}
	return false
}

func (x *CellFillStandIn) GetGradientTypeHasBeenModified() bool {
	if x != nil && x.GradientTypeHasBeenModified != nil {
		return *x.GradientTypeHasBeenModified
	}
	return false
}

func (x *CellFillStandIn) GetGradientTypeIsMixed() bool {
	if x != nil && x.GradientTypeIsMixed != nil {
		return *x.GradientTypeIsMixed
	}
	return false
}

func (x *CellFillStandIn) GetGradientAngleHasBeenModified() bool {
	if x != nil && x.GradientAngleHasBeenModified != nil {
		return *x.GradientAngleHasBeenModified
	}
	return false
}

func (x *CellFillStandIn) GetGradientAngleIsMixed() bool {
	if x != nil && x.GradientAngleIsMixed != nil {
		return *x.GradientAngleIsMixed
	}
	return false
}

func (x *CellFillStandIn) GetImageDataHasBeenModified() bool {
	if x != nil && x.ImageDataHasBeenModified != nil {
		return *x.ImageDataHasBeenModified
	}
	return false
}

func (x *CellFillStandIn) GetImageDataIsMixed() bool {
	if x != nil && x.ImageDataIsMixed != nil {
		return *x.ImageDataIsMixed
	}
	return false
}

func (x *CellFillStandIn) GetTintColorHasBeenModified() bool {
	if x != nil && x.TintColorHasBeenModified != nil {
		return *x.TintColorHasBeenModified
	}
	return false
}

func (x *CellFillStandIn) GetTintColorIsMixed() bool {
	if x != nil && x.TintColorIsMixed != nil {
		return *x.TintColorIsMixed
	}
	return false
}

func (x *CellFillStandIn) GetScaleHasBeenModified() bool {
	if x != nil && x.ScaleHasBeenModified != nil {
		return *x.ScaleHasBeenModified
	}
	return false
}

func (x *CellFillStandIn) GetScaleIsMixed() bool {
	if x != nil && x.ScaleIsMixed != nil {
		return *x.ScaleIsMixed
	}
	return false
}

func (x *CellFillStandIn) GetTechniqueHasBeenModified() bool {
	if x != nil && x.TechniqueHasBeenModified != nil {
		return *x.TechniqueHasBeenModified
	}
	return false
}

func (x *CellFillStandIn) GetTechniqueIsMixed() bool {
	if x != nil && x.TechniqueIsMixed != nil {
		return *x.TechniqueIsMixed
	}
	return false
}

type FormulaSelectionArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                *TSWPSelectionArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	ActiveTokenCharIndex *uint32               `protobuf:"varint,2,opt,name=activeTokenCharIndex" json:"activeTokenCharIndex,omitempty"`
}

func (x *FormulaSelectionArchive) Reset() {
	*x = FormulaSelectionArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormulaSelectionArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormulaSelectionArchive) ProtoMessage() {}

func (x *FormulaSelectionArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormulaSelectionArchive.ProtoReflect.Descriptor instead.
func (*FormulaSelectionArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{120}
}

func (x *FormulaSelectionArchive) GetSuper() *TSWPSelectionArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *FormulaSelectionArchive) GetActiveTokenCharIndex() uint32 {
	if x != nil && x.ActiveTokenCharIndex != nil {
		return *x.ActiveTokenCharIndex
	}
	return 0
}

type CellBorderArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopStroke         *StrokeArchive `protobuf:"bytes,1,opt,name=top_stroke,json=topStroke" json:"top_stroke,omitempty"`
	TopStrokeOrder    *int32         `protobuf:"varint,2,opt,name=top_stroke_order,json=topStrokeOrder" json:"top_stroke_order,omitempty"`
	RightStroke       *StrokeArchive `protobuf:"bytes,3,opt,name=right_stroke,json=rightStroke" json:"right_stroke,omitempty"`
	RightStrokeOrder  *int32         `protobuf:"varint,4,opt,name=right_stroke_order,json=rightStrokeOrder" json:"right_stroke_order,omitempty"`
	BottomStroke      *StrokeArchive `protobuf:"bytes,5,opt,name=bottom_stroke,json=bottomStroke" json:"bottom_stroke,omitempty"`
	BottomStrokeOrder *int32         `protobuf:"varint,6,opt,name=bottom_stroke_order,json=bottomStrokeOrder" json:"bottom_stroke_order,omitempty"`
	LeftStroke        *StrokeArchive `protobuf:"bytes,7,opt,name=left_stroke,json=leftStroke" json:"left_stroke,omitempty"`
	LeftStrokeOrder   *int32         `protobuf:"varint,8,opt,name=left_stroke_order,json=leftStrokeOrder" json:"left_stroke_order,omitempty"`
}

func (x *CellBorderArchive) Reset() {
	*x = CellBorderArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellBorderArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellBorderArchive) ProtoMessage() {}

func (x *CellBorderArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellBorderArchive.ProtoReflect.Descriptor instead.
func (*CellBorderArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{121}
}

func (x *CellBorderArchive) GetTopStroke() *StrokeArchive {
	if x != nil {
		return x.TopStroke
	}
	return nil
}

func (x *CellBorderArchive) GetTopStrokeOrder() int32 {
	if x != nil && x.TopStrokeOrder != nil {
		return *x.TopStrokeOrder
	}
	return 0
}

func (x *CellBorderArchive) GetRightStroke() *StrokeArchive {
	if x != nil {
		return x.RightStroke
	}
	return nil
}

func (x *CellBorderArchive) GetRightStrokeOrder() int32 {
	if x != nil && x.RightStrokeOrder != nil {
		return *x.RightStrokeOrder
	}
	return 0
}

func (x *CellBorderArchive) GetBottomStroke() *StrokeArchive {
	if x != nil {
		return x.BottomStroke
	}
	return nil
}

func (x *CellBorderArchive) GetBottomStrokeOrder() int32 {
	if x != nil && x.BottomStrokeOrder != nil {
		return *x.BottomStrokeOrder
	}
	return 0
}

func (x *CellBorderArchive) GetLeftStroke() *StrokeArchive {
	if x != nil {
		return x.LeftStroke
	}
	return nil
}

func (x *CellBorderArchive) GetLeftStrokeOrder() int32 {
	if x != nil && x.LeftStrokeOrder != nil {
		return *x.LeftStrokeOrder
	}
	return 0
}

type DefaultCellStylesContainerArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableStyleNetwork *Reference `protobuf:"bytes,1,req,name=table_style_network,json=tableStyleNetwork" json:"table_style_network,omitempty"`
	RowUids           []*UUID    `protobuf:"bytes,2,rep,name=row_uids,json=rowUids" json:"row_uids,omitempty"`
	ColumnUids        []*UUID    `protobuf:"bytes,3,rep,name=column_uids,json=columnUids" json:"column_uids,omitempty"`
	RowTypes          []uint32   `protobuf:"varint,4,rep,name=row_types,json=rowTypes" json:"row_types,omitempty"`
	ColumnTypes       []uint32   `protobuf:"varint,5,rep,name=column_types,json=columnTypes" json:"column_types,omitempty"`
	IsAPivotTable     *bool      `protobuf:"varint,6,opt,name=is_a_pivot_table,json=isAPivotTable" json:"is_a_pivot_table,omitempty"`
}

func (x *DefaultCellStylesContainerArchive) Reset() {
	*x = DefaultCellStylesContainerArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefaultCellStylesContainerArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultCellStylesContainerArchive) ProtoMessage() {}

func (x *DefaultCellStylesContainerArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultCellStylesContainerArchive.ProtoReflect.Descriptor instead.
func (*DefaultCellStylesContainerArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{122}
}

func (x *DefaultCellStylesContainerArchive) GetTableStyleNetwork() *Reference {
	if x != nil {
		return x.TableStyleNetwork
	}
	return nil
}

func (x *DefaultCellStylesContainerArchive) GetRowUids() []*UUID {
	if x != nil {
		return x.RowUids
	}
	return nil
}

func (x *DefaultCellStylesContainerArchive) GetColumnUids() []*UUID {
	if x != nil {
		return x.ColumnUids
	}
	return nil
}

func (x *DefaultCellStylesContainerArchive) GetRowTypes() []uint32 {
	if x != nil {
		return x.RowTypes
	}
	return nil
}

func (x *DefaultCellStylesContainerArchive) GetColumnTypes() []uint32 {
	if x != nil {
		return x.ColumnTypes
	}
	return nil
}

func (x *DefaultCellStylesContainerArchive) GetIsAPivotTable() bool {
	if x != nil && x.IsAPivotTable != nil {
		return *x.IsAPivotTable
	}
	return false
}

type MultiTableRemapperArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MappingPurpose         *MultiTableRemapperArchive_Purpose `protobuf:"varint,1,req,name=mapping_purpose,json=mappingPurpose,enum=TST.MultiTableRemapperArchive_Purpose" json:"mapping_purpose,omitempty"`
	ShouldStealReferences  *bool                              `protobuf:"varint,2,req,name=should_steal_references,json=shouldStealReferences" json:"should_steal_references,omitempty"`
	CanReuseTableNames     *bool                              `protobuf:"varint,3,req,name=can_reuse_table_names,json=canReuseTableNames" json:"can_reuse_table_names,omitempty"`
	OwnerUidMapper         []*OwnerUIDMapperArchive           `protobuf:"bytes,4,rep,name=owner_uid_mapper,json=ownerUidMapper" json:"owner_uid_mapper,omitempty"`
	BackingTablesForCharts *UUIDMapArchive                    `protobuf:"bytes,5,req,name=backing_tables_for_charts,json=backingTablesForCharts" json:"backing_tables_for_charts,omitempty"`
	CrossDocumentPaste     *bool                              `protobuf:"varint,6,req,name=cross_document_paste,json=crossDocumentPaste" json:"cross_document_paste,omitempty"`
	NestedInnerMapper      *bool                              `protobuf:"varint,7,req,name=nested_inner_mapper,json=nestedInnerMapper" json:"nested_inner_mapper,omitempty"`
}

func (x *MultiTableRemapperArchive) Reset() {
	*x = MultiTableRemapperArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiTableRemapperArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiTableRemapperArchive) ProtoMessage() {}

func (x *MultiTableRemapperArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiTableRemapperArchive.ProtoReflect.Descriptor instead.
func (*MultiTableRemapperArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{123}
}

func (x *MultiTableRemapperArchive) GetMappingPurpose() MultiTableRemapperArchive_Purpose {
	if x != nil && x.MappingPurpose != nil {
		return *x.MappingPurpose
	}
	return MultiTableRemapperArchive_DEFAULT
}

func (x *MultiTableRemapperArchive) GetShouldStealReferences() bool {
	if x != nil && x.ShouldStealReferences != nil {
		return *x.ShouldStealReferences
	}
	return false
}

func (x *MultiTableRemapperArchive) GetCanReuseTableNames() bool {
	if x != nil && x.CanReuseTableNames != nil {
		return *x.CanReuseTableNames
	}
	return false
}

func (x *MultiTableRemapperArchive) GetOwnerUidMapper() []*OwnerUIDMapperArchive {
	if x != nil {
		return x.OwnerUidMapper
	}
	return nil
}

func (x *MultiTableRemapperArchive) GetBackingTablesForCharts() *UUIDMapArchive {
	if x != nil {
		return x.BackingTablesForCharts
	}
	return nil
}

func (x *MultiTableRemapperArchive) GetCrossDocumentPaste() bool {
	if x != nil && x.CrossDocumentPaste != nil {
		return *x.CrossDocumentPaste
	}
	return false
}

func (x *MultiTableRemapperArchive) GetNestedInnerMapper() bool {
	if x != nil && x.NestedInnerMapper != nil {
		return *x.NestedInnerMapper
	}
	return false
}

type ChangePropagationMapWrapper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplacementBehavior           *int32       `protobuf:"varint,1,req,name=replacement_behavior,json=replacementBehavior" json:"replacement_behavior,omitempty"`
	StyleReplacePrototypes        []*Reference `protobuf:"bytes,2,rep,name=style_replace_prototypes,json=styleReplacePrototypes" json:"style_replace_prototypes,omitempty"`
	StyleReplaceReplacements      []*Reference `protobuf:"bytes,3,rep,name=style_replace_replacements,json=styleReplaceReplacements" json:"style_replace_replacements,omitempty"`
	StyleModifyStyles             []*Reference `protobuf:"bytes,4,rep,name=style_modify_styles,json=styleModifyStyles" json:"style_modify_styles,omitempty"`
	StyleModifyOldPropMaps        []*Reference `protobuf:"bytes,5,rep,name=style_modify_old_prop_maps,json=styleModifyOldPropMaps" json:"style_modify_old_prop_maps,omitempty"`
	StyleModifyNewPropMaps        []*Reference `protobuf:"bytes,6,rep,name=style_modify_new_prop_maps,json=styleModifyNewPropMaps" json:"style_modify_new_prop_maps,omitempty"`
	StyleDeletePrototypes         []*Reference `protobuf:"bytes,7,rep,name=style_delete_prototypes,json=styleDeletePrototypes" json:"style_delete_prototypes,omitempty"`
	StyleDeleteReplacements       []*Reference `protobuf:"bytes,8,rep,name=style_delete_replacements,json=styleDeleteReplacements" json:"style_delete_replacements,omitempty"`
	TablePresetReplacePrototype   *Reference   `protobuf:"bytes,9,opt,name=table_preset_replace_prototype,json=tablePresetReplacePrototype" json:"table_preset_replace_prototype,omitempty"`
	TablePresetReplaceReplacement *Reference   `protobuf:"bytes,10,opt,name=table_preset_replace_replacement,json=tablePresetReplaceReplacement" json:"table_preset_replace_replacement,omitempty"`
	TablePresetDeletePrototype    *Reference   `protobuf:"bytes,11,opt,name=table_preset_delete_prototype,json=tablePresetDeletePrototype" json:"table_preset_delete_prototype,omitempty"`
	TablePresetDeleteReplacement  *Reference   `protobuf:"bytes,12,opt,name=table_preset_delete_replacement,json=tablePresetDeleteReplacement" json:"table_preset_delete_replacement,omitempty"`
}

func (x *ChangePropagationMapWrapper) Reset() {
	*x = ChangePropagationMapWrapper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangePropagationMapWrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePropagationMapWrapper) ProtoMessage() {}

func (x *ChangePropagationMapWrapper) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePropagationMapWrapper.ProtoReflect.Descriptor instead.
func (*ChangePropagationMapWrapper) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{124}
}

func (x *ChangePropagationMapWrapper) GetReplacementBehavior() int32 {
	if x != nil && x.ReplacementBehavior != nil {
		return *x.ReplacementBehavior
	}
	return 0
}

func (x *ChangePropagationMapWrapper) GetStyleReplacePrototypes() []*Reference {
	if x != nil {
		return x.StyleReplacePrototypes
	}
	return nil
}

func (x *ChangePropagationMapWrapper) GetStyleReplaceReplacements() []*Reference {
	if x != nil {
		return x.StyleReplaceReplacements
	}
	return nil
}

func (x *ChangePropagationMapWrapper) GetStyleModifyStyles() []*Reference {
	if x != nil {
		return x.StyleModifyStyles
	}
	return nil
}

func (x *ChangePropagationMapWrapper) GetStyleModifyOldPropMaps() []*Reference {
	if x != nil {
		return x.StyleModifyOldPropMaps
	}
	return nil
}

func (x *ChangePropagationMapWrapper) GetStyleModifyNewPropMaps() []*Reference {
	if x != nil {
		return x.StyleModifyNewPropMaps
	}
	return nil
}

func (x *ChangePropagationMapWrapper) GetStyleDeletePrototypes() []*Reference {
	if x != nil {
		return x.StyleDeletePrototypes
	}
	return nil
}

func (x *ChangePropagationMapWrapper) GetStyleDeleteReplacements() []*Reference {
	if x != nil {
		return x.StyleDeleteReplacements
	}
	return nil
}

func (x *ChangePropagationMapWrapper) GetTablePresetReplacePrototype() *Reference {
	if x != nil {
		return x.TablePresetReplacePrototype
	}
	return nil
}

func (x *ChangePropagationMapWrapper) GetTablePresetReplaceReplacement() *Reference {
	if x != nil {
		return x.TablePresetReplaceReplacement
	}
	return nil
}

func (x *ChangePropagationMapWrapper) GetTablePresetDeletePrototype() *Reference {
	if x != nil {
		return x.TablePresetDeletePrototype
	}
	return nil
}

func (x *ChangePropagationMapWrapper) GetTablePresetDeleteReplacement() *Reference {
	if x != nil {
		return x.TablePresetDeleteReplacement
	}
	return nil
}

type SummaryCellVendorArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableInfo *Reference                                   `protobuf:"bytes,1,req,name=table_info,json=tableInfo" json:"table_info,omitempty"`
	Entries   []*SummaryCellVendorArchive_SummaryCellEntry `protobuf:"bytes,2,rep,name=entries" json:"entries,omitempty"`
}

func (x *SummaryCellVendorArchive) Reset() {
	*x = SummaryCellVendorArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummaryCellVendorArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummaryCellVendorArchive) ProtoMessage() {}

func (x *SummaryCellVendorArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummaryCellVendorArchive.ProtoReflect.Descriptor instead.
func (*SummaryCellVendorArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{125}
}

func (x *SummaryCellVendorArchive) GetTableInfo() *Reference {
	if x != nil {
		return x.TableInfo
	}
	return nil
}

func (x *SummaryCellVendorArchive) GetEntries() []*SummaryCellVendorArchive_SummaryCellEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type CategoryOrderArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableInfo *Reference `protobuf:"bytes,1,req,name=table_info,json=tableInfo" json:"table_info,omitempty"`
	UidMap    *Reference `protobuf:"bytes,2,req,name=uid_map,json=uidMap" json:"uid_map,omitempty"`
}

func (x *CategoryOrderArchive) Reset() {
	*x = CategoryOrderArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryOrderArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryOrderArchive) ProtoMessage() {}

func (x *CategoryOrderArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryOrderArchive.ProtoReflect.Descriptor instead.
func (*CategoryOrderArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{126}
}

func (x *CategoryOrderArchive) GetTableInfo() *Reference {
	if x != nil {
		return x.TableInfo
	}
	return nil
}

func (x *CategoryOrderArchive) GetUidMap() *Reference {
	if x != nil {
		return x.UidMap
	}
	return nil
}

type PivotOrderArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UidMap *Reference `protobuf:"bytes,1,opt,name=uid_map,json=uidMap" json:"uid_map,omitempty"`
}

func (x *PivotOrderArchive) Reset() {
	*x = PivotOrderArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PivotOrderArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PivotOrderArchive) ProtoMessage() {}

func (x *PivotOrderArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PivotOrderArchive.ProtoReflect.Descriptor instead.
func (*PivotOrderArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{127}
}

func (x *PivotOrderArchive) GetUidMap() *Reference {
	if x != nil {
		return x.UidMap
	}
	return nil
}

type HeaderNameMgrTileArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstFragment   *string                                         `protobuf:"bytes,1,req,name=first_fragment,json=firstFragment" json:"first_fragment,omitempty"`
	LastFragment    *string                                         `protobuf:"bytes,2,req,name=last_fragment,json=lastFragment" json:"last_fragment,omitempty"`
	NameFragEntries []*HeaderNameMgrTileArchive_NameFragmentArchive `protobuf:"bytes,3,rep,name=name_frag_entries,json=nameFragEntries" json:"name_frag_entries,omitempty"`
}

func (x *HeaderNameMgrTileArchive) Reset() {
	*x = HeaderNameMgrTileArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeaderNameMgrTileArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeaderNameMgrTileArchive) ProtoMessage() {}

func (x *HeaderNameMgrTileArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeaderNameMgrTileArchive.ProtoReflect.Descriptor instead.
func (*HeaderNameMgrTileArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{128}
}

func (x *HeaderNameMgrTileArchive) GetFirstFragment() string {
	if x != nil && x.FirstFragment != nil {
		return *x.FirstFragment
	}
	return ""
}

func (x *HeaderNameMgrTileArchive) GetLastFragment() string {
	if x != nil && x.LastFragment != nil {
		return *x.LastFragment
	}
	return ""
}

func (x *HeaderNameMgrTileArchive) GetNameFragEntries() []*HeaderNameMgrTileArchive_NameFragmentArchive {
	if x != nil {
		return x.NameFragEntries
	}
	return nil
}

type HeaderNameMgrArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerUid      *UUID                                   `protobuf:"bytes,1,req,name=owner_uid,json=ownerUid" json:"owner_uid,omitempty"`
	NrmOwnerUid   *UUID                                   `protobuf:"bytes,2,opt,name=nrm_owner_uid,json=nrmOwnerUid" json:"nrm_owner_uid,omitempty"`
	PerTables     []*HeaderNameMgrArchive_PerTableArchive `protobuf:"bytes,3,rep,name=per_tables,json=perTables" json:"per_tables,omitempty"`
	NameFragTiles []*Reference                            `protobuf:"bytes,4,rep,name=name_frag_tiles,json=nameFragTiles" json:"name_frag_tiles,omitempty"`
}

func (x *HeaderNameMgrArchive) Reset() {
	*x = HeaderNameMgrArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeaderNameMgrArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeaderNameMgrArchive) ProtoMessage() {}

func (x *HeaderNameMgrArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeaderNameMgrArchive.ProtoReflect.Descriptor instead.
func (*HeaderNameMgrArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{129}
}

func (x *HeaderNameMgrArchive) GetOwnerUid() *UUID {
	if x != nil {
		return x.OwnerUid
	}
	return nil
}

func (x *HeaderNameMgrArchive) GetNrmOwnerUid() *UUID {
	if x != nil {
		return x.NrmOwnerUid
	}
	return nil
}

func (x *HeaderNameMgrArchive) GetPerTables() []*HeaderNameMgrArchive_PerTableArchive {
	if x != nil {
		return x.PerTables
	}
	return nil
}

func (x *HeaderNameMgrArchive) GetNameFragTiles() []*Reference {
	if x != nil {
		return x.NameFragTiles
	}
	return nil
}

type WidthHeightCacheFittingEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FittingIndex *uint32  `protobuf:"varint,1,opt,name=fitting_index,json=fittingIndex" json:"fitting_index,omitempty"`
	FittingSize  *float32 `protobuf:"fixed32,2,opt,name=fitting_size,json=fittingSize" json:"fitting_size,omitempty"`
}

func (x *WidthHeightCacheFittingEntry) Reset() {
	*x = WidthHeightCacheFittingEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WidthHeightCacheFittingEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WidthHeightCacheFittingEntry) ProtoMessage() {}

func (x *WidthHeightCacheFittingEntry) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WidthHeightCacheFittingEntry.ProtoReflect.Descriptor instead.
func (*WidthHeightCacheFittingEntry) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{130}
}

func (x *WidthHeightCacheFittingEntry) GetFittingIndex() uint32 {
	if x != nil && x.FittingIndex != nil {
		return *x.FittingIndex
	}
	return 0
}

func (x *WidthHeightCacheFittingEntry) GetFittingSize() float32 {
	if x != nil && x.FittingSize != nil {
		return *x.FittingSize
	}
	return 0
}

type WidthHeightCache struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RowsFittingEntries []*WidthHeightCacheFittingEntry `protobuf:"bytes,1,rep,name=rows_fitting_entries,json=rowsFittingEntries" json:"rows_fitting_entries,omitempty"`
	ColumnsCount       *uint32                         `protobuf:"varint,3,opt,name=columns_count,json=columnsCount" json:"columns_count,omitempty"`
}

func (x *WidthHeightCache) Reset() {
	*x = WidthHeightCache{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WidthHeightCache) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WidthHeightCache) ProtoMessage() {}

func (x *WidthHeightCache) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WidthHeightCache.ProtoReflect.Descriptor instead.
func (*WidthHeightCache) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{131}
}

func (x *WidthHeightCache) GetRowsFittingEntries() []*WidthHeightCacheFittingEntry {
	if x != nil {
		return x.RowsFittingEntries
	}
	return nil
}

func (x *WidthHeightCache) GetColumnsCount() uint32 {
	if x != nil && x.ColumnsCount != nil {
		return *x.ColumnsCount
	}
	return 0
}

type LayoutEngineArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WidthHeightCache *WidthHeightCache `protobuf:"bytes,1,opt,name=width_height_cache,json=widthHeightCache" json:"width_height_cache,omitempty"`
}

func (x *LayoutEngineArchive) Reset() {
	*x = LayoutEngineArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LayoutEngineArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LayoutEngineArchive) ProtoMessage() {}

func (x *LayoutEngineArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LayoutEngineArchive.ProtoReflect.Descriptor instead.
func (*LayoutEngineArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{132}
}

func (x *LayoutEngineArchive) GetWidthHeightCache() *WidthHeightCache {
	if x != nil {
		return x.WidthHeightCache
	}
	return nil
}

type TileStorage_Tile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tileid *uint32    `protobuf:"varint,1,req,name=tileid" json:"tileid,omitempty"`
	Tile   *Reference `protobuf:"bytes,2,req,name=tile" json:"tile,omitempty"`
}

func (x *TileStorage_Tile) Reset() {
	*x = TileStorage_Tile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TileStorage_Tile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TileStorage_Tile) ProtoMessage() {}

func (x *TileStorage_Tile) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TileStorage_Tile.ProtoReflect.Descriptor instead.
func (*TileStorage_Tile) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{10, 0}
}

func (x *TileStorage_Tile) GetTileid() uint32 {
	if x != nil && x.Tileid != nil {
		return *x.Tileid
	}
	return 0
}

func (x *TileStorage_Tile) GetTile() *Reference {
	if x != nil {
		return x.Tile
	}
	return nil
}

type PopUpMenuModel_CellValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellValueType *PopUpMenuModel_CellValueType `protobuf:"varint,1,req,name=cell_value_type,json=cellValueType,enum=TST.PopUpMenuModel_CellValueType" json:"cell_value_type,omitempty"`
	BooleanValue  *BooleanCellValueArchive      `protobuf:"bytes,2,opt,name=boolean_value,json=booleanValue" json:"boolean_value,omitempty"`
	DateValue     *DateCellValueArchive         `protobuf:"bytes,3,opt,name=date_value,json=dateValue" json:"date_value,omitempty"`
	NumberValue   *NumberCellValueArchive       `protobuf:"bytes,4,opt,name=number_value,json=numberValue" json:"number_value,omitempty"`
	StringValue   *StringCellValueArchive       `protobuf:"bytes,5,opt,name=string_value,json=stringValue" json:"string_value,omitempty"`
}

func (x *PopUpMenuModel_CellValue) Reset() {
	*x = PopUpMenuModel_CellValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PopUpMenuModel_CellValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PopUpMenuModel_CellValue) ProtoMessage() {}

func (x *PopUpMenuModel_CellValue) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PopUpMenuModel_CellValue.ProtoReflect.Descriptor instead.
func (*PopUpMenuModel_CellValue) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{11, 0}
}

func (x *PopUpMenuModel_CellValue) GetCellValueType() PopUpMenuModel_CellValueType {
	if x != nil && x.CellValueType != nil {
		return *x.CellValueType
	}
	return PopUpMenuModel_NIL_TYPE
}

func (x *PopUpMenuModel_CellValue) GetBooleanValue() *BooleanCellValueArchive {
	if x != nil {
		return x.BooleanValue
	}
	return nil
}

func (x *PopUpMenuModel_CellValue) GetDateValue() *DateCellValueArchive {
	if x != nil {
		return x.DateValue
	}
	return nil
}

func (x *PopUpMenuModel_CellValue) GetNumberValue() *NumberCellValueArchive {
	if x != nil {
		return x.NumberValue
	}
	return nil
}

func (x *PopUpMenuModel_CellValue) GetStringValue() *StringCellValueArchive {
	if x != nil {
		return x.StringValue
	}
	return nil
}

type ImportWarningSetArchive_FormulaImportWarning struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FormulaWarningType    *ImportWarningSetArchive_FormulaWarningType `protobuf:"varint,1,req,name=formula_warning_type,json=formulaWarningType,enum=TST.ImportWarningSetArchive_FormulaWarningType" json:"formula_warning_type,omitempty"`
	OriginalFormula       *string                                     `protobuf:"bytes,2,opt,name=original_formula,json=originalFormula" json:"original_formula,omitempty"`
	SupplementaryText     *string                                     `protobuf:"bytes,3,opt,name=supplementary_text,json=supplementaryText" json:"supplementary_text,omitempty"`
	FormulaWarningTypeInt *int32                                      `protobuf:"varint,4,opt,name=formula_warning_type_int,json=formulaWarningTypeInt" json:"formula_warning_type_int,omitempty"`
}

func (x *ImportWarningSetArchive_FormulaImportWarning) Reset() {
	*x = ImportWarningSetArchive_FormulaImportWarning{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportWarningSetArchive_FormulaImportWarning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportWarningSetArchive_FormulaImportWarning) ProtoMessage() {}

func (x *ImportWarningSetArchive_FormulaImportWarning) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportWarningSetArchive_FormulaImportWarning.ProtoReflect.Descriptor instead.
func (*ImportWarningSetArchive_FormulaImportWarning) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{12, 0}
}

func (x *ImportWarningSetArchive_FormulaImportWarning) GetFormulaWarningType() ImportWarningSetArchive_FormulaWarningType {
	if x != nil && x.FormulaWarningType != nil {
		return *x.FormulaWarningType
	}
	return ImportWarningSetArchive_THREE_D_REFERENCE
}

func (x *ImportWarningSetArchive_FormulaImportWarning) GetOriginalFormula() string {
	if x != nil && x.OriginalFormula != nil {
		return *x.OriginalFormula
	}
	return ""
}

func (x *ImportWarningSetArchive_FormulaImportWarning) GetSupplementaryText() string {
	if x != nil && x.SupplementaryText != nil {
		return *x.SupplementaryText
	}
	return ""
}

func (x *ImportWarningSetArchive_FormulaImportWarning) GetFormulaWarningTypeInt() int32 {
	if x != nil && x.FormulaWarningTypeInt != nil {
		return *x.FormulaWarningTypeInt
	}
	return 0
}

type TableDataList_ListEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key              *uint32                  `protobuf:"varint,1,req,name=key" json:"key,omitempty"`
	Refcount         *uint32                  `protobuf:"varint,2,req,name=refcount" json:"refcount,omitempty"`
	String_          *string                  `protobuf:"bytes,3,opt,name=string" json:"string,omitempty"`
	Reference        *Reference               `protobuf:"bytes,4,opt,name=reference" json:"reference,omitempty"`
	Formula          *FormulaArchive          `protobuf:"bytes,5,opt,name=formula" json:"formula,omitempty"`
	Format           *TSKFormatStructArchive  `protobuf:"bytes,6,opt,name=format" json:"format,omitempty"`
	CustomFormat     *CustomFormatArchive     `protobuf:"bytes,8,opt,name=custom_format,json=customFormat" json:"custom_format,omitempty"`
	RichTextPayload  *Reference               `protobuf:"bytes,9,opt,name=rich_text_payload,json=richTextPayload" json:"rich_text_payload,omitempty"`
	CommentStorage   *Reference               `protobuf:"bytes,10,opt,name=comment_storage,json=commentStorage" json:"comment_storage,omitempty"`
	ImportWarningSet *ImportWarningSetArchive `protobuf:"bytes,11,opt,name=import_warning_set,json=importWarningSet" json:"import_warning_set,omitempty"`
	CellSpec         *CellSpecArchive         `protobuf:"bytes,12,opt,name=cell_spec,json=cellSpec" json:"cell_spec,omitempty"`
}

func (x *TableDataList_ListEntry) Reset() {
	*x = TableDataList_ListEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableDataList_ListEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableDataList_ListEntry) ProtoMessage() {}

func (x *TableDataList_ListEntry) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableDataList_ListEntry.ProtoReflect.Descriptor instead.
func (*TableDataList_ListEntry) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{15, 0}
}

func (x *TableDataList_ListEntry) GetKey() uint32 {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return 0
}

func (x *TableDataList_ListEntry) GetRefcount() uint32 {
	if x != nil && x.Refcount != nil {
		return *x.Refcount
	}
	return 0
}

func (x *TableDataList_ListEntry) GetString_() string {
	if x != nil && x.String_ != nil {
		return *x.String_
	}
	return ""
}

func (x *TableDataList_ListEntry) GetReference() *Reference {
	if x != nil {
		return x.Reference
	}
	return nil
}

func (x *TableDataList_ListEntry) GetFormula() *FormulaArchive {
	if x != nil {
		return x.Formula
	}
	return nil
}

func (x *TableDataList_ListEntry) GetFormat() *TSKFormatStructArchive {
	if x != nil {
		return x.Format
	}
	return nil
}

func (x *TableDataList_ListEntry) GetCustomFormat() *CustomFormatArchive {
	if x != nil {
		return x.CustomFormat
	}
	return nil
}

func (x *TableDataList_ListEntry) GetRichTextPayload() *Reference {
	if x != nil {
		return x.RichTextPayload
	}
	return nil
}

func (x *TableDataList_ListEntry) GetCommentStorage() *Reference {
	if x != nil {
		return x.CommentStorage
	}
	return nil
}

func (x *TableDataList_ListEntry) GetImportWarningSet() *ImportWarningSetArchive {
	if x != nil {
		return x.ImportWarningSet
	}
	return nil
}

func (x *TableDataList_ListEntry) GetCellSpec() *CellSpecArchive {
	if x != nil {
		return x.CellSpec
	}
	return nil
}

type TableRBTree_Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *uint32 `protobuf:"varint,1,req,name=key" json:"key,omitempty"`
	Value *uint32 `protobuf:"varint,2,req,name=value" json:"value,omitempty"`
}

func (x *TableRBTree_Node) Reset() {
	*x = TableRBTree_Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableRBTree_Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableRBTree_Node) ProtoMessage() {}

func (x *TableRBTree_Node) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableRBTree_Node.ProtoReflect.Descriptor instead.
func (*TableRBTree_Node) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{17, 0}
}

func (x *TableRBTree_Node) GetKey() uint32 {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return 0
}

func (x *TableRBTree_Node) GetValue() uint32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

type HeaderStorageBucket_Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index         *uint32    `protobuf:"varint,1,req,name=index" json:"index,omitempty"`
	Size          *float32   `protobuf:"fixed32,2,req,name=size" json:"size,omitempty"`
	HidingState   *uint32    `protobuf:"varint,3,req,name=hidingState" json:"hidingState,omitempty"`
	NumberOfCells *uint32    `protobuf:"varint,4,req,name=numberOfCells" json:"numberOfCells,omitempty"`
	CellStyle     *Reference `protobuf:"bytes,5,opt,name=cell_style,json=cellStyle" json:"cell_style,omitempty"`
	TextStyle     *Reference `protobuf:"bytes,6,opt,name=text_style,json=textStyle" json:"text_style,omitempty"`
}

func (x *HeaderStorageBucket_Header) Reset() {
	*x = HeaderStorageBucket_Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeaderStorageBucket_Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeaderStorageBucket_Header) ProtoMessage() {}

func (x *HeaderStorageBucket_Header) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeaderStorageBucket_Header.ProtoReflect.Descriptor instead.
func (*HeaderStorageBucket_Header) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{18, 0}
}

func (x *HeaderStorageBucket_Header) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *HeaderStorageBucket_Header) GetSize() float32 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *HeaderStorageBucket_Header) GetHidingState() uint32 {
	if x != nil && x.HidingState != nil {
		return *x.HidingState
	}
	return 0
}

func (x *HeaderStorageBucket_Header) GetNumberOfCells() uint32 {
	if x != nil && x.NumberOfCells != nil {
		return *x.NumberOfCells
	}
	return 0
}

func (x *HeaderStorageBucket_Header) GetCellStyle() *Reference {
	if x != nil {
		return x.CellStyle
	}
	return nil
}

func (x *HeaderStorageBucket_Header) GetTextStyle() *Reference {
	if x != nil {
		return x.TextStyle
	}
	return nil
}

type TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupingColumnUid *UUID                                                            `protobuf:"bytes,1,opt,name=grouping_column_uid,json=groupingColumnUid" json:"grouping_column_uid,omitempty"`
	ColumnUid         *UUID                                                            `protobuf:"bytes,2,opt,name=column_uid,json=columnUid" json:"column_uid,omitempty"`
	Direction         *TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive_Direction `protobuf:"varint,3,opt,name=direction,enum=TST.TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive_Direction" json:"direction,omitempty"`
}

func (x *TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive) Reset() {
	*x = TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive) ProtoMessage() {}

func (x *TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive.ProtoReflect.Descriptor instead.
func (*TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{25, 0}
}

func (x *TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive) GetGroupingColumnUid() *UUID {
	if x != nil {
		return x.GroupingColumnUid
	}
	return nil
}

func (x *TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive) GetColumnUid() *UUID {
	if x != nil {
		return x.ColumnUid
	}
	return nil
}

func (x *TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive) GetDirection() TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive_Direction {
	if x != nil && x.Direction != nil {
		return *x.Direction
	}
	return TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive_ascending
}

type TableSortOrderArchive_SortRuleArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index     *uint32                                          `protobuf:"varint,1,req,name=index" json:"index,omitempty"`
	Direction *TableSortOrderArchive_SortRuleArchive_Direction `protobuf:"varint,2,req,name=direction,enum=TST.TableSortOrderArchive_SortRuleArchive_Direction" json:"direction,omitempty"`
}

func (x *TableSortOrderArchive_SortRuleArchive) Reset() {
	*x = TableSortOrderArchive_SortRuleArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableSortOrderArchive_SortRuleArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableSortOrderArchive_SortRuleArchive) ProtoMessage() {}

func (x *TableSortOrderArchive_SortRuleArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableSortOrderArchive_SortRuleArchive.ProtoReflect.Descriptor instead.
func (*TableSortOrderArchive_SortRuleArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{26, 0}
}

func (x *TableSortOrderArchive_SortRuleArchive) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *TableSortOrderArchive_SortRuleArchive) GetDirection() TableSortOrderArchive_SortRuleArchive_Direction {
	if x != nil && x.Direction != nil {
		return *x.Direction
	}
	return TableSortOrderArchive_SortRuleArchive_ascending
}

type TableSortOrderUIDArchive_SortRuleArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColumnUid *UUID                                               `protobuf:"bytes,1,req,name=column_uid,json=columnUid" json:"column_uid,omitempty"`
	Direction *TableSortOrderUIDArchive_SortRuleArchive_Direction `protobuf:"varint,2,req,name=direction,enum=TST.TableSortOrderUIDArchive_SortRuleArchive_Direction" json:"direction,omitempty"`
}

func (x *TableSortOrderUIDArchive_SortRuleArchive) Reset() {
	*x = TableSortOrderUIDArchive_SortRuleArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableSortOrderUIDArchive_SortRuleArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableSortOrderUIDArchive_SortRuleArchive) ProtoMessage() {}

func (x *TableSortOrderUIDArchive_SortRuleArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableSortOrderUIDArchive_SortRuleArchive.ProtoReflect.Descriptor instead.
func (*TableSortOrderUIDArchive_SortRuleArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{27, 0}
}

func (x *TableSortOrderUIDArchive_SortRuleArchive) GetColumnUid() *UUID {
	if x != nil {
		return x.ColumnUid
	}
	return nil
}

func (x *TableSortOrderUIDArchive_SortRuleArchive) GetDirection() TableSortOrderUIDArchive_SortRuleArchive_Direction {
	if x != nil && x.Direction != nil {
		return *x.Direction
	}
	return TableSortOrderUIDArchive_SortRuleArchive_ascending
}

type StrokeLayerArchive_StrokeRunArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Origin *int32         `protobuf:"varint,1,opt,name=origin" json:"origin,omitempty"`
	Length *uint32        `protobuf:"varint,2,opt,name=length" json:"length,omitempty"`
	Stroke *StrokeArchive `protobuf:"bytes,3,opt,name=stroke" json:"stroke,omitempty"`
	Order  *uint32        `protobuf:"varint,4,opt,name=order" json:"order,omitempty"`
}

func (x *StrokeLayerArchive_StrokeRunArchive) Reset() {
	*x = StrokeLayerArchive_StrokeRunArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StrokeLayerArchive_StrokeRunArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrokeLayerArchive_StrokeRunArchive) ProtoMessage() {}

func (x *StrokeLayerArchive_StrokeRunArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrokeLayerArchive_StrokeRunArchive.ProtoReflect.Descriptor instead.
func (*StrokeLayerArchive_StrokeRunArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{36, 0}
}

func (x *StrokeLayerArchive_StrokeRunArchive) GetOrigin() int32 {
	if x != nil && x.Origin != nil {
		return *x.Origin
	}
	return 0
}

func (x *StrokeLayerArchive_StrokeRunArchive) GetLength() uint32 {
	if x != nil && x.Length != nil {
		return *x.Length
	}
	return 0
}

func (x *StrokeLayerArchive_StrokeRunArchive) GetStroke() *StrokeArchive {
	if x != nil {
		return x.Stroke
	}
	return nil
}

func (x *StrokeLayerArchive_StrokeRunArchive) GetOrder() uint32 {
	if x != nil && x.Order != nil {
		return *x.Order
	}
	return 0
}

type CellListArchive_OptionalCell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cell *Cell `protobuf:"bytes,1,opt,name=cell" json:"cell,omitempty"`
}

func (x *CellListArchive_OptionalCell) Reset() {
	*x = CellListArchive_OptionalCell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellListArchive_OptionalCell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellListArchive_OptionalCell) ProtoMessage() {}

func (x *CellListArchive_OptionalCell) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellListArchive_OptionalCell.ProtoReflect.Descriptor instead.
func (*CellListArchive_OptionalCell) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{42, 0}
}

func (x *CellListArchive_OptionalCell) GetCell() *Cell {
	if x != nil {
		return x.Cell
	}
	return nil
}

type ConcurrentCellListArchive_OptionalCell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cell *Cell `protobuf:"bytes,1,opt,name=cell" json:"cell,omitempty"`
}

func (x *ConcurrentCellListArchive_OptionalCell) Reset() {
	*x = ConcurrentCellListArchive_OptionalCell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConcurrentCellListArchive_OptionalCell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConcurrentCellListArchive_OptionalCell) ProtoMessage() {}

func (x *ConcurrentCellListArchive_OptionalCell) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConcurrentCellListArchive_OptionalCell.ProtoReflect.Descriptor instead.
func (*ConcurrentCellListArchive_OptionalCell) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{44, 0}
}

func (x *ConcurrentCellListArchive_OptionalCell) GetCell() *Cell {
	if x != nil {
		return x.Cell
	}
	return nil
}

type HierarchicalCellDiffMapArchive_BoxedRow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColumnIndexSet *IndexSet          `protobuf:"bytes,1,req,name=column_index_set,json=columnIndexSet" json:"column_index_set,omitempty"`
	CellDiffList   []*CellDiffArchive `protobuf:"bytes,2,rep,name=cell_diff_list,json=cellDiffList" json:"cell_diff_list,omitempty"`
}

func (x *HierarchicalCellDiffMapArchive_BoxedRow) Reset() {
	*x = HierarchicalCellDiffMapArchive_BoxedRow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HierarchicalCellDiffMapArchive_BoxedRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HierarchicalCellDiffMapArchive_BoxedRow) ProtoMessage() {}

func (x *HierarchicalCellDiffMapArchive_BoxedRow) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HierarchicalCellDiffMapArchive_BoxedRow.ProtoReflect.Descriptor instead.
func (*HierarchicalCellDiffMapArchive_BoxedRow) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{52, 0}
}

func (x *HierarchicalCellDiffMapArchive_BoxedRow) GetColumnIndexSet() *IndexSet {
	if x != nil {
		return x.ColumnIndexSet
	}
	return nil
}

func (x *HierarchicalCellDiffMapArchive_BoxedRow) GetCellDiffList() []*CellDiffArchive {
	if x != nil {
		return x.CellDiffList
	}
	return nil
}

type DoubleStyleMapArchive_DoubleStyleMapEntryArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellId   *CellID    `protobuf:"bytes,1,req,name=cell_id,json=cellId" json:"cell_id,omitempty"`
	OldStyle *Reference `protobuf:"bytes,2,req,name=old_style,json=oldStyle" json:"old_style,omitempty"`
	NewStyle *Reference `protobuf:"bytes,3,req,name=new_style,json=newStyle" json:"new_style,omitempty"`
}

func (x *DoubleStyleMapArchive_DoubleStyleMapEntryArchive) Reset() {
	*x = DoubleStyleMapArchive_DoubleStyleMapEntryArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoubleStyleMapArchive_DoubleStyleMapEntryArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoubleStyleMapArchive_DoubleStyleMapEntryArchive) ProtoMessage() {}

func (x *DoubleStyleMapArchive_DoubleStyleMapEntryArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoubleStyleMapArchive_DoubleStyleMapEntryArchive.ProtoReflect.Descriptor instead.
func (*DoubleStyleMapArchive_DoubleStyleMapEntryArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{53, 0}
}

func (x *DoubleStyleMapArchive_DoubleStyleMapEntryArchive) GetCellId() *CellID {
	if x != nil {
		return x.CellId
	}
	return nil
}

func (x *DoubleStyleMapArchive_DoubleStyleMapEntryArchive) GetOldStyle() *Reference {
	if x != nil {
		return x.OldStyle
	}
	return nil
}

func (x *DoubleStyleMapArchive_DoubleStyleMapEntryArchive) GetNewStyle() *Reference {
	if x != nil {
		return x.NewStyle
	}
	return nil
}

type StyleTableMapArchive_StyleTableMapEntryArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key      *uint32    `protobuf:"varint,1,req,name=key" json:"key,omitempty"`
	OldStyle *Reference `protobuf:"bytes,2,req,name=old_style,json=oldStyle" json:"old_style,omitempty"`
	NewStyle *Reference `protobuf:"bytes,3,req,name=new_style,json=newStyle" json:"new_style,omitempty"`
}

func (x *StyleTableMapArchive_StyleTableMapEntryArchive) Reset() {
	*x = StyleTableMapArchive_StyleTableMapEntryArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StyleTableMapArchive_StyleTableMapEntryArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StyleTableMapArchive_StyleTableMapEntryArchive) ProtoMessage() {}

func (x *StyleTableMapArchive_StyleTableMapEntryArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StyleTableMapArchive_StyleTableMapEntryArchive.ProtoReflect.Descriptor instead.
func (*StyleTableMapArchive_StyleTableMapEntryArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{54, 0}
}

func (x *StyleTableMapArchive_StyleTableMapEntryArchive) GetKey() uint32 {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return 0
}

func (x *StyleTableMapArchive_StyleTableMapEntryArchive) GetOldStyle() *Reference {
	if x != nil {
		return x.OldStyle
	}
	return nil
}

func (x *StyleTableMapArchive_StyleTableMapEntryArchive) GetNewStyle() *Reference {
	if x != nil {
		return x.NewStyle
	}
	return nil
}

type ConditionalStyleSetArchive_ConditionalStyleRulePrePivot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Predicate *FormulaPredicatePrePivotArchive `protobuf:"bytes,1,req,name=predicate" json:"predicate,omitempty"`
	CellStyle *Reference                       `protobuf:"bytes,2,req,name=cell_style,json=cellStyle" json:"cell_style,omitempty"`
	TextStyle *Reference                       `protobuf:"bytes,3,req,name=text_style,json=textStyle" json:"text_style,omitempty"`
}

func (x *ConditionalStyleSetArchive_ConditionalStyleRulePrePivot) Reset() {
	*x = ConditionalStyleSetArchive_ConditionalStyleRulePrePivot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionalStyleSetArchive_ConditionalStyleRulePrePivot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionalStyleSetArchive_ConditionalStyleRulePrePivot) ProtoMessage() {}

func (x *ConditionalStyleSetArchive_ConditionalStyleRulePrePivot) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionalStyleSetArchive_ConditionalStyleRulePrePivot.ProtoReflect.Descriptor instead.
func (*ConditionalStyleSetArchive_ConditionalStyleRulePrePivot) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{70, 0}
}

func (x *ConditionalStyleSetArchive_ConditionalStyleRulePrePivot) GetPredicate() *FormulaPredicatePrePivotArchive {
	if x != nil {
		return x.Predicate
	}
	return nil
}

func (x *ConditionalStyleSetArchive_ConditionalStyleRulePrePivot) GetCellStyle() *Reference {
	if x != nil {
		return x.CellStyle
	}
	return nil
}

func (x *ConditionalStyleSetArchive_ConditionalStyleRulePrePivot) GetTextStyle() *Reference {
	if x != nil {
		return x.TextStyle
	}
	return nil
}

type ConditionalStyleSetArchive_ConditionalStyleRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Predicate *FormulaPredicateArchive `protobuf:"bytes,1,opt,name=predicate" json:"predicate,omitempty"`
	CellStyle *Reference               `protobuf:"bytes,2,req,name=cell_style,json=cellStyle" json:"cell_style,omitempty"`
	TextStyle *Reference               `protobuf:"bytes,3,req,name=text_style,json=textStyle" json:"text_style,omitempty"`
}

func (x *ConditionalStyleSetArchive_ConditionalStyleRule) Reset() {
	*x = ConditionalStyleSetArchive_ConditionalStyleRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionalStyleSetArchive_ConditionalStyleRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionalStyleSetArchive_ConditionalStyleRule) ProtoMessage() {}

func (x *ConditionalStyleSetArchive_ConditionalStyleRule) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionalStyleSetArchive_ConditionalStyleRule.ProtoReflect.Descriptor instead.
func (*ConditionalStyleSetArchive_ConditionalStyleRule) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{70, 1}
}

func (x *ConditionalStyleSetArchive_ConditionalStyleRule) GetPredicate() *FormulaPredicateArchive {
	if x != nil {
		return x.Predicate
	}
	return nil
}

func (x *ConditionalStyleSetArchive_ConditionalStyleRule) GetCellStyle() *Reference {
	if x != nil {
		return x.CellStyle
	}
	return nil
}

func (x *ConditionalStyleSetArchive_ConditionalStyleRule) GetTextStyle() *Reference {
	if x != nil {
		return x.TextStyle
	}
	return nil
}

type ConditionalStyleSetArchive_ConditionalStyleRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rule []*ConditionalStyleSetArchive_ConditionalStyleRule `protobuf:"bytes,1,rep,name=rule" json:"rule,omitempty"`
}

func (x *ConditionalStyleSetArchive_ConditionalStyleRules) Reset() {
	*x = ConditionalStyleSetArchive_ConditionalStyleRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionalStyleSetArchive_ConditionalStyleRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionalStyleSetArchive_ConditionalStyleRules) ProtoMessage() {}

func (x *ConditionalStyleSetArchive_ConditionalStyleRules) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionalStyleSetArchive_ConditionalStyleRules.ProtoReflect.Descriptor instead.
func (*ConditionalStyleSetArchive_ConditionalStyleRules) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{70, 2}
}

func (x *ConditionalStyleSetArchive_ConditionalStyleRules) GetRule() []*ConditionalStyleSetArchive_ConditionalStyleRule {
	if x != nil {
		return x.Rule
	}
	return nil
}

type UniqueIndexArchive_UniqueIndexEntryArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StringValue *string `protobuf:"bytes,1,req,name=string_value,json=stringValue" json:"string_value,omitempty"`
	RowUids     []*UUID `protobuf:"bytes,2,rep,name=row_uids,json=rowUids" json:"row_uids,omitempty"`
}

func (x *UniqueIndexArchive_UniqueIndexEntryArchive) Reset() {
	*x = UniqueIndexArchive_UniqueIndexEntryArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniqueIndexArchive_UniqueIndexEntryArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniqueIndexArchive_UniqueIndexEntryArchive) ProtoMessage() {}

func (x *UniqueIndexArchive_UniqueIndexEntryArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniqueIndexArchive_UniqueIndexEntryArchive.ProtoReflect.Descriptor instead.
func (*UniqueIndexArchive_UniqueIndexEntryArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{72, 0}
}

func (x *UniqueIndexArchive_UniqueIndexEntryArchive) GetStringValue() string {
	if x != nil && x.StringValue != nil {
		return *x.StringValue
	}
	return ""
}

func (x *UniqueIndexArchive_UniqueIndexEntryArchive) GetRowUids() []*UUID {
	if x != nil {
		return x.RowUids
	}
	return nil
}

type HiddenStateExtentArchive_RowOrColumnState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RowOrColumnUid *UUID `protobuf:"bytes,1,req,name=row_or_column_uid,json=rowOrColumnUid" json:"row_or_column_uid,omitempty"`
	UserHidden     *bool `protobuf:"varint,2,opt,name=user_hidden,json=userHidden" json:"user_hidden,omitempty"`
	Filtered       *bool `protobuf:"varint,3,opt,name=filtered" json:"filtered,omitempty"`
}

func (x *HiddenStateExtentArchive_RowOrColumnState) Reset() {
	*x = HiddenStateExtentArchive_RowOrColumnState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HiddenStateExtentArchive_RowOrColumnState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HiddenStateExtentArchive_RowOrColumnState) ProtoMessage() {}

func (x *HiddenStateExtentArchive_RowOrColumnState) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HiddenStateExtentArchive_RowOrColumnState.ProtoReflect.Descriptor instead.
func (*HiddenStateExtentArchive_RowOrColumnState) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{73, 0}
}

func (x *HiddenStateExtentArchive_RowOrColumnState) GetRowOrColumnUid() *UUID {
	if x != nil {
		return x.RowOrColumnUid
	}
	return nil
}

func (x *HiddenStateExtentArchive_RowOrColumnState) GetUserHidden() bool {
	if x != nil && x.UserHidden != nil {
		return *x.UserHidden
	}
	return false
}

func (x *HiddenStateExtentArchive_RowOrColumnState) GetFiltered() bool {
	if x != nil && x.Filtered != nil {
		return *x.Filtered
	}
	return false
}

type FormulaStoreArchive_FormulaStorePair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FormulaIndex *uint32         `protobuf:"varint,1,req,name=formula_index,json=formulaIndex" json:"formula_index,omitempty"`
	Formula      *FormulaArchive `protobuf:"bytes,2,req,name=formula" json:"formula,omitempty"`
}

func (x *FormulaStoreArchive_FormulaStorePair) Reset() {
	*x = FormulaStoreArchive_FormulaStorePair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormulaStoreArchive_FormulaStorePair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormulaStoreArchive_FormulaStorePair) ProtoMessage() {}

func (x *FormulaStoreArchive_FormulaStorePair) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormulaStoreArchive_FormulaStorePair.ProtoReflect.Descriptor instead.
func (*FormulaStoreArchive_FormulaStorePair) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{102, 0}
}

func (x *FormulaStoreArchive_FormulaStorePair) GetFormulaIndex() uint32 {
	if x != nil && x.FormulaIndex != nil {
		return *x.FormulaIndex
	}
	return 0
}

func (x *FormulaStoreArchive_FormulaStorePair) GetFormula() *FormulaArchive {
	if x != nil {
		return x.Formula
	}
	return nil
}

type GroupByArchive_AggNodeArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FormulaCoord *CellCoordinateArchive           `protobuf:"bytes,1,req,name=formula_coord,json=formulaCoord" json:"formula_coord,omitempty"`
	Accum        *AccumulatorArchive              `protobuf:"bytes,2,opt,name=accum" json:"accum,omitempty"`
	Child        []*GroupByArchive_AggNodeArchive `protobuf:"bytes,3,rep,name=child" json:"child,omitempty"`
}

func (x *GroupByArchive_AggNodeArchive) Reset() {
	*x = GroupByArchive_AggNodeArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupByArchive_AggNodeArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupByArchive_AggNodeArchive) ProtoMessage() {}

func (x *GroupByArchive_AggNodeArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupByArchive_AggNodeArchive.ProtoReflect.Descriptor instead.
func (*GroupByArchive_AggNodeArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{112, 0}
}

func (x *GroupByArchive_AggNodeArchive) GetFormulaCoord() *CellCoordinateArchive {
	if x != nil {
		return x.FormulaCoord
	}
	return nil
}

func (x *GroupByArchive_AggNodeArchive) GetAccum() *AccumulatorArchive {
	if x != nil {
		return x.Accum
	}
	return nil
}

func (x *GroupByArchive_AggNodeArchive) GetChild() []*GroupByArchive_AggNodeArchive {
	if x != nil {
		return x.Child
	}
	return nil
}

type GroupByArchive_GroupNodeArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupUid         *UUID                                                 `protobuf:"bytes,1,req,name=group_uid,json=groupUid" json:"group_uid,omitempty"`
	Child            []*GroupByArchive_GroupNodeArchive                    `protobuf:"bytes,3,rep,name=child" json:"child,omitempty"`
	RowUid           []*UUID                                               `protobuf:"bytes,4,rep,name=row_uid,json=rowUid" json:"row_uid,omitempty"`
	AggFormulaCoords []*CellCoordinateArchive                              `protobuf:"bytes,5,rep,name=agg_formula_coords,json=aggFormulaCoords" json:"agg_formula_coords,omitempty"`
	FormatManager    *GroupByArchive_GroupNodeArchive_FormatManagerArchive `protobuf:"bytes,6,opt,name=format_manager,json=formatManager" json:"format_manager,omitempty"`
	GroupCellValue   *CellValueArchive                                     `protobuf:"bytes,7,opt,name=group_cell_value,json=groupCellValue" json:"group_cell_value,omitempty"`
	RowIndexes       *IndexSetArchive                                      `protobuf:"bytes,8,opt,name=row_indexes,json=rowIndexes" json:"row_indexes,omitempty"`
	RowLookupUids    *IndexSetArchive                                      `protobuf:"bytes,9,opt,name=row_lookup_uids,json=rowLookupUids" json:"row_lookup_uids,omitempty"`
}

func (x *GroupByArchive_GroupNodeArchive) Reset() {
	*x = GroupByArchive_GroupNodeArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupByArchive_GroupNodeArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupByArchive_GroupNodeArchive) ProtoMessage() {}

func (x *GroupByArchive_GroupNodeArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupByArchive_GroupNodeArchive.ProtoReflect.Descriptor instead.
func (*GroupByArchive_GroupNodeArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{112, 1}
}

func (x *GroupByArchive_GroupNodeArchive) GetGroupUid() *UUID {
	if x != nil {
		return x.GroupUid
	}
	return nil
}

func (x *GroupByArchive_GroupNodeArchive) GetChild() []*GroupByArchive_GroupNodeArchive {
	if x != nil {
		return x.Child
	}
	return nil
}

func (x *GroupByArchive_GroupNodeArchive) GetRowUid() []*UUID {
	if x != nil {
		return x.RowUid
	}
	return nil
}

func (x *GroupByArchive_GroupNodeArchive) GetAggFormulaCoords() []*CellCoordinateArchive {
	if x != nil {
		return x.AggFormulaCoords
	}
	return nil
}

func (x *GroupByArchive_GroupNodeArchive) GetFormatManager() *GroupByArchive_GroupNodeArchive_FormatManagerArchive {
	if x != nil {
		return x.FormatManager
	}
	return nil
}

func (x *GroupByArchive_GroupNodeArchive) GetGroupCellValue() *CellValueArchive {
	if x != nil {
		return x.GroupCellValue
	}
	return nil
}

func (x *GroupByArchive_GroupNodeArchive) GetRowIndexes() *IndexSetArchive {
	if x != nil {
		return x.RowIndexes
	}
	return nil
}

func (x *GroupByArchive_GroupNodeArchive) GetRowLookupUids() *IndexSetArchive {
	if x != nil {
		return x.RowLookupUids
	}
	return nil
}

type GroupByArchive_AggregatorArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColumnUid *UUID                          `protobuf:"bytes,1,req,name=column_uid,json=columnUid" json:"column_uid,omitempty"`
	AggNode   *GroupByArchive_AggNodeArchive `protobuf:"bytes,2,opt,name=agg_node,json=aggNode" json:"agg_node,omitempty"`
}

func (x *GroupByArchive_AggregatorArchive) Reset() {
	*x = GroupByArchive_AggregatorArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupByArchive_AggregatorArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupByArchive_AggregatorArchive) ProtoMessage() {}

func (x *GroupByArchive_AggregatorArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupByArchive_AggregatorArchive.ProtoReflect.Descriptor instead.
func (*GroupByArchive_AggregatorArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{112, 2}
}

func (x *GroupByArchive_AggregatorArchive) GetColumnUid() *UUID {
	if x != nil {
		return x.ColumnUid
	}
	return nil
}

func (x *GroupByArchive_AggregatorArchive) GetAggNode() *GroupByArchive_AggNodeArchive {
	if x != nil {
		return x.AggNode
	}
	return nil
}

type GroupByArchive_GroupNodeArchive_FormatManagerArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CellValue        *CellValueArchive                                                     `protobuf:"bytes,1,opt,name=cell_value,json=cellValue" json:"cell_value,omitempty"`
	Formats          []*TSKFormatStructArchive                                             `protobuf:"bytes,2,rep,name=formats" json:"formats,omitempty"`
	RowSets          []*GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive `protobuf:"bytes,3,rep,name=row_sets,json=rowSets" json:"row_sets,omitempty"`
	RowUidLookupSets []*IndexSetArchive                                                    `protobuf:"bytes,4,rep,name=row_uid_lookup_sets,json=rowUidLookupSets" json:"row_uid_lookup_sets,omitempty"`
}

func (x *GroupByArchive_GroupNodeArchive_FormatManagerArchive) Reset() {
	*x = GroupByArchive_GroupNodeArchive_FormatManagerArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupByArchive_GroupNodeArchive_FormatManagerArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupByArchive_GroupNodeArchive_FormatManagerArchive) ProtoMessage() {}

func (x *GroupByArchive_GroupNodeArchive_FormatManagerArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupByArchive_GroupNodeArchive_FormatManagerArchive.ProtoReflect.Descriptor instead.
func (*GroupByArchive_GroupNodeArchive_FormatManagerArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{112, 1, 0}
}

func (x *GroupByArchive_GroupNodeArchive_FormatManagerArchive) GetCellValue() *CellValueArchive {
	if x != nil {
		return x.CellValue
	}
	return nil
}

func (x *GroupByArchive_GroupNodeArchive_FormatManagerArchive) GetFormats() []*TSKFormatStructArchive {
	if x != nil {
		return x.Formats
	}
	return nil
}

func (x *GroupByArchive_GroupNodeArchive_FormatManagerArchive) GetRowSets() []*GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive {
	if x != nil {
		return x.RowSets
	}
	return nil
}

func (x *GroupByArchive_GroupNodeArchive_FormatManagerArchive) GetRowUidLookupSets() []*IndexSetArchive {
	if x != nil {
		return x.RowUidLookupSets
	}
	return nil
}

type GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RowUids []*UUID `protobuf:"bytes,1,rep,name=row_uids,json=rowUids" json:"row_uids,omitempty"`
}

func (x *GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive) Reset() {
	*x = GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive) ProtoMessage() {}

func (x *GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive.ProtoReflect.Descriptor instead.
func (*GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{112, 1, 0, 0}
}

func (x *GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive) GetRowUids() []*UUID {
	if x != nil {
		return x.RowUids
	}
	return nil
}

type SummaryCellVendorArchive_SummaryCellEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WildcardUID *UUID `protobuf:"bytes,1,req,name=wildcardUID" json:"wildcardUID,omitempty"`
	ColumnUID   *UUID `protobuf:"bytes,2,req,name=columnUID" json:"columnUID,omitempty"`
	Cell        *Cell `protobuf:"bytes,3,req,name=cell" json:"cell,omitempty"`
}

func (x *SummaryCellVendorArchive_SummaryCellEntry) Reset() {
	*x = SummaryCellVendorArchive_SummaryCellEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummaryCellVendorArchive_SummaryCellEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummaryCellVendorArchive_SummaryCellEntry) ProtoMessage() {}

func (x *SummaryCellVendorArchive_SummaryCellEntry) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummaryCellVendorArchive_SummaryCellEntry.ProtoReflect.Descriptor instead.
func (*SummaryCellVendorArchive_SummaryCellEntry) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{125, 0}
}

func (x *SummaryCellVendorArchive_SummaryCellEntry) GetWildcardUID() *UUID {
	if x != nil {
		return x.WildcardUID
	}
	return nil
}

func (x *SummaryCellVendorArchive_SummaryCellEntry) GetColumnUID() *UUID {
	if x != nil {
		return x.ColumnUID
	}
	return nil
}

func (x *SummaryCellVendorArchive_SummaryCellEntry) GetCell() *Cell {
	if x != nil {
		return x.Cell
	}
	return nil
}

type HeaderNameMgrTileArchive_NameFragmentArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NameFragment       *string                `protobuf:"bytes,1,req,name=name_fragment,json=nameFragment" json:"name_fragment,omitempty"`
	NamePrecedent      *CellCoordinateArchive `protobuf:"bytes,2,req,name=name_precedent,json=namePrecedent" json:"name_precedent,omitempty"`
	UsesOfNameFragment *UidCellRefSetArchive  `protobuf:"bytes,3,opt,name=uses_of_name_fragment,json=usesOfNameFragment" json:"uses_of_name_fragment,omitempty"`
}

func (x *HeaderNameMgrTileArchive_NameFragmentArchive) Reset() {
	*x = HeaderNameMgrTileArchive_NameFragmentArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeaderNameMgrTileArchive_NameFragmentArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeaderNameMgrTileArchive_NameFragmentArchive) ProtoMessage() {}

func (x *HeaderNameMgrTileArchive_NameFragmentArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeaderNameMgrTileArchive_NameFragmentArchive.ProtoReflect.Descriptor instead.
func (*HeaderNameMgrTileArchive_NameFragmentArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{128, 0}
}

func (x *HeaderNameMgrTileArchive_NameFragmentArchive) GetNameFragment() string {
	if x != nil && x.NameFragment != nil {
		return *x.NameFragment
	}
	return ""
}

func (x *HeaderNameMgrTileArchive_NameFragmentArchive) GetNamePrecedent() *CellCoordinateArchive {
	if x != nil {
		return x.NamePrecedent
	}
	return nil
}

func (x *HeaderNameMgrTileArchive_NameFragmentArchive) GetUsesOfNameFragment() *UidCellRefSetArchive {
	if x != nil {
		return x.UsesOfNameFragment
	}
	return nil
}

type HeaderNameMgrArchive_PerTableArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableUid               *UUID                  `protobuf:"bytes,1,req,name=table_uid,json=tableUid" json:"table_uid,omitempty"`
	PerTablePrecedent      *CellCoordinateArchive `protobuf:"bytes,2,req,name=per_table_precedent,json=perTablePrecedent" json:"per_table_precedent,omitempty"`
	IsDeleted              *bool                  `protobuf:"varint,3,opt,name=is_deleted,json=isDeleted" json:"is_deleted,omitempty"`
	HeaderRowUids          []*UUID                `protobuf:"bytes,5,rep,name=header_row_uids,json=headerRowUids" json:"header_row_uids,omitempty"`
	HeaderColumnUids       []*UUID                `protobuf:"bytes,6,rep,name=header_column_uids,json=headerColumnUids" json:"header_column_uids,omitempty"`
	UpdateHeaderRowUids    []*UUID                `protobuf:"bytes,7,rep,name=update_header_row_uids,json=updateHeaderRowUids" json:"update_header_row_uids,omitempty"`
	UpdateHeaderColumnUids []*UUID                `protobuf:"bytes,8,rep,name=update_header_column_uids,json=updateHeaderColumnUids" json:"update_header_column_uids,omitempty"`
}

func (x *HeaderNameMgrArchive_PerTableArchive) Reset() {
	*x = HeaderNameMgrArchive_PerTableArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTArchives_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeaderNameMgrArchive_PerTableArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeaderNameMgrArchive_PerTableArchive) ProtoMessage() {}

func (x *HeaderNameMgrArchive_PerTableArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTArchives_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeaderNameMgrArchive_PerTableArchive.ProtoReflect.Descriptor instead.
func (*HeaderNameMgrArchive_PerTableArchive) Descriptor() ([]byte, []int) {
	return file_TSTArchives_proto_rawDescGZIP(), []int{129, 0}
}

func (x *HeaderNameMgrArchive_PerTableArchive) GetTableUid() *UUID {
	if x != nil {
		return x.TableUid
	}
	return nil
}

func (x *HeaderNameMgrArchive_PerTableArchive) GetPerTablePrecedent() *CellCoordinateArchive {
	if x != nil {
		return x.PerTablePrecedent
	}
	return nil
}

func (x *HeaderNameMgrArchive_PerTableArchive) GetIsDeleted() bool {
	if x != nil && x.IsDeleted != nil {
		return *x.IsDeleted
	}
	return false
}

func (x *HeaderNameMgrArchive_PerTableArchive) GetHeaderRowUids() []*UUID {
	if x != nil {
		return x.HeaderRowUids
	}
	return nil
}

func (x *HeaderNameMgrArchive_PerTableArchive) GetHeaderColumnUids() []*UUID {
	if x != nil {
		return x.HeaderColumnUids
	}
	return nil
}

func (x *HeaderNameMgrArchive_PerTableArchive) GetUpdateHeaderRowUids() []*UUID {
	if x != nil {
		return x.UpdateHeaderRowUids
	}
	return nil
}

func (x *HeaderNameMgrArchive_PerTableArchive) GetUpdateHeaderColumnUids() []*UUID {
	if x != nil {
		return x.UpdateHeaderColumnUids
	}
	return nil
}

var file_TSTArchives_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*CommandPropertyEntryArchive)(nil),
		ExtensionType: (*ImportWarningSetArchive)(nil),
		Field:         500,
		Name:          "TST.import_warning_set",
		Tag:           "bytes,500,opt,name=import_warning_set",
		Filename:      "TSTArchives.proto",
	},
	{
		ExtendedType:  (*CommandPropertyEntryArchive)(nil),
		ExtensionType: (*CellFormatAndValueArchive)(nil),
		Field:         501,
		Name:          "TST.format_and_value",
		Tag:           "bytes,501,opt,name=format_and_value",
		Filename:      "TSTArchives.proto",
	},
	{
		ExtendedType:  (*CommandPropertyEntryArchive)(nil),
		ExtensionType: (*CellBorderArchive)(nil),
		Field:         503,
		Name:          "TST.cell_border",
		Tag:           "bytes,503,opt,name=cell_border",
		Filename:      "TSTArchives.proto",
	},
	{
		ExtendedType:  (*CommandPropertyEntryArchive)(nil),
		ExtensionType: (*CommentStorageWrapperArchive)(nil),
		Field:         504,
		Name:          "TST.comment_storage",
		Tag:           "bytes,504,opt,name=comment_storage",
		Filename:      "TSTArchives.proto",
	},
	{
		ExtendedType:  (*CommandPropertyEntryArchive)(nil),
		ExtensionType: (*CellSpecArchive)(nil),
		Field:         505,
		Name:          "TST.cell_spec",
		Tag:           "bytes,505,opt,name=cell_spec",
		Filename:      "TSTArchives.proto",
	},
}

// Extension fields to CommandPropertyEntryArchive.
var (
	// optional TST.ImportWarningSetArchive import_warning_set = 500;
	E_ImportWarningSet = &file_TSTArchives_proto_extTypes[0]
	// optional TST.CellFormatAndValueArchive format_and_value = 501;
	E_FormatAndValue = &file_TSTArchives_proto_extTypes[1]
	// optional TST.CellBorderArchive cell_border = 503;
	E_CellBorder = &file_TSTArchives_proto_extTypes[2]
	// optional TST.CommentStorageWrapperArchive comment_storage = 504;
	E_CommentStorage = &file_TSTArchives_proto_extTypes[3]
	// optional TST.CellSpecArchive cell_spec = 505;
	E_CellSpec = &file_TSTArchives_proto_extTypes[4]
)

var File_TSTArchives_proto protoreflect.FileDescriptor

var file_TSTArchives_proto_rawDesc = []byte{
	0x0a, 0x11, 0x54, 0x53, 0x54, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x03, 0x54, 0x53, 0x54, 0x1a, 0x11, 0x54, 0x53, 0x50, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x54, 0x53, 0x44,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11,
	0x54, 0x53, 0x4b, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x11, 0x54, 0x53, 0x53, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x54, 0x53, 0x43, 0x45, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x54, 0x53, 0x57, 0x50, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x54, 0x53,
	0x54, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6c, 0x0a,
	0x06, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x02, 0x28, 0x07, 0x52, 0x0a, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x61, 0x6e,
	0x64, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0d, 0x65, 0x78,
	0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x22, 0xd6, 0x01, 0x0a, 0x18,
	0x43, 0x65, 0x6c, 0x6c, 0x55, 0x49, 0x44, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x5f, 0x75, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x54, 0x53, 0x43, 0x45, 0x2e, 0x55, 0x69, 0x64, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x55, 0x69, 0x64, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x72, 0x6f, 0x77, 0x5f, 0x75, 0x69, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x55,
	0x69, 0x64, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x07, 0x72, 0x6f, 0x77, 0x55, 0x69, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x6f, 0x77, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x65, 0x73, 0x22, 0xb1, 0x02, 0x0a, 0x12, 0x43, 0x65, 0x6c, 0x6c, 0x55, 0x49, 0x44,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x24, 0x0a, 0x08, 0x72,
	0x6f, 0x77, 0x5f, 0x75, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x07, 0x72, 0x6f, 0x77, 0x55, 0x69, 0x64,
	0x73, 0x12, 0x2a, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x75, 0x69, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49,
	0x44, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x55, 0x69, 0x64, 0x73, 0x12, 0x34, 0x0a,
	0x16, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x77, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x14, 0x63,
	0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x52, 0x6f, 0x77, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x17, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12,
	0x57, 0x0a, 0x18, 0x75, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f,
	0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x55, 0x49, 0x44, 0x4c,
	0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x16, 0x75, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x4c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x67, 0x0a, 0x09, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x02, 0x28, 0x07, 0x52, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x6f,
	0x77, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x52, 0x6f, 0x77,
	0x73, 0x22, 0x4f, 0x0a, 0x11, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0a, 0x6e, 0x75, 0x6d,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x75, 0x6d, 0x5f, 0x72,
	0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x52, 0x6f,
	0x77, 0x73, 0x22, 0x54, 0x0a, 0x09, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x23, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x44, 0x52, 0x06, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x74, 0x0a, 0x11, 0x45, 0x78, 0x70, 0x61,
	0x6e, 0x64, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x33, 0x0a,
	0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x54, 0x53, 0x43, 0x45, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x12, 0x2a, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0xf6,
	0x01, 0x0a, 0x0e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2c, 0x0a, 0x09, 0x63, 0x65, 0x6c, 0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x63, 0x65, 0x6c, 0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x3c, 0x0a, 0x11, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x54,
	0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x11, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x36, 0x0a,
	0x16, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x08, 0x52, 0x16, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x54, 0x53, 0x54, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0xe7, 0x02, 0x0a, 0x0b, 0x54, 0x69, 0x6c, 0x65,
	0x52, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x69, 0x6c, 0x65, 0x5f,
	0x72, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x0c, 0x74, 0x69, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0d, 0x52, 0x09, 0x63, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x1b,
	0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x5f, 0x62, 0x6e, 0x63, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x0c, 0x52, 0x17, 0x63, 0x65, 0x6c, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x50, 0x72, 0x65, 0x42, 0x6e, 0x63, 0x12, 0x2f, 0x0a, 0x14, 0x63, 0x65,
	0x6c, 0x6c, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x5f, 0x62,
	0x6e, 0x63, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x11, 0x63, 0x65, 0x6c, 0x6c, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x73, 0x50, 0x72, 0x65, 0x42, 0x6e, 0x63, 0x12, 0x27, 0x0a, 0x0f, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x11, 0x63, 0x65, 0x6c, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x63, 0x65, 0x6c, 0x6c,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x61, 0x73, 0x5f, 0x77,
	0x69, 0x64, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x68, 0x61, 0x73, 0x57, 0x69, 0x64, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x73, 0x22, 0xa5, 0x02, 0x0a, 0x04, 0x54, 0x69, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61,
	0x78, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x09, 0x6d,
	0x61, 0x78, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x52,
	0x6f, 0x77, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x52, 0x6f, 0x77,
	0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x75, 0x6d, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x0d, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x6e, 0x75, 0x6d, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x07, 0x6e,
	0x75, 0x6d, 0x72, 0x6f, 0x77, 0x73, 0x12, 0x2c, 0x0a, 0x08, 0x72, 0x6f, 0x77, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54,
	0x69, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x72, 0x6f, 0x77, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a,
	0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x42,
	0x4e, 0x43, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x61,
	0x76, 0x65, 0x64, 0x49, 0x6e, 0x42, 0x4e, 0x43, 0x12, 0x2f, 0x0a, 0x14, 0x73, 0x68, 0x6f, 0x75,
	0x6c, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x77, 0x69, 0x64, 0x65, 0x5f, 0x72, 0x6f, 0x77, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x55, 0x73,
	0x65, 0x57, 0x69, 0x64, 0x65, 0x52, 0x6f, 0x77, 0x73, 0x22, 0xcc, 0x01, 0x0a, 0x0b, 0x54, 0x69,
	0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x74, 0x69, 0x6c,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54,
	0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x69, 0x6c, 0x65, 0x52,
	0x05, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x69, 0x6c, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x75, 0x73,
	0x65, 0x5f, 0x77, 0x69, 0x64, 0x65, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x55, 0x73, 0x65, 0x57, 0x69, 0x64, 0x65,
	0x52, 0x6f, 0x77, 0x73, 0x1a, 0x42, 0x0a, 0x04, 0x54, 0x69, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x69,
	0x6c, 0x65, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x04, 0x74, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x04, 0x74, 0x69, 0x6c, 0x65, 0x22, 0xb8, 0x04, 0x0a, 0x0e, 0x50, 0x6f, 0x70,
	0x55, 0x70, 0x4d, 0x65, 0x6e, 0x75, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x35, 0x0a, 0x04, 0x69,
	0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x54, 0x53, 0x54, 0x2e,
	0x50, 0x6f, 0x70, 0x55, 0x70, 0x4d, 0x65, 0x6e, 0x75, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43,
	0x65, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x04, 0x69, 0x74,
	0x65, 0x6d, 0x12, 0x33, 0x0a, 0x09, 0x74, 0x73, 0x63, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x43, 0x65, 0x6c,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x08, 0x74,
	0x73, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x1a, 0xd7, 0x02, 0x0a, 0x09, 0x43, 0x65, 0x6c, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x49, 0x0a, 0x0f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x21,
	0x2e, 0x54, 0x53, 0x54, 0x2e, 0x50, 0x6f, 0x70, 0x55, 0x70, 0x4d, 0x65, 0x6e, 0x75, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0d, 0x63, 0x65, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x42, 0x0a, 0x0d, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x43, 0x65, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x3f, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x43, 0x65, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x43, 0x65, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x60, 0x0a, 0x0d, 0x43, 0x65, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x49, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x01,
	0x12, 0x10, 0x0a, 0x0c, 0x42, 0x4f, 0x4f, 0x4c, 0x45, 0x41, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10,
	0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x10, 0x05, 0x22, 0xd3, 0x0f, 0x0a, 0x17, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12,
	0x67, 0x0a, 0x16, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x46, 0x6f,
	0x72, 0x6d, 0x75, 0x6c, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x52, 0x14, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x4a, 0x0a, 0x1f, 0x63, 0x6f, 0x6e, 0x64,
	0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x61, 0x62, 0x6f, 0x76, 0x65, 0x5f, 0x61, 0x76,
	0x67, 0x5f, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x5f, 0x61, 0x76, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x1a, 0x63, 0x6f, 0x6e, 0x64, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x41, 0x62, 0x6f, 0x76, 0x65, 0x41, 0x76, 0x67, 0x45, 0x71, 0x75, 0x61,
	0x6c, 0x41, 0x76, 0x67, 0x12, 0x46, 0x0a, 0x1d, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x5f, 0x61, 0x62, 0x6f, 0x76, 0x65, 0x5f, 0x61, 0x76, 0x67, 0x5f, 0x73, 0x74,
	0x64, 0x5f, 0x64, 0x65, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x18, 0x63, 0x6f, 0x6e, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x41, 0x62,
	0x6f, 0x76, 0x65, 0x41, 0x76, 0x67, 0x53, 0x74, 0x64, 0x44, 0x65, 0x76, 0x12, 0x44, 0x0a, 0x1b,
	0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x78, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x18, 0x63, 0x6f, 0x6e, 0x64, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x46, 0x6f, 0x72, 0x6d, 0x75,
	0x6c, 0x61, 0x12, 0x44, 0x0a, 0x1b, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x18,
	0x63, 0x6f, 0x6e, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x2f, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x64,
	0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x64, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x45, 0x78, 0x70, 0x72, 0x12, 0x4b, 0x0a, 0x1f, 0x63, 0x6f, 0x6e,
	0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x73, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x1b, 0x63, 0x6f, 0x6e, 0x64, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4e, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x5b, 0x0a, 0x28, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52,
	0x22, 0x63, 0x6f, 0x6e, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x4e, 0x6f, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x61, 0x6d, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x69, 0x66, 0x5f, 0x74, 0x72, 0x75, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x14, 0x63, 0x6f,
	0x6e, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x49, 0x66, 0x54, 0x72,
	0x75, 0x65, 0x12, 0x4e, 0x0a, 0x20, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x5f, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x52, 0x1d, 0x63, 0x6f, 0x6e, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x55,
	0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x4c, 0x0a, 0x1f, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x5f, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74,
	0x79, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x1c, 0x63, 0x6f, 0x6e, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x55, 0x6e,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x74, 0x79, 0x6c, 0x69, 0x6e, 0x67,
	0x12, 0x53, 0x0a, 0x23, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f,
	0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x52, 0x1f, 0x63, 0x6f, 0x6e, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x41, 0x0a, 0x1a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63,
	0x65, 0x6c, 0x6c, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6e, 0x6f, 0x5f, 0x66, 0x6f, 0x72, 0x6d,
	0x75, 0x6c, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x52, 0x16, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x65, 0x6c, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x4e,
	0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x12, 0x3d, 0x0a, 0x17, 0x75, 0x6e, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x52, 0x15, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e,
	0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x6f, 0x0a, 0x32, 0x66, 0x6f, 0x72,
	0x6d, 0x75, 0x6c, 0x61, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x66, 0x6f, 0x72,
	0x6d, 0x75, 0x6c, 0x61, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x70, 0x69, 0x65, 0x64, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x2c, 0x66, 0x6f,
	0x72, 0x6d, 0x75, 0x6c, 0x61, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c,
	0x61, 0x4e, 0x6f, 0x74, 0x43, 0x6f, 0x70, 0x69, 0x65, 0x64, 0x12, 0x48, 0x0a, 0x1d, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x1a, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x64, 0x1a, 0x8c, 0x02, 0x0a, 0x14, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x61, 0x0a,
	0x14, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x54, 0x53,
	0x54, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x53,
	0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c,
	0x61, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x12, 0x66, 0x6f,
	0x72, 0x6d, 0x75, 0x6c, 0x61, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x6f, 0x72,
	0x6d, 0x75, 0x6c, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x12, 0x2d, 0x0a, 0x12, 0x73,
	0x75, 0x70, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x54, 0x65, 0x78, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x66, 0x6f,
	0x72, 0x6d, 0x75, 0x6c, 0x61, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x66, 0x6f,
	0x72, 0x6d, 0x75, 0x6c, 0x61, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x6e, 0x74, 0x22, 0xa3, 0x03, 0x0a, 0x12, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x57,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x48,
	0x52, 0x45, 0x45, 0x5f, 0x44, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10,
	0x01, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x52, 0x52, 0x41, 0x59, 0x45, 0x44, 0x5f, 0x46, 0x4f, 0x52,
	0x4d, 0x55, 0x4c, 0x41, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x49, 0x46, 0x46, 0x45, 0x52,
	0x45, 0x4e, 0x54, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x46, 0x4f, 0x52,
	0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12,
	0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e,
	0x43, 0x45, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x41, 0x4c, 0x5f,
	0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x55, 0x4c, 0x41,
	0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f,
	0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x53, 0x10, 0x07, 0x12,
	0x21, 0x0a, 0x1d, 0x53, 0x48, 0x41, 0x52, 0x45, 0x44, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x55, 0x4c,
	0x41, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44,
	0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4e, 0x41,
	0x4d, 0x45, 0x10, 0x09, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52,
	0x54, 0x45, 0x44, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x55, 0x4c, 0x41, 0x10, 0x0a, 0x12, 0x18, 0x0a,
	0x14, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x46, 0x55, 0x4e,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0b, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x4e, 0x53, 0x55, 0x50,
	0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x0c, 0x12, 0x18, 0x0a,
	0x14, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x53, 0x45, 0x44, 0x5f, 0x4e, 0x4f, 0x5f, 0x49,
	0x53, 0x53, 0x55, 0x45, 0x53, 0x10, 0x0d, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x50, 0x4f, 0x53, 0x45, 0x44, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x45,
	0x53, 0x10, 0x0e, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x53, 0x45,
	0x44, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x45, 0x53, 0x5f, 0x55, 0x4e,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x10, 0x0f, 0x22, 0x9a, 0x01, 0x0a, 0x22, 0x43, 0x65,
	0x6c, 0x6c, 0x52, 0x65, 0x66, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x53, 0x65, 0x74, 0x50, 0x61, 0x69, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x12, 0x35, 0x0a, 0x08, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x07,
	0x63, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x66, 0x12, 0x3d, 0x0a, 0x0b, 0x77, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x54,
	0x53, 0x54, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x53, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x77, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x22, 0x84, 0x01, 0x0a, 0x20, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x42, 0x79, 0x43, 0x65, 0x6c,
	0x6c, 0x52, 0x65, 0x66, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x60, 0x0a, 0x18, 0x63,
	0x65, 0x6c, 0x6c, 0x72, 0x65, 0x66, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x65, 0x74, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x54, 0x53, 0x54, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x66, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x50, 0x61, 0x69, 0x72, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x15, 0x63, 0x65, 0x6c, 0x6c, 0x72, 0x65, 0x66, 0x57,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x50, 0x61, 0x69, 0x72, 0x22, 0xd8, 0x07,
	0x0a, 0x0d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x37, 0x0a, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x6c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x65, 0x78, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0a, 0x6e, 0x65,
	0x78, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x44, 0x12, 0x36, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x54, 0x53, 0x54, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x2a, 0x0a, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x97, 0x04, 0x0a,
	0x09, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x66, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x08,
	0x72, 0x65, 0x66, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x2c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2e,
	0x0a, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x12, 0x33,
	0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x54, 0x53, 0x4b, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x06, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x3d, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x4b,
	0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x3a, 0x0a, 0x11, 0x72, 0x69, 0x63, 0x68, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x72,
	0x69, 0x63, 0x68, 0x54, 0x65, 0x78, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x37,
	0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x4a, 0x0a, 0x12, 0x69, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x10, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x53, 0x65, 0x74, 0x12, 0x31, 0x0a, 0x09, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x43, 0x65, 0x6c,
	0x6c, 0x53, 0x70, 0x65, 0x63, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x08, 0x63, 0x65,
	0x6c, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x22, 0xef, 0x01, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x46,
	0x4f, 0x52, 0x4d, 0x55, 0x4c, 0x41, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x54, 0x59, 0x4c,
	0x45, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x4f, 0x52, 0x4d, 0x55, 0x4c, 0x41, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d,
	0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x10, 0x06, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x55, 0x4c,
	0x54, 0x49, 0x50, 0x4c, 0x45, 0x5f, 0x43, 0x48, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x49,
	0x43, 0x48, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x10,
	0x08, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c,
	0x5f, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x10, 0x09, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x4d, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x10, 0x0a, 0x12, 0x12, 0x0a,
	0x0e, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10,
	0x0b, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x43, 0x45, 0x4c,
	0x4c, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x10, 0x0c, 0x22, 0xb1, 0x01, 0x0a, 0x14, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x38, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x09, 0x6b,
	0x65, 0x79, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x6a, 0x0a, 0x0b,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x42, 0x54, 0x72, 0x65, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x54, 0x53, 0x54,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x42, 0x54, 0x72, 0x65, 0x65, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x1a, 0x2e, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xdb, 0x02, 0x0a, 0x13, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x12, 0x2e, 0x0a, 0x12, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x12, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x39, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x1a, 0xd8, 0x01, 0x0a, 0x06,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x02, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x68, 0x69, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0b, 0x68, 0x69, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x43, 0x65,
	0x6c, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x4f, 0x66, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x2d, 0x0a, 0x0a, 0x63, 0x65, 0x6c, 0x6c,
	0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x63, 0x65,
	0x6c, 0x6c, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x5f,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x74, 0x65, 0x78,
	0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x22, 0x69, 0x0a, 0x0d, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x48, 0x61, 0x73, 0x68, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0d, 0x52, 0x12, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x22, 0xfc, 0x09, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12,
	0x32, 0x0a, 0x0a, 0x72, 0x6f, 0x77, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x0a, 0x72, 0x6f, 0x77, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x34, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x05, 0x74, 0x69, 0x6c,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54,
	0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x05, 0x74, 0x69, 0x6c, 0x65,
	0x73, 0x12, 0x30, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x04, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x0a, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x6d,
	0x75, 0x6c, 0x61, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x11, 0x66, 0x6f, 0x72, 0x6d,
	0x75, 0x6c, 0x61, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x11, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x14, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x5f, 0x62, 0x6e, 0x63, 0x18, 0x0b,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x11, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x50, 0x72, 0x65, 0x42, 0x6e, 0x63, 0x12, 0x54, 0x0a, 0x1d, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x1d,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x38, 0x0a,
	0x10, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61,
	0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x12, 0x3c, 0x0a, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x52, 0x6f, 0x77,
	0x53, 0x74, 0x72, 0x69, 0x70, 0x49, 0x44, 0x18, 0x07, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0e, 0x6e,
	0x65, 0x78, 0x74, 0x52, 0x6f, 0x77, 0x53, 0x74, 0x72, 0x69, 0x70, 0x49, 0x44, 0x12, 0x2c, 0x0a,
	0x11, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x70,
	0x49, 0x44, 0x18, 0x08, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x11, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x70, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x0b, 0x72,
	0x6f, 0x77, 0x54, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x18, 0x09, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x42, 0x54, 0x72,
	0x65, 0x65, 0x52, 0x0b, 0x72, 0x6f, 0x77, 0x54, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x12,
	0x38, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x65,
	0x65, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x42, 0x54, 0x72, 0x65, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x54, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x65,
	0x5f, 0x62, 0x6e, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x42, 0x6e, 0x63,
	0x12, 0x36, 0x0a, 0x0f, 0x72, 0x69, 0x63, 0x68, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x72, 0x69, 0x63, 0x68, 0x54,
	0x65, 0x78, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x44, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x40,
	0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x13, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x44, 0x0a, 0x15, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x53, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x15, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x45, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x43, 0x65, 0x6c, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x31, 0x0a,
	0x0c, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x22, 0xd5, 0x06, 0x0a, 0x10, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x61,
	0x62, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x12, 0x2e, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x12, 0x37, 0x0a, 0x0d, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0c, 0x65, 0x64,
	0x69, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x0d, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x0c, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12,
	0x35, 0x0a, 0x0e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x14, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x75, 0x69, 0x64, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x11, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x52, 0x6f, 0x77, 0x55, 0x69, 0x64, 0x73, 0x12, 0x2d, 0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x62, 0x79, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x42, 0x79, 0x55, 0x75, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x12, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x10, 0x68,
	0x69, 0x64, 0x64, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x42, 0x0a, 0x1c, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64,
	0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x34, 0x30, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01, 0x52, 0x18, 0x66, 0x6f, 0x72, 0x6d, 0x75,
	0x6c, 0x61, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x50, 0x72,
	0x65, 0x34, 0x30, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x5f, 0x63,
	0x6f, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x17, 0x70, 0x61, 0x73, 0x74, 0x65, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x43, 0x6f, 0x6f, 0x72,
	0x64, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x15,
	0x70, 0x61, 0x73, 0x74, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x4d,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0d, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54,
	0x53, 0x54, 0x2e, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0c, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x45, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x12, 0x38, 0x0a, 0x10, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e,
	0x70, 0x69, 0x76, 0x6f, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x27,
	0x0a, 0x10, 0x69, 0x73, 0x5f, 0x61, 0x5f, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x41, 0x50, 0x69, 0x76,
	0x6f, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x0b, 0x70, 0x69, 0x76, 0x6f, 0x74,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x70, 0x69,
	0x76, 0x6f, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x71, 0x0a, 0x13, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12,
	0x2a, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x54, 0x53, 0x44, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x0a, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0x6b, 0x0a, 0x12, 0x57,
	0x50, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x12, 0x2b, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x28,
	0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x22, 0xdc, 0x12, 0x0a, 0x18, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x36, 0x0a, 0x0f, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x74, 0x65,
	0x78, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0d,
	0x62, 0x6f, 0x64, 0x79, 0x54, 0x65, 0x78, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x41, 0x0a,
	0x15, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x74, 0x65, 0x78, 0x74,
	0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x12, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x6f, 0x77, 0x54, 0x65, 0x78, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x12, 0x47, 0x0a, 0x18, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x15, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x54, 0x65, 0x78, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x41, 0x0a, 0x15, 0x66, 0x6f, 0x6f,
	0x74, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x12, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72,
	0x52, 0x6f, 0x77, 0x54, 0x65, 0x78, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x0f,
	0x62, 0x6f, 0x64, 0x79, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18,
	0x05, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x62, 0x6f, 0x64, 0x79, 0x43, 0x65, 0x6c, 0x6c, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x10, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x72,
	0x6f, 0x77, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x6f, 0x77, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x3e,
	0x0a, 0x13, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x11, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x38,
	0x0a, 0x10, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x18, 0x08, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72,
	0x52, 0x6f, 0x77, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x0b, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x10, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x0e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x12, 0x43, 0x0a, 0x16, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x65, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x13, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x68,
	0x61, 0x70, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x1b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x31, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x73,
	0x74, 0x79, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x17, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x54, 0x65, 0x78, 0x74, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x12, 0x4c, 0x0a, 0x1b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x32, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x17, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x54, 0x65, 0x78, 0x74, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x12, 0x4c, 0x0a, 0x1b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x33, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x17, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x33, 0x54, 0x65, 0x78, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12,
	0x4c, 0x0a, 0x1b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x34, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x17, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x34, 0x54, 0x65, 0x78, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x4c, 0x0a,
	0x1b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f,
	0x35, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x17, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x35, 0x54, 0x65, 0x78, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x43, 0x0a, 0x16, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x31, 0x5f,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x13, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x12, 0x43, 0x0a, 0x16, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x5f, 0x32, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x13, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x32,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x43, 0x0a, 0x16, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x33, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x13, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x33, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x43, 0x0a, 0x16, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x34, 0x5f, 0x73,
	0x74, 0x79, 0x6c, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x13, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x34, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12,
	0x43, 0x0a, 0x16, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x35, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x13, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x35, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x12, 0x46, 0x0a, 0x18, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x31, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x14, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x31, 0x54, 0x65, 0x78, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x46, 0x0a, 0x18,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x32, 0x5f, 0x74, 0x65,
	0x78, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x14,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x54, 0x65, 0x78, 0x74, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x12, 0x46, 0x0a, 0x18, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x33, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x14, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x33, 0x54, 0x65, 0x78, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x46, 0x0a, 0x18,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x34, 0x5f, 0x74, 0x65,
	0x78, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x14,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x34, 0x54, 0x65, 0x78, 0x74, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x12, 0x46, 0x0a, 0x18, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x35, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x14, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x35, 0x54, 0x65, 0x78, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x13,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x31, 0x5f, 0x73, 0x74,
	0x79, 0x6c, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x13, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x32, 0x5f, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x32, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x13, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x33, 0x5f, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x33, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x13, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x34, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x34, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x13, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x35, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x35, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x4e, 0x0a, 0x1c, 0x70, 0x69, 0x76, 0x6f, 0x74,
	0x5f, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x72, 0x6f,
	0x77, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x18, 0x70,
	0x69, 0x76, 0x6f, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52,
	0x6f, 0x77, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x54, 0x0a, 0x1f, 0x70, 0x69, 0x76, 0x6f, 0x74,
	0x5f, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x1b, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x58, 0x0a,
	0x21, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x1d, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x22, 0x96, 0x03, 0x0a, 0x1d, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x55,
	0x49, 0x44, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x64, 0x0a, 0x10, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x49, 0x44,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6f, 0x72,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x55, 0x49, 0x44, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x1a,
	0x8e, 0x02, 0x0a, 0x17, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x55, 0x49, 0x44, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x39, 0x0a, 0x13, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55,
	0x55, 0x49, 0x44, 0x52, 0x11, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x55, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x55, 0x69, 0x64,
	0x12, 0x62, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x44, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x49, 0x44,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6f, 0x72,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x55, 0x49, 0x44, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2a, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x0d, 0x0a, 0x09, 0x61, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x01,
	0x22, 0xe9, 0x02, 0x0a, 0x15, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x6f,
	0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x53,
	0x6f, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x1a, 0xa7, 0x01, 0x0a, 0x0f, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x52, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x0e, 0x32, 0x34, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x6f,
	0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x53,
	0x6f, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x2a, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x0d, 0x0a, 0x09, 0x61, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x12,
	0x0e, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x22,
	0x2b, 0x0a, 0x08, 0x53, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x65,
	0x6e, 0x74, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x00, 0x12, 0x0d, 0x0a,
	0x09, 0x72, 0x6f, 0x77, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x10, 0x01, 0x22, 0x89, 0x03, 0x0a,
	0x18, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x55,
	0x49, 0x44, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x49, 0x44, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x49, 0x44, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x1a, 0xbe, 0x01, 0x0a, 0x0f, 0x53,
	0x6f, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x28,
	0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x09, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x55, 0x69, 0x64, 0x12, 0x55, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x54, 0x53,
	0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x55, 0x49, 0x44, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x2a, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0d, 0x0a, 0x09,
	0x61, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x64,
	0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x22, 0x2b, 0x0a, 0x08, 0x53,
	0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x65, 0x6e, 0x74, 0x69, 0x72,
	0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x72, 0x6f, 0x77,
	0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x10, 0x01, 0x22, 0x5e, 0x0a, 0x1f, 0x53, 0x6f, 0x72, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x3b, 0x0a, 0x11, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x22, 0x3d, 0x0a, 0x0a, 0x43, 0x65, 0x6c, 0x6c,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x0b, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53,
	0x54, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0a, 0x63, 0x65, 0x6c,
	0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0x54, 0x0a, 0x14, 0x43, 0x65, 0x6c, 0x6c, 0x55,
	0x49, 0x44, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12,
	0x3c, 0x0a, 0x0f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x75, 0x69, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55,
	0x55, 0x49, 0x44, 0x52, 0x65, 0x63, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0d,
	0x63, 0x65, 0x6c, 0x6c, 0x55, 0x69, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0xac, 0x03,
	0x0a, 0x1a, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x4a, 0x0a, 0x0f,
	0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0e, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0a, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x27, 0x0a, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x0f, 0x69, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x52, 0x0e, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x6f, 0x77,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa5, 0x29, 0x0a,
	0x11, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x2b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x77, 0x61, 0x73, 0x5f, 0x63, 0x75, 0x74, 0x18, 0x32, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x77, 0x61, 0x73, 0x43, 0x75, 0x74, 0x12, 0x2f, 0x0a, 0x0b, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x0f, 0x62,
	0x6f, 0x64, 0x79, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x18,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x62, 0x6f, 0x64, 0x79, 0x54, 0x65, 0x78, 0x74, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x12, 0x41, 0x0a, 0x15, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x6f,
	0x77, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x19, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x12, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x6f, 0x77, 0x54, 0x65, 0x78,
	0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x47, 0x0a, 0x18, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x18, 0x1a, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x15, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12,
	0x41, 0x0a, 0x15, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x74, 0x65,
	0x78, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x1b, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x12,
	0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x77, 0x54, 0x65, 0x78, 0x74, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x12, 0x36, 0x0a, 0x0f, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x12, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x62, 0x6f, 0x64,
	0x79, 0x43, 0x65, 0x6c, 0x6c, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x10, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x13,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x6f, 0x77, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x13, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x14, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x11, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x10, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x5f, 0x72,
	0x6f, 0x77, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x15, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e,
	0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x77, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x38,
	0x0a, 0x10, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x43, 0x0a, 0x16, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x65, 0x5f, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x13, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x53, 0x68, 0x61, 0x70, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x3c, 0x0a,
	0x12, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x36,
	0x0a, 0x0f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f,
	0x72, 0x6f, 0x77, 0x73, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x4f, 0x66, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x07, 0x20,
	0x02, 0x28, 0x0d, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x39, 0x0a,
	0x19, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x62, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x16, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x77,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f,
	0x66, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f,
	0x66, 0x5f, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x46, 0x6f, 0x6f,
	0x74, 0x65, 0x72, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x6f, 0x77, 0x73, 0x46,
	0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x12, 0x31, 0x0a, 0x15, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x5f, 0x72, 0x6f,
	0x77, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x4f, 0x66, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x37, 0x0a, 0x18,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x1a, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x6f, 0x66, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x5f, 0x72,
	0x6f, 0x77, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x72, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x52, 0x6f, 0x77,
	0x73, 0x12, 0x40, 0x0a, 0x1d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x73, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x4f, 0x66, 0x55, 0x73, 0x65, 0x72, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x10, 0x20, 0x02, 0x28, 0x01, 0x52, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52,
	0x6f, 0x77, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x18, 0x11, 0x20, 0x02, 0x28, 0x01, 0x52, 0x12, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x34, 0x0a, 0x0d, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x44, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x41, 0x0a, 0x1d, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x6f, 0x77, 0x73, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x61, 0x70, 0x70,
	0x6c, 0x79, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43,
	0x6c, 0x65, 0x61, 0x72, 0x73, 0x41, 0x6c, 0x6c, 0x12, 0x47, 0x0a, 0x20, 0x72, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1d, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x61, 0x0a, 0x26, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f,
	0x66, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x21, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x6f,
	0x72, 0x6d, 0x75, 0x6c, 0x61, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x12, 0x5b, 0x0a, 0x23, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x5f, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x1e, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x6f,
	0x72, 0x6d, 0x75, 0x6c, 0x61, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x52, 0x6f, 0x77,
	0x73, 0x12, 0x46, 0x0a, 0x18, 0x72, 0x6f, 0x77, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x5f, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x18, 0x26, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x14, 0x72, 0x6f, 0x77, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x50, 0x72, 0x65, 0x50, 0x69, 0x76, 0x6f, 0x74, 0x12, 0x5e, 0x0a, 0x22, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x66,
	0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x43, 0x46, 0x55, 0x55,
	0x49, 0x44, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1e, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x75,
	0x6c, 0x61, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x6f, 0x72,
	0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x63, 0x0a, 0x1b, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x65, 0x72, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x54, 0x53, 0x54, 0x2e,
	0x53, 0x6f, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x18, 0x73, 0x6f, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x14, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x75, 0x69, 0x64,
	0x73, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x11, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x52, 0x6f, 0x77, 0x55, 0x69, 0x64, 0x73, 0x12, 0x37, 0x0a, 0x0b, 0x6d, 0x65,
	0x72, 0x67, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x5f, 0x73, 0x69,
	0x64, 0x65, 0x63, 0x61, 0x72, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x73, 0x74, 0x72,
	0x6f, 0x6b, 0x65, 0x53, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x12, 0x41, 0x0a, 0x1d, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6e,
	0x67, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x33, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1a, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x65, 0x64, 0x73, 0x53, 0x74,
	0x72, 0x6f, 0x6e, 0x67, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x4d, 0x0a,
	0x12, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x54, 0x53, 0x54, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x10, 0x74, 0x65, 0x78, 0x74,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x43, 0x0a, 0x16,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x31,
	0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x13, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x12, 0x43, 0x0a, 0x16, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x32, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x3d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x13, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x32, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x43, 0x0a, 0x16, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x33, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x13, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x33, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x43, 0x0a, 0x16, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x34, 0x5f,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x13, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x34, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x12, 0x43, 0x0a, 0x16, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x5f, 0x35, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x13, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x35,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x4c, 0x0a, 0x1b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x31, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x73,
	0x74, 0x79, 0x6c, 0x65, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x17, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x54, 0x65, 0x78, 0x74, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x12, 0x4c, 0x0a, 0x1b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x32, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x18, 0x42, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x17, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x54, 0x65, 0x78, 0x74, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x12, 0x4c, 0x0a, 0x1b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x33, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x18, 0x43, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x17, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x33, 0x54, 0x65, 0x78, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12,
	0x4c, 0x0a, 0x1b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x34, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x44,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x17, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x34, 0x54, 0x65, 0x78, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x4c, 0x0a,
	0x1b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f,
	0x35, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x45, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x17, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x35, 0x54, 0x65, 0x78, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x4d, 0x0a, 0x13, 0x68,
	0x69, 0x64, 0x64, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x48,
	0x69, 0x64, 0x64, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x11, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x13, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x31, 0x5f, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x18, 0x47, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x31, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x13, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x32, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x18, 0x48, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x32, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x13, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x33, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18,
	0x49, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x33, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x13, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x34, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x4a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x34, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x13, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x35, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x4b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x10, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x35,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x46, 0x0a, 0x18, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x31, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x14, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x31, 0x54, 0x65, 0x78, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x46, 0x0a,
	0x18, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x32, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x14, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x54, 0x65, 0x78, 0x74,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x46, 0x0a, 0x18, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x33, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x14, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x33, 0x54, 0x65, 0x78, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x46, 0x0a,
	0x18, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x34, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x14, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x34, 0x54, 0x65, 0x78, 0x74,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x46, 0x0a, 0x18, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x35, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x14, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x35, 0x54, 0x65, 0x78, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x55, 0x0a,
	0x19, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f,
	0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x51, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x17, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x59, 0x0a, 0x17, 0x70, 0x65, 0x6e, 0x63, 0x69, 0x6c, 0x5f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18,
	0x52, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x50, 0x65, 0x6e, 0x63,
	0x69, 0x6c, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x15, 0x70, 0x65, 0x6e, 0x63, 0x69, 0x6c,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12,
	0x29, 0x0a, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x53, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x72, 0x6f, 0x6d,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x55, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x0d, 0x68, 0x61,
	0x75, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x54, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x48, 0x61, 0x75, 0x6e, 0x74, 0x65, 0x64,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0c, 0x68, 0x61,
	0x75, 0x6e, 0x74, 0x65, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x0b, 0x70, 0x69,
	0x76, 0x6f, 0x74, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x55, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x0a, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x0e, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x56, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x12, 0x4e, 0x0a, 0x1c, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x5f, 0x62, 0x6f, 0x64, 0x79,
	0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x18, 0x57, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x18, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x42,
	0x6f, 0x64, 0x79, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x6f, 0x77, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x12, 0x54, 0x0a, 0x1f, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x5f, 0x62, 0x6f, 0x64, 0x79,
	0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x58, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x1b, 0x70, 0x69, 0x76,
	0x6f, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x58, 0x0a, 0x21, 0x70, 0x69, 0x76, 0x6f,
	0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x59, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x1d, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x12, 0x36, 0x0a, 0x18, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x18, 0x5a,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x14, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x42, 0x79, 0x43, 0x6f, 0x6c, 0x12, 0x3d, 0x0a, 0x1b, 0x70, 0x69,
	0x76, 0x6f, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x5b, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x18, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x44, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x70, 0x69, 0x76,
	0x6f, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x5c, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x16, 0x70, 0x69,
	0x76, 0x6f, 0x74, 0x44, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x22, 0xb2, 0x0c, 0x0a, 0x13, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2d, 0x0a, 0x0a,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x0a, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52,
	0x09, 0x64, 0x61, 0x74, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x36, 0x0a, 0x0f, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x75, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x6f, 0x77, 0x55, 0x69,
	0x64, 0x73, 0x12, 0x4a, 0x0a, 0x1c, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f,
	0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55,
	0x55, 0x49, 0x44, 0x52, 0x19, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x46, 0x6f,
	0x72, 0x6d, 0x75, 0x6c, 0x61, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x3e,
	0x0a, 0x13, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x11, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x43, 0x65, 0x6c, 0x6c, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x32,
	0x0a, 0x15, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x57, 0x69, 0x64,
	0x74, 0x68, 0x12, 0x3e, 0x0a, 0x1a, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x72, 0x6f,
	0x77, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x31, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x42, 0x02, 0x18, 0x01, 0x52, 0x16, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x52, 0x6f, 0x77, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x3e, 0x0a, 0x1a, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x72, 0x6f,
	0x77, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x32, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x42, 0x02, 0x18, 0x01, 0x52, 0x16, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x52, 0x6f, 0x77, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x3e, 0x0a, 0x1a, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x72, 0x6f,
	0x77, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x33, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x42, 0x02, 0x18, 0x01, 0x52, 0x16, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x52, 0x6f, 0x77, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x33, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x3e, 0x0a, 0x1a, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x72, 0x6f,
	0x77, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x34, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x42, 0x02, 0x18, 0x01, 0x52, 0x16, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x52, 0x6f, 0x77, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x34, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x3e, 0x0a, 0x1a, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x72, 0x6f,
	0x77, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x35, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x42, 0x02, 0x18, 0x01, 0x52, 0x16, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x52, 0x6f, 0x77, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x35, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x49, 0x0a, 0x20, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x31, 0x5f,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x1b, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x6f,
	0x77, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x49, 0x0a,
	0x20, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x72,
	0x6f, 0x77, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x32, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x42, 0x02, 0x18, 0x01, 0x52, 0x1b, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x6f, 0x77, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x32, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x49, 0x0a, 0x20, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x33, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x01, 0x42, 0x02, 0x18, 0x01, 0x52, 0x1b, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x52, 0x6f, 0x77, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x33, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x49, 0x0a, 0x20, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x34,
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x1b, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52,
	0x6f, 0x77, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x34, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x49,
	0x0a, 0x20, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f,
	0x72, 0x6f, 0x77, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x35, 0x5f, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x42, 0x02, 0x18, 0x01, 0x52, 0x1b, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x6f, 0x77, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x35, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x37, 0x0a, 0x16, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x31, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01, 0x52, 0x13, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x52, 0x6f, 0x77, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x31, 0x12, 0x37, 0x0a, 0x16, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x72, 0x6f, 0x77, 0x5f,
	0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x32, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x02, 0x18, 0x01, 0x52, 0x13, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x6f, 0x77,
	0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x32, 0x12, 0x37, 0x0a, 0x16, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x33, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x13, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x6f, 0x77, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x33, 0x12, 0x37, 0x0a, 0x16, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x72, 0x6f,
	0x77, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x34, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01, 0x52, 0x13, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x52,
	0x6f, 0x77, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x34, 0x12, 0x37, 0x0a,
	0x16, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x35, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x13, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x6f, 0x77, 0x56, 0x69, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x35, 0x12, 0x35, 0x0a, 0x17, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x01, 0x52, 0x14, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x52, 0x6f, 0x77, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x31, 0x0a,
	0x15, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x01, 0x52, 0x12, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x52, 0x6f, 0x77, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x39, 0x0a, 0x19, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x76, 0x69,
	0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x1c, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x16, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x6f, 0x77, 0x56, 0x69, 0x73,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x10, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x55,
	0x49, 0x44, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0xf7, 0x01, 0x0a, 0x25, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42,
	0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x63, 0x65, 0x6c, 0x6c, 0x4d, 0x61, 0x70, 0x12, 0x35,
	0x0a, 0x17, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x01, 0x52,
	0x14, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x6f, 0x77, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x72,
	0x6f, 0x77, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x01, 0x52, 0x12, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x6f, 0x77, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x16, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x52, 0x6f, 0x77, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0xbc, 0x02, 0x0a, 0x16, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x6f,
	0x77, 0x55, 0x49, 0x44, 0x4d, 0x61, 0x70, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x37,
	0x0a, 0x12, 0x73, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f,
	0x75, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x10, 0x73, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x55, 0x69, 0x64, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x46, 0x6f, 0x72, 0x55, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x5f, 0x75, 0x69, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x55, 0x69,
	0x64, 0x46, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x31, 0x0a, 0x0f, 0x73, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x75, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0d, 0x73,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x77, 0x55, 0x69, 0x64, 0x73, 0x12, 0x29, 0x0a, 0x11,
	0x72, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x75, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x6f, 0x77, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x46, 0x6f, 0x72, 0x55, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x11, 0x72, 0x6f, 0x77, 0x5f, 0x75,
	0x69, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x0e, 0x72, 0x6f, 0x77, 0x55, 0x69, 0x64, 0x46, 0x6f, 0x72, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x22, 0x90, 0x02, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x4c, 0x61, 0x79,
	0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x6f, 0x77,
	0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x6f, 0x77, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x49, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x5f, 0x72, 0x75,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x53,
	0x74, 0x72, 0x6f, 0x6b, 0x65, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x52, 0x75, 0x6e, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x52, 0x75, 0x6e, 0x73, 0x1a, 0x84,
	0x01, 0x0a, 0x10, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x52, 0x75, 0x6e, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x06, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x97, 0x03, 0x0a, 0x14, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65,
	0x53, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x72, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x49, 0x0a, 0x19, 0x6c,
	0x65, 0x66, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b,
	0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x16,
	0x6c, 0x65, 0x66, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65,
	0x4c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x4b, 0x0a, 0x1a, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x5f, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x17, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x4c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x12, 0x41, 0x0a, 0x15, 0x74, 0x6f, 0x70, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x73,
	0x74, 0x72, 0x6f, 0x6b, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x12, 0x74, 0x6f, 0x70, 0x52, 0x6f, 0x77, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65,
	0x4c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x47, 0x0a, 0x18, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d,
	0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x15, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d,
	0x52, 0x6f, 0x77, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x22,
	0x18, 0x0a, 0x16, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x22, 0xa1, 0x0c, 0x0a, 0x04, 0x43, 0x65,
	0x6c, 0x6c, 0x12, 0x30, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x43, 0x65, 0x6c, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x0a, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x63, 0x65, 0x6c, 0x6c, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x74, 0x65, 0x78, 0x74, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54,
	0x53, 0x4b, 0x2e, 0x54, 0x53, 0x4b, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x32, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x6d,
	0x75, 0x6c, 0x61, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0c,
	0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x40, 0x0a, 0x0d,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x54, 0x53, 0x4b, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x44,
	0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x54, 0x53,
	0x4b, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x44, 0x0a, 0x0f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x54, 0x53, 0x4b, 0x2e, 0x54, 0x53, 0x4b, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0e, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x54, 0x53, 0x4b, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x64, 0x61,
	0x74, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x54, 0x53, 0x4b, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0c, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x54, 0x53, 0x4b, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x62, 0x61,
	0x73, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x65, 0x78, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x2a, 0x0a, 0x08,
	0x72, 0x69, 0x63, 0x68, 0x54, 0x65, 0x78, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08,
	0x72, 0x69, 0x63, 0x68, 0x54, 0x65, 0x78, 0x74, 0x12, 0x3b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x37, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x43,
	0x0a, 0x1e, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74,
	0x79, 0x6c, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x52,
	0x75, 0x6c, 0x65, 0x12, 0x4a, 0x0a, 0x12, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x77, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x10, 0x69,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x12,
	0x4a, 0x0a, 0x14, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x54, 0x53, 0x4b, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x37, 0x0a, 0x0b, 0x63,
	0x65, 0x6c, 0x6c, 0x5f, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x42, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x63, 0x65, 0x6c, 0x6c, 0x42, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x09, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x43, 0x65,
	0x6c, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x08, 0x63,
	0x65, 0x6c, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x65, 0x6c, 0x6c, 0x5f,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x63, 0x65, 0x6c, 0x6c, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4b, 0x69, 0x6e,
	0x64, 0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x54, 0x53, 0x4b,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12,
	0x42, 0x0a, 0x0e, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x54, 0x53,
	0x4b, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x0d, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6c, 0x6f, 0x77, 0x18, 0x20, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f,
	0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x6f, 0x77, 0x12,
	0x2c, 0x0a, 0x12, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x68, 0x69, 0x67, 0x68, 0x18, 0x21, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x64, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x69, 0x67, 0x68, 0x22, 0x46, 0x0a,
	0x15, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2d, 0x0a, 0x0a, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x54,
	0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x63, 0x65, 0x6c, 0x6c,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xca, 0x04, 0x0a, 0x0e, 0x43, 0x65, 0x6c, 0x6c, 0x4d, 0x61,
	0x70, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2d, 0x0a, 0x0a, 0x63, 0x65, 0x6c, 0x6c,
	0x5f, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x63, 0x65,
	0x6c, 0x6c, 0x54, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x69, 0x64, 0x5f, 0x62,
	0x61, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x08, 0x52, 0x08, 0x75, 0x69, 0x64, 0x42,
	0x61, 0x73, 0x65, 0x64, 0x12, 0x47, 0x0a, 0x11, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64,
	0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0f, 0x65, 0x78,
	0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x73, 0x12, 0x3b, 0x0a,
	0x0d, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x55,
	0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0b, 0x63,
	0x65, 0x6c, 0x6c, 0x55, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x10, 0x6d, 0x65,
	0x72, 0x67, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52,
	0x65, 0x63, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0e, 0x6d, 0x65, 0x72, 0x67,
	0x65, 0x55, 0x69, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x12, 0x75, 0x6e,
	0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49,
	0x44, 0x52, 0x65, 0x63, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x10, 0x75, 0x6e,
	0x6d, 0x65, 0x72, 0x67, 0x65, 0x55, 0x69, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x3f,
	0x0a, 0x0d, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x4d, 0x65, 0x72, 0x67,
	0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x0c, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x44, 0x0a, 0x1c, 0x6d, 0x61, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x18, 0x6d, 0x61, 0x79,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x49, 0x6e,
	0x43, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x5b, 0x0a, 0x28, 0x6d, 0x61, 0x79, 0x5f, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x23, 0x6d,
	0x61, 0x79, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x42, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c,
	0x61, 0x73, 0x22, 0xb4, 0x01, 0x0a, 0x0f, 0x43, 0x65, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x43, 0x65, 0x6c, 0x6c,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x12,
	0x39, 0x0a, 0x19, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x16, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x43, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x2d, 0x0a, 0x0c, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x12, 0x1d, 0x0a, 0x04, 0x63, 0x65,
	0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x43,
	0x65, 0x6c, 0x6c, 0x52, 0x04, 0x63, 0x65, 0x6c, 0x6c, 0x22, 0xca, 0x02, 0x0a, 0x18, 0x43, 0x6f,
	0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x4d, 0x61, 0x70, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2d, 0x0a, 0x0a, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x63, 0x65, 0x6c, 0x6c,
	0x4c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x69, 0x64, 0x5f, 0x62, 0x61, 0x73,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x08, 0x75, 0x69, 0x64, 0x42, 0x61, 0x73,
	0x65, 0x64, 0x12, 0x3f, 0x0a, 0x0d, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x54, 0x2e,
	0x4d, 0x65, 0x72, 0x67, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0c, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x44, 0x0a, 0x1c, 0x6d, 0x61, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x65,
	0x6c, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52,
	0x18, 0x6d, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c,
	0x61, 0x73, 0x49, 0x6e, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x5b, 0x0a, 0x28, 0x6d, 0x61, 0x79,
	0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x5f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x6f, 0x72,
	0x6d, 0x75, 0x6c, 0x61, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75,
	0x65, 0x52, 0x23, 0x6d, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x42, 0x79, 0x46, 0x6f,
	0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x22, 0xf8, 0x01, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x12, 0x41, 0x0a, 0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x65, 0x6c, 0x6c,
	0x52, 0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x3a, 0x0a, 0x0e, 0x63, 0x65, 0x6c, 0x6c, 0x5f,
	0x75, 0x69, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x65, 0x63, 0x74, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0c, 0x63, 0x65, 0x6c, 0x6c, 0x55, 0x69, 0x64, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x0a, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x43, 0x65,
	0x6c, 0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x63, 0x65, 0x6c, 0x6c, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x1a, 0x2d, 0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x65,
	0x6c, 0x6c, 0x12, 0x1d, 0x0a, 0x04, 0x63, 0x65, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x04, 0x63, 0x65, 0x6c,
	0x6c, 0x22, 0xc8, 0x08, 0x0a, 0x19, 0x43, 0x65, 0x6c, 0x6c, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x41, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12,
	0x30, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x38, 0x0a, 0x0f, 0x72, 0x69, 0x63, 0x68, 0x54, 0x65, 0x78, 0x74, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x72, 0x69,
	0x63, 0x68, 0x54, 0x65, 0x78, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a,
	0x15, 0x75, 0x73, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x18, 0x06, 0x20, 0x02, 0x28, 0x08, 0x52, 0x12, 0x75, 0x73,
	0x65, 0x41, 0x6c, 0x6c, 0x53, 0x70, 0x61, 0x72, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x18, 0x07, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x65, 0x6c, 0x6c, 0x5f,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x02, 0x28,
	0x0d, 0x52, 0x0e, 0x63, 0x65, 0x6c, 0x6c, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4b, 0x69, 0x6e,
	0x64, 0x12, 0x40, 0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x54,
	0x53, 0x4b, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x44, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54,
	0x53, 0x4b, 0x2e, 0x54, 0x53, 0x4b, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x54, 0x53, 0x4b, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x64, 0x61, 0x74,
	0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x44, 0x0a, 0x0f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x54, 0x53, 0x4b, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0e, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x3c, 0x0a,
	0x0b, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x54, 0x53, 0x4b, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x0a, 0x74, 0x65, 0x78, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x42, 0x0a, 0x0e, 0x62,
	0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x54, 0x53, 0x4b, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x0d, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12,
	0x27, 0x0a, 0x0f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x49, 0x0a, 0x19, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x69, 0x63, 0x68, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x16, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x52, 0x69, 0x63, 0x68, 0x54, 0x65, 0x78, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x73, 0x70, 0x61,
	0x72, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x12,
	0x20, 0x02, 0x28, 0x08, 0x52, 0x14, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x53, 0x70, 0x61, 0x72, 0x65,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x70,
	0x61, 0x72, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x13, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x70, 0x61, 0x72, 0x65, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x5f, 0x6c, 0x6f, 0x77, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x64, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x4c, 0x6f, 0x77, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x64,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x69, 0x67, 0x68, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x75,
	0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd7, 0x03, 0x0a,
	0x0f, 0x43, 0x65, 0x6c, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x66,
	0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x54,
	0x53, 0x43, 0x45, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x12, 0x2a, 0x0a, 0x11, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x6d, 0x69, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x69, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x4d, 0x61, 0x78, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x69, 0x6e, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x49, 0x6e, 0x63, 0x12,
	0x4d, 0x0a, 0x1b, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x18, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x40,
	0x0a, 0x1d, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x77, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x46, 0x69, 0x72, 0x73, 0x74,
	0x12, 0x54, 0x0a, 0x25, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x21, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x57, 0x0a, 0x1c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x37, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x22,
	0xb3, 0x01, 0x0a, 0x0f, 0x43, 0x65, 0x6c, 0x6c, 0x44, 0x69, 0x66, 0x66, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x12, 0x4d, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f,
	0x6d, 0x61, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x54, 0x53, 0x53, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x10, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x54, 0x6f, 0x53,
	0x65, 0x74, 0x12, 0x51, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x6d,
	0x61, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x54, 0x53, 0x53, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x54, 0x6f,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x22, 0x41, 0x0a, 0x0d, 0x43, 0x65, 0x6c, 0x6c, 0x44, 0x69, 0x66,
	0x66, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x30, 0x0a, 0x0b, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x5f,
	0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x0a, 0x6c, 0x61,
	0x72, 0x67, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x22, 0x90, 0x01, 0x0a, 0x14, 0x43, 0x65, 0x6c,
	0x6c, 0x44, 0x69, 0x66, 0x66, 0x41, 0x72, 0x72, 0x61, 0x79, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x46, 0x0a, 0x13, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79,
	0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x08, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x54, 0x53,
	0x54, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x44, 0x69, 0x66, 0x66, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xe8, 0x01, 0x0a, 0x12,
	0x43, 0x65, 0x6c, 0x6c, 0x44, 0x69, 0x66, 0x66, 0x4d, 0x61, 0x70, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x69, 0x64, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x08, 0x75, 0x69, 0x64, 0x42, 0x61, 0x73, 0x65, 0x64, 0x12,
	0x47, 0x0a, 0x11, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x63, 0x65, 0x6c, 0x6c,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x43,
	0x45, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65,
	0x64, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x09, 0x63, 0x65, 0x6c, 0x6c,
	0x5f, 0x75, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x54, 0x53,
	0x54, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x55, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x08, 0x63, 0x65, 0x6c, 0x6c, 0x55, 0x69, 0x64, 0x73, 0x12, 0x36,
	0x0a, 0x0f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x61, 0x72, 0x72, 0x61,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x63, 0x65, 0x6c, 0x6c, 0x44, 0x69, 0x66,
	0x66, 0x41, 0x72, 0x72, 0x61, 0x79, 0x22, 0xd6, 0x06, 0x0a, 0x1e, 0x48, 0x69, 0x65, 0x72, 0x61,
	0x72, 0x63, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x44, 0x69, 0x66, 0x66, 0x4d,
	0x61, 0x70, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x75, 0x6d,
	0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x52, 0x6f, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x28, 0x0a,
	0x10, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x0f, 0x72, 0x6f, 0x77, 0x5f, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0d, 0x72, 0x6f, 0x77,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x55, 0x69, 0x64, 0x73, 0x12, 0x37, 0x0a, 0x12, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49,
	0x44, 0x52, 0x10, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x55,
	0x69, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x13, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x11, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x55, 0x69, 0x64, 0x73, 0x12, 0x5a,
	0x0a, 0x1b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x74, 0x74, 0x65, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x02, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x19, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x46, 0x6c, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x69, 0x6e,
	0x67, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x0e, 0x72, 0x6f,
	0x77, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0c, 0x72,
	0x6f, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x69, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x72,
	0x6f, 0x77, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x10, 0x72, 0x6f, 0x77, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x50, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x11, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52,
	0x0f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x69, 0x64, 0x73,
	0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x5f, 0x70, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x13, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x50, 0x72, 0x65, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x58, 0x0a, 0x11, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x64, 0x69, 0x66,
	0x66, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x69, 0x63,
	0x61, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x44, 0x69, 0x66, 0x66, 0x4d, 0x61, 0x70, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x2e, 0x42, 0x6f, 0x78, 0x65, 0x64, 0x52, 0x6f, 0x77, 0x52, 0x0f, 0x63,
	0x65, 0x6c, 0x6c, 0x44, 0x69, 0x66, 0x66, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x6f, 0x77, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x01, 0x52, 0x08, 0x72, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x01, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x73, 0x1a, 0x7f,
	0x0a, 0x08, 0x42, 0x6f, 0x78, 0x65, 0x64, 0x52, 0x6f, 0x77, 0x12, 0x37, 0x0a, 0x10, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x53, 0x65, 0x74, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x53, 0x65, 0x74, 0x12, 0x3a, 0x0a, 0x0e, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x64, 0x69, 0x66, 0x66,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x54, 0x53,
	0x54, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x44, 0x69, 0x66, 0x66, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x0c, 0x63, 0x65, 0x6c, 0x6c, 0x44, 0x69, 0x66, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0xc5, 0x02, 0x0a, 0x15, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x4d,
	0x61, 0x70, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5b, 0x0a, 0x0e, 0x63,
	0x65, 0x6c, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0c, 0x63, 0x65, 0x6c, 0x6c,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x1a, 0x9c, 0x01, 0x0a, 0x1a, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x63, 0x65, 0x6c, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x43,
	0x65, 0x6c, 0x6c, 0x49, 0x44, 0x52, 0x06, 0x63, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x2b, 0x0a,
	0x09, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x08, 0x6f, 0x6c, 0x64, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x6e, 0x65,
	0x77, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x6e,
	0x65, 0x77, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x22, 0xa4, 0x02, 0x0a, 0x14, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0d, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x50, 0x0a, 0x09, 0x6d, 0x61, 0x70, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x08, 0x6d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x1a, 0x87, 0x01, 0x0a, 0x19, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x09, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x6f, 0x6c, 0x64, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x12, 0x2b, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x22, 0xf9,
	0x04, 0x0a, 0x10, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x40, 0x0a, 0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0d, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x0b, 0x61, 0x6e, 0x63,
	0x68, 0x6f, 0x72, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x54, 0x53, 0x54, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x44, 0x52, 0x0a, 0x61, 0x6e, 0x63,
	0x68, 0x6f, 0x72, 0x43, 0x65, 0x6c, 0x6c, 0x12, 0x2f, 0x0a, 0x0b, 0x63, 0x65, 0x6c, 0x6c, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54,
	0x53, 0x54, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0a, 0x63, 0x65,
	0x6c, 0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x54, 0x53, 0x54, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0a, 0x62,
	0x61, 0x73, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x0b, 0x63, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x54, 0x53, 0x54, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x44, 0x52, 0x0a, 0x63, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x43, 0x65, 0x6c, 0x6c, 0x12, 0x2d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x41, 0x0a, 0x0f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x75,
	0x69, 0x64, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x55, 0x49, 0x44, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0d, 0x63, 0x65, 0x6c, 0x6c,
	0x55, 0x69, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0f, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x75, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x55, 0x49, 0x44,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0d, 0x62,
	0x61, 0x73, 0x65, 0x55, 0x69, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0f,
	0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44,
	0x43, 0x6f, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0d, 0x61, 0x6e,
	0x63, 0x68, 0x6f, 0x72, 0x43, 0x65, 0x6c, 0x6c, 0x55, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x0f, 0x63,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x43,
	0x6f, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0d, 0x63, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x43, 0x65, 0x6c, 0x6c, 0x55, 0x69, 0x64, 0x22, 0xa0, 0x03, 0x0a, 0x29, 0x44,
	0x65, 0x61, 0x74, 0x68, 0x68, 0x61, 0x77, 0x6b, 0x52, 0x64, 0x61, 0x72, 0x33, 0x39, 0x39, 0x38,
	0x39, 0x31, 0x36, 0x37, 0x43, 0x65, 0x6c, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a, 0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0d, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x0f, 0x63, 0x65, 0x6c,
	0x6c, 0x5f, 0x75, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x55, 0x49, 0x44,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0d, 0x63,
	0x65, 0x6c, 0x6c, 0x55, 0x69, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0f,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x43, 0x65, 0x6c, 0x6c,
	0x55, 0x49, 0x44, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x55, 0x69, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12,
	0x3d, 0x0a, 0x0f, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x75,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55,
	0x55, 0x49, 0x44, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x0d, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x43, 0x65, 0x6c, 0x6c, 0x55, 0x69, 0x64, 0x12, 0x3d,
	0x0a, 0x0f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x75, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55,
	0x49, 0x44, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0d,
	0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x43, 0x65, 0x6c, 0x6c, 0x55, 0x69, 0x64, 0x22, 0x2c, 0x0a,
	0x16, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x22, 0x1d, 0x0a, 0x1b, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x22, 0x1b, 0x0a, 0x19, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x43, 0x65, 0x6c, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x22, 0x1b, 0x0a, 0x19, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x18, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x6c,
	0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x12, 0x3a, 0x0a, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x65, 0x6c, 0x6c,
	0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54,
	0x53, 0x54, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3a, 0x0a,
	0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x43,
	0x65, 0x6c, 0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x43, 0x65, 0x6c, 0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x7b, 0x0a, 0x19, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x50, 0x69, 0x76, 0x6f, 0x74, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x54, 0x53, 0x54, 0x2e,
	0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x65, 0x50, 0x69, 0x76, 0x6f, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x09, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x4f, 0x0a, 0x11, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x75, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x70,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x54, 0x53, 0x54, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x50, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x09, 0x70, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x22, 0xb3, 0x01, 0x0a, 0x11, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x27, 0x0a,
	0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x54,
	0x53, 0x53, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01,
	0x30, 0x52, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x4b, 0x0a, 0x10, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x54, 0x53, 0x54,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0xaf, 0x01,
	0x0a, 0x10, 0x43, 0x65, 0x6c, 0x6c, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x54, 0x53, 0x53, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0e, 0x6f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x0f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x54, 0x53, 0x54, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x0e, 0x63, 0x65, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22,
	0xc5, 0x02, 0x0a, 0x19, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x50, 0x72, 0x65, 0x64, 0x41,
	0x72, 0x67, 0x44, 0x61, 0x74, 0x61, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x6c, 0x6f, 0x77, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x4c, 0x6f,
	0x77, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x68, 0x69, 0x67,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x48, 0x69, 0x67, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x64, 0x61, 0x74,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x33, 0x0a, 0x15, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69,
	0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x6c, 0x65,
	0x61, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa2, 0x05, 0x0a, 0x15, 0x46, 0x6f, 0x72, 0x6d,
	0x75, 0x6c, 0x61, 0x50, 0x72, 0x65, 0x64, 0x41, 0x72, 0x67, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x72, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x07, 0x61, 0x72, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x09,
	0x61, 0x72, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x50, 0x72, 0x65,
	0x64, 0x41, 0x72, 0x67, 0x44, 0x61, 0x74, 0x61, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x08, 0x61, 0x72, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0b, 0x62, 0x61,
	0x73, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x66, 0x12, 0x48, 0x0a, 0x11, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x66, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x65, 0x6c, 0x6c,
	0x52, 0x65, 0x66, 0x12, 0x41, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f,
	0x72, 0x65, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x54, 0x53, 0x43, 0x45,
	0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x66, 0x12, 0x4f, 0x0a, 0x0e, 0x75, 0x69, 0x64, 0x5f, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x41, 0x53, 0x54, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x41, 0x53, 0x54, 0x55, 0x69, 0x64,
	0x54, 0x72, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0c, 0x75, 0x69, 0x64, 0x54, 0x72,
	0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0f, 0x68, 0x6f, 0x73, 0x74, 0x5f,
	0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0d, 0x68,
	0x6f, 0x73, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x72, 0x6f, 0x77, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x52, 0x6f, 0x77, 0x12,
	0x27, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x41, 0x0a, 0x0c, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x54, 0x53, 0x54, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x50, 0x72, 0x65, 0x64,
	0x41, 0x72, 0x67, 0x44, 0x61, 0x74, 0x61, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0b,
	0x6c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0e, 0x76,
	0x69, 0x65, 0x77, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x54,
	0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x66, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0c,
	0x76, 0x69, 0x65, 0x77, 0x54, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x66, 0x22, 0xa1, 0x02, 0x0a,
	0x1f, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x65, 0x50, 0x69, 0x76, 0x6f, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x12, 0x2e, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61,
	0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x31, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x31, 0x12, 0x1e, 0x0a, 0x0a, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x32, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x32, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x31, 0x18, 0x05, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0b, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x31, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x32, 0x18, 0x06, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x0b, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x32, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x30, 0x18, 0x07, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x30,
	0x22, 0xb2, 0x04, 0x0a, 0x17, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x50, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x31, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x31, 0x12, 0x1e, 0x0a, 0x0a, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x32, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x32, 0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x30, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x54, 0x2e,
	0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x50, 0x72, 0x65, 0x64, 0x41, 0x72, 0x67, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x30, 0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x46,
	0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x50, 0x72, 0x65, 0x64, 0x41, 0x72, 0x67, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x31, 0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x46, 0x6f,
	0x72, 0x6d, 0x75, 0x6c, 0x61, 0x50, 0x72, 0x65, 0x64, 0x41, 0x72, 0x67, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x32,
	0x12, 0x2e, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61,
	0x12, 0x32, 0x0a, 0x15, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x13, 0x66, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x0e, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0c, 0x68, 0x6f, 0x73, 0x74, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x55, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x0f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0d, 0x68, 0x6f, 0x73, 0x74, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x55, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x0c, 0x68, 0x6f, 0x73, 0x74,
	0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0a, 0x68, 0x6f, 0x73, 0x74, 0x52,
	0x6f, 0x77, 0x55, 0x69, 0x64, 0x22, 0xc5, 0x05, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x63, 0x0a, 0x0e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x70,
	0x69, 0x76, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x54, 0x53, 0x54,
	0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x53, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65,
	0x50, 0x72, 0x65, 0x50, 0x69, 0x76, 0x6f, 0x74, 0x52, 0x0d, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x50,
	0x72, 0x65, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x12, 0x4b, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x53, 0x65, 0x74,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x05, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x1a, 0xc0, 0x01, 0x0a, 0x1c, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x65,
	0x50, 0x69, 0x76, 0x6f, 0x74, 0x12, 0x42, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x46,
	0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x65, 0x50, 0x69, 0x76, 0x6f, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x09,
	0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x0a, 0x63, 0x65, 0x6c,
	0x6c, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x63,
	0x65, 0x6c, 0x6c, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x0a, 0x74, 0x65, 0x78, 0x74,
	0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x74, 0x65,
	0x78, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x1a, 0xb0, 0x01, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65,
	0x12, 0x3a, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c,
	0x61, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x09, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x0a,
	0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x09, 0x63, 0x65, 0x6c, 0x6c, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x0a, 0x74,
	0x65, 0x78, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x09, 0x74, 0x65, 0x78, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x1a, 0x61, 0x0a, 0x15, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x22, 0x80, 0x04,
	0x0a, 0x10, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x12, 0x50, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x23, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x17, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x09,
	0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x52, 0x0a, 0x15, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x69, 0x76,
	0x6f, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x50, 0x69, 0x76, 0x6f,
	0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x13, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x50, 0x72, 0x65, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x12, 0x4d, 0x0a,
	0x20, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x5f, 0x72,
	0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x1c,
	0x6e, 0x65, 0x65, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x52, 0x65, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x08, 0x52, 0x0d, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0c, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x75, 0x6c,
	0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x49, 0x0a, 0x0d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x41, 0x6c,
	0x6c, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x41, 0x6e, 0x79, 0x10, 0x01,
	0x22, 0xfa, 0x01, 0x0a, 0x12, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x28, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x55, 0x69,
	0x64, 0x12, 0x56, 0x0a, 0x0e, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x54, 0x53, 0x54, 0x2e,
	0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x2e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0d, 0x75, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x62, 0x0a, 0x17, 0x55, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x08, 0x72, 0x6f, 0x77, 0x5f, 0x75,
	0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x55, 0x55, 0x49, 0x44, 0x52, 0x07, 0x72, 0x6f, 0x77, 0x55, 0x69, 0x64, 0x73, 0x22, 0xcd, 0x07,
	0x0a, 0x18, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x40, 0x0a, 0x17, 0x68, 0x69,
	0x64, 0x64, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x14, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x12, 0x53, 0x0a, 0x0d,
	0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x2e, 0x52, 0x6f, 0x77, 0x4f, 0x72, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x0c, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x12, 0x69, 0x0a, 0x17, 0x72, 0x6f, 0x77, 0x5f, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x0e, 0x32, 0x32, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x2e, 0x52, 0x6f, 0x77, 0x4f, 0x72, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x72, 0x6f, 0x77, 0x4f, 0x72, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0f,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x43, 0x65, 0x6c,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0e, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x55, 0x0a,
	0x25, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f,
	0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x52, 0x1f, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x54, 0x6f, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x3b, 0x0a, 0x14, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65,
	0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x75, 0x69, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x12, 0x63,
	0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x69, 0x64,
	0x73, 0x12, 0x2d, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x12, 0x50, 0x0a, 0x19, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x5f, 0x68,
	0x69, 0x64, 0x64, 0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x53, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x16, 0x76, 0x69, 0x65, 0x77,
	0x50, 0x69, 0x76, 0x6f, 0x74, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x65, 0x73, 0x12, 0x52, 0x0a, 0x1a, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x53, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x17, 0x76,
	0x69, 0x65, 0x77, 0x4f, 0x6e, 0x6c, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0e, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x54, 0x53, 0x54, 0x2e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0d, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x1a, 0x85, 0x01, 0x0a, 0x10, 0x52, 0x6f, 0x77, 0x4f, 0x72,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x11, 0x72,
	0x6f, 0x77, 0x5f, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49,
	0x44, 0x52, 0x0e, 0x72, 0x6f, 0x77, 0x4f, 0x72, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x55, 0x69,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x48, 0x69, 0x64, 0x64,
	0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x22, 0x3d,
	0x0a, 0x14, 0x52, 0x6f, 0x77, 0x4f, 0x72, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x52,
	0x6f, 0x77, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x01, 0x22, 0xfe, 0x01,
	0x0a, 0x13, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x35, 0x0a, 0x11, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0f, 0x68, 0x69, 0x64,
	0x64, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x55, 0x69, 0x64, 0x12, 0x5a, 0x0a, 0x1a,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x17, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x54, 0x0a, 0x17, 0x72, 0x6f, 0x77, 0x5f,
	0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x54, 0x53, 0x54, 0x2e,
	0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x14, 0x72, 0x6f, 0x77, 0x48, 0x69, 0x64,
	0x64, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x81,
	0x01, 0x0a, 0x18, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x26, 0x0a, 0x09, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x55, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x0d, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x54,
	0x2e, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x0c, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x73, 0x22, 0xb8, 0x01, 0x0a, 0x1a, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x43, 0x6f, 0x6c,
	0x6c, 0x61, 0x70, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x12, 0x30, 0x0a, 0x0e, 0x75, 0x69, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70,
	0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x55, 0x55, 0x49, 0x44, 0x52, 0x0d, 0x75, 0x69, 0x64, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x70,
	0x73, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x0d, 0x75, 0x69, 0x64, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x61,
	0x6e, 0x64, 0x65, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0c, 0x75, 0x69, 0x64, 0x73, 0x45, 0x78, 0x70, 0x61, 0x6e,
	0x64, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x83, 0x01,
	0x0a, 0x16, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x55,
	0x49, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x0e, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e,
	0x6f, 0x64, 0x65, 0x22, 0x4b, 0x0a, 0x11, 0x54, 0x53, 0x54, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c,
	0x61, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x36, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x0e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x65, 0x65,
	0x22, 0x89, 0x01, 0x0a, 0x15, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e,
	0x6f, 0x64, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x22, 0x0a, 0x0b, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x0a,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x20, 0x0a, 0x0a, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01,
	0x30, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x5c, 0x0a, 0x12,
	0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x11, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x12, 0x30, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x6c, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x4c, 0x6f, 0x77, 0x12, 0x21, 0x0a, 0x0c, 0x64,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x69, 0x67, 0x68, 0x22, 0x5b,
	0x0a, 0x11, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x15,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x22,
	0x72, 0x0a, 0x10, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x72,
	0x6f, 0x77, 0x73, 0x22, 0x43, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x22, 0x6b, 0x0a, 0x13, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12,
	0x30, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x54, 0x53, 0x54, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e,
	0x6f, 0x64, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x68, 0x61,
	0x72, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x43, 0x68, 0x61, 0x72, 0x22, 0x4c, 0x0a, 0x1a, 0x50, 0x6f, 0x73, 0x74, 0x66, 0x69, 0x78,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x22, 0x4b, 0x0a, 0x19, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x12, 0x2e, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f,
	0x64, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x22, 0x9f, 0x01, 0x0a, 0x13, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64,
	0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0d, 0x52, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x30, 0x0a, 0x13, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x4a, 0x0a, 0x16, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e,
	0x64, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x30, 0x0a, 0x05,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53,
	0x54, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x22, 0x71,
	0x0a, 0x0f, 0x44, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x22, 0xbf, 0x04, 0x0a, 0x14, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x54, 0x2e,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x0e,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x0e, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x6f, 0x73, 0x74,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x68,
	0x6f, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x3e, 0x0a, 0x0d, 0x68, 0x6f,
	0x73, 0x74, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0b, 0x68,
	0x6f, 0x73, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x66, 0x12, 0x26, 0x0a, 0x09, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55,
	0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0e, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x70, 0x5f,
	0x6c, 0x65, 0x66, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x55, 0x55, 0x49, 0x44, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x0c, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x6f, 0x70, 0x4c, 0x65, 0x66, 0x74, 0x12,
	0x43, 0x0a, 0x12, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x5f,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x10, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x52,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x41, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x5f, 0x72, 0x65, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x54, 0x53, 0x43,
	0x45, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x66, 0x12, 0x3a, 0x0a, 0x0e, 0x75, 0x69, 0x64, 0x5f, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x65, 0x63, 0x74, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0c, 0x75, 0x69, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x63, 0x74, 0x22, 0xb7, 0x01, 0x0a, 0x13, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x54,
	0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x22, 0x0a,
	0x0c, 0x74, 0x69, 0x6d, 0x65, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x01, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x07,
	0x6c, 0x61, 0x72, 0x67, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x18, 0x05, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x22, 0xb2, 0x01,
	0x0a, 0x1e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x12, 0x30, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x22, 0x4e, 0x0a, 0x1a, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x12, 0x30, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x22, 0xaa, 0x02, 0x0a, 0x0e, 0x4c, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x77, 0x68, 0x69, 0x74, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x77, 0x68, 0x69, 0x74, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x74, 0x12, 0x3e, 0x0a, 0x1b, 0x77, 0x68, 0x69,
	0x74, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19,
	0x77, 0x68, 0x69, 0x74, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x17, 0x77, 0x68, 0x69,
	0x74, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x71,
	0x75, 0x61, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x77, 0x68, 0x69, 0x74,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x45, 0x71, 0x75, 0x61, 0x6c,
	0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x77, 0x68, 0x69, 0x74, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x77, 0x68, 0x69, 0x74, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x22,
	0x41, 0x0a, 0x0d, 0x49, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x12, 0x30, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x22, 0x7f, 0x0a, 0x13, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x22, 0xd8, 0x02, 0x0a, 0x11, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x48, 0x69,
	0x6e, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x09, 0x63, 0x65, 0x6c, 0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x43, 0x65, 0x6c,
	0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x63, 0x65, 0x6c, 0x6c, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x23, 0x0a, 0x06, 0x68, 0x69, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x44, 0x52, 0x06,
	0x68, 0x69, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75,
	0x6d, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x11,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x18,
	0x06, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0a, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61,
	0x6c, 0x12, 0x2f, 0x0a, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x53,
	0x69, 0x7a, 0x65, 0x52, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x50, 0x61, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x73, 0x73, 0x22, 0xc5,
	0x01, 0x0a, 0x20, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x24,
	0x0a, 0x0d, 0x63, 0x61, 0x72, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x61, 0x72, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x53, 0x74, 0x61, 0x72, 0x74, 0x22, 0xe7, 0x01, 0x0a, 0x1e, 0x48, 0x69, 0x64, 0x64, 0x65,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x43, 0x46, 0x55, 0x55, 0x49, 0x44, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0f, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0e, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x55, 0x0a, 0x25, 0x6e, 0x65, 0x65,
	0x64, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x69, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52,
	0x1f, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x54, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x22, 0xf3, 0x01, 0x0a, 0x13, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x10, 0x6e, 0x65, 0x78, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c,
	0x61, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x45, 0x0a, 0x08, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c,
	0x61, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x46,
	0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x50,
	0x61, 0x69, 0x72, 0x52, 0x08, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x1a, 0x67, 0x0a,
	0x10, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x61, 0x69,
	0x72, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c,
	0x61, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2e, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c,
	0x61, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x46,
	0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x07, 0x66,
	0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x22, 0xf9, 0x01, 0x0a, 0x15, 0x4d, 0x65, 0x72, 0x67, 0x65,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x12, 0x36, 0x0a, 0x0a, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x09, 0x6d,
	0x65, 0x72, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x6d, 0x65, 0x72, 0x67,
	0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x65, 0x63, 0x74, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x0b, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x12, 0x3b, 0x0a, 0x0e, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x75,
	0x6c, 0x61, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x54, 0x53, 0x43, 0x45,
	0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x0d, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x12, 0x32,
	0x0a, 0x15, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x13, 0x6d,
	0x65, 0x72, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x65, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x11, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x43, 0x46, 0x55, 0x55, 0x49, 0x44, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x07,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x6d, 0x75,
	0x6c, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x54, 0x53, 0x54, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c,
	0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x1a, 0x54, 0x53, 0x54, 0x50, 0x65,
	0x6e, 0x63, 0x69, 0x6c, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4a, 0x0a, 0x19, 0x70, 0x65, 0x6e, 0x63, 0x69, 0x6c, 0x5f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x17, 0x70, 0x65, 0x6e, 0x63, 0x69, 0x6c, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x22, 0xbe, 0x01, 0x0a, 0x1c, 0x50, 0x65, 0x6e, 0x63, 0x69, 0x6c, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x12, 0x2d, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x43, 0x46, 0x55, 0x55, 0x49, 0x44,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x3d, 0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x46, 0x6f,
	0x72, 0x6d, 0x75, 0x6c, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12,
	0x30, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0xe1, 0x05, 0x0a, 0x12, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x6f,
	0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x6f,
	0x6f, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x06, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x43, 0x65,
	0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x08,
	0x6d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x54, 0x53,
	0x43, 0x45, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x44, 0x0a,
	0x12, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x54, 0x53, 0x43, 0x45,
	0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x10, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x3e, 0x0a, 0x0f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x54,
	0x53, 0x43, 0x45, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x0d, 0x66, 0x69, 0x72, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x65, 0x6e, 0x12, 0x38, 0x0a, 0x19, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63,
	0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x63,
	0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x66, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a,
	0x0b, 0x73, 0x65, 0x63, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x73, 0x65, 0x63, 0x73, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x12, 0x26, 0x0a,
	0x0f, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x74, 0x72, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x62, 0x6f, 0x6f, 0x6c, 0x54, 0x72, 0x75, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x63, 0x69, 0x72,
	0x63, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x69, 0x73, 0x43, 0x69, 0x72, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x52, 0x65, 0x66, 0x12, 0x3b,
	0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x43, 0x65, 0x6c,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0c, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6e,
	0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6e, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xdf, 0x01, 0x0a, 0x12, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x28, 0x0a, 0x0a,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x09, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x55, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0c, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x10, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x6f, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x39, 0x0a, 0x13,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f,
	0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x55, 0x55, 0x49, 0x44, 0x52, 0x11, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x55, 0x69, 0x64, 0x22, 0x54, 0x0a, 0x16, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0xa1, 0x02,
	0x0a, 0x16, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x28, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x55,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x67, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x67, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x61, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x41,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x14, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x12,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x55,
	0x69, 0x64, 0x12, 0x4d, 0x0a, 0x1e, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x1a, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x55, 0x69,
	0x64, 0x22, 0x59, 0x0a, 0x1a, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12,
	0x3b, 0x0a, 0x0a, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x0a, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x73, 0x22, 0x84, 0x13, 0x0a,
	0x0e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12,
	0x2b, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44,
	0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x55, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x0c,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0b, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x4c, 0x0a, 0x0f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x64, 0x65,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x45, 0x0a, 0x0a, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x54, 0x53, 0x54,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x0a, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x43, 0x0a,
	0x0f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x61, 0x67, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x67, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x02, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x63, 0x0a, 0x20, 0x69, 0x6e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x67,
	0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x75, 0x6c, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53,
	0x43, 0x45, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1c, 0x69, 0x6e, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x41, 0x67, 0x67, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x46,
	0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x12, 0x55, 0x0a, 0x18, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x75,
	0x6c, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e,
	0x43, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x16, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x12, 0x57, 0x0a,
	0x1a, 0x61, 0x67, 0x67, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x72,
	0x6f, 0x6f, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x16,
	0x61, 0x67, 0x67, 0x73, 0x49, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x6f, 0x6f, 0x74, 0x46,
	0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x12, 0x62, 0x0a, 0x1f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1c, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x12, 0x5c, 0x0a, 0x1c, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x19, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x64, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x12, 0x56, 0x0a, 0x19, 0x72, 0x6f, 0x77, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x75, 0x6c, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53,
	0x43, 0x45, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x16, 0x72, 0x6f, 0x77, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61,
	0x12, 0x74, 0x0a, 0x29, 0x72, 0x6f, 0x77, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x72,
	0x65, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x43,
	0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x24, 0x72, 0x6f, 0x77, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x64, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x63, 0x46,
	0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x12, 0x22, 0x0a, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x38, 0x52, 0x0a,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x40, 0x0a, 0x0e, 0x72, 0x6f,
	0x77, 0x5f, 0x75, 0x69, 0x64, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x55, 0x69, 0x64, 0x4c, 0x6f, 0x6f,
	0x6b, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0c,
	0x72, 0x6f, 0x77, 0x55, 0x69, 0x64, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x12, 0x5e, 0x0a, 0x1d,
	0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x43,
	0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x1a, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x1a, 0xbb, 0x01, 0x0a,
	0x0e, 0x41, 0x67, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12,
	0x40, 0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x43, 0x65,
	0x6c, 0x6c, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x43, 0x6f, 0x6f, 0x72,
	0x64, 0x12, 0x2d, 0x0a, 0x05, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74,
	0x6f, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x61, 0x63, 0x63, 0x75, 0x6d,
	0x12, 0x38, 0x0a, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x2e, 0x41, 0x67, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x1a, 0xe8, 0x06, 0x0a, 0x10, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12,
	0x26, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x08, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x55, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x42, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x12, 0x22, 0x0a, 0x07, 0x72, 0x6f, 0x77, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52,
	0x06, 0x72, 0x6f, 0x77, 0x55, 0x69, 0x64, 0x12, 0x49, 0x0a, 0x12, 0x61, 0x67, 0x67, 0x5f, 0x66,
	0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x43,
	0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x10, 0x61, 0x67, 0x67, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x43, 0x6f, 0x6f, 0x72,
	0x64, 0x73, 0x12, 0x60, 0x0a, 0x0e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x54, 0x53, 0x54,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0d, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x65,
	0x6c, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x65, 0x6c,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x72, 0x6f, 0x77, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x54, 0x53,
	0x43, 0x45, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x0a, 0x72, 0x6f, 0x77, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x3d,
	0x0a, 0x0f, 0x72, 0x6f, 0x77, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x75, 0x69, 0x64,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x53, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0d,
	0x72, 0x6f, 0x77, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x55, 0x69, 0x64, 0x73, 0x1a, 0xe5, 0x02,
	0x0a, 0x14, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x54, 0x53, 0x43,
	0x45, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x09, 0x63, 0x65, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x35, 0x0a,
	0x07, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x54, 0x53, 0x4b, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x07, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x73, 0x12, 0x62, 0x0a, 0x08, 0x72, 0x6f, 0x77, 0x5f, 0x73, 0x65, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x42, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x2e, 0x52, 0x6f, 0x77, 0x53, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x07, 0x72, 0x6f, 0x77, 0x53, 0x65, 0x74, 0x73, 0x12, 0x44, 0x0a, 0x13, 0x72, 0x6f, 0x77, 0x5f,
	0x75, 0x69, 0x64, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x73, 0x65, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x53, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x10, 0x72, 0x6f,
	0x77, 0x55, 0x69, 0x64, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x53, 0x65, 0x74, 0x73, 0x1a, 0x35,
	0x0a, 0x0d, 0x52, 0x6f, 0x77, 0x53, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12,
	0x24, 0x0a, 0x08, 0x72, 0x6f, 0x77, 0x5f, 0x75, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x07, 0x72, 0x6f,
	0x77, 0x55, 0x69, 0x64, 0x73, 0x1a, 0x7c, 0x0a, 0x11, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x6f, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x28, 0x0a, 0x0a, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x55, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x08, 0x61, 0x67, 0x67, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x42, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x41, 0x67, 0x67, 0x4e,
	0x6f, 0x64, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x07, 0x61, 0x67, 0x67, 0x4e,
	0x6f, 0x64, 0x65, 0x22, 0x6e, 0x0a, 0x14, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x26, 0x0a, 0x09, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x55, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x42, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x42, 0x79, 0x22, 0x44, 0x0a, 0x17, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x66, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29,
	0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x22, 0x96, 0x01, 0x0a, 0x24, 0x50, 0x69,
	0x76, 0x6f, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x61, 0x70, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x12, 0x1d, 0x0a, 0x04, 0x75, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x04, 0x75, 0x69, 0x64,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x39, 0x0a, 0x13, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52,
	0x11, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x55, 0x69,
	0x64, 0x73, 0x22, 0xd6, 0x07, 0x0a, 0x11, 0x50, 0x69, 0x76, 0x6f, 0x74, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x31, 0x0a, 0x0f, 0x70, 0x69, 0x76, 0x6f,
	0x74, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0d, 0x70, 0x69,
	0x76, 0x6f, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x56, 0x0a, 0x19, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x5f,
	0x66, 0x6f, 0x72, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x54, 0x53, 0x54, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x16, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x52,
	0x6f, 0x77, 0x73, 0x12, 0x5c, 0x0a, 0x1c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x5f,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x54, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x19, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x73, 0x12, 0x4c, 0x0a, 0x11, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x54,
	0x53, 0x54, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x10, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12,
	0x31, 0x0a, 0x14, 0x66, 0x6c, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69,
	0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x66,
	0x6c, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x70,
	0x69, 0x76, 0x6f, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x50, 0x69, 0x76, 0x6f, 0x74, 0x12, 0x33, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0e, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x69, 0x64, 0x12, 0x2b, 0x0a,
	0x11, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3f, 0x0a, 0x14, 0x67, 0x72,
	0x70, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6d,
	0x61, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x11, 0x67, 0x72, 0x70, 0x67, 0x43, 0x6f,
	0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x61, 0x70, 0x12, 0x31, 0x0a, 0x15, 0x68,
	0x69, 0x64, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x72, 0x6f, 0x77, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x68, 0x69, 0x64, 0x65,
	0x47, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x2a,
	0x0a, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x68, 0x69,
	0x64, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x68, 0x69,
	0x64, 0x65, 0x47, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x12, 0x3d, 0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x54,
	0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x12, 0x2a, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x75, 0x69,
	0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55,
	0x49, 0x44, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x55, 0x69, 0x64, 0x12, 0x45,
	0x0a, 0x1a, 0x72, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x16, 0x72,
	0x6f, 0x77, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x55, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x19, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x75,
	0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55,
	0x55, 0x49, 0x44, 0x52, 0x16, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x75,
	0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x69, 0x64, 0x22, 0x89, 0x01, 0x0a, 0x16,
	0x52, 0x69, 0x63, 0x68, 0x54, 0x65, 0x78, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x12, 0x20, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x63, 0x65, 0x6c, 0x6c, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x44, 0x52,
	0x06, 0x63, 0x65, 0x6c, 0x6c, 0x69, 0x64, 0x22, 0x58, 0x0a, 0x23, 0x46, 0x6f, 0x72, 0x6d, 0x75,
	0x6c, 0x61, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x31,
	0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x54, 0x53, 0x57, 0x50, 0x2e, 0x55, 0x49, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x61, 0x6c,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x22, 0xbc, 0x08, 0x0a, 0x0f, 0x43, 0x65, 0x6c, 0x6c, 0x46, 0x69, 0x6c, 0x6c, 0x53, 0x74,
	0x61, 0x6e, 0x64, 0x49, 0x6e, 0x12, 0x24, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x69, 0x73, 0x5f, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x49, 0x73, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x12,
	0x35, 0x0a, 0x17, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x62, 0x65, 0x65,
	0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x14, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x48, 0x61, 0x73, 0x42, 0x65, 0x65, 0x6e, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f,
	0x69, 0x73, 0x5f, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x49, 0x73, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x1d,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x68, 0x61, 0x73, 0x5f,
	0x62, 0x65, 0x65, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x19, 0x66, 0x69, 0x72, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x48,
	0x61, 0x73, 0x42, 0x65, 0x65, 0x6e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x2f,
	0x0a, 0x14, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x69, 0x73,
	0x5f, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x49, 0x73, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x12,
	0x3e, 0x0a, 0x1c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x68, 0x61,
	0x73, 0x5f, 0x62, 0x65, 0x65, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x48, 0x61, 0x73, 0x42, 0x65, 0x65, 0x6e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12,
	0x2d, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x69, 0x73,
	0x5f, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x6c, 0x61,
	0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x49, 0x73, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x12, 0x44,
	0x0a, 0x1f, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x68, 0x61, 0x73, 0x5f, 0x62, 0x65, 0x65, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x61, 0x73, 0x42, 0x65, 0x65, 0x6e, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x73, 0x5f, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x73, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x12, 0x46, 0x0a, 0x20, 0x67, 0x72, 0x61,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x5f,
	0x62, 0x65, 0x65, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1c, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x67,
	0x6c, 0x65, 0x48, 0x61, 0x73, 0x42, 0x65, 0x65, 0x6e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x12, 0x35, 0x0a, 0x17, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6e,
	0x67, 0x6c, 0x65, 0x5f, 0x69, 0x73, 0x5f, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x14, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x67, 0x6c,
	0x65, 0x49, 0x73, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x1c, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x62, 0x65, 0x65, 0x6e, 0x5f,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x61, 0x73, 0x42, 0x65, 0x65, 0x6e,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x73, 0x5f, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x49, 0x73, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x1c, 0x74, 0x69, 0x6e, 0x74, 0x5f,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x62, 0x65, 0x65, 0x6e, 0x5f, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x74,
	0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x48, 0x61, 0x73, 0x42, 0x65, 0x65, 0x6e, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x74, 0x69, 0x6e, 0x74, 0x5f,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x69, 0x73, 0x5f, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x74, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x49,
	0x73, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f,
	0x68, 0x61, 0x73, 0x5f, 0x62, 0x65, 0x65, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x48, 0x61,
	0x73, 0x42, 0x65, 0x65, 0x6e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x24, 0x0a,
	0x0e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x69, 0x73, 0x5f, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x49, 0x73, 0x4d, 0x69,
	0x78, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x5f, 0x68, 0x61, 0x73, 0x5f, 0x62, 0x65, 0x65, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x48, 0x61, 0x73, 0x42, 0x65, 0x65, 0x6e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f,
	0x69, 0x73, 0x5f, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x73, 0x4d, 0x69, 0x78, 0x65, 0x64,
	0x22, 0x7f, 0x0a, 0x17, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x57,
	0x50, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x32, 0x0a,
	0x14, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x72,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x22, 0x9f, 0x03, 0x0a, 0x11, 0x43, 0x65, 0x6c, 0x6c, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x31, 0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x5f, 0x73,
	0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53,
	0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x09, 0x74, 0x6f, 0x70, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f,
	0x70, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x6f, 0x70, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x0c, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x73, 0x74,
	0x72, 0x6f, 0x6b, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44,
	0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0b,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x72, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74,
	0x72, 0x6f, 0x6b, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x0d, 0x62, 0x6f, 0x74,
	0x74, 0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x0c, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x53, 0x74, 0x72, 0x6f,
	0x6b, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x72,
	0x6f, 0x6b, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x11, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x33, 0x0a, 0x0b, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74,
	0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x6c, 0x65, 0x66,
	0x74, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x65, 0x66, 0x74, 0x5f,
	0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x6c, 0x65, 0x66, 0x74, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x22, 0x9e, 0x02, 0x0a, 0x21, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43,
	0x65, 0x6c, 0x6c, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x3e, 0x0a, 0x13, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x11, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x24, 0x0a, 0x08, 0x72, 0x6f, 0x77,
	0x5f, 0x75, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x07, 0x72, 0x6f, 0x77, 0x55, 0x69, 0x64, 0x73, 0x12,
	0x2a, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x75, 0x69, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52,
	0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x55, 0x69, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08,
	0x72, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x10, 0x69,
	0x73, 0x5f, 0x61, 0x5f, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x41, 0x50, 0x69, 0x76, 0x6f, 0x74, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x22, 0x9f, 0x04, 0x0a, 0x19, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x12, 0x4f, 0x0a, 0x0f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x75,
	0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x54, 0x53,
	0x54, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x6d, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x50, 0x75, 0x72, 0x70,
	0x6f, 0x73, 0x65, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x75, 0x72, 0x70,
	0x6f, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x73, 0x74,
	0x65, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x08, 0x52, 0x15, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x53, 0x74, 0x65, 0x61,
	0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x63,
	0x61, 0x6e, 0x5f, 0x72, 0x65, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x02, 0x28, 0x08, 0x52, 0x12, 0x63, 0x61, 0x6e, 0x52,
	0x65, 0x75, 0x73, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x45,
	0x0a, 0x10, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x5f, 0x6d, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x49, 0x44, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x69, 0x64, 0x4d,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x19, 0x62, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55,
	0x55, 0x49, 0x44, 0x4d, 0x61, 0x70, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x16, 0x62,
	0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x73, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x02, 0x28, 0x08, 0x52, 0x12, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x61, 0x73, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x18, 0x07,
	0x20, 0x02, 0x28, 0x08, 0x52, 0x11, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x6e, 0x65,
	0x72, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x22, 0x4d, 0x0a, 0x07, 0x50, 0x75, 0x72, 0x70, 0x6f,
	0x73, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x27, 0x0a,
	0x23, 0x50, 0x41, 0x47, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44,
	0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x43, 0x4f,
	0x4c, 0x4c, 0x41, 0x42, 0x10, 0x02, 0x22, 0xac, 0x07, 0x0a, 0x1b, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x50, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x57,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x14, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x13, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x48, 0x0a, 0x18, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x16, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x1a, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x18, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x3e, 0x0a, 0x13, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x11,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x73, 0x12, 0x4a, 0x0a, 0x1a, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x5f, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x16, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x4f, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x4d, 0x61, 0x70, 0x73, 0x12, 0x4a, 0x0a,
	0x1a, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x6e, 0x65,
	0x77, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x16, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4e, 0x65,
	0x77, 0x50, 0x72, 0x6f, 0x70, 0x4d, 0x61, 0x70, 0x73, 0x12, 0x46, 0x0a, 0x17, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x15, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x4a, 0x0a, 0x19, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x17, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x53, 0x0a,
	0x1e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x1b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x57, 0x0a, 0x20, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x1d, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x51, 0x0a, 0x1d, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x1a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x55,
	0x0a, 0x1f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x1c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x9d, 0x02, 0x0a, 0x18, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x43, 0x65, 0x6c, 0x6c, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x12, 0x2d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x48, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x43, 0x65, 0x6c, 0x6c, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x65, 0x6c, 0x6c, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x87, 0x01, 0x0a, 0x10,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x65, 0x6c, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x2b, 0x0a, 0x0b, 0x77, 0x69, 0x6c, 0x64, 0x63, 0x61, 0x72, 0x64, 0x55, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44,
	0x52, 0x0b, 0x77, 0x69, 0x6c, 0x64, 0x63, 0x61, 0x72, 0x64, 0x55, 0x49, 0x44, 0x12, 0x27, 0x0a,
	0x09, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x55, 0x49, 0x44, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x09, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x55, 0x49, 0x44, 0x12, 0x1d, 0x0a, 0x04, 0x63, 0x65, 0x6c, 0x6c, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x52,
	0x04, 0x63, 0x65, 0x6c, 0x6c, 0x22, 0x6e, 0x0a, 0x14, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2d, 0x0a,
	0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x0a, 0x07,
	0x75, 0x69, 0x64, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x75,
	0x69, 0x64, 0x4d, 0x61, 0x70, 0x22, 0x3c, 0x0a, 0x11, 0x50, 0x69, 0x76, 0x6f, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x27, 0x0a, 0x07, 0x75, 0x69,
	0x64, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x75, 0x69, 0x64,
	0x4d, 0x61, 0x70, 0x22, 0x95, 0x03, 0x0a, 0x18, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x4d, 0x67, 0x72, 0x54, 0x69, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x69, 0x72, 0x73, 0x74, 0x46,
	0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0c,
	0x6c, 0x61, 0x73, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x5d, 0x0a, 0x11,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x67, 0x72, 0x54, 0x69, 0x6c, 0x65, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0f, 0x6e, 0x61, 0x6d, 0x65,
	0x46, 0x72, 0x61, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x1a, 0xcd, 0x01, 0x0a, 0x13,
	0x4e, 0x61, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x61, 0x6d, 0x65,
	0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x0e, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0d, 0x6e,
	0x61, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x15,
	0x75, 0x73, 0x65, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x61,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53,
	0x43, 0x45, 0x2e, 0x55, 0x69, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x66, 0x53, 0x65, 0x74,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x12, 0x75, 0x73, 0x65, 0x73, 0x4f, 0x66, 0x4e,
	0x61, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x89, 0x05, 0x0a, 0x14,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x67, 0x72, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x12, 0x26, 0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55,
	0x49, 0x44, 0x52, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x0d,
	0x6e, 0x72, 0x6d, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0b,
	0x6e, 0x72, 0x6d, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x48, 0x0a, 0x0a, 0x70,
	0x65, 0x72, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x4d, 0x67, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x09, 0x70, 0x65, 0x72, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x0f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x66, 0x72,
	0x61, 0x67, 0x5f, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0d,
	0x6e, 0x61, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x67, 0x54, 0x69, 0x6c, 0x65, 0x73, 0x1a, 0x97, 0x03,
	0x0a, 0x0f, 0x50, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x12, 0x26, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52,
	0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x69, 0x64, 0x12, 0x4b, 0x0a, 0x13, 0x70, 0x65, 0x72,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x43, 0x65,
	0x6c, 0x6c, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x11, 0x70, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x65,
	0x63, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x0f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f,
	0x72, 0x6f, 0x77, 0x5f, 0x75, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0d, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x6f, 0x77, 0x55, 0x69, 0x64, 0x73, 0x12, 0x37, 0x0a, 0x12, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x75, 0x69, 0x64, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52,
	0x10, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x55, 0x69, 0x64,
	0x73, 0x12, 0x3e, 0x0a, 0x16, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x75, 0x69, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x13, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x6f, 0x77, 0x55, 0x69, 0x64,
	0x73, 0x12, 0x44, 0x0a, 0x19, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x75, 0x69, 0x64, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52,
	0x16, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x55, 0x69, 0x64, 0x73, 0x22, 0x66, 0x0a, 0x1c, 0x57, 0x69, 0x64, 0x74, 0x68,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x46, 0x69, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x66, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c,
	0x66, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0b, 0x66, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x7a, 0x65, 0x22,
	0x8c, 0x01, 0x0a, 0x10, 0x57, 0x69, 0x64, 0x74, 0x68, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x12, 0x53, 0x0a, 0x14, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x66, 0x69, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x57, 0x69, 0x64, 0x74, 0x68, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x46, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x72, 0x6f, 0x77, 0x73, 0x46, 0x69, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x5a,
	0x0a, 0x13, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x43, 0x0a, 0x12, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x57, 0x69, 0x64, 0x74, 0x68, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x10, 0x77, 0x69, 0x64, 0x74, 0x68, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x2a, 0xd7, 0x01, 0x0a, 0x08, 0x43,
	0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x69, 0x63, 0x43, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c,
	0x73, 0x70, 0x61, 0x6e, 0x43, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x10, 0x01, 0x12, 0x12,
	0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x74, 0x65, 0x78, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x43,
	0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x62,
	0x6f, 0x6f, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x10, 0x06, 0x12, 0x14, 0x0a,
	0x10, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x10, 0x07, 0x12, 0x18, 0x0a, 0x14, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x10, 0x08, 0x12, 0x15, 0x0a,
	0x11, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x43, 0x65, 0x6c, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x10, 0x09, 0x2a, 0x86, 0x02, 0x0a, 0x0d, 0x43, 0x65, 0x6c, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x43,
	0x65, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x17,
	0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x65, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x43, 0x65, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x02,
	0x12, 0x19, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x62, 0x6f, 0x6f, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x65, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x65, 0x6c,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10,
	0x72, 0x69, 0x63, 0x68, 0x54, 0x65, 0x78, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x10, 0x08, 0x12, 0x19, 0x0a, 0x15, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x65,
	0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x09, 0x2a, 0x5d, 0x0a,
	0x15, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x1d, 0x0a, 0x10, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x4e, 0x65, 0x69, 0x74, 0x68, 0x65, 0x72, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x6f, 0x77, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x64, 0x69, 0x6d, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x10, 0x01, 0x2a, 0x84, 0x02, 0x0a,
	0x14, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x72, 0x6f, 0x77, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x45, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x10, 0x03, 0x12, 0x24, 0x0a,
	0x20, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x10, 0x06, 0x12, 0x13,
	0x0a, 0x0f, 0x6e, 0x6f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x10, 0x07, 0x2a, 0x79, 0x0a, 0x14, 0x46, 0x69, 0x6c, 0x6c, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x6b,
	0x54, 0x53, 0x54, 0x46, 0x69, 0x6c, 0x6c, 0x44, 0x6f, 0x77, 0x6e, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x54, 0x53, 0x54, 0x46, 0x69, 0x6c, 0x6c,
	0x55, 0x70, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x6b,
	0x54, 0x53, 0x54, 0x46, 0x69, 0x6c, 0x6c, 0x52, 0x69, 0x67, 0x68, 0x74, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x54, 0x53, 0x54, 0x46, 0x69, 0x6c,
	0x6c, 0x4c, 0x65, 0x66, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x10, 0x04, 0x2a, 0x6e,
	0x0a, 0x12, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x6d,
	0x65, 0x72, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x6d, 0x65, 0x72,
	0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x77, 0x10, 0x04, 0x2a, 0x47,
	0x0a, 0x15, 0x48, 0x69, 0x64, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x68, 0x69, 0x64, 0x65, 0x53,
	0x68, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x64, 0x65, 0x10, 0x00, 0x12,
	0x16, 0x0a, 0x12, 0x68, 0x69, 0x64, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x68, 0x6f, 0x77, 0x10, 0x01, 0x3a, 0x6d, 0x0a, 0x12, 0x69, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x74, 0x12, 0x20, 0x2e,
	0x54, 0x53, 0x53, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x18,
	0xf4, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x10, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x3a, 0x6b, 0x0a, 0x10, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x2e, 0x54, 0x53, 0x53,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x18, 0xf5, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x41, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x0e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x41, 0x6e, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x5a, 0x0a, 0x0b, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x62, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x20, 0x2e, 0x54, 0x53, 0x53, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x18, 0xf7, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x54, 0x53,
	0x54, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x0a, 0x63, 0x65, 0x6c, 0x6c, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3a,
	0x6d, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x12, 0x20, 0x2e, 0x54, 0x53, 0x53, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x18, 0xf8, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x54, 0x53,
	0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0e,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x3a, 0x54,
	0x0a, 0x09, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x12, 0x20, 0x2e, 0x54, 0x53,
	0x53, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x18, 0xf9, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x53,
	0x70, 0x65, 0x63, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x08, 0x63, 0x65, 0x6c, 0x6c,
	0x53, 0x70, 0x65, 0x63, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x2f, 0x6b, 0x70, 0x62,
}

var (
	file_TSTArchives_proto_rawDescOnce sync.Once
	file_TSTArchives_proto_rawDescData = file_TSTArchives_proto_rawDesc
)

func file_TSTArchives_proto_rawDescGZIP() []byte {
	file_TSTArchives_proto_rawDescOnce.Do(func() {
		file_TSTArchives_proto_rawDescData = protoimpl.X.CompressGZIP(file_TSTArchives_proto_rawDescData)
	})
	return file_TSTArchives_proto_rawDescData
}

var file_TSTArchives_proto_enumTypes = make([]protoimpl.EnumInfo, 18)
var file_TSTArchives_proto_msgTypes = make([]protoimpl.MessageInfo, 162)
var file_TSTArchives_proto_goTypes = []interface{}{
	(CellType)(0),                                   // 0: TST.CellType
	(CellValueType)(0),                              // 1: TST.CellValueType
	(TableDimensionArchive)(0),                      // 2: TST.TableDimensionArchive
	(SelectionTypeArchive)(0),                       // 3: TST.SelectionTypeArchive
	(FillDirectionArchive)(0),                       // 4: TST.FillDirectionArchive
	(MergeActionArchive)(0),                         // 5: TST.MergeActionArchive
	(HideShowActionArchive)(0),                      // 6: TST.HideShowActionArchive
	(PopUpMenuModel_CellValueType)(0),               // 7: TST.PopUpMenuModel.CellValueType
	(ImportWarningSetArchive_FormulaWarningType)(0), // 8: TST.ImportWarningSetArchive.FormulaWarningType
	(TableDataList_ListType)(0),                     // 9: TST.TableDataList.ListType
	(TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive_Direction)(0),       // 10: TST.TableGroupSortOrderUIDArchive.GroupSortRuleUIDArchive.Direction
	(TableSortOrderArchive_SortType)(0),                                        // 11: TST.TableSortOrderArchive.SortType
	(TableSortOrderArchive_SortRuleArchive_Direction)(0),                       // 12: TST.TableSortOrderArchive.SortRuleArchive.Direction
	(TableSortOrderUIDArchive_SortType)(0),                                     // 13: TST.TableSortOrderUIDArchive.SortType
	(TableSortOrderUIDArchive_SortRuleArchive_Direction)(0),                    // 14: TST.TableSortOrderUIDArchive.SortRuleArchive.Direction
	(FilterSetArchive_FilterSetType)(0),                                        // 15: TST.FilterSetArchive.FilterSetType
	(HiddenStateExtentArchive_RowOrColumnDirection)(0),                         // 16: TST.HiddenStateExtentArchive.RowOrColumnDirection
	(MultiTableRemapperArchive_Purpose)(0),                                     // 17: TST.MultiTableRemapperArchive.Purpose
	(*CellID)(nil),                                                             // 18: TST.CellID
	(*CellUIDLookupListArchive)(nil),                                           // 19: TST.CellUIDLookupListArchive
	(*CellUIDListArchive)(nil),                                                 // 20: TST.CellUIDListArchive
	(*TableSize)(nil),                                                          // 21: TST.TableSize
	(*ExpandedTableSize)(nil),                                                  // 22: TST.ExpandedTableSize
	(*CellRange)(nil),                                                          // 23: TST.CellRange
	(*ExpandedCellRange)(nil),                                                  // 24: TST.ExpandedCellRange
	(*TableSelection)(nil),                                                     // 25: TST.TableSelection
	(*TileRowInfo)(nil),                                                        // 26: TST.TileRowInfo
	(*Tile)(nil),                                                               // 27: TST.Tile
	(*TileStorage)(nil),                                                        // 28: TST.TileStorage
	(*PopUpMenuModel)(nil),                                                     // 29: TST.PopUpMenuModel
	(*ImportWarningSetArchive)(nil),                                            // 30: TST.ImportWarningSetArchive
	(*CellRefImportWarningSetPairArchive)(nil),                                 // 31: TST.CellRefImportWarningSetPairArchive
	(*ImportWarningSetByCellRefArchive)(nil),                                   // 32: TST.ImportWarningSetByCellRefArchive
	(*TableDataList)(nil),                                                      // 33: TST.TableDataList
	(*TableDataListSegment)(nil),                                               // 34: TST.TableDataListSegment
	(*TableRBTree)(nil),                                                        // 35: TST.TableRBTree
	(*HeaderStorageBucket)(nil),                                                // 36: TST.HeaderStorageBucket
	(*HeaderStorage)(nil),                                                      // 37: TST.HeaderStorage
	(*DataStore)(nil),                                                          // 38: TST.DataStore
	(*TableInfoArchive)(nil),                                                   // 39: TST.TableInfoArchive
	(*CategoryInfoArchive)(nil),                                                // 40: TST.CategoryInfoArchive
	(*WPTableInfoArchive)(nil),                                                 // 41: TST.WPTableInfoArchive
	(*TableStyleNetworkArchive)(nil),                                           // 42: TST.TableStyleNetworkArchive
	(*TableGroupSortOrderUIDArchive)(nil),                                      // 43: TST.TableGroupSortOrderUIDArchive
	(*TableSortOrderArchive)(nil),                                              // 44: TST.TableSortOrderArchive
	(*TableSortOrderUIDArchive)(nil),                                           // 45: TST.TableSortOrderUIDArchive
	(*SortRuleReferenceTrackerArchive)(nil),                                    // 46: TST.SortRuleReferenceTrackerArchive
	(*CellRegion)(nil),                                                         // 47: TST.CellRegion
	(*CellUIDRegionArchive)(nil),                                               // 48: TST.CellUIDRegionArchive
	(*StructuredTextImportRecord)(nil),                                         // 49: TST.StructuredTextImportRecord
	(*TableModelArchive)(nil),                                                  // 50: TST.TableModelArchive
	(*SummaryModelArchive)(nil),                                                // 51: TST.SummaryModelArchive
	(*SummaryModelGroupByChangeStateArchive)(nil),                              // 52: TST.SummaryModelGroupByChangeStateArchive
	(*ColumnRowUIDMapArchive)(nil),                                             // 53: TST.ColumnRowUIDMapArchive
	(*StrokeLayerArchive)(nil),                                                 // 54: TST.StrokeLayerArchive
	(*StrokeSidecarArchive)(nil),                                               // 55: TST.StrokeSidecarArchive
	(*DurationWrapperArchive)(nil),                                             // 56: TST.DurationWrapperArchive
	(*Cell)(nil),                                                               // 57: TST.Cell
	(*MergeRegionMapArchive)(nil),                                              // 58: TST.MergeRegionMapArchive
	(*CellMapArchive)(nil),                                                     // 59: TST.CellMapArchive
	(*CellListArchive)(nil),                                                    // 60: TST.CellListArchive
	(*ConcurrentCellMapArchive)(nil),                                           // 61: TST.ConcurrentCellMapArchive
	(*ConcurrentCellListArchive)(nil),                                          // 62: TST.ConcurrentCellListArchive
	(*CellFormatAndValueArchive)(nil),                                          // 63: TST.CellFormatAndValueArchive
	(*CellSpecArchive)(nil),                                                    // 64: TST.CellSpecArchive
	(*CommentStorageWrapperArchive)(nil),                                       // 65: TST.CommentStorageWrapperArchive
	(*CellDiffArchive)(nil),                                                    // 66: TST.CellDiffArchive
	(*CellDiffArray)(nil),                                                      // 67: TST.CellDiffArray
	(*CellDiffArraySegment)(nil),                                               // 68: TST.CellDiffArraySegment
	(*CellDiffMapArchive)(nil),                                                 // 69: TST.CellDiffMapArchive
	(*HierarchicalCellDiffMapArchive)(nil),                                     // 70: TST.HierarchicalCellDiffMapArchive
	(*DoubleStyleMapArchive)(nil),                                              // 71: TST.DoubleStyleMapArchive
	(*StyleTableMapArchive)(nil),                                               // 72: TST.StyleTableMapArchive
	(*SelectionArchive)(nil),                                                   // 73: TST.SelectionArchive
	(*DeathhawkRdar39989167CellSelectionArchive)(nil),                          // 74: TST.DeathhawkRdar39989167CellSelectionArchive
	(*StrokeSelectionArchive)(nil),                                             // 75: TST.StrokeSelectionArchive
	(*ControlCellSelectionArchive)(nil),                                        // 76: TST.ControlCellSelectionArchive
	(*StockCellSelectionArchive)(nil),                                          // 77: TST.StockCellSelectionArchive
	(*TableNameSelectionArchive)(nil),                                          // 78: TST.TableNameSelectionArchive
	(*AutofillSelectionArchive)(nil),                                           // 79: TST.AutofillSelectionArchive
	(*FilterRulePrePivotArchive)(nil),                                          // 80: TST.FilterRulePrePivotArchive
	(*FilterRuleArchive)(nil),                                                  // 81: TST.FilterRuleArchive
	(*TableStyleArchive)(nil),                                                  // 82: TST.TableStyleArchive
	(*CellStyleArchive)(nil),                                                   // 83: TST.CellStyleArchive
	(*FormulaPredArgDataArchive)(nil),                                          // 84: TST.FormulaPredArgDataArchive
	(*FormulaPredArgArchive)(nil),                                              // 85: TST.FormulaPredArgArchive
	(*FormulaPredicatePrePivotArchive)(nil),                                    // 86: TST.FormulaPredicatePrePivotArchive
	(*FormulaPredicateArchive)(nil),                                            // 87: TST.FormulaPredicateArchive
	(*ConditionalStyleSetArchive)(nil),                                         // 88: TST.ConditionalStyleSetArchive
	(*FilterSetArchive)(nil),                                                   // 89: TST.FilterSetArchive
	(*UniqueIndexArchive)(nil),                                                 // 90: TST.UniqueIndexArchive
	(*HiddenStateExtentArchive)(nil),                                           // 91: TST.HiddenStateExtentArchive
	(*HiddenStatesArchive)(nil),                                                // 92: TST.HiddenStatesArchive
	(*HiddenStatesOwnerArchive)(nil),                                           // 93: TST.HiddenStatesOwnerArchive
	(*ExpandCollapseStateArchive)(nil),                                         // 94: TST.ExpandCollapseStateArchive
	(*TokenAttachmentArchive)(nil),                                             // 95: TST.TokenAttachmentArchive
	(*TSTFormulaArchive)(nil),                                                  // 96: TST.TSTFormulaArchive
	(*ExpressionNodeArchive)(nil),                                              // 97: TST.ExpressionNodeArchive
	(*BooleanNodeArchive)(nil),                                                 // 98: TST.BooleanNodeArchive
	(*NumberNodeArchive)(nil),                                                  // 99: TST.NumberNodeArchive
	(*StringNodeArchive)(nil),                                                  // 100: TST.StringNodeArchive
	(*IdentifierNodeArchive)(nil),                                              // 101: TST.IdentifierNodeArchive
	(*ArrayNodeArchive)(nil),                                                   // 102: TST.ArrayNodeArchive
	(*ListNodeArchive)(nil),                                                    // 103: TST.ListNodeArchive
	(*OperatorNodeArchive)(nil),                                                // 104: TST.OperatorNodeArchive
	(*PostfixOperatorNodeArchive)(nil),                                         // 105: TST.PostfixOperatorNodeArchive
	(*PrefixOperatorNodeArchive)(nil),                                          // 106: TST.PrefixOperatorNodeArchive
	(*FunctionNodeArchive)(nil),                                                // 107: TST.FunctionNodeArchive
	(*FunctionEndNodeArchive)(nil),                                             // 108: TST.FunctionEndNodeArchive
	(*DateNodeArchive)(nil),                                                    // 109: TST.DateNodeArchive
	(*ReferenceNodeArchive)(nil),                                               // 110: TST.ReferenceNodeArchive
	(*DurationNodeArchive)(nil),                                                // 111: TST.DurationNodeArchive
	(*ArgumentPlaceholderNodeArchive)(nil),                                     // 112: TST.ArgumentPlaceholderNodeArchive
	(*EmptyExpressionNodeArchive)(nil),                                         // 113: TST.EmptyExpressionNodeArchive
	(*LetNodeArchive)(nil),                                                     // 114: TST.LetNodeArchive
	(*InNodeArchive)(nil),                                                      // 115: TST.InNodeArchive
	(*VariableNodeArchive)(nil),                                                // 116: TST.VariableNodeArchive
	(*LayoutHintArchive)(nil),                                                  // 117: TST.LayoutHintArchive
	(*CompletionTokenAttachmentArchive)(nil),                                   // 118: TST.CompletionTokenAttachmentArchive
	(*HiddenStateFormulaOwnerArchive)(nil),                                     // 119: TST.HiddenStateFormulaOwnerArchive
	(*FormulaStoreArchive)(nil),                                                // 120: TST.FormulaStoreArchive
	(*MergeOperationArchive)(nil),                                              // 121: TST.MergeOperationArchive
	(*MergeOwnerArchive)(nil),                                                  // 122: TST.MergeOwnerArchive
	(*TSTPencilAnnotationArchive)(nil),                                         // 123: TST.TSTPencilAnnotationArchive
	(*PencilAnnotationOwnerArchive)(nil),                                       // 124: TST.PencilAnnotationOwnerArchive
	(*AccumulatorArchive)(nil),                                                 // 125: TST.AccumulatorArchive
	(*GroupColumnArchive)(nil),                                                 // 126: TST.GroupColumnArchive
	(*GroupColumnListArchive)(nil),                                             // 127: TST.GroupColumnListArchive
	(*ColumnAggregateArchive)(nil),                                             // 128: TST.ColumnAggregateArchive
	(*ColumnAggregateListArchive)(nil),                                         // 129: TST.ColumnAggregateListArchive
	(*GroupByArchive)(nil),                                                     // 130: TST.GroupByArchive
	(*CategoryOwnerArchive)(nil),                                               // 131: TST.CategoryOwnerArchive
	(*CategoryOwnerRefArchive)(nil),                                            // 132: TST.CategoryOwnerRefArchive
	(*PivotGroupingColumnOptionsMapArchive)(nil),                               // 133: TST.PivotGroupingColumnOptionsMapArchive
	(*PivotOwnerArchive)(nil),                                                  // 134: TST.PivotOwnerArchive
	(*RichTextPayloadArchive)(nil),                                             // 135: TST.RichTextPayloadArchive
	(*FormulaEqualsTokenAttachmentArchive)(nil),                                // 136: TST.FormulaEqualsTokenAttachmentArchive
	(*CellFillStandIn)(nil),                                                    // 137: TST.CellFillStandIn
	(*FormulaSelectionArchive)(nil),                                            // 138: TST.FormulaSelectionArchive
	(*CellBorderArchive)(nil),                                                  // 139: TST.CellBorderArchive
	(*DefaultCellStylesContainerArchive)(nil),                                  // 140: TST.DefaultCellStylesContainerArchive
	(*MultiTableRemapperArchive)(nil),                                          // 141: TST.MultiTableRemapperArchive
	(*ChangePropagationMapWrapper)(nil),                                        // 142: TST.ChangePropagationMapWrapper
	(*SummaryCellVendorArchive)(nil),                                           // 143: TST.SummaryCellVendorArchive
	(*CategoryOrderArchive)(nil),                                               // 144: TST.CategoryOrderArchive
	(*PivotOrderArchive)(nil),                                                  // 145: TST.PivotOrderArchive
	(*HeaderNameMgrTileArchive)(nil),                                           // 146: TST.HeaderNameMgrTileArchive
	(*HeaderNameMgrArchive)(nil),                                               // 147: TST.HeaderNameMgrArchive
	(*WidthHeightCacheFittingEntry)(nil),                                       // 148: TST.WidthHeightCacheFittingEntry
	(*WidthHeightCache)(nil),                                                   // 149: TST.WidthHeightCache
	(*LayoutEngineArchive)(nil),                                                // 150: TST.LayoutEngineArchive
	(*TileStorage_Tile)(nil),                                                   // 151: TST.TileStorage.Tile
	(*PopUpMenuModel_CellValue)(nil),                                           // 152: TST.PopUpMenuModel.CellValue
	(*ImportWarningSetArchive_FormulaImportWarning)(nil),                       // 153: TST.ImportWarningSetArchive.FormulaImportWarning
	(*TableDataList_ListEntry)(nil),                                            // 154: TST.TableDataList.ListEntry
	(*TableRBTree_Node)(nil),                                                   // 155: TST.TableRBTree.Node
	(*HeaderStorageBucket_Header)(nil),                                         // 156: TST.HeaderStorageBucket.Header
	(*TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive)(nil),              // 157: TST.TableGroupSortOrderUIDArchive.GroupSortRuleUIDArchive
	(*TableSortOrderArchive_SortRuleArchive)(nil),                              // 158: TST.TableSortOrderArchive.SortRuleArchive
	(*TableSortOrderUIDArchive_SortRuleArchive)(nil),                           // 159: TST.TableSortOrderUIDArchive.SortRuleArchive
	(*StrokeLayerArchive_StrokeRunArchive)(nil),                                // 160: TST.StrokeLayerArchive.StrokeRunArchive
	(*CellListArchive_OptionalCell)(nil),                                       // 161: TST.CellListArchive.OptionalCell
	(*ConcurrentCellListArchive_OptionalCell)(nil),                             // 162: TST.ConcurrentCellListArchive.OptionalCell
	(*HierarchicalCellDiffMapArchive_BoxedRow)(nil),                            // 163: TST.HierarchicalCellDiffMapArchive.BoxedRow
	(*DoubleStyleMapArchive_DoubleStyleMapEntryArchive)(nil),                   // 164: TST.DoubleStyleMapArchive.DoubleStyleMapEntryArchive
	(*StyleTableMapArchive_StyleTableMapEntryArchive)(nil),                     // 165: TST.StyleTableMapArchive.StyleTableMapEntryArchive
	(*ConditionalStyleSetArchive_ConditionalStyleRulePrePivot)(nil),            // 166: TST.ConditionalStyleSetArchive.ConditionalStyleRulePrePivot
	(*ConditionalStyleSetArchive_ConditionalStyleRule)(nil),                    // 167: TST.ConditionalStyleSetArchive.ConditionalStyleRule
	(*ConditionalStyleSetArchive_ConditionalStyleRules)(nil),                   // 168: TST.ConditionalStyleSetArchive.ConditionalStyleRules
	(*UniqueIndexArchive_UniqueIndexEntryArchive)(nil),                         // 169: TST.UniqueIndexArchive.UniqueIndexEntryArchive
	(*HiddenStateExtentArchive_RowOrColumnState)(nil),                          // 170: TST.HiddenStateExtentArchive.RowOrColumnState
	(*FormulaStoreArchive_FormulaStorePair)(nil),                               // 171: TST.FormulaStoreArchive.FormulaStorePair
	(*GroupByArchive_AggNodeArchive)(nil),                                      // 172: TST.GroupByArchive.AggNodeArchive
	(*GroupByArchive_GroupNodeArchive)(nil),                                    // 173: TST.GroupByArchive.GroupNodeArchive
	(*GroupByArchive_AggregatorArchive)(nil),                                   // 174: TST.GroupByArchive.AggregatorArchive
	(*GroupByArchive_GroupNodeArchive_FormatManagerArchive)(nil),               // 175: TST.GroupByArchive.GroupNodeArchive.FormatManagerArchive
	(*GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive)(nil), // 176: TST.GroupByArchive.GroupNodeArchive.FormatManagerArchive.RowSetArchive
	(*SummaryCellVendorArchive_SummaryCellEntry)(nil),                          // 177: TST.SummaryCellVendorArchive.SummaryCellEntry
	(*HeaderNameMgrTileArchive_NameFragmentArchive)(nil),                       // 178: TST.HeaderNameMgrTileArchive.NameFragmentArchive
	(*HeaderNameMgrArchive_PerTableArchive)(nil),                               // 179: TST.HeaderNameMgrArchive.PerTableArchive
	(*CellCoordinateArchive)(nil),                                              // 180: TSCE.CellCoordinateArchive
	(*UidLookupListArchive)(nil),                                               // 181: TSCE.UidLookupListArchive
	(*UUID)(nil),                                                               // 182: TSP.UUID
	(*CellValueArchive)(nil),                                                   // 183: TSCE.CellValueArchive
	(*CellReferenceArchive)(nil),                                               // 184: TSCE.CellReferenceArchive
	(*Reference)(nil),                                                          // 185: TSP.Reference
	(*Range)(nil),                                                              // 186: TSP.Range
	(*DrawableArchive)(nil),                                                    // 187: TSD.DrawableArchive
	(*CoordMapperArchive)(nil),                                                 // 188: TSCE.CoordMapperArchive
	(*UUIDRectArchive)(nil),                                                    // 189: TSP.UUIDRectArchive
	(*StructuredTextImportSettings)(nil),                                       // 190: TSK.StructuredTextImportSettings
	(*CFUUIDArchive)(nil),                                                      // 191: TSP.CFUUIDArchive
	(*HauntedOwnerArchive)(nil),                                                // 192: TSCE.HauntedOwnerArchive
	(*TSKFormatStructArchive)(nil),                                             // 193: TSK.TSKFormatStructArchive
	(*CustomFormatArchive)(nil),                                                // 194: TSK.CustomFormatArchive
	(*FormulaArchive)(nil),                                                     // 195: TSCE.FormulaArchive
	(*CommandPropertyMapArchive)(nil),                                          // 196: TSS.CommandPropertyMapArchive
	(*LargeArray)(nil),                                                         // 197: TSP.LargeArray
	(*LargeArraySegment)(nil),                                                  // 198: TSP.LargeArraySegment
	(*UUIDCoordArchive)(nil),                                                   // 199: TSP.UUIDCoordArchive
	(*StyleArchive)(nil),                                                       // 200: TSS.StyleArchive
	(*TableStylePropertiesArchive)(nil),                                        // 201: TST.TableStylePropertiesArchive
	(*CellStylePropertiesArchive)(nil),                                         // 202: TST.CellStylePropertiesArchive
	(*RelativeCellRefArchive)(nil),                                             // 203: TSCE.RelativeCellRefArchive
	(*CategoryReferenceArchive)(nil),                                           // 204: TSCE.CategoryReferenceArchive
	(*ASTNodeArrayArchive_ASTUidTractList)(nil),                                // 205: TSCE.ASTNodeArrayArchive.ASTUidTractList
	(*ViewTractRefArchive)(nil),                                                // 206: TSCE.ViewTractRefArchive
	(*IndexSetArchive)(nil),                                                    // 207: TSCE.IndexSetArchive
	(*UIGraphicalAttachment)(nil),                                              // 208: TSWP.UIGraphicalAttachment
	(*RangeReferenceArchive)(nil),                                              // 209: TSCE.RangeReferenceArchive
	(*Size)(nil),                                                               // 210: TSP.Size
	(*FunctorArchive)(nil),                                                     // 211: TSCE.FunctorArchive
	(*FillArchive)(nil),                                                        // 212: TSD.FillArchive
	(*TSWPSelectionArchive)(nil),                                               // 213: TSWP.TSWPSelectionArchive
	(*StrokeArchive)(nil),                                                      // 214: TSD.StrokeArchive
	(*OwnerUIDMapperArchive)(nil),                                              // 215: TSCE.OwnerUIDMapperArchive
	(*UUIDMapArchive)(nil),                                                     // 216: TSP.UUIDMapArchive
	(*BooleanCellValueArchive)(nil),                                            // 217: TSCE.BooleanCellValueArchive
	(*DateCellValueArchive)(nil),                                               // 218: TSCE.DateCellValueArchive
	(*NumberCellValueArchive)(nil),                                             // 219: TSCE.NumberCellValueArchive
	(*StringCellValueArchive)(nil),                                             // 220: TSCE.StringCellValueArchive
	(*IndexSet)(nil),                                                           // 221: TSP.IndexSet
	(*UidCellRefSetArchive)(nil),                                               // 222: TSCE.UidCellRefSetArchive
	(*CommandPropertyEntryArchive)(nil),                                        // 223: TSS.CommandPropertyEntryArchive
}
var file_TSTArchives_proto_depIdxs = []int32{
	180, // 0: TST.CellID.expanded_coord:type_name -> TSCE.CellCoordinateArchive
	181, // 1: TST.CellUIDLookupListArchive.column_uids:type_name -> TSCE.UidLookupListArchive
	181, // 2: TST.CellUIDLookupListArchive.row_uids:type_name -> TSCE.UidLookupListArchive
	182, // 3: TST.CellUIDListArchive.row_uids:type_name -> TSP.UUID
	182, // 4: TST.CellUIDListArchive.column_uids:type_name -> TSP.UUID
	19,  // 5: TST.CellUIDListArchive.uncompressed_lookup_list:type_name -> TST.CellUIDLookupListArchive
	18,  // 6: TST.CellRange.origin:type_name -> TST.CellID
	21,  // 7: TST.CellRange.size:type_name -> TST.TableSize
	180, // 8: TST.ExpandedCellRange.origin:type_name -> TSCE.CellCoordinateArchive
	22,  // 9: TST.ExpandedCellRange.size:type_name -> TST.ExpandedTableSize
	23,  // 10: TST.TableSelection.cellRange:type_name -> TST.CellRange
	23,  // 11: TST.TableSelection.extendedCellRange:type_name -> TST.CellRange
	3,   // 12: TST.TableSelection.selection_type:type_name -> TST.SelectionTypeArchive
	26,  // 13: TST.Tile.rowInfos:type_name -> TST.TileRowInfo
	151, // 14: TST.TileStorage.tiles:type_name -> TST.TileStorage.Tile
	152, // 15: TST.PopUpMenuModel.item:type_name -> TST.PopUpMenuModel.CellValue
	183, // 16: TST.PopUpMenuModel.tsce_item:type_name -> TSCE.CellValueArchive
	153, // 17: TST.ImportWarningSetArchive.formula_import_warning:type_name -> TST.ImportWarningSetArchive.FormulaImportWarning
	184, // 18: TST.CellRefImportWarningSetPairArchive.cell_ref:type_name -> TSCE.CellReferenceArchive
	30,  // 19: TST.CellRefImportWarningSetPairArchive.warning_set:type_name -> TST.ImportWarningSetArchive
	31,  // 20: TST.ImportWarningSetByCellRefArchive.cellref_warning_set_pair:type_name -> TST.CellRefImportWarningSetPairArchive
	9,   // 21: TST.TableDataList.listType:type_name -> TST.TableDataList.ListType
	154, // 22: TST.TableDataList.entries:type_name -> TST.TableDataList.ListEntry
	185, // 23: TST.TableDataList.segments:type_name -> TSP.Reference
	9,   // 24: TST.TableDataListSegment.list_type:type_name -> TST.TableDataList.ListType
	186, // 25: TST.TableDataListSegment.key_range:type_name -> TSP.Range
	154, // 26: TST.TableDataListSegment.entries:type_name -> TST.TableDataList.ListEntry
	155, // 27: TST.TableRBTree.nodes:type_name -> TST.TableRBTree.Node
	156, // 28: TST.HeaderStorageBucket.headers:type_name -> TST.HeaderStorageBucket.Header
	185, // 29: TST.HeaderStorage.buckets:type_name -> TSP.Reference
	37,  // 30: TST.DataStore.rowHeaders:type_name -> TST.HeaderStorage
	185, // 31: TST.DataStore.columnHeaders:type_name -> TSP.Reference
	28,  // 32: TST.DataStore.tiles:type_name -> TST.TileStorage
	185, // 33: TST.DataStore.stringTable:type_name -> TSP.Reference
	185, // 34: TST.DataStore.styleTable:type_name -> TSP.Reference
	185, // 35: TST.DataStore.formula_table:type_name -> TSP.Reference
	185, // 36: TST.DataStore.formulaErrorTable:type_name -> TSP.Reference
	185, // 37: TST.DataStore.format_table_pre_bnc:type_name -> TSP.Reference
	185, // 38: TST.DataStore.multipleChoiceListFormatTable:type_name -> TSP.Reference
	185, // 39: TST.DataStore.merge_region_map:type_name -> TSP.Reference
	185, // 40: TST.DataStore.customFormatTable:type_name -> TSP.Reference
	35,  // 41: TST.DataStore.rowTileTree:type_name -> TST.TableRBTree
	35,  // 42: TST.DataStore.columnTileTree:type_name -> TST.TableRBTree
	185, // 43: TST.DataStore.rich_text_table:type_name -> TSP.Reference
	185, // 44: TST.DataStore.conditionalstyletable:type_name -> TSP.Reference
	185, // 45: TST.DataStore.commentStorageTable:type_name -> TSP.Reference
	185, // 46: TST.DataStore.importWarningSetTable:type_name -> TSP.Reference
	185, // 47: TST.DataStore.control_cell_spec_table:type_name -> TSP.Reference
	185, // 48: TST.DataStore.format_table:type_name -> TSP.Reference
	187, // 49: TST.TableInfoArchive.super:type_name -> TSD.DrawableArchive
	185, // 50: TST.TableInfoArchive.tableModel:type_name -> TSP.Reference
	185, // 51: TST.TableInfoArchive.editing_state:type_name -> TSP.Reference
	185, // 52: TST.TableInfoArchive.summary_model:type_name -> TSP.Reference
	185, // 53: TST.TableInfoArchive.category_order:type_name -> TSP.Reference
	185, // 54: TST.TableInfoArchive.view_column_row_uids:type_name -> TSP.Reference
	182, // 55: TST.TableInfoArchive.group_by_uuid:type_name -> TSP.UUID
	182, // 56: TST.TableInfoArchive.hidden_states_uuid:type_name -> TSP.UUID
	188, // 57: TST.TableInfoArchive.pasteboard_coord_mapper:type_name -> TSCE.CoordMapperArchive
	150, // 58: TST.TableInfoArchive.layout_engine:type_name -> TST.LayoutEngineArchive
	185, // 59: TST.TableInfoArchive.pivot_data_model:type_name -> TSP.Reference
	185, // 60: TST.TableInfoArchive.pivot_order:type_name -> TSP.Reference
	187, // 61: TST.CategoryInfoArchive.super:type_name -> TSD.DrawableArchive
	185, // 62: TST.CategoryInfoArchive.tableModel:type_name -> TSP.Reference
	39,  // 63: TST.WPTableInfoArchive.super:type_name -> TST.TableInfoArchive
	185, // 64: TST.WPTableInfoArchive.storage:type_name -> TSP.Reference
	185, // 65: TST.TableStyleNetworkArchive.body_text_style:type_name -> TSP.Reference
	185, // 66: TST.TableStyleNetworkArchive.header_row_text_style:type_name -> TSP.Reference
	185, // 67: TST.TableStyleNetworkArchive.header_column_text_style:type_name -> TSP.Reference
	185, // 68: TST.TableStyleNetworkArchive.footer_row_text_style:type_name -> TSP.Reference
	185, // 69: TST.TableStyleNetworkArchive.body_cell_style:type_name -> TSP.Reference
	185, // 70: TST.TableStyleNetworkArchive.header_row_style:type_name -> TSP.Reference
	185, // 71: TST.TableStyleNetworkArchive.header_column_style:type_name -> TSP.Reference
	185, // 72: TST.TableStyleNetworkArchive.footer_row_style:type_name -> TSP.Reference
	185, // 73: TST.TableStyleNetworkArchive.table_style:type_name -> TSP.Reference
	185, // 74: TST.TableStyleNetworkArchive.table_name_style:type_name -> TSP.Reference
	185, // 75: TST.TableStyleNetworkArchive.table_name_shape_style:type_name -> TSP.Reference
	185, // 76: TST.TableStyleNetworkArchive.category_level_1_text_style:type_name -> TSP.Reference
	185, // 77: TST.TableStyleNetworkArchive.category_level_2_text_style:type_name -> TSP.Reference
	185, // 78: TST.TableStyleNetworkArchive.category_level_3_text_style:type_name -> TSP.Reference
	185, // 79: TST.TableStyleNetworkArchive.category_level_4_text_style:type_name -> TSP.Reference
	185, // 80: TST.TableStyleNetworkArchive.category_level_5_text_style:type_name -> TSP.Reference
	185, // 81: TST.TableStyleNetworkArchive.category_level_1_style:type_name -> TSP.Reference
	185, // 82: TST.TableStyleNetworkArchive.category_level_2_style:type_name -> TSP.Reference
	185, // 83: TST.TableStyleNetworkArchive.category_level_3_style:type_name -> TSP.Reference
	185, // 84: TST.TableStyleNetworkArchive.category_level_4_style:type_name -> TSP.Reference
	185, // 85: TST.TableStyleNetworkArchive.category_level_5_style:type_name -> TSP.Reference
	185, // 86: TST.TableStyleNetworkArchive.label_level_1_text_style:type_name -> TSP.Reference
	185, // 87: TST.TableStyleNetworkArchive.label_level_2_text_style:type_name -> TSP.Reference
	185, // 88: TST.TableStyleNetworkArchive.label_level_3_text_style:type_name -> TSP.Reference
	185, // 89: TST.TableStyleNetworkArchive.label_level_4_text_style:type_name -> TSP.Reference
	185, // 90: TST.TableStyleNetworkArchive.label_level_5_text_style:type_name -> TSP.Reference
	185, // 91: TST.TableStyleNetworkArchive.label_level_1_style:type_name -> TSP.Reference
	185, // 92: TST.TableStyleNetworkArchive.label_level_2_style:type_name -> TSP.Reference
	185, // 93: TST.TableStyleNetworkArchive.label_level_3_style:type_name -> TSP.Reference
	185, // 94: TST.TableStyleNetworkArchive.label_level_4_style:type_name -> TSP.Reference
	185, // 95: TST.TableStyleNetworkArchive.label_level_5_style:type_name -> TSP.Reference
	185, // 96: TST.TableStyleNetworkArchive.pivot_body_summary_row_style:type_name -> TSP.Reference
	185, // 97: TST.TableStyleNetworkArchive.pivot_body_summary_column_style:type_name -> TSP.Reference
	185, // 98: TST.TableStyleNetworkArchive.pivot_header_column_summary_style:type_name -> TSP.Reference
	157, // 99: TST.TableGroupSortOrderUIDArchive.group_sort_rules:type_name -> TST.TableGroupSortOrderUIDArchive.GroupSortRuleUIDArchive
	11,  // 100: TST.TableSortOrderArchive.type:type_name -> TST.TableSortOrderArchive.SortType
	158, // 101: TST.TableSortOrderArchive.rules:type_name -> TST.TableSortOrderArchive.SortRuleArchive
	13,  // 102: TST.TableSortOrderUIDArchive.type:type_name -> TST.TableSortOrderUIDArchive.SortType
	159, // 103: TST.TableSortOrderUIDArchive.rules:type_name -> TST.TableSortOrderUIDArchive.SortRuleArchive
	185, // 104: TST.SortRuleReferenceTrackerArchive.reference_tracker:type_name -> TSP.Reference
	23,  // 105: TST.CellRegion.cell_ranges:type_name -> TST.CellRange
	189, // 106: TST.CellUIDRegionArchive.cell_uid_ranges:type_name -> TSP.UUIDRectArchive
	190, // 107: TST.StructuredTextImportRecord.import_settings:type_name -> TSK.StructuredTextImportSettings
	47,  // 108: TST.StructuredTextImportRecord.imported_region:type_name -> TST.CellRegion
	185, // 109: TST.TableModelArchive.table_style:type_name -> TSP.Reference
	185, // 110: TST.TableModelArchive.body_text_style:type_name -> TSP.Reference
	185, // 111: TST.TableModelArchive.header_row_text_style:type_name -> TSP.Reference
	185, // 112: TST.TableModelArchive.header_column_text_style:type_name -> TSP.Reference
	185, // 113: TST.TableModelArchive.footer_row_text_style:type_name -> TSP.Reference
	185, // 114: TST.TableModelArchive.body_cell_style:type_name -> TSP.Reference
	185, // 115: TST.TableModelArchive.header_row_style:type_name -> TSP.Reference
	185, // 116: TST.TableModelArchive.header_column_style:type_name -> TSP.Reference
	185, // 117: TST.TableModelArchive.footer_row_style:type_name -> TSP.Reference
	185, // 118: TST.TableModelArchive.table_name_style:type_name -> TSP.Reference
	185, // 119: TST.TableModelArchive.table_name_shape_style:type_name -> TSP.Reference
	185, // 120: TST.TableModelArchive.table_style_preset:type_name -> TSP.Reference
	38,  // 121: TST.TableModelArchive.base_data_store:type_name -> TST.DataStore
	185, // 122: TST.TableModelArchive.provider:type_name -> TSP.Reference
	18,  // 123: TST.TableModelArchive.origin_offset:type_name -> TST.CellID
	185, // 124: TST.TableModelArchive.hidden_state_formula_owner_for_columns:type_name -> TSP.Reference
	185, // 125: TST.TableModelArchive.hidden_state_formula_owner_for_rows:type_name -> TSP.Reference
	185, // 126: TST.TableModelArchive.row_filter_set_pre_pivot:type_name -> TSP.Reference
	191, // 127: TST.TableModelArchive.conditional_style_formula_owner_id:type_name -> TSP.CFUUIDArchive
	44,  // 128: TST.TableModelArchive.sort_order:type_name -> TST.TableSortOrderArchive
	46,  // 129: TST.TableModelArchive.sort_rule_reference_tracker:type_name -> TST.SortRuleReferenceTrackerArchive
	185, // 130: TST.TableModelArchive.base_column_row_uids:type_name -> TSP.Reference
	122, // 131: TST.TableModelArchive.merge_owner:type_name -> TST.MergeOwnerArchive
	185, // 132: TST.TableModelArchive.stroke_sidecar:type_name -> TSP.Reference
	49,  // 133: TST.TableModelArchive.text_import_record:type_name -> TST.StructuredTextImportRecord
	185, // 134: TST.TableModelArchive.category_level_1_style:type_name -> TSP.Reference
	185, // 135: TST.TableModelArchive.category_level_2_style:type_name -> TSP.Reference
	185, // 136: TST.TableModelArchive.category_level_3_style:type_name -> TSP.Reference
	185, // 137: TST.TableModelArchive.category_level_4_style:type_name -> TSP.Reference
	185, // 138: TST.TableModelArchive.category_level_5_style:type_name -> TSP.Reference
	185, // 139: TST.TableModelArchive.category_level_1_text_style:type_name -> TSP.Reference
	185, // 140: TST.TableModelArchive.category_level_2_text_style:type_name -> TSP.Reference
	185, // 141: TST.TableModelArchive.category_level_3_text_style:type_name -> TSP.Reference
	185, // 142: TST.TableModelArchive.category_level_4_text_style:type_name -> TSP.Reference
	185, // 143: TST.TableModelArchive.category_level_5_text_style:type_name -> TSP.Reference
	93,  // 144: TST.TableModelArchive.hidden_states_owner:type_name -> TST.HiddenStatesOwnerArchive
	185, // 145: TST.TableModelArchive.label_level_1_style:type_name -> TSP.Reference
	185, // 146: TST.TableModelArchive.label_level_2_style:type_name -> TSP.Reference
	185, // 147: TST.TableModelArchive.label_level_3_style:type_name -> TSP.Reference
	185, // 148: TST.TableModelArchive.label_level_4_style:type_name -> TSP.Reference
	185, // 149: TST.TableModelArchive.label_level_5_style:type_name -> TSP.Reference
	185, // 150: TST.TableModelArchive.label_level_1_text_style:type_name -> TSP.Reference
	185, // 151: TST.TableModelArchive.label_level_2_text_style:type_name -> TSP.Reference
	185, // 152: TST.TableModelArchive.label_level_3_text_style:type_name -> TSP.Reference
	185, // 153: TST.TableModelArchive.label_level_4_text_style:type_name -> TSP.Reference
	185, // 154: TST.TableModelArchive.label_level_5_text_style:type_name -> TSP.Reference
	131, // 155: TST.TableModelArchive.category_owner_deprecated:type_name -> TST.CategoryOwnerArchive
	124, // 156: TST.TableModelArchive.pencil_annotation_owner:type_name -> TST.PencilAnnotationOwnerArchive
	192, // 157: TST.TableModelArchive.haunted_owner:type_name -> TSCE.HauntedOwnerArchive
	185, // 158: TST.TableModelArchive.pivot_owner:type_name -> TSP.Reference
	185, // 159: TST.TableModelArchive.category_owner:type_name -> TSP.Reference
	185, // 160: TST.TableModelArchive.pivot_body_summary_row_style:type_name -> TSP.Reference
	185, // 161: TST.TableModelArchive.pivot_body_summary_column_style:type_name -> TSP.Reference
	185, // 162: TST.TableModelArchive.pivot_header_column_summary_style:type_name -> TSP.Reference
	185, // 163: TST.SummaryModelArchive.table_info:type_name -> TSP.Reference
	38,  // 164: TST.SummaryModelArchive.data_store:type_name -> TST.DataStore
	185, // 165: TST.SummaryModelArchive.column_row_uids:type_name -> TSP.Reference
	182, // 166: TST.SummaryModelArchive.aggregate_formula_owner_uuid:type_name -> TSP.UUID
	185, // 167: TST.SummaryModelArchive.summary_cell_vendor:type_name -> TSP.Reference
	43,  // 168: TST.SummaryModelArchive.group_sort_order:type_name -> TST.TableGroupSortOrderUIDArchive
	185, // 169: TST.SummaryModelGroupByChangeStateArchive.cell_map:type_name -> TSP.Reference
	182, // 170: TST.ColumnRowUIDMapArchive.sorted_column_uids:type_name -> TSP.UUID
	182, // 171: TST.ColumnRowUIDMapArchive.sorted_row_uids:type_name -> TSP.UUID
	160, // 172: TST.StrokeLayerArchive.stroke_runs:type_name -> TST.StrokeLayerArchive.StrokeRunArchive
	185, // 173: TST.StrokeSidecarArchive.left_column_stroke_layers:type_name -> TSP.Reference
	185, // 174: TST.StrokeSidecarArchive.right_column_stroke_layers:type_name -> TSP.Reference
	185, // 175: TST.StrokeSidecarArchive.top_row_stroke_layers:type_name -> TSP.Reference
	185, // 176: TST.StrokeSidecarArchive.bottom_row_stroke_layers:type_name -> TSP.Reference
	1,   // 177: TST.Cell.valueType:type_name -> TST.CellValueType
	185, // 178: TST.Cell.cell_style:type_name -> TSP.Reference
	185, // 179: TST.Cell.text_style:type_name -> TSP.Reference
	193, // 180: TST.Cell.current_format:type_name -> TSK.TSKFormatStructArchive
	185, // 181: TST.Cell.formulaError:type_name -> TSP.Reference
	193, // 182: TST.Cell.number_format:type_name -> TSK.TSKFormatStructArchive
	193, // 183: TST.Cell.currency_format:type_name -> TSK.TSKFormatStructArchive
	193, // 184: TST.Cell.duration_format:type_name -> TSK.TSKFormatStructArchive
	193, // 185: TST.Cell.date_format:type_name -> TSK.TSKFormatStructArchive
	193, // 186: TST.Cell.custom_format:type_name -> TSK.TSKFormatStructArchive
	193, // 187: TST.Cell.base_format:type_name -> TSK.TSKFormatStructArchive
	185, // 188: TST.Cell.richText:type_name -> TSP.Reference
	185, // 189: TST.Cell.conditional_style:type_name -> TSP.Reference
	185, // 190: TST.Cell.comment_storage:type_name -> TSP.Reference
	30,  // 191: TST.Cell.import_warning_set:type_name -> TST.ImportWarningSetArchive
	194, // 192: TST.Cell.custom_format_object:type_name -> TSK.CustomFormatArchive
	139, // 193: TST.Cell.cell_border:type_name -> TST.CellBorderArchive
	64,  // 194: TST.Cell.cell_spec:type_name -> TST.CellSpecArchive
	193, // 195: TST.Cell.text_format:type_name -> TSK.TSKFormatStructArchive
	193, // 196: TST.Cell.boolean_format:type_name -> TSK.TSKFormatStructArchive
	23,  // 197: TST.MergeRegionMapArchive.cell_range:type_name -> TST.CellRange
	185, // 198: TST.CellMapArchive.cell_tiles:type_name -> TSP.Reference
	180, // 199: TST.CellMapArchive.expanded_cell_ids:type_name -> TSCE.CellCoordinateArchive
	20,  // 200: TST.CellMapArchive.cell_uid_list:type_name -> TST.CellUIDListArchive
	189, // 201: TST.CellMapArchive.merge_uid_ranges:type_name -> TSP.UUIDRectArchive
	189, // 202: TST.CellMapArchive.unmerge_uid_ranges:type_name -> TSP.UUIDRectArchive
	121, // 203: TST.CellMapArchive.merge_actions:type_name -> TST.MergeOperationArchive
	161, // 204: TST.CellListArchive.cells:type_name -> TST.CellListArchive.OptionalCell
	185, // 205: TST.ConcurrentCellMapArchive.cell_lists:type_name -> TSP.Reference
	121, // 206: TST.ConcurrentCellMapArchive.merge_actions:type_name -> TST.MergeOperationArchive
	162, // 207: TST.ConcurrentCellListArchive.cells:type_name -> TST.ConcurrentCellListArchive.OptionalCell
	189, // 208: TST.ConcurrentCellListArchive.cell_uid_range:type_name -> TSP.UUIDRectArchive
	23,  // 209: TST.ConcurrentCellListArchive.cell_range:type_name -> TST.CellRange
	1,   // 210: TST.CellFormatAndValueArchive.valueType:type_name -> TST.CellValueType
	185, // 211: TST.CellFormatAndValueArchive.richTextStorage:type_name -> TSP.Reference
	193, // 212: TST.CellFormatAndValueArchive.number_format:type_name -> TSK.TSKFormatStructArchive
	193, // 213: TST.CellFormatAndValueArchive.currency_format:type_name -> TSK.TSKFormatStructArchive
	193, // 214: TST.CellFormatAndValueArchive.date_format:type_name -> TSK.TSKFormatStructArchive
	193, // 215: TST.CellFormatAndValueArchive.duration_format:type_name -> TSK.TSKFormatStructArchive
	193, // 216: TST.CellFormatAndValueArchive.text_format:type_name -> TSK.TSKFormatStructArchive
	193, // 217: TST.CellFormatAndValueArchive.boolean_format:type_name -> TSK.TSKFormatStructArchive
	185, // 218: TST.CellFormatAndValueArchive.formatted_rich_text_value:type_name -> TSP.Reference
	195, // 219: TST.CellSpecArchive.formula:type_name -> TSCE.FormulaArchive
	185, // 220: TST.CellSpecArchive.chooser_control_popup_model:type_name -> TSP.Reference
	185, // 221: TST.CommentStorageWrapperArchive.comment_storage:type_name -> TSP.Reference
	196, // 222: TST.CellDiffArchive.property_map_to_set:type_name -> TSS.CommandPropertyMapArchive
	196, // 223: TST.CellDiffArchive.property_map_to_reset:type_name -> TSS.CommandPropertyMapArchive
	197, // 224: TST.CellDiffArray.large_array:type_name -> TSP.LargeArray
	198, // 225: TST.CellDiffArraySegment.large_array_segment:type_name -> TSP.LargeArraySegment
	66,  // 226: TST.CellDiffArraySegment.elements:type_name -> TST.CellDiffArchive
	180, // 227: TST.CellDiffMapArchive.expanded_cell_ids:type_name -> TSCE.CellCoordinateArchive
	20,  // 228: TST.CellDiffMapArchive.cell_uids:type_name -> TST.CellUIDListArchive
	185, // 229: TST.CellDiffMapArchive.cell_diff_array:type_name -> TSP.Reference
	182, // 230: TST.HierarchicalCellDiffMapArchive.row_header_uids:type_name -> TSP.UUID
	182, // 231: TST.HierarchicalCellDiffMapArchive.column_header_uids:type_name -> TSP.UUID
	182, // 232: TST.HierarchicalCellDiffMapArchive.aggregate_rule_uids:type_name -> TSP.UUID
	2,   // 233: TST.HierarchicalCellDiffMapArchive.active_flattening_dimension:type_name -> TST.TableDimensionArchive
	182, // 234: TST.HierarchicalCellDiffMapArchive.row_value_uids:type_name -> TSP.UUID
	182, // 235: TST.HierarchicalCellDiffMapArchive.column_value_uids:type_name -> TSP.UUID
	163, // 236: TST.HierarchicalCellDiffMapArchive.cell_diff_storage:type_name -> TST.HierarchicalCellDiffMapArchive.BoxedRow
	164, // 237: TST.DoubleStyleMapArchive.cell_map_entry:type_name -> TST.DoubleStyleMapArchive.DoubleStyleMapEntryArchive
	165, // 238: TST.StyleTableMapArchive.map_entry:type_name -> TST.StyleTableMapArchive.StyleTableMapEntryArchive
	185, // 239: TST.SelectionArchive.tableModel:type_name -> TSP.Reference
	3,   // 240: TST.SelectionArchive.selection_type:type_name -> TST.SelectionTypeArchive
	18,  // 241: TST.SelectionArchive.anchor_cell:type_name -> TST.CellID
	23,  // 242: TST.SelectionArchive.cell_ranges:type_name -> TST.CellRange
	23,  // 243: TST.SelectionArchive.base_ranges:type_name -> TST.CellRange
	18,  // 244: TST.SelectionArchive.cursor_cell:type_name -> TST.CellID
	185, // 245: TST.SelectionArchive.table_info:type_name -> TSP.Reference
	48,  // 246: TST.SelectionArchive.cell_uid_region:type_name -> TST.CellUIDRegionArchive
	48,  // 247: TST.SelectionArchive.base_uid_region:type_name -> TST.CellUIDRegionArchive
	199, // 248: TST.SelectionArchive.anchor_cell_uid:type_name -> TSP.UUIDCoordArchive
	199, // 249: TST.SelectionArchive.cursor_cell_uid:type_name -> TSP.UUIDCoordArchive
	185, // 250: TST.DeathhawkRdar39989167CellSelectionArchive.table_info:type_name -> TSP.Reference
	3,   // 251: TST.DeathhawkRdar39989167CellSelectionArchive.selection_type:type_name -> TST.SelectionTypeArchive
	48,  // 252: TST.DeathhawkRdar39989167CellSelectionArchive.cell_uid_region:type_name -> TST.CellUIDRegionArchive
	48,  // 253: TST.DeathhawkRdar39989167CellSelectionArchive.base_uid_region:type_name -> TST.CellUIDRegionArchive
	199, // 254: TST.DeathhawkRdar39989167CellSelectionArchive.anchor_cell_uid:type_name -> TSP.UUIDCoordArchive
	199, // 255: TST.DeathhawkRdar39989167CellSelectionArchive.cursor_cell_uid:type_name -> TSP.UUIDCoordArchive
	23,  // 256: TST.AutofillSelectionArchive.source_cell_range:type_name -> TST.CellRange
	23,  // 257: TST.AutofillSelectionArchive.target_cell_range:type_name -> TST.CellRange
	86,  // 258: TST.FilterRulePrePivotArchive.predicate:type_name -> TST.FormulaPredicatePrePivotArchive
	87,  // 259: TST.FilterRuleArchive.predicate:type_name -> TST.FormulaPredicateArchive
	200, // 260: TST.TableStyleArchive.super:type_name -> TSS.StyleArchive
	201, // 261: TST.TableStyleArchive.table_properties:type_name -> TST.TableStylePropertiesArchive
	200, // 262: TST.CellStyleArchive.super:type_name -> TSS.StyleArchive
	202, // 263: TST.CellStyleArchive.cell_properties:type_name -> TST.CellStylePropertiesArchive
	84,  // 264: TST.FormulaPredArgArchive.arg_value:type_name -> TST.FormulaPredArgDataArchive
	184, // 265: TST.FormulaPredArgArchive.base_cell_ref:type_name -> TSCE.CellReferenceArchive
	203, // 266: TST.FormulaPredArgArchive.relative_cell_ref:type_name -> TSCE.RelativeCellRefArchive
	204, // 267: TST.FormulaPredArgArchive.category_ref:type_name -> TSCE.CategoryReferenceArchive
	205, // 268: TST.FormulaPredArgArchive.uid_tract_list:type_name -> TSCE.ASTNodeArrayArchive.ASTUidTractList
	180, // 269: TST.FormulaPredArgArchive.host_cell_coord:type_name -> TSCE.CellCoordinateArchive
	84,  // 270: TST.FormulaPredArgArchive.list_entries:type_name -> TST.FormulaPredArgDataArchive
	206, // 271: TST.FormulaPredArgArchive.view_tract_ref:type_name -> TSCE.ViewTractRefArchive
	195, // 272: TST.FormulaPredicatePrePivotArchive.formula:type_name -> TSCE.FormulaArchive
	85,  // 273: TST.FormulaPredicateArchive.param_value0:type_name -> TST.FormulaPredArgArchive
	85,  // 274: TST.FormulaPredicateArchive.param_value1:type_name -> TST.FormulaPredArgArchive
	85,  // 275: TST.FormulaPredicateArchive.param_value2:type_name -> TST.FormulaPredArgArchive
	195, // 276: TST.FormulaPredicateArchive.formula:type_name -> TSCE.FormulaArchive
	182, // 277: TST.FormulaPredicateArchive.host_table_uid:type_name -> TSP.UUID
	182, // 278: TST.FormulaPredicateArchive.host_column_uid:type_name -> TSP.UUID
	182, // 279: TST.FormulaPredicateArchive.host_row_uid:type_name -> TSP.UUID
	166, // 280: TST.ConditionalStyleSetArchive.rules_prepivot:type_name -> TST.ConditionalStyleSetArchive.ConditionalStyleRulePrePivot
	168, // 281: TST.ConditionalStyleSetArchive.rules:type_name -> TST.ConditionalStyleSetArchive.ConditionalStyleRules
	15,  // 282: TST.FilterSetArchive.type:type_name -> TST.FilterSetArchive.FilterSetType
	80,  // 283: TST.FilterSetArchive.filter_rules_prepivot:type_name -> TST.FilterRulePrePivotArchive
	81,  // 284: TST.FilterSetArchive.filter_rules:type_name -> TST.FilterRuleArchive
	182, // 285: TST.UniqueIndexArchive.column_uid:type_name -> TSP.UUID
	169, // 286: TST.UniqueIndexArchive.unique_entries:type_name -> TST.UniqueIndexArchive.UniqueIndexEntryArchive
	182, // 287: TST.HiddenStateExtentArchive.hidden_state_extent_uid:type_name -> TSP.UUID
	170, // 288: TST.HiddenStateExtentArchive.hidden_states:type_name -> TST.HiddenStateExtentArchive.RowOrColumnState
	16,  // 289: TST.HiddenStateExtentArchive.row_or_column_direction:type_name -> TST.HiddenStateExtentArchive.RowOrColumnDirection
	183, // 290: TST.HiddenStateExtentArchive.threshold_value:type_name -> TSCE.CellValueArchive
	182, // 291: TST.HiddenStateExtentArchive.collapsed_group_uids:type_name -> TSP.UUID
	185, // 292: TST.HiddenStateExtentArchive.filter_set:type_name -> TSP.Reference
	207, // 293: TST.HiddenStateExtentArchive.view_pivot_hidden_indexes:type_name -> TSCE.IndexSetArchive
	207, // 294: TST.HiddenStateExtentArchive.view_only_filtered_indexes:type_name -> TSCE.IndexSetArchive
	90,  // 295: TST.HiddenStateExtentArchive.unique_indexes:type_name -> TST.UniqueIndexArchive
	182, // 296: TST.HiddenStatesArchive.hidden_states_uid:type_name -> TSP.UUID
	91,  // 297: TST.HiddenStatesArchive.column_hidden_state_extent:type_name -> TST.HiddenStateExtentArchive
	91,  // 298: TST.HiddenStatesArchive.row_hidden_state_extent:type_name -> TST.HiddenStateExtentArchive
	182, // 299: TST.HiddenStatesOwnerArchive.owner_uid:type_name -> TSP.UUID
	92,  // 300: TST.HiddenStatesOwnerArchive.hidden_states:type_name -> TST.HiddenStatesArchive
	182, // 301: TST.ExpandCollapseStateArchive.uids_collapsed:type_name -> TSP.UUID
	182, // 302: TST.ExpandCollapseStateArchive.uids_expanded:type_name -> TSP.UUID
	2,   // 303: TST.ExpandCollapseStateArchive.dimension:type_name -> TST.TableDimensionArchive
	208, // 304: TST.TokenAttachmentArchive.super:type_name -> TSWP.UIGraphicalAttachment
	185, // 305: TST.TokenAttachmentArchive.expressionNode:type_name -> TSP.Reference
	185, // 306: TST.TSTFormulaArchive.expressionTree:type_name -> TSP.Reference
	185, // 307: TST.ExpressionNodeArchive.children:type_name -> TSP.Reference
	97,  // 308: TST.BooleanNodeArchive.super:type_name -> TST.ExpressionNodeArchive
	97,  // 309: TST.NumberNodeArchive.super:type_name -> TST.ExpressionNodeArchive
	97,  // 310: TST.StringNodeArchive.super:type_name -> TST.ExpressionNodeArchive
	97,  // 311: TST.IdentifierNodeArchive.super:type_name -> TST.ExpressionNodeArchive
	97,  // 312: TST.ArrayNodeArchive.super:type_name -> TST.ExpressionNodeArchive
	97,  // 313: TST.ListNodeArchive.super:type_name -> TST.ExpressionNodeArchive
	97,  // 314: TST.OperatorNodeArchive.super:type_name -> TST.ExpressionNodeArchive
	104, // 315: TST.PostfixOperatorNodeArchive.super:type_name -> TST.OperatorNodeArchive
	104, // 316: TST.PrefixOperatorNodeArchive.super:type_name -> TST.OperatorNodeArchive
	97,  // 317: TST.FunctionNodeArchive.super:type_name -> TST.ExpressionNodeArchive
	97,  // 318: TST.FunctionEndNodeArchive.super:type_name -> TST.ExpressionNodeArchive
	97,  // 319: TST.DateNodeArchive.super:type_name -> TST.ExpressionNodeArchive
	97,  // 320: TST.ReferenceNodeArchive.super:type_name -> TST.ExpressionNodeArchive
	209, // 321: TST.ReferenceNodeArchive.rangeReference:type_name -> TSCE.RangeReferenceArchive
	184, // 322: TST.ReferenceNodeArchive.host_cell_ref:type_name -> TSCE.CellReferenceArchive
	182, // 323: TST.ReferenceNodeArchive.table_uid:type_name -> TSP.UUID
	199, // 324: TST.ReferenceNodeArchive.range_top_left:type_name -> TSP.UUIDCoordArchive
	199, // 325: TST.ReferenceNodeArchive.range_bottom_right:type_name -> TSP.UUIDCoordArchive
	204, // 326: TST.ReferenceNodeArchive.category_ref:type_name -> TSCE.CategoryReferenceArchive
	189, // 327: TST.ReferenceNodeArchive.uid_range_rect:type_name -> TSP.UUIDRectArchive
	97,  // 328: TST.DurationNodeArchive.super:type_name -> TST.ExpressionNodeArchive
	97,  // 329: TST.ArgumentPlaceholderNodeArchive.super:type_name -> TST.ExpressionNodeArchive
	97,  // 330: TST.EmptyExpressionNodeArchive.super:type_name -> TST.ExpressionNodeArchive
	97,  // 331: TST.LetNodeArchive.super:type_name -> TST.ExpressionNodeArchive
	97,  // 332: TST.InNodeArchive.super:type_name -> TST.ExpressionNodeArchive
	97,  // 333: TST.VariableNodeArchive.super:type_name -> TST.ExpressionNodeArchive
	23,  // 334: TST.LayoutHintArchive.cellRange:type_name -> TST.CellRange
	18,  // 335: TST.LayoutHintArchive.hintID:type_name -> TST.CellID
	210, // 336: TST.LayoutHintArchive.maximumSize:type_name -> TSP.Size
	210, // 337: TST.LayoutHintArchive.effectiveSize:type_name -> TSP.Size
	95,  // 338: TST.CompletionTokenAttachmentArchive.super:type_name -> TST.TokenAttachmentArchive
	191, // 339: TST.HiddenStateFormulaOwnerArchive.owner_id:type_name -> TSP.CFUUIDArchive
	183, // 340: TST.HiddenStateFormulaOwnerArchive.threshold_value:type_name -> TSCE.CellValueArchive
	171, // 341: TST.FormulaStoreArchive.formulas:type_name -> TST.FormulaStoreArchive.FormulaStorePair
	5,   // 342: TST.MergeOperationArchive.merge_type:type_name -> TST.MergeActionArchive
	189, // 343: TST.MergeOperationArchive.merge_ranges:type_name -> TSP.UUIDRectArchive
	195, // 344: TST.MergeOperationArchive.merge_formulas:type_name -> TSCE.FormulaArchive
	191, // 345: TST.MergeOwnerArchive.owner_id:type_name -> TSP.CFUUIDArchive
	120, // 346: TST.MergeOwnerArchive.formula_store:type_name -> TST.FormulaStoreArchive
	185, // 347: TST.TSTPencilAnnotationArchive.table_info:type_name -> TSP.Reference
	185, // 348: TST.TSTPencilAnnotationArchive.pencil_annotation_storage:type_name -> TSP.Reference
	191, // 349: TST.PencilAnnotationOwnerArchive.owner_id:type_name -> TSP.CFUUIDArchive
	120, // 350: TST.PencilAnnotationOwnerArchive.formula_store:type_name -> TST.FormulaStoreArchive
	185, // 351: TST.PencilAnnotationOwnerArchive.annotations:type_name -> TSP.Reference
	183, // 352: TST.AccumulatorArchive.min_value:type_name -> TSCE.CellValueArchive
	183, // 353: TST.AccumulatorArchive.max_value:type_name -> TSCE.CellValueArchive
	183, // 354: TST.AccumulatorArchive.number_total_value:type_name -> TSCE.CellValueArchive
	183, // 355: TST.AccumulatorArchive.first_date_seen:type_name -> TSCE.CellValueArchive
	183, // 356: TST.AccumulatorArchive.product_value:type_name -> TSCE.CellValueArchive
	182, // 357: TST.GroupColumnArchive.column_uid:type_name -> TSP.UUID
	211, // 358: TST.GroupColumnArchive.grouping_functor:type_name -> TSCE.FunctorArchive
	182, // 359: TST.GroupColumnArchive.grouping_column_uid:type_name -> TSP.UUID
	126, // 360: TST.GroupColumnListArchive.group_column:type_name -> TST.GroupColumnArchive
	182, // 361: TST.ColumnAggregateArchive.column_uid:type_name -> TSP.UUID
	182, // 362: TST.ColumnAggregateArchive.column_aggregate_uid:type_name -> TSP.UUID
	182, // 363: TST.ColumnAggregateArchive.running_total_group_column_uid:type_name -> TSP.UUID
	128, // 364: TST.ColumnAggregateListArchive.aggregates:type_name -> TST.ColumnAggregateArchive
	182, // 365: TST.GroupByArchive.group_by_uid:type_name -> TSP.UUID
	126, // 366: TST.GroupByArchive.group_column:type_name -> TST.GroupColumnArchive
	173, // 367: TST.GroupByArchive.group_node_root:type_name -> TST.GroupByArchive.GroupNodeArchive
	174, // 368: TST.GroupByArchive.aggregator:type_name -> TST.GroupByArchive.AggregatorArchive
	128, // 369: TST.GroupByArchive.column_agg_type:type_name -> TST.ColumnAggregateArchive
	180, // 370: TST.GroupByArchive.indirect_agg_type_change_formula:type_name -> TSCE.CellCoordinateArchive
	180, // 371: TST.GroupByArchive.grouping_columns_formula:type_name -> TSCE.CellCoordinateArchive
	180, // 372: TST.GroupByArchive.aggs_in_group_root_formula:type_name -> TSCE.CellCoordinateArchive
	180, // 373: TST.GroupByArchive.grouping_column_headers_formula:type_name -> TSCE.CellCoordinateArchive
	180, // 374: TST.GroupByArchive.column_order_changed_formula:type_name -> TSCE.CellCoordinateArchive
	180, // 375: TST.GroupByArchive.row_order_changed_formula:type_name -> TSCE.CellCoordinateArchive
	180, // 376: TST.GroupByArchive.row_order_changed_ignoring_recalc_formula:type_name -> TSCE.CellCoordinateArchive
	181, // 377: TST.GroupByArchive.row_uid_lookup:type_name -> TSCE.UidLookupListArchive
	180, // 378: TST.GroupByArchive.hidden_states_changed_formula:type_name -> TSCE.CellCoordinateArchive
	182, // 379: TST.CategoryOwnerArchive.owner_uid:type_name -> TSP.UUID
	130, // 380: TST.CategoryOwnerArchive.group_by:type_name -> TST.GroupByArchive
	185, // 381: TST.CategoryOwnerRefArchive.group_by:type_name -> TSP.Reference
	182, // 382: TST.PivotGroupingColumnOptionsMapArchive.uids:type_name -> TSP.UUID
	182, // 383: TST.PivotGroupingColumnOptionsMapArchive.aggregate_rule_uids:type_name -> TSP.UUID
	182, // 384: TST.PivotOwnerArchive.pivot_owner_uid:type_name -> TSP.UUID
	127, // 385: TST.PivotOwnerArchive.grouping_columns_for_rows:type_name -> TST.GroupColumnListArchive
	127, // 386: TST.PivotOwnerArchive.grouping_columns_for_columns:type_name -> TST.GroupColumnListArchive
	129, // 387: TST.PivotOwnerArchive.aggregate_columns:type_name -> TST.ColumnAggregateListArchive
	182, // 388: TST.PivotOwnerArchive.source_table_uid:type_name -> TSP.UUID
	185, // 389: TST.PivotOwnerArchive.grpg_col_options_map:type_name -> TSP.Reference
	120, // 390: TST.PivotOwnerArchive.formula_store:type_name -> TST.FormulaStoreArchive
	182, // 391: TST.PivotOwnerArchive.refresh_uid:type_name -> TSP.UUID
	182, // 392: TST.PivotOwnerArchive.row_column_rule_change_uid:type_name -> TSP.UUID
	182, // 393: TST.PivotOwnerArchive.aggregate_rule_change_uid:type_name -> TSP.UUID
	185, // 394: TST.RichTextPayloadArchive.storage:type_name -> TSP.Reference
	186, // 395: TST.RichTextPayloadArchive.range:type_name -> TSP.Range
	18,  // 396: TST.RichTextPayloadArchive.cellid:type_name -> TST.CellID
	208, // 397: TST.FormulaEqualsTokenAttachmentArchive.super:type_name -> TSWP.UIGraphicalAttachment
	212, // 398: TST.CellFillStandIn.fill:type_name -> TSD.FillArchive
	213, // 399: TST.FormulaSelectionArchive.super:type_name -> TSWP.TSWPSelectionArchive
	214, // 400: TST.CellBorderArchive.top_stroke:type_name -> TSD.StrokeArchive
	214, // 401: TST.CellBorderArchive.right_stroke:type_name -> TSD.StrokeArchive
	214, // 402: TST.CellBorderArchive.bottom_stroke:type_name -> TSD.StrokeArchive
	214, // 403: TST.CellBorderArchive.left_stroke:type_name -> TSD.StrokeArchive
	185, // 404: TST.DefaultCellStylesContainerArchive.table_style_network:type_name -> TSP.Reference
	182, // 405: TST.DefaultCellStylesContainerArchive.row_uids:type_name -> TSP.UUID
	182, // 406: TST.DefaultCellStylesContainerArchive.column_uids:type_name -> TSP.UUID
	17,  // 407: TST.MultiTableRemapperArchive.mapping_purpose:type_name -> TST.MultiTableRemapperArchive.Purpose
	215, // 408: TST.MultiTableRemapperArchive.owner_uid_mapper:type_name -> TSCE.OwnerUIDMapperArchive
	216, // 409: TST.MultiTableRemapperArchive.backing_tables_for_charts:type_name -> TSP.UUIDMapArchive
	185, // 410: TST.ChangePropagationMapWrapper.style_replace_prototypes:type_name -> TSP.Reference
	185, // 411: TST.ChangePropagationMapWrapper.style_replace_replacements:type_name -> TSP.Reference
	185, // 412: TST.ChangePropagationMapWrapper.style_modify_styles:type_name -> TSP.Reference
	185, // 413: TST.ChangePropagationMapWrapper.style_modify_old_prop_maps:type_name -> TSP.Reference
	185, // 414: TST.ChangePropagationMapWrapper.style_modify_new_prop_maps:type_name -> TSP.Reference
	185, // 415: TST.ChangePropagationMapWrapper.style_delete_prototypes:type_name -> TSP.Reference
	185, // 416: TST.ChangePropagationMapWrapper.style_delete_replacements:type_name -> TSP.Reference
	185, // 417: TST.ChangePropagationMapWrapper.table_preset_replace_prototype:type_name -> TSP.Reference
	185, // 418: TST.ChangePropagationMapWrapper.table_preset_replace_replacement:type_name -> TSP.Reference
	185, // 419: TST.ChangePropagationMapWrapper.table_preset_delete_prototype:type_name -> TSP.Reference
	185, // 420: TST.ChangePropagationMapWrapper.table_preset_delete_replacement:type_name -> TSP.Reference
	185, // 421: TST.SummaryCellVendorArchive.table_info:type_name -> TSP.Reference
	177, // 422: TST.SummaryCellVendorArchive.entries:type_name -> TST.SummaryCellVendorArchive.SummaryCellEntry
	185, // 423: TST.CategoryOrderArchive.table_info:type_name -> TSP.Reference
	185, // 424: TST.CategoryOrderArchive.uid_map:type_name -> TSP.Reference
	185, // 425: TST.PivotOrderArchive.uid_map:type_name -> TSP.Reference
	178, // 426: TST.HeaderNameMgrTileArchive.name_frag_entries:type_name -> TST.HeaderNameMgrTileArchive.NameFragmentArchive
	182, // 427: TST.HeaderNameMgrArchive.owner_uid:type_name -> TSP.UUID
	182, // 428: TST.HeaderNameMgrArchive.nrm_owner_uid:type_name -> TSP.UUID
	179, // 429: TST.HeaderNameMgrArchive.per_tables:type_name -> TST.HeaderNameMgrArchive.PerTableArchive
	185, // 430: TST.HeaderNameMgrArchive.name_frag_tiles:type_name -> TSP.Reference
	148, // 431: TST.WidthHeightCache.rows_fitting_entries:type_name -> TST.WidthHeightCacheFittingEntry
	149, // 432: TST.LayoutEngineArchive.width_height_cache:type_name -> TST.WidthHeightCache
	185, // 433: TST.TileStorage.Tile.tile:type_name -> TSP.Reference
	7,   // 434: TST.PopUpMenuModel.CellValue.cell_value_type:type_name -> TST.PopUpMenuModel.CellValueType
	217, // 435: TST.PopUpMenuModel.CellValue.boolean_value:type_name -> TSCE.BooleanCellValueArchive
	218, // 436: TST.PopUpMenuModel.CellValue.date_value:type_name -> TSCE.DateCellValueArchive
	219, // 437: TST.PopUpMenuModel.CellValue.number_value:type_name -> TSCE.NumberCellValueArchive
	220, // 438: TST.PopUpMenuModel.CellValue.string_value:type_name -> TSCE.StringCellValueArchive
	8,   // 439: TST.ImportWarningSetArchive.FormulaImportWarning.formula_warning_type:type_name -> TST.ImportWarningSetArchive.FormulaWarningType
	185, // 440: TST.TableDataList.ListEntry.reference:type_name -> TSP.Reference
	195, // 441: TST.TableDataList.ListEntry.formula:type_name -> TSCE.FormulaArchive
	193, // 442: TST.TableDataList.ListEntry.format:type_name -> TSK.TSKFormatStructArchive
	194, // 443: TST.TableDataList.ListEntry.custom_format:type_name -> TSK.CustomFormatArchive
	185, // 444: TST.TableDataList.ListEntry.rich_text_payload:type_name -> TSP.Reference
	185, // 445: TST.TableDataList.ListEntry.comment_storage:type_name -> TSP.Reference
	30,  // 446: TST.TableDataList.ListEntry.import_warning_set:type_name -> TST.ImportWarningSetArchive
	64,  // 447: TST.TableDataList.ListEntry.cell_spec:type_name -> TST.CellSpecArchive
	185, // 448: TST.HeaderStorageBucket.Header.cell_style:type_name -> TSP.Reference
	185, // 449: TST.HeaderStorageBucket.Header.text_style:type_name -> TSP.Reference
	182, // 450: TST.TableGroupSortOrderUIDArchive.GroupSortRuleUIDArchive.grouping_column_uid:type_name -> TSP.UUID
	182, // 451: TST.TableGroupSortOrderUIDArchive.GroupSortRuleUIDArchive.column_uid:type_name -> TSP.UUID
	10,  // 452: TST.TableGroupSortOrderUIDArchive.GroupSortRuleUIDArchive.direction:type_name -> TST.TableGroupSortOrderUIDArchive.GroupSortRuleUIDArchive.Direction
	12,  // 453: TST.TableSortOrderArchive.SortRuleArchive.direction:type_name -> TST.TableSortOrderArchive.SortRuleArchive.Direction
	182, // 454: TST.TableSortOrderUIDArchive.SortRuleArchive.column_uid:type_name -> TSP.UUID
	14,  // 455: TST.TableSortOrderUIDArchive.SortRuleArchive.direction:type_name -> TST.TableSortOrderUIDArchive.SortRuleArchive.Direction
	214, // 456: TST.StrokeLayerArchive.StrokeRunArchive.stroke:type_name -> TSD.StrokeArchive
	57,  // 457: TST.CellListArchive.OptionalCell.cell:type_name -> TST.Cell
	57,  // 458: TST.ConcurrentCellListArchive.OptionalCell.cell:type_name -> TST.Cell
	221, // 459: TST.HierarchicalCellDiffMapArchive.BoxedRow.column_index_set:type_name -> TSP.IndexSet
	66,  // 460: TST.HierarchicalCellDiffMapArchive.BoxedRow.cell_diff_list:type_name -> TST.CellDiffArchive
	18,  // 461: TST.DoubleStyleMapArchive.DoubleStyleMapEntryArchive.cell_id:type_name -> TST.CellID
	185, // 462: TST.DoubleStyleMapArchive.DoubleStyleMapEntryArchive.old_style:type_name -> TSP.Reference
	185, // 463: TST.DoubleStyleMapArchive.DoubleStyleMapEntryArchive.new_style:type_name -> TSP.Reference
	185, // 464: TST.StyleTableMapArchive.StyleTableMapEntryArchive.old_style:type_name -> TSP.Reference
	185, // 465: TST.StyleTableMapArchive.StyleTableMapEntryArchive.new_style:type_name -> TSP.Reference
	86,  // 466: TST.ConditionalStyleSetArchive.ConditionalStyleRulePrePivot.predicate:type_name -> TST.FormulaPredicatePrePivotArchive
	185, // 467: TST.ConditionalStyleSetArchive.ConditionalStyleRulePrePivot.cell_style:type_name -> TSP.Reference
	185, // 468: TST.ConditionalStyleSetArchive.ConditionalStyleRulePrePivot.text_style:type_name -> TSP.Reference
	87,  // 469: TST.ConditionalStyleSetArchive.ConditionalStyleRule.predicate:type_name -> TST.FormulaPredicateArchive
	185, // 470: TST.ConditionalStyleSetArchive.ConditionalStyleRule.cell_style:type_name -> TSP.Reference
	185, // 471: TST.ConditionalStyleSetArchive.ConditionalStyleRule.text_style:type_name -> TSP.Reference
	167, // 472: TST.ConditionalStyleSetArchive.ConditionalStyleRules.rule:type_name -> TST.ConditionalStyleSetArchive.ConditionalStyleRule
	182, // 473: TST.UniqueIndexArchive.UniqueIndexEntryArchive.row_uids:type_name -> TSP.UUID
	182, // 474: TST.HiddenStateExtentArchive.RowOrColumnState.row_or_column_uid:type_name -> TSP.UUID
	195, // 475: TST.FormulaStoreArchive.FormulaStorePair.formula:type_name -> TSCE.FormulaArchive
	180, // 476: TST.GroupByArchive.AggNodeArchive.formula_coord:type_name -> TSCE.CellCoordinateArchive
	125, // 477: TST.GroupByArchive.AggNodeArchive.accum:type_name -> TST.AccumulatorArchive
	172, // 478: TST.GroupByArchive.AggNodeArchive.child:type_name -> TST.GroupByArchive.AggNodeArchive
	182, // 479: TST.GroupByArchive.GroupNodeArchive.group_uid:type_name -> TSP.UUID
	173, // 480: TST.GroupByArchive.GroupNodeArchive.child:type_name -> TST.GroupByArchive.GroupNodeArchive
	182, // 481: TST.GroupByArchive.GroupNodeArchive.row_uid:type_name -> TSP.UUID
	180, // 482: TST.GroupByArchive.GroupNodeArchive.agg_formula_coords:type_name -> TSCE.CellCoordinateArchive
	175, // 483: TST.GroupByArchive.GroupNodeArchive.format_manager:type_name -> TST.GroupByArchive.GroupNodeArchive.FormatManagerArchive
	183, // 484: TST.GroupByArchive.GroupNodeArchive.group_cell_value:type_name -> TSCE.CellValueArchive
	207, // 485: TST.GroupByArchive.GroupNodeArchive.row_indexes:type_name -> TSCE.IndexSetArchive
	207, // 486: TST.GroupByArchive.GroupNodeArchive.row_lookup_uids:type_name -> TSCE.IndexSetArchive
	182, // 487: TST.GroupByArchive.AggregatorArchive.column_uid:type_name -> TSP.UUID
	172, // 488: TST.GroupByArchive.AggregatorArchive.agg_node:type_name -> TST.GroupByArchive.AggNodeArchive
	183, // 489: TST.GroupByArchive.GroupNodeArchive.FormatManagerArchive.cell_value:type_name -> TSCE.CellValueArchive
	193, // 490: TST.GroupByArchive.GroupNodeArchive.FormatManagerArchive.formats:type_name -> TSK.TSKFormatStructArchive
	176, // 491: TST.GroupByArchive.GroupNodeArchive.FormatManagerArchive.row_sets:type_name -> TST.GroupByArchive.GroupNodeArchive.FormatManagerArchive.RowSetArchive
	207, // 492: TST.GroupByArchive.GroupNodeArchive.FormatManagerArchive.row_uid_lookup_sets:type_name -> TSCE.IndexSetArchive
	182, // 493: TST.GroupByArchive.GroupNodeArchive.FormatManagerArchive.RowSetArchive.row_uids:type_name -> TSP.UUID
	182, // 494: TST.SummaryCellVendorArchive.SummaryCellEntry.wildcardUID:type_name -> TSP.UUID
	182, // 495: TST.SummaryCellVendorArchive.SummaryCellEntry.columnUID:type_name -> TSP.UUID
	57,  // 496: TST.SummaryCellVendorArchive.SummaryCellEntry.cell:type_name -> TST.Cell
	180, // 497: TST.HeaderNameMgrTileArchive.NameFragmentArchive.name_precedent:type_name -> TSCE.CellCoordinateArchive
	222, // 498: TST.HeaderNameMgrTileArchive.NameFragmentArchive.uses_of_name_fragment:type_name -> TSCE.UidCellRefSetArchive
	182, // 499: TST.HeaderNameMgrArchive.PerTableArchive.table_uid:type_name -> TSP.UUID
	180, // 500: TST.HeaderNameMgrArchive.PerTableArchive.per_table_precedent:type_name -> TSCE.CellCoordinateArchive
	182, // 501: TST.HeaderNameMgrArchive.PerTableArchive.header_row_uids:type_name -> TSP.UUID
	182, // 502: TST.HeaderNameMgrArchive.PerTableArchive.header_column_uids:type_name -> TSP.UUID
	182, // 503: TST.HeaderNameMgrArchive.PerTableArchive.update_header_row_uids:type_name -> TSP.UUID
	182, // 504: TST.HeaderNameMgrArchive.PerTableArchive.update_header_column_uids:type_name -> TSP.UUID
	223, // 505: TST.import_warning_set:extendee -> TSS.CommandPropertyEntryArchive
	223, // 506: TST.format_and_value:extendee -> TSS.CommandPropertyEntryArchive
	223, // 507: TST.cell_border:extendee -> TSS.CommandPropertyEntryArchive
	223, // 508: TST.comment_storage:extendee -> TSS.CommandPropertyEntryArchive
	223, // 509: TST.cell_spec:extendee -> TSS.CommandPropertyEntryArchive
	30,  // 510: TST.import_warning_set:type_name -> TST.ImportWarningSetArchive
	63,  // 511: TST.format_and_value:type_name -> TST.CellFormatAndValueArchive
	139, // 512: TST.cell_border:type_name -> TST.CellBorderArchive
	65,  // 513: TST.comment_storage:type_name -> TST.CommentStorageWrapperArchive
	64,  // 514: TST.cell_spec:type_name -> TST.CellSpecArchive
	515, // [515:515] is the sub-list for method output_type
	515, // [515:515] is the sub-list for method input_type
	510, // [510:515] is the sub-list for extension type_name
	505, // [505:510] is the sub-list for extension extendee
	0,   // [0:505] is the sub-list for field type_name
}

func init() { file_TSTArchives_proto_init() }
func file_TSTArchives_proto_init() {
	if File_TSTArchives_proto != nil {
		return
	}
	file_TSPMessages_proto_init()
	file_TSDArchives_proto_init()
	file_TSKArchives_proto_init()
	file_TSSArchives_proto_init()
	file_TSCEArchives_proto_init()
	file_TSWPArchives_proto_init()
	file_TSTStylePropertyArchiving_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_TSTArchives_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellUIDLookupListArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellUIDListArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableSize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpandedTableSize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpandedCellRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableSelection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TileRowInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TileStorage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PopUpMenuModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportWarningSetArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellRefImportWarningSetPairArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportWarningSetByCellRefArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableDataList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableDataListSegment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableRBTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeaderStorageBucket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeaderStorage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataStore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableInfoArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryInfoArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WPTableInfoArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableStyleNetworkArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableGroupSortOrderUIDArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableSortOrderArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableSortOrderUIDArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortRuleReferenceTrackerArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellRegion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellUIDRegionArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructuredTextImportRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableModelArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SummaryModelArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SummaryModelGroupByChangeStateArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnRowUIDMapArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StrokeLayerArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StrokeSidecarArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DurationWrapperArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergeRegionMapArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellMapArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellListArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConcurrentCellMapArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConcurrentCellListArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellFormatAndValueArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellSpecArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommentStorageWrapperArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellDiffArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellDiffArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellDiffArraySegment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellDiffMapArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HierarchicalCellDiffMapArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoubleStyleMapArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StyleTableMapArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectionArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeathhawkRdar39989167CellSelectionArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StrokeSelectionArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlCellSelectionArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockCellSelectionArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableNameSelectionArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutofillSelectionArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterRulePrePivotArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterRuleArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableStyleArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellStyleArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormulaPredArgDataArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormulaPredArgArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormulaPredicatePrePivotArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormulaPredicateArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionalStyleSetArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterSetArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UniqueIndexArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HiddenStateExtentArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HiddenStatesArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HiddenStatesOwnerArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpandCollapseStateArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenAttachmentArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSTFormulaArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpressionNodeArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BooleanNodeArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NumberNodeArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringNodeArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentifierNodeArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArrayNodeArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNodeArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperatorNodeArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostfixOperatorNodeArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrefixOperatorNodeArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunctionNodeArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunctionEndNodeArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DateNodeArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferenceNodeArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DurationNodeArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArgumentPlaceholderNodeArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyExpressionNodeArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LetNodeArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InNodeArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VariableNodeArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LayoutHintArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompletionTokenAttachmentArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HiddenStateFormulaOwnerArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormulaStoreArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergeOperationArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergeOwnerArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSTPencilAnnotationArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PencilAnnotationOwnerArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccumulatorArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupColumnArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupColumnListArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnAggregateArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnAggregateListArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupByArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryOwnerArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryOwnerRefArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PivotGroupingColumnOptionsMapArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PivotOwnerArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RichTextPayloadArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormulaEqualsTokenAttachmentArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellFillStandIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormulaSelectionArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellBorderArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefaultCellStylesContainerArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiTableRemapperArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangePropagationMapWrapper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SummaryCellVendorArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryOrderArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PivotOrderArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeaderNameMgrTileArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeaderNameMgrArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WidthHeightCacheFittingEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WidthHeightCache); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LayoutEngineArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TileStorage_Tile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PopUpMenuModel_CellValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportWarningSetArchive_FormulaImportWarning); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableDataList_ListEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableRBTree_Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeaderStorageBucket_Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableGroupSortOrderUIDArchive_GroupSortRuleUIDArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableSortOrderArchive_SortRuleArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableSortOrderUIDArchive_SortRuleArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StrokeLayerArchive_StrokeRunArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellListArchive_OptionalCell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConcurrentCellListArchive_OptionalCell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HierarchicalCellDiffMapArchive_BoxedRow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoubleStyleMapArchive_DoubleStyleMapEntryArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StyleTableMapArchive_StyleTableMapEntryArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionalStyleSetArchive_ConditionalStyleRulePrePivot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionalStyleSetArchive_ConditionalStyleRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionalStyleSetArchive_ConditionalStyleRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UniqueIndexArchive_UniqueIndexEntryArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HiddenStateExtentArchive_RowOrColumnState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormulaStoreArchive_FormulaStorePair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupByArchive_AggNodeArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupByArchive_GroupNodeArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupByArchive_AggregatorArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupByArchive_GroupNodeArchive_FormatManagerArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SummaryCellVendorArchive_SummaryCellEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeaderNameMgrTileArchive_NameFragmentArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTArchives_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeaderNameMgrArchive_PerTableArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_TSTArchives_proto_rawDesc,
			NumEnums:      18,
			NumMessages:   162,
			NumExtensions: 5,
			NumServices:   0,
		},
		GoTypes:           file_TSTArchives_proto_goTypes,
		DependencyIndexes: file_TSTArchives_proto_depIdxs,
		EnumInfos:         file_TSTArchives_proto_enumTypes,
		MessageInfos:      file_TSTArchives_proto_msgTypes,
		ExtensionInfos:    file_TSTArchives_proto_extTypes,
	}.Build()
	File_TSTArchives_proto = out.File
	file_TSTArchives_proto_rawDesc = nil
	file_TSTArchives_proto_goTypes = nil
	file_TSTArchives_proto_depIdxs = nil
}
