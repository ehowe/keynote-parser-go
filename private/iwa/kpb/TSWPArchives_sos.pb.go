// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: TSWPArchives_sos.proto

package kpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SpecSetCharacterStyleArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharacterStyle *Reference `protobuf:"bytes,1,opt,name=character_style,json=characterStyle" json:"character_style,omitempty"`
	Unset          *bool      `protobuf:"varint,2,req,name=unset" json:"unset,omitempty"`
}

func (x *SpecSetCharacterStyleArchive) Reset() {
	*x = SpecSetCharacterStyleArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_sos_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecSetCharacterStyleArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecSetCharacterStyleArchive) ProtoMessage() {}

func (x *SpecSetCharacterStyleArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_sos_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecSetCharacterStyleArchive.ProtoReflect.Descriptor instead.
func (*SpecSetCharacterStyleArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_sos_proto_rawDescGZIP(), []int{0}
}

func (x *SpecSetCharacterStyleArchive) GetCharacterStyle() *Reference {
	if x != nil {
		return x.CharacterStyle
	}
	return nil
}

func (x *SpecSetCharacterStyleArchive) GetUnset() bool {
	if x != nil && x.Unset != nil {
		return *x.Unset
	}
	return false
}

type SpecSetColumnsArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Columns *ColumnsArchive `protobuf:"bytes,1,opt,name=columns" json:"columns,omitempty"`
	Unset   *bool           `protobuf:"varint,2,req,name=unset" json:"unset,omitempty"`
}

func (x *SpecSetColumnsArchive) Reset() {
	*x = SpecSetColumnsArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_sos_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecSetColumnsArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecSetColumnsArchive) ProtoMessage() {}

func (x *SpecSetColumnsArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_sos_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecSetColumnsArchive.ProtoReflect.Descriptor instead.
func (*SpecSetColumnsArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_sos_proto_rawDescGZIP(), []int{1}
}

func (x *SpecSetColumnsArchive) GetColumns() *ColumnsArchive {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *SpecSetColumnsArchive) GetUnset() bool {
	if x != nil && x.Unset != nil {
		return *x.Unset
	}
	return false
}

type SpecSetDropCapArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DropCap *DropCapArchive `protobuf:"bytes,1,opt,name=drop_cap,json=dropCap" json:"drop_cap,omitempty"`
	Unset   *bool           `protobuf:"varint,2,req,name=unset" json:"unset,omitempty"`
}

func (x *SpecSetDropCapArchive) Reset() {
	*x = SpecSetDropCapArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_sos_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecSetDropCapArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecSetDropCapArchive) ProtoMessage() {}

func (x *SpecSetDropCapArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_sos_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecSetDropCapArchive.ProtoReflect.Descriptor instead.
func (*SpecSetDropCapArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_sos_proto_rawDescGZIP(), []int{2}
}

func (x *SpecSetDropCapArchive) GetDropCap() *DropCapArchive {
	if x != nil {
		return x.DropCap
	}
	return nil
}

func (x *SpecSetDropCapArchive) GetUnset() bool {
	if x != nil && x.Unset != nil {
		return *x.Unset
	}
	return false
}

type SpecSetFontFeaturesArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FontFeatures          []*FontFeatureArchive `protobuf:"bytes,1,rep,name=font_features,json=fontFeatures" json:"font_features,omitempty"`
	FontFeaturesUndefined *bool                 `protobuf:"varint,2,opt,name=font_features_undefined,json=fontFeaturesUndefined" json:"font_features_undefined,omitempty"`
	Unset                 *bool                 `protobuf:"varint,3,req,name=unset" json:"unset,omitempty"`
}

func (x *SpecSetFontFeaturesArchive) Reset() {
	*x = SpecSetFontFeaturesArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_sos_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecSetFontFeaturesArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecSetFontFeaturesArchive) ProtoMessage() {}

func (x *SpecSetFontFeaturesArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_sos_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecSetFontFeaturesArchive.ProtoReflect.Descriptor instead.
func (*SpecSetFontFeaturesArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_sos_proto_rawDescGZIP(), []int{3}
}

func (x *SpecSetFontFeaturesArchive) GetFontFeatures() []*FontFeatureArchive {
	if x != nil {
		return x.FontFeatures
	}
	return nil
}

func (x *SpecSetFontFeaturesArchive) GetFontFeaturesUndefined() bool {
	if x != nil && x.FontFeaturesUndefined != nil {
		return *x.FontFeaturesUndefined
	}
	return false
}

func (x *SpecSetFontFeaturesArchive) GetUnset() bool {
	if x != nil && x.Unset != nil {
		return *x.Unset
	}
	return false
}

type SpecSetLineSpacingArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LineSpacing *LineSpacingArchive `protobuf:"bytes,1,opt,name=line_spacing,json=lineSpacing" json:"line_spacing,omitempty"`
	Unset       *bool               `protobuf:"varint,2,req,name=unset" json:"unset,omitempty"`
}

func (x *SpecSetLineSpacingArchive) Reset() {
	*x = SpecSetLineSpacingArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_sos_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecSetLineSpacingArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecSetLineSpacingArchive) ProtoMessage() {}

func (x *SpecSetLineSpacingArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_sos_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecSetLineSpacingArchive.ProtoReflect.Descriptor instead.
func (*SpecSetLineSpacingArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_sos_proto_rawDescGZIP(), []int{4}
}

func (x *SpecSetLineSpacingArchive) GetLineSpacing() *LineSpacingArchive {
	if x != nil {
		return x.LineSpacing
	}
	return nil
}

func (x *SpecSetLineSpacingArchive) GetUnset() bool {
	if x != nil && x.Unset != nil {
		return *x.Unset
	}
	return false
}

type SpecSetListStyleArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ListStyle *Reference `protobuf:"bytes,1,opt,name=list_style,json=listStyle" json:"list_style,omitempty"`
	Unset     *bool      `protobuf:"varint,2,req,name=unset" json:"unset,omitempty"`
}

func (x *SpecSetListStyleArchive) Reset() {
	*x = SpecSetListStyleArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_sos_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecSetListStyleArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecSetListStyleArchive) ProtoMessage() {}

func (x *SpecSetListStyleArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_sos_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecSetListStyleArchive.ProtoReflect.Descriptor instead.
func (*SpecSetListStyleArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_sos_proto_rawDescGZIP(), []int{5}
}

func (x *SpecSetListStyleArchive) GetListStyle() *Reference {
	if x != nil {
		return x.ListStyle
	}
	return nil
}

func (x *SpecSetListStyleArchive) GetUnset() bool {
	if x != nil && x.Unset != nil {
		return *x.Unset
	}
	return false
}

type SpecSetListStyleBoolArrayArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ListStyleBoolArray          []bool `protobuf:"varint,1,rep,name=list_style_bool_array,json=listStyleBoolArray" json:"list_style_bool_array,omitempty"`
	ListStyleBoolArrayUndefined *bool  `protobuf:"varint,2,opt,name=list_style_bool_array_undefined,json=listStyleBoolArrayUndefined" json:"list_style_bool_array_undefined,omitempty"`
	Unset                       *bool  `protobuf:"varint,3,req,name=unset" json:"unset,omitempty"`
}

func (x *SpecSetListStyleBoolArrayArchive) Reset() {
	*x = SpecSetListStyleBoolArrayArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_sos_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecSetListStyleBoolArrayArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecSetListStyleBoolArrayArchive) ProtoMessage() {}

func (x *SpecSetListStyleBoolArrayArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_sos_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecSetListStyleBoolArrayArchive.ProtoReflect.Descriptor instead.
func (*SpecSetListStyleBoolArrayArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_sos_proto_rawDescGZIP(), []int{6}
}

func (x *SpecSetListStyleBoolArrayArchive) GetListStyleBoolArray() []bool {
	if x != nil {
		return x.ListStyleBoolArray
	}
	return nil
}

func (x *SpecSetListStyleBoolArrayArchive) GetListStyleBoolArrayUndefined() bool {
	if x != nil && x.ListStyleBoolArrayUndefined != nil {
		return *x.ListStyleBoolArrayUndefined
	}
	return false
}

func (x *SpecSetListStyleBoolArrayArchive) GetUnset() bool {
	if x != nil && x.Unset != nil {
		return *x.Unset
	}
	return false
}

type SpecSetListStyleFloatArrayArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ListStyleFloatArray          []float32 `protobuf:"fixed32,1,rep,name=list_style_float_array,json=listStyleFloatArray" json:"list_style_float_array,omitempty"`
	ListStyleFloatArrayUndefined *bool     `protobuf:"varint,2,opt,name=list_style_float_array_undefined,json=listStyleFloatArrayUndefined" json:"list_style_float_array_undefined,omitempty"`
	Unset                        *bool     `protobuf:"varint,3,req,name=unset" json:"unset,omitempty"`
}

func (x *SpecSetListStyleFloatArrayArchive) Reset() {
	*x = SpecSetListStyleFloatArrayArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_sos_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecSetListStyleFloatArrayArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecSetListStyleFloatArrayArchive) ProtoMessage() {}

func (x *SpecSetListStyleFloatArrayArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_sos_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecSetListStyleFloatArrayArchive.ProtoReflect.Descriptor instead.
func (*SpecSetListStyleFloatArrayArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_sos_proto_rawDescGZIP(), []int{7}
}

func (x *SpecSetListStyleFloatArrayArchive) GetListStyleFloatArray() []float32 {
	if x != nil {
		return x.ListStyleFloatArray
	}
	return nil
}

func (x *SpecSetListStyleFloatArrayArchive) GetListStyleFloatArrayUndefined() bool {
	if x != nil && x.ListStyleFloatArrayUndefined != nil {
		return *x.ListStyleFloatArrayUndefined
	}
	return false
}

func (x *SpecSetListStyleFloatArrayArchive) GetUnset() bool {
	if x != nil && x.Unset != nil {
		return *x.Unset
	}
	return false
}

type SpecSetListStyleImageDataArrayArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ListStyleImageDataArray          []*ListStyleArchive_LabelImage `protobuf:"bytes,1,rep,name=list_style_image_data_array,json=listStyleImageDataArray" json:"list_style_image_data_array,omitempty"`
	ListStyleImageDataArrayUndefined *bool                          `protobuf:"varint,2,opt,name=list_style_image_data_array_undefined,json=listStyleImageDataArrayUndefined" json:"list_style_image_data_array_undefined,omitempty"`
	Unset                            *bool                          `protobuf:"varint,3,req,name=unset" json:"unset,omitempty"`
}

func (x *SpecSetListStyleImageDataArrayArchive) Reset() {
	*x = SpecSetListStyleImageDataArrayArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_sos_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecSetListStyleImageDataArrayArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecSetListStyleImageDataArrayArchive) ProtoMessage() {}

func (x *SpecSetListStyleImageDataArrayArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_sos_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecSetListStyleImageDataArrayArchive.ProtoReflect.Descriptor instead.
func (*SpecSetListStyleImageDataArrayArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_sos_proto_rawDescGZIP(), []int{8}
}

func (x *SpecSetListStyleImageDataArrayArchive) GetListStyleImageDataArray() []*ListStyleArchive_LabelImage {
	if x != nil {
		return x.ListStyleImageDataArray
	}
	return nil
}

func (x *SpecSetListStyleImageDataArrayArchive) GetListStyleImageDataArrayUndefined() bool {
	if x != nil && x.ListStyleImageDataArrayUndefined != nil {
		return *x.ListStyleImageDataArrayUndefined
	}
	return false
}

func (x *SpecSetListStyleImageDataArrayArchive) GetUnset() bool {
	if x != nil && x.Unset != nil {
		return *x.Unset
	}
	return false
}

type SpecSetListStyleListLabelGeometryArrayArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ListStyleListLabelGeometryArray          []*ListStyleArchive_LabelGeometry `protobuf:"bytes,1,rep,name=list_style_list_label_geometry_array,json=listStyleListLabelGeometryArray" json:"list_style_list_label_geometry_array,omitempty"`
	ListStyleListLabelGeometryArrayUndefined *bool                             `protobuf:"varint,2,opt,name=list_style_list_label_geometry_array_undefined,json=listStyleListLabelGeometryArrayUndefined" json:"list_style_list_label_geometry_array_undefined,omitempty"`
	Unset                                    *bool                             `protobuf:"varint,3,req,name=unset" json:"unset,omitempty"`
}

func (x *SpecSetListStyleListLabelGeometryArrayArchive) Reset() {
	*x = SpecSetListStyleListLabelGeometryArrayArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_sos_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecSetListStyleListLabelGeometryArrayArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecSetListStyleListLabelGeometryArrayArchive) ProtoMessage() {}

func (x *SpecSetListStyleListLabelGeometryArrayArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_sos_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecSetListStyleListLabelGeometryArrayArchive.ProtoReflect.Descriptor instead.
func (*SpecSetListStyleListLabelGeometryArrayArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_sos_proto_rawDescGZIP(), []int{9}
}

func (x *SpecSetListStyleListLabelGeometryArrayArchive) GetListStyleListLabelGeometryArray() []*ListStyleArchive_LabelGeometry {
	if x != nil {
		return x.ListStyleListLabelGeometryArray
	}
	return nil
}

func (x *SpecSetListStyleListLabelGeometryArrayArchive) GetListStyleListLabelGeometryArrayUndefined() bool {
	if x != nil && x.ListStyleListLabelGeometryArrayUndefined != nil {
		return *x.ListStyleListLabelGeometryArrayUndefined
	}
	return false
}

func (x *SpecSetListStyleListLabelGeometryArrayArchive) GetUnset() bool {
	if x != nil && x.Unset != nil {
		return *x.Unset
	}
	return false
}

type SpecSetListStyleListLabelTypeArrayArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ListStyleListLabelTypeArray          []ListStyleArchive_LabelType `protobuf:"varint,1,rep,name=list_style_list_label_type_array,json=listStyleListLabelTypeArray,enum=TSWP.ListStyleArchive_LabelType" json:"list_style_list_label_type_array,omitempty"`
	ListStyleListLabelTypeArrayUndefined *bool                        `protobuf:"varint,2,opt,name=list_style_list_label_type_array_undefined,json=listStyleListLabelTypeArrayUndefined" json:"list_style_list_label_type_array_undefined,omitempty"`
	Unset                                *bool                        `protobuf:"varint,3,req,name=unset" json:"unset,omitempty"`
}

func (x *SpecSetListStyleListLabelTypeArrayArchive) Reset() {
	*x = SpecSetListStyleListLabelTypeArrayArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_sos_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecSetListStyleListLabelTypeArrayArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecSetListStyleListLabelTypeArrayArchive) ProtoMessage() {}

func (x *SpecSetListStyleListLabelTypeArrayArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_sos_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecSetListStyleListLabelTypeArrayArchive.ProtoReflect.Descriptor instead.
func (*SpecSetListStyleListLabelTypeArrayArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_sos_proto_rawDescGZIP(), []int{10}
}

func (x *SpecSetListStyleListLabelTypeArrayArchive) GetListStyleListLabelTypeArray() []ListStyleArchive_LabelType {
	if x != nil {
		return x.ListStyleListLabelTypeArray
	}
	return nil
}

func (x *SpecSetListStyleListLabelTypeArrayArchive) GetListStyleListLabelTypeArrayUndefined() bool {
	if x != nil && x.ListStyleListLabelTypeArrayUndefined != nil {
		return *x.ListStyleListLabelTypeArrayUndefined
	}
	return false
}

func (x *SpecSetListStyleListLabelTypeArrayArchive) GetUnset() bool {
	if x != nil && x.Unset != nil {
		return *x.Unset
	}
	return false
}

type SpecSetListStyleListNumberTypeArrayArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ListStyleListNumberTypeArray          []ListStyleArchive_NumberType `protobuf:"varint,1,rep,name=list_style_list_number_type_array,json=listStyleListNumberTypeArray,enum=TSWP.ListStyleArchive_NumberType" json:"list_style_list_number_type_array,omitempty"`
	ListStyleListNumberTypeArrayUndefined *bool                         `protobuf:"varint,2,opt,name=list_style_list_number_type_array_undefined,json=listStyleListNumberTypeArrayUndefined" json:"list_style_list_number_type_array_undefined,omitempty"`
	Unset                                 *bool                         `protobuf:"varint,3,req,name=unset" json:"unset,omitempty"`
}

func (x *SpecSetListStyleListNumberTypeArrayArchive) Reset() {
	*x = SpecSetListStyleListNumberTypeArrayArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_sos_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecSetListStyleListNumberTypeArrayArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecSetListStyleListNumberTypeArrayArchive) ProtoMessage() {}

func (x *SpecSetListStyleListNumberTypeArrayArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_sos_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecSetListStyleListNumberTypeArrayArchive.ProtoReflect.Descriptor instead.
func (*SpecSetListStyleListNumberTypeArrayArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_sos_proto_rawDescGZIP(), []int{11}
}

func (x *SpecSetListStyleListNumberTypeArrayArchive) GetListStyleListNumberTypeArray() []ListStyleArchive_NumberType {
	if x != nil {
		return x.ListStyleListNumberTypeArray
	}
	return nil
}

func (x *SpecSetListStyleListNumberTypeArrayArchive) GetListStyleListNumberTypeArrayUndefined() bool {
	if x != nil && x.ListStyleListNumberTypeArrayUndefined != nil {
		return *x.ListStyleListNumberTypeArrayUndefined
	}
	return false
}

func (x *SpecSetListStyleListNumberTypeArrayArchive) GetUnset() bool {
	if x != nil && x.Unset != nil {
		return *x.Unset
	}
	return false
}

type SpecSetListStyleStringArrayArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ListStyleStringArray          []string `protobuf:"bytes,1,rep,name=list_style_string_array,json=listStyleStringArray" json:"list_style_string_array,omitempty"`
	ListStyleStringArrayUndefined *bool    `protobuf:"varint,2,opt,name=list_style_string_array_undefined,json=listStyleStringArrayUndefined" json:"list_style_string_array_undefined,omitempty"`
	Unset                         *bool    `protobuf:"varint,3,req,name=unset" json:"unset,omitempty"`
}

func (x *SpecSetListStyleStringArrayArchive) Reset() {
	*x = SpecSetListStyleStringArrayArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_sos_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecSetListStyleStringArrayArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecSetListStyleStringArrayArchive) ProtoMessage() {}

func (x *SpecSetListStyleStringArrayArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_sos_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecSetListStyleStringArrayArchive.ProtoReflect.Descriptor instead.
func (*SpecSetListStyleStringArrayArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_sos_proto_rawDescGZIP(), []int{12}
}

func (x *SpecSetListStyleStringArrayArchive) GetListStyleStringArray() []string {
	if x != nil {
		return x.ListStyleStringArray
	}
	return nil
}

func (x *SpecSetListStyleStringArrayArchive) GetListStyleStringArrayUndefined() bool {
	if x != nil && x.ListStyleStringArrayUndefined != nil {
		return *x.ListStyleStringArrayUndefined
	}
	return false
}

func (x *SpecSetListStyleStringArrayArchive) GetUnset() bool {
	if x != nil && x.Unset != nil {
		return *x.Unset
	}
	return false
}

type SpecSetPaddingArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Padding *PaddingArchive `protobuf:"bytes,1,opt,name=padding" json:"padding,omitempty"`
	Unset   *bool           `protobuf:"varint,2,req,name=unset" json:"unset,omitempty"`
}

func (x *SpecSetPaddingArchive) Reset() {
	*x = SpecSetPaddingArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_sos_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecSetPaddingArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecSetPaddingArchive) ProtoMessage() {}

func (x *SpecSetPaddingArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_sos_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecSetPaddingArchive.ProtoReflect.Descriptor instead.
func (*SpecSetPaddingArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_sos_proto_rawDescGZIP(), []int{13}
}

func (x *SpecSetPaddingArchive) GetPadding() *PaddingArchive {
	if x != nil {
		return x.Padding
	}
	return nil
}

func (x *SpecSetPaddingArchive) GetUnset() bool {
	if x != nil && x.Unset != nil {
		return *x.Unset
	}
	return false
}

type SpecSetParagraphStyleArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParagraphStyle *Reference `protobuf:"bytes,1,opt,name=paragraph_style,json=paragraphStyle" json:"paragraph_style,omitempty"`
	Unset          *bool      `protobuf:"varint,2,req,name=unset" json:"unset,omitempty"`
}

func (x *SpecSetParagraphStyleArchive) Reset() {
	*x = SpecSetParagraphStyleArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_sos_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecSetParagraphStyleArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecSetParagraphStyleArchive) ProtoMessage() {}

func (x *SpecSetParagraphStyleArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_sos_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecSetParagraphStyleArchive.ProtoReflect.Descriptor instead.
func (*SpecSetParagraphStyleArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_sos_proto_rawDescGZIP(), []int{14}
}

func (x *SpecSetParagraphStyleArchive) GetParagraphStyle() *Reference {
	if x != nil {
		return x.ParagraphStyle
	}
	return nil
}

func (x *SpecSetParagraphStyleArchive) GetUnset() bool {
	if x != nil && x.Unset != nil {
		return *x.Unset
	}
	return false
}

type SpecSetRuleOffsetArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleOffset *Point `protobuf:"bytes,1,opt,name=rule_offset,json=ruleOffset" json:"rule_offset,omitempty"`
	Unset      *bool  `protobuf:"varint,2,req,name=unset" json:"unset,omitempty"`
}

func (x *SpecSetRuleOffsetArchive) Reset() {
	*x = SpecSetRuleOffsetArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_sos_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecSetRuleOffsetArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecSetRuleOffsetArchive) ProtoMessage() {}

func (x *SpecSetRuleOffsetArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_sos_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecSetRuleOffsetArchive.ProtoReflect.Descriptor instead.
func (*SpecSetRuleOffsetArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_sos_proto_rawDescGZIP(), []int{15}
}

func (x *SpecSetRuleOffsetArchive) GetRuleOffset() *Point {
	if x != nil {
		return x.RuleOffset
	}
	return nil
}

func (x *SpecSetRuleOffsetArchive) GetUnset() bool {
	if x != nil && x.Unset != nil {
		return *x.Unset
	}
	return false
}

type SpecSetTabsArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tabs  *TabsArchive `protobuf:"bytes,1,opt,name=tabs" json:"tabs,omitempty"`
	Unset *bool        `protobuf:"varint,2,req,name=unset" json:"unset,omitempty"`
}

func (x *SpecSetTabsArchive) Reset() {
	*x = SpecSetTabsArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_sos_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecSetTabsArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecSetTabsArchive) ProtoMessage() {}

func (x *SpecSetTabsArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_sos_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecSetTabsArchive.ProtoReflect.Descriptor instead.
func (*SpecSetTabsArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_sos_proto_rawDescGZIP(), []int{16}
}

func (x *SpecSetTabsArchive) GetTabs() *TabsArchive {
	if x != nil {
		return x.Tabs
	}
	return nil
}

func (x *SpecSetTabsArchive) GetUnset() bool {
	if x != nil && x.Unset != nil {
		return *x.Unset
	}
	return false
}

type SpecCharacterStyleArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpecSetCharacterStyle *SpecSetCharacterStyleArchive `protobuf:"bytes,1,opt,name=spec_set_character_style,json=specSetCharacterStyle" json:"spec_set_character_style,omitempty"`
}

func (x *SpecCharacterStyleArchive) Reset() {
	*x = SpecCharacterStyleArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_sos_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecCharacterStyleArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecCharacterStyleArchive) ProtoMessage() {}

func (x *SpecCharacterStyleArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_sos_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecCharacterStyleArchive.ProtoReflect.Descriptor instead.
func (*SpecCharacterStyleArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_sos_proto_rawDescGZIP(), []int{17}
}

func (x *SpecCharacterStyleArchive) GetSpecSetCharacterStyle() *SpecSetCharacterStyleArchive {
	if x != nil {
		return x.SpecSetCharacterStyle
	}
	return nil
}

type SpecColumnsArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpecSetColumns *SpecSetColumnsArchive `protobuf:"bytes,1,opt,name=spec_set_columns,json=specSetColumns" json:"spec_set_columns,omitempty"`
}

func (x *SpecColumnsArchive) Reset() {
	*x = SpecColumnsArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_sos_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecColumnsArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecColumnsArchive) ProtoMessage() {}

func (x *SpecColumnsArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_sos_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecColumnsArchive.ProtoReflect.Descriptor instead.
func (*SpecColumnsArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_sos_proto_rawDescGZIP(), []int{18}
}

func (x *SpecColumnsArchive) GetSpecSetColumns() *SpecSetColumnsArchive {
	if x != nil {
		return x.SpecSetColumns
	}
	return nil
}

type SpecDropCapArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpecSetDropCap *SpecSetDropCapArchive `protobuf:"bytes,1,opt,name=spec_set_drop_cap,json=specSetDropCap" json:"spec_set_drop_cap,omitempty"`
}

func (x *SpecDropCapArchive) Reset() {
	*x = SpecDropCapArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_sos_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecDropCapArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecDropCapArchive) ProtoMessage() {}

func (x *SpecDropCapArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_sos_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecDropCapArchive.ProtoReflect.Descriptor instead.
func (*SpecDropCapArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_sos_proto_rawDescGZIP(), []int{19}
}

func (x *SpecDropCapArchive) GetSpecSetDropCap() *SpecSetDropCapArchive {
	if x != nil {
		return x.SpecSetDropCap
	}
	return nil
}

type SpecFontFeaturesArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpecSetFontFeatures *SpecSetFontFeaturesArchive `protobuf:"bytes,1,opt,name=spec_set_font_features,json=specSetFontFeatures" json:"spec_set_font_features,omitempty"`
}

func (x *SpecFontFeaturesArchive) Reset() {
	*x = SpecFontFeaturesArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_sos_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecFontFeaturesArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecFontFeaturesArchive) ProtoMessage() {}

func (x *SpecFontFeaturesArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_sos_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecFontFeaturesArchive.ProtoReflect.Descriptor instead.
func (*SpecFontFeaturesArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_sos_proto_rawDescGZIP(), []int{20}
}

func (x *SpecFontFeaturesArchive) GetSpecSetFontFeatures() *SpecSetFontFeaturesArchive {
	if x != nil {
		return x.SpecSetFontFeatures
	}
	return nil
}

type SpecLineSpacingArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpecSetLineSpacing *SpecSetLineSpacingArchive `protobuf:"bytes,1,opt,name=spec_set_line_spacing,json=specSetLineSpacing" json:"spec_set_line_spacing,omitempty"`
}

func (x *SpecLineSpacingArchive) Reset() {
	*x = SpecLineSpacingArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_sos_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecLineSpacingArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecLineSpacingArchive) ProtoMessage() {}

func (x *SpecLineSpacingArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_sos_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecLineSpacingArchive.ProtoReflect.Descriptor instead.
func (*SpecLineSpacingArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_sos_proto_rawDescGZIP(), []int{21}
}

func (x *SpecLineSpacingArchive) GetSpecSetLineSpacing() *SpecSetLineSpacingArchive {
	if x != nil {
		return x.SpecSetLineSpacing
	}
	return nil
}

type SpecListStyleArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpecSetListStyle *SpecSetListStyleArchive `protobuf:"bytes,1,opt,name=spec_set_list_style,json=specSetListStyle" json:"spec_set_list_style,omitempty"`
}

func (x *SpecListStyleArchive) Reset() {
	*x = SpecListStyleArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_sos_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecListStyleArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecListStyleArchive) ProtoMessage() {}

func (x *SpecListStyleArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_sos_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecListStyleArchive.ProtoReflect.Descriptor instead.
func (*SpecListStyleArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_sos_proto_rawDescGZIP(), []int{22}
}

func (x *SpecListStyleArchive) GetSpecSetListStyle() *SpecSetListStyleArchive {
	if x != nil {
		return x.SpecSetListStyle
	}
	return nil
}

type SpecListStyleBoolArrayArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpecSetListStyleBoolArray *SpecSetListStyleBoolArrayArchive `protobuf:"bytes,1,opt,name=spec_set_list_style_bool_array,json=specSetListStyleBoolArray" json:"spec_set_list_style_bool_array,omitempty"`
}

func (x *SpecListStyleBoolArrayArchive) Reset() {
	*x = SpecListStyleBoolArrayArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_sos_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecListStyleBoolArrayArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecListStyleBoolArrayArchive) ProtoMessage() {}

func (x *SpecListStyleBoolArrayArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_sos_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecListStyleBoolArrayArchive.ProtoReflect.Descriptor instead.
func (*SpecListStyleBoolArrayArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_sos_proto_rawDescGZIP(), []int{23}
}

func (x *SpecListStyleBoolArrayArchive) GetSpecSetListStyleBoolArray() *SpecSetListStyleBoolArrayArchive {
	if x != nil {
		return x.SpecSetListStyleBoolArray
	}
	return nil
}

type SpecListStyleFloatArrayArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpecSetListStyleFloatArray *SpecSetListStyleFloatArrayArchive `protobuf:"bytes,1,opt,name=spec_set_list_style_float_array,json=specSetListStyleFloatArray" json:"spec_set_list_style_float_array,omitempty"`
}

func (x *SpecListStyleFloatArrayArchive) Reset() {
	*x = SpecListStyleFloatArrayArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_sos_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecListStyleFloatArrayArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecListStyleFloatArrayArchive) ProtoMessage() {}

func (x *SpecListStyleFloatArrayArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_sos_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecListStyleFloatArrayArchive.ProtoReflect.Descriptor instead.
func (*SpecListStyleFloatArrayArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_sos_proto_rawDescGZIP(), []int{24}
}

func (x *SpecListStyleFloatArrayArchive) GetSpecSetListStyleFloatArray() *SpecSetListStyleFloatArrayArchive {
	if x != nil {
		return x.SpecSetListStyleFloatArray
	}
	return nil
}

type SpecListStyleImageDataArrayArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpecSetListStyleImageDataArray *SpecSetListStyleImageDataArrayArchive `protobuf:"bytes,1,opt,name=spec_set_list_style_image_data_array,json=specSetListStyleImageDataArray" json:"spec_set_list_style_image_data_array,omitempty"`
}

func (x *SpecListStyleImageDataArrayArchive) Reset() {
	*x = SpecListStyleImageDataArrayArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_sos_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecListStyleImageDataArrayArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecListStyleImageDataArrayArchive) ProtoMessage() {}

func (x *SpecListStyleImageDataArrayArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_sos_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecListStyleImageDataArrayArchive.ProtoReflect.Descriptor instead.
func (*SpecListStyleImageDataArrayArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_sos_proto_rawDescGZIP(), []int{25}
}

func (x *SpecListStyleImageDataArrayArchive) GetSpecSetListStyleImageDataArray() *SpecSetListStyleImageDataArrayArchive {
	if x != nil {
		return x.SpecSetListStyleImageDataArray
	}
	return nil
}

type SpecListStyleListLabelGeometryArrayArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpecSetListStyleListLabelGeometryArray *SpecSetListStyleListLabelGeometryArrayArchive `protobuf:"bytes,1,opt,name=spec_set_list_style_list_label_geometry_array,json=specSetListStyleListLabelGeometryArray" json:"spec_set_list_style_list_label_geometry_array,omitempty"`
}

func (x *SpecListStyleListLabelGeometryArrayArchive) Reset() {
	*x = SpecListStyleListLabelGeometryArrayArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_sos_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecListStyleListLabelGeometryArrayArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecListStyleListLabelGeometryArrayArchive) ProtoMessage() {}

func (x *SpecListStyleListLabelGeometryArrayArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_sos_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecListStyleListLabelGeometryArrayArchive.ProtoReflect.Descriptor instead.
func (*SpecListStyleListLabelGeometryArrayArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_sos_proto_rawDescGZIP(), []int{26}
}

func (x *SpecListStyleListLabelGeometryArrayArchive) GetSpecSetListStyleListLabelGeometryArray() *SpecSetListStyleListLabelGeometryArrayArchive {
	if x != nil {
		return x.SpecSetListStyleListLabelGeometryArray
	}
	return nil
}

type SpecListStyleListLabelTypeArrayArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpecSetListStyleListLabelTypeArray *SpecSetListStyleListLabelTypeArrayArchive `protobuf:"bytes,1,opt,name=spec_set_list_style_list_label_type_array,json=specSetListStyleListLabelTypeArray" json:"spec_set_list_style_list_label_type_array,omitempty"`
}

func (x *SpecListStyleListLabelTypeArrayArchive) Reset() {
	*x = SpecListStyleListLabelTypeArrayArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_sos_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecListStyleListLabelTypeArrayArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecListStyleListLabelTypeArrayArchive) ProtoMessage() {}

func (x *SpecListStyleListLabelTypeArrayArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_sos_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecListStyleListLabelTypeArrayArchive.ProtoReflect.Descriptor instead.
func (*SpecListStyleListLabelTypeArrayArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_sos_proto_rawDescGZIP(), []int{27}
}

func (x *SpecListStyleListLabelTypeArrayArchive) GetSpecSetListStyleListLabelTypeArray() *SpecSetListStyleListLabelTypeArrayArchive {
	if x != nil {
		return x.SpecSetListStyleListLabelTypeArray
	}
	return nil
}

type SpecListStyleListNumberTypeArrayArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpecSetListStyleListNumberTypeArray *SpecSetListStyleListNumberTypeArrayArchive `protobuf:"bytes,1,opt,name=spec_set_list_style_list_number_type_array,json=specSetListStyleListNumberTypeArray" json:"spec_set_list_style_list_number_type_array,omitempty"`
}

func (x *SpecListStyleListNumberTypeArrayArchive) Reset() {
	*x = SpecListStyleListNumberTypeArrayArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_sos_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecListStyleListNumberTypeArrayArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecListStyleListNumberTypeArrayArchive) ProtoMessage() {}

func (x *SpecListStyleListNumberTypeArrayArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_sos_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecListStyleListNumberTypeArrayArchive.ProtoReflect.Descriptor instead.
func (*SpecListStyleListNumberTypeArrayArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_sos_proto_rawDescGZIP(), []int{28}
}

func (x *SpecListStyleListNumberTypeArrayArchive) GetSpecSetListStyleListNumberTypeArray() *SpecSetListStyleListNumberTypeArrayArchive {
	if x != nil {
		return x.SpecSetListStyleListNumberTypeArray
	}
	return nil
}

type SpecListStyleStringArrayArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpecSetListStyleStringArray *SpecSetListStyleStringArrayArchive `protobuf:"bytes,1,opt,name=spec_set_list_style_string_array,json=specSetListStyleStringArray" json:"spec_set_list_style_string_array,omitempty"`
}

func (x *SpecListStyleStringArrayArchive) Reset() {
	*x = SpecListStyleStringArrayArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_sos_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecListStyleStringArrayArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecListStyleStringArrayArchive) ProtoMessage() {}

func (x *SpecListStyleStringArrayArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_sos_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecListStyleStringArrayArchive.ProtoReflect.Descriptor instead.
func (*SpecListStyleStringArrayArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_sos_proto_rawDescGZIP(), []int{29}
}

func (x *SpecListStyleStringArrayArchive) GetSpecSetListStyleStringArray() *SpecSetListStyleStringArrayArchive {
	if x != nil {
		return x.SpecSetListStyleStringArray
	}
	return nil
}

type SpecPaddingArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpecSetPadding *SpecSetPaddingArchive `protobuf:"bytes,1,opt,name=spec_set_padding,json=specSetPadding" json:"spec_set_padding,omitempty"`
}

func (x *SpecPaddingArchive) Reset() {
	*x = SpecPaddingArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_sos_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecPaddingArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecPaddingArchive) ProtoMessage() {}

func (x *SpecPaddingArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_sos_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecPaddingArchive.ProtoReflect.Descriptor instead.
func (*SpecPaddingArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_sos_proto_rawDescGZIP(), []int{30}
}

func (x *SpecPaddingArchive) GetSpecSetPadding() *SpecSetPaddingArchive {
	if x != nil {
		return x.SpecSetPadding
	}
	return nil
}

type SpecParagraphStyleArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpecSetParagraphStyle *SpecSetParagraphStyleArchive `protobuf:"bytes,1,opt,name=spec_set_paragraph_style,json=specSetParagraphStyle" json:"spec_set_paragraph_style,omitempty"`
}

func (x *SpecParagraphStyleArchive) Reset() {
	*x = SpecParagraphStyleArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_sos_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecParagraphStyleArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecParagraphStyleArchive) ProtoMessage() {}

func (x *SpecParagraphStyleArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_sos_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecParagraphStyleArchive.ProtoReflect.Descriptor instead.
func (*SpecParagraphStyleArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_sos_proto_rawDescGZIP(), []int{31}
}

func (x *SpecParagraphStyleArchive) GetSpecSetParagraphStyle() *SpecSetParagraphStyleArchive {
	if x != nil {
		return x.SpecSetParagraphStyle
	}
	return nil
}

type SpecRuleOffsetArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpecSetRuleOffset *SpecSetRuleOffsetArchive `protobuf:"bytes,1,opt,name=spec_set_rule_offset,json=specSetRuleOffset" json:"spec_set_rule_offset,omitempty"`
}

func (x *SpecRuleOffsetArchive) Reset() {
	*x = SpecRuleOffsetArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_sos_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecRuleOffsetArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecRuleOffsetArchive) ProtoMessage() {}

func (x *SpecRuleOffsetArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_sos_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecRuleOffsetArchive.ProtoReflect.Descriptor instead.
func (*SpecRuleOffsetArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_sos_proto_rawDescGZIP(), []int{32}
}

func (x *SpecRuleOffsetArchive) GetSpecSetRuleOffset() *SpecSetRuleOffsetArchive {
	if x != nil {
		return x.SpecSetRuleOffset
	}
	return nil
}

type SpecTabsArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpecSetTabs *SpecSetTabsArchive `protobuf:"bytes,1,opt,name=spec_set_tabs,json=specSetTabs" json:"spec_set_tabs,omitempty"`
}

func (x *SpecTabsArchive) Reset() {
	*x = SpecTabsArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_sos_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecTabsArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecTabsArchive) ProtoMessage() {}

func (x *SpecTabsArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_sos_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecTabsArchive.ProtoReflect.Descriptor instead.
func (*SpecTabsArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_sos_proto_rawDescGZIP(), []int{33}
}

func (x *SpecTabsArchive) GetSpecSetTabs() *SpecSetTabsArchive {
	if x != nil {
		return x.SpecSetTabs
	}
	return nil
}

type TSWPSOSCharacterStylePropertyChangeSetArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaselineShift                                 *SpecDoubleArchive       `protobuf:"bytes,1,opt,name=baseline_shift,json=baselineShift" json:"baseline_shift,omitempty"`
	BaselineShiftUndefined                        *bool                    `protobuf:"varint,2,opt,name=baseline_shift_undefined,json=baselineShiftUndefined" json:"baseline_shift_undefined,omitempty"`
	Capitalization                                *SpecIntegerArchive      `protobuf:"bytes,3,opt,name=capitalization" json:"capitalization,omitempty"`
	CapitalizationUndefined                       *bool                    `protobuf:"varint,4,opt,name=capitalization_undefined,json=capitalizationUndefined" json:"capitalization_undefined,omitempty"`
	CompatibilityFontName                         *SpecStringArchive       `protobuf:"bytes,5,opt,name=compatibility_font_name,json=compatibilityFontName" json:"compatibility_font_name,omitempty"`
	CompatibilityFontNameUndefined                *bool                    `protobuf:"varint,6,opt,name=compatibility_font_name_undefined,json=compatibilityFontNameUndefined" json:"compatibility_font_name_undefined,omitempty"`
	EmphasisMarks                                 *SpecStringArchive       `protobuf:"bytes,7,opt,name=emphasis_marks,json=emphasisMarks" json:"emphasis_marks,omitempty"`
	EmphasisMarksUndefined                        *bool                    `protobuf:"varint,8,opt,name=emphasis_marks_undefined,json=emphasisMarksUndefined" json:"emphasis_marks_undefined,omitempty"`
	Bold                                          *SpecBoolArchive         `protobuf:"bytes,9,opt,name=bold" json:"bold,omitempty"`
	BoldUndefined                                 *bool                    `protobuf:"varint,10,opt,name=bold_undefined,json=boldUndefined" json:"bold_undefined,omitempty"`
	Italic                                        *SpecBoolArchive         `protobuf:"bytes,11,opt,name=italic" json:"italic,omitempty"`
	ItalicUndefined                               *bool                    `protobuf:"varint,12,opt,name=italic_undefined,json=italicUndefined" json:"italic_undefined,omitempty"`
	FontFeatures                                  *SpecFontFeaturesArchive `protobuf:"bytes,13,opt,name=font_features,json=fontFeatures" json:"font_features,omitempty"`
	FontFeaturesUndefined                         *bool                    `protobuf:"varint,14,opt,name=font_features_undefined,json=fontFeaturesUndefined" json:"font_features_undefined,omitempty"`
	FontName                                      *SpecStringArchive       `protobuf:"bytes,15,opt,name=font_name,json=fontName" json:"font_name,omitempty"`
	FontNameUndefined                             *bool                    `protobuf:"varint,16,opt,name=font_name_undefined,json=fontNameUndefined" json:"font_name_undefined,omitempty"`
	FontSize                                      *SpecDoubleArchive       `protobuf:"bytes,17,opt,name=font_size,json=fontSize" json:"font_size,omitempty"`
	FontSizeUndefined                             *bool                    `protobuf:"varint,18,opt,name=font_size_undefined,json=fontSizeUndefined" json:"font_size_undefined,omitempty"`
	FontSizeDelta                                 *SpecDoubleArchive       `protobuf:"bytes,19,opt,name=font_size_delta,json=fontSizeDelta" json:"font_size_delta,omitempty"`
	FontSizeDeltaUndefined                        *bool                    `protobuf:"varint,20,opt,name=font_size_delta_undefined,json=fontSizeDeltaUndefined" json:"font_size_delta_undefined,omitempty"`
	Kerning                                       *SpecDoubleArchive       `protobuf:"bytes,21,opt,name=kerning" json:"kerning,omitempty"`
	KerningUndefined                              *bool                    `protobuf:"varint,22,opt,name=kerning_undefined,json=kerningUndefined" json:"kerning_undefined,omitempty"`
	Language                                      *SpecStringArchive       `protobuf:"bytes,23,opt,name=language" json:"language,omitempty"`
	LanguageUndefined                             *bool                    `protobuf:"varint,24,opt,name=language_undefined,json=languageUndefined" json:"language_undefined,omitempty"`
	Ligatures                                     *SpecIntegerArchive      `protobuf:"bytes,25,opt,name=ligatures" json:"ligatures,omitempty"`
	LigaturesUndefined                            *bool                    `protobuf:"varint,26,opt,name=ligatures_undefined,json=ligaturesUndefined" json:"ligatures_undefined,omitempty"`
	TextShadow                                    *SpecShadowArchive       `protobuf:"bytes,27,opt,name=text_shadow,json=textShadow" json:"text_shadow,omitempty"`
	TextShadowUndefined                           *bool                    `protobuf:"varint,28,opt,name=text_shadow_undefined,json=textShadowUndefined" json:"text_shadow_undefined,omitempty"`
	StrikethruColor                               *SpecColorArchive        `protobuf:"bytes,29,opt,name=strikethru_color,json=strikethruColor" json:"strikethru_color,omitempty"`
	StrikethruColorUndefined                      *bool                    `protobuf:"varint,30,opt,name=strikethru_color_undefined,json=strikethruColorUndefined" json:"strikethru_color_undefined,omitempty"`
	Strikethru                                    *SpecIntegerArchive      `protobuf:"bytes,31,opt,name=strikethru" json:"strikethru,omitempty"`
	StrikethruUndefined                           *bool                    `protobuf:"varint,32,opt,name=strikethru_undefined,json=strikethruUndefined" json:"strikethru_undefined,omitempty"`
	StrikethruWidth                               *SpecDoubleArchive       `protobuf:"bytes,33,opt,name=strikethru_width,json=strikethruWidth" json:"strikethru_width,omitempty"`
	StrikethruWidthUndefined                      *bool                    `protobuf:"varint,34,opt,name=strikethru_width_undefined,json=strikethruWidthUndefined" json:"strikethru_width_undefined,omitempty"`
	Superscript                                   *SpecIntegerArchive      `protobuf:"bytes,35,opt,name=superscript" json:"superscript,omitempty"`
	SuperscriptUndefined                          *bool                    `protobuf:"varint,36,opt,name=superscript_undefined,json=superscriptUndefined" json:"superscript_undefined,omitempty"`
	TextBackground                                *SpecColorArchive        `protobuf:"bytes,37,opt,name=text_background,json=textBackground" json:"text_background,omitempty"`
	TextBackgroundUndefined                       *bool                    `protobuf:"varint,38,opt,name=text_background_undefined,json=textBackgroundUndefined" json:"text_background_undefined,omitempty"`
	Tracking                                      *SpecDoubleArchive       `protobuf:"bytes,39,opt,name=tracking" json:"tracking,omitempty"`
	TrackingUndefined                             *bool                    `protobuf:"varint,40,opt,name=tracking_undefined,json=trackingUndefined" json:"tracking_undefined,omitempty"`
	UnderlineColor                                *SpecColorArchive        `protobuf:"bytes,41,opt,name=underline_color,json=underlineColor" json:"underline_color,omitempty"`
	UnderlineColorUndefined                       *bool                    `protobuf:"varint,42,opt,name=underline_color_undefined,json=underlineColorUndefined" json:"underline_color_undefined,omitempty"`
	Underline                                     *SpecIntegerArchive      `protobuf:"bytes,43,opt,name=underline" json:"underline,omitempty"`
	UnderlineUndefined                            *bool                    `protobuf:"varint,44,opt,name=underline_undefined,json=underlineUndefined" json:"underline_undefined,omitempty"`
	UnderlineWidth                                *SpecDoubleArchive       `protobuf:"bytes,45,opt,name=underline_width,json=underlineWidth" json:"underline_width,omitempty"`
	UnderlineWidthUndefined                       *bool                    `protobuf:"varint,46,opt,name=underline_width_undefined,json=underlineWidthUndefined" json:"underline_width_undefined,omitempty"`
	WordStrikethru                                *SpecBoolArchive         `protobuf:"bytes,47,opt,name=word_strikethru,json=wordStrikethru" json:"word_strikethru,omitempty"`
	WordStrikethruUndefined                       *bool                    `protobuf:"varint,48,opt,name=word_strikethru_undefined,json=wordStrikethruUndefined" json:"word_strikethru_undefined,omitempty"`
	WordUnderline                                 *SpecBoolArchive         `protobuf:"bytes,49,opt,name=word_underline,json=wordUnderline" json:"word_underline,omitempty"`
	WordUnderlineUndefined                        *bool                    `protobuf:"varint,50,opt,name=word_underline_undefined,json=wordUnderlineUndefined" json:"word_underline_undefined,omitempty"`
	WritingDirection                              *SpecIntegerArchive      `protobuf:"bytes,51,opt,name=writing_direction,json=writingDirection" json:"writing_direction,omitempty"`
	WritingDirectionUndefined                     *bool                    `protobuf:"varint,52,opt,name=writing_direction_undefined,json=writingDirectionUndefined" json:"writing_direction_undefined,omitempty"`
	IsNamedPointSize                              *SpecBoolArchive         `protobuf:"bytes,53,opt,name=is_named_point_size,json=isNamedPointSize" json:"is_named_point_size,omitempty"`
	IsNamedPointSizeUndefined                     *bool                    `protobuf:"varint,54,opt,name=is_named_point_size_undefined,json=isNamedPointSizeUndefined" json:"is_named_point_size_undefined,omitempty"`
	CapitalizationUsesLinguistics                 *SpecBoolArchive         `protobuf:"bytes,55,opt,name=capitalization_uses_linguistics,json=capitalizationUsesLinguistics" json:"capitalization_uses_linguistics,omitempty"`
	CapitalizationUsesLinguisticsUndefined        *bool                    `protobuf:"varint,56,opt,name=capitalization_uses_linguistics_undefined,json=capitalizationUsesLinguisticsUndefined" json:"capitalization_uses_linguistics_undefined,omitempty"`
	CharacterStroke                               *SpecStrokeArchive       `protobuf:"bytes,57,opt,name=character_stroke,json=characterStroke" json:"character_stroke,omitempty"`
	CharacterStrokeUndefined                      *bool                    `protobuf:"varint,58,opt,name=character_stroke_undefined,json=characterStrokeUndefined" json:"character_stroke_undefined,omitempty"`
	CharacterFill                                 *SpecFillArchive         `protobuf:"bytes,59,opt,name=character_fill,json=characterFill" json:"character_fill,omitempty"`
	CharacterFillUndefined                        *bool                    `protobuf:"varint,60,opt,name=character_fill_undefined,json=characterFillUndefined" json:"character_fill_undefined,omitempty"`
	CharacterFillShouldFillTextContainer          *SpecBoolArchive         `protobuf:"bytes,61,opt,name=character_fill_should_fill_text_container,json=characterFillShouldFillTextContainer" json:"character_fill_should_fill_text_container,omitempty"`
	CharacterFillShouldFillTextContainerUndefined *bool                    `protobuf:"varint,62,opt,name=character_fill_should_fill_text_container_undefined,json=characterFillShouldFillTextContainerUndefined" json:"character_fill_should_fill_text_container_undefined,omitempty"`
}

func (x *TSWPSOSCharacterStylePropertyChangeSetArchive) Reset() {
	*x = TSWPSOSCharacterStylePropertyChangeSetArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_sos_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSWPSOSCharacterStylePropertyChangeSetArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSWPSOSCharacterStylePropertyChangeSetArchive) ProtoMessage() {}

func (x *TSWPSOSCharacterStylePropertyChangeSetArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_sos_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSWPSOSCharacterStylePropertyChangeSetArchive.ProtoReflect.Descriptor instead.
func (*TSWPSOSCharacterStylePropertyChangeSetArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_sos_proto_rawDescGZIP(), []int{34}
}

func (x *TSWPSOSCharacterStylePropertyChangeSetArchive) GetBaselineShift() *SpecDoubleArchive {
	if x != nil {
		return x.BaselineShift
	}
	return nil
}

func (x *TSWPSOSCharacterStylePropertyChangeSetArchive) GetBaselineShiftUndefined() bool {
	if x != nil && x.BaselineShiftUndefined != nil {
		return *x.BaselineShiftUndefined
	}
	return false
}

func (x *TSWPSOSCharacterStylePropertyChangeSetArchive) GetCapitalization() *SpecIntegerArchive {
	if x != nil {
		return x.Capitalization
	}
	return nil
}

func (x *TSWPSOSCharacterStylePropertyChangeSetArchive) GetCapitalizationUndefined() bool {
	if x != nil && x.CapitalizationUndefined != nil {
		return *x.CapitalizationUndefined
	}
	return false
}

func (x *TSWPSOSCharacterStylePropertyChangeSetArchive) GetCompatibilityFontName() *SpecStringArchive {
	if x != nil {
		return x.CompatibilityFontName
	}
	return nil
}

func (x *TSWPSOSCharacterStylePropertyChangeSetArchive) GetCompatibilityFontNameUndefined() bool {
	if x != nil && x.CompatibilityFontNameUndefined != nil {
		return *x.CompatibilityFontNameUndefined
	}
	return false
}

func (x *TSWPSOSCharacterStylePropertyChangeSetArchive) GetEmphasisMarks() *SpecStringArchive {
	if x != nil {
		return x.EmphasisMarks
	}
	return nil
}

func (x *TSWPSOSCharacterStylePropertyChangeSetArchive) GetEmphasisMarksUndefined() bool {
	if x != nil && x.EmphasisMarksUndefined != nil {
		return *x.EmphasisMarksUndefined
	}
	return false
}

func (x *TSWPSOSCharacterStylePropertyChangeSetArchive) GetBold() *SpecBoolArchive {
	if x != nil {
		return x.Bold
	}
	return nil
}

func (x *TSWPSOSCharacterStylePropertyChangeSetArchive) GetBoldUndefined() bool {
	if x != nil && x.BoldUndefined != nil {
		return *x.BoldUndefined
	}
	return false
}

func (x *TSWPSOSCharacterStylePropertyChangeSetArchive) GetItalic() *SpecBoolArchive {
	if x != nil {
		return x.Italic
	}
	return nil
}

func (x *TSWPSOSCharacterStylePropertyChangeSetArchive) GetItalicUndefined() bool {
	if x != nil && x.ItalicUndefined != nil {
		return *x.ItalicUndefined
	}
	return false
}

func (x *TSWPSOSCharacterStylePropertyChangeSetArchive) GetFontFeatures() *SpecFontFeaturesArchive {
	if x != nil {
		return x.FontFeatures
	}
	return nil
}

func (x *TSWPSOSCharacterStylePropertyChangeSetArchive) GetFontFeaturesUndefined() bool {
	if x != nil && x.FontFeaturesUndefined != nil {
		return *x.FontFeaturesUndefined
	}
	return false
}

func (x *TSWPSOSCharacterStylePropertyChangeSetArchive) GetFontName() *SpecStringArchive {
	if x != nil {
		return x.FontName
	}
	return nil
}

func (x *TSWPSOSCharacterStylePropertyChangeSetArchive) GetFontNameUndefined() bool {
	if x != nil && x.FontNameUndefined != nil {
		return *x.FontNameUndefined
	}
	return false
}

func (x *TSWPSOSCharacterStylePropertyChangeSetArchive) GetFontSize() *SpecDoubleArchive {
	if x != nil {
		return x.FontSize
	}
	return nil
}

func (x *TSWPSOSCharacterStylePropertyChangeSetArchive) GetFontSizeUndefined() bool {
	if x != nil && x.FontSizeUndefined != nil {
		return *x.FontSizeUndefined
	}
	return false
}

func (x *TSWPSOSCharacterStylePropertyChangeSetArchive) GetFontSizeDelta() *SpecDoubleArchive {
	if x != nil {
		return x.FontSizeDelta
	}
	return nil
}

func (x *TSWPSOSCharacterStylePropertyChangeSetArchive) GetFontSizeDeltaUndefined() bool {
	if x != nil && x.FontSizeDeltaUndefined != nil {
		return *x.FontSizeDeltaUndefined
	}
	return false
}

func (x *TSWPSOSCharacterStylePropertyChangeSetArchive) GetKerning() *SpecDoubleArchive {
	if x != nil {
		return x.Kerning
	}
	return nil
}

func (x *TSWPSOSCharacterStylePropertyChangeSetArchive) GetKerningUndefined() bool {
	if x != nil && x.KerningUndefined != nil {
		return *x.KerningUndefined
	}
	return false
}

func (x *TSWPSOSCharacterStylePropertyChangeSetArchive) GetLanguage() *SpecStringArchive {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *TSWPSOSCharacterStylePropertyChangeSetArchive) GetLanguageUndefined() bool {
	if x != nil && x.LanguageUndefined != nil {
		return *x.LanguageUndefined
	}
	return false
}

func (x *TSWPSOSCharacterStylePropertyChangeSetArchive) GetLigatures() *SpecIntegerArchive {
	if x != nil {
		return x.Ligatures
	}
	return nil
}

func (x *TSWPSOSCharacterStylePropertyChangeSetArchive) GetLigaturesUndefined() bool {
	if x != nil && x.LigaturesUndefined != nil {
		return *x.LigaturesUndefined
	}
	return false
}

func (x *TSWPSOSCharacterStylePropertyChangeSetArchive) GetTextShadow() *SpecShadowArchive {
	if x != nil {
		return x.TextShadow
	}
	return nil
}

func (x *TSWPSOSCharacterStylePropertyChangeSetArchive) GetTextShadowUndefined() bool {
	if x != nil && x.TextShadowUndefined != nil {
		return *x.TextShadowUndefined
	}
	return false
}

func (x *TSWPSOSCharacterStylePropertyChangeSetArchive) GetStrikethruColor() *SpecColorArchive {
	if x != nil {
		return x.StrikethruColor
	}
	return nil
}

func (x *TSWPSOSCharacterStylePropertyChangeSetArchive) GetStrikethruColorUndefined() bool {
	if x != nil && x.StrikethruColorUndefined != nil {
		return *x.StrikethruColorUndefined
	}
	return false
}

func (x *TSWPSOSCharacterStylePropertyChangeSetArchive) GetStrikethru() *SpecIntegerArchive {
	if x != nil {
		return x.Strikethru
	}
	return nil
}

func (x *TSWPSOSCharacterStylePropertyChangeSetArchive) GetStrikethruUndefined() bool {
	if x != nil && x.StrikethruUndefined != nil {
		return *x.StrikethruUndefined
	}
	return false
}

func (x *TSWPSOSCharacterStylePropertyChangeSetArchive) GetStrikethruWidth() *SpecDoubleArchive {
	if x != nil {
		return x.StrikethruWidth
	}
	return nil
}

func (x *TSWPSOSCharacterStylePropertyChangeSetArchive) GetStrikethruWidthUndefined() bool {
	if x != nil && x.StrikethruWidthUndefined != nil {
		return *x.StrikethruWidthUndefined
	}
	return false
}

func (x *TSWPSOSCharacterStylePropertyChangeSetArchive) GetSuperscript() *SpecIntegerArchive {
	if x != nil {
		return x.Superscript
	}
	return nil
}

func (x *TSWPSOSCharacterStylePropertyChangeSetArchive) GetSuperscriptUndefined() bool {
	if x != nil && x.SuperscriptUndefined != nil {
		return *x.SuperscriptUndefined
	}
	return false
}

func (x *TSWPSOSCharacterStylePropertyChangeSetArchive) GetTextBackground() *SpecColorArchive {
	if x != nil {
		return x.TextBackground
	}
	return nil
}

func (x *TSWPSOSCharacterStylePropertyChangeSetArchive) GetTextBackgroundUndefined() bool {
	if x != nil && x.TextBackgroundUndefined != nil {
		return *x.TextBackgroundUndefined
	}
	return false
}

func (x *TSWPSOSCharacterStylePropertyChangeSetArchive) GetTracking() *SpecDoubleArchive {
	if x != nil {
		return x.Tracking
	}
	return nil
}

func (x *TSWPSOSCharacterStylePropertyChangeSetArchive) GetTrackingUndefined() bool {
	if x != nil && x.TrackingUndefined != nil {
		return *x.TrackingUndefined
	}
	return false
}

func (x *TSWPSOSCharacterStylePropertyChangeSetArchive) GetUnderlineColor() *SpecColorArchive {
	if x != nil {
		return x.UnderlineColor
	}
	return nil
}

func (x *TSWPSOSCharacterStylePropertyChangeSetArchive) GetUnderlineColorUndefined() bool {
	if x != nil && x.UnderlineColorUndefined != nil {
		return *x.UnderlineColorUndefined
	}
	return false
}

func (x *TSWPSOSCharacterStylePropertyChangeSetArchive) GetUnderline() *SpecIntegerArchive {
	if x != nil {
		return x.Underline
	}
	return nil
}

func (x *TSWPSOSCharacterStylePropertyChangeSetArchive) GetUnderlineUndefined() bool {
	if x != nil && x.UnderlineUndefined != nil {
		return *x.UnderlineUndefined
	}
	return false
}

func (x *TSWPSOSCharacterStylePropertyChangeSetArchive) GetUnderlineWidth() *SpecDoubleArchive {
	if x != nil {
		return x.UnderlineWidth
	}
	return nil
}

func (x *TSWPSOSCharacterStylePropertyChangeSetArchive) GetUnderlineWidthUndefined() bool {
	if x != nil && x.UnderlineWidthUndefined != nil {
		return *x.UnderlineWidthUndefined
	}
	return false
}

func (x *TSWPSOSCharacterStylePropertyChangeSetArchive) GetWordStrikethru() *SpecBoolArchive {
	if x != nil {
		return x.WordStrikethru
	}
	return nil
}

func (x *TSWPSOSCharacterStylePropertyChangeSetArchive) GetWordStrikethruUndefined() bool {
	if x != nil && x.WordStrikethruUndefined != nil {
		return *x.WordStrikethruUndefined
	}
	return false
}

func (x *TSWPSOSCharacterStylePropertyChangeSetArchive) GetWordUnderline() *SpecBoolArchive {
	if x != nil {
		return x.WordUnderline
	}
	return nil
}

func (x *TSWPSOSCharacterStylePropertyChangeSetArchive) GetWordUnderlineUndefined() bool {
	if x != nil && x.WordUnderlineUndefined != nil {
		return *x.WordUnderlineUndefined
	}
	return false
}

func (x *TSWPSOSCharacterStylePropertyChangeSetArchive) GetWritingDirection() *SpecIntegerArchive {
	if x != nil {
		return x.WritingDirection
	}
	return nil
}

func (x *TSWPSOSCharacterStylePropertyChangeSetArchive) GetWritingDirectionUndefined() bool {
	if x != nil && x.WritingDirectionUndefined != nil {
		return *x.WritingDirectionUndefined
	}
	return false
}

func (x *TSWPSOSCharacterStylePropertyChangeSetArchive) GetIsNamedPointSize() *SpecBoolArchive {
	if x != nil {
		return x.IsNamedPointSize
	}
	return nil
}

func (x *TSWPSOSCharacterStylePropertyChangeSetArchive) GetIsNamedPointSizeUndefined() bool {
	if x != nil && x.IsNamedPointSizeUndefined != nil {
		return *x.IsNamedPointSizeUndefined
	}
	return false
}

func (x *TSWPSOSCharacterStylePropertyChangeSetArchive) GetCapitalizationUsesLinguistics() *SpecBoolArchive {
	if x != nil {
		return x.CapitalizationUsesLinguistics
	}
	return nil
}

func (x *TSWPSOSCharacterStylePropertyChangeSetArchive) GetCapitalizationUsesLinguisticsUndefined() bool {
	if x != nil && x.CapitalizationUsesLinguisticsUndefined != nil {
		return *x.CapitalizationUsesLinguisticsUndefined
	}
	return false
}

func (x *TSWPSOSCharacterStylePropertyChangeSetArchive) GetCharacterStroke() *SpecStrokeArchive {
	if x != nil {
		return x.CharacterStroke
	}
	return nil
}

func (x *TSWPSOSCharacterStylePropertyChangeSetArchive) GetCharacterStrokeUndefined() bool {
	if x != nil && x.CharacterStrokeUndefined != nil {
		return *x.CharacterStrokeUndefined
	}
	return false
}

func (x *TSWPSOSCharacterStylePropertyChangeSetArchive) GetCharacterFill() *SpecFillArchive {
	if x != nil {
		return x.CharacterFill
	}
	return nil
}

func (x *TSWPSOSCharacterStylePropertyChangeSetArchive) GetCharacterFillUndefined() bool {
	if x != nil && x.CharacterFillUndefined != nil {
		return *x.CharacterFillUndefined
	}
	return false
}

func (x *TSWPSOSCharacterStylePropertyChangeSetArchive) GetCharacterFillShouldFillTextContainer() *SpecBoolArchive {
	if x != nil {
		return x.CharacterFillShouldFillTextContainer
	}
	return nil
}

func (x *TSWPSOSCharacterStylePropertyChangeSetArchive) GetCharacterFillShouldFillTextContainerUndefined() bool {
	if x != nil && x.CharacterFillShouldFillTextContainerUndefined != nil {
		return *x.CharacterFillShouldFillTextContainerUndefined
	}
	return false
}

type ColumnStylePropertyChangeSetArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Columns                     *SpecColumnsArchive `protobuf:"bytes,1,opt,name=columns" json:"columns,omitempty"`
	ColumnsUndefined            *bool               `protobuf:"varint,2,opt,name=columns_undefined,json=columnsUndefined" json:"columns_undefined,omitempty"`
	Continuous                  *SpecBoolArchive    `protobuf:"bytes,3,opt,name=continuous" json:"continuous,omitempty"`
	ContinuousUndefined         *bool               `protobuf:"varint,4,opt,name=continuous_undefined,json=continuousUndefined" json:"continuous_undefined,omitempty"`
	Margins                     *SpecPaddingArchive `protobuf:"bytes,5,opt,name=margins" json:"margins,omitempty"`
	MarginsUndefined            *bool               `protobuf:"varint,6,opt,name=margins_undefined,json=marginsUndefined" json:"margins_undefined,omitempty"`
	MinHorizontalInset          *SpecDoubleArchive  `protobuf:"bytes,7,opt,name=min_horizontal_inset,json=minHorizontalInset" json:"min_horizontal_inset,omitempty"`
	MinHorizontalInsetUndefined *bool               `protobuf:"varint,8,opt,name=min_horizontal_inset_undefined,json=minHorizontalInsetUndefined" json:"min_horizontal_inset_undefined,omitempty"`
	Padding                     *SpecPaddingArchive `protobuf:"bytes,9,opt,name=padding" json:"padding,omitempty"`
	PaddingUndefined            *bool               `protobuf:"varint,10,opt,name=padding_undefined,json=paddingUndefined" json:"padding_undefined,omitempty"`
	ShrinkToFit                 *SpecBoolArchive    `protobuf:"bytes,11,opt,name=shrink_to_fit,json=shrinkToFit" json:"shrink_to_fit,omitempty"`
	ShrinkToFitUndefined        *bool               `protobuf:"varint,12,opt,name=shrink_to_fit_undefined,json=shrinkToFitUndefined" json:"shrink_to_fit_undefined,omitempty"`
	VerticalAlignment           *SpecIntegerArchive `protobuf:"bytes,13,opt,name=vertical_alignment,json=verticalAlignment" json:"vertical_alignment,omitempty"`
	VerticalAlignmentUndefined  *bool               `protobuf:"varint,14,opt,name=vertical_alignment_undefined,json=verticalAlignmentUndefined" json:"vertical_alignment_undefined,omitempty"`
	VerticalText                *SpecBoolArchive    `protobuf:"bytes,15,opt,name=vertical_text,json=verticalText" json:"vertical_text,omitempty"`
	VerticalTextUndefined       *bool               `protobuf:"varint,16,opt,name=vertical_text_undefined,json=verticalTextUndefined" json:"vertical_text_undefined,omitempty"`
	WritingDirection            *SpecIntegerArchive `protobuf:"bytes,17,opt,name=writing_direction,json=writingDirection" json:"writing_direction,omitempty"`
	WritingDirectionUndefined   *bool               `protobuf:"varint,18,opt,name=writing_direction_undefined,json=writingDirectionUndefined" json:"writing_direction_undefined,omitempty"`
}

func (x *ColumnStylePropertyChangeSetArchive) Reset() {
	*x = ColumnStylePropertyChangeSetArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_sos_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnStylePropertyChangeSetArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnStylePropertyChangeSetArchive) ProtoMessage() {}

func (x *ColumnStylePropertyChangeSetArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_sos_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnStylePropertyChangeSetArchive.ProtoReflect.Descriptor instead.
func (*ColumnStylePropertyChangeSetArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_sos_proto_rawDescGZIP(), []int{35}
}

func (x *ColumnStylePropertyChangeSetArchive) GetColumns() *SpecColumnsArchive {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *ColumnStylePropertyChangeSetArchive) GetColumnsUndefined() bool {
	if x != nil && x.ColumnsUndefined != nil {
		return *x.ColumnsUndefined
	}
	return false
}

func (x *ColumnStylePropertyChangeSetArchive) GetContinuous() *SpecBoolArchive {
	if x != nil {
		return x.Continuous
	}
	return nil
}

func (x *ColumnStylePropertyChangeSetArchive) GetContinuousUndefined() bool {
	if x != nil && x.ContinuousUndefined != nil {
		return *x.ContinuousUndefined
	}
	return false
}

func (x *ColumnStylePropertyChangeSetArchive) GetMargins() *SpecPaddingArchive {
	if x != nil {
		return x.Margins
	}
	return nil
}

func (x *ColumnStylePropertyChangeSetArchive) GetMarginsUndefined() bool {
	if x != nil && x.MarginsUndefined != nil {
		return *x.MarginsUndefined
	}
	return false
}

func (x *ColumnStylePropertyChangeSetArchive) GetMinHorizontalInset() *SpecDoubleArchive {
	if x != nil {
		return x.MinHorizontalInset
	}
	return nil
}

func (x *ColumnStylePropertyChangeSetArchive) GetMinHorizontalInsetUndefined() bool {
	if x != nil && x.MinHorizontalInsetUndefined != nil {
		return *x.MinHorizontalInsetUndefined
	}
	return false
}

func (x *ColumnStylePropertyChangeSetArchive) GetPadding() *SpecPaddingArchive {
	if x != nil {
		return x.Padding
	}
	return nil
}

func (x *ColumnStylePropertyChangeSetArchive) GetPaddingUndefined() bool {
	if x != nil && x.PaddingUndefined != nil {
		return *x.PaddingUndefined
	}
	return false
}

func (x *ColumnStylePropertyChangeSetArchive) GetShrinkToFit() *SpecBoolArchive {
	if x != nil {
		return x.ShrinkToFit
	}
	return nil
}

func (x *ColumnStylePropertyChangeSetArchive) GetShrinkToFitUndefined() bool {
	if x != nil && x.ShrinkToFitUndefined != nil {
		return *x.ShrinkToFitUndefined
	}
	return false
}

func (x *ColumnStylePropertyChangeSetArchive) GetVerticalAlignment() *SpecIntegerArchive {
	if x != nil {
		return x.VerticalAlignment
	}
	return nil
}

func (x *ColumnStylePropertyChangeSetArchive) GetVerticalAlignmentUndefined() bool {
	if x != nil && x.VerticalAlignmentUndefined != nil {
		return *x.VerticalAlignmentUndefined
	}
	return false
}

func (x *ColumnStylePropertyChangeSetArchive) GetVerticalText() *SpecBoolArchive {
	if x != nil {
		return x.VerticalText
	}
	return nil
}

func (x *ColumnStylePropertyChangeSetArchive) GetVerticalTextUndefined() bool {
	if x != nil && x.VerticalTextUndefined != nil {
		return *x.VerticalTextUndefined
	}
	return false
}

func (x *ColumnStylePropertyChangeSetArchive) GetWritingDirection() *SpecIntegerArchive {
	if x != nil {
		return x.WritingDirection
	}
	return nil
}

func (x *ColumnStylePropertyChangeSetArchive) GetWritingDirectionUndefined() bool {
	if x != nil && x.WritingDirectionUndefined != nil {
		return *x.WritingDirectionUndefined
	}
	return false
}

type DropCapSpecificStylePropertyChangeSetArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DropCapModel                *SpecDropCapArchive `protobuf:"bytes,1,opt,name=drop_cap_model,json=dropCapModel" json:"drop_cap_model,omitempty"`
	DropCapModelUndefined       *bool               `protobuf:"varint,2,opt,name=drop_cap_model_undefined,json=dropCapModelUndefined" json:"drop_cap_model_undefined,omitempty"`
	DropCapShapeStroke          *SpecStrokeArchive  `protobuf:"bytes,3,opt,name=drop_cap_shape_stroke,json=dropCapShapeStroke" json:"drop_cap_shape_stroke,omitempty"`
	DropCapShapeStrokeUndefined *bool               `protobuf:"varint,4,opt,name=drop_cap_shape_stroke_undefined,json=dropCapShapeStrokeUndefined" json:"drop_cap_shape_stroke_undefined,omitempty"`
	DropCapShapeFill            *SpecFillArchive    `protobuf:"bytes,5,opt,name=drop_cap_shape_fill,json=dropCapShapeFill" json:"drop_cap_shape_fill,omitempty"`
	DropCapShapeFillUndefined   *bool               `protobuf:"varint,6,opt,name=drop_cap_shape_fill_undefined,json=dropCapShapeFillUndefined" json:"drop_cap_shape_fill_undefined,omitempty"`
}

func (x *DropCapSpecificStylePropertyChangeSetArchive) Reset() {
	*x = DropCapSpecificStylePropertyChangeSetArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_sos_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropCapSpecificStylePropertyChangeSetArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropCapSpecificStylePropertyChangeSetArchive) ProtoMessage() {}

func (x *DropCapSpecificStylePropertyChangeSetArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_sos_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropCapSpecificStylePropertyChangeSetArchive.ProtoReflect.Descriptor instead.
func (*DropCapSpecificStylePropertyChangeSetArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_sos_proto_rawDescGZIP(), []int{36}
}

func (x *DropCapSpecificStylePropertyChangeSetArchive) GetDropCapModel() *SpecDropCapArchive {
	if x != nil {
		return x.DropCapModel
	}
	return nil
}

func (x *DropCapSpecificStylePropertyChangeSetArchive) GetDropCapModelUndefined() bool {
	if x != nil && x.DropCapModelUndefined != nil {
		return *x.DropCapModelUndefined
	}
	return false
}

func (x *DropCapSpecificStylePropertyChangeSetArchive) GetDropCapShapeStroke() *SpecStrokeArchive {
	if x != nil {
		return x.DropCapShapeStroke
	}
	return nil
}

func (x *DropCapSpecificStylePropertyChangeSetArchive) GetDropCapShapeStrokeUndefined() bool {
	if x != nil && x.DropCapShapeStrokeUndefined != nil {
		return *x.DropCapShapeStrokeUndefined
	}
	return false
}

func (x *DropCapSpecificStylePropertyChangeSetArchive) GetDropCapShapeFill() *SpecFillArchive {
	if x != nil {
		return x.DropCapShapeFill
	}
	return nil
}

func (x *DropCapSpecificStylePropertyChangeSetArchive) GetDropCapShapeFillUndefined() bool {
	if x != nil && x.DropCapShapeFillUndefined != nil {
		return *x.DropCapShapeFillUndefined
	}
	return false
}

type DropCapStylePropertyChangeSetArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                       *TSWPSOSCharacterStylePropertyChangeSetArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	DropCapModel                *SpecDropCapArchive                            `protobuf:"bytes,2,opt,name=drop_cap_model,json=dropCapModel" json:"drop_cap_model,omitempty"`
	DropCapModelUndefined       *bool                                          `protobuf:"varint,3,opt,name=drop_cap_model_undefined,json=dropCapModelUndefined" json:"drop_cap_model_undefined,omitempty"`
	DropCapShapeStroke          *SpecStrokeArchive                             `protobuf:"bytes,4,opt,name=drop_cap_shape_stroke,json=dropCapShapeStroke" json:"drop_cap_shape_stroke,omitempty"`
	DropCapShapeStrokeUndefined *bool                                          `protobuf:"varint,5,opt,name=drop_cap_shape_stroke_undefined,json=dropCapShapeStrokeUndefined" json:"drop_cap_shape_stroke_undefined,omitempty"`
	DropCapShapeFill            *SpecFillArchive                               `protobuf:"bytes,6,opt,name=drop_cap_shape_fill,json=dropCapShapeFill" json:"drop_cap_shape_fill,omitempty"`
	DropCapShapeFillUndefined   *bool                                          `protobuf:"varint,7,opt,name=drop_cap_shape_fill_undefined,json=dropCapShapeFillUndefined" json:"drop_cap_shape_fill_undefined,omitempty"`
}

func (x *DropCapStylePropertyChangeSetArchive) Reset() {
	*x = DropCapStylePropertyChangeSetArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_sos_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropCapStylePropertyChangeSetArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropCapStylePropertyChangeSetArchive) ProtoMessage() {}

func (x *DropCapStylePropertyChangeSetArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_sos_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropCapStylePropertyChangeSetArchive.ProtoReflect.Descriptor instead.
func (*DropCapStylePropertyChangeSetArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_sos_proto_rawDescGZIP(), []int{37}
}

func (x *DropCapStylePropertyChangeSetArchive) GetSuper() *TSWPSOSCharacterStylePropertyChangeSetArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *DropCapStylePropertyChangeSetArchive) GetDropCapModel() *SpecDropCapArchive {
	if x != nil {
		return x.DropCapModel
	}
	return nil
}

func (x *DropCapStylePropertyChangeSetArchive) GetDropCapModelUndefined() bool {
	if x != nil && x.DropCapModelUndefined != nil {
		return *x.DropCapModelUndefined
	}
	return false
}

func (x *DropCapStylePropertyChangeSetArchive) GetDropCapShapeStroke() *SpecStrokeArchive {
	if x != nil {
		return x.DropCapShapeStroke
	}
	return nil
}

func (x *DropCapStylePropertyChangeSetArchive) GetDropCapShapeStrokeUndefined() bool {
	if x != nil && x.DropCapShapeStrokeUndefined != nil {
		return *x.DropCapShapeStrokeUndefined
	}
	return false
}

func (x *DropCapStylePropertyChangeSetArchive) GetDropCapShapeFill() *SpecFillArchive {
	if x != nil {
		return x.DropCapShapeFill
	}
	return nil
}

func (x *DropCapStylePropertyChangeSetArchive) GetDropCapShapeFillUndefined() bool {
	if x != nil && x.DropCapShapeFillUndefined != nil {
		return *x.DropCapShapeFillUndefined
	}
	return false
}

type ListStylePropertyChangeSetArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ListFontColor                       *SpecColorArchive                           `protobuf:"bytes,1,opt,name=list_font_color,json=listFontColor" json:"list_font_color,omitempty"`
	ListFontColorUndefined              *bool                                       `protobuf:"varint,2,opt,name=list_font_color_undefined,json=listFontColorUndefined" json:"list_font_color_undefined,omitempty"`
	FontName                            *SpecStringArchive                          `protobuf:"bytes,3,opt,name=font_name,json=fontName" json:"font_name,omitempty"`
	FontNameUndefined                   *bool                                       `protobuf:"varint,4,opt,name=font_name_undefined,json=fontNameUndefined" json:"font_name_undefined,omitempty"`
	ListClassicTextIndentArray          *SpecListStyleFloatArrayArchive             `protobuf:"bytes,5,opt,name=list_classic_text_indent_array,json=listClassicTextIndentArray" json:"list_classic_text_indent_array,omitempty"`
	ListClassicTextIndentArrayUndefined *bool                                       `protobuf:"varint,6,opt,name=list_classic_text_indent_array_undefined,json=listClassicTextIndentArrayUndefined" json:"list_classic_text_indent_array_undefined,omitempty"`
	ListLabelGeometryArray              *SpecListStyleListLabelGeometryArrayArchive `protobuf:"bytes,7,opt,name=list_label_geometry_array,json=listLabelGeometryArray" json:"list_label_geometry_array,omitempty"`
	ListLabelGeometryArrayUndefined     *bool                                       `protobuf:"varint,8,opt,name=list_label_geometry_array_undefined,json=listLabelGeometryArrayUndefined" json:"list_label_geometry_array_undefined,omitempty"`
	ListLabelImageDataArray             *SpecListStyleImageDataArrayArchive         `protobuf:"bytes,9,opt,name=list_label_image_data_array,json=listLabelImageDataArray" json:"list_label_image_data_array,omitempty"`
	ListLabelImageDataArrayUndefined    *bool                                       `protobuf:"varint,10,opt,name=list_label_image_data_array_undefined,json=listLabelImageDataArrayUndefined" json:"list_label_image_data_array_undefined,omitempty"`
	ListLabelIndentArray                *SpecListStyleFloatArrayArchive             `protobuf:"bytes,11,opt,name=list_label_indent_array,json=listLabelIndentArray" json:"list_label_indent_array,omitempty"`
	ListLabelIndentArrayUndefined       *bool                                       `protobuf:"varint,12,opt,name=list_label_indent_array_undefined,json=listLabelIndentArrayUndefined" json:"list_label_indent_array_undefined,omitempty"`
	ListLabelNumberArray                *SpecListStyleListNumberTypeArrayArchive    `protobuf:"bytes,13,opt,name=list_label_number_array,json=listLabelNumberArray" json:"list_label_number_array,omitempty"`
	ListLabelNumberArrayUndefined       *bool                                       `protobuf:"varint,14,opt,name=list_label_number_array_undefined,json=listLabelNumberArrayUndefined" json:"list_label_number_array_undefined,omitempty"`
	ListLabelTieredNumberArray          *SpecListStyleBoolArrayArchive              `protobuf:"bytes,15,opt,name=list_label_tiered_number_array,json=listLabelTieredNumberArray" json:"list_label_tiered_number_array,omitempty"`
	ListLabelTieredNumberArrayUndefined *bool                                       `protobuf:"varint,16,opt,name=list_label_tiered_number_array_undefined,json=listLabelTieredNumberArrayUndefined" json:"list_label_tiered_number_array_undefined,omitempty"`
	TextShadow                          *SpecShadowArchive                          `protobuf:"bytes,17,opt,name=text_shadow,json=textShadow" json:"text_shadow,omitempty"`
	TextShadowUndefined                 *bool                                       `protobuf:"varint,18,opt,name=text_shadow_undefined,json=textShadowUndefined" json:"text_shadow_undefined,omitempty"`
	ListLabelStringArray                *SpecListStyleStringArrayArchive            `protobuf:"bytes,19,opt,name=list_label_string_array,json=listLabelStringArray" json:"list_label_string_array,omitempty"`
	ListLabelStringArrayUndefined       *bool                                       `protobuf:"varint,20,opt,name=list_label_string_array_undefined,json=listLabelStringArrayUndefined" json:"list_label_string_array_undefined,omitempty"`
	ListTextIndentArray                 *SpecListStyleFloatArrayArchive             `protobuf:"bytes,21,opt,name=list_text_indent_array,json=listTextIndentArray" json:"list_text_indent_array,omitempty"`
	ListTextIndentArrayUndefined        *bool                                       `protobuf:"varint,22,opt,name=list_text_indent_array_undefined,json=listTextIndentArrayUndefined" json:"list_text_indent_array_undefined,omitempty"`
	ListLabelTypeArray                  *SpecListStyleListLabelTypeArrayArchive     `protobuf:"bytes,23,opt,name=list_label_type_array,json=listLabelTypeArray" json:"list_label_type_array,omitempty"`
	ListLabelTypeArrayUndefined         *bool                                       `protobuf:"varint,24,opt,name=list_label_type_array_undefined,json=listLabelTypeArrayUndefined" json:"list_label_type_array_undefined,omitempty"`
	WritingDirection                    *SpecIntegerArchive                         `protobuf:"bytes,25,opt,name=writing_direction,json=writingDirection" json:"writing_direction,omitempty"`
	WritingDirectionUndefined           *bool                                       `protobuf:"varint,26,opt,name=writing_direction_undefined,json=writingDirectionUndefined" json:"writing_direction_undefined,omitempty"`
}

func (x *ListStylePropertyChangeSetArchive) Reset() {
	*x = ListStylePropertyChangeSetArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_sos_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStylePropertyChangeSetArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStylePropertyChangeSetArchive) ProtoMessage() {}

func (x *ListStylePropertyChangeSetArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_sos_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStylePropertyChangeSetArchive.ProtoReflect.Descriptor instead.
func (*ListStylePropertyChangeSetArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_sos_proto_rawDescGZIP(), []int{38}
}

func (x *ListStylePropertyChangeSetArchive) GetListFontColor() *SpecColorArchive {
	if x != nil {
		return x.ListFontColor
	}
	return nil
}

func (x *ListStylePropertyChangeSetArchive) GetListFontColorUndefined() bool {
	if x != nil && x.ListFontColorUndefined != nil {
		return *x.ListFontColorUndefined
	}
	return false
}

func (x *ListStylePropertyChangeSetArchive) GetFontName() *SpecStringArchive {
	if x != nil {
		return x.FontName
	}
	return nil
}

func (x *ListStylePropertyChangeSetArchive) GetFontNameUndefined() bool {
	if x != nil && x.FontNameUndefined != nil {
		return *x.FontNameUndefined
	}
	return false
}

func (x *ListStylePropertyChangeSetArchive) GetListClassicTextIndentArray() *SpecListStyleFloatArrayArchive {
	if x != nil {
		return x.ListClassicTextIndentArray
	}
	return nil
}

func (x *ListStylePropertyChangeSetArchive) GetListClassicTextIndentArrayUndefined() bool {
	if x != nil && x.ListClassicTextIndentArrayUndefined != nil {
		return *x.ListClassicTextIndentArrayUndefined
	}
	return false
}

func (x *ListStylePropertyChangeSetArchive) GetListLabelGeometryArray() *SpecListStyleListLabelGeometryArrayArchive {
	if x != nil {
		return x.ListLabelGeometryArray
	}
	return nil
}

func (x *ListStylePropertyChangeSetArchive) GetListLabelGeometryArrayUndefined() bool {
	if x != nil && x.ListLabelGeometryArrayUndefined != nil {
		return *x.ListLabelGeometryArrayUndefined
	}
	return false
}

func (x *ListStylePropertyChangeSetArchive) GetListLabelImageDataArray() *SpecListStyleImageDataArrayArchive {
	if x != nil {
		return x.ListLabelImageDataArray
	}
	return nil
}

func (x *ListStylePropertyChangeSetArchive) GetListLabelImageDataArrayUndefined() bool {
	if x != nil && x.ListLabelImageDataArrayUndefined != nil {
		return *x.ListLabelImageDataArrayUndefined
	}
	return false
}

func (x *ListStylePropertyChangeSetArchive) GetListLabelIndentArray() *SpecListStyleFloatArrayArchive {
	if x != nil {
		return x.ListLabelIndentArray
	}
	return nil
}

func (x *ListStylePropertyChangeSetArchive) GetListLabelIndentArrayUndefined() bool {
	if x != nil && x.ListLabelIndentArrayUndefined != nil {
		return *x.ListLabelIndentArrayUndefined
	}
	return false
}

func (x *ListStylePropertyChangeSetArchive) GetListLabelNumberArray() *SpecListStyleListNumberTypeArrayArchive {
	if x != nil {
		return x.ListLabelNumberArray
	}
	return nil
}

func (x *ListStylePropertyChangeSetArchive) GetListLabelNumberArrayUndefined() bool {
	if x != nil && x.ListLabelNumberArrayUndefined != nil {
		return *x.ListLabelNumberArrayUndefined
	}
	return false
}

func (x *ListStylePropertyChangeSetArchive) GetListLabelTieredNumberArray() *SpecListStyleBoolArrayArchive {
	if x != nil {
		return x.ListLabelTieredNumberArray
	}
	return nil
}

func (x *ListStylePropertyChangeSetArchive) GetListLabelTieredNumberArrayUndefined() bool {
	if x != nil && x.ListLabelTieredNumberArrayUndefined != nil {
		return *x.ListLabelTieredNumberArrayUndefined
	}
	return false
}

func (x *ListStylePropertyChangeSetArchive) GetTextShadow() *SpecShadowArchive {
	if x != nil {
		return x.TextShadow
	}
	return nil
}

func (x *ListStylePropertyChangeSetArchive) GetTextShadowUndefined() bool {
	if x != nil && x.TextShadowUndefined != nil {
		return *x.TextShadowUndefined
	}
	return false
}

func (x *ListStylePropertyChangeSetArchive) GetListLabelStringArray() *SpecListStyleStringArrayArchive {
	if x != nil {
		return x.ListLabelStringArray
	}
	return nil
}

func (x *ListStylePropertyChangeSetArchive) GetListLabelStringArrayUndefined() bool {
	if x != nil && x.ListLabelStringArrayUndefined != nil {
		return *x.ListLabelStringArrayUndefined
	}
	return false
}

func (x *ListStylePropertyChangeSetArchive) GetListTextIndentArray() *SpecListStyleFloatArrayArchive {
	if x != nil {
		return x.ListTextIndentArray
	}
	return nil
}

func (x *ListStylePropertyChangeSetArchive) GetListTextIndentArrayUndefined() bool {
	if x != nil && x.ListTextIndentArrayUndefined != nil {
		return *x.ListTextIndentArrayUndefined
	}
	return false
}

func (x *ListStylePropertyChangeSetArchive) GetListLabelTypeArray() *SpecListStyleListLabelTypeArrayArchive {
	if x != nil {
		return x.ListLabelTypeArray
	}
	return nil
}

func (x *ListStylePropertyChangeSetArchive) GetListLabelTypeArrayUndefined() bool {
	if x != nil && x.ListLabelTypeArrayUndefined != nil {
		return *x.ListLabelTypeArrayUndefined
	}
	return false
}

func (x *ListStylePropertyChangeSetArchive) GetWritingDirection() *SpecIntegerArchive {
	if x != nil {
		return x.WritingDirection
	}
	return nil
}

func (x *ListStylePropertyChangeSetArchive) GetWritingDirectionUndefined() bool {
	if x != nil && x.WritingDirectionUndefined != nil {
		return *x.WritingDirectionUndefined
	}
	return false
}

type ParagraphSpecificStylePropertyChangeSetArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alignment                        *SpecIntegerArchive        `protobuf:"bytes,1,opt,name=alignment" json:"alignment,omitempty"`
	AlignmentUndefined               *bool                      `protobuf:"varint,2,opt,name=alignment_undefined,json=alignmentUndefined" json:"alignment_undefined,omitempty"`
	DecimalTab                       *SpecStringArchive         `protobuf:"bytes,3,opt,name=decimal_tab,json=decimalTab" json:"decimal_tab,omitempty"`
	DecimalTabUndefined              *bool                      `protobuf:"varint,4,opt,name=decimal_tab_undefined,json=decimalTabUndefined" json:"decimal_tab_undefined,omitempty"`
	DefaultTabStops                  *SpecDoubleArchive         `protobuf:"bytes,5,opt,name=default_tab_stops,json=defaultTabStops" json:"default_tab_stops,omitempty"`
	DefaultTabStopsUndefined         *bool                      `protobuf:"varint,6,opt,name=default_tab_stops_undefined,json=defaultTabStopsUndefined" json:"default_tab_stops_undefined,omitempty"`
	ParagraphFill                    *SpecColorArchive          `protobuf:"bytes,7,opt,name=paragraph_fill,json=paragraphFill" json:"paragraph_fill,omitempty"`
	ParagraphFillUndefined           *bool                      `protobuf:"varint,8,opt,name=paragraph_fill_undefined,json=paragraphFillUndefined" json:"paragraph_fill_undefined,omitempty"`
	FirstLineIndent                  *SpecDoubleArchive         `protobuf:"bytes,9,opt,name=first_line_indent,json=firstLineIndent" json:"first_line_indent,omitempty"`
	FirstLineIndentUndefined         *bool                      `protobuf:"varint,10,opt,name=first_line_indent_undefined,json=firstLineIndentUndefined" json:"first_line_indent_undefined,omitempty"`
	FollowingParagraphStyle          *SpecParagraphStyleArchive `protobuf:"bytes,11,opt,name=following_paragraph_style,json=followingParagraphStyle" json:"following_paragraph_style,omitempty"`
	FollowingParagraphStyleUndefined *bool                      `protobuf:"varint,12,opt,name=following_paragraph_style_undefined,json=followingParagraphStyleUndefined" json:"following_paragraph_style_undefined,omitempty"`
	Hyphenate                        *SpecBoolArchive           `protobuf:"bytes,13,opt,name=hyphenate" json:"hyphenate,omitempty"`
	HyphenateUndefined               *bool                      `protobuf:"varint,14,opt,name=hyphenate_undefined,json=hyphenateUndefined" json:"hyphenate_undefined,omitempty"`
	InitialListStyle                 *SpecListStyleArchive      `protobuf:"bytes,15,opt,name=initial_list_style,json=initialListStyle" json:"initial_list_style,omitempty"`
	InitialListStyleUndefined        *bool                      `protobuf:"varint,16,opt,name=initial_list_style_undefined,json=initialListStyleUndefined" json:"initial_list_style_undefined,omitempty"`
	KeepLinesTogether                *SpecBoolArchive           `protobuf:"bytes,17,opt,name=keep_lines_together,json=keepLinesTogether" json:"keep_lines_together,omitempty"`
	KeepLinesTogetherUndefined       *bool                      `protobuf:"varint,18,opt,name=keep_lines_together_undefined,json=keepLinesTogetherUndefined" json:"keep_lines_together_undefined,omitempty"`
	KeepWithNext                     *SpecBoolArchive           `protobuf:"bytes,19,opt,name=keep_with_next,json=keepWithNext" json:"keep_with_next,omitempty"`
	KeepWithNextUndefined            *bool                      `protobuf:"varint,20,opt,name=keep_with_next_undefined,json=keepWithNextUndefined" json:"keep_with_next_undefined,omitempty"`
	LeftIndent                       *SpecDoubleArchive         `protobuf:"bytes,21,opt,name=left_indent,json=leftIndent" json:"left_indent,omitempty"`
	LeftIndentUndefined              *bool                      `protobuf:"varint,22,opt,name=left_indent_undefined,json=leftIndentUndefined" json:"left_indent_undefined,omitempty"`
	LineSpacing                      *SpecLineSpacingArchive    `protobuf:"bytes,23,opt,name=line_spacing,json=lineSpacing" json:"line_spacing,omitempty"`
	LineSpacingUndefined             *bool                      `protobuf:"varint,24,opt,name=line_spacing_undefined,json=lineSpacingUndefined" json:"line_spacing_undefined,omitempty"`
	OutlineLevel                     *SpecIntegerArchive        `protobuf:"bytes,25,opt,name=outline_level,json=outlineLevel" json:"outline_level,omitempty"`
	OutlineLevelUndefined            *bool                      `protobuf:"varint,26,opt,name=outline_level_undefined,json=outlineLevelUndefined" json:"outline_level_undefined,omitempty"`
	OutlineStyleType                 *SpecIntegerArchive        `protobuf:"bytes,27,opt,name=outline_style_type,json=outlineStyleType" json:"outline_style_type,omitempty"`
	OutlineStyleTypeUndefined        *bool                      `protobuf:"varint,28,opt,name=outline_style_type_undefined,json=outlineStyleTypeUndefined" json:"outline_style_type_undefined,omitempty"`
	PageBreakBefore                  *SpecBoolArchive           `protobuf:"bytes,29,opt,name=page_break_before,json=pageBreakBefore" json:"page_break_before,omitempty"`
	PageBreakBeforeUndefined         *bool                      `protobuf:"varint,30,opt,name=page_break_before_undefined,json=pageBreakBeforeUndefined" json:"page_break_before_undefined,omitempty"`
	ParagraphBorders                 *SpecIntegerArchive        `protobuf:"bytes,31,opt,name=paragraph_borders,json=paragraphBorders" json:"paragraph_borders,omitempty"`
	ParagraphBordersUndefined        *bool                      `protobuf:"varint,32,opt,name=paragraph_borders_undefined,json=paragraphBordersUndefined" json:"paragraph_borders_undefined,omitempty"`
	ParagraphRuleOffset              *SpecRuleOffsetArchive     `protobuf:"bytes,33,opt,name=paragraph_rule_offset,json=paragraphRuleOffset" json:"paragraph_rule_offset,omitempty"`
	ParagraphRuleOffsetUndefined     *bool                      `protobuf:"varint,34,opt,name=paragraph_rule_offset_undefined,json=paragraphRuleOffsetUndefined" json:"paragraph_rule_offset_undefined,omitempty"`
	ParagraphRuleWidth               *SpecDoubleArchive         `protobuf:"bytes,35,opt,name=paragraph_rule_width,json=paragraphRuleWidth" json:"paragraph_rule_width,omitempty"`
	ParagraphRuleWidthUndefined      *bool                      `protobuf:"varint,36,opt,name=paragraph_rule_width_undefined,json=paragraphRuleWidthUndefined" json:"paragraph_rule_width_undefined,omitempty"`
	RightIndent                      *SpecDoubleArchive         `protobuf:"bytes,37,opt,name=right_indent,json=rightIndent" json:"right_indent,omitempty"`
	RightIndentUndefined             *bool                      `protobuf:"varint,38,opt,name=right_indent_undefined,json=rightIndentUndefined" json:"right_indent_undefined,omitempty"`
	SpaceAfter                       *SpecDoubleArchive         `protobuf:"bytes,39,opt,name=space_after,json=spaceAfter" json:"space_after,omitempty"`
	SpaceAfterUndefined              *bool                      `protobuf:"varint,40,opt,name=space_after_undefined,json=spaceAfterUndefined" json:"space_after_undefined,omitempty"`
	SpaceBefore                      *SpecDoubleArchive         `protobuf:"bytes,41,opt,name=space_before,json=spaceBefore" json:"space_before,omitempty"`
	SpaceBeforeUndefined             *bool                      `protobuf:"varint,42,opt,name=space_before_undefined,json=spaceBeforeUndefined" json:"space_before_undefined,omitempty"`
	ParagraphStroke                  *SpecStrokeArchive         `protobuf:"bytes,43,opt,name=paragraph_stroke,json=paragraphStroke" json:"paragraph_stroke,omitempty"`
	ParagraphStrokeUndefined         *bool                      `protobuf:"varint,44,opt,name=paragraph_stroke_undefined,json=paragraphStrokeUndefined" json:"paragraph_stroke_undefined,omitempty"`
	Tabs                             *SpecTabsArchive           `protobuf:"bytes,45,opt,name=tabs" json:"tabs,omitempty"`
	TabsUndefined                    *bool                      `protobuf:"varint,46,opt,name=tabs_undefined,json=tabsUndefined" json:"tabs_undefined,omitempty"`
	WidowControl                     *SpecIntegerArchive        `protobuf:"bytes,47,opt,name=widow_control,json=widowControl" json:"widow_control,omitempty"`
	WidowControlUndefined            *bool                      `protobuf:"varint,48,opt,name=widow_control_undefined,json=widowControlUndefined" json:"widow_control_undefined,omitempty"`
	ShowInBookmarksList              *SpecBoolArchive           `protobuf:"bytes,49,opt,name=show_in_bookmarks_list,json=showInBookmarksList" json:"show_in_bookmarks_list,omitempty"`
	ShowInBookmarksListUndefined     *bool                      `protobuf:"varint,50,opt,name=show_in_bookmarks_list_undefined,json=showInBookmarksListUndefined" json:"show_in_bookmarks_list_undefined,omitempty"`
	ShowInTOCNavigator               *SpecBoolArchive           `protobuf:"bytes,51,opt,name=show_in_t_o_c_navigator,json=showInTOCNavigator" json:"show_in_t_o_c_navigator,omitempty"`
	ShowInTOCNavigatorUndefined      *bool                      `protobuf:"varint,52,opt,name=show_in_t_o_c_navigator_undefined,json=showInTOCNavigatorUndefined" json:"show_in_t_o_c_navigator_undefined,omitempty"`
}

func (x *ParagraphSpecificStylePropertyChangeSetArchive) Reset() {
	*x = ParagraphSpecificStylePropertyChangeSetArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_sos_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParagraphSpecificStylePropertyChangeSetArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParagraphSpecificStylePropertyChangeSetArchive) ProtoMessage() {}

func (x *ParagraphSpecificStylePropertyChangeSetArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_sos_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParagraphSpecificStylePropertyChangeSetArchive.ProtoReflect.Descriptor instead.
func (*ParagraphSpecificStylePropertyChangeSetArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_sos_proto_rawDescGZIP(), []int{39}
}

func (x *ParagraphSpecificStylePropertyChangeSetArchive) GetAlignment() *SpecIntegerArchive {
	if x != nil {
		return x.Alignment
	}
	return nil
}

func (x *ParagraphSpecificStylePropertyChangeSetArchive) GetAlignmentUndefined() bool {
	if x != nil && x.AlignmentUndefined != nil {
		return *x.AlignmentUndefined
	}
	return false
}

func (x *ParagraphSpecificStylePropertyChangeSetArchive) GetDecimalTab() *SpecStringArchive {
	if x != nil {
		return x.DecimalTab
	}
	return nil
}

func (x *ParagraphSpecificStylePropertyChangeSetArchive) GetDecimalTabUndefined() bool {
	if x != nil && x.DecimalTabUndefined != nil {
		return *x.DecimalTabUndefined
	}
	return false
}

func (x *ParagraphSpecificStylePropertyChangeSetArchive) GetDefaultTabStops() *SpecDoubleArchive {
	if x != nil {
		return x.DefaultTabStops
	}
	return nil
}

func (x *ParagraphSpecificStylePropertyChangeSetArchive) GetDefaultTabStopsUndefined() bool {
	if x != nil && x.DefaultTabStopsUndefined != nil {
		return *x.DefaultTabStopsUndefined
	}
	return false
}

func (x *ParagraphSpecificStylePropertyChangeSetArchive) GetParagraphFill() *SpecColorArchive {
	if x != nil {
		return x.ParagraphFill
	}
	return nil
}

func (x *ParagraphSpecificStylePropertyChangeSetArchive) GetParagraphFillUndefined() bool {
	if x != nil && x.ParagraphFillUndefined != nil {
		return *x.ParagraphFillUndefined
	}
	return false
}

func (x *ParagraphSpecificStylePropertyChangeSetArchive) GetFirstLineIndent() *SpecDoubleArchive {
	if x != nil {
		return x.FirstLineIndent
	}
	return nil
}

func (x *ParagraphSpecificStylePropertyChangeSetArchive) GetFirstLineIndentUndefined() bool {
	if x != nil && x.FirstLineIndentUndefined != nil {
		return *x.FirstLineIndentUndefined
	}
	return false
}

func (x *ParagraphSpecificStylePropertyChangeSetArchive) GetFollowingParagraphStyle() *SpecParagraphStyleArchive {
	if x != nil {
		return x.FollowingParagraphStyle
	}
	return nil
}

func (x *ParagraphSpecificStylePropertyChangeSetArchive) GetFollowingParagraphStyleUndefined() bool {
	if x != nil && x.FollowingParagraphStyleUndefined != nil {
		return *x.FollowingParagraphStyleUndefined
	}
	return false
}

func (x *ParagraphSpecificStylePropertyChangeSetArchive) GetHyphenate() *SpecBoolArchive {
	if x != nil {
		return x.Hyphenate
	}
	return nil
}

func (x *ParagraphSpecificStylePropertyChangeSetArchive) GetHyphenateUndefined() bool {
	if x != nil && x.HyphenateUndefined != nil {
		return *x.HyphenateUndefined
	}
	return false
}

func (x *ParagraphSpecificStylePropertyChangeSetArchive) GetInitialListStyle() *SpecListStyleArchive {
	if x != nil {
		return x.InitialListStyle
	}
	return nil
}

func (x *ParagraphSpecificStylePropertyChangeSetArchive) GetInitialListStyleUndefined() bool {
	if x != nil && x.InitialListStyleUndefined != nil {
		return *x.InitialListStyleUndefined
	}
	return false
}

func (x *ParagraphSpecificStylePropertyChangeSetArchive) GetKeepLinesTogether() *SpecBoolArchive {
	if x != nil {
		return x.KeepLinesTogether
	}
	return nil
}

func (x *ParagraphSpecificStylePropertyChangeSetArchive) GetKeepLinesTogetherUndefined() bool {
	if x != nil && x.KeepLinesTogetherUndefined != nil {
		return *x.KeepLinesTogetherUndefined
	}
	return false
}

func (x *ParagraphSpecificStylePropertyChangeSetArchive) GetKeepWithNext() *SpecBoolArchive {
	if x != nil {
		return x.KeepWithNext
	}
	return nil
}

func (x *ParagraphSpecificStylePropertyChangeSetArchive) GetKeepWithNextUndefined() bool {
	if x != nil && x.KeepWithNextUndefined != nil {
		return *x.KeepWithNextUndefined
	}
	return false
}

func (x *ParagraphSpecificStylePropertyChangeSetArchive) GetLeftIndent() *SpecDoubleArchive {
	if x != nil {
		return x.LeftIndent
	}
	return nil
}

func (x *ParagraphSpecificStylePropertyChangeSetArchive) GetLeftIndentUndefined() bool {
	if x != nil && x.LeftIndentUndefined != nil {
		return *x.LeftIndentUndefined
	}
	return false
}

func (x *ParagraphSpecificStylePropertyChangeSetArchive) GetLineSpacing() *SpecLineSpacingArchive {
	if x != nil {
		return x.LineSpacing
	}
	return nil
}

func (x *ParagraphSpecificStylePropertyChangeSetArchive) GetLineSpacingUndefined() bool {
	if x != nil && x.LineSpacingUndefined != nil {
		return *x.LineSpacingUndefined
	}
	return false
}

func (x *ParagraphSpecificStylePropertyChangeSetArchive) GetOutlineLevel() *SpecIntegerArchive {
	if x != nil {
		return x.OutlineLevel
	}
	return nil
}

func (x *ParagraphSpecificStylePropertyChangeSetArchive) GetOutlineLevelUndefined() bool {
	if x != nil && x.OutlineLevelUndefined != nil {
		return *x.OutlineLevelUndefined
	}
	return false
}

func (x *ParagraphSpecificStylePropertyChangeSetArchive) GetOutlineStyleType() *SpecIntegerArchive {
	if x != nil {
		return x.OutlineStyleType
	}
	return nil
}

func (x *ParagraphSpecificStylePropertyChangeSetArchive) GetOutlineStyleTypeUndefined() bool {
	if x != nil && x.OutlineStyleTypeUndefined != nil {
		return *x.OutlineStyleTypeUndefined
	}
	return false
}

func (x *ParagraphSpecificStylePropertyChangeSetArchive) GetPageBreakBefore() *SpecBoolArchive {
	if x != nil {
		return x.PageBreakBefore
	}
	return nil
}

func (x *ParagraphSpecificStylePropertyChangeSetArchive) GetPageBreakBeforeUndefined() bool {
	if x != nil && x.PageBreakBeforeUndefined != nil {
		return *x.PageBreakBeforeUndefined
	}
	return false
}

func (x *ParagraphSpecificStylePropertyChangeSetArchive) GetParagraphBorders() *SpecIntegerArchive {
	if x != nil {
		return x.ParagraphBorders
	}
	return nil
}

func (x *ParagraphSpecificStylePropertyChangeSetArchive) GetParagraphBordersUndefined() bool {
	if x != nil && x.ParagraphBordersUndefined != nil {
		return *x.ParagraphBordersUndefined
	}
	return false
}

func (x *ParagraphSpecificStylePropertyChangeSetArchive) GetParagraphRuleOffset() *SpecRuleOffsetArchive {
	if x != nil {
		return x.ParagraphRuleOffset
	}
	return nil
}

func (x *ParagraphSpecificStylePropertyChangeSetArchive) GetParagraphRuleOffsetUndefined() bool {
	if x != nil && x.ParagraphRuleOffsetUndefined != nil {
		return *x.ParagraphRuleOffsetUndefined
	}
	return false
}

func (x *ParagraphSpecificStylePropertyChangeSetArchive) GetParagraphRuleWidth() *SpecDoubleArchive {
	if x != nil {
		return x.ParagraphRuleWidth
	}
	return nil
}

func (x *ParagraphSpecificStylePropertyChangeSetArchive) GetParagraphRuleWidthUndefined() bool {
	if x != nil && x.ParagraphRuleWidthUndefined != nil {
		return *x.ParagraphRuleWidthUndefined
	}
	return false
}

func (x *ParagraphSpecificStylePropertyChangeSetArchive) GetRightIndent() *SpecDoubleArchive {
	if x != nil {
		return x.RightIndent
	}
	return nil
}

func (x *ParagraphSpecificStylePropertyChangeSetArchive) GetRightIndentUndefined() bool {
	if x != nil && x.RightIndentUndefined != nil {
		return *x.RightIndentUndefined
	}
	return false
}

func (x *ParagraphSpecificStylePropertyChangeSetArchive) GetSpaceAfter() *SpecDoubleArchive {
	if x != nil {
		return x.SpaceAfter
	}
	return nil
}

func (x *ParagraphSpecificStylePropertyChangeSetArchive) GetSpaceAfterUndefined() bool {
	if x != nil && x.SpaceAfterUndefined != nil {
		return *x.SpaceAfterUndefined
	}
	return false
}

func (x *ParagraphSpecificStylePropertyChangeSetArchive) GetSpaceBefore() *SpecDoubleArchive {
	if x != nil {
		return x.SpaceBefore
	}
	return nil
}

func (x *ParagraphSpecificStylePropertyChangeSetArchive) GetSpaceBeforeUndefined() bool {
	if x != nil && x.SpaceBeforeUndefined != nil {
		return *x.SpaceBeforeUndefined
	}
	return false
}

func (x *ParagraphSpecificStylePropertyChangeSetArchive) GetParagraphStroke() *SpecStrokeArchive {
	if x != nil {
		return x.ParagraphStroke
	}
	return nil
}

func (x *ParagraphSpecificStylePropertyChangeSetArchive) GetParagraphStrokeUndefined() bool {
	if x != nil && x.ParagraphStrokeUndefined != nil {
		return *x.ParagraphStrokeUndefined
	}
	return false
}

func (x *ParagraphSpecificStylePropertyChangeSetArchive) GetTabs() *SpecTabsArchive {
	if x != nil {
		return x.Tabs
	}
	return nil
}

func (x *ParagraphSpecificStylePropertyChangeSetArchive) GetTabsUndefined() bool {
	if x != nil && x.TabsUndefined != nil {
		return *x.TabsUndefined
	}
	return false
}

func (x *ParagraphSpecificStylePropertyChangeSetArchive) GetWidowControl() *SpecIntegerArchive {
	if x != nil {
		return x.WidowControl
	}
	return nil
}

func (x *ParagraphSpecificStylePropertyChangeSetArchive) GetWidowControlUndefined() bool {
	if x != nil && x.WidowControlUndefined != nil {
		return *x.WidowControlUndefined
	}
	return false
}

func (x *ParagraphSpecificStylePropertyChangeSetArchive) GetShowInBookmarksList() *SpecBoolArchive {
	if x != nil {
		return x.ShowInBookmarksList
	}
	return nil
}

func (x *ParagraphSpecificStylePropertyChangeSetArchive) GetShowInBookmarksListUndefined() bool {
	if x != nil && x.ShowInBookmarksListUndefined != nil {
		return *x.ShowInBookmarksListUndefined
	}
	return false
}

func (x *ParagraphSpecificStylePropertyChangeSetArchive) GetShowInTOCNavigator() *SpecBoolArchive {
	if x != nil {
		return x.ShowInTOCNavigator
	}
	return nil
}

func (x *ParagraphSpecificStylePropertyChangeSetArchive) GetShowInTOCNavigatorUndefined() bool {
	if x != nil && x.ShowInTOCNavigatorUndefined != nil {
		return *x.ShowInTOCNavigatorUndefined
	}
	return false
}

type TSWPSOSParagraphStylePropertyChangeSetArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                            *TSWPSOSCharacterStylePropertyChangeSetArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Alignment                        *SpecIntegerArchive                            `protobuf:"bytes,2,opt,name=alignment" json:"alignment,omitempty"`
	AlignmentUndefined               *bool                                          `protobuf:"varint,3,opt,name=alignment_undefined,json=alignmentUndefined" json:"alignment_undefined,omitempty"`
	DecimalTab                       *SpecStringArchive                             `protobuf:"bytes,4,opt,name=decimal_tab,json=decimalTab" json:"decimal_tab,omitempty"`
	DecimalTabUndefined              *bool                                          `protobuf:"varint,5,opt,name=decimal_tab_undefined,json=decimalTabUndefined" json:"decimal_tab_undefined,omitempty"`
	DefaultTabStops                  *SpecDoubleArchive                             `protobuf:"bytes,6,opt,name=default_tab_stops,json=defaultTabStops" json:"default_tab_stops,omitempty"`
	DefaultTabStopsUndefined         *bool                                          `protobuf:"varint,7,opt,name=default_tab_stops_undefined,json=defaultTabStopsUndefined" json:"default_tab_stops_undefined,omitempty"`
	ParagraphFill                    *SpecColorArchive                              `protobuf:"bytes,8,opt,name=paragraph_fill,json=paragraphFill" json:"paragraph_fill,omitempty"`
	ParagraphFillUndefined           *bool                                          `protobuf:"varint,9,opt,name=paragraph_fill_undefined,json=paragraphFillUndefined" json:"paragraph_fill_undefined,omitempty"`
	FirstLineIndent                  *SpecDoubleArchive                             `protobuf:"bytes,10,opt,name=first_line_indent,json=firstLineIndent" json:"first_line_indent,omitempty"`
	FirstLineIndentUndefined         *bool                                          `protobuf:"varint,11,opt,name=first_line_indent_undefined,json=firstLineIndentUndefined" json:"first_line_indent_undefined,omitempty"`
	FollowingParagraphStyle          *SpecParagraphStyleArchive                     `protobuf:"bytes,12,opt,name=following_paragraph_style,json=followingParagraphStyle" json:"following_paragraph_style,omitempty"`
	FollowingParagraphStyleUndefined *bool                                          `protobuf:"varint,13,opt,name=following_paragraph_style_undefined,json=followingParagraphStyleUndefined" json:"following_paragraph_style_undefined,omitempty"`
	Hyphenate                        *SpecBoolArchive                               `protobuf:"bytes,14,opt,name=hyphenate" json:"hyphenate,omitempty"`
	HyphenateUndefined               *bool                                          `protobuf:"varint,15,opt,name=hyphenate_undefined,json=hyphenateUndefined" json:"hyphenate_undefined,omitempty"`
	InitialListStyle                 *SpecListStyleArchive                          `protobuf:"bytes,16,opt,name=initial_list_style,json=initialListStyle" json:"initial_list_style,omitempty"`
	InitialListStyleUndefined        *bool                                          `protobuf:"varint,17,opt,name=initial_list_style_undefined,json=initialListStyleUndefined" json:"initial_list_style_undefined,omitempty"`
	KeepLinesTogether                *SpecBoolArchive                               `protobuf:"bytes,18,opt,name=keep_lines_together,json=keepLinesTogether" json:"keep_lines_together,omitempty"`
	KeepLinesTogetherUndefined       *bool                                          `protobuf:"varint,19,opt,name=keep_lines_together_undefined,json=keepLinesTogetherUndefined" json:"keep_lines_together_undefined,omitempty"`
	KeepWithNext                     *SpecBoolArchive                               `protobuf:"bytes,20,opt,name=keep_with_next,json=keepWithNext" json:"keep_with_next,omitempty"`
	KeepWithNextUndefined            *bool                                          `protobuf:"varint,21,opt,name=keep_with_next_undefined,json=keepWithNextUndefined" json:"keep_with_next_undefined,omitempty"`
	LeftIndent                       *SpecDoubleArchive                             `protobuf:"bytes,22,opt,name=left_indent,json=leftIndent" json:"left_indent,omitempty"`
	LeftIndentUndefined              *bool                                          `protobuf:"varint,23,opt,name=left_indent_undefined,json=leftIndentUndefined" json:"left_indent_undefined,omitempty"`
	LineSpacing                      *SpecLineSpacingArchive                        `protobuf:"bytes,24,opt,name=line_spacing,json=lineSpacing" json:"line_spacing,omitempty"`
	LineSpacingUndefined             *bool                                          `protobuf:"varint,25,opt,name=line_spacing_undefined,json=lineSpacingUndefined" json:"line_spacing_undefined,omitempty"`
	OutlineLevel                     *SpecIntegerArchive                            `protobuf:"bytes,26,opt,name=outline_level,json=outlineLevel" json:"outline_level,omitempty"`
	OutlineLevelUndefined            *bool                                          `protobuf:"varint,27,opt,name=outline_level_undefined,json=outlineLevelUndefined" json:"outline_level_undefined,omitempty"`
	OutlineStyleType                 *SpecIntegerArchive                            `protobuf:"bytes,28,opt,name=outline_style_type,json=outlineStyleType" json:"outline_style_type,omitempty"`
	OutlineStyleTypeUndefined        *bool                                          `protobuf:"varint,29,opt,name=outline_style_type_undefined,json=outlineStyleTypeUndefined" json:"outline_style_type_undefined,omitempty"`
	PageBreakBefore                  *SpecBoolArchive                               `protobuf:"bytes,30,opt,name=page_break_before,json=pageBreakBefore" json:"page_break_before,omitempty"`
	PageBreakBeforeUndefined         *bool                                          `protobuf:"varint,31,opt,name=page_break_before_undefined,json=pageBreakBeforeUndefined" json:"page_break_before_undefined,omitempty"`
	ParagraphBorders                 *SpecIntegerArchive                            `protobuf:"bytes,32,opt,name=paragraph_borders,json=paragraphBorders" json:"paragraph_borders,omitempty"`
	ParagraphBordersUndefined        *bool                                          `protobuf:"varint,33,opt,name=paragraph_borders_undefined,json=paragraphBordersUndefined" json:"paragraph_borders_undefined,omitempty"`
	ParagraphRuleOffset              *SpecRuleOffsetArchive                         `protobuf:"bytes,34,opt,name=paragraph_rule_offset,json=paragraphRuleOffset" json:"paragraph_rule_offset,omitempty"`
	ParagraphRuleOffsetUndefined     *bool                                          `protobuf:"varint,35,opt,name=paragraph_rule_offset_undefined,json=paragraphRuleOffsetUndefined" json:"paragraph_rule_offset_undefined,omitempty"`
	ParagraphRuleWidth               *SpecDoubleArchive                             `protobuf:"bytes,36,opt,name=paragraph_rule_width,json=paragraphRuleWidth" json:"paragraph_rule_width,omitempty"`
	ParagraphRuleWidthUndefined      *bool                                          `protobuf:"varint,37,opt,name=paragraph_rule_width_undefined,json=paragraphRuleWidthUndefined" json:"paragraph_rule_width_undefined,omitempty"`
	RightIndent                      *SpecDoubleArchive                             `protobuf:"bytes,38,opt,name=right_indent,json=rightIndent" json:"right_indent,omitempty"`
	RightIndentUndefined             *bool                                          `protobuf:"varint,39,opt,name=right_indent_undefined,json=rightIndentUndefined" json:"right_indent_undefined,omitempty"`
	SpaceAfter                       *SpecDoubleArchive                             `protobuf:"bytes,40,opt,name=space_after,json=spaceAfter" json:"space_after,omitempty"`
	SpaceAfterUndefined              *bool                                          `protobuf:"varint,41,opt,name=space_after_undefined,json=spaceAfterUndefined" json:"space_after_undefined,omitempty"`
	SpaceBefore                      *SpecDoubleArchive                             `protobuf:"bytes,42,opt,name=space_before,json=spaceBefore" json:"space_before,omitempty"`
	SpaceBeforeUndefined             *bool                                          `protobuf:"varint,43,opt,name=space_before_undefined,json=spaceBeforeUndefined" json:"space_before_undefined,omitempty"`
	ParagraphStroke                  *SpecStrokeArchive                             `protobuf:"bytes,44,opt,name=paragraph_stroke,json=paragraphStroke" json:"paragraph_stroke,omitempty"`
	ParagraphStrokeUndefined         *bool                                          `protobuf:"varint,45,opt,name=paragraph_stroke_undefined,json=paragraphStrokeUndefined" json:"paragraph_stroke_undefined,omitempty"`
	Tabs                             *SpecTabsArchive                               `protobuf:"bytes,46,opt,name=tabs" json:"tabs,omitempty"`
	TabsUndefined                    *bool                                          `protobuf:"varint,47,opt,name=tabs_undefined,json=tabsUndefined" json:"tabs_undefined,omitempty"`
	WidowControl                     *SpecIntegerArchive                            `protobuf:"bytes,48,opt,name=widow_control,json=widowControl" json:"widow_control,omitempty"`
	WidowControlUndefined            *bool                                          `protobuf:"varint,49,opt,name=widow_control_undefined,json=widowControlUndefined" json:"widow_control_undefined,omitempty"`
	ShowInBookmarksList              *SpecBoolArchive                               `protobuf:"bytes,50,opt,name=show_in_bookmarks_list,json=showInBookmarksList" json:"show_in_bookmarks_list,omitempty"`
	ShowInBookmarksListUndefined     *bool                                          `protobuf:"varint,51,opt,name=show_in_bookmarks_list_undefined,json=showInBookmarksListUndefined" json:"show_in_bookmarks_list_undefined,omitempty"`
	ShowInTOCNavigator               *SpecBoolArchive                               `protobuf:"bytes,52,opt,name=show_in_t_o_c_navigator,json=showInTOCNavigator" json:"show_in_t_o_c_navigator,omitempty"`
	ShowInTOCNavigatorUndefined      *bool                                          `protobuf:"varint,53,opt,name=show_in_t_o_c_navigator_undefined,json=showInTOCNavigatorUndefined" json:"show_in_t_o_c_navigator_undefined,omitempty"`
}

func (x *TSWPSOSParagraphStylePropertyChangeSetArchive) Reset() {
	*x = TSWPSOSParagraphStylePropertyChangeSetArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_sos_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSWPSOSParagraphStylePropertyChangeSetArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSWPSOSParagraphStylePropertyChangeSetArchive) ProtoMessage() {}

func (x *TSWPSOSParagraphStylePropertyChangeSetArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_sos_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSWPSOSParagraphStylePropertyChangeSetArchive.ProtoReflect.Descriptor instead.
func (*TSWPSOSParagraphStylePropertyChangeSetArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_sos_proto_rawDescGZIP(), []int{40}
}

func (x *TSWPSOSParagraphStylePropertyChangeSetArchive) GetSuper() *TSWPSOSCharacterStylePropertyChangeSetArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *TSWPSOSParagraphStylePropertyChangeSetArchive) GetAlignment() *SpecIntegerArchive {
	if x != nil {
		return x.Alignment
	}
	return nil
}

func (x *TSWPSOSParagraphStylePropertyChangeSetArchive) GetAlignmentUndefined() bool {
	if x != nil && x.AlignmentUndefined != nil {
		return *x.AlignmentUndefined
	}
	return false
}

func (x *TSWPSOSParagraphStylePropertyChangeSetArchive) GetDecimalTab() *SpecStringArchive {
	if x != nil {
		return x.DecimalTab
	}
	return nil
}

func (x *TSWPSOSParagraphStylePropertyChangeSetArchive) GetDecimalTabUndefined() bool {
	if x != nil && x.DecimalTabUndefined != nil {
		return *x.DecimalTabUndefined
	}
	return false
}

func (x *TSWPSOSParagraphStylePropertyChangeSetArchive) GetDefaultTabStops() *SpecDoubleArchive {
	if x != nil {
		return x.DefaultTabStops
	}
	return nil
}

func (x *TSWPSOSParagraphStylePropertyChangeSetArchive) GetDefaultTabStopsUndefined() bool {
	if x != nil && x.DefaultTabStopsUndefined != nil {
		return *x.DefaultTabStopsUndefined
	}
	return false
}

func (x *TSWPSOSParagraphStylePropertyChangeSetArchive) GetParagraphFill() *SpecColorArchive {
	if x != nil {
		return x.ParagraphFill
	}
	return nil
}

func (x *TSWPSOSParagraphStylePropertyChangeSetArchive) GetParagraphFillUndefined() bool {
	if x != nil && x.ParagraphFillUndefined != nil {
		return *x.ParagraphFillUndefined
	}
	return false
}

func (x *TSWPSOSParagraphStylePropertyChangeSetArchive) GetFirstLineIndent() *SpecDoubleArchive {
	if x != nil {
		return x.FirstLineIndent
	}
	return nil
}

func (x *TSWPSOSParagraphStylePropertyChangeSetArchive) GetFirstLineIndentUndefined() bool {
	if x != nil && x.FirstLineIndentUndefined != nil {
		return *x.FirstLineIndentUndefined
	}
	return false
}

func (x *TSWPSOSParagraphStylePropertyChangeSetArchive) GetFollowingParagraphStyle() *SpecParagraphStyleArchive {
	if x != nil {
		return x.FollowingParagraphStyle
	}
	return nil
}

func (x *TSWPSOSParagraphStylePropertyChangeSetArchive) GetFollowingParagraphStyleUndefined() bool {
	if x != nil && x.FollowingParagraphStyleUndefined != nil {
		return *x.FollowingParagraphStyleUndefined
	}
	return false
}

func (x *TSWPSOSParagraphStylePropertyChangeSetArchive) GetHyphenate() *SpecBoolArchive {
	if x != nil {
		return x.Hyphenate
	}
	return nil
}

func (x *TSWPSOSParagraphStylePropertyChangeSetArchive) GetHyphenateUndefined() bool {
	if x != nil && x.HyphenateUndefined != nil {
		return *x.HyphenateUndefined
	}
	return false
}

func (x *TSWPSOSParagraphStylePropertyChangeSetArchive) GetInitialListStyle() *SpecListStyleArchive {
	if x != nil {
		return x.InitialListStyle
	}
	return nil
}

func (x *TSWPSOSParagraphStylePropertyChangeSetArchive) GetInitialListStyleUndefined() bool {
	if x != nil && x.InitialListStyleUndefined != nil {
		return *x.InitialListStyleUndefined
	}
	return false
}

func (x *TSWPSOSParagraphStylePropertyChangeSetArchive) GetKeepLinesTogether() *SpecBoolArchive {
	if x != nil {
		return x.KeepLinesTogether
	}
	return nil
}

func (x *TSWPSOSParagraphStylePropertyChangeSetArchive) GetKeepLinesTogetherUndefined() bool {
	if x != nil && x.KeepLinesTogetherUndefined != nil {
		return *x.KeepLinesTogetherUndefined
	}
	return false
}

func (x *TSWPSOSParagraphStylePropertyChangeSetArchive) GetKeepWithNext() *SpecBoolArchive {
	if x != nil {
		return x.KeepWithNext
	}
	return nil
}

func (x *TSWPSOSParagraphStylePropertyChangeSetArchive) GetKeepWithNextUndefined() bool {
	if x != nil && x.KeepWithNextUndefined != nil {
		return *x.KeepWithNextUndefined
	}
	return false
}

func (x *TSWPSOSParagraphStylePropertyChangeSetArchive) GetLeftIndent() *SpecDoubleArchive {
	if x != nil {
		return x.LeftIndent
	}
	return nil
}

func (x *TSWPSOSParagraphStylePropertyChangeSetArchive) GetLeftIndentUndefined() bool {
	if x != nil && x.LeftIndentUndefined != nil {
		return *x.LeftIndentUndefined
	}
	return false
}

func (x *TSWPSOSParagraphStylePropertyChangeSetArchive) GetLineSpacing() *SpecLineSpacingArchive {
	if x != nil {
		return x.LineSpacing
	}
	return nil
}

func (x *TSWPSOSParagraphStylePropertyChangeSetArchive) GetLineSpacingUndefined() bool {
	if x != nil && x.LineSpacingUndefined != nil {
		return *x.LineSpacingUndefined
	}
	return false
}

func (x *TSWPSOSParagraphStylePropertyChangeSetArchive) GetOutlineLevel() *SpecIntegerArchive {
	if x != nil {
		return x.OutlineLevel
	}
	return nil
}

func (x *TSWPSOSParagraphStylePropertyChangeSetArchive) GetOutlineLevelUndefined() bool {
	if x != nil && x.OutlineLevelUndefined != nil {
		return *x.OutlineLevelUndefined
	}
	return false
}

func (x *TSWPSOSParagraphStylePropertyChangeSetArchive) GetOutlineStyleType() *SpecIntegerArchive {
	if x != nil {
		return x.OutlineStyleType
	}
	return nil
}

func (x *TSWPSOSParagraphStylePropertyChangeSetArchive) GetOutlineStyleTypeUndefined() bool {
	if x != nil && x.OutlineStyleTypeUndefined != nil {
		return *x.OutlineStyleTypeUndefined
	}
	return false
}

func (x *TSWPSOSParagraphStylePropertyChangeSetArchive) GetPageBreakBefore() *SpecBoolArchive {
	if x != nil {
		return x.PageBreakBefore
	}
	return nil
}

func (x *TSWPSOSParagraphStylePropertyChangeSetArchive) GetPageBreakBeforeUndefined() bool {
	if x != nil && x.PageBreakBeforeUndefined != nil {
		return *x.PageBreakBeforeUndefined
	}
	return false
}

func (x *TSWPSOSParagraphStylePropertyChangeSetArchive) GetParagraphBorders() *SpecIntegerArchive {
	if x != nil {
		return x.ParagraphBorders
	}
	return nil
}

func (x *TSWPSOSParagraphStylePropertyChangeSetArchive) GetParagraphBordersUndefined() bool {
	if x != nil && x.ParagraphBordersUndefined != nil {
		return *x.ParagraphBordersUndefined
	}
	return false
}

func (x *TSWPSOSParagraphStylePropertyChangeSetArchive) GetParagraphRuleOffset() *SpecRuleOffsetArchive {
	if x != nil {
		return x.ParagraphRuleOffset
	}
	return nil
}

func (x *TSWPSOSParagraphStylePropertyChangeSetArchive) GetParagraphRuleOffsetUndefined() bool {
	if x != nil && x.ParagraphRuleOffsetUndefined != nil {
		return *x.ParagraphRuleOffsetUndefined
	}
	return false
}

func (x *TSWPSOSParagraphStylePropertyChangeSetArchive) GetParagraphRuleWidth() *SpecDoubleArchive {
	if x != nil {
		return x.ParagraphRuleWidth
	}
	return nil
}

func (x *TSWPSOSParagraphStylePropertyChangeSetArchive) GetParagraphRuleWidthUndefined() bool {
	if x != nil && x.ParagraphRuleWidthUndefined != nil {
		return *x.ParagraphRuleWidthUndefined
	}
	return false
}

func (x *TSWPSOSParagraphStylePropertyChangeSetArchive) GetRightIndent() *SpecDoubleArchive {
	if x != nil {
		return x.RightIndent
	}
	return nil
}

func (x *TSWPSOSParagraphStylePropertyChangeSetArchive) GetRightIndentUndefined() bool {
	if x != nil && x.RightIndentUndefined != nil {
		return *x.RightIndentUndefined
	}
	return false
}

func (x *TSWPSOSParagraphStylePropertyChangeSetArchive) GetSpaceAfter() *SpecDoubleArchive {
	if x != nil {
		return x.SpaceAfter
	}
	return nil
}

func (x *TSWPSOSParagraphStylePropertyChangeSetArchive) GetSpaceAfterUndefined() bool {
	if x != nil && x.SpaceAfterUndefined != nil {
		return *x.SpaceAfterUndefined
	}
	return false
}

func (x *TSWPSOSParagraphStylePropertyChangeSetArchive) GetSpaceBefore() *SpecDoubleArchive {
	if x != nil {
		return x.SpaceBefore
	}
	return nil
}

func (x *TSWPSOSParagraphStylePropertyChangeSetArchive) GetSpaceBeforeUndefined() bool {
	if x != nil && x.SpaceBeforeUndefined != nil {
		return *x.SpaceBeforeUndefined
	}
	return false
}

func (x *TSWPSOSParagraphStylePropertyChangeSetArchive) GetParagraphStroke() *SpecStrokeArchive {
	if x != nil {
		return x.ParagraphStroke
	}
	return nil
}

func (x *TSWPSOSParagraphStylePropertyChangeSetArchive) GetParagraphStrokeUndefined() bool {
	if x != nil && x.ParagraphStrokeUndefined != nil {
		return *x.ParagraphStrokeUndefined
	}
	return false
}

func (x *TSWPSOSParagraphStylePropertyChangeSetArchive) GetTabs() *SpecTabsArchive {
	if x != nil {
		return x.Tabs
	}
	return nil
}

func (x *TSWPSOSParagraphStylePropertyChangeSetArchive) GetTabsUndefined() bool {
	if x != nil && x.TabsUndefined != nil {
		return *x.TabsUndefined
	}
	return false
}

func (x *TSWPSOSParagraphStylePropertyChangeSetArchive) GetWidowControl() *SpecIntegerArchive {
	if x != nil {
		return x.WidowControl
	}
	return nil
}

func (x *TSWPSOSParagraphStylePropertyChangeSetArchive) GetWidowControlUndefined() bool {
	if x != nil && x.WidowControlUndefined != nil {
		return *x.WidowControlUndefined
	}
	return false
}

func (x *TSWPSOSParagraphStylePropertyChangeSetArchive) GetShowInBookmarksList() *SpecBoolArchive {
	if x != nil {
		return x.ShowInBookmarksList
	}
	return nil
}

func (x *TSWPSOSParagraphStylePropertyChangeSetArchive) GetShowInBookmarksListUndefined() bool {
	if x != nil && x.ShowInBookmarksListUndefined != nil {
		return *x.ShowInBookmarksListUndefined
	}
	return false
}

func (x *TSWPSOSParagraphStylePropertyChangeSetArchive) GetShowInTOCNavigator() *SpecBoolArchive {
	if x != nil {
		return x.ShowInTOCNavigator
	}
	return nil
}

func (x *TSWPSOSParagraphStylePropertyChangeSetArchive) GetShowInTOCNavigatorUndefined() bool {
	if x != nil && x.ShowInTOCNavigatorUndefined != nil {
		return *x.ShowInTOCNavigatorUndefined
	}
	return false
}

type ShapeStylePropertyChangeSetArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                          *BaseShapeStylePropertyChangeSetArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Columns                        *SpecColumnsArchive                     `protobuf:"bytes,2,opt,name=columns" json:"columns,omitempty"`
	ColumnsUndefined               *bool                                   `protobuf:"varint,3,opt,name=columns_undefined,json=columnsUndefined" json:"columns_undefined,omitempty"`
	Padding                        *SpecPaddingArchive                     `protobuf:"bytes,4,opt,name=padding" json:"padding,omitempty"`
	PaddingUndefined               *bool                                   `protobuf:"varint,5,opt,name=padding_undefined,json=paddingUndefined" json:"padding_undefined,omitempty"`
	ShrinkTextToFit                *SpecBoolArchive                        `protobuf:"bytes,6,opt,name=shrink_text_to_fit,json=shrinkTextToFit" json:"shrink_text_to_fit,omitempty"`
	ShrinkTextToFitUndefined       *bool                                   `protobuf:"varint,7,opt,name=shrink_text_to_fit_undefined,json=shrinkTextToFitUndefined" json:"shrink_text_to_fit_undefined,omitempty"`
	VerticalAlignment              *SpecIntegerArchive                     `protobuf:"bytes,8,opt,name=vertical_alignment,json=verticalAlignment" json:"vertical_alignment,omitempty"`
	VerticalAlignmentUndefined     *bool                                   `protobuf:"varint,9,opt,name=vertical_alignment_undefined,json=verticalAlignmentUndefined" json:"vertical_alignment_undefined,omitempty"`
	VerticalText                   *SpecBoolArchive                        `protobuf:"bytes,10,opt,name=vertical_text,json=verticalText" json:"vertical_text,omitempty"`
	VerticalTextUndefined          *bool                                   `protobuf:"varint,11,opt,name=vertical_text_undefined,json=verticalTextUndefined" json:"vertical_text_undefined,omitempty"`
	DefaultParagraphStyle          *SpecParagraphStyleArchive              `protobuf:"bytes,12,opt,name=default_paragraph_style,json=defaultParagraphStyle" json:"default_paragraph_style,omitempty"`
	DefaultParagraphStyleUndefined *bool                                   `protobuf:"varint,13,opt,name=default_paragraph_style_undefined,json=defaultParagraphStyleUndefined" json:"default_paragraph_style_undefined,omitempty"`
}

func (x *ShapeStylePropertyChangeSetArchive) Reset() {
	*x = ShapeStylePropertyChangeSetArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_sos_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShapeStylePropertyChangeSetArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShapeStylePropertyChangeSetArchive) ProtoMessage() {}

func (x *ShapeStylePropertyChangeSetArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_sos_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShapeStylePropertyChangeSetArchive.ProtoReflect.Descriptor instead.
func (*ShapeStylePropertyChangeSetArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_sos_proto_rawDescGZIP(), []int{41}
}

func (x *ShapeStylePropertyChangeSetArchive) GetSuper() *BaseShapeStylePropertyChangeSetArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *ShapeStylePropertyChangeSetArchive) GetColumns() *SpecColumnsArchive {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *ShapeStylePropertyChangeSetArchive) GetColumnsUndefined() bool {
	if x != nil && x.ColumnsUndefined != nil {
		return *x.ColumnsUndefined
	}
	return false
}

func (x *ShapeStylePropertyChangeSetArchive) GetPadding() *SpecPaddingArchive {
	if x != nil {
		return x.Padding
	}
	return nil
}

func (x *ShapeStylePropertyChangeSetArchive) GetPaddingUndefined() bool {
	if x != nil && x.PaddingUndefined != nil {
		return *x.PaddingUndefined
	}
	return false
}

func (x *ShapeStylePropertyChangeSetArchive) GetShrinkTextToFit() *SpecBoolArchive {
	if x != nil {
		return x.ShrinkTextToFit
	}
	return nil
}

func (x *ShapeStylePropertyChangeSetArchive) GetShrinkTextToFitUndefined() bool {
	if x != nil && x.ShrinkTextToFitUndefined != nil {
		return *x.ShrinkTextToFitUndefined
	}
	return false
}

func (x *ShapeStylePropertyChangeSetArchive) GetVerticalAlignment() *SpecIntegerArchive {
	if x != nil {
		return x.VerticalAlignment
	}
	return nil
}

func (x *ShapeStylePropertyChangeSetArchive) GetVerticalAlignmentUndefined() bool {
	if x != nil && x.VerticalAlignmentUndefined != nil {
		return *x.VerticalAlignmentUndefined
	}
	return false
}

func (x *ShapeStylePropertyChangeSetArchive) GetVerticalText() *SpecBoolArchive {
	if x != nil {
		return x.VerticalText
	}
	return nil
}

func (x *ShapeStylePropertyChangeSetArchive) GetVerticalTextUndefined() bool {
	if x != nil && x.VerticalTextUndefined != nil {
		return *x.VerticalTextUndefined
	}
	return false
}

func (x *ShapeStylePropertyChangeSetArchive) GetDefaultParagraphStyle() *SpecParagraphStyleArchive {
	if x != nil {
		return x.DefaultParagraphStyle
	}
	return nil
}

func (x *ShapeStylePropertyChangeSetArchive) GetDefaultParagraphStyleUndefined() bool {
	if x != nil && x.DefaultParagraphStyleUndefined != nil {
		return *x.DefaultParagraphStyleUndefined
	}
	return false
}

type TOCEntryStylePropertyChangeSetArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                       *TSWPSOSParagraphStylePropertyChangeSetArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	TocShowPageNumber           *SpecBoolArchive                               `protobuf:"bytes,2,opt,name=toc_show_page_number,json=tocShowPageNumber" json:"toc_show_page_number,omitempty"`
	TocShowPageNumberUndefined  *bool                                          `protobuf:"varint,3,opt,name=toc_show_page_number_undefined,json=tocShowPageNumberUndefined" json:"toc_show_page_number_undefined,omitempty"`
	TocPageNumberStyle          *SpecCharacterStyleArchive                     `protobuf:"bytes,4,opt,name=toc_page_number_style,json=tocPageNumberStyle" json:"toc_page_number_style,omitempty"`
	TocPageNumberStyleUndefined *bool                                          `protobuf:"varint,5,opt,name=toc_page_number_style_undefined,json=tocPageNumberStyleUndefined" json:"toc_page_number_style_undefined,omitempty"`
}

func (x *TOCEntryStylePropertyChangeSetArchive) Reset() {
	*x = TOCEntryStylePropertyChangeSetArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_sos_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TOCEntryStylePropertyChangeSetArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TOCEntryStylePropertyChangeSetArchive) ProtoMessage() {}

func (x *TOCEntryStylePropertyChangeSetArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_sos_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TOCEntryStylePropertyChangeSetArchive.ProtoReflect.Descriptor instead.
func (*TOCEntryStylePropertyChangeSetArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_sos_proto_rawDescGZIP(), []int{42}
}

func (x *TOCEntryStylePropertyChangeSetArchive) GetSuper() *TSWPSOSParagraphStylePropertyChangeSetArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *TOCEntryStylePropertyChangeSetArchive) GetTocShowPageNumber() *SpecBoolArchive {
	if x != nil {
		return x.TocShowPageNumber
	}
	return nil
}

func (x *TOCEntryStylePropertyChangeSetArchive) GetTocShowPageNumberUndefined() bool {
	if x != nil && x.TocShowPageNumberUndefined != nil {
		return *x.TocShowPageNumberUndefined
	}
	return false
}

func (x *TOCEntryStylePropertyChangeSetArchive) GetTocPageNumberStyle() *SpecCharacterStyleArchive {
	if x != nil {
		return x.TocPageNumberStyle
	}
	return nil
}

func (x *TOCEntryStylePropertyChangeSetArchive) GetTocPageNumberStyleUndefined() bool {
	if x != nil && x.TocPageNumberStyleUndefined != nil {
		return *x.TocPageNumberStyleUndefined
	}
	return false
}

type StyleDiffArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Style              *Reference                                     `protobuf:"bytes,1,opt,name=style" json:"style,omitempty"`
	CharacterChangeSet *TSWPSOSCharacterStylePropertyChangeSetArchive `protobuf:"bytes,2,opt,name=character_change_set,json=characterChangeSet" json:"character_change_set,omitempty"`
	ParagraphChangeSet *TSWPSOSParagraphStylePropertyChangeSetArchive `protobuf:"bytes,3,opt,name=paragraph_change_set,json=paragraphChangeSet" json:"paragraph_change_set,omitempty"`
	ShapeChangeSet     *ShapeStylePropertyChangeSetArchive            `protobuf:"bytes,4,opt,name=shape_change_set,json=shapeChangeSet" json:"shape_change_set,omitempty"`
}

func (x *StyleDiffArchive) Reset() {
	*x = StyleDiffArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPArchives_sos_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StyleDiffArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StyleDiffArchive) ProtoMessage() {}

func (x *StyleDiffArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPArchives_sos_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StyleDiffArchive.ProtoReflect.Descriptor instead.
func (*StyleDiffArchive) Descriptor() ([]byte, []int) {
	return file_TSWPArchives_sos_proto_rawDescGZIP(), []int{43}
}

func (x *StyleDiffArchive) GetStyle() *Reference {
	if x != nil {
		return x.Style
	}
	return nil
}

func (x *StyleDiffArchive) GetCharacterChangeSet() *TSWPSOSCharacterStylePropertyChangeSetArchive {
	if x != nil {
		return x.CharacterChangeSet
	}
	return nil
}

func (x *StyleDiffArchive) GetParagraphChangeSet() *TSWPSOSParagraphStylePropertyChangeSetArchive {
	if x != nil {
		return x.ParagraphChangeSet
	}
	return nil
}

func (x *StyleDiffArchive) GetShapeChangeSet() *ShapeStylePropertyChangeSetArchive {
	if x != nil {
		return x.ShapeChangeSet
	}
	return nil
}

var File_TSWPArchives_sos_proto protoreflect.FileDescriptor

var file_TSWPArchives_sos_proto_rawDesc = []byte{
	0x0a, 0x16, 0x54, 0x53, 0x57, 0x50, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x5f, 0x73,
	0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x54, 0x53, 0x57, 0x50, 0x53, 0x4f,
	0x53, 0x1a, 0x15, 0x54, 0x53, 0x44, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x5f, 0x73,
	0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x54, 0x53, 0x50, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x54, 0x53, 0x53,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x5f, 0x73, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x12, 0x54, 0x53, 0x57, 0x50, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6d, 0x0a, 0x1c, 0x53, 0x70, 0x65, 0x63, 0x53, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x37, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x0e, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x75, 0x6e, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x05,
	0x75, 0x6e, 0x73, 0x65, 0x74, 0x22, 0x5d, 0x0a, 0x15, 0x53, 0x70, 0x65, 0x63, 0x53, 0x65, 0x74,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2e,
	0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x75, 0x6e, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x05, 0x75,
	0x6e, 0x73, 0x65, 0x74, 0x22, 0x5e, 0x0a, 0x15, 0x53, 0x70, 0x65, 0x63, 0x53, 0x65, 0x74, 0x44,
	0x72, 0x6f, 0x70, 0x43, 0x61, 0x70, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2f, 0x0a,
	0x08, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x63, 0x61, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x43, 0x61, 0x70, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x07, 0x64, 0x72, 0x6f, 0x70, 0x43, 0x61, 0x70, 0x12, 0x14,
	0x0a, 0x05, 0x75, 0x6e, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x05, 0x75,
	0x6e, 0x73, 0x65, 0x74, 0x22, 0xa9, 0x01, 0x0a, 0x1a, 0x53, 0x70, 0x65, 0x63, 0x53, 0x65, 0x74,
	0x46, 0x6f, 0x6e, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x12, 0x3d, 0x0a, 0x0d, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x57,
	0x50, 0x2e, 0x46, 0x6f, 0x6e, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x0c, 0x66, 0x6f, 0x6e, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x15, 0x66, 0x6f, 0x6e, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e,
	0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x08, 0x52, 0x05, 0x75, 0x6e, 0x73, 0x65, 0x74,
	0x22, 0x6e, 0x0a, 0x19, 0x53, 0x70, 0x65, 0x63, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x53,
	0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x3b, 0x0a,
	0x0c, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x53,
	0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0b, 0x6c,
	0x69, 0x6e, 0x65, 0x53, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e,
	0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x05, 0x75, 0x6e, 0x73, 0x65, 0x74,
	0x22, 0x5e, 0x0a, 0x17, 0x53, 0x70, 0x65, 0x63, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2d, 0x0a, 0x0a, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x09, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e,
	0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x05, 0x75, 0x6e, 0x73, 0x65, 0x74,
	0x22, 0xb1, 0x01, 0x0a, 0x20, 0x53, 0x70, 0x65, 0x63, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x41, 0x72, 0x72, 0x61, 0x79, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x74,
	0x79, 0x6c, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x08, 0x52, 0x12, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x42,
	0x6f, 0x6f, 0x6c, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x44, 0x0a, 0x1f, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x61, 0x72, 0x72, 0x61,
	0x79, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1b, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x42, 0x6f, 0x6f, 0x6c,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x75, 0x6e, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x08, 0x52, 0x05, 0x75,
	0x6e, 0x73, 0x65, 0x74, 0x22, 0xb6, 0x01, 0x0a, 0x21, 0x53, 0x70, 0x65, 0x63, 0x53, 0x65, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x61,
	0x72, 0x72, 0x61, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x02, 0x52, 0x13, 0x6c, 0x69, 0x73, 0x74,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12,
	0x46, 0x0a, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x6c, 0x69, 0x73, 0x74, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x55, 0x6e,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e, 0x73, 0x65, 0x74,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x08, 0x52, 0x05, 0x75, 0x6e, 0x73, 0x65, 0x74, 0x22, 0xef, 0x01,
	0x0a, 0x25, 0x53, 0x70, 0x65, 0x63, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x5f, 0x0a, 0x1b, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x54,
	0x53, 0x57, 0x50, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x17, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x4f, 0x0a, 0x25, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e, 0x73,
	0x65, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x08, 0x52, 0x05, 0x75, 0x6e, 0x73, 0x65, 0x74, 0x22,
	0x9c, 0x02, 0x0a, 0x2d, 0x53, 0x70, 0x65, 0x63, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x47, 0x65, 0x6f,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x41, 0x72, 0x72, 0x61, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x12, 0x73, 0x0a, 0x24, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x67, 0x65, 0x6f, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x47, 0x65, 0x6f,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x1f, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x60, 0x0a, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73,
	0x74, 0x79, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f,
	0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x75,
	0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x28,
	0x6c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x41, 0x72, 0x72, 0x61, 0x79, 0x55,
	0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e, 0x73, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x08, 0x52, 0x05, 0x75, 0x6e, 0x73, 0x65, 0x74, 0x22, 0x84,
	0x02, 0x0a, 0x29, 0x53, 0x70, 0x65, 0x63, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x67, 0x0a, 0x20,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x1b, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x58, 0x0a, 0x2a, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x74,
	0x79, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x24, 0x6c, 0x69, 0x73, 0x74, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x75, 0x6e, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x08, 0x52, 0x05,
	0x75, 0x6e, 0x73, 0x65, 0x74, 0x22, 0x8a, 0x02, 0x0a, 0x2a, 0x53, 0x70, 0x65, 0x63, 0x53, 0x65,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x12, 0x6a, 0x0a, 0x21, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x21, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x1c, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x12, 0x5a, 0x0a, 0x2b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x25, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x75, 0x6e, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x08, 0x52, 0x05, 0x75, 0x6e, 0x73,
	0x65, 0x74, 0x22, 0xbb, 0x01, 0x0a, 0x22, 0x53, 0x70, 0x65, 0x63, 0x53, 0x65, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x61,
	0x72, 0x72, 0x61, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x6c, 0x69, 0x73, 0x74,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x12, 0x48, 0x0a, 0x21, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x75, 0x6e, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x6c, 0x69, 0x73,
	0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e,
	0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x08, 0x52, 0x05, 0x75, 0x6e, 0x73, 0x65, 0x74,
	0x22, 0x5d, 0x0a, 0x15, 0x53, 0x70, 0x65, 0x63, 0x53, 0x65, 0x74, 0x50, 0x61, 0x64, 0x64, 0x69,
	0x6e, 0x67, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x70, 0x61, 0x64,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x54, 0x53, 0x57,
	0x50, 0x2e, 0x50, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x07, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e, 0x73,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x05, 0x75, 0x6e, 0x73, 0x65, 0x74, 0x22,
	0x6d, 0x0a, 0x1c, 0x53, 0x70, 0x65, 0x63, 0x53, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12,
	0x37, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e, 0x73, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x05, 0x75, 0x6e, 0x73, 0x65, 0x74, 0x22, 0x5d,
	0x0a, 0x18, 0x53, 0x70, 0x65, 0x63, 0x53, 0x65, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2b, 0x0a, 0x0b, 0x72, 0x75,
	0x6c, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0a, 0x72, 0x75, 0x6c,
	0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e, 0x73, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x05, 0x75, 0x6e, 0x73, 0x65, 0x74, 0x22, 0x51, 0x0a,
	0x12, 0x53, 0x70, 0x65, 0x63, 0x53, 0x65, 0x74, 0x54, 0x61, 0x62, 0x73, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x61, 0x62, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x54, 0x61, 0x62, 0x73, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x61, 0x62, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e,
	0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x05, 0x75, 0x6e, 0x73, 0x65, 0x74,
	0x22, 0x7b, 0x0a, 0x19, 0x53, 0x70, 0x65, 0x63, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x5e, 0x0a,
	0x18, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x53, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x15, 0x73, 0x70, 0x65, 0x63, 0x53, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x22, 0x5e, 0x0a,
	0x12, 0x53, 0x70, 0x65, 0x63, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x12, 0x48, 0x0a, 0x10, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x73, 0x65, 0x74, 0x5f,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x54, 0x53, 0x57, 0x50, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x53, 0x65, 0x74, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0e, 0x73,
	0x70, 0x65, 0x63, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x22, 0x5f, 0x0a,
	0x12, 0x53, 0x70, 0x65, 0x63, 0x44, 0x72, 0x6f, 0x70, 0x43, 0x61, 0x70, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x12, 0x49, 0x0a, 0x11, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x73, 0x65, 0x74, 0x5f,
	0x64, 0x72, 0x6f, 0x70, 0x5f, 0x63, 0x61, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x54, 0x53, 0x57, 0x50, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x53, 0x65, 0x74,
	0x44, 0x72, 0x6f, 0x70, 0x43, 0x61, 0x70, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0e,
	0x73, 0x70, 0x65, 0x63, 0x53, 0x65, 0x74, 0x44, 0x72, 0x6f, 0x70, 0x43, 0x61, 0x70, 0x22, 0x73,
	0x0a, 0x17, 0x53, 0x70, 0x65, 0x63, 0x46, 0x6f, 0x6e, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x58, 0x0a, 0x16, 0x73, 0x70, 0x65,
	0x63, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x54, 0x53, 0x57, 0x50,
	0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x53, 0x65, 0x74, 0x46, 0x6f, 0x6e, 0x74, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x13,
	0x73, 0x70, 0x65, 0x63, 0x53, 0x65, 0x74, 0x46, 0x6f, 0x6e, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x22, 0x6f, 0x0a, 0x16, 0x53, 0x70, 0x65, 0x63, 0x4c, 0x69, 0x6e, 0x65, 0x53,
	0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x55, 0x0a,
	0x15, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73,
	0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x54,
	0x53, 0x57, 0x50, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x53, 0x65, 0x74, 0x4c, 0x69,
	0x6e, 0x65, 0x53, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x12, 0x73, 0x70, 0x65, 0x63, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x61,
	0x63, 0x69, 0x6e, 0x67, 0x22, 0x67, 0x0a, 0x14, 0x53, 0x70, 0x65, 0x63, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x4f, 0x0a, 0x13,
	0x73, 0x70, 0x65, 0x63, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x74,
	0x79, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x54, 0x53, 0x57, 0x50,
	0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x10, 0x73, 0x70, 0x65,
	0x63, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x22, 0x8d, 0x01,
	0x0a, 0x1d, 0x53, 0x70, 0x65, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x42,
	0x6f, 0x6f, 0x6c, 0x41, 0x72, 0x72, 0x61, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12,
	0x6c, 0x0a, 0x1e, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x61, 0x72, 0x72, 0x61,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x53, 0x4f,
	0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x41, 0x72, 0x72, 0x61, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x19, 0x73, 0x70, 0x65, 0x63, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x41, 0x72, 0x72, 0x61, 0x79, 0x22, 0x91, 0x01,
	0x0a, 0x1e, 0x53, 0x70, 0x65, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x12, 0x6f, 0x0a, 0x1f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x61, 0x72,
	0x72, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x54, 0x53, 0x57, 0x50,
	0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1a, 0x73, 0x70, 0x65, 0x63, 0x53, 0x65, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x22, 0xa2, 0x01, 0x0a, 0x22, 0x53, 0x70, 0x65, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x7c, 0x0a, 0x24, 0x73, 0x70, 0x65, 0x63,
	0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x53, 0x4f, 0x53,
	0x2e, 0x53, 0x70, 0x65, 0x63, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x41, 0x72, 0x72, 0x61, 0x79, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1e, 0x73, 0x70, 0x65, 0x63, 0x53, 0x65, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x41, 0x72, 0x72, 0x61, 0x79, 0x22, 0xc4, 0x01, 0x0a, 0x2a, 0x53, 0x70, 0x65, 0x63, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x41, 0x72, 0x72, 0x61, 0x79, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x95, 0x01, 0x0a, 0x2d, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x73,
	0x65, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x54, 0x53, 0x57, 0x50, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x53, 0x65, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x41, 0x72, 0x72, 0x61, 0x79, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x26, 0x73, 0x70, 0x65, 0x63, 0x53, 0x65, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x41, 0x72, 0x72, 0x61, 0x79, 0x22, 0xb4, 0x01,
	0x0a, 0x26, 0x53, 0x70, 0x65, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x29, 0x73, 0x70, 0x65,
	0x63, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x54,
	0x53, 0x57, 0x50, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x53, 0x65, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x22, 0x73, 0x70, 0x65, 0x63, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x22, 0xb8, 0x01, 0x0a, 0x27, 0x53, 0x70, 0x65, 0x63, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x12, 0x8c, 0x01, 0x0a, 0x2a, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x53, 0x4f, 0x53, 0x2e,
	0x53, 0x70, 0x65, 0x63, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x23, 0x73, 0x70, 0x65, 0x63,
	0x53, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x22,
	0x95, 0x01, 0x0a, 0x1f, 0x53, 0x70, 0x65, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x72, 0x61, 0x79, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x12, 0x72, 0x0a, 0x20, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x73, 0x65, 0x74, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x54, 0x53, 0x57, 0x50, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x53, 0x65, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1b, 0x73, 0x70, 0x65, 0x63,
	0x53, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x41, 0x72, 0x72, 0x61, 0x79, 0x22, 0x5e, 0x0a, 0x12, 0x53, 0x70, 0x65, 0x63, 0x50,
	0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x48, 0x0a,
	0x10, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x53, 0x4f,
	0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x53, 0x65, 0x74, 0x50, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0e, 0x73, 0x70, 0x65, 0x63, 0x53, 0x65, 0x74,
	0x50, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x7b, 0x0a, 0x19, 0x53, 0x70, 0x65, 0x63, 0x50,
	0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x12, 0x5e, 0x0a, 0x18, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x73, 0x65, 0x74,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x53, 0x4f, 0x53,
	0x2e, 0x53, 0x70, 0x65, 0x63, 0x53, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x15, 0x73,
	0x70, 0x65, 0x63, 0x53, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x22, 0x6b, 0x0a, 0x15, 0x53, 0x70, 0x65, 0x63, 0x52, 0x75, 0x6c, 0x65,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x52, 0x0a,
	0x14, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x54, 0x53,
	0x57, 0x50, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x53, 0x65, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x11,
	0x73, 0x70, 0x65, 0x63, 0x53, 0x65, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x22, 0x52, 0x0a, 0x0f, 0x53, 0x70, 0x65, 0x63, 0x54, 0x61, 0x62, 0x73, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x73, 0x65, 0x74,
	0x5f, 0x74, 0x61, 0x62, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53,
	0x57, 0x50, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x53, 0x65, 0x74, 0x54, 0x61, 0x62,
	0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x53, 0x65,
	0x74, 0x54, 0x61, 0x62, 0x73, 0x22, 0xbf, 0x1e, 0x0a, 0x2d, 0x54, 0x53, 0x57, 0x50, 0x53, 0x4f,
	0x53, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x74,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x62, 0x61, 0x73, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x54, 0x53, 0x53, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0d, 0x62, 0x61, 0x73, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x62, 0x61, 0x73,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x75, 0x6e, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x62, 0x61, 0x73,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x0e, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53,
	0x53, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0e, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x18, 0x63, 0x61, 0x70, 0x69, 0x74,
	0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x63, 0x61, 0x70, 0x69, 0x74,
	0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x64, 0x12, 0x51, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x53, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65,
	0x63, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x15,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x46, 0x6f, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x21, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x1e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x46,
	0x6f, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64,
	0x12, 0x40, 0x0a, 0x0e, 0x65, 0x6d, 0x70, 0x68, 0x61, 0x73, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x72,
	0x6b, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x53, 0x53, 0x4f,
	0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x0d, 0x65, 0x6d, 0x70, 0x68, 0x61, 0x73, 0x69, 0x73, 0x4d, 0x61, 0x72,
	0x6b, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x65, 0x6d, 0x70, 0x68, 0x61, 0x73, 0x69, 0x73, 0x5f, 0x6d,
	0x61, 0x72, 0x6b, 0x73, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x65, 0x6d, 0x70, 0x68, 0x61, 0x73, 0x69, 0x73, 0x4d, 0x61,
	0x72, 0x6b, 0x73, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x04,
	0x62, 0x6f, 0x6c, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x54, 0x53, 0x53,
	0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x42, 0x6f, 0x6f, 0x6c, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x04, 0x62, 0x6f, 0x6c, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x6f, 0x6c,
	0x64, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x62, 0x6f, 0x6c, 0x64, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64,
	0x12, 0x2f, 0x0a, 0x06, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x54, 0x53, 0x53, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x42, 0x6f,
	0x6f, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x06, 0x69, 0x74, 0x61, 0x6c, 0x69,
	0x63, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x63, 0x5f, 0x75, 0x6e, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x74, 0x61,
	0x6c, 0x69, 0x63, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x0d,
	0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70,
	0x65, 0x63, 0x46, 0x6f, 0x6e, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0c, 0x66, 0x6f, 0x6e, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x66, 0x6f, 0x6e, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x09, 0x66,
	0x6f, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x54, 0x53, 0x53, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x08, 0x66, 0x6f, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x66, 0x6f, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x09, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x53, 0x53, 0x4f, 0x53, 0x2e,
	0x53, 0x70, 0x65, 0x63, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x08, 0x66, 0x6f, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x66,
	0x6f, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x66, 0x6f, 0x6e, 0x74, 0x53, 0x69,
	0x7a, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x0f, 0x66,
	0x6f, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x53, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70,
	0x65, 0x63, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x0d, 0x66, 0x6f, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x39,
	0x0a, 0x19, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x74,
	0x61, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x16, 0x66, 0x6f, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61,
	0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x07, 0x6b, 0x65, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x53,
	0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x07, 0x6b, 0x65, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x2b,
	0x0a, 0x11, 0x6b, 0x65, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x6b, 0x65, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x54, 0x53, 0x53, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x75,
	0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x12, 0x38, 0x0a, 0x09, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x53, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70,
	0x65, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x09, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x6c,
	0x69, 0x67, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6c, 0x69, 0x67, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x0b,
	0x74, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x44, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x53,
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x74, 0x65,
	0x78, 0x74, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x65, 0x78, 0x74,
	0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x74, 0x65, 0x78, 0x74, 0x53, 0x68, 0x61,
	0x64, 0x6f, 0x77, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x10,
	0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x74, 0x68, 0x72, 0x75, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x53, 0x53, 0x4f, 0x53, 0x2e,
	0x53, 0x70, 0x65, 0x63, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x0f, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x74, 0x68, 0x72, 0x75, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x12, 0x3c, 0x0a, 0x1a, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x74, 0x68, 0x72, 0x75, 0x5f,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x74, 0x68, 0x72,
	0x75, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12,
	0x3a, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x74, 0x68, 0x72, 0x75, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x53, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65,
	0x63, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x0a, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x74, 0x68, 0x72, 0x75, 0x12, 0x31, 0x0a, 0x14, 0x73,
	0x74, 0x72, 0x69, 0x6b, 0x65, 0x74, 0x68, 0x72, 0x75, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x73, 0x74, 0x72, 0x69, 0x6b,
	0x65, 0x74, 0x68, 0x72, 0x75, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x44,
	0x0a, 0x10, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x74, 0x68, 0x72, 0x75, 0x5f, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x53, 0x53, 0x4f,
	0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x0f, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x74, 0x68, 0x72, 0x75, 0x57,
	0x69, 0x64, 0x74, 0x68, 0x12, 0x3c, 0x0a, 0x1a, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x74, 0x68,
	0x72, 0x75, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65,
	0x74, 0x68, 0x72, 0x75, 0x57, 0x69, 0x64, 0x74, 0x68, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x64, 0x12, 0x3c, 0x0a, 0x0b, 0x73, 0x75, 0x70, 0x65, 0x72, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x53, 0x53, 0x4f, 0x53,
	0x2e, 0x53, 0x70, 0x65, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x0b, 0x73, 0x75, 0x70, 0x65, 0x72, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x12, 0x33, 0x0a, 0x15, 0x73, 0x75, 0x70, 0x65, 0x72, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f,
	0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x14, 0x73, 0x75, 0x70, 0x65, 0x72, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x55, 0x6e, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x0f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x62, 0x61,
	0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x54, 0x53, 0x53, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0e, 0x74, 0x65, 0x78, 0x74, 0x42, 0x61,
	0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x3a, 0x0a, 0x19, 0x74, 0x65, 0x78, 0x74,
	0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x75, 0x6e, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x74, 0x65, 0x78,
	0x74, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x55, 0x6e, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x53, 0x53, 0x4f, 0x53, 0x2e,
	0x53, 0x70, 0x65, 0x63, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x08, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x2d, 0x0a, 0x12, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x0f, 0x75, 0x6e,
	0x64, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x29, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x53, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65,
	0x63, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0e, 0x75,
	0x6e, 0x64, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x3a, 0x0a,
	0x19, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x17, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x6e, 0x64,
	0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54,
	0x53, 0x53, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65,
	0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x09, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x0f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x54, 0x53, 0x53, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c,
	0x69, 0x6e, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x3a, 0x0a, 0x19, 0x75, 0x6e, 0x64, 0x65,
	0x72, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x75, 0x6e, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x75, 0x6e, 0x64,
	0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x55, 0x6e, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x0f, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6b, 0x65, 0x74, 0x68, 0x72, 0x75, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x54, 0x53, 0x53, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x42, 0x6f, 0x6f, 0x6c, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0e, 0x77, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x72, 0x69,
	0x6b, 0x65, 0x74, 0x68, 0x72, 0x75, 0x12, 0x3a, 0x0a, 0x19, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6b, 0x65, 0x74, 0x68, 0x72, 0x75, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x64, 0x18, 0x30, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x77, 0x6f, 0x72, 0x64, 0x53,
	0x74, 0x72, 0x69, 0x6b, 0x65, 0x74, 0x68, 0x72, 0x75, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x64, 0x12, 0x3e, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x54, 0x53, 0x53,
	0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x42, 0x6f, 0x6f, 0x6c, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x64, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x77, 0x6f, 0x72, 0x64, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c,
	0x69, 0x6e, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x47, 0x0a, 0x11,
	0x77, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x53, 0x53, 0x4f, 0x53,
	0x2e, 0x53, 0x70, 0x65, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x10, 0x77, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x1b, 0x77, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x18, 0x34, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x77, 0x72, 0x69, 0x74,
	0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x46, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x35, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x54, 0x53, 0x53, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63,
	0x42, 0x6f, 0x6f, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x10, 0x69, 0x73, 0x4e,
	0x61, 0x6d, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x40, 0x0a,
	0x1d, 0x69, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x36,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x69, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12,
	0x5f, 0x0a, 0x1f, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x75, 0x73, 0x65, 0x73, 0x5f, 0x6c, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x54, 0x53, 0x53, 0x53, 0x4f,
	0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x42, 0x6f, 0x6f, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x1d, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x73, 0x65, 0x73, 0x4c, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x12, 0x59, 0x0a, 0x29, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x73, 0x5f, 0x6c, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x38, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x26, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x73, 0x4c, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x10, 0x63,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18,
	0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x44, 0x53, 0x4f, 0x53, 0x2e, 0x53,
	0x70, 0x65, 0x63, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x53, 0x74, 0x72, 0x6f, 0x6b,
	0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x73,
	0x74, 0x72, 0x6f, 0x6b, 0x65, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18,
	0x3a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12,
	0x3e, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x6c,
	0x6c, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x54, 0x53, 0x44, 0x53, 0x4f, 0x53,
	0x2e, 0x53, 0x70, 0x65, 0x63, 0x46, 0x69, 0x6c, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x6c, 0x12,
	0x38, 0x0a, 0x18, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x6c,
	0x6c, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x3c, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x16, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x6c,
	0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x70, 0x0a, 0x29, 0x63, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x68, 0x6f, 0x75,
	0x6c, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x54,
	0x53, 0x53, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x42, 0x6f, 0x6f, 0x6c, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x24, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x46, 0x69, 0x6c, 0x6c, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x46, 0x69, 0x6c, 0x6c, 0x54, 0x65,
	0x78, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x6a, 0x0a, 0x33, 0x63,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x68,
	0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x64, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x2d, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x6c, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x46, 0x69, 0x6c,
	0x6c, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x55, 0x6e,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x22, 0xcf, 0x08, 0x0a, 0x23, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12,
	0x35, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x07, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x73, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x54, 0x53, 0x53, 0x53, 0x4f, 0x53,
	0x2e, 0x53, 0x70, 0x65, 0x63, 0x42, 0x6f, 0x6f, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x14,
	0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x74,
	0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12,
	0x35, 0x0a, 0x07, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x50,
	0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x07, 0x6d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x73, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x73, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x64, 0x12, 0x4b, 0x0a, 0x14, 0x6d, 0x69, 0x6e, 0x5f, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x53, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x12, 0x6d, 0x69,
	0x6e, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x65, 0x74,
	0x12, 0x43, 0x0a, 0x1e, 0x6d, 0x69, 0x6e, 0x5f, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74,
	0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x74, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x6d, 0x69, 0x6e, 0x48, 0x6f, 0x72,
	0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x65, 0x74, 0x55, 0x6e, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x07, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x53, 0x4f, 0x53,
	0x2e, 0x53, 0x70, 0x65, 0x63, 0x50, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x07, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x11,
	0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67,
	0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x0d, 0x73, 0x68, 0x72,
	0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x54, 0x53, 0x53, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x42, 0x6f,
	0x6f, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0b, 0x73, 0x68, 0x72, 0x69, 0x6e,
	0x6b, 0x54, 0x6f, 0x46, 0x69, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x73, 0x68, 0x72, 0x69, 0x6e, 0x6b,
	0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x69, 0x74, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x73, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x54,
	0x6f, 0x46, 0x69, 0x74, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x49, 0x0a,
	0x12, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x53, 0x53,
	0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x11, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41,
	0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x1c, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75,
	0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x0d, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x54, 0x53, 0x53, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x42,
	0x6f, 0x6f, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0c, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64,
	0x12, 0x47, 0x0a, 0x11, 0x77, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53,
	0x53, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x10, 0x77, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x1b, 0x77, 0x72, 0x69,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75,
	0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19,
	0x77, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x22, 0xc8, 0x03, 0x0a, 0x2c, 0x44, 0x72,
	0x6f, 0x70, 0x43, 0x61, 0x70, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x53, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x64, 0x72,
	0x6f, 0x70, 0x5f, 0x63, 0x61, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65,
	0x63, 0x44, 0x72, 0x6f, 0x70, 0x43, 0x61, 0x70, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x0c, 0x64, 0x72, 0x6f, 0x70, 0x43, 0x61, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x37, 0x0a,
	0x18, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x63, 0x61, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x15, 0x64, 0x72, 0x6f, 0x70, 0x43, 0x61, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x55, 0x6e, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x4c, 0x0a, 0x15, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x63,
	0x61, 0x70, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x44, 0x53, 0x4f, 0x53, 0x2e, 0x53,
	0x70, 0x65, 0x63, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x12, 0x64, 0x72, 0x6f, 0x70, 0x43, 0x61, 0x70, 0x53, 0x68, 0x61, 0x70, 0x65, 0x53, 0x74,
	0x72, 0x6f, 0x6b, 0x65, 0x12, 0x44, 0x0a, 0x1f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x63, 0x61, 0x70,
	0x5f, 0x73, 0x68, 0x61, 0x70, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x5f, 0x75, 0x6e,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x64,
	0x72, 0x6f, 0x70, 0x43, 0x61, 0x70, 0x53, 0x68, 0x61, 0x70, 0x65, 0x53, 0x74, 0x72, 0x6f, 0x6b,
	0x65, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x46, 0x0a, 0x13, 0x64, 0x72,
	0x6f, 0x70, 0x5f, 0x63, 0x61, 0x70, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x65, 0x5f, 0x66, 0x69, 0x6c,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x54, 0x53, 0x44, 0x53, 0x4f, 0x53,
	0x2e, 0x53, 0x70, 0x65, 0x63, 0x46, 0x69, 0x6c, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x10, 0x64, 0x72, 0x6f, 0x70, 0x43, 0x61, 0x70, 0x53, 0x68, 0x61, 0x70, 0x65, 0x46, 0x69,
	0x6c, 0x6c, 0x12, 0x40, 0x0a, 0x1d, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x63, 0x61, 0x70, 0x5f, 0x73,
	0x68, 0x61, 0x70, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x64, 0x72, 0x6f, 0x70, 0x43,
	0x61, 0x70, 0x53, 0x68, 0x61, 0x70, 0x65, 0x46, 0x69, 0x6c, 0x6c, 0x55, 0x6e, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x22, 0x8e, 0x04, 0x0a, 0x24, 0x44, 0x72, 0x6f, 0x70, 0x43, 0x61, 0x70,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x53, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x4c, 0x0a,
	0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x54,
	0x53, 0x57, 0x50, 0x53, 0x4f, 0x53, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x53, 0x4f, 0x53, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x74, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0e, 0x64,
	0x72, 0x6f, 0x70, 0x5f, 0x63, 0x61, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70,
	0x65, 0x63, 0x44, 0x72, 0x6f, 0x70, 0x43, 0x61, 0x70, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x0c, 0x64, 0x72, 0x6f, 0x70, 0x43, 0x61, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x37,
	0x0a, 0x18, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x63, 0x61, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x15, 0x64, 0x72, 0x6f, 0x70, 0x43, 0x61, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x55, 0x6e,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x4c, 0x0a, 0x15, 0x64, 0x72, 0x6f, 0x70, 0x5f,
	0x63, 0x61, 0x70, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x44, 0x53, 0x4f, 0x53, 0x2e,
	0x53, 0x70, 0x65, 0x63, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x12, 0x64, 0x72, 0x6f, 0x70, 0x43, 0x61, 0x70, 0x53, 0x68, 0x61, 0x70, 0x65, 0x53,
	0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x44, 0x0a, 0x1f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x63, 0x61,
	0x70, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x5f, 0x75,
	0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b,
	0x64, 0x72, 0x6f, 0x70, 0x43, 0x61, 0x70, 0x53, 0x68, 0x61, 0x70, 0x65, 0x53, 0x74, 0x72, 0x6f,
	0x6b, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x46, 0x0a, 0x13, 0x64,
	0x72, 0x6f, 0x70, 0x5f, 0x63, 0x61, 0x70, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x65, 0x5f, 0x66, 0x69,
	0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x54, 0x53, 0x44, 0x53, 0x4f,
	0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x46, 0x69, 0x6c, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x10, 0x64, 0x72, 0x6f, 0x70, 0x43, 0x61, 0x70, 0x53, 0x68, 0x61, 0x70, 0x65, 0x46,
	0x69, 0x6c, 0x6c, 0x12, 0x40, 0x0a, 0x1d, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x63, 0x61, 0x70, 0x5f,
	0x73, 0x68, 0x61, 0x70, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x64, 0x72, 0x6f, 0x70,
	0x43, 0x61, 0x70, 0x53, 0x68, 0x61, 0x70, 0x65, 0x46, 0x69, 0x6c, 0x6c, 0x55, 0x6e, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x64, 0x22, 0xda, 0x10, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x53, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x40, 0x0a, 0x0f, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x53, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70,
	0x65, 0x63, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0d,
	0x6c, 0x69, 0x73, 0x74, 0x46, 0x6f, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x39, 0x0a,
	0x19, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x16, 0x6c, 0x69, 0x73, 0x74, 0x46, 0x6f, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x55,
	0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x09, 0x66, 0x6f, 0x6e, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53,
	0x53, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x08, 0x66, 0x6f, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2e, 0x0a, 0x13, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x75, 0x6e,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x66,
	0x6f, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64,
	0x12, 0x6b, 0x0a, 0x1e, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x63,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x72, 0x72,
	0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x53,
	0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x1a, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x63, 0x54, 0x65,
	0x78, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x55, 0x0a,
	0x28, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x63, 0x5f, 0x74, 0x65,
	0x78, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f,
	0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x23, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x63, 0x54, 0x65, 0x78, 0x74,
	0x49, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x55, 0x6e, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x12, 0x6e, 0x0a, 0x19, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x5f, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x61, 0x72, 0x72, 0x61,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x53, 0x4f,
	0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x16, 0x6c, 0x69,
	0x73, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x12, 0x4c, 0x0a, 0x23, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x5f, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x61, 0x72, 0x72, 0x61,
	0x79, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1f, 0x6c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x47, 0x65, 0x6f, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x41, 0x72, 0x72, 0x61, 0x79, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x64, 0x12, 0x69, 0x0a, 0x1b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x72, 0x72, 0x61,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x53, 0x4f,
	0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x41, 0x72, 0x72, 0x61, 0x79, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x17, 0x6c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x4f, 0x0a,
	0x25, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x75, 0x6e, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x20, 0x6c, 0x69,
	0x73, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x5e,
	0x0a, 0x17, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x6e, 0x74, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x14, 0x6c, 0x69, 0x73, 0x74, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x48,
	0x0a, 0x21, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x6e, 0x74, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x6c, 0x69, 0x73, 0x74, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x55,
	0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x67, 0x0a, 0x17, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x61, 0x72,
	0x72, 0x61, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x54, 0x53, 0x57, 0x50,
	0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x14, 0x6c, 0x69, 0x73,
	0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x12, 0x48, 0x0a, 0x21, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x75, 0x6e, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x6c, 0x69,
	0x73, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x6a, 0x0a, 0x1e, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x65, 0x64,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70,
	0x65, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1a, 0x6c, 0x69, 0x73,
	0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x69, 0x65, 0x72, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x55, 0x0a, 0x28, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x23, 0x6c, 0x69, 0x73, 0x74, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x54, 0x69, 0x65, 0x72, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3a,
	0x0a, 0x0b, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x44, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65,
	0x63, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0a,
	0x74, 0x65, 0x78, 0x74, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x65,
	0x78, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x74, 0x65, 0x78, 0x74, 0x53,
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x5f,
	0x0a, 0x17, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x14, 0x6c, 0x69, 0x73, 0x74, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12,
	0x48, 0x0a, 0x21, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x6c, 0x69, 0x73, 0x74,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x5c, 0x0a, 0x16, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x72,
	0x72, 0x61, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x54, 0x53, 0x57, 0x50,
	0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x13, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x64, 0x65,
	0x6e, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x46, 0x0a, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x72, 0x72, 0x61,
	0x79, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1c, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x6e,
	0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12,
	0x62, 0x0a, 0x15, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x54, 0x53, 0x57, 0x50, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x12, 0x6c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x12, 0x44, 0x0a, 0x1f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x75, 0x6e, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x6c, 0x69,
	0x73, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x47, 0x0a, 0x11, 0x77, 0x72, 0x69,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x53, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70,
	0x65, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x10, 0x77, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x1b, 0x77, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x77, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x64, 0x22, 0xb9, 0x1a, 0x0a, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x74, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x53, 0x53, 0x4f,
	0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x09, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x2f, 0x0a, 0x13, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x61, 0x6c,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64,
	0x12, 0x3a, 0x0a, 0x0b, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x53, 0x53, 0x4f, 0x53, 0x2e, 0x53,
	0x70, 0x65, 0x63, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x0a, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x54, 0x61, 0x62, 0x12, 0x32, 0x0a, 0x15,
	0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x5f, 0x75, 0x6e, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x64, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x54, 0x61, 0x62, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64,
	0x12, 0x45, 0x0a, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x5f,
	0x73, 0x74, 0x6f, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53,
	0x53, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54,
	0x61, 0x62, 0x53, 0x74, 0x6f, 0x70, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x73, 0x5f, 0x75, 0x6e, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x61, 0x62, 0x53, 0x74, 0x6f, 0x70, 0x73, 0x55, 0x6e, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x54, 0x53, 0x53, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x46, 0x69, 0x6c, 0x6c, 0x12, 0x38, 0x0a, 0x18, 0x70, 0x61, 0x72, 0x61, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x70, 0x61, 0x72, 0x61, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x46, 0x69, 0x6c, 0x6c, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x12, 0x45, 0x0a, 0x11, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54,
	0x53, 0x53, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x69,
	0x6e, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x1b, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x55, 0x6e,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x5e, 0x0a, 0x19, 0x66, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x73,
	0x74, 0x79, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x54, 0x53, 0x57,
	0x50, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x17,
	0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x4d, 0x0a, 0x23, 0x66, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x73,
	0x74, 0x79, 0x6c, 0x65, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x50,
	0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x55, 0x6e, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x09, 0x68, 0x79, 0x70, 0x68, 0x65, 0x6e,
	0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x54, 0x53, 0x53, 0x53,
	0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x42, 0x6f, 0x6f, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x09, 0x68, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a,
	0x13, 0x68, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x68, 0x79, 0x70, 0x68,
	0x65, 0x6e, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x4b,
	0x0a, 0x12, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73,
	0x74, 0x79, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x54, 0x53, 0x57,
	0x50, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x10, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x19, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x47, 0x0a, 0x13,
	0x6b, 0x65, 0x65, 0x70, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x67, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x54, 0x53, 0x53, 0x53,
	0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x42, 0x6f, 0x6f, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x11, 0x6b, 0x65, 0x65, 0x70, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x54, 0x6f, 0x67,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x1d, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x67, 0x65, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x75, 0x6e, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x6b, 0x65,
	0x65, 0x70, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x54, 0x6f, 0x67, 0x65, 0x74, 0x68, 0x65, 0x72, 0x55,
	0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x0e, 0x6b, 0x65, 0x65, 0x70,
	0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x54, 0x53, 0x53, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x42, 0x6f,
	0x6f, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0c, 0x6b, 0x65, 0x65, 0x70, 0x57,
	0x69, 0x74, 0x68, 0x4e, 0x65, 0x78, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x6b, 0x65, 0x65, 0x70, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x6b, 0x65, 0x65, 0x70, 0x57,
	0x69, 0x74, 0x68, 0x4e, 0x65, 0x78, 0x74, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64,
	0x12, 0x3a, 0x0a, 0x0b, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x53, 0x53, 0x4f, 0x53, 0x2e, 0x53,
	0x70, 0x65, 0x63, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x0a, 0x6c, 0x65, 0x66, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15,
	0x6c, 0x65, 0x66, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x6c, 0x65, 0x66,
	0x74, 0x49, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64,
	0x12, 0x42, 0x0a, 0x0c, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x53, 0x4f, 0x53,
	0x2e, 0x53, 0x70, 0x65, 0x63, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0b, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x61,
	0x63, 0x69, 0x6e, 0x67, 0x12, 0x34, 0x0a, 0x16, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x70, 0x61,
	0x63, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x61, 0x63, 0x69, 0x6e,
	0x67, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x0d, 0x6f, 0x75,
	0x74, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x53, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0c, 0x6f,
	0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x36, 0x0a, 0x17, 0x6f,
	0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x75, 0x6e, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x6f, 0x75,
	0x74, 0x6c, 0x69, 0x6e, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x64, 0x12, 0x48, 0x0a, 0x12, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73,
	0x74, 0x79, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x54, 0x53, 0x53, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x49, 0x6e, 0x74,
	0x65, 0x67, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x10, 0x6f, 0x75, 0x74,
	0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a,
	0x1c, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x19, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x43,
	0x0a, 0x11, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x5f, 0x62, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x54, 0x53, 0x53, 0x53,
	0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x42, 0x6f, 0x6f, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x0f, 0x70, 0x61, 0x67, 0x65, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x42, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x72, 0x65, 0x61,
	0x6b, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x70, 0x61, 0x67, 0x65, 0x42, 0x72,
	0x65, 0x61, 0x6b, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x64, 0x12, 0x47, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f,
	0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x54, 0x53, 0x53, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x10, 0x70, 0x61, 0x72, 0x61, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x3e, 0x0a, 0x1b, 0x70,
	0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x19, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x42, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x52, 0x0a, 0x15, 0x70,
	0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x54, 0x53, 0x57,
	0x50, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x75, 0x6c, 0x65, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x13, 0x70, 0x61, 0x72, 0x61,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x45, 0x0a, 0x1f, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x55, 0x6e, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x4b, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x53, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70,
	0x65, 0x63, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x12, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x57, 0x69,
	0x64, 0x74, 0x68, 0x12, 0x43, 0x0a, 0x1e, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x75, 0x6e, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x70, 0x61, 0x72,
	0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x55,
	0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x0c, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x54, 0x53, 0x53, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0b, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x49, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64,
	0x18, 0x26, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x72, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x64,
	0x65, 0x6e, 0x74, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x0b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x27, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x53, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x73, 0x70, 0x61, 0x63, 0x65, 0x41, 0x66,
	0x74, 0x65, 0x72, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x0c,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x29, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x53, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64,
	0x12, 0x44, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x73, 0x74,
	0x72, 0x6f, 0x6b, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x44,
	0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x70, 0x61, 0x72, 0x61,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x61, 0x62, 0x73, 0x18, 0x2d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65,
	0x63, 0x54, 0x61, 0x62, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x61,
	0x62, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x61, 0x62, 0x73, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x74, 0x61, 0x62, 0x73,
	0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x0d, 0x77, 0x69, 0x64,
	0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x54, 0x53, 0x53, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0c, 0x77, 0x69,
	0x64, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x36, 0x0a, 0x17, 0x77, 0x69,
	0x64, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x75, 0x6e, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x30, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x77, 0x69, 0x64,
	0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x64, 0x12, 0x4c, 0x0a, 0x16, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x5f, 0x62, 0x6f,
	0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x31, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x54, 0x53, 0x53, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63,
	0x42, 0x6f, 0x6f, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x13, 0x73, 0x68, 0x6f,
	0x77, 0x49, 0x6e, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x46, 0x0a, 0x20, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x5f, 0x62, 0x6f, 0x6f, 0x6b,
	0x6d, 0x61, 0x72, 0x6b, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x18, 0x32, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x73, 0x68, 0x6f, 0x77,
	0x49, 0x6e, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x55,
	0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x4c, 0x0a, 0x17, 0x73, 0x68, 0x6f, 0x77,
	0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x5f, 0x6f, 0x5f, 0x63, 0x5f, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x54, 0x53, 0x53, 0x53,
	0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x42, 0x6f, 0x6f, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x12, 0x73, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x54, 0x4f, 0x43, 0x4e, 0x61, 0x76,
	0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x46, 0x0a, 0x21, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x69,
	0x6e, 0x5f, 0x74, 0x5f, 0x6f, 0x5f, 0x63, 0x5f, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x34, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1b, 0x73, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x54, 0x4f, 0x43, 0x4e, 0x61, 0x76, 0x69,
	0x67, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x22, 0x86,
	0x1b, 0x0a, 0x2d, 0x54, 0x53, 0x57, 0x50, 0x53, 0x4f, 0x53, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x12, 0x4c, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x53, 0x4f, 0x53, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x53, 0x4f,
	0x53, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x74,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x38,
	0x0a, 0x09, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x53, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x09, 0x61,
	0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x61, 0x6c, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x0b, 0x64, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x54, 0x53, 0x53, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x64, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x54, 0x61, 0x62, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x5f, 0x74, 0x61, 0x62, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x54, 0x61, 0x62,
	0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x11, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x53, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70,
	0x65, 0x63, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x61, 0x62, 0x53, 0x74, 0x6f, 0x70, 0x73,
	0x12, 0x3d, 0x0a, 0x1b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x5f,
	0x73, 0x74, 0x6f, 0x70, 0x73, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x61,
	0x62, 0x53, 0x74, 0x6f, 0x70, 0x73, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12,
	0x3f, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x66, 0x69, 0x6c,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x53, 0x53, 0x4f, 0x53,
	0x2e, 0x53, 0x70, 0x65, 0x63, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x46, 0x69, 0x6c, 0x6c,
	0x12, 0x38, 0x0a, 0x18, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x66, 0x69,
	0x6c, 0x6c, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x16, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x46, 0x69, 0x6c,
	0x6c, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x11, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x53, 0x53, 0x4f, 0x53, 0x2e, 0x53,
	0x70, 0x65, 0x63, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x0f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x6e,
	0x74, 0x12, 0x3d, 0x0a, 0x1b, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x69, 0x6e,
	0x65, 0x49, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64,
	0x12, 0x5e, 0x0a, 0x19, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70,
	0x65, 0x63, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x17, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69,
	0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x12, 0x4d, 0x0a, 0x23, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x75, 0x6e,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x20, 0x66,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12,
	0x35, 0x0a, 0x09, 0x68, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x54, 0x53, 0x53, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63,
	0x42, 0x6f, 0x6f, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x09, 0x68, 0x79, 0x70,
	0x68, 0x65, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x68, 0x79, 0x70, 0x68, 0x65, 0x6e,
	0x61, 0x74, 0x65, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x12, 0x68, 0x79, 0x70, 0x68, 0x65, 0x6e, 0x61, 0x74, 0x65, 0x55, 0x6e,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x4b, 0x0a, 0x12, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70,
	0x65, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x10, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x55, 0x6e, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x47, 0x0a, 0x13, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x67, 0x65, 0x74, 0x68, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x54, 0x53, 0x53, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63,
	0x42, 0x6f, 0x6f, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x11, 0x6b, 0x65, 0x65,
	0x70, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x54, 0x6f, 0x67, 0x65, 0x74, 0x68, 0x65, 0x72, 0x12, 0x41,
	0x0a, 0x1d, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x67,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x6b, 0x65, 0x65, 0x70, 0x4c, 0x69, 0x6e, 0x65, 0x73,
	0x54, 0x6f, 0x67, 0x65, 0x74, 0x68, 0x65, 0x72, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x12, 0x3d, 0x0a, 0x0e, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6e,
	0x65, 0x78, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x54, 0x53, 0x53, 0x53,
	0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x42, 0x6f, 0x6f, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x0c, 0x6b, 0x65, 0x65, 0x70, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x65, 0x78, 0x74,
	0x12, 0x37, 0x0a, 0x18, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x15, 0x6b, 0x65, 0x65, 0x70, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x65, 0x78, 0x74,
	0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x0b, 0x6c, 0x65, 0x66,
	0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x54, 0x53, 0x53, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x6c, 0x65, 0x66, 0x74, 0x49,
	0x6e, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x6c, 0x65, 0x66, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x6e, 0x74,
	0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x0c, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x4c, 0x69,
	0x6e, 0x65, 0x53, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x0b, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x34, 0x0a,
	0x16, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x6e,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x6c,
	0x69, 0x6e, 0x65, 0x53, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x53,
	0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x36, 0x0a, 0x17, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x48, 0x0a, 0x12,
	0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x53, 0x53, 0x4f,
	0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x6e, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x6f, 0x75,
	0x74, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x55, 0x6e,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x11, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x62, 0x72, 0x65, 0x61, 0x6b, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x54, 0x53, 0x53, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63,
	0x42, 0x6f, 0x6f, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0f, 0x70, 0x61, 0x67,
	0x65, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x3d, 0x0a, 0x1b,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x18, 0x70, 0x61, 0x67, 0x65, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x42, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x47, 0x0a, 0x11, 0x70,
	0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x53, 0x53, 0x4f, 0x53, 0x2e,
	0x53, 0x70, 0x65, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x10, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x42, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x3e, 0x0a, 0x1b, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x5f, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x70, 0x61, 0x72, 0x61, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x55, 0x6e, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x12, 0x52, 0x0a, 0x15, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x22, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70,
	0x65, 0x63, 0x52, 0x75, 0x6c, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x13, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x52, 0x75,
	0x6c, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x45, 0x0a, 0x1f, 0x70, 0x61, 0x72, 0x61,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1c, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x52, 0x75, 0x6c, 0x65,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12,
	0x4b, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x54, 0x53, 0x53, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x12, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x43, 0x0a, 0x1e,
	0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x52,
	0x75, 0x6c, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x12, 0x3c, 0x0a, 0x0c, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x6e,
	0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x53, 0x53, 0x4f, 0x53,
	0x2e, 0x53, 0x70, 0x65, 0x63, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x0b, 0x72, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x12,
	0x34, 0x0a, 0x16, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x5f,
	0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x14, 0x72, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x0b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x53,
	0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x73, 0x70, 0x61, 0x63, 0x65, 0x41, 0x66, 0x74, 0x65,
	0x72, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x29, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x13, 0x73, 0x70, 0x61, 0x63, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x55, 0x6e, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x0c, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x62,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53,
	0x53, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x42, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x62, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x2b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x14, 0x73, 0x70, 0x61, 0x63, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x10, 0x70, 0x61, 0x72,
	0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x2c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x44, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65,
	0x63, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0f,
	0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12,
	0x3c, 0x0a, 0x1a, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x73, 0x74, 0x72,
	0x6f, 0x6b, 0x65, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x2d, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x18, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x53, 0x74,
	0x72, 0x6f, 0x6b, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x2c, 0x0a,
	0x04, 0x74, 0x61, 0x62, 0x73, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53,
	0x57, 0x50, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x54, 0x61, 0x62, 0x73, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x04, 0x74, 0x61, 0x62, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x74,
	0x61, 0x62, 0x73, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x2f, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x74, 0x61, 0x62, 0x73, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x64, 0x12, 0x3f, 0x0a, 0x0d, 0x77, 0x69, 0x64, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x53, 0x53,
	0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0c, 0x77, 0x69, 0x64, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x12, 0x36, 0x0a, 0x17, 0x77, 0x69, 0x64, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x31,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x77, 0x69, 0x64, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x4c, 0x0a, 0x16, 0x73,
	0x68, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x54, 0x53,
	0x53, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x42, 0x6f, 0x6f, 0x6c, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x13, 0x73, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x42, 0x6f, 0x6f, 0x6b,
	0x6d, 0x61, 0x72, 0x6b, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x20, 0x73, 0x68, 0x6f,
	0x77, 0x5f, 0x69, 0x6e, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1c, 0x73, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x42, 0x6f, 0x6f, 0x6b, 0x6d,
	0x61, 0x72, 0x6b, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x12, 0x4c, 0x0a, 0x17, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x5f, 0x6f,
	0x5f, 0x63, 0x5f, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x34, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x54, 0x53, 0x53, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63,
	0x42, 0x6f, 0x6f, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x12, 0x73, 0x68, 0x6f,
	0x77, 0x49, 0x6e, 0x54, 0x4f, 0x43, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x46, 0x0a, 0x21, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x5f, 0x6f, 0x5f, 0x63,
	0x5f, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x18, 0x35, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x73, 0x68, 0x6f, 0x77,
	0x49, 0x6e, 0x54, 0x4f, 0x43, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x6e,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x22, 0xe2, 0x06, 0x0a, 0x22, 0x53, 0x68, 0x61, 0x70,
	0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x44,
	0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x54, 0x53, 0x44, 0x53, 0x4f, 0x53, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x53, 0x68, 0x61, 0x70, 0x65,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x53, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x53, 0x4f, 0x53, 0x2e,
	0x53, 0x70, 0x65, 0x63, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x55,
	0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x07, 0x70, 0x61, 0x64, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x57, 0x50,
	0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x50, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x07, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x2b, 0x0a, 0x11, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x70, 0x61, 0x64, 0x64,
	0x69, 0x6e, 0x67, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x12,
	0x73, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x66,
	0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x54, 0x53, 0x53, 0x53, 0x4f,
	0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x42, 0x6f, 0x6f, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x0f, 0x73, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x54, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x46,
	0x69, 0x74, 0x12, 0x3e, 0x0a, 0x1c, 0x73, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x69, 0x74, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x73, 0x68, 0x72, 0x69, 0x6e, 0x6b,
	0x54, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x46, 0x69, 0x74, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x64, 0x12, 0x49, 0x0a, 0x12, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x61,
	0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x54, 0x53, 0x53, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x49, 0x6e, 0x74, 0x65,
	0x67, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x11, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a,
	0x1c, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1a, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x6c, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12,
	0x3c, 0x0a, 0x0d, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x54, 0x53, 0x53, 0x53, 0x4f, 0x53, 0x2e,
	0x53, 0x70, 0x65, 0x63, 0x42, 0x6f, 0x6f, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x0c, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x12, 0x36, 0x0a,
	0x17, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x75,
	0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x55, 0x6e, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x5a, 0x0a, 0x17, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x53, 0x4f, 0x53,
	0x2e, 0x53, 0x70, 0x65, 0x63, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x15, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x12, 0x49, 0x0a, 0x21, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x75, 0x6e, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x22, 0xa0, 0x03, 0x0a,
	0x25, 0x54, 0x4f, 0x43, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x74, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x4c, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x53, 0x4f, 0x53, 0x2e,
	0x54, 0x53, 0x57, 0x50, 0x53, 0x4f, 0x53, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x53, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x14, 0x74, 0x6f, 0x63, 0x5f, 0x73, 0x68, 0x6f, 0x77,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x54, 0x53, 0x53, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63,
	0x42, 0x6f, 0x6f, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x11, 0x74, 0x6f, 0x63,
	0x53, 0x68, 0x6f, 0x77, 0x50, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x42,
	0x0a, 0x1e, 0x74, 0x6f, 0x63, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x74, 0x6f, 0x63, 0x53, 0x68, 0x6f, 0x77, 0x50,
	0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x64, 0x12, 0x55, 0x0a, 0x15, 0x74, 0x6f, 0x63, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63,
	0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x12, 0x74, 0x6f, 0x63, 0x50, 0x61, 0x67, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x44, 0x0a, 0x1f, 0x74, 0x6f, 0x63,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1b, 0x74, 0x6f, 0x63, 0x50, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x22,
	0xe3, 0x02, 0x0a, 0x10, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x44, 0x69, 0x66, 0x66, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x68, 0x0a, 0x14, 0x63, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x53,
	0x4f, 0x53, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x53, 0x4f, 0x53, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x12, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x53, 0x65, 0x74, 0x12, 0x68, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x53, 0x4f, 0x53, 0x2e, 0x54, 0x53, 0x57,
	0x50, 0x53, 0x4f, 0x53, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x53, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x12, 0x70, 0x61, 0x72, 0x61,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x74, 0x12, 0x55,
	0x0a, 0x10, 0x73, 0x68, 0x61, 0x70, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73,
	0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x53,
	0x4f, 0x53, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x74, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0e, 0x73, 0x68, 0x61, 0x70, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x53, 0x65, 0x74, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x2f, 0x6b, 0x70, 0x62,
}

var (
	file_TSWPArchives_sos_proto_rawDescOnce sync.Once
	file_TSWPArchives_sos_proto_rawDescData = file_TSWPArchives_sos_proto_rawDesc
)

func file_TSWPArchives_sos_proto_rawDescGZIP() []byte {
	file_TSWPArchives_sos_proto_rawDescOnce.Do(func() {
		file_TSWPArchives_sos_proto_rawDescData = protoimpl.X.CompressGZIP(file_TSWPArchives_sos_proto_rawDescData)
	})
	return file_TSWPArchives_sos_proto_rawDescData
}

var file_TSWPArchives_sos_proto_msgTypes = make([]protoimpl.MessageInfo, 44)
var file_TSWPArchives_sos_proto_goTypes = []interface{}{
	(*SpecSetCharacterStyleArchive)(nil),                   // 0: TSWPSOS.SpecSetCharacterStyleArchive
	(*SpecSetColumnsArchive)(nil),                          // 1: TSWPSOS.SpecSetColumnsArchive
	(*SpecSetDropCapArchive)(nil),                          // 2: TSWPSOS.SpecSetDropCapArchive
	(*SpecSetFontFeaturesArchive)(nil),                     // 3: TSWPSOS.SpecSetFontFeaturesArchive
	(*SpecSetLineSpacingArchive)(nil),                      // 4: TSWPSOS.SpecSetLineSpacingArchive
	(*SpecSetListStyleArchive)(nil),                        // 5: TSWPSOS.SpecSetListStyleArchive
	(*SpecSetListStyleBoolArrayArchive)(nil),               // 6: TSWPSOS.SpecSetListStyleBoolArrayArchive
	(*SpecSetListStyleFloatArrayArchive)(nil),              // 7: TSWPSOS.SpecSetListStyleFloatArrayArchive
	(*SpecSetListStyleImageDataArrayArchive)(nil),          // 8: TSWPSOS.SpecSetListStyleImageDataArrayArchive
	(*SpecSetListStyleListLabelGeometryArrayArchive)(nil),  // 9: TSWPSOS.SpecSetListStyleListLabelGeometryArrayArchive
	(*SpecSetListStyleListLabelTypeArrayArchive)(nil),      // 10: TSWPSOS.SpecSetListStyleListLabelTypeArrayArchive
	(*SpecSetListStyleListNumberTypeArrayArchive)(nil),     // 11: TSWPSOS.SpecSetListStyleListNumberTypeArrayArchive
	(*SpecSetListStyleStringArrayArchive)(nil),             // 12: TSWPSOS.SpecSetListStyleStringArrayArchive
	(*SpecSetPaddingArchive)(nil),                          // 13: TSWPSOS.SpecSetPaddingArchive
	(*SpecSetParagraphStyleArchive)(nil),                   // 14: TSWPSOS.SpecSetParagraphStyleArchive
	(*SpecSetRuleOffsetArchive)(nil),                       // 15: TSWPSOS.SpecSetRuleOffsetArchive
	(*SpecSetTabsArchive)(nil),                             // 16: TSWPSOS.SpecSetTabsArchive
	(*SpecCharacterStyleArchive)(nil),                      // 17: TSWPSOS.SpecCharacterStyleArchive
	(*SpecColumnsArchive)(nil),                             // 18: TSWPSOS.SpecColumnsArchive
	(*SpecDropCapArchive)(nil),                             // 19: TSWPSOS.SpecDropCapArchive
	(*SpecFontFeaturesArchive)(nil),                        // 20: TSWPSOS.SpecFontFeaturesArchive
	(*SpecLineSpacingArchive)(nil),                         // 21: TSWPSOS.SpecLineSpacingArchive
	(*SpecListStyleArchive)(nil),                           // 22: TSWPSOS.SpecListStyleArchive
	(*SpecListStyleBoolArrayArchive)(nil),                  // 23: TSWPSOS.SpecListStyleBoolArrayArchive
	(*SpecListStyleFloatArrayArchive)(nil),                 // 24: TSWPSOS.SpecListStyleFloatArrayArchive
	(*SpecListStyleImageDataArrayArchive)(nil),             // 25: TSWPSOS.SpecListStyleImageDataArrayArchive
	(*SpecListStyleListLabelGeometryArrayArchive)(nil),     // 26: TSWPSOS.SpecListStyleListLabelGeometryArrayArchive
	(*SpecListStyleListLabelTypeArrayArchive)(nil),         // 27: TSWPSOS.SpecListStyleListLabelTypeArrayArchive
	(*SpecListStyleListNumberTypeArrayArchive)(nil),        // 28: TSWPSOS.SpecListStyleListNumberTypeArrayArchive
	(*SpecListStyleStringArrayArchive)(nil),                // 29: TSWPSOS.SpecListStyleStringArrayArchive
	(*SpecPaddingArchive)(nil),                             // 30: TSWPSOS.SpecPaddingArchive
	(*SpecParagraphStyleArchive)(nil),                      // 31: TSWPSOS.SpecParagraphStyleArchive
	(*SpecRuleOffsetArchive)(nil),                          // 32: TSWPSOS.SpecRuleOffsetArchive
	(*SpecTabsArchive)(nil),                                // 33: TSWPSOS.SpecTabsArchive
	(*TSWPSOSCharacterStylePropertyChangeSetArchive)(nil),  // 34: TSWPSOS.TSWPSOSCharacterStylePropertyChangeSetArchive
	(*ColumnStylePropertyChangeSetArchive)(nil),            // 35: TSWPSOS.ColumnStylePropertyChangeSetArchive
	(*DropCapSpecificStylePropertyChangeSetArchive)(nil),   // 36: TSWPSOS.DropCapSpecificStylePropertyChangeSetArchive
	(*DropCapStylePropertyChangeSetArchive)(nil),           // 37: TSWPSOS.DropCapStylePropertyChangeSetArchive
	(*ListStylePropertyChangeSetArchive)(nil),              // 38: TSWPSOS.ListStylePropertyChangeSetArchive
	(*ParagraphSpecificStylePropertyChangeSetArchive)(nil), // 39: TSWPSOS.ParagraphSpecificStylePropertyChangeSetArchive
	(*TSWPSOSParagraphStylePropertyChangeSetArchive)(nil),  // 40: TSWPSOS.TSWPSOSParagraphStylePropertyChangeSetArchive
	(*ShapeStylePropertyChangeSetArchive)(nil),             // 41: TSWPSOS.ShapeStylePropertyChangeSetArchive
	(*TOCEntryStylePropertyChangeSetArchive)(nil),          // 42: TSWPSOS.TOCEntryStylePropertyChangeSetArchive
	(*StyleDiffArchive)(nil),                               // 43: TSWPSOS.StyleDiffArchive
	(*Reference)(nil),                                      // 44: TSP.Reference
	(*ColumnsArchive)(nil),                                 // 45: TSWP.ColumnsArchive
	(*DropCapArchive)(nil),                                 // 46: TSWP.DropCapArchive
	(*FontFeatureArchive)(nil),                             // 47: TSWP.FontFeatureArchive
	(*LineSpacingArchive)(nil),                             // 48: TSWP.LineSpacingArchive
	(*ListStyleArchive_LabelImage)(nil),                    // 49: TSWP.ListStyleArchive.LabelImage
	(*ListStyleArchive_LabelGeometry)(nil),                 // 50: TSWP.ListStyleArchive.LabelGeometry
	(ListStyleArchive_LabelType)(0),                        // 51: TSWP.ListStyleArchive.LabelType
	(ListStyleArchive_NumberType)(0),                       // 52: TSWP.ListStyleArchive.NumberType
	(*PaddingArchive)(nil),                                 // 53: TSWP.PaddingArchive
	(*Point)(nil),                                          // 54: TSP.Point
	(*TabsArchive)(nil),                                    // 55: TSWP.TabsArchive
	(*SpecDoubleArchive)(nil),                              // 56: TSSSOS.SpecDoubleArchive
	(*SpecIntegerArchive)(nil),                             // 57: TSSSOS.SpecIntegerArchive
	(*SpecStringArchive)(nil),                              // 58: TSSSOS.SpecStringArchive
	(*SpecBoolArchive)(nil),                                // 59: TSSSOS.SpecBoolArchive
	(*SpecShadowArchive)(nil),                              // 60: TSDSOS.SpecShadowArchive
	(*SpecColorArchive)(nil),                               // 61: TSSSOS.SpecColorArchive
	(*SpecStrokeArchive)(nil),                              // 62: TSDSOS.SpecStrokeArchive
	(*SpecFillArchive)(nil),                                // 63: TSDSOS.SpecFillArchive
	(*BaseShapeStylePropertyChangeSetArchive)(nil),         // 64: TSDSOS.BaseShapeStylePropertyChangeSetArchive
}
var file_TSWPArchives_sos_proto_depIdxs = []int32{
	44,  // 0: TSWPSOS.SpecSetCharacterStyleArchive.character_style:type_name -> TSP.Reference
	45,  // 1: TSWPSOS.SpecSetColumnsArchive.columns:type_name -> TSWP.ColumnsArchive
	46,  // 2: TSWPSOS.SpecSetDropCapArchive.drop_cap:type_name -> TSWP.DropCapArchive
	47,  // 3: TSWPSOS.SpecSetFontFeaturesArchive.font_features:type_name -> TSWP.FontFeatureArchive
	48,  // 4: TSWPSOS.SpecSetLineSpacingArchive.line_spacing:type_name -> TSWP.LineSpacingArchive
	44,  // 5: TSWPSOS.SpecSetListStyleArchive.list_style:type_name -> TSP.Reference
	49,  // 6: TSWPSOS.SpecSetListStyleImageDataArrayArchive.list_style_image_data_array:type_name -> TSWP.ListStyleArchive.LabelImage
	50,  // 7: TSWPSOS.SpecSetListStyleListLabelGeometryArrayArchive.list_style_list_label_geometry_array:type_name -> TSWP.ListStyleArchive.LabelGeometry
	51,  // 8: TSWPSOS.SpecSetListStyleListLabelTypeArrayArchive.list_style_list_label_type_array:type_name -> TSWP.ListStyleArchive.LabelType
	52,  // 9: TSWPSOS.SpecSetListStyleListNumberTypeArrayArchive.list_style_list_number_type_array:type_name -> TSWP.ListStyleArchive.NumberType
	53,  // 10: TSWPSOS.SpecSetPaddingArchive.padding:type_name -> TSWP.PaddingArchive
	44,  // 11: TSWPSOS.SpecSetParagraphStyleArchive.paragraph_style:type_name -> TSP.Reference
	54,  // 12: TSWPSOS.SpecSetRuleOffsetArchive.rule_offset:type_name -> TSP.Point
	55,  // 13: TSWPSOS.SpecSetTabsArchive.tabs:type_name -> TSWP.TabsArchive
	0,   // 14: TSWPSOS.SpecCharacterStyleArchive.spec_set_character_style:type_name -> TSWPSOS.SpecSetCharacterStyleArchive
	1,   // 15: TSWPSOS.SpecColumnsArchive.spec_set_columns:type_name -> TSWPSOS.SpecSetColumnsArchive
	2,   // 16: TSWPSOS.SpecDropCapArchive.spec_set_drop_cap:type_name -> TSWPSOS.SpecSetDropCapArchive
	3,   // 17: TSWPSOS.SpecFontFeaturesArchive.spec_set_font_features:type_name -> TSWPSOS.SpecSetFontFeaturesArchive
	4,   // 18: TSWPSOS.SpecLineSpacingArchive.spec_set_line_spacing:type_name -> TSWPSOS.SpecSetLineSpacingArchive
	5,   // 19: TSWPSOS.SpecListStyleArchive.spec_set_list_style:type_name -> TSWPSOS.SpecSetListStyleArchive
	6,   // 20: TSWPSOS.SpecListStyleBoolArrayArchive.spec_set_list_style_bool_array:type_name -> TSWPSOS.SpecSetListStyleBoolArrayArchive
	7,   // 21: TSWPSOS.SpecListStyleFloatArrayArchive.spec_set_list_style_float_array:type_name -> TSWPSOS.SpecSetListStyleFloatArrayArchive
	8,   // 22: TSWPSOS.SpecListStyleImageDataArrayArchive.spec_set_list_style_image_data_array:type_name -> TSWPSOS.SpecSetListStyleImageDataArrayArchive
	9,   // 23: TSWPSOS.SpecListStyleListLabelGeometryArrayArchive.spec_set_list_style_list_label_geometry_array:type_name -> TSWPSOS.SpecSetListStyleListLabelGeometryArrayArchive
	10,  // 24: TSWPSOS.SpecListStyleListLabelTypeArrayArchive.spec_set_list_style_list_label_type_array:type_name -> TSWPSOS.SpecSetListStyleListLabelTypeArrayArchive
	11,  // 25: TSWPSOS.SpecListStyleListNumberTypeArrayArchive.spec_set_list_style_list_number_type_array:type_name -> TSWPSOS.SpecSetListStyleListNumberTypeArrayArchive
	12,  // 26: TSWPSOS.SpecListStyleStringArrayArchive.spec_set_list_style_string_array:type_name -> TSWPSOS.SpecSetListStyleStringArrayArchive
	13,  // 27: TSWPSOS.SpecPaddingArchive.spec_set_padding:type_name -> TSWPSOS.SpecSetPaddingArchive
	14,  // 28: TSWPSOS.SpecParagraphStyleArchive.spec_set_paragraph_style:type_name -> TSWPSOS.SpecSetParagraphStyleArchive
	15,  // 29: TSWPSOS.SpecRuleOffsetArchive.spec_set_rule_offset:type_name -> TSWPSOS.SpecSetRuleOffsetArchive
	16,  // 30: TSWPSOS.SpecTabsArchive.spec_set_tabs:type_name -> TSWPSOS.SpecSetTabsArchive
	56,  // 31: TSWPSOS.TSWPSOSCharacterStylePropertyChangeSetArchive.baseline_shift:type_name -> TSSSOS.SpecDoubleArchive
	57,  // 32: TSWPSOS.TSWPSOSCharacterStylePropertyChangeSetArchive.capitalization:type_name -> TSSSOS.SpecIntegerArchive
	58,  // 33: TSWPSOS.TSWPSOSCharacterStylePropertyChangeSetArchive.compatibility_font_name:type_name -> TSSSOS.SpecStringArchive
	58,  // 34: TSWPSOS.TSWPSOSCharacterStylePropertyChangeSetArchive.emphasis_marks:type_name -> TSSSOS.SpecStringArchive
	59,  // 35: TSWPSOS.TSWPSOSCharacterStylePropertyChangeSetArchive.bold:type_name -> TSSSOS.SpecBoolArchive
	59,  // 36: TSWPSOS.TSWPSOSCharacterStylePropertyChangeSetArchive.italic:type_name -> TSSSOS.SpecBoolArchive
	20,  // 37: TSWPSOS.TSWPSOSCharacterStylePropertyChangeSetArchive.font_features:type_name -> TSWPSOS.SpecFontFeaturesArchive
	58,  // 38: TSWPSOS.TSWPSOSCharacterStylePropertyChangeSetArchive.font_name:type_name -> TSSSOS.SpecStringArchive
	56,  // 39: TSWPSOS.TSWPSOSCharacterStylePropertyChangeSetArchive.font_size:type_name -> TSSSOS.SpecDoubleArchive
	56,  // 40: TSWPSOS.TSWPSOSCharacterStylePropertyChangeSetArchive.font_size_delta:type_name -> TSSSOS.SpecDoubleArchive
	56,  // 41: TSWPSOS.TSWPSOSCharacterStylePropertyChangeSetArchive.kerning:type_name -> TSSSOS.SpecDoubleArchive
	58,  // 42: TSWPSOS.TSWPSOSCharacterStylePropertyChangeSetArchive.language:type_name -> TSSSOS.SpecStringArchive
	57,  // 43: TSWPSOS.TSWPSOSCharacterStylePropertyChangeSetArchive.ligatures:type_name -> TSSSOS.SpecIntegerArchive
	60,  // 44: TSWPSOS.TSWPSOSCharacterStylePropertyChangeSetArchive.text_shadow:type_name -> TSDSOS.SpecShadowArchive
	61,  // 45: TSWPSOS.TSWPSOSCharacterStylePropertyChangeSetArchive.strikethru_color:type_name -> TSSSOS.SpecColorArchive
	57,  // 46: TSWPSOS.TSWPSOSCharacterStylePropertyChangeSetArchive.strikethru:type_name -> TSSSOS.SpecIntegerArchive
	56,  // 47: TSWPSOS.TSWPSOSCharacterStylePropertyChangeSetArchive.strikethru_width:type_name -> TSSSOS.SpecDoubleArchive
	57,  // 48: TSWPSOS.TSWPSOSCharacterStylePropertyChangeSetArchive.superscript:type_name -> TSSSOS.SpecIntegerArchive
	61,  // 49: TSWPSOS.TSWPSOSCharacterStylePropertyChangeSetArchive.text_background:type_name -> TSSSOS.SpecColorArchive
	56,  // 50: TSWPSOS.TSWPSOSCharacterStylePropertyChangeSetArchive.tracking:type_name -> TSSSOS.SpecDoubleArchive
	61,  // 51: TSWPSOS.TSWPSOSCharacterStylePropertyChangeSetArchive.underline_color:type_name -> TSSSOS.SpecColorArchive
	57,  // 52: TSWPSOS.TSWPSOSCharacterStylePropertyChangeSetArchive.underline:type_name -> TSSSOS.SpecIntegerArchive
	56,  // 53: TSWPSOS.TSWPSOSCharacterStylePropertyChangeSetArchive.underline_width:type_name -> TSSSOS.SpecDoubleArchive
	59,  // 54: TSWPSOS.TSWPSOSCharacterStylePropertyChangeSetArchive.word_strikethru:type_name -> TSSSOS.SpecBoolArchive
	59,  // 55: TSWPSOS.TSWPSOSCharacterStylePropertyChangeSetArchive.word_underline:type_name -> TSSSOS.SpecBoolArchive
	57,  // 56: TSWPSOS.TSWPSOSCharacterStylePropertyChangeSetArchive.writing_direction:type_name -> TSSSOS.SpecIntegerArchive
	59,  // 57: TSWPSOS.TSWPSOSCharacterStylePropertyChangeSetArchive.is_named_point_size:type_name -> TSSSOS.SpecBoolArchive
	59,  // 58: TSWPSOS.TSWPSOSCharacterStylePropertyChangeSetArchive.capitalization_uses_linguistics:type_name -> TSSSOS.SpecBoolArchive
	62,  // 59: TSWPSOS.TSWPSOSCharacterStylePropertyChangeSetArchive.character_stroke:type_name -> TSDSOS.SpecStrokeArchive
	63,  // 60: TSWPSOS.TSWPSOSCharacterStylePropertyChangeSetArchive.character_fill:type_name -> TSDSOS.SpecFillArchive
	59,  // 61: TSWPSOS.TSWPSOSCharacterStylePropertyChangeSetArchive.character_fill_should_fill_text_container:type_name -> TSSSOS.SpecBoolArchive
	18,  // 62: TSWPSOS.ColumnStylePropertyChangeSetArchive.columns:type_name -> TSWPSOS.SpecColumnsArchive
	59,  // 63: TSWPSOS.ColumnStylePropertyChangeSetArchive.continuous:type_name -> TSSSOS.SpecBoolArchive
	30,  // 64: TSWPSOS.ColumnStylePropertyChangeSetArchive.margins:type_name -> TSWPSOS.SpecPaddingArchive
	56,  // 65: TSWPSOS.ColumnStylePropertyChangeSetArchive.min_horizontal_inset:type_name -> TSSSOS.SpecDoubleArchive
	30,  // 66: TSWPSOS.ColumnStylePropertyChangeSetArchive.padding:type_name -> TSWPSOS.SpecPaddingArchive
	59,  // 67: TSWPSOS.ColumnStylePropertyChangeSetArchive.shrink_to_fit:type_name -> TSSSOS.SpecBoolArchive
	57,  // 68: TSWPSOS.ColumnStylePropertyChangeSetArchive.vertical_alignment:type_name -> TSSSOS.SpecIntegerArchive
	59,  // 69: TSWPSOS.ColumnStylePropertyChangeSetArchive.vertical_text:type_name -> TSSSOS.SpecBoolArchive
	57,  // 70: TSWPSOS.ColumnStylePropertyChangeSetArchive.writing_direction:type_name -> TSSSOS.SpecIntegerArchive
	19,  // 71: TSWPSOS.DropCapSpecificStylePropertyChangeSetArchive.drop_cap_model:type_name -> TSWPSOS.SpecDropCapArchive
	62,  // 72: TSWPSOS.DropCapSpecificStylePropertyChangeSetArchive.drop_cap_shape_stroke:type_name -> TSDSOS.SpecStrokeArchive
	63,  // 73: TSWPSOS.DropCapSpecificStylePropertyChangeSetArchive.drop_cap_shape_fill:type_name -> TSDSOS.SpecFillArchive
	34,  // 74: TSWPSOS.DropCapStylePropertyChangeSetArchive.super:type_name -> TSWPSOS.TSWPSOSCharacterStylePropertyChangeSetArchive
	19,  // 75: TSWPSOS.DropCapStylePropertyChangeSetArchive.drop_cap_model:type_name -> TSWPSOS.SpecDropCapArchive
	62,  // 76: TSWPSOS.DropCapStylePropertyChangeSetArchive.drop_cap_shape_stroke:type_name -> TSDSOS.SpecStrokeArchive
	63,  // 77: TSWPSOS.DropCapStylePropertyChangeSetArchive.drop_cap_shape_fill:type_name -> TSDSOS.SpecFillArchive
	61,  // 78: TSWPSOS.ListStylePropertyChangeSetArchive.list_font_color:type_name -> TSSSOS.SpecColorArchive
	58,  // 79: TSWPSOS.ListStylePropertyChangeSetArchive.font_name:type_name -> TSSSOS.SpecStringArchive
	24,  // 80: TSWPSOS.ListStylePropertyChangeSetArchive.list_classic_text_indent_array:type_name -> TSWPSOS.SpecListStyleFloatArrayArchive
	26,  // 81: TSWPSOS.ListStylePropertyChangeSetArchive.list_label_geometry_array:type_name -> TSWPSOS.SpecListStyleListLabelGeometryArrayArchive
	25,  // 82: TSWPSOS.ListStylePropertyChangeSetArchive.list_label_image_data_array:type_name -> TSWPSOS.SpecListStyleImageDataArrayArchive
	24,  // 83: TSWPSOS.ListStylePropertyChangeSetArchive.list_label_indent_array:type_name -> TSWPSOS.SpecListStyleFloatArrayArchive
	28,  // 84: TSWPSOS.ListStylePropertyChangeSetArchive.list_label_number_array:type_name -> TSWPSOS.SpecListStyleListNumberTypeArrayArchive
	23,  // 85: TSWPSOS.ListStylePropertyChangeSetArchive.list_label_tiered_number_array:type_name -> TSWPSOS.SpecListStyleBoolArrayArchive
	60,  // 86: TSWPSOS.ListStylePropertyChangeSetArchive.text_shadow:type_name -> TSDSOS.SpecShadowArchive
	29,  // 87: TSWPSOS.ListStylePropertyChangeSetArchive.list_label_string_array:type_name -> TSWPSOS.SpecListStyleStringArrayArchive
	24,  // 88: TSWPSOS.ListStylePropertyChangeSetArchive.list_text_indent_array:type_name -> TSWPSOS.SpecListStyleFloatArrayArchive
	27,  // 89: TSWPSOS.ListStylePropertyChangeSetArchive.list_label_type_array:type_name -> TSWPSOS.SpecListStyleListLabelTypeArrayArchive
	57,  // 90: TSWPSOS.ListStylePropertyChangeSetArchive.writing_direction:type_name -> TSSSOS.SpecIntegerArchive
	57,  // 91: TSWPSOS.ParagraphSpecificStylePropertyChangeSetArchive.alignment:type_name -> TSSSOS.SpecIntegerArchive
	58,  // 92: TSWPSOS.ParagraphSpecificStylePropertyChangeSetArchive.decimal_tab:type_name -> TSSSOS.SpecStringArchive
	56,  // 93: TSWPSOS.ParagraphSpecificStylePropertyChangeSetArchive.default_tab_stops:type_name -> TSSSOS.SpecDoubleArchive
	61,  // 94: TSWPSOS.ParagraphSpecificStylePropertyChangeSetArchive.paragraph_fill:type_name -> TSSSOS.SpecColorArchive
	56,  // 95: TSWPSOS.ParagraphSpecificStylePropertyChangeSetArchive.first_line_indent:type_name -> TSSSOS.SpecDoubleArchive
	31,  // 96: TSWPSOS.ParagraphSpecificStylePropertyChangeSetArchive.following_paragraph_style:type_name -> TSWPSOS.SpecParagraphStyleArchive
	59,  // 97: TSWPSOS.ParagraphSpecificStylePropertyChangeSetArchive.hyphenate:type_name -> TSSSOS.SpecBoolArchive
	22,  // 98: TSWPSOS.ParagraphSpecificStylePropertyChangeSetArchive.initial_list_style:type_name -> TSWPSOS.SpecListStyleArchive
	59,  // 99: TSWPSOS.ParagraphSpecificStylePropertyChangeSetArchive.keep_lines_together:type_name -> TSSSOS.SpecBoolArchive
	59,  // 100: TSWPSOS.ParagraphSpecificStylePropertyChangeSetArchive.keep_with_next:type_name -> TSSSOS.SpecBoolArchive
	56,  // 101: TSWPSOS.ParagraphSpecificStylePropertyChangeSetArchive.left_indent:type_name -> TSSSOS.SpecDoubleArchive
	21,  // 102: TSWPSOS.ParagraphSpecificStylePropertyChangeSetArchive.line_spacing:type_name -> TSWPSOS.SpecLineSpacingArchive
	57,  // 103: TSWPSOS.ParagraphSpecificStylePropertyChangeSetArchive.outline_level:type_name -> TSSSOS.SpecIntegerArchive
	57,  // 104: TSWPSOS.ParagraphSpecificStylePropertyChangeSetArchive.outline_style_type:type_name -> TSSSOS.SpecIntegerArchive
	59,  // 105: TSWPSOS.ParagraphSpecificStylePropertyChangeSetArchive.page_break_before:type_name -> TSSSOS.SpecBoolArchive
	57,  // 106: TSWPSOS.ParagraphSpecificStylePropertyChangeSetArchive.paragraph_borders:type_name -> TSSSOS.SpecIntegerArchive
	32,  // 107: TSWPSOS.ParagraphSpecificStylePropertyChangeSetArchive.paragraph_rule_offset:type_name -> TSWPSOS.SpecRuleOffsetArchive
	56,  // 108: TSWPSOS.ParagraphSpecificStylePropertyChangeSetArchive.paragraph_rule_width:type_name -> TSSSOS.SpecDoubleArchive
	56,  // 109: TSWPSOS.ParagraphSpecificStylePropertyChangeSetArchive.right_indent:type_name -> TSSSOS.SpecDoubleArchive
	56,  // 110: TSWPSOS.ParagraphSpecificStylePropertyChangeSetArchive.space_after:type_name -> TSSSOS.SpecDoubleArchive
	56,  // 111: TSWPSOS.ParagraphSpecificStylePropertyChangeSetArchive.space_before:type_name -> TSSSOS.SpecDoubleArchive
	62,  // 112: TSWPSOS.ParagraphSpecificStylePropertyChangeSetArchive.paragraph_stroke:type_name -> TSDSOS.SpecStrokeArchive
	33,  // 113: TSWPSOS.ParagraphSpecificStylePropertyChangeSetArchive.tabs:type_name -> TSWPSOS.SpecTabsArchive
	57,  // 114: TSWPSOS.ParagraphSpecificStylePropertyChangeSetArchive.widow_control:type_name -> TSSSOS.SpecIntegerArchive
	59,  // 115: TSWPSOS.ParagraphSpecificStylePropertyChangeSetArchive.show_in_bookmarks_list:type_name -> TSSSOS.SpecBoolArchive
	59,  // 116: TSWPSOS.ParagraphSpecificStylePropertyChangeSetArchive.show_in_t_o_c_navigator:type_name -> TSSSOS.SpecBoolArchive
	34,  // 117: TSWPSOS.TSWPSOSParagraphStylePropertyChangeSetArchive.super:type_name -> TSWPSOS.TSWPSOSCharacterStylePropertyChangeSetArchive
	57,  // 118: TSWPSOS.TSWPSOSParagraphStylePropertyChangeSetArchive.alignment:type_name -> TSSSOS.SpecIntegerArchive
	58,  // 119: TSWPSOS.TSWPSOSParagraphStylePropertyChangeSetArchive.decimal_tab:type_name -> TSSSOS.SpecStringArchive
	56,  // 120: TSWPSOS.TSWPSOSParagraphStylePropertyChangeSetArchive.default_tab_stops:type_name -> TSSSOS.SpecDoubleArchive
	61,  // 121: TSWPSOS.TSWPSOSParagraphStylePropertyChangeSetArchive.paragraph_fill:type_name -> TSSSOS.SpecColorArchive
	56,  // 122: TSWPSOS.TSWPSOSParagraphStylePropertyChangeSetArchive.first_line_indent:type_name -> TSSSOS.SpecDoubleArchive
	31,  // 123: TSWPSOS.TSWPSOSParagraphStylePropertyChangeSetArchive.following_paragraph_style:type_name -> TSWPSOS.SpecParagraphStyleArchive
	59,  // 124: TSWPSOS.TSWPSOSParagraphStylePropertyChangeSetArchive.hyphenate:type_name -> TSSSOS.SpecBoolArchive
	22,  // 125: TSWPSOS.TSWPSOSParagraphStylePropertyChangeSetArchive.initial_list_style:type_name -> TSWPSOS.SpecListStyleArchive
	59,  // 126: TSWPSOS.TSWPSOSParagraphStylePropertyChangeSetArchive.keep_lines_together:type_name -> TSSSOS.SpecBoolArchive
	59,  // 127: TSWPSOS.TSWPSOSParagraphStylePropertyChangeSetArchive.keep_with_next:type_name -> TSSSOS.SpecBoolArchive
	56,  // 128: TSWPSOS.TSWPSOSParagraphStylePropertyChangeSetArchive.left_indent:type_name -> TSSSOS.SpecDoubleArchive
	21,  // 129: TSWPSOS.TSWPSOSParagraphStylePropertyChangeSetArchive.line_spacing:type_name -> TSWPSOS.SpecLineSpacingArchive
	57,  // 130: TSWPSOS.TSWPSOSParagraphStylePropertyChangeSetArchive.outline_level:type_name -> TSSSOS.SpecIntegerArchive
	57,  // 131: TSWPSOS.TSWPSOSParagraphStylePropertyChangeSetArchive.outline_style_type:type_name -> TSSSOS.SpecIntegerArchive
	59,  // 132: TSWPSOS.TSWPSOSParagraphStylePropertyChangeSetArchive.page_break_before:type_name -> TSSSOS.SpecBoolArchive
	57,  // 133: TSWPSOS.TSWPSOSParagraphStylePropertyChangeSetArchive.paragraph_borders:type_name -> TSSSOS.SpecIntegerArchive
	32,  // 134: TSWPSOS.TSWPSOSParagraphStylePropertyChangeSetArchive.paragraph_rule_offset:type_name -> TSWPSOS.SpecRuleOffsetArchive
	56,  // 135: TSWPSOS.TSWPSOSParagraphStylePropertyChangeSetArchive.paragraph_rule_width:type_name -> TSSSOS.SpecDoubleArchive
	56,  // 136: TSWPSOS.TSWPSOSParagraphStylePropertyChangeSetArchive.right_indent:type_name -> TSSSOS.SpecDoubleArchive
	56,  // 137: TSWPSOS.TSWPSOSParagraphStylePropertyChangeSetArchive.space_after:type_name -> TSSSOS.SpecDoubleArchive
	56,  // 138: TSWPSOS.TSWPSOSParagraphStylePropertyChangeSetArchive.space_before:type_name -> TSSSOS.SpecDoubleArchive
	62,  // 139: TSWPSOS.TSWPSOSParagraphStylePropertyChangeSetArchive.paragraph_stroke:type_name -> TSDSOS.SpecStrokeArchive
	33,  // 140: TSWPSOS.TSWPSOSParagraphStylePropertyChangeSetArchive.tabs:type_name -> TSWPSOS.SpecTabsArchive
	57,  // 141: TSWPSOS.TSWPSOSParagraphStylePropertyChangeSetArchive.widow_control:type_name -> TSSSOS.SpecIntegerArchive
	59,  // 142: TSWPSOS.TSWPSOSParagraphStylePropertyChangeSetArchive.show_in_bookmarks_list:type_name -> TSSSOS.SpecBoolArchive
	59,  // 143: TSWPSOS.TSWPSOSParagraphStylePropertyChangeSetArchive.show_in_t_o_c_navigator:type_name -> TSSSOS.SpecBoolArchive
	64,  // 144: TSWPSOS.ShapeStylePropertyChangeSetArchive.super:type_name -> TSDSOS.BaseShapeStylePropertyChangeSetArchive
	18,  // 145: TSWPSOS.ShapeStylePropertyChangeSetArchive.columns:type_name -> TSWPSOS.SpecColumnsArchive
	30,  // 146: TSWPSOS.ShapeStylePropertyChangeSetArchive.padding:type_name -> TSWPSOS.SpecPaddingArchive
	59,  // 147: TSWPSOS.ShapeStylePropertyChangeSetArchive.shrink_text_to_fit:type_name -> TSSSOS.SpecBoolArchive
	57,  // 148: TSWPSOS.ShapeStylePropertyChangeSetArchive.vertical_alignment:type_name -> TSSSOS.SpecIntegerArchive
	59,  // 149: TSWPSOS.ShapeStylePropertyChangeSetArchive.vertical_text:type_name -> TSSSOS.SpecBoolArchive
	31,  // 150: TSWPSOS.ShapeStylePropertyChangeSetArchive.default_paragraph_style:type_name -> TSWPSOS.SpecParagraphStyleArchive
	40,  // 151: TSWPSOS.TOCEntryStylePropertyChangeSetArchive.super:type_name -> TSWPSOS.TSWPSOSParagraphStylePropertyChangeSetArchive
	59,  // 152: TSWPSOS.TOCEntryStylePropertyChangeSetArchive.toc_show_page_number:type_name -> TSSSOS.SpecBoolArchive
	17,  // 153: TSWPSOS.TOCEntryStylePropertyChangeSetArchive.toc_page_number_style:type_name -> TSWPSOS.SpecCharacterStyleArchive
	44,  // 154: TSWPSOS.StyleDiffArchive.style:type_name -> TSP.Reference
	34,  // 155: TSWPSOS.StyleDiffArchive.character_change_set:type_name -> TSWPSOS.TSWPSOSCharacterStylePropertyChangeSetArchive
	40,  // 156: TSWPSOS.StyleDiffArchive.paragraph_change_set:type_name -> TSWPSOS.TSWPSOSParagraphStylePropertyChangeSetArchive
	41,  // 157: TSWPSOS.StyleDiffArchive.shape_change_set:type_name -> TSWPSOS.ShapeStylePropertyChangeSetArchive
	158, // [158:158] is the sub-list for method output_type
	158, // [158:158] is the sub-list for method input_type
	158, // [158:158] is the sub-list for extension type_name
	158, // [158:158] is the sub-list for extension extendee
	0,   // [0:158] is the sub-list for field type_name
}

func init() { file_TSWPArchives_sos_proto_init() }
func file_TSWPArchives_sos_proto_init() {
	if File_TSWPArchives_sos_proto != nil {
		return
	}
	file_TSDArchives_sos_proto_init()
	file_TSPMessages_proto_init()
	file_TSSArchives_sos_proto_init()
	file_TSWPArchives_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_TSWPArchives_sos_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecSetCharacterStyleArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_sos_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecSetColumnsArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_sos_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecSetDropCapArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_sos_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecSetFontFeaturesArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_sos_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecSetLineSpacingArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_sos_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecSetListStyleArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_sos_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecSetListStyleBoolArrayArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_sos_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecSetListStyleFloatArrayArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_sos_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecSetListStyleImageDataArrayArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_sos_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecSetListStyleListLabelGeometryArrayArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_sos_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecSetListStyleListLabelTypeArrayArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_sos_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecSetListStyleListNumberTypeArrayArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_sos_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecSetListStyleStringArrayArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_sos_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecSetPaddingArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_sos_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecSetParagraphStyleArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_sos_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecSetRuleOffsetArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_sos_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecSetTabsArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_sos_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecCharacterStyleArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_sos_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecColumnsArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_sos_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecDropCapArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_sos_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecFontFeaturesArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_sos_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecLineSpacingArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_sos_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecListStyleArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_sos_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecListStyleBoolArrayArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_sos_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecListStyleFloatArrayArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_sos_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecListStyleImageDataArrayArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_sos_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecListStyleListLabelGeometryArrayArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_sos_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecListStyleListLabelTypeArrayArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_sos_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecListStyleListNumberTypeArrayArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_sos_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecListStyleStringArrayArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_sos_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecPaddingArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_sos_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecParagraphStyleArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_sos_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecRuleOffsetArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_sos_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecTabsArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_sos_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSWPSOSCharacterStylePropertyChangeSetArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_sos_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnStylePropertyChangeSetArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_sos_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropCapSpecificStylePropertyChangeSetArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_sos_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropCapStylePropertyChangeSetArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_sos_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStylePropertyChangeSetArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_sos_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParagraphSpecificStylePropertyChangeSetArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_sos_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSWPSOSParagraphStylePropertyChangeSetArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_sos_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShapeStylePropertyChangeSetArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_sos_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TOCEntryStylePropertyChangeSetArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPArchives_sos_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StyleDiffArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_TSWPArchives_sos_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   44,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_TSWPArchives_sos_proto_goTypes,
		DependencyIndexes: file_TSWPArchives_sos_proto_depIdxs,
		MessageInfos:      file_TSWPArchives_sos_proto_msgTypes,
	}.Build()
	File_TSWPArchives_sos_proto = out.File
	file_TSWPArchives_sos_proto_rawDesc = nil
	file_TSWPArchives_sos_proto_goTypes = nil
	file_TSWPArchives_sos_proto_depIdxs = nil
}
