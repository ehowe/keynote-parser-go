// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: TSTCommandArchives.proto

package kpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TableArea int32

const (
	TableArea_TableAreaBody         TableArea = 1
	TableArea_TableAreaHeaderRow    TableArea = 2
	TableArea_TableAreaHeaderColumn TableArea = 3
	TableArea_TableAreaFooterRow    TableArea = 4
)

// Enum value maps for TableArea.
var (
	TableArea_name = map[int32]string{
		1: "TableAreaBody",
		2: "TableAreaHeaderRow",
		3: "TableAreaHeaderColumn",
		4: "TableAreaFooterRow",
	}
	TableArea_value = map[string]int32{
		"TableAreaBody":         1,
		"TableAreaHeaderRow":    2,
		"TableAreaHeaderColumn": 3,
		"TableAreaFooterRow":    4,
	}
)

func (x TableArea) Enum() *TableArea {
	p := new(TableArea)
	*p = x
	return p
}

func (x TableArea) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TableArea) Descriptor() protoreflect.EnumDescriptor {
	return file_TSTCommandArchives_proto_enumTypes[0].Descriptor()
}

func (TableArea) Type() protoreflect.EnumType {
	return &file_TSTCommandArchives_proto_enumTypes[0]
}

func (x TableArea) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TableArea) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TableArea(num)
	return nil
}

// Deprecated: Use TableArea.Descriptor instead.
func (TableArea) EnumDescriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{0}
}

type TableAreaTransition int32

const (
	TableAreaTransition_TableAreaTransitionHeaderRowToBody    TableAreaTransition = 1
	TableAreaTransition_TableAreaTransitionBodyToHeaderRow    TableAreaTransition = 2
	TableAreaTransition_TableAreaTransitionFooterRowToBody    TableAreaTransition = 3
	TableAreaTransition_TableAreaTransitionBodyToFooterRow    TableAreaTransition = 4
	TableAreaTransition_TableAreaTransitionHeaderColumnToBody TableAreaTransition = 5
	TableAreaTransition_TableAreaTransitionBodyToHeaderColumn TableAreaTransition = 6
)

// Enum value maps for TableAreaTransition.
var (
	TableAreaTransition_name = map[int32]string{
		1: "TableAreaTransitionHeaderRowToBody",
		2: "TableAreaTransitionBodyToHeaderRow",
		3: "TableAreaTransitionFooterRowToBody",
		4: "TableAreaTransitionBodyToFooterRow",
		5: "TableAreaTransitionHeaderColumnToBody",
		6: "TableAreaTransitionBodyToHeaderColumn",
	}
	TableAreaTransition_value = map[string]int32{
		"TableAreaTransitionHeaderRowToBody":    1,
		"TableAreaTransitionBodyToHeaderRow":    2,
		"TableAreaTransitionFooterRowToBody":    3,
		"TableAreaTransitionBodyToFooterRow":    4,
		"TableAreaTransitionHeaderColumnToBody": 5,
		"TableAreaTransitionBodyToHeaderColumn": 6,
	}
)

func (x TableAreaTransition) Enum() *TableAreaTransition {
	p := new(TableAreaTransition)
	*p = x
	return p
}

func (x TableAreaTransition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TableAreaTransition) Descriptor() protoreflect.EnumDescriptor {
	return file_TSTCommandArchives_proto_enumTypes[1].Descriptor()
}

func (TableAreaTransition) Type() protoreflect.EnumType {
	return &file_TSTCommandArchives_proto_enumTypes[1]
}

func (x TableAreaTransition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TableAreaTransition) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TableAreaTransition(num)
	return nil
}

// Deprecated: Use TableAreaTransition.Descriptor instead.
func (TableAreaTransition) EnumDescriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{1}
}

type ColumnRowBundleItemTypeEnum int32

const (
	ColumnRowBundleItemTypeEnum_ColumnRowTypeAnchor       ColumnRowBundleItemTypeEnum = 0
	ColumnRowBundleItemTypeEnum_ColumnRowTypeHeaderRow    ColumnRowBundleItemTypeEnum = 1
	ColumnRowBundleItemTypeEnum_ColumnRowTypeBodyRow      ColumnRowBundleItemTypeEnum = 2
	ColumnRowBundleItemTypeEnum_ColumnRowTypeFooterRow    ColumnRowBundleItemTypeEnum = 3
	ColumnRowBundleItemTypeEnum_ColumnRowTypeHeaderColumn ColumnRowBundleItemTypeEnum = 4
	ColumnRowBundleItemTypeEnum_ColumnRowTypeBodyColumn   ColumnRowBundleItemTypeEnum = 5
)

// Enum value maps for ColumnRowBundleItemTypeEnum.
var (
	ColumnRowBundleItemTypeEnum_name = map[int32]string{
		0: "ColumnRowTypeAnchor",
		1: "ColumnRowTypeHeaderRow",
		2: "ColumnRowTypeBodyRow",
		3: "ColumnRowTypeFooterRow",
		4: "ColumnRowTypeHeaderColumn",
		5: "ColumnRowTypeBodyColumn",
	}
	ColumnRowBundleItemTypeEnum_value = map[string]int32{
		"ColumnRowTypeAnchor":       0,
		"ColumnRowTypeHeaderRow":    1,
		"ColumnRowTypeBodyRow":      2,
		"ColumnRowTypeFooterRow":    3,
		"ColumnRowTypeHeaderColumn": 4,
		"ColumnRowTypeBodyColumn":   5,
	}
)

func (x ColumnRowBundleItemTypeEnum) Enum() *ColumnRowBundleItemTypeEnum {
	p := new(ColumnRowBundleItemTypeEnum)
	*p = x
	return p
}

func (x ColumnRowBundleItemTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ColumnRowBundleItemTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_TSTCommandArchives_proto_enumTypes[2].Descriptor()
}

func (ColumnRowBundleItemTypeEnum) Type() protoreflect.EnumType {
	return &file_TSTCommandArchives_proto_enumTypes[2]
}

func (x ColumnRowBundleItemTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ColumnRowBundleItemTypeEnum) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ColumnRowBundleItemTypeEnum(num)
	return nil
}

// Deprecated: Use ColumnRowBundleItemTypeEnum.Descriptor instead.
func (ColumnRowBundleItemTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{2}
}

type TableCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                      *CommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	TableInfoIdPath            *UUIDPath       `protobuf:"bytes,2,req,name=table_info_id_path,json=tableInfoIdPath" json:"table_info_id_path,omitempty"`
	Commandname                *string         `protobuf:"bytes,3,opt,name=commandname" json:"commandname,omitempty"`
	DefaultCellStylesContainer *Reference      `protobuf:"bytes,4,opt,name=default_cell_styles_container,json=defaultCellStylesContainer" json:"default_cell_styles_container,omitempty"`
	Timestamp                  *float64        `protobuf:"fixed64,5,opt,name=timestamp" json:"timestamp,omitempty"`
	RandomSeedLo               *uint32         `protobuf:"varint,6,opt,name=random_seed_lo,json=randomSeedLo" json:"random_seed_lo,omitempty"`
	RandomSeedHi               *uint32         `protobuf:"varint,7,opt,name=random_seed_hi,json=randomSeedHi" json:"random_seed_hi,omitempty"`
	IsInverse                  *bool           `protobuf:"varint,8,opt,name=is_inverse,json=isInverse" json:"is_inverse,omitempty"`
	OldTimestamp               *float64        `protobuf:"fixed64,9,opt,name=old_timestamp,json=oldTimestamp" json:"old_timestamp,omitempty"`
	OldRandomSeed              *uint64         `protobuf:"varint,10,opt,name=old_random_seed,json=oldRandomSeed" json:"old_random_seed,omitempty"`
}

func (x *TableCommandArchive) Reset() {
	*x = TableCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableCommandArchive) ProtoMessage() {}

func (x *TableCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableCommandArchive.ProtoReflect.Descriptor instead.
func (*TableCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{0}
}

func (x *TableCommandArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *TableCommandArchive) GetTableInfoIdPath() *UUIDPath {
	if x != nil {
		return x.TableInfoIdPath
	}
	return nil
}

func (x *TableCommandArchive) GetCommandname() string {
	if x != nil && x.Commandname != nil {
		return *x.Commandname
	}
	return ""
}

func (x *TableCommandArchive) GetDefaultCellStylesContainer() *Reference {
	if x != nil {
		return x.DefaultCellStylesContainer
	}
	return nil
}

func (x *TableCommandArchive) GetTimestamp() float64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *TableCommandArchive) GetRandomSeedLo() uint32 {
	if x != nil && x.RandomSeedLo != nil {
		return *x.RandomSeedLo
	}
	return 0
}

func (x *TableCommandArchive) GetRandomSeedHi() uint32 {
	if x != nil && x.RandomSeedHi != nil {
		return *x.RandomSeedHi
	}
	return 0
}

func (x *TableCommandArchive) GetIsInverse() bool {
	if x != nil && x.IsInverse != nil {
		return *x.IsInverse
	}
	return false
}

func (x *TableCommandArchive) GetOldTimestamp() float64 {
	if x != nil && x.OldTimestamp != nil {
		return *x.OldTimestamp
	}
	return 0
}

func (x *TableCommandArchive) GetOldRandomSeed() uint64 {
	if x != nil && x.OldRandomSeed != nil {
		return *x.OldRandomSeed
	}
	return 0
}

type CommandApplyCellContentsArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super               *TableCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	CellDiffMap         *Reference           `protobuf:"bytes,2,req,name=cell_diff_map,json=cellDiffMap" json:"cell_diff_map,omitempty"`
	RollbackCellDiffMap *Reference           `protobuf:"bytes,3,opt,name=rollback_cell_diff_map,json=rollbackCellDiffMap" json:"rollback_cell_diff_map,omitempty"`
	CustomFormatKeys    []*UUID              `protobuf:"bytes,4,rep,name=custom_format_keys,json=customFormatKeys" json:"custom_format_keys,omitempty"`
	ActionString        *string              `protobuf:"bytes,5,opt,name=action_string,json=actionString" json:"action_string,omitempty"`
}

func (x *CommandApplyCellContentsArchive) Reset() {
	*x = CommandApplyCellContentsArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandApplyCellContentsArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandApplyCellContentsArchive) ProtoMessage() {}

func (x *CommandApplyCellContentsArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandApplyCellContentsArchive.ProtoReflect.Descriptor instead.
func (*CommandApplyCellContentsArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{1}
}

func (x *CommandApplyCellContentsArchive) GetSuper() *TableCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandApplyCellContentsArchive) GetCellDiffMap() *Reference {
	if x != nil {
		return x.CellDiffMap
	}
	return nil
}

func (x *CommandApplyCellContentsArchive) GetRollbackCellDiffMap() *Reference {
	if x != nil {
		return x.RollbackCellDiffMap
	}
	return nil
}

func (x *CommandApplyCellContentsArchive) GetCustomFormatKeys() []*UUID {
	if x != nil {
		return x.CustomFormatKeys
	}
	return nil
}

func (x *CommandApplyCellContentsArchive) GetActionString() string {
	if x != nil && x.ActionString != nil {
		return *x.ActionString
	}
	return ""
}

type CommandApplyCellDiffMapArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                     *TableCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	CellDiffMap               *Reference           `protobuf:"bytes,2,req,name=cell_diff_map,json=cellDiffMap" json:"cell_diff_map,omitempty"`
	ShouldAllowMergeFragments *bool                `protobuf:"varint,3,req,name=should_allow_merge_fragments,json=shouldAllowMergeFragments" json:"should_allow_merge_fragments,omitempty"`
	InverseCellDiffMap        *Reference           `protobuf:"bytes,4,opt,name=inverse_cell_diff_map,json=inverseCellDiffMap" json:"inverse_cell_diff_map,omitempty"`
	CustomFormatKeys          []*UUID              `protobuf:"bytes,5,rep,name=custom_format_keys,json=customFormatKeys" json:"custom_format_keys,omitempty"`
}

func (x *CommandApplyCellDiffMapArchive) Reset() {
	*x = CommandApplyCellDiffMapArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandApplyCellDiffMapArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandApplyCellDiffMapArchive) ProtoMessage() {}

func (x *CommandApplyCellDiffMapArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandApplyCellDiffMapArchive.ProtoReflect.Descriptor instead.
func (*CommandApplyCellDiffMapArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{2}
}

func (x *CommandApplyCellDiffMapArchive) GetSuper() *TableCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandApplyCellDiffMapArchive) GetCellDiffMap() *Reference {
	if x != nil {
		return x.CellDiffMap
	}
	return nil
}

func (x *CommandApplyCellDiffMapArchive) GetShouldAllowMergeFragments() bool {
	if x != nil && x.ShouldAllowMergeFragments != nil {
		return *x.ShouldAllowMergeFragments
	}
	return false
}

func (x *CommandApplyCellDiffMapArchive) GetInverseCellDiffMap() *Reference {
	if x != nil {
		return x.InverseCellDiffMap
	}
	return nil
}

func (x *CommandApplyCellDiffMapArchive) GetCustomFormatKeys() []*UUID {
	if x != nil {
		return x.CustomFormatKeys
	}
	return nil
}

type CommandApplyCellMapArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                     *TableCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	RedoCellMap               *Reference           `protobuf:"bytes,2,req,name=redo_cell_map,json=redoCellMap" json:"redo_cell_map,omitempty"`
	UndoCellMap               *Reference           `protobuf:"bytes,3,opt,name=undo_cell_map,json=undoCellMap" json:"undo_cell_map,omitempty"`
	UndoFormulaRewriteCommand *Reference           `protobuf:"bytes,4,opt,name=undo_formula_rewrite_command,json=undoFormulaRewriteCommand" json:"undo_formula_rewrite_command,omitempty"`
	CustomFormatKeys          []*UUID              `protobuf:"bytes,5,rep,name=custom_format_keys,json=customFormatKeys" json:"custom_format_keys,omitempty"`
	MergeOwnerRollbackIndex   *uint32              `protobuf:"varint,6,opt,name=merge_owner_rollback_index,json=mergeOwnerRollbackIndex" json:"merge_owner_rollback_index,omitempty"`
	IsFromPaste               *bool                `protobuf:"varint,7,req,name=is_from_paste,json=isFromPaste" json:"is_from_paste,omitempty"`
	FormulaRewriteCommands    []*Reference         `protobuf:"bytes,8,rep,name=formula_rewrite_commands,json=formulaRewriteCommands" json:"formula_rewrite_commands,omitempty"`
}

func (x *CommandApplyCellMapArchive) Reset() {
	*x = CommandApplyCellMapArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandApplyCellMapArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandApplyCellMapArchive) ProtoMessage() {}

func (x *CommandApplyCellMapArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandApplyCellMapArchive.ProtoReflect.Descriptor instead.
func (*CommandApplyCellMapArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{3}
}

func (x *CommandApplyCellMapArchive) GetSuper() *TableCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandApplyCellMapArchive) GetRedoCellMap() *Reference {
	if x != nil {
		return x.RedoCellMap
	}
	return nil
}

func (x *CommandApplyCellMapArchive) GetUndoCellMap() *Reference {
	if x != nil {
		return x.UndoCellMap
	}
	return nil
}

func (x *CommandApplyCellMapArchive) GetUndoFormulaRewriteCommand() *Reference {
	if x != nil {
		return x.UndoFormulaRewriteCommand
	}
	return nil
}

func (x *CommandApplyCellMapArchive) GetCustomFormatKeys() []*UUID {
	if x != nil {
		return x.CustomFormatKeys
	}
	return nil
}

func (x *CommandApplyCellMapArchive) GetMergeOwnerRollbackIndex() uint32 {
	if x != nil && x.MergeOwnerRollbackIndex != nil {
		return *x.MergeOwnerRollbackIndex
	}
	return 0
}

func (x *CommandApplyCellMapArchive) GetIsFromPaste() bool {
	if x != nil && x.IsFromPaste != nil {
		return *x.IsFromPaste
	}
	return false
}

func (x *CommandApplyCellMapArchive) GetFormulaRewriteCommands() []*Reference {
	if x != nil {
		return x.FormulaRewriteCommands
	}
	return nil
}

type CommandApplyConcurrentCellMapArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                     *TableCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	RedoConcurrentCellMap     *Reference           `protobuf:"bytes,2,req,name=redo_concurrent_cell_map,json=redoConcurrentCellMap" json:"redo_concurrent_cell_map,omitempty"`
	UndoConcurrentCellMap     *Reference           `protobuf:"bytes,3,opt,name=undo_concurrent_cell_map,json=undoConcurrentCellMap" json:"undo_concurrent_cell_map,omitempty"`
	UndoFormulaRewriteCommand *Reference           `protobuf:"bytes,4,opt,name=undo_formula_rewrite_command,json=undoFormulaRewriteCommand" json:"undo_formula_rewrite_command,omitempty"`
	CustomFormatKeys          []*UUID              `protobuf:"bytes,5,rep,name=custom_format_keys,json=customFormatKeys" json:"custom_format_keys,omitempty"`
	MergeOwnerRollbackIndex   *uint32              `protobuf:"varint,6,opt,name=merge_owner_rollback_index,json=mergeOwnerRollbackIndex" json:"merge_owner_rollback_index,omitempty"`
	IsFromPaste               *bool                `protobuf:"varint,7,req,name=is_from_paste,json=isFromPaste" json:"is_from_paste,omitempty"`
	FormulaRewriteCommands    []*Reference         `protobuf:"bytes,8,rep,name=formula_rewrite_commands,json=formulaRewriteCommands" json:"formula_rewrite_commands,omitempty"`
}

func (x *CommandApplyConcurrentCellMapArchive) Reset() {
	*x = CommandApplyConcurrentCellMapArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandApplyConcurrentCellMapArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandApplyConcurrentCellMapArchive) ProtoMessage() {}

func (x *CommandApplyConcurrentCellMapArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandApplyConcurrentCellMapArchive.ProtoReflect.Descriptor instead.
func (*CommandApplyConcurrentCellMapArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{4}
}

func (x *CommandApplyConcurrentCellMapArchive) GetSuper() *TableCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandApplyConcurrentCellMapArchive) GetRedoConcurrentCellMap() *Reference {
	if x != nil {
		return x.RedoConcurrentCellMap
	}
	return nil
}

func (x *CommandApplyConcurrentCellMapArchive) GetUndoConcurrentCellMap() *Reference {
	if x != nil {
		return x.UndoConcurrentCellMap
	}
	return nil
}

func (x *CommandApplyConcurrentCellMapArchive) GetUndoFormulaRewriteCommand() *Reference {
	if x != nil {
		return x.UndoFormulaRewriteCommand
	}
	return nil
}

func (x *CommandApplyConcurrentCellMapArchive) GetCustomFormatKeys() []*UUID {
	if x != nil {
		return x.CustomFormatKeys
	}
	return nil
}

func (x *CommandApplyConcurrentCellMapArchive) GetMergeOwnerRollbackIndex() uint32 {
	if x != nil && x.MergeOwnerRollbackIndex != nil {
		return *x.MergeOwnerRollbackIndex
	}
	return 0
}

func (x *CommandApplyConcurrentCellMapArchive) GetIsFromPaste() bool {
	if x != nil && x.IsFromPaste != nil {
		return *x.IsFromPaste
	}
	return false
}

func (x *CommandApplyConcurrentCellMapArchive) GetFormulaRewriteCommands() []*Reference {
	if x != nil {
		return x.FormulaRewriteCommands
	}
	return nil
}

type CommandChangeFreezeHeaderStateArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super           *TableCommandArchive   `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Direction       *TableDimensionArchive `protobuf:"varint,2,req,name=direction,enum=TST.TableDimensionArchive" json:"direction,omitempty"`
	NewFreezeState  *bool                  `protobuf:"varint,3,req,name=new_freeze_state,json=newFreezeState" json:"new_freeze_state,omitempty"`
	PrevFreezeState *bool                  `protobuf:"varint,4,req,name=prev_freeze_state,json=prevFreezeState" json:"prev_freeze_state,omitempty"`
}

func (x *CommandChangeFreezeHeaderStateArchive) Reset() {
	*x = CommandChangeFreezeHeaderStateArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandChangeFreezeHeaderStateArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandChangeFreezeHeaderStateArchive) ProtoMessage() {}

func (x *CommandChangeFreezeHeaderStateArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandChangeFreezeHeaderStateArchive.ProtoReflect.Descriptor instead.
func (*CommandChangeFreezeHeaderStateArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{5}
}

func (x *CommandChangeFreezeHeaderStateArchive) GetSuper() *TableCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandChangeFreezeHeaderStateArchive) GetDirection() TableDimensionArchive {
	if x != nil && x.Direction != nil {
		return *x.Direction
	}
	return TableDimensionArchive_dimensionNeither
}

func (x *CommandChangeFreezeHeaderStateArchive) GetNewFreezeState() bool {
	if x != nil && x.NewFreezeState != nil {
		return *x.NewFreezeState
	}
	return false
}

func (x *CommandChangeFreezeHeaderStateArchive) GetPrevFreezeState() bool {
	if x != nil && x.PrevFreezeState != nil {
		return *x.PrevFreezeState
	}
	return false
}

type CommandDeleteCellsArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                    *TableCommandArchive  `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	UpdateBorderVisibility   *bool                 `protobuf:"varint,4,opt,name=update_border_visibility,json=updateBorderVisibility" json:"update_border_visibility,omitempty"`
	InvalidateComments       *bool                 `protobuf:"varint,5,opt,name=invalidate_comments,json=invalidateComments" json:"invalidate_comments,omitempty"`
	InvalidateCommentsValid  *bool                 `protobuf:"varint,6,opt,name=invalidate_comments_valid,json=invalidateCommentsValid" json:"invalidate_comments_valid,omitempty"`
	CellUidRegion            *CellUIDRegionArchive `protobuf:"bytes,7,opt,name=cell_uid_region,json=cellUidRegion" json:"cell_uid_region,omitempty"`
	SummaryCellUidList       *CellUIDListArchive   `protobuf:"bytes,8,opt,name=summary_cell_uid_list,json=summaryCellUidList" json:"summary_cell_uid_list,omitempty"`
	InverseConcurrentCellMap *Reference            `protobuf:"bytes,9,opt,name=inverse_concurrent_cell_map,json=inverseConcurrentCellMap" json:"inverse_concurrent_cell_map,omitempty"`
}

func (x *CommandDeleteCellsArchive) Reset() {
	*x = CommandDeleteCellsArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandDeleteCellsArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandDeleteCellsArchive) ProtoMessage() {}

func (x *CommandDeleteCellsArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandDeleteCellsArchive.ProtoReflect.Descriptor instead.
func (*CommandDeleteCellsArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{6}
}

func (x *CommandDeleteCellsArchive) GetSuper() *TableCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandDeleteCellsArchive) GetUpdateBorderVisibility() bool {
	if x != nil && x.UpdateBorderVisibility != nil {
		return *x.UpdateBorderVisibility
	}
	return false
}

func (x *CommandDeleteCellsArchive) GetInvalidateComments() bool {
	if x != nil && x.InvalidateComments != nil {
		return *x.InvalidateComments
	}
	return false
}

func (x *CommandDeleteCellsArchive) GetInvalidateCommentsValid() bool {
	if x != nil && x.InvalidateCommentsValid != nil {
		return *x.InvalidateCommentsValid
	}
	return false
}

func (x *CommandDeleteCellsArchive) GetCellUidRegion() *CellUIDRegionArchive {
	if x != nil {
		return x.CellUidRegion
	}
	return nil
}

func (x *CommandDeleteCellsArchive) GetSummaryCellUidList() *CellUIDListArchive {
	if x != nil {
		return x.SummaryCellUidList
	}
	return nil
}

func (x *CommandDeleteCellsArchive) GetInverseConcurrentCellMap() *Reference {
	if x != nil {
		return x.InverseConcurrentCellMap
	}
	return nil
}

type CommandDeleteCellContentsArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super              *TableCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	CellUidList        *CellUIDListArchive  `protobuf:"bytes,2,req,name=cell_uid_list,json=cellUidList" json:"cell_uid_list,omitempty"`
	InverseCellDiffMap *Reference           `protobuf:"bytes,3,opt,name=inverse_cell_diff_map,json=inverseCellDiffMap" json:"inverse_cell_diff_map,omitempty"`
}

func (x *CommandDeleteCellContentsArchive) Reset() {
	*x = CommandDeleteCellContentsArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandDeleteCellContentsArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandDeleteCellContentsArchive) ProtoMessage() {}

func (x *CommandDeleteCellContentsArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandDeleteCellContentsArchive.ProtoReflect.Descriptor instead.
func (*CommandDeleteCellContentsArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{7}
}

func (x *CommandDeleteCellContentsArchive) GetSuper() *TableCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandDeleteCellContentsArchive) GetCellUidList() *CellUIDListArchive {
	if x != nil {
		return x.CellUidList
	}
	return nil
}

func (x *CommandDeleteCellContentsArchive) GetInverseCellDiffMap() *Reference {
	if x != nil {
		return x.InverseCellDiffMap
	}
	return nil
}

type CommandMutateCellFormatArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super              *TableCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	CellUidList        *CellUIDListArchive  `protobuf:"bytes,2,opt,name=cell_uid_list,json=cellUidList" json:"cell_uid_list,omitempty"`
	InverseCellDiffMap *Reference           `protobuf:"bytes,3,opt,name=inverse_cell_diff_map,json=inverseCellDiffMap" json:"inverse_cell_diff_map,omitempty"`
	WholeFormatDiffMap *Reference           `protobuf:"bytes,4,opt,name=whole_format_diff_map,json=wholeFormatDiffMap" json:"whole_format_diff_map,omitempty"`
	IntendedFormatType *uint32              `protobuf:"varint,5,req,name=intended_format_type,json=intendedFormatType" json:"intended_format_type,omitempty"`
}

func (x *CommandMutateCellFormatArchive) Reset() {
	*x = CommandMutateCellFormatArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandMutateCellFormatArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandMutateCellFormatArchive) ProtoMessage() {}

func (x *CommandMutateCellFormatArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandMutateCellFormatArchive.ProtoReflect.Descriptor instead.
func (*CommandMutateCellFormatArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{8}
}

func (x *CommandMutateCellFormatArchive) GetSuper() *TableCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandMutateCellFormatArchive) GetCellUidList() *CellUIDListArchive {
	if x != nil {
		return x.CellUidList
	}
	return nil
}

func (x *CommandMutateCellFormatArchive) GetInverseCellDiffMap() *Reference {
	if x != nil {
		return x.InverseCellDiffMap
	}
	return nil
}

func (x *CommandMutateCellFormatArchive) GetWholeFormatDiffMap() *Reference {
	if x != nil {
		return x.WholeFormatDiffMap
	}
	return nil
}

func (x *CommandMutateCellFormatArchive) GetIntendedFormatType() uint32 {
	if x != nil && x.IntendedFormatType != nil {
		return *x.IntendedFormatType
	}
	return 0
}

type CommandSetAutomaticDurationUnitsArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super          *CommandMutateCellFormatArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	AutomaticUnits *bool                           `protobuf:"varint,4,opt,name=automatic_units,json=automaticUnits" json:"automatic_units,omitempty"`
}

func (x *CommandSetAutomaticDurationUnitsArchive) Reset() {
	*x = CommandSetAutomaticDurationUnitsArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSetAutomaticDurationUnitsArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSetAutomaticDurationUnitsArchive) ProtoMessage() {}

func (x *CommandSetAutomaticDurationUnitsArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSetAutomaticDurationUnitsArchive.ProtoReflect.Descriptor instead.
func (*CommandSetAutomaticDurationUnitsArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{9}
}

func (x *CommandSetAutomaticDurationUnitsArchive) GetSuper() *CommandMutateCellFormatArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandSetAutomaticDurationUnitsArchive) GetAutomaticUnits() bool {
	if x != nil && x.AutomaticUnits != nil {
		return *x.AutomaticUnits
	}
	return false
}

type CommandSetDurationStyleArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super         *CommandMutateCellFormatArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	DurationStyle *uint32                         `protobuf:"varint,2,opt,name=duration_style,json=durationStyle" json:"duration_style,omitempty"`
}

func (x *CommandSetDurationStyleArchive) Reset() {
	*x = CommandSetDurationStyleArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSetDurationStyleArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSetDurationStyleArchive) ProtoMessage() {}

func (x *CommandSetDurationStyleArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSetDurationStyleArchive.ProtoReflect.Descriptor instead.
func (*CommandSetDurationStyleArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{10}
}

func (x *CommandSetDurationStyleArchive) GetSuper() *CommandMutateCellFormatArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandSetDurationStyleArchive) GetDurationStyle() uint32 {
	if x != nil && x.DurationStyle != nil {
		return *x.DurationStyle
	}
	return 0
}

type CommandSetDurationUnitSmallestLargestArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super        *CommandMutateCellFormatArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	SmallestUnit *uint32                         `protobuf:"varint,2,opt,name=smallest_unit,json=smallestUnit" json:"smallest_unit,omitempty"`
	LargestUnit  *uint32                         `protobuf:"varint,3,opt,name=largest_unit,json=largestUnit" json:"largest_unit,omitempty"`
}

func (x *CommandSetDurationUnitSmallestLargestArchive) Reset() {
	*x = CommandSetDurationUnitSmallestLargestArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSetDurationUnitSmallestLargestArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSetDurationUnitSmallestLargestArchive) ProtoMessage() {}

func (x *CommandSetDurationUnitSmallestLargestArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSetDurationUnitSmallestLargestArchive.ProtoReflect.Descriptor instead.
func (*CommandSetDurationUnitSmallestLargestArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{11}
}

func (x *CommandSetDurationUnitSmallestLargestArchive) GetSuper() *CommandMutateCellFormatArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandSetDurationUnitSmallestLargestArchive) GetSmallestUnit() uint32 {
	if x != nil && x.SmallestUnit != nil {
		return *x.SmallestUnit
	}
	return 0
}

func (x *CommandSetDurationUnitSmallestLargestArchive) GetLargestUnit() uint32 {
	if x != nil && x.LargestUnit != nil {
		return *x.LargestUnit
	}
	return 0
}

type TSTCommandReplaceCustomFormatArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UndoDiffMap   *Reference           `protobuf:"bytes,1,opt,name=undo_diff_map,json=undoDiffMap" json:"undo_diff_map,omitempty"`
	CommitDiffMap *Reference           `protobuf:"bytes,2,opt,name=commit_diff_map,json=commitDiffMap" json:"commit_diff_map,omitempty"`
	Super         *TableCommandArchive `protobuf:"bytes,6,req,name=super" json:"super,omitempty"`
}

func (x *TSTCommandReplaceCustomFormatArchive) Reset() {
	*x = TSTCommandReplaceCustomFormatArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSTCommandReplaceCustomFormatArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSTCommandReplaceCustomFormatArchive) ProtoMessage() {}

func (x *TSTCommandReplaceCustomFormatArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSTCommandReplaceCustomFormatArchive.ProtoReflect.Descriptor instead.
func (*TSTCommandReplaceCustomFormatArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{12}
}

func (x *TSTCommandReplaceCustomFormatArchive) GetUndoDiffMap() *Reference {
	if x != nil {
		return x.UndoDiffMap
	}
	return nil
}

func (x *TSTCommandReplaceCustomFormatArchive) GetCommitDiffMap() *Reference {
	if x != nil {
		return x.CommitDiffMap
	}
	return nil
}

func (x *TSTCommandReplaceCustomFormatArchive) GetSuper() *TableCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

type CommandMoveCellsArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                      *TableCommandArchive   `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	DstTableInfoIdPath         *UUIDPath              `protobuf:"bytes,2,req,name=dst_table_info_id_path,json=dstTableInfoIdPath" json:"dst_table_info_id_path,omitempty"`
	SrcUidRange                *UUIDRectArchive       `protobuf:"bytes,3,req,name=src_uid_range,json=srcUidRange" json:"src_uid_range,omitempty"`
	DstUidRange                *UUIDRectArchive       `protobuf:"bytes,4,req,name=dst_uid_range,json=dstUidRange" json:"dst_uid_range,omitempty"`
	TableDimension             *TableDimensionArchive `protobuf:"varint,5,opt,name=table_dimension,json=tableDimension,enum=TST.TableDimensionArchive" json:"table_dimension,omitempty"`
	SrcCellMap                 *Reference             `protobuf:"bytes,6,req,name=src_cell_map,json=srcCellMap" json:"src_cell_map,omitempty"`
	DstCellMap                 *Reference             `protobuf:"bytes,7,opt,name=dst_cell_map,json=dstCellMap" json:"dst_cell_map,omitempty"`
	DstCellStylesContainer     *Reference             `protobuf:"bytes,8,opt,name=dst_cell_styles_container,json=dstCellStylesContainer" json:"dst_cell_styles_container,omitempty"`
	SrcUndoCellMap             *Reference             `protobuf:"bytes,9,opt,name=src_undo_cell_map,json=srcUndoCellMap" json:"src_undo_cell_map,omitempty"`
	DstUndoCellMap             *Reference             `protobuf:"bytes,10,opt,name=dst_undo_cell_map,json=dstUndoCellMap" json:"dst_undo_cell_map,omitempty"`
	DstMergeOwnerRollbackIndex *uint32                `protobuf:"varint,11,req,name=dst_merge_owner_rollback_index,json=dstMergeOwnerRollbackIndex" json:"dst_merge_owner_rollback_index,omitempty"`
	FormulaRewriteCommands     []*Reference           `protobuf:"bytes,12,rep,name=formula_rewrite_commands,json=formulaRewriteCommands" json:"formula_rewrite_commands,omitempty"`
	MergeActionToRestore       *MergeOperationArchive `protobuf:"bytes,13,opt,name=merge_action_to_restore,json=mergeActionToRestore" json:"merge_action_to_restore,omitempty"`
	CommentCellUidsToRestore   *CellUIDListArchive    `protobuf:"bytes,14,opt,name=comment_cell_uids_to_restore,json=commentCellUidsToRestore" json:"comment_cell_uids_to_restore,omitempty"`
	CommentStoragesToRestore   []*Reference           `protobuf:"bytes,15,rep,name=comment_storages_to_restore,json=commentStoragesToRestore" json:"comment_storages_to_restore,omitempty"`
}

func (x *CommandMoveCellsArchive) Reset() {
	*x = CommandMoveCellsArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandMoveCellsArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandMoveCellsArchive) ProtoMessage() {}

func (x *CommandMoveCellsArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandMoveCellsArchive.ProtoReflect.Descriptor instead.
func (*CommandMoveCellsArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{13}
}

func (x *CommandMoveCellsArchive) GetSuper() *TableCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandMoveCellsArchive) GetDstTableInfoIdPath() *UUIDPath {
	if x != nil {
		return x.DstTableInfoIdPath
	}
	return nil
}

func (x *CommandMoveCellsArchive) GetSrcUidRange() *UUIDRectArchive {
	if x != nil {
		return x.SrcUidRange
	}
	return nil
}

func (x *CommandMoveCellsArchive) GetDstUidRange() *UUIDRectArchive {
	if x != nil {
		return x.DstUidRange
	}
	return nil
}

func (x *CommandMoveCellsArchive) GetTableDimension() TableDimensionArchive {
	if x != nil && x.TableDimension != nil {
		return *x.TableDimension
	}
	return TableDimensionArchive_dimensionNeither
}

func (x *CommandMoveCellsArchive) GetSrcCellMap() *Reference {
	if x != nil {
		return x.SrcCellMap
	}
	return nil
}

func (x *CommandMoveCellsArchive) GetDstCellMap() *Reference {
	if x != nil {
		return x.DstCellMap
	}
	return nil
}

func (x *CommandMoveCellsArchive) GetDstCellStylesContainer() *Reference {
	if x != nil {
		return x.DstCellStylesContainer
	}
	return nil
}

func (x *CommandMoveCellsArchive) GetSrcUndoCellMap() *Reference {
	if x != nil {
		return x.SrcUndoCellMap
	}
	return nil
}

func (x *CommandMoveCellsArchive) GetDstUndoCellMap() *Reference {
	if x != nil {
		return x.DstUndoCellMap
	}
	return nil
}

func (x *CommandMoveCellsArchive) GetDstMergeOwnerRollbackIndex() uint32 {
	if x != nil && x.DstMergeOwnerRollbackIndex != nil {
		return *x.DstMergeOwnerRollbackIndex
	}
	return 0
}

func (x *CommandMoveCellsArchive) GetFormulaRewriteCommands() []*Reference {
	if x != nil {
		return x.FormulaRewriteCommands
	}
	return nil
}

func (x *CommandMoveCellsArchive) GetMergeActionToRestore() *MergeOperationArchive {
	if x != nil {
		return x.MergeActionToRestore
	}
	return nil
}

func (x *CommandMoveCellsArchive) GetCommentCellUidsToRestore() *CellUIDListArchive {
	if x != nil {
		return x.CommentCellUidsToRestore
	}
	return nil
}

func (x *CommandMoveCellsArchive) GetCommentStoragesToRestore() []*Reference {
	if x != nil {
		return x.CommentStoragesToRestore
	}
	return nil
}

type ColumnRowMetadataArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size         *float64   `protobuf:"fixed64,1,req,name=size" json:"size,omitempty"`
	HidingAction *uint32    `protobuf:"varint,2,req,name=hiding_action,json=hidingAction" json:"hiding_action,omitempty"`
	CellStyle    *Reference `protobuf:"bytes,3,opt,name=cell_style,json=cellStyle" json:"cell_style,omitempty"`
	TextStyle    *Reference `protobuf:"bytes,4,opt,name=text_style,json=textStyle" json:"text_style,omitempty"`
	Uuid         *UUID      `protobuf:"bytes,5,opt,name=uuid" json:"uuid,omitempty"`
}

func (x *ColumnRowMetadataArchive) Reset() {
	*x = ColumnRowMetadataArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnRowMetadataArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnRowMetadataArchive) ProtoMessage() {}

func (x *ColumnRowMetadataArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnRowMetadataArchive.ProtoReflect.Descriptor instead.
func (*ColumnRowMetadataArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{14}
}

func (x *ColumnRowMetadataArchive) GetSize() float64 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *ColumnRowMetadataArchive) GetHidingAction() uint32 {
	if x != nil && x.HidingAction != nil {
		return *x.HidingAction
	}
	return 0
}

func (x *ColumnRowMetadataArchive) GetCellStyle() *Reference {
	if x != nil {
		return x.CellStyle
	}
	return nil
}

func (x *ColumnRowMetadataArchive) GetTextStyle() *Reference {
	if x != nil {
		return x.TextStyle
	}
	return nil
}

func (x *ColumnRowMetadataArchive) GetUuid() *UUID {
	if x != nil {
		return x.Uuid
	}
	return nil
}

type CommandInsertColumnsOrRowsArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                         *TableCommandArchive      `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Bundle                        *ColumnRowBundleArchive   `protobuf:"bytes,2,req,name=bundle" json:"bundle,omitempty"`
	CellMap                       *Reference                `protobuf:"bytes,3,opt,name=cell_map,json=cellMap" json:"cell_map,omitempty"`
	UndoCommands                  *Reference                `protobuf:"bytes,4,opt,name=undo_commands,json=undoCommands" json:"undo_commands,omitempty"`
	UndoCellMap                   *Reference                `protobuf:"bytes,5,opt,name=undo_cell_map,json=undoCellMap" json:"undo_cell_map,omitempty"`
	SortOrder                     *TableSortOrderUIDArchive `protobuf:"bytes,6,opt,name=sort_order,json=sortOrder" json:"sort_order,omitempty"`
	FilterSet                     *Reference                `protobuf:"bytes,7,opt,name=filter_set,json=filterSet" json:"filter_set,omitempty"`
	ShouldEdgeExpandFormulaRanges *bool                     `protobuf:"varint,8,opt,name=should_edge_expand_formula_ranges,json=shouldEdgeExpandFormulaRanges" json:"should_edge_expand_formula_ranges,omitempty"`
	WasCategorized                *bool                     `protobuf:"varint,9,opt,name=was_categorized,json=wasCategorized" json:"was_categorized,omitempty"`
	UndoOrder                     []*UUID                   `protobuf:"bytes,10,rep,name=undo_order,json=undoOrder" json:"undo_order,omitempty"`
	SrcRowColumnUid               *UUID                     `protobuf:"bytes,11,req,name=src_row_column_uid,json=srcRowColumnUid" json:"src_row_column_uid,omitempty"`
	OppRowColumnUid               *UUID                     `protobuf:"bytes,12,req,name=opp_row_column_uid,json=oppRowColumnUid" json:"opp_row_column_uid,omitempty"`
	UndoBundle                    *ColumnRowBundleArchive   `protobuf:"bytes,13,opt,name=undo_bundle,json=undoBundle" json:"undo_bundle,omitempty"`
}

func (x *CommandInsertColumnsOrRowsArchive) Reset() {
	*x = CommandInsertColumnsOrRowsArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandInsertColumnsOrRowsArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandInsertColumnsOrRowsArchive) ProtoMessage() {}

func (x *CommandInsertColumnsOrRowsArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandInsertColumnsOrRowsArchive.ProtoReflect.Descriptor instead.
func (*CommandInsertColumnsOrRowsArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{15}
}

func (x *CommandInsertColumnsOrRowsArchive) GetSuper() *TableCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandInsertColumnsOrRowsArchive) GetBundle() *ColumnRowBundleArchive {
	if x != nil {
		return x.Bundle
	}
	return nil
}

func (x *CommandInsertColumnsOrRowsArchive) GetCellMap() *Reference {
	if x != nil {
		return x.CellMap
	}
	return nil
}

func (x *CommandInsertColumnsOrRowsArchive) GetUndoCommands() *Reference {
	if x != nil {
		return x.UndoCommands
	}
	return nil
}

func (x *CommandInsertColumnsOrRowsArchive) GetUndoCellMap() *Reference {
	if x != nil {
		return x.UndoCellMap
	}
	return nil
}

func (x *CommandInsertColumnsOrRowsArchive) GetSortOrder() *TableSortOrderUIDArchive {
	if x != nil {
		return x.SortOrder
	}
	return nil
}

func (x *CommandInsertColumnsOrRowsArchive) GetFilterSet() *Reference {
	if x != nil {
		return x.FilterSet
	}
	return nil
}

func (x *CommandInsertColumnsOrRowsArchive) GetShouldEdgeExpandFormulaRanges() bool {
	if x != nil && x.ShouldEdgeExpandFormulaRanges != nil {
		return *x.ShouldEdgeExpandFormulaRanges
	}
	return false
}

func (x *CommandInsertColumnsOrRowsArchive) GetWasCategorized() bool {
	if x != nil && x.WasCategorized != nil {
		return *x.WasCategorized
	}
	return false
}

func (x *CommandInsertColumnsOrRowsArchive) GetUndoOrder() []*UUID {
	if x != nil {
		return x.UndoOrder
	}
	return nil
}

func (x *CommandInsertColumnsOrRowsArchive) GetSrcRowColumnUid() *UUID {
	if x != nil {
		return x.SrcRowColumnUid
	}
	return nil
}

func (x *CommandInsertColumnsOrRowsArchive) GetOppRowColumnUid() *UUID {
	if x != nil {
		return x.OppRowColumnUid
	}
	return nil
}

func (x *CommandInsertColumnsOrRowsArchive) GetUndoBundle() *ColumnRowBundleArchive {
	if x != nil {
		return x.UndoBundle
	}
	return nil
}

type ColumnRowBundleArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsRow                 *bool                         `protobuf:"varint,1,req,name=is_row,json=isRow" json:"is_row,omitempty"`
	ViewUidList           []*UUID                       `protobuf:"bytes,2,rep,name=view_uid_list,json=viewUidList" json:"view_uid_list,omitempty"`
	ViewTypeList          []ColumnRowBundleItemTypeEnum `protobuf:"varint,3,rep,name=view_type_list,json=viewTypeList,enum=TST.ColumnRowBundleItemTypeEnum" json:"view_type_list,omitempty"`
	BaseUidList           []*UUID                       `protobuf:"bytes,4,rep,name=base_uid_list,json=baseUidList" json:"base_uid_list,omitempty"`
	BaseTypeList          []ColumnRowBundleItemTypeEnum `protobuf:"varint,5,rep,name=base_type_list,json=baseTypeList,enum=TST.ColumnRowBundleItemTypeEnum" json:"base_type_list,omitempty"`
	CategoryOrderUidList  []*UUID                       `protobuf:"bytes,6,rep,name=category_order_uid_list,json=categoryOrderUidList" json:"category_order_uid_list,omitempty"`
	CategoryOrderTypeList []ColumnRowBundleItemTypeEnum `protobuf:"varint,7,rep,name=category_order_type_list,json=categoryOrderTypeList,enum=TST.ColumnRowBundleItemTypeEnum" json:"category_order_type_list,omitempty"`
	MetadataList          []*ColumnRowMetadataArchive   `protobuf:"bytes,8,rep,name=metadata_list,json=metadataList" json:"metadata_list,omitempty"`
}

func (x *ColumnRowBundleArchive) Reset() {
	*x = ColumnRowBundleArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnRowBundleArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnRowBundleArchive) ProtoMessage() {}

func (x *ColumnRowBundleArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnRowBundleArchive.ProtoReflect.Descriptor instead.
func (*ColumnRowBundleArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{16}
}

func (x *ColumnRowBundleArchive) GetIsRow() bool {
	if x != nil && x.IsRow != nil {
		return *x.IsRow
	}
	return false
}

func (x *ColumnRowBundleArchive) GetViewUidList() []*UUID {
	if x != nil {
		return x.ViewUidList
	}
	return nil
}

func (x *ColumnRowBundleArchive) GetViewTypeList() []ColumnRowBundleItemTypeEnum {
	if x != nil {
		return x.ViewTypeList
	}
	return nil
}

func (x *ColumnRowBundleArchive) GetBaseUidList() []*UUID {
	if x != nil {
		return x.BaseUidList
	}
	return nil
}

func (x *ColumnRowBundleArchive) GetBaseTypeList() []ColumnRowBundleItemTypeEnum {
	if x != nil {
		return x.BaseTypeList
	}
	return nil
}

func (x *ColumnRowBundleArchive) GetCategoryOrderUidList() []*UUID {
	if x != nil {
		return x.CategoryOrderUidList
	}
	return nil
}

func (x *ColumnRowBundleArchive) GetCategoryOrderTypeList() []ColumnRowBundleItemTypeEnum {
	if x != nil {
		return x.CategoryOrderTypeList
	}
	return nil
}

func (x *ColumnRowBundleArchive) GetMetadataList() []*ColumnRowMetadataArchive {
	if x != nil {
		return x.MetadataList
	}
	return nil
}

type CommandRemoveColumnsOrRowsArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                                *TableCommandArchive      `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Bundle                               *ColumnRowBundleArchive   `protobuf:"bytes,2,req,name=bundle" json:"bundle,omitempty"`
	CellMap                              *Reference                `protobuf:"bytes,3,opt,name=cell_map,json=cellMap" json:"cell_map,omitempty"`
	UndoCellMap                          *Reference                `protobuf:"bytes,4,opt,name=undo_cell_map,json=undoCellMap" json:"undo_cell_map,omitempty"`
	UndoFilterSet                        *Reference                `protobuf:"bytes,5,opt,name=undo_filter_set,json=undoFilterSet" json:"undo_filter_set,omitempty"`
	UndoSortOrder                        *TableSortOrderUIDArchive `protobuf:"bytes,6,opt,name=undo_sort_order,json=undoSortOrder" json:"undo_sort_order,omitempty"`
	FormulaRewriteCommandForUndo         *Reference                `protobuf:"bytes,7,opt,name=formula_rewrite_command_for_undo,json=formulaRewriteCommandForUndo" json:"formula_rewrite_command_for_undo,omitempty"`
	InverseShouldEdgeExpandFormulaRanges *bool                     `protobuf:"varint,8,opt,name=inverse_should_edge_expand_formula_ranges,json=inverseShouldEdgeExpandFormulaRanges" json:"inverse_should_edge_expand_formula_ranges,omitempty"`
	UndoOrder                            []*UUID                   `protobuf:"bytes,9,rep,name=undo_order,json=undoOrder" json:"undo_order,omitempty"`
}

func (x *CommandRemoveColumnsOrRowsArchive) Reset() {
	*x = CommandRemoveColumnsOrRowsArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandRemoveColumnsOrRowsArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandRemoveColumnsOrRowsArchive) ProtoMessage() {}

func (x *CommandRemoveColumnsOrRowsArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandRemoveColumnsOrRowsArchive.ProtoReflect.Descriptor instead.
func (*CommandRemoveColumnsOrRowsArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{17}
}

func (x *CommandRemoveColumnsOrRowsArchive) GetSuper() *TableCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandRemoveColumnsOrRowsArchive) GetBundle() *ColumnRowBundleArchive {
	if x != nil {
		return x.Bundle
	}
	return nil
}

func (x *CommandRemoveColumnsOrRowsArchive) GetCellMap() *Reference {
	if x != nil {
		return x.CellMap
	}
	return nil
}

func (x *CommandRemoveColumnsOrRowsArchive) GetUndoCellMap() *Reference {
	if x != nil {
		return x.UndoCellMap
	}
	return nil
}

func (x *CommandRemoveColumnsOrRowsArchive) GetUndoFilterSet() *Reference {
	if x != nil {
		return x.UndoFilterSet
	}
	return nil
}

func (x *CommandRemoveColumnsOrRowsArchive) GetUndoSortOrder() *TableSortOrderUIDArchive {
	if x != nil {
		return x.UndoSortOrder
	}
	return nil
}

func (x *CommandRemoveColumnsOrRowsArchive) GetFormulaRewriteCommandForUndo() *Reference {
	if x != nil {
		return x.FormulaRewriteCommandForUndo
	}
	return nil
}

func (x *CommandRemoveColumnsOrRowsArchive) GetInverseShouldEdgeExpandFormulaRanges() bool {
	if x != nil && x.InverseShouldEdgeExpandFormulaRanges != nil {
		return *x.InverseShouldEdgeExpandFormulaRanges
	}
	return false
}

func (x *CommandRemoveColumnsOrRowsArchive) GetUndoOrder() []*UUID {
	if x != nil {
		return x.UndoOrder
	}
	return nil
}

type CommandRowColumnRangeArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *TableCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Uids  []*UUID              `protobuf:"bytes,2,rep,name=uids" json:"uids,omitempty"`
	IsRow *bool                `protobuf:"varint,3,req,name=is_row,json=isRow" json:"is_row,omitempty"`
}

func (x *CommandRowColumnRangeArchive) Reset() {
	*x = CommandRowColumnRangeArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandRowColumnRangeArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandRowColumnRangeArchive) ProtoMessage() {}

func (x *CommandRowColumnRangeArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandRowColumnRangeArchive.ProtoReflect.Descriptor instead.
func (*CommandRowColumnRangeArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{18}
}

func (x *CommandRowColumnRangeArchive) GetSuper() *TableCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandRowColumnRangeArchive) GetUids() []*UUID {
	if x != nil {
		return x.Uids
	}
	return nil
}

func (x *CommandRowColumnRangeArchive) GetIsRow() bool {
	if x != nil && x.IsRow != nil {
		return *x.IsRow
	}
	return false
}

type CommandResizeColumnOrRowArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super        *CommandRowColumnRangeArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Sizes        []float32                     `protobuf:"fixed32,2,rep,name=sizes" json:"sizes,omitempty"`
	SizesForUndo []float32                     `protobuf:"fixed32,3,rep,name=sizes_for_undo,json=sizesForUndo" json:"sizes_for_undo,omitempty"`
}

func (x *CommandResizeColumnOrRowArchive) Reset() {
	*x = CommandResizeColumnOrRowArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandResizeColumnOrRowArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandResizeColumnOrRowArchive) ProtoMessage() {}

func (x *CommandResizeColumnOrRowArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandResizeColumnOrRowArchive.ProtoReflect.Descriptor instead.
func (*CommandResizeColumnOrRowArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{19}
}

func (x *CommandResizeColumnOrRowArchive) GetSuper() *CommandRowColumnRangeArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandResizeColumnOrRowArchive) GetSizes() []float32 {
	if x != nil {
		return x.Sizes
	}
	return nil
}

func (x *CommandResizeColumnOrRowArchive) GetSizesForUndo() []float32 {
	if x != nil {
		return x.SizesForUndo
	}
	return nil
}

type CommandCategoryResizeColumnOrRowArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                        *TableCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	CategoryRowSizes             []float32            `protobuf:"fixed32,2,rep,name=category_row_sizes,json=categoryRowSizes" json:"category_row_sizes,omitempty"`
	CategoryRowSizesForUndo      []float32            `protobuf:"fixed32,3,rep,name=category_row_sizes_for_undo,json=categoryRowSizesForUndo" json:"category_row_sizes_for_undo,omitempty"`
	CategoryLabelRowSizes        []float32            `protobuf:"fixed32,4,rep,name=category_label_row_sizes,json=categoryLabelRowSizes" json:"category_label_row_sizes,omitempty"`
	CategoryLabelRowSizesForUndo []float32            `protobuf:"fixed32,5,rep,name=category_label_row_sizes_for_undo,json=categoryLabelRowSizesForUndo" json:"category_label_row_sizes_for_undo,omitempty"`
	CategoryColumnSize           *float64             `protobuf:"fixed64,6,opt,name=category_column_size,json=categoryColumnSize" json:"category_column_size,omitempty"`
	CategoryColumnSizeForUndo    *float64             `protobuf:"fixed64,7,opt,name=category_column_size_for_undo,json=categoryColumnSizeForUndo" json:"category_column_size_for_undo,omitempty"`
}

func (x *CommandCategoryResizeColumnOrRowArchive) Reset() {
	*x = CommandCategoryResizeColumnOrRowArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandCategoryResizeColumnOrRowArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandCategoryResizeColumnOrRowArchive) ProtoMessage() {}

func (x *CommandCategoryResizeColumnOrRowArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandCategoryResizeColumnOrRowArchive.ProtoReflect.Descriptor instead.
func (*CommandCategoryResizeColumnOrRowArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{20}
}

func (x *CommandCategoryResizeColumnOrRowArchive) GetSuper() *TableCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandCategoryResizeColumnOrRowArchive) GetCategoryRowSizes() []float32 {
	if x != nil {
		return x.CategoryRowSizes
	}
	return nil
}

func (x *CommandCategoryResizeColumnOrRowArchive) GetCategoryRowSizesForUndo() []float32 {
	if x != nil {
		return x.CategoryRowSizesForUndo
	}
	return nil
}

func (x *CommandCategoryResizeColumnOrRowArchive) GetCategoryLabelRowSizes() []float32 {
	if x != nil {
		return x.CategoryLabelRowSizes
	}
	return nil
}

func (x *CommandCategoryResizeColumnOrRowArchive) GetCategoryLabelRowSizesForUndo() []float32 {
	if x != nil {
		return x.CategoryLabelRowSizesForUndo
	}
	return nil
}

func (x *CommandCategoryResizeColumnOrRowArchive) GetCategoryColumnSize() float64 {
	if x != nil && x.CategoryColumnSize != nil {
		return *x.CategoryColumnSize
	}
	return 0
}

func (x *CommandCategoryResizeColumnOrRowArchive) GetCategoryColumnSizeForUndo() float64 {
	if x != nil && x.CategoryColumnSizeForUndo != nil {
		return *x.CategoryColumnSizeForUndo
	}
	return 0
}

type CommandHideShowArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                 *CommandRowColumnRangeArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	HideShowAction        *HideShowActionArchive        `protobuf:"varint,2,req,name=hide_show_action,json=hideShowAction,enum=TST.HideShowActionArchive" json:"hide_show_action,omitempty"`
	HidingAction          *uint32                       `protobuf:"varint,3,req,name=hiding_action,json=hidingAction" json:"hiding_action,omitempty"`
	HideShowActionForUndo []HideShowActionArchive       `protobuf:"varint,4,rep,name=hide_show_action_for_undo,json=hideShowActionForUndo,enum=TST.HideShowActionArchive" json:"hide_show_action_for_undo,omitempty"`
}

func (x *CommandHideShowArchive) Reset() {
	*x = CommandHideShowArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandHideShowArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandHideShowArchive) ProtoMessage() {}

func (x *CommandHideShowArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandHideShowArchive.ProtoReflect.Descriptor instead.
func (*CommandHideShowArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{21}
}

func (x *CommandHideShowArchive) GetSuper() *CommandRowColumnRangeArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandHideShowArchive) GetHideShowAction() HideShowActionArchive {
	if x != nil && x.HideShowAction != nil {
		return *x.HideShowAction
	}
	return HideShowActionArchive_hideShowActionHide
}

func (x *CommandHideShowArchive) GetHidingAction() uint32 {
	if x != nil && x.HidingAction != nil {
		return *x.HidingAction
	}
	return 0
}

func (x *CommandHideShowArchive) GetHideShowActionForUndo() []HideShowActionArchive {
	if x != nil {
		return x.HideShowActionForUndo
	}
	return nil
}

type CommandTextPreflightInsertCellArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                        *TableCommandArchive  `protobuf:"bytes,3,req,name=super" json:"super,omitempty"`
	CoalescedTextcommand         *Reference            `protobuf:"bytes,6,opt,name=coalesced_textcommand,json=coalescedTextcommand" json:"coalesced_textcommand,omitempty"`
	Postflightcommand            *Reference            `protobuf:"bytes,8,opt,name=postflightcommand" json:"postflightcommand,omitempty"`
	GroupedWithPostflight        *bool                 `protobuf:"varint,9,opt,name=grouped_with_postflight,json=groupedWithPostflight" json:"grouped_with_postflight,omitempty"`
	EditingCell                  *Cell                 `protobuf:"bytes,10,req,name=editing_cell,json=editingCell" json:"editing_cell,omitempty"`
	EditingStorage               *Reference            `protobuf:"bytes,11,req,name=editing_storage,json=editingStorage" json:"editing_storage,omitempty"`
	LastColumnHitByTap           *uint32               `protobuf:"varint,12,opt,name=last_column_hit_by_tap,json=lastColumnHitByTap" json:"last_column_hit_by_tap,omitempty"`
	CellUid                      *UUIDCoordArchive     `protobuf:"bytes,13,req,name=cell_uid,json=cellUid" json:"cell_uid,omitempty"`
	ArchivedInitialSelectionPath *SelectionPathArchive `protobuf:"bytes,14,opt,name=archived_initial_selection_path,json=archivedInitialSelectionPath" json:"archived_initial_selection_path,omitempty"`
}

func (x *CommandTextPreflightInsertCellArchive) Reset() {
	*x = CommandTextPreflightInsertCellArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandTextPreflightInsertCellArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandTextPreflightInsertCellArchive) ProtoMessage() {}

func (x *CommandTextPreflightInsertCellArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandTextPreflightInsertCellArchive.ProtoReflect.Descriptor instead.
func (*CommandTextPreflightInsertCellArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{22}
}

func (x *CommandTextPreflightInsertCellArchive) GetSuper() *TableCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandTextPreflightInsertCellArchive) GetCoalescedTextcommand() *Reference {
	if x != nil {
		return x.CoalescedTextcommand
	}
	return nil
}

func (x *CommandTextPreflightInsertCellArchive) GetPostflightcommand() *Reference {
	if x != nil {
		return x.Postflightcommand
	}
	return nil
}

func (x *CommandTextPreflightInsertCellArchive) GetGroupedWithPostflight() bool {
	if x != nil && x.GroupedWithPostflight != nil {
		return *x.GroupedWithPostflight
	}
	return false
}

func (x *CommandTextPreflightInsertCellArchive) GetEditingCell() *Cell {
	if x != nil {
		return x.EditingCell
	}
	return nil
}

func (x *CommandTextPreflightInsertCellArchive) GetEditingStorage() *Reference {
	if x != nil {
		return x.EditingStorage
	}
	return nil
}

func (x *CommandTextPreflightInsertCellArchive) GetLastColumnHitByTap() uint32 {
	if x != nil && x.LastColumnHitByTap != nil {
		return *x.LastColumnHitByTap
	}
	return 0
}

func (x *CommandTextPreflightInsertCellArchive) GetCellUid() *UUIDCoordArchive {
	if x != nil {
		return x.CellUid
	}
	return nil
}

func (x *CommandTextPreflightInsertCellArchive) GetArchivedInitialSelectionPath() *SelectionPathArchive {
	if x != nil {
		return x.ArchivedInitialSelectionPath
	}
	return nil
}

type CommandPostflightSetCellArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super              *TableCommandArchive `protobuf:"bytes,3,req,name=super" json:"super,omitempty"`
	Childcommandundo   *Reference           `protobuf:"bytes,4,opt,name=childcommandundo" json:"childcommandundo,omitempty"`
	EditingCell        *Cell                `protobuf:"bytes,6,req,name=editing_cell,json=editingCell" json:"editing_cell,omitempty"`
	NewCell            *Cell                `protobuf:"bytes,7,req,name=new_cell,json=newCell" json:"new_cell,omitempty"`
	EditingStorage     *Reference           `protobuf:"bytes,8,req,name=editing_storage,json=editingStorage" json:"editing_storage,omitempty"`
	LastColumnHitByTap *uint32              `protobuf:"varint,9,opt,name=last_column_hit_by_tap,json=lastColumnHitByTap" json:"last_column_hit_by_tap,omitempty"`
	CellUid            *UUIDCoordArchive    `protobuf:"bytes,10,req,name=cell_uid,json=cellUid" json:"cell_uid,omitempty"`
}

func (x *CommandPostflightSetCellArchive) Reset() {
	*x = CommandPostflightSetCellArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandPostflightSetCellArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandPostflightSetCellArchive) ProtoMessage() {}

func (x *CommandPostflightSetCellArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandPostflightSetCellArchive.ProtoReflect.Descriptor instead.
func (*CommandPostflightSetCellArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{23}
}

func (x *CommandPostflightSetCellArchive) GetSuper() *TableCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandPostflightSetCellArchive) GetChildcommandundo() *Reference {
	if x != nil {
		return x.Childcommandundo
	}
	return nil
}

func (x *CommandPostflightSetCellArchive) GetEditingCell() *Cell {
	if x != nil {
		return x.EditingCell
	}
	return nil
}

func (x *CommandPostflightSetCellArchive) GetNewCell() *Cell {
	if x != nil {
		return x.NewCell
	}
	return nil
}

func (x *CommandPostflightSetCellArchive) GetEditingStorage() *Reference {
	if x != nil {
		return x.EditingStorage
	}
	return nil
}

func (x *CommandPostflightSetCellArchive) GetLastColumnHitByTap() uint32 {
	if x != nil && x.LastColumnHitByTap != nil {
		return *x.LastColumnHitByTap
	}
	return 0
}

func (x *CommandPostflightSetCellArchive) GetCellUid() *UUIDCoordArchive {
	if x != nil {
		return x.CellUid
	}
	return nil
}

type CommandChangeTableAreaForColumnOrRowArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super               *CommandRowColumnRangeArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	TableAreaTransition *TableAreaTransition          `protobuf:"varint,2,req,name=table_area_transition,json=tableAreaTransition,enum=TST.TableAreaTransition" json:"table_area_transition,omitempty"`
	CellDiffMap         *Reference                    `protobuf:"bytes,3,opt,name=cell_diff_map,json=cellDiffMap" json:"cell_diff_map,omitempty"`
	UndoCellDiffMap     *Reference                    `protobuf:"bytes,4,opt,name=undo_cell_diff_map,json=undoCellDiffMap" json:"undo_cell_diff_map,omitempty"`
	UndoCommands        *Reference                    `protobuf:"bytes,5,opt,name=undo_commands,json=undoCommands" json:"undo_commands,omitempty"`
	ActionString        *string                       `protobuf:"bytes,6,opt,name=action_string,json=actionString" json:"action_string,omitempty"`
}

func (x *CommandChangeTableAreaForColumnOrRowArchive) Reset() {
	*x = CommandChangeTableAreaForColumnOrRowArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandChangeTableAreaForColumnOrRowArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandChangeTableAreaForColumnOrRowArchive) ProtoMessage() {}

func (x *CommandChangeTableAreaForColumnOrRowArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandChangeTableAreaForColumnOrRowArchive.ProtoReflect.Descriptor instead.
func (*CommandChangeTableAreaForColumnOrRowArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{24}
}

func (x *CommandChangeTableAreaForColumnOrRowArchive) GetSuper() *CommandRowColumnRangeArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandChangeTableAreaForColumnOrRowArchive) GetTableAreaTransition() TableAreaTransition {
	if x != nil && x.TableAreaTransition != nil {
		return *x.TableAreaTransition
	}
	return TableAreaTransition_TableAreaTransitionHeaderRowToBody
}

func (x *CommandChangeTableAreaForColumnOrRowArchive) GetCellDiffMap() *Reference {
	if x != nil {
		return x.CellDiffMap
	}
	return nil
}

func (x *CommandChangeTableAreaForColumnOrRowArchive) GetUndoCellDiffMap() *Reference {
	if x != nil {
		return x.UndoCellDiffMap
	}
	return nil
}

func (x *CommandChangeTableAreaForColumnOrRowArchive) GetUndoCommands() *Reference {
	if x != nil {
		return x.UndoCommands
	}
	return nil
}

func (x *CommandChangeTableAreaForColumnOrRowArchive) GetActionString() string {
	if x != nil && x.ActionString != nil {
		return *x.ActionString
	}
	return ""
}

type CommandSetPencilAnnotationsArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                 *TableCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Annotations           []*Reference         `protobuf:"bytes,2,rep,name=annotations" json:"annotations,omitempty"`
	Formulas              []*FormulaArchive    `protobuf:"bytes,3,rep,name=formulas" json:"formulas,omitempty"`
	FormulaIndexes        []uint64             `protobuf:"varint,4,rep,name=formula_indexes,json=formulaIndexes" json:"formula_indexes,omitempty"`
	InverseFormulas       []*FormulaArchive    `protobuf:"bytes,5,rep,name=inverse_formulas,json=inverseFormulas" json:"inverse_formulas,omitempty"`
	InverseFormulaIndexes []uint64             `protobuf:"varint,6,rep,name=inverse_formula_indexes,json=inverseFormulaIndexes" json:"inverse_formula_indexes,omitempty"`
	RollbackIndex         *uint64              `protobuf:"varint,7,opt,name=rollback_index,json=rollbackIndex" json:"rollback_index,omitempty"`
}

func (x *CommandSetPencilAnnotationsArchive) Reset() {
	*x = CommandSetPencilAnnotationsArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSetPencilAnnotationsArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSetPencilAnnotationsArchive) ProtoMessage() {}

func (x *CommandSetPencilAnnotationsArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSetPencilAnnotationsArchive.ProtoReflect.Descriptor instead.
func (*CommandSetPencilAnnotationsArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{25}
}

func (x *CommandSetPencilAnnotationsArchive) GetSuper() *TableCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandSetPencilAnnotationsArchive) GetAnnotations() []*Reference {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *CommandSetPencilAnnotationsArchive) GetFormulas() []*FormulaArchive {
	if x != nil {
		return x.Formulas
	}
	return nil
}

func (x *CommandSetPencilAnnotationsArchive) GetFormulaIndexes() []uint64 {
	if x != nil {
		return x.FormulaIndexes
	}
	return nil
}

func (x *CommandSetPencilAnnotationsArchive) GetInverseFormulas() []*FormulaArchive {
	if x != nil {
		return x.InverseFormulas
	}
	return nil
}

func (x *CommandSetPencilAnnotationsArchive) GetInverseFormulaIndexes() []uint64 {
	if x != nil {
		return x.InverseFormulaIndexes
	}
	return nil
}

func (x *CommandSetPencilAnnotationsArchive) GetRollbackIndex() uint64 {
	if x != nil && x.RollbackIndex != nil {
		return *x.RollbackIndex
	}
	return 0
}

type CommandSetTableNameArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Newtablename              *string              `protobuf:"bytes,1,req,name=newtablename" json:"newtablename,omitempty"`
	Oldtablename              *string              `protobuf:"bytes,2,opt,name=oldtablename" json:"oldtablename,omitempty"`
	Newstyle                  *Reference           `protobuf:"bytes,3,opt,name=newstyle" json:"newstyle,omitempty"`
	Oldstyle                  *Reference           `protobuf:"bytes,4,opt,name=oldstyle" json:"oldstyle,omitempty"`
	Super                     *TableCommandArchive `protobuf:"bytes,5,req,name=super" json:"super,omitempty"`
	OldShapeStyle             *Reference           `protobuf:"bytes,6,opt,name=old_shape_style,json=oldShapeStyle" json:"old_shape_style,omitempty"`
	NewShapeStyle             *Reference           `protobuf:"bytes,7,opt,name=new_shape_style,json=newShapeStyle" json:"new_shape_style,omitempty"`
	OldTableNameBorderEnabled *bool                `protobuf:"varint,8,opt,name=old_table_name_border_enabled,json=oldTableNameBorderEnabled" json:"old_table_name_border_enabled,omitempty"`
	NewTableNameBorderEnabled *bool                `protobuf:"varint,9,opt,name=new_table_name_border_enabled,json=newTableNameBorderEnabled" json:"new_table_name_border_enabled,omitempty"`
}

func (x *CommandSetTableNameArchive) Reset() {
	*x = CommandSetTableNameArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSetTableNameArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSetTableNameArchive) ProtoMessage() {}

func (x *CommandSetTableNameArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSetTableNameArchive.ProtoReflect.Descriptor instead.
func (*CommandSetTableNameArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{26}
}

func (x *CommandSetTableNameArchive) GetNewtablename() string {
	if x != nil && x.Newtablename != nil {
		return *x.Newtablename
	}
	return ""
}

func (x *CommandSetTableNameArchive) GetOldtablename() string {
	if x != nil && x.Oldtablename != nil {
		return *x.Oldtablename
	}
	return ""
}

func (x *CommandSetTableNameArchive) GetNewstyle() *Reference {
	if x != nil {
		return x.Newstyle
	}
	return nil
}

func (x *CommandSetTableNameArchive) GetOldstyle() *Reference {
	if x != nil {
		return x.Oldstyle
	}
	return nil
}

func (x *CommandSetTableNameArchive) GetSuper() *TableCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandSetTableNameArchive) GetOldShapeStyle() *Reference {
	if x != nil {
		return x.OldShapeStyle
	}
	return nil
}

func (x *CommandSetTableNameArchive) GetNewShapeStyle() *Reference {
	if x != nil {
		return x.NewShapeStyle
	}
	return nil
}

func (x *CommandSetTableNameArchive) GetOldTableNameBorderEnabled() bool {
	if x != nil && x.OldTableNameBorderEnabled != nil {
		return *x.OldTableNameBorderEnabled
	}
	return false
}

func (x *CommandSetTableNameArchive) GetNewTableNameBorderEnabled() bool {
	if x != nil && x.NewTableNameBorderEnabled != nil {
		return *x.NewTableNameBorderEnabled
	}
	return false
}

type CommandSetTableNameEnabledArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                *TableCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	TableNameEnabled     *bool                `protobuf:"varint,2,req,name=table_name_enabled,json=tableNameEnabled" json:"table_name_enabled,omitempty"`
	PrevTableNameEnabled *bool                `protobuf:"varint,3,opt,name=prev_table_name_enabled,json=prevTableNameEnabled" json:"prev_table_name_enabled,omitempty"`
}

func (x *CommandSetTableNameEnabledArchive) Reset() {
	*x = CommandSetTableNameEnabledArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSetTableNameEnabledArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSetTableNameEnabledArchive) ProtoMessage() {}

func (x *CommandSetTableNameEnabledArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSetTableNameEnabledArchive.ProtoReflect.Descriptor instead.
func (*CommandSetTableNameEnabledArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{27}
}

func (x *CommandSetTableNameEnabledArchive) GetSuper() *TableCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandSetTableNameEnabledArchive) GetTableNameEnabled() bool {
	if x != nil && x.TableNameEnabled != nil {
		return *x.TableNameEnabled
	}
	return false
}

func (x *CommandSetTableNameEnabledArchive) GetPrevTableNameEnabled() bool {
	if x != nil && x.PrevTableNameEnabled != nil {
		return *x.PrevTableNameEnabled
	}
	return false
}

type CommandSetTableFontSizeArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                      *TableCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	IsIncrease                 *bool                `protobuf:"varint,2,req,name=is_increase,json=isIncrease" json:"is_increase,omitempty"`
	FontSizeDiff               *int32               `protobuf:"varint,3,req,name=font_size_diff,json=fontSizeDiff" json:"font_size_diff,omitempty"`
	FontSizeList               []float64            `protobuf:"fixed64,4,rep,name=font_size_list,json=fontSizeList" json:"font_size_list,omitempty"`
	InverseFontSizeList        []float64            `protobuf:"fixed64,5,rep,name=inverse_font_size_list,json=inverseFontSizeList" json:"inverse_font_size_list,omitempty"`
	CellDiffMap                *Reference           `protobuf:"bytes,6,opt,name=cell_diff_map,json=cellDiffMap" json:"cell_diff_map,omitempty"`
	InverseCellDiffMap         *Reference           `protobuf:"bytes,7,opt,name=inverse_cell_diff_map,json=inverseCellDiffMap" json:"inverse_cell_diff_map,omitempty"`
	StylesContainerRefreshDone *bool                `protobuf:"varint,8,req,name=styles_container_refresh_done,json=stylesContainerRefreshDone" json:"styles_container_refresh_done,omitempty"`
}

func (x *CommandSetTableFontSizeArchive) Reset() {
	*x = CommandSetTableFontSizeArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSetTableFontSizeArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSetTableFontSizeArchive) ProtoMessage() {}

func (x *CommandSetTableFontSizeArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSetTableFontSizeArchive.ProtoReflect.Descriptor instead.
func (*CommandSetTableFontSizeArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{28}
}

func (x *CommandSetTableFontSizeArchive) GetSuper() *TableCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandSetTableFontSizeArchive) GetIsIncrease() bool {
	if x != nil && x.IsIncrease != nil {
		return *x.IsIncrease
	}
	return false
}

func (x *CommandSetTableFontSizeArchive) GetFontSizeDiff() int32 {
	if x != nil && x.FontSizeDiff != nil {
		return *x.FontSizeDiff
	}
	return 0
}

func (x *CommandSetTableFontSizeArchive) GetFontSizeList() []float64 {
	if x != nil {
		return x.FontSizeList
	}
	return nil
}

func (x *CommandSetTableFontSizeArchive) GetInverseFontSizeList() []float64 {
	if x != nil {
		return x.InverseFontSizeList
	}
	return nil
}

func (x *CommandSetTableFontSizeArchive) GetCellDiffMap() *Reference {
	if x != nil {
		return x.CellDiffMap
	}
	return nil
}

func (x *CommandSetTableFontSizeArchive) GetInverseCellDiffMap() *Reference {
	if x != nil {
		return x.InverseCellDiffMap
	}
	return nil
}

func (x *CommandSetTableFontSizeArchive) GetStylesContainerRefreshDone() bool {
	if x != nil && x.StylesContainerRefreshDone != nil {
		return *x.StylesContainerRefreshDone
	}
	return false
}

type CommandSetTableFontNameArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super              *TableCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	FontName           *string              `protobuf:"bytes,2,req,name=font_name,json=fontName" json:"font_name,omitempty"`
	PreserveFace       *bool                `protobuf:"varint,3,req,name=preserve_face,json=preserveFace" json:"preserve_face,omitempty"`
	PreviousFontName   *string              `protobuf:"bytes,4,opt,name=previous_font_name,json=previousFontName" json:"previous_font_name,omitempty"`
	PreviousTableStyle *Reference           `protobuf:"bytes,5,opt,name=previous_table_style,json=previousTableStyle" json:"previous_table_style,omitempty"`
	PreviousTextStyles []*Reference         `protobuf:"bytes,6,rep,name=previous_text_styles,json=previousTextStyles" json:"previous_text_styles,omitempty"`
	CellDiffMap        *Reference           `protobuf:"bytes,7,req,name=cell_diff_map,json=cellDiffMap" json:"cell_diff_map,omitempty"`
	InverseCellDiffMap *Reference           `protobuf:"bytes,8,opt,name=inverse_cell_diff_map,json=inverseCellDiffMap" json:"inverse_cell_diff_map,omitempty"`
}

func (x *CommandSetTableFontNameArchive) Reset() {
	*x = CommandSetTableFontNameArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSetTableFontNameArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSetTableFontNameArchive) ProtoMessage() {}

func (x *CommandSetTableFontNameArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSetTableFontNameArchive.ProtoReflect.Descriptor instead.
func (*CommandSetTableFontNameArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{29}
}

func (x *CommandSetTableFontNameArchive) GetSuper() *TableCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandSetTableFontNameArchive) GetFontName() string {
	if x != nil && x.FontName != nil {
		return *x.FontName
	}
	return ""
}

func (x *CommandSetTableFontNameArchive) GetPreserveFace() bool {
	if x != nil && x.PreserveFace != nil {
		return *x.PreserveFace
	}
	return false
}

func (x *CommandSetTableFontNameArchive) GetPreviousFontName() string {
	if x != nil && x.PreviousFontName != nil {
		return *x.PreviousFontName
	}
	return ""
}

func (x *CommandSetTableFontNameArchive) GetPreviousTableStyle() *Reference {
	if x != nil {
		return x.PreviousTableStyle
	}
	return nil
}

func (x *CommandSetTableFontNameArchive) GetPreviousTextStyles() []*Reference {
	if x != nil {
		return x.PreviousTextStyles
	}
	return nil
}

func (x *CommandSetTableFontNameArchive) GetCellDiffMap() *Reference {
	if x != nil {
		return x.CellDiffMap
	}
	return nil
}

func (x *CommandSetTableFontNameArchive) GetInverseCellDiffMap() *Reference {
	if x != nil {
		return x.InverseCellDiffMap
	}
	return nil
}

type CommandSetTableNameHeightArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super              *TableCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	OldTableNameHeight *float64             `protobuf:"fixed64,2,req,name=old_table_name_height,json=oldTableNameHeight" json:"old_table_name_height,omitempty"`
	NewTableNameHeight *float64             `protobuf:"fixed64,3,req,name=new_table_name_height,json=newTableNameHeight" json:"new_table_name_height,omitempty"`
}

func (x *CommandSetTableNameHeightArchive) Reset() {
	*x = CommandSetTableNameHeightArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSetTableNameHeightArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSetTableNameHeightArchive) ProtoMessage() {}

func (x *CommandSetTableNameHeightArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSetTableNameHeightArchive.ProtoReflect.Descriptor instead.
func (*CommandSetTableNameHeightArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{30}
}

func (x *CommandSetTableNameHeightArchive) GetSuper() *TableCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandSetTableNameHeightArchive) GetOldTableNameHeight() float64 {
	if x != nil && x.OldTableNameHeight != nil {
		return *x.OldTableNameHeight
	}
	return 0
}

func (x *CommandSetTableNameHeightArchive) GetNewTableNameHeight() float64 {
	if x != nil && x.NewTableNameHeight != nil {
		return *x.NewTableNameHeight
	}
	return 0
}

type CommandSetNowArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *TableCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
}

func (x *CommandSetNowArchive) Reset() {
	*x = CommandSetNowArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSetNowArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSetNowArchive) ProtoMessage() {}

func (x *CommandSetNowArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSetNowArchive.ProtoReflect.Descriptor instead.
func (*CommandSetNowArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{31}
}

func (x *CommandSetNowArchive) GetSuper() *TableCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

type CommandSetWasCutArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super              *TableCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	FromTableUid       *UUID                `protobuf:"bytes,2,req,name=from_table_uid,json=fromTableUid" json:"from_table_uid,omitempty"`
	PrevFromTableUid   *UUID                `protobuf:"bytes,3,req,name=prev_from_table_uid,json=prevFromTableUid" json:"prev_from_table_uid,omitempty"`
	WasCut             *bool                `protobuf:"varint,4,req,name=was_cut,json=wasCut" json:"was_cut,omitempty"`
	PrevWasCut         *bool                `protobuf:"varint,5,req,name=prev_was_cut,json=prevWasCut" json:"prev_was_cut,omitempty"`
	FromGroupByUid     *UUID                `protobuf:"bytes,6,req,name=from_group_by_uid,json=fromGroupByUid" json:"from_group_by_uid,omitempty"`
	PrevFromGroupByUid *UUID                `protobuf:"bytes,7,req,name=prev_from_group_by_uid,json=prevFromGroupByUid" json:"prev_from_group_by_uid,omitempty"`
}

func (x *CommandSetWasCutArchive) Reset() {
	*x = CommandSetWasCutArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSetWasCutArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSetWasCutArchive) ProtoMessage() {}

func (x *CommandSetWasCutArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSetWasCutArchive.ProtoReflect.Descriptor instead.
func (*CommandSetWasCutArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{32}
}

func (x *CommandSetWasCutArchive) GetSuper() *TableCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandSetWasCutArchive) GetFromTableUid() *UUID {
	if x != nil {
		return x.FromTableUid
	}
	return nil
}

func (x *CommandSetWasCutArchive) GetPrevFromTableUid() *UUID {
	if x != nil {
		return x.PrevFromTableUid
	}
	return nil
}

func (x *CommandSetWasCutArchive) GetWasCut() bool {
	if x != nil && x.WasCut != nil {
		return *x.WasCut
	}
	return false
}

func (x *CommandSetWasCutArchive) GetPrevWasCut() bool {
	if x != nil && x.PrevWasCut != nil {
		return *x.PrevWasCut
	}
	return false
}

func (x *CommandSetWasCutArchive) GetFromGroupByUid() *UUID {
	if x != nil {
		return x.FromGroupByUid
	}
	return nil
}

func (x *CommandSetWasCutArchive) GetPrevFromGroupByUid() *UUID {
	if x != nil {
		return x.PrevFromGroupByUid
	}
	return nil
}

type CommandStyleCellsArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super            *TableCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	FormatProperties *ReferenceDictionary `protobuf:"bytes,2,opt,name=format_properties,json=formatProperties" json:"format_properties,omitempty"`
	Selection        *SelectionArchive    `protobuf:"bytes,3,req,name=selection" json:"selection,omitempty"`
	UndoCellMap      *Reference           `protobuf:"bytes,4,req,name=undo_cell_map,json=undoCellMap" json:"undo_cell_map,omitempty"`
	RedoCellMap      *Reference           `protobuf:"bytes,5,req,name=redo_cell_map,json=redoCellMap" json:"redo_cell_map,omitempty"`
	TextUndo         *Reference           `protobuf:"bytes,6,opt,name=text_undo,json=textUndo" json:"text_undo,omitempty"`
}

func (x *CommandStyleCellsArchive) Reset() {
	*x = CommandStyleCellsArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandStyleCellsArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandStyleCellsArchive) ProtoMessage() {}

func (x *CommandStyleCellsArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandStyleCellsArchive.ProtoReflect.Descriptor instead.
func (*CommandStyleCellsArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{33}
}

func (x *CommandStyleCellsArchive) GetSuper() *TableCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandStyleCellsArchive) GetFormatProperties() *ReferenceDictionary {
	if x != nil {
		return x.FormatProperties
	}
	return nil
}

func (x *CommandStyleCellsArchive) GetSelection() *SelectionArchive {
	if x != nil {
		return x.Selection
	}
	return nil
}

func (x *CommandStyleCellsArchive) GetUndoCellMap() *Reference {
	if x != nil {
		return x.UndoCellMap
	}
	return nil
}

func (x *CommandStyleCellsArchive) GetRedoCellMap() *Reference {
	if x != nil {
		return x.RedoCellMap
	}
	return nil
}

func (x *CommandStyleCellsArchive) GetTextUndo() *Reference {
	if x != nil {
		return x.TextUndo
	}
	return nil
}

type CommandStyleTableArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super            *TableCommandArchive                `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	FormatProperties *ReferenceDictionary                `protobuf:"bytes,2,opt,name=format_properties,json=formatProperties" json:"format_properties,omitempty"`
	OldStyle         *TableStylePropertyChangeSetArchive `protobuf:"bytes,3,opt,name=old_style,json=oldStyle" json:"old_style,omitempty"`
	NewStyle         *TableStylePropertyChangeSetArchive `protobuf:"bytes,4,opt,name=new_style,json=newStyle" json:"new_style,omitempty"`
}

func (x *CommandStyleTableArchive) Reset() {
	*x = CommandStyleTableArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandStyleTableArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandStyleTableArchive) ProtoMessage() {}

func (x *CommandStyleTableArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandStyleTableArchive.ProtoReflect.Descriptor instead.
func (*CommandStyleTableArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{34}
}

func (x *CommandStyleTableArchive) GetSuper() *TableCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandStyleTableArchive) GetFormatProperties() *ReferenceDictionary {
	if x != nil {
		return x.FormatProperties
	}
	return nil
}

func (x *CommandStyleTableArchive) GetOldStyle() *TableStylePropertyChangeSetArchive {
	if x != nil {
		return x.OldStyle
	}
	return nil
}

func (x *CommandStyleTableArchive) GetNewStyle() *TableStylePropertyChangeSetArchive {
	if x != nil {
		return x.NewStyle
	}
	return nil
}

type CommandSetRepeatingHeaderEnabledArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepeatingHeaderEnabled     *bool                  `protobuf:"varint,1,req,name=repeating_header_enabled,json=repeatingHeaderEnabled" json:"repeating_header_enabled,omitempty"`
	Direction                  *TableDimensionArchive `protobuf:"varint,2,req,name=direction,enum=TST.TableDimensionArchive" json:"direction,omitempty"`
	Super                      *TableCommandArchive   `protobuf:"bytes,3,req,name=super" json:"super,omitempty"`
	PrevRepeatingHeaderEnabled *bool                  `protobuf:"varint,4,opt,name=prev_repeating_header_enabled,json=prevRepeatingHeaderEnabled" json:"prev_repeating_header_enabled,omitempty"`
}

func (x *CommandSetRepeatingHeaderEnabledArchive) Reset() {
	*x = CommandSetRepeatingHeaderEnabledArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSetRepeatingHeaderEnabledArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSetRepeatingHeaderEnabledArchive) ProtoMessage() {}

func (x *CommandSetRepeatingHeaderEnabledArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSetRepeatingHeaderEnabledArchive.ProtoReflect.Descriptor instead.
func (*CommandSetRepeatingHeaderEnabledArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{35}
}

func (x *CommandSetRepeatingHeaderEnabledArchive) GetRepeatingHeaderEnabled() bool {
	if x != nil && x.RepeatingHeaderEnabled != nil {
		return *x.RepeatingHeaderEnabled
	}
	return false
}

func (x *CommandSetRepeatingHeaderEnabledArchive) GetDirection() TableDimensionArchive {
	if x != nil && x.Direction != nil {
		return *x.Direction
	}
	return TableDimensionArchive_dimensionNeither
}

func (x *CommandSetRepeatingHeaderEnabledArchive) GetSuper() *TableCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandSetRepeatingHeaderEnabledArchive) GetPrevRepeatingHeaderEnabled() bool {
	if x != nil && x.PrevRepeatingHeaderEnabled != nil {
		return *x.PrevRepeatingHeaderEnabled
	}
	return false
}

type CommandSetFiltersEnabledArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super             *TableCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	NewFiltersEnabled *bool                `protobuf:"varint,2,req,name=new_filters_enabled,json=newFiltersEnabled" json:"new_filters_enabled,omitempty"`
	OldFiltersEnabled *bool                `protobuf:"varint,3,opt,name=old_filters_enabled,json=oldFiltersEnabled" json:"old_filters_enabled,omitempty"`
	RollbackUidList   []*UUID              `protobuf:"bytes,4,rep,name=rollback_uid_list,json=rollbackUidList" json:"rollback_uid_list,omitempty"`
}

func (x *CommandSetFiltersEnabledArchive) Reset() {
	*x = CommandSetFiltersEnabledArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSetFiltersEnabledArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSetFiltersEnabledArchive) ProtoMessage() {}

func (x *CommandSetFiltersEnabledArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSetFiltersEnabledArchive.ProtoReflect.Descriptor instead.
func (*CommandSetFiltersEnabledArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{36}
}

func (x *CommandSetFiltersEnabledArchive) GetSuper() *TableCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandSetFiltersEnabledArchive) GetNewFiltersEnabled() bool {
	if x != nil && x.NewFiltersEnabled != nil {
		return *x.NewFiltersEnabled
	}
	return false
}

func (x *CommandSetFiltersEnabledArchive) GetOldFiltersEnabled() bool {
	if x != nil && x.OldFiltersEnabled != nil {
		return *x.OldFiltersEnabled
	}
	return false
}

func (x *CommandSetFiltersEnabledArchive) GetRollbackUidList() []*UUID {
	if x != nil {
		return x.RollbackUidList
	}
	return nil
}

type CommandAddTableStylePresetArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super            *TableCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	PresetIndex      *int32               `protobuf:"varint,2,req,name=preset_index,json=presetIndex" json:"preset_index,omitempty"`
	TableStyles      *Reference           `protobuf:"bytes,3,req,name=table_styles,json=tableStyles" json:"table_styles,omitempty"`
	SendNotification *bool                `protobuf:"varint,4,req,name=send_notification,json=sendNotification" json:"send_notification,omitempty"`
}

func (x *CommandAddTableStylePresetArchive) Reset() {
	*x = CommandAddTableStylePresetArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandAddTableStylePresetArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandAddTableStylePresetArchive) ProtoMessage() {}

func (x *CommandAddTableStylePresetArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandAddTableStylePresetArchive.ProtoReflect.Descriptor instead.
func (*CommandAddTableStylePresetArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{37}
}

func (x *CommandAddTableStylePresetArchive) GetSuper() *TableCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandAddTableStylePresetArchive) GetPresetIndex() int32 {
	if x != nil && x.PresetIndex != nil {
		return *x.PresetIndex
	}
	return 0
}

func (x *CommandAddTableStylePresetArchive) GetTableStyles() *Reference {
	if x != nil {
		return x.TableStyles
	}
	return nil
}

func (x *CommandAddTableStylePresetArchive) GetSendNotification() bool {
	if x != nil && x.SendNotification != nil {
		return *x.SendNotification
	}
	return false
}

type CommandRemoveTableStylePresetArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super              *CommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Theme              *Reference      `protobuf:"bytes,2,req,name=theme" json:"theme,omitempty"`
	RemovedTableStyles *Reference      `protobuf:"bytes,3,req,name=removed_table_styles,json=removedTableStyles" json:"removed_table_styles,omitempty"`
	PresetId           *int32          `protobuf:"varint,4,req,name=preset_id,json=presetId" json:"preset_id,omitempty"`
	PresetIndexInTheme *int32          `protobuf:"varint,5,req,name=preset_index_in_theme,json=presetIndexInTheme" json:"preset_index_in_theme,omitempty"`
}

func (x *CommandRemoveTableStylePresetArchive) Reset() {
	*x = CommandRemoveTableStylePresetArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandRemoveTableStylePresetArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandRemoveTableStylePresetArchive) ProtoMessage() {}

func (x *CommandRemoveTableStylePresetArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandRemoveTableStylePresetArchive.ProtoReflect.Descriptor instead.
func (*CommandRemoveTableStylePresetArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{38}
}

func (x *CommandRemoveTableStylePresetArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandRemoveTableStylePresetArchive) GetTheme() *Reference {
	if x != nil {
		return x.Theme
	}
	return nil
}

func (x *CommandRemoveTableStylePresetArchive) GetRemovedTableStyles() *Reference {
	if x != nil {
		return x.RemovedTableStyles
	}
	return nil
}

func (x *CommandRemoveTableStylePresetArchive) GetPresetId() int32 {
	if x != nil && x.PresetId != nil {
		return *x.PresetId
	}
	return 0
}

func (x *CommandRemoveTableStylePresetArchive) GetPresetIndexInTheme() int32 {
	if x != nil && x.PresetIndexInTheme != nil {
		return *x.PresetIndexInTheme
	}
	return 0
}

type CommandReplaceTableStylePresetArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super          *CommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Theme          *Reference      `protobuf:"bytes,2,req,name=theme" json:"theme,omitempty"`
	OldTableStyles *Reference      `protobuf:"bytes,3,req,name=old_table_styles,json=oldTableStyles" json:"old_table_styles,omitempty"`
	NewTableStyles *Reference      `protobuf:"bytes,4,req,name=new_table_styles,json=newTableStyles" json:"new_table_styles,omitempty"`
}

func (x *CommandReplaceTableStylePresetArchive) Reset() {
	*x = CommandReplaceTableStylePresetArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandReplaceTableStylePresetArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandReplaceTableStylePresetArchive) ProtoMessage() {}

func (x *CommandReplaceTableStylePresetArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandReplaceTableStylePresetArchive.ProtoReflect.Descriptor instead.
func (*CommandReplaceTableStylePresetArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{39}
}

func (x *CommandReplaceTableStylePresetArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandReplaceTableStylePresetArchive) GetTheme() *Reference {
	if x != nil {
		return x.Theme
	}
	return nil
}

func (x *CommandReplaceTableStylePresetArchive) GetOldTableStyles() *Reference {
	if x != nil {
		return x.OldTableStyles
	}
	return nil
}

func (x *CommandReplaceTableStylePresetArchive) GetNewTableStyles() *Reference {
	if x != nil {
		return x.NewTableStyles
	}
	return nil
}

type CommandApplyTableStylePresetArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                  *TableCommandArchive        `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Preset                 *Reference                  `protobuf:"bytes,2,opt,name=preset" json:"preset,omitempty"`
	Styles                 *Reference                  `protobuf:"bytes,3,opt,name=styles" json:"styles,omitempty"`
	UndoPreset             *Reference                  `protobuf:"bytes,4,opt,name=undo_preset,json=undoPreset" json:"undo_preset,omitempty"`
	UndoStyles             *Reference                  `protobuf:"bytes,5,opt,name=undo_styles,json=undoStyles" json:"undo_styles,omitempty"`
	CellDiffMap            *Reference                  `protobuf:"bytes,6,opt,name=cell_diff_map,json=cellDiffMap" json:"cell_diff_map,omitempty"`
	UndoCellDiffMap        *Reference                  `protobuf:"bytes,7,opt,name=undo_cell_diff_map,json=undoCellDiffMap" json:"undo_cell_diff_map,omitempty"`
	ApplyPresetOption      *int32                      `protobuf:"varint,8,req,name=apply_preset_option,json=applyPresetOption" json:"apply_preset_option,omitempty"`
	TableClearsAllFlag     *bool                       `protobuf:"varint,11,req,name=table_clears_all_flag,json=tableClearsAllFlag" json:"table_clears_all_flag,omitempty"`
	UndoTableClearsAllFlag *bool                       `protobuf:"varint,12,req,name=undo_table_clears_all_flag,json=undoTableClearsAllFlag" json:"undo_table_clears_all_flag,omitempty"`
	RowColStyles           []*ColumnRowMetadataArchive `protobuf:"bytes,13,rep,name=row_col_styles,json=rowColStyles" json:"row_col_styles,omitempty"`
	UndoRowColStyles       []*ColumnRowMetadataArchive `protobuf:"bytes,14,rep,name=undo_row_col_styles,json=undoRowColStyles" json:"undo_row_col_styles,omitempty"`
	ChangePropMapWrapper   *Reference                  `protobuf:"bytes,15,opt,name=change_prop_map_wrapper,json=changePropMapWrapper" json:"change_prop_map_wrapper,omitempty"`
}

func (x *CommandApplyTableStylePresetArchive) Reset() {
	*x = CommandApplyTableStylePresetArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandApplyTableStylePresetArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandApplyTableStylePresetArchive) ProtoMessage() {}

func (x *CommandApplyTableStylePresetArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandApplyTableStylePresetArchive.ProtoReflect.Descriptor instead.
func (*CommandApplyTableStylePresetArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{40}
}

func (x *CommandApplyTableStylePresetArchive) GetSuper() *TableCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandApplyTableStylePresetArchive) GetPreset() *Reference {
	if x != nil {
		return x.Preset
	}
	return nil
}

func (x *CommandApplyTableStylePresetArchive) GetStyles() *Reference {
	if x != nil {
		return x.Styles
	}
	return nil
}

func (x *CommandApplyTableStylePresetArchive) GetUndoPreset() *Reference {
	if x != nil {
		return x.UndoPreset
	}
	return nil
}

func (x *CommandApplyTableStylePresetArchive) GetUndoStyles() *Reference {
	if x != nil {
		return x.UndoStyles
	}
	return nil
}

func (x *CommandApplyTableStylePresetArchive) GetCellDiffMap() *Reference {
	if x != nil {
		return x.CellDiffMap
	}
	return nil
}

func (x *CommandApplyTableStylePresetArchive) GetUndoCellDiffMap() *Reference {
	if x != nil {
		return x.UndoCellDiffMap
	}
	return nil
}

func (x *CommandApplyTableStylePresetArchive) GetApplyPresetOption() int32 {
	if x != nil && x.ApplyPresetOption != nil {
		return *x.ApplyPresetOption
	}
	return 0
}

func (x *CommandApplyTableStylePresetArchive) GetTableClearsAllFlag() bool {
	if x != nil && x.TableClearsAllFlag != nil {
		return *x.TableClearsAllFlag
	}
	return false
}

func (x *CommandApplyTableStylePresetArchive) GetUndoTableClearsAllFlag() bool {
	if x != nil && x.UndoTableClearsAllFlag != nil {
		return *x.UndoTableClearsAllFlag
	}
	return false
}

func (x *CommandApplyTableStylePresetArchive) GetRowColStyles() []*ColumnRowMetadataArchive {
	if x != nil {
		return x.RowColStyles
	}
	return nil
}

func (x *CommandApplyTableStylePresetArchive) GetUndoRowColStyles() []*ColumnRowMetadataArchive {
	if x != nil {
		return x.UndoRowColStyles
	}
	return nil
}

func (x *CommandApplyTableStylePresetArchive) GetChangePropMapWrapper() *Reference {
	if x != nil {
		return x.ChangePropMapWrapper
	}
	return nil
}

type CommandSetBaseArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *CommandMutateCellFormatArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Base  *uint32                         `protobuf:"varint,2,req,name=base" json:"base,omitempty"`
}

func (x *CommandSetBaseArchive) Reset() {
	*x = CommandSetBaseArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSetBaseArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSetBaseArchive) ProtoMessage() {}

func (x *CommandSetBaseArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSetBaseArchive.ProtoReflect.Descriptor instead.
func (*CommandSetBaseArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{41}
}

func (x *CommandSetBaseArchive) GetSuper() *CommandMutateCellFormatArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandSetBaseArchive) GetBase() uint32 {
	if x != nil && x.Base != nil {
		return *x.Base
	}
	return 0
}

type CommandSetBasePlacesArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super      *CommandMutateCellFormatArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	BasePlaces *uint32                         `protobuf:"varint,2,req,name=base_places,json=basePlaces" json:"base_places,omitempty"`
}

func (x *CommandSetBasePlacesArchive) Reset() {
	*x = CommandSetBasePlacesArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSetBasePlacesArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSetBasePlacesArchive) ProtoMessage() {}

func (x *CommandSetBasePlacesArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSetBasePlacesArchive.ProtoReflect.Descriptor instead.
func (*CommandSetBasePlacesArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{42}
}

func (x *CommandSetBasePlacesArchive) GetSuper() *CommandMutateCellFormatArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandSetBasePlacesArchive) GetBasePlaces() uint32 {
	if x != nil && x.BasePlaces != nil {
		return *x.BasePlaces
	}
	return 0
}

type CommandSetBaseUseMinusSignArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super            *CommandMutateCellFormatArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	BaseUseMinusSign *bool                           `protobuf:"varint,2,req,name=base_use_minus_sign,json=baseUseMinusSign" json:"base_use_minus_sign,omitempty"`
}

func (x *CommandSetBaseUseMinusSignArchive) Reset() {
	*x = CommandSetBaseUseMinusSignArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSetBaseUseMinusSignArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSetBaseUseMinusSignArchive) ProtoMessage() {}

func (x *CommandSetBaseUseMinusSignArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSetBaseUseMinusSignArchive.ProtoReflect.Descriptor instead.
func (*CommandSetBaseUseMinusSignArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{43}
}

func (x *CommandSetBaseUseMinusSignArchive) GetSuper() *CommandMutateCellFormatArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandSetBaseUseMinusSignArchive) GetBaseUseMinusSign() bool {
	if x != nil && x.BaseUseMinusSign != nil {
		return *x.BaseUseMinusSign
	}
	return false
}

type CommandSetCurrencyCodeArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super        *CommandMutateCellFormatArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	CurrencyCode *string                         `protobuf:"bytes,2,req,name=currency_code,json=currencyCode" json:"currency_code,omitempty"`
}

func (x *CommandSetCurrencyCodeArchive) Reset() {
	*x = CommandSetCurrencyCodeArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSetCurrencyCodeArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSetCurrencyCodeArchive) ProtoMessage() {}

func (x *CommandSetCurrencyCodeArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSetCurrencyCodeArchive.ProtoReflect.Descriptor instead.
func (*CommandSetCurrencyCodeArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{44}
}

func (x *CommandSetCurrencyCodeArchive) GetSuper() *CommandMutateCellFormatArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandSetCurrencyCodeArchive) GetCurrencyCode() string {
	if x != nil && x.CurrencyCode != nil {
		return *x.CurrencyCode
	}
	return ""
}

type CommandSetFractionAccuracyArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super            *CommandMutateCellFormatArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	FractionAccuracy *uint32                         `protobuf:"varint,2,req,name=fraction_accuracy,json=fractionAccuracy" json:"fraction_accuracy,omitempty"`
}

func (x *CommandSetFractionAccuracyArchive) Reset() {
	*x = CommandSetFractionAccuracyArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSetFractionAccuracyArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSetFractionAccuracyArchive) ProtoMessage() {}

func (x *CommandSetFractionAccuracyArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSetFractionAccuracyArchive.ProtoReflect.Descriptor instead.
func (*CommandSetFractionAccuracyArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{45}
}

func (x *CommandSetFractionAccuracyArchive) GetSuper() *CommandMutateCellFormatArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandSetFractionAccuracyArchive) GetFractionAccuracy() uint32 {
	if x != nil && x.FractionAccuracy != nil {
		return *x.FractionAccuracy
	}
	return 0
}

type CommandSetNegativeNumberStyleArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super               *CommandMutateCellFormatArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	NegativeNumberStyle *uint32                         `protobuf:"varint,2,req,name=negative_number_style,json=negativeNumberStyle" json:"negative_number_style,omitempty"`
}

func (x *CommandSetNegativeNumberStyleArchive) Reset() {
	*x = CommandSetNegativeNumberStyleArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSetNegativeNumberStyleArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSetNegativeNumberStyleArchive) ProtoMessage() {}

func (x *CommandSetNegativeNumberStyleArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSetNegativeNumberStyleArchive.ProtoReflect.Descriptor instead.
func (*CommandSetNegativeNumberStyleArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{46}
}

func (x *CommandSetNegativeNumberStyleArchive) GetSuper() *CommandMutateCellFormatArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandSetNegativeNumberStyleArchive) GetNegativeNumberStyle() uint32 {
	if x != nil && x.NegativeNumberStyle != nil {
		return *x.NegativeNumberStyle
	}
	return 0
}

type CommandSetNumberOfDecimalPlacesArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super         *CommandMutateCellFormatArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	DecimalPlaces *uint32                         `protobuf:"varint,2,req,name=decimal_places,json=decimalPlaces" json:"decimal_places,omitempty"`
}

func (x *CommandSetNumberOfDecimalPlacesArchive) Reset() {
	*x = CommandSetNumberOfDecimalPlacesArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSetNumberOfDecimalPlacesArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSetNumberOfDecimalPlacesArchive) ProtoMessage() {}

func (x *CommandSetNumberOfDecimalPlacesArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSetNumberOfDecimalPlacesArchive.ProtoReflect.Descriptor instead.
func (*CommandSetNumberOfDecimalPlacesArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{47}
}

func (x *CommandSetNumberOfDecimalPlacesArchive) GetSuper() *CommandMutateCellFormatArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandSetNumberOfDecimalPlacesArchive) GetDecimalPlaces() uint32 {
	if x != nil && x.DecimalPlaces != nil {
		return *x.DecimalPlaces
	}
	return 0
}

type CommandSetDateTimeFormatArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super            *CommandMutateCellFormatArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	DateFormatString *string                         `protobuf:"bytes,2,opt,name=date_format_string,json=dateFormatString" json:"date_format_string,omitempty"`
	TimeFormatString *string                         `protobuf:"bytes,3,opt,name=time_format_string,json=timeFormatString" json:"time_format_string,omitempty"`
}

func (x *CommandSetDateTimeFormatArchive) Reset() {
	*x = CommandSetDateTimeFormatArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSetDateTimeFormatArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSetDateTimeFormatArchive) ProtoMessage() {}

func (x *CommandSetDateTimeFormatArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSetDateTimeFormatArchive.ProtoReflect.Descriptor instead.
func (*CommandSetDateTimeFormatArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{48}
}

func (x *CommandSetDateTimeFormatArchive) GetSuper() *CommandMutateCellFormatArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandSetDateTimeFormatArchive) GetDateFormatString() string {
	if x != nil && x.DateFormatString != nil {
		return *x.DateFormatString
	}
	return ""
}

func (x *CommandSetDateTimeFormatArchive) GetTimeFormatString() string {
	if x != nil && x.TimeFormatString != nil {
		return *x.TimeFormatString
	}
	return ""
}

type CommandSetShowThousandsSeparatorArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                  *CommandMutateCellFormatArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	ShowThousandsSeparator *bool                           `protobuf:"varint,2,req,name=show_thousands_separator,json=showThousandsSeparator" json:"show_thousands_separator,omitempty"`
}

func (x *CommandSetShowThousandsSeparatorArchive) Reset() {
	*x = CommandSetShowThousandsSeparatorArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSetShowThousandsSeparatorArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSetShowThousandsSeparatorArchive) ProtoMessage() {}

func (x *CommandSetShowThousandsSeparatorArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSetShowThousandsSeparatorArchive.ProtoReflect.Descriptor instead.
func (*CommandSetShowThousandsSeparatorArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{49}
}

func (x *CommandSetShowThousandsSeparatorArchive) GetSuper() *CommandMutateCellFormatArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandSetShowThousandsSeparatorArchive) GetShowThousandsSeparator() bool {
	if x != nil && x.ShowThousandsSeparator != nil {
		return *x.ShowThousandsSeparator
	}
	return false
}

type CommandSetUseAccountingStyleArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super              *CommandMutateCellFormatArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	UseAccountingStyle *bool                           `protobuf:"varint,2,req,name=use_accounting_style,json=useAccountingStyle" json:"use_accounting_style,omitempty"`
}

func (x *CommandSetUseAccountingStyleArchive) Reset() {
	*x = CommandSetUseAccountingStyleArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSetUseAccountingStyleArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSetUseAccountingStyleArchive) ProtoMessage() {}

func (x *CommandSetUseAccountingStyleArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSetUseAccountingStyleArchive.ProtoReflect.Descriptor instead.
func (*CommandSetUseAccountingStyleArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{50}
}

func (x *CommandSetUseAccountingStyleArchive) GetSuper() *CommandMutateCellFormatArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandSetUseAccountingStyleArchive) GetUseAccountingStyle() bool {
	if x != nil && x.UseAccountingStyle != nil {
		return *x.UseAccountingStyle
	}
	return false
}

type CommandSetRangeControlMinMaxIncArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super              *TableCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Minimum            *float64             `protobuf:"fixed64,2,opt,name=minimum" json:"minimum,omitempty"`
	Maximum            *float64             `protobuf:"fixed64,3,opt,name=maximum" json:"maximum,omitempty"`
	Increment          *float64             `protobuf:"fixed64,4,opt,name=increment" json:"increment,omitempty"`
	CellDiffMap        *Reference           `protobuf:"bytes,5,opt,name=cell_diff_map,json=cellDiffMap" json:"cell_diff_map,omitempty"`
	CellUidList        *CellUIDListArchive  `protobuf:"bytes,6,opt,name=cell_uid_list,json=cellUidList" json:"cell_uid_list,omitempty"`
	InverseCellDiffMap *Reference           `protobuf:"bytes,7,opt,name=inverse_cell_diff_map,json=inverseCellDiffMap" json:"inverse_cell_diff_map,omitempty"`
	IsFirstCommit      *bool                `protobuf:"varint,8,req,name=is_first_commit,json=isFirstCommit" json:"is_first_commit,omitempty"`
}

func (x *CommandSetRangeControlMinMaxIncArchive) Reset() {
	*x = CommandSetRangeControlMinMaxIncArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSetRangeControlMinMaxIncArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSetRangeControlMinMaxIncArchive) ProtoMessage() {}

func (x *CommandSetRangeControlMinMaxIncArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSetRangeControlMinMaxIncArchive.ProtoReflect.Descriptor instead.
func (*CommandSetRangeControlMinMaxIncArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{51}
}

func (x *CommandSetRangeControlMinMaxIncArchive) GetSuper() *TableCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandSetRangeControlMinMaxIncArchive) GetMinimum() float64 {
	if x != nil && x.Minimum != nil {
		return *x.Minimum
	}
	return 0
}

func (x *CommandSetRangeControlMinMaxIncArchive) GetMaximum() float64 {
	if x != nil && x.Maximum != nil {
		return *x.Maximum
	}
	return 0
}

func (x *CommandSetRangeControlMinMaxIncArchive) GetIncrement() float64 {
	if x != nil && x.Increment != nil {
		return *x.Increment
	}
	return 0
}

func (x *CommandSetRangeControlMinMaxIncArchive) GetCellDiffMap() *Reference {
	if x != nil {
		return x.CellDiffMap
	}
	return nil
}

func (x *CommandSetRangeControlMinMaxIncArchive) GetCellUidList() *CellUIDListArchive {
	if x != nil {
		return x.CellUidList
	}
	return nil
}

func (x *CommandSetRangeControlMinMaxIncArchive) GetInverseCellDiffMap() *Reference {
	if x != nil {
		return x.InverseCellDiffMap
	}
	return nil
}

func (x *CommandSetRangeControlMinMaxIncArchive) GetIsFirstCommit() bool {
	if x != nil && x.IsFirstCommit != nil {
		return *x.IsFirstCommit
	}
	return false
}

type CommandMoveColumnsOrRowsArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                 *TableCommandArchive   `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	DestUid               *UUID                  `protobuf:"bytes,2,req,name=dest_uid,json=destUid" json:"dest_uid,omitempty"`
	Before                *bool                  `protobuf:"varint,3,req,name=before" json:"before,omitempty"`
	UndoDestUid           *UUID                  `protobuf:"bytes,4,req,name=undo_dest_uid,json=undoDestUid" json:"undo_dest_uid,omitempty"`
	UndoBefore            *bool                  `protobuf:"varint,5,req,name=undo_before,json=undoBefore" json:"undo_before,omitempty"`
	Uids                  []*UUID                `protobuf:"bytes,6,rep,name=uids" json:"uids,omitempty"`
	Direction             *TableDimensionArchive `protobuf:"varint,7,req,name=direction,enum=TST.TableDimensionArchive" json:"direction,omitempty"`
	FormulaRewriteCommand *Reference             `protobuf:"bytes,8,opt,name=formula_rewrite_command,json=formulaRewriteCommand" json:"formula_rewrite_command,omitempty"`
}

func (x *CommandMoveColumnsOrRowsArchive) Reset() {
	*x = CommandMoveColumnsOrRowsArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandMoveColumnsOrRowsArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandMoveColumnsOrRowsArchive) ProtoMessage() {}

func (x *CommandMoveColumnsOrRowsArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandMoveColumnsOrRowsArchive.ProtoReflect.Descriptor instead.
func (*CommandMoveColumnsOrRowsArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{52}
}

func (x *CommandMoveColumnsOrRowsArchive) GetSuper() *TableCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandMoveColumnsOrRowsArchive) GetDestUid() *UUID {
	if x != nil {
		return x.DestUid
	}
	return nil
}

func (x *CommandMoveColumnsOrRowsArchive) GetBefore() bool {
	if x != nil && x.Before != nil {
		return *x.Before
	}
	return false
}

func (x *CommandMoveColumnsOrRowsArchive) GetUndoDestUid() *UUID {
	if x != nil {
		return x.UndoDestUid
	}
	return nil
}

func (x *CommandMoveColumnsOrRowsArchive) GetUndoBefore() bool {
	if x != nil && x.UndoBefore != nil {
		return *x.UndoBefore
	}
	return false
}

func (x *CommandMoveColumnsOrRowsArchive) GetUids() []*UUID {
	if x != nil {
		return x.Uids
	}
	return nil
}

func (x *CommandMoveColumnsOrRowsArchive) GetDirection() TableDimensionArchive {
	if x != nil && x.Direction != nil {
		return *x.Direction
	}
	return TableDimensionArchive_dimensionNeither
}

func (x *CommandMoveColumnsOrRowsArchive) GetFormulaRewriteCommand() *Reference {
	if x != nil {
		return x.FormulaRewriteCommand
	}
	return nil
}

type CommandSortArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                 *TableCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	FromRowUids           []*UUID              `protobuf:"bytes,2,rep,name=from_row_uids,json=fromRowUids" json:"from_row_uids,omitempty"`
	ToRowUids             []*UUID              `protobuf:"bytes,3,rep,name=to_row_uids,json=toRowUids" json:"to_row_uids,omitempty"`
	FormulaRewriteCommand *Reference           `protobuf:"bytes,4,opt,name=formula_rewrite_command,json=formulaRewriteCommand" json:"formula_rewrite_command,omitempty"`
}

func (x *CommandSortArchive) Reset() {
	*x = CommandSortArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSortArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSortArchive) ProtoMessage() {}

func (x *CommandSortArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSortArchive.ProtoReflect.Descriptor instead.
func (*CommandSortArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{53}
}

func (x *CommandSortArchive) GetSuper() *TableCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandSortArchive) GetFromRowUids() []*UUID {
	if x != nil {
		return x.FromRowUids
	}
	return nil
}

func (x *CommandSortArchive) GetToRowUids() []*UUID {
	if x != nil {
		return x.ToRowUids
	}
	return nil
}

func (x *CommandSortArchive) GetFormulaRewriteCommand() *Reference {
	if x != nil {
		return x.FormulaRewriteCommand
	}
	return nil
}

type FormulaRewriteSpecArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewriteType             *uint32                         `protobuf:"varint,1,req,name=rewrite_type,json=rewriteType" json:"rewrite_type,omitempty"`
	TableUid                *UUID                           `protobuf:"bytes,2,opt,name=table_uid,json=tableUid" json:"table_uid,omitempty"`
	CondStyleOwnerUid       *UUID                           `protobuf:"bytes,3,opt,name=cond_style_owner_uid,json=condStyleOwnerUid" json:"cond_style_owner_uid,omitempty"`
	GroupByUid              *UUID                           `protobuf:"bytes,4,opt,name=group_by_uid,json=groupByUid" json:"group_by_uid,omitempty"`
	IsInverse               *bool                           `protobuf:"varint,5,opt,name=is_inverse,json=isInverse" json:"is_inverse,omitempty"`
	ColumnOrRowUuidsInfo    *ColumnOrRowUuidsInfoArchive    `protobuf:"bytes,6,opt,name=column_or_row_uuids_info,json=columnOrRowUuidsInfo" json:"column_or_row_uuids_info,omitempty"`
	AuxColumnOrRowUuidsInfo *ColumnOrRowUuidsInfoArchive    `protobuf:"bytes,7,opt,name=aux_column_or_row_uuids_info,json=auxColumnOrRowUuidsInfo" json:"aux_column_or_row_uuids_info,omitempty"`
	RegionMovedInfo         *RegionMovedInfoArchive         `protobuf:"bytes,8,opt,name=region_moved_info,json=regionMovedInfo" json:"region_moved_info,omitempty"`
	RegionInfo              *RegionInfoArchive              `protobuf:"bytes,9,opt,name=region_info,json=regionInfo" json:"region_info,omitempty"`
	RewriteTableIdInfo      *RewriteTableUIDInfoArchive     `protobuf:"bytes,10,opt,name=rewrite_table_id_info,json=rewriteTableIdInfo" json:"rewrite_table_id_info,omitempty"`
	TransposedTableInfo     *TableTransposeInfoArchive      `protobuf:"bytes,11,opt,name=transposed_table_info,json=transposedTableInfo" json:"transposed_table_info,omitempty"`
	MergeOriginMovedInfo    *MergeOriginMovedArchive        `protobuf:"bytes,12,opt,name=merge_origin_moved_info,json=mergeOriginMovedInfo" json:"merge_origin_moved_info,omitempty"`
	MergeSource             *MergeSourceArchive             `protobuf:"bytes,13,opt,name=merge_source,json=mergeSource" json:"merge_source,omitempty"`
	GroupNodeInfo           *RewriteGroupNodeUIDInfoArchive `protobuf:"bytes,14,opt,name=group_node_info,json=groupNodeInfo" json:"group_node_info,omitempty"`
	GroupbyChange           *GroupByChangeArchive           `protobuf:"bytes,15,opt,name=groupby_change,json=groupbyChange" json:"groupby_change,omitempty"`
}

func (x *FormulaRewriteSpecArchive) Reset() {
	*x = FormulaRewriteSpecArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormulaRewriteSpecArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormulaRewriteSpecArchive) ProtoMessage() {}

func (x *FormulaRewriteSpecArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormulaRewriteSpecArchive.ProtoReflect.Descriptor instead.
func (*FormulaRewriteSpecArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{54}
}

func (x *FormulaRewriteSpecArchive) GetRewriteType() uint32 {
	if x != nil && x.RewriteType != nil {
		return *x.RewriteType
	}
	return 0
}

func (x *FormulaRewriteSpecArchive) GetTableUid() *UUID {
	if x != nil {
		return x.TableUid
	}
	return nil
}

func (x *FormulaRewriteSpecArchive) GetCondStyleOwnerUid() *UUID {
	if x != nil {
		return x.CondStyleOwnerUid
	}
	return nil
}

func (x *FormulaRewriteSpecArchive) GetGroupByUid() *UUID {
	if x != nil {
		return x.GroupByUid
	}
	return nil
}

func (x *FormulaRewriteSpecArchive) GetIsInverse() bool {
	if x != nil && x.IsInverse != nil {
		return *x.IsInverse
	}
	return false
}

func (x *FormulaRewriteSpecArchive) GetColumnOrRowUuidsInfo() *ColumnOrRowUuidsInfoArchive {
	if x != nil {
		return x.ColumnOrRowUuidsInfo
	}
	return nil
}

func (x *FormulaRewriteSpecArchive) GetAuxColumnOrRowUuidsInfo() *ColumnOrRowUuidsInfoArchive {
	if x != nil {
		return x.AuxColumnOrRowUuidsInfo
	}
	return nil
}

func (x *FormulaRewriteSpecArchive) GetRegionMovedInfo() *RegionMovedInfoArchive {
	if x != nil {
		return x.RegionMovedInfo
	}
	return nil
}

func (x *FormulaRewriteSpecArchive) GetRegionInfo() *RegionInfoArchive {
	if x != nil {
		return x.RegionInfo
	}
	return nil
}

func (x *FormulaRewriteSpecArchive) GetRewriteTableIdInfo() *RewriteTableUIDInfoArchive {
	if x != nil {
		return x.RewriteTableIdInfo
	}
	return nil
}

func (x *FormulaRewriteSpecArchive) GetTransposedTableInfo() *TableTransposeInfoArchive {
	if x != nil {
		return x.TransposedTableInfo
	}
	return nil
}

func (x *FormulaRewriteSpecArchive) GetMergeOriginMovedInfo() *MergeOriginMovedArchive {
	if x != nil {
		return x.MergeOriginMovedInfo
	}
	return nil
}

func (x *FormulaRewriteSpecArchive) GetMergeSource() *MergeSourceArchive {
	if x != nil {
		return x.MergeSource
	}
	return nil
}

func (x *FormulaRewriteSpecArchive) GetGroupNodeInfo() *RewriteGroupNodeUIDInfoArchive {
	if x != nil {
		return x.GroupNodeInfo
	}
	return nil
}

func (x *FormulaRewriteSpecArchive) GetGroupbyChange() *GroupByChangeArchive {
	if x != nil {
		return x.GroupbyChange
	}
	return nil
}

type CommandRewriteFormulasForTransposeArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super             *TableCommandArchive              `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	RewriteSpec       *FormulaRewriteSpecArchive        `protobuf:"bytes,2,req,name=rewrite_spec,json=rewriteSpec" json:"rewrite_spec,omitempty"`
	FormulasToRewrite *FormulasForUndoArchive           `protobuf:"bytes,3,req,name=formulas_to_rewrite,json=formulasToRewrite" json:"formulas_to_rewrite,omitempty"`
	WarningsetMap     *ImportWarningSetByCellRefArchive `protobuf:"bytes,4,opt,name=warningset_map,json=warningsetMap" json:"warningset_map,omitempty"`
}

func (x *CommandRewriteFormulasForTransposeArchive) Reset() {
	*x = CommandRewriteFormulasForTransposeArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandRewriteFormulasForTransposeArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandRewriteFormulasForTransposeArchive) ProtoMessage() {}

func (x *CommandRewriteFormulasForTransposeArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandRewriteFormulasForTransposeArchive.ProtoReflect.Descriptor instead.
func (*CommandRewriteFormulasForTransposeArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{55}
}

func (x *CommandRewriteFormulasForTransposeArchive) GetSuper() *TableCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandRewriteFormulasForTransposeArchive) GetRewriteSpec() *FormulaRewriteSpecArchive {
	if x != nil {
		return x.RewriteSpec
	}
	return nil
}

func (x *CommandRewriteFormulasForTransposeArchive) GetFormulasToRewrite() *FormulasForUndoArchive {
	if x != nil {
		return x.FormulasToRewrite
	}
	return nil
}

func (x *CommandRewriteFormulasForTransposeArchive) GetWarningsetMap() *ImportWarningSetByCellRefArchive {
	if x != nil {
		return x.WarningsetMap
	}
	return nil
}

type CommandRewriteTableFormulasForRewriteSpecArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super             *TableCommandArchive       `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	RewriteSpec       *FormulaRewriteSpecArchive `protobuf:"bytes,2,req,name=rewrite_spec,json=rewriteSpec" json:"rewrite_spec,omitempty"`
	FormulasToRewrite *FormulasForUndoArchive    `protobuf:"bytes,3,req,name=formulas_to_rewrite,json=formulasToRewrite" json:"formulas_to_rewrite,omitempty"`
}

func (x *CommandRewriteTableFormulasForRewriteSpecArchive) Reset() {
	*x = CommandRewriteTableFormulasForRewriteSpecArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandRewriteTableFormulasForRewriteSpecArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandRewriteTableFormulasForRewriteSpecArchive) ProtoMessage() {}

func (x *CommandRewriteTableFormulasForRewriteSpecArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandRewriteTableFormulasForRewriteSpecArchive.ProtoReflect.Descriptor instead.
func (*CommandRewriteTableFormulasForRewriteSpecArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{56}
}

func (x *CommandRewriteTableFormulasForRewriteSpecArchive) GetSuper() *TableCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandRewriteTableFormulasForRewriteSpecArchive) GetRewriteSpec() *FormulaRewriteSpecArchive {
	if x != nil {
		return x.RewriteSpec
	}
	return nil
}

func (x *CommandRewriteTableFormulasForRewriteSpecArchive) GetFormulasToRewrite() *FormulasForUndoArchive {
	if x != nil {
		return x.FormulasToRewrite
	}
	return nil
}

type CommandRewriteMergeFormulasArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super             *TableCommandArchive       `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	RewriteSpec       *FormulaRewriteSpecArchive `protobuf:"bytes,2,req,name=rewrite_spec,json=rewriteSpec" json:"rewrite_spec,omitempty"`
	FormulasToRewrite *FormulasForUndoArchive    `protobuf:"bytes,3,req,name=formulas_to_rewrite,json=formulasToRewrite" json:"formulas_to_rewrite,omitempty"`
}

func (x *CommandRewriteMergeFormulasArchive) Reset() {
	*x = CommandRewriteMergeFormulasArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandRewriteMergeFormulasArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandRewriteMergeFormulasArchive) ProtoMessage() {}

func (x *CommandRewriteMergeFormulasArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandRewriteMergeFormulasArchive.ProtoReflect.Descriptor instead.
func (*CommandRewriteMergeFormulasArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{57}
}

func (x *CommandRewriteMergeFormulasArchive) GetSuper() *TableCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandRewriteMergeFormulasArchive) GetRewriteSpec() *FormulaRewriteSpecArchive {
	if x != nil {
		return x.RewriteSpec
	}
	return nil
}

func (x *CommandRewriteMergeFormulasArchive) GetFormulasToRewrite() *FormulasForUndoArchive {
	if x != nil {
		return x.FormulasToRewrite
	}
	return nil
}

type CommandRewriteCategoryFormulasArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super             *TableCommandArchive       `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	RewriteSpec       *FormulaRewriteSpecArchive `protobuf:"bytes,2,req,name=rewrite_spec,json=rewriteSpec" json:"rewrite_spec,omitempty"`
	FormulasToRewrite *FormulasForUndoArchive    `protobuf:"bytes,3,req,name=formulas_to_rewrite,json=formulasToRewrite" json:"formulas_to_rewrite,omitempty"`
}

func (x *CommandRewriteCategoryFormulasArchive) Reset() {
	*x = CommandRewriteCategoryFormulasArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandRewriteCategoryFormulasArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandRewriteCategoryFormulasArchive) ProtoMessage() {}

func (x *CommandRewriteCategoryFormulasArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandRewriteCategoryFormulasArchive.ProtoReflect.Descriptor instead.
func (*CommandRewriteCategoryFormulasArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{58}
}

func (x *CommandRewriteCategoryFormulasArchive) GetSuper() *TableCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandRewriteCategoryFormulasArchive) GetRewriteSpec() *FormulaRewriteSpecArchive {
	if x != nil {
		return x.RewriteSpec
	}
	return nil
}

func (x *CommandRewriteCategoryFormulasArchive) GetFormulasToRewrite() *FormulasForUndoArchive {
	if x != nil {
		return x.FormulasToRewrite
	}
	return nil
}

type CommandRewriteFilterFormulasForTableResizeArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *TableCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
}

func (x *CommandRewriteFilterFormulasForTableResizeArchive) Reset() {
	*x = CommandRewriteFilterFormulasForTableResizeArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandRewriteFilterFormulasForTableResizeArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandRewriteFilterFormulasForTableResizeArchive) ProtoMessage() {}

func (x *CommandRewriteFilterFormulasForTableResizeArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandRewriteFilterFormulasForTableResizeArchive.ProtoReflect.Descriptor instead.
func (*CommandRewriteFilterFormulasForTableResizeArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{59}
}

func (x *CommandRewriteFilterFormulasForTableResizeArchive) GetSuper() *TableCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

type CommandRewriteFilterFormulasForRewriteSpecArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super       *TableCommandArchive       `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	FilterSet   *Reference                 `protobuf:"bytes,2,req,name=filter_set,json=filterSet" json:"filter_set,omitempty"`
	RewriteSpec *FormulaRewriteSpecArchive `protobuf:"bytes,3,req,name=rewrite_spec,json=rewriteSpec" json:"rewrite_spec,omitempty"`
}

func (x *CommandRewriteFilterFormulasForRewriteSpecArchive) Reset() {
	*x = CommandRewriteFilterFormulasForRewriteSpecArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandRewriteFilterFormulasForRewriteSpecArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandRewriteFilterFormulasForRewriteSpecArchive) ProtoMessage() {}

func (x *CommandRewriteFilterFormulasForRewriteSpecArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandRewriteFilterFormulasForRewriteSpecArchive.ProtoReflect.Descriptor instead.
func (*CommandRewriteFilterFormulasForRewriteSpecArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{60}
}

func (x *CommandRewriteFilterFormulasForRewriteSpecArchive) GetSuper() *TableCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandRewriteFilterFormulasForRewriteSpecArchive) GetFilterSet() *Reference {
	if x != nil {
		return x.FilterSet
	}
	return nil
}

func (x *CommandRewriteFilterFormulasForRewriteSpecArchive) GetRewriteSpec() *FormulaRewriteSpecArchive {
	if x != nil {
		return x.RewriteSpec
	}
	return nil
}

type CommandRewriteConditionalStylesForRewriteSpecArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                *TableCommandArchive             `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	RewriteSpec          *FormulaRewriteSpecArchive       `protobuf:"bytes,2,req,name=rewrite_spec,json=rewriteSpec" json:"rewrite_spec,omitempty"`
	FormulasToRewrite    *FormulasForUndoArchive          `protobuf:"bytes,3,opt,name=formulas_to_rewrite,json=formulasToRewrite" json:"formulas_to_rewrite,omitempty"`
	ConditionalStyleSets *ExpandedCellRefObjectMapArchive `protobuf:"bytes,4,opt,name=conditional_style_sets,json=conditionalStyleSets" json:"conditional_style_sets,omitempty"`
}

func (x *CommandRewriteConditionalStylesForRewriteSpecArchive) Reset() {
	*x = CommandRewriteConditionalStylesForRewriteSpecArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandRewriteConditionalStylesForRewriteSpecArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandRewriteConditionalStylesForRewriteSpecArchive) ProtoMessage() {}

func (x *CommandRewriteConditionalStylesForRewriteSpecArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandRewriteConditionalStylesForRewriteSpecArchive.ProtoReflect.Descriptor instead.
func (*CommandRewriteConditionalStylesForRewriteSpecArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{61}
}

func (x *CommandRewriteConditionalStylesForRewriteSpecArchive) GetSuper() *TableCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandRewriteConditionalStylesForRewriteSpecArchive) GetRewriteSpec() *FormulaRewriteSpecArchive {
	if x != nil {
		return x.RewriteSpec
	}
	return nil
}

func (x *CommandRewriteConditionalStylesForRewriteSpecArchive) GetFormulasToRewrite() *FormulasForUndoArchive {
	if x != nil {
		return x.FormulasToRewrite
	}
	return nil
}

func (x *CommandRewriteConditionalStylesForRewriteSpecArchive) GetConditionalStyleSets() *ExpandedCellRefObjectMapArchive {
	if x != nil {
		return x.ConditionalStyleSets
	}
	return nil
}

type CommandRewritePivotOwnerFormulasArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super             *TableCommandArchive       `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	RewriteSpec       *FormulaRewriteSpecArchive `protobuf:"bytes,2,req,name=rewrite_spec,json=rewriteSpec" json:"rewrite_spec,omitempty"`
	FormulasToRewrite *FormulasForUndoArchive    `protobuf:"bytes,3,req,name=formulas_to_rewrite,json=formulasToRewrite" json:"formulas_to_rewrite,omitempty"`
}

func (x *CommandRewritePivotOwnerFormulasArchive) Reset() {
	*x = CommandRewritePivotOwnerFormulasArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandRewritePivotOwnerFormulasArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandRewritePivotOwnerFormulasArchive) ProtoMessage() {}

func (x *CommandRewritePivotOwnerFormulasArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandRewritePivotOwnerFormulasArchive.ProtoReflect.Descriptor instead.
func (*CommandRewritePivotOwnerFormulasArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{62}
}

func (x *CommandRewritePivotOwnerFormulasArchive) GetSuper() *TableCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandRewritePivotOwnerFormulasArchive) GetRewriteSpec() *FormulaRewriteSpecArchive {
	if x != nil {
		return x.RewriteSpec
	}
	return nil
}

func (x *CommandRewritePivotOwnerFormulasArchive) GetFormulasToRewrite() *FormulasForUndoArchive {
	if x != nil {
		return x.FormulasToRewrite
	}
	return nil
}

type CommandMergeArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                     *TableCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	CellUidList               *CellUIDListArchive  `protobuf:"bytes,2,req,name=cell_uid_list,json=cellUidList" json:"cell_uid_list,omitempty"`
	UndoCellMap               *Reference           `protobuf:"bytes,3,opt,name=undo_cell_map,json=undoCellMap" json:"undo_cell_map,omitempty"`
	UndoFormulaRewriteCommand *Reference           `protobuf:"bytes,4,opt,name=undo_formula_rewrite_command,json=undoFormulaRewriteCommand" json:"undo_formula_rewrite_command,omitempty"`
	MergeOwnerRollback        *uint32              `protobuf:"varint,5,opt,name=merge_owner_rollback,json=mergeOwnerRollback" json:"merge_owner_rollback,omitempty"`
	CommitCellMap             *Reference           `protobuf:"bytes,6,opt,name=commit_cell_map,json=commitCellMap" json:"commit_cell_map,omitempty"`
}

func (x *CommandMergeArchive) Reset() {
	*x = CommandMergeArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandMergeArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandMergeArchive) ProtoMessage() {}

func (x *CommandMergeArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandMergeArchive.ProtoReflect.Descriptor instead.
func (*CommandMergeArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{63}
}

func (x *CommandMergeArchive) GetSuper() *TableCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandMergeArchive) GetCellUidList() *CellUIDListArchive {
	if x != nil {
		return x.CellUidList
	}
	return nil
}

func (x *CommandMergeArchive) GetUndoCellMap() *Reference {
	if x != nil {
		return x.UndoCellMap
	}
	return nil
}

func (x *CommandMergeArchive) GetUndoFormulaRewriteCommand() *Reference {
	if x != nil {
		return x.UndoFormulaRewriteCommand
	}
	return nil
}

func (x *CommandMergeArchive) GetMergeOwnerRollback() uint32 {
	if x != nil && x.MergeOwnerRollback != nil {
		return *x.MergeOwnerRollback
	}
	return 0
}

func (x *CommandMergeArchive) GetCommitCellMap() *Reference {
	if x != nil {
		return x.CommitCellMap
	}
	return nil
}

type CommandInverseMergeArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super              *CommandApplyCellMapArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	MergeSourceCellUid *UUIDCoordArchive           `protobuf:"bytes,2,req,name=merge_source_cell_uid,json=mergeSourceCellUid" json:"merge_source_cell_uid,omitempty"`
}

func (x *CommandInverseMergeArchive) Reset() {
	*x = CommandInverseMergeArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandInverseMergeArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandInverseMergeArchive) ProtoMessage() {}

func (x *CommandInverseMergeArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandInverseMergeArchive.ProtoReflect.Descriptor instead.
func (*CommandInverseMergeArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{64}
}

func (x *CommandInverseMergeArchive) GetSuper() *CommandApplyCellMapArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandInverseMergeArchive) GetMergeSourceCellUid() *UUIDCoordArchive {
	if x != nil {
		return x.MergeSourceCellUid
	}
	return nil
}

type CommandUnmergeArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                     *TableCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	UnmergeUidRanges          []*UUIDRectArchive   `protobuf:"bytes,2,rep,name=unmerge_uid_ranges,json=unmergeUidRanges" json:"unmerge_uid_ranges,omitempty"`
	UndoCellMap               *Reference           `protobuf:"bytes,3,opt,name=undo_cell_map,json=undoCellMap" json:"undo_cell_map,omitempty"`
	UndoFormulaRewriteCommand *Reference           `protobuf:"bytes,4,opt,name=undo_formula_rewrite_command,json=undoFormulaRewriteCommand" json:"undo_formula_rewrite_command,omitempty"`
}

func (x *CommandUnmergeArchive) Reset() {
	*x = CommandUnmergeArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandUnmergeArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandUnmergeArchive) ProtoMessage() {}

func (x *CommandUnmergeArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandUnmergeArchive.ProtoReflect.Descriptor instead.
func (*CommandUnmergeArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{65}
}

func (x *CommandUnmergeArchive) GetSuper() *TableCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandUnmergeArchive) GetUnmergeUidRanges() []*UUIDRectArchive {
	if x != nil {
		return x.UnmergeUidRanges
	}
	return nil
}

func (x *CommandUnmergeArchive) GetUndoCellMap() *Reference {
	if x != nil {
		return x.UndoCellMap
	}
	return nil
}

func (x *CommandUnmergeArchive) GetUndoFormulaRewriteCommand() *Reference {
	if x != nil {
		return x.UndoFormulaRewriteCommand
	}
	return nil
}

type CommandChooseTableIdRemapperArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                        *CommandArchive            `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	TableIdMapper                *MultiTableRemapperArchive `protobuf:"bytes,2,req,name=table_id_mapper,json=tableIdMapper" json:"table_id_mapper,omitempty"`
	FormulaRewriteCommandForUndo *Reference                 `protobuf:"bytes,3,opt,name=formula_rewrite_command_for_undo,json=formulaRewriteCommandForUndo" json:"formula_rewrite_command_for_undo,omitempty"`
	ApplyAndClear                *bool                      `protobuf:"varint,4,req,name=apply_and_clear,json=applyAndClear" json:"apply_and_clear,omitempty"`
}

func (x *CommandChooseTableIdRemapperArchive) Reset() {
	*x = CommandChooseTableIdRemapperArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandChooseTableIdRemapperArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandChooseTableIdRemapperArchive) ProtoMessage() {}

func (x *CommandChooseTableIdRemapperArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandChooseTableIdRemapperArchive.ProtoReflect.Descriptor instead.
func (*CommandChooseTableIdRemapperArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{66}
}

func (x *CommandChooseTableIdRemapperArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandChooseTableIdRemapperArchive) GetTableIdMapper() *MultiTableRemapperArchive {
	if x != nil {
		return x.TableIdMapper
	}
	return nil
}

func (x *CommandChooseTableIdRemapperArchive) GetFormulaRewriteCommandForUndo() *Reference {
	if x != nil {
		return x.FormulaRewriteCommandForUndo
	}
	return nil
}

func (x *CommandChooseTableIdRemapperArchive) GetApplyAndClear() bool {
	if x != nil && x.ApplyAndClear != nil {
		return *x.ApplyAndClear
	}
	return false
}

type CommandCategorySetGroupingColumnsArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                        *TableCommandArchive                   `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	NewEnabledChanging           *int32                                 `protobuf:"varint,2,req,name=new_enabled_changing,json=newEnabledChanging" json:"new_enabled_changing,omitempty"`
	OldEnabledChanging           *int32                                 `protobuf:"varint,3,req,name=old_enabled_changing,json=oldEnabledChanging" json:"old_enabled_changing,omitempty"`
	NewGroupingColumns           *GroupColumnListArchive                `protobuf:"bytes,4,req,name=new_grouping_columns,json=newGroupingColumns" json:"new_grouping_columns,omitempty"`
	OldGroupingColumns           *GroupColumnListArchive                `protobuf:"bytes,5,opt,name=old_grouping_columns,json=oldGroupingColumns" json:"old_grouping_columns,omitempty"`
	RestoreBaseOrder             *bool                                  `protobuf:"varint,6,req,name=restore_base_order,json=restoreBaseOrder" json:"restore_base_order,omitempty"`
	BaseRowOrder                 []*UUID                                `protobuf:"bytes,7,rep,name=base_row_order,json=baseRowOrder" json:"base_row_order,omitempty"`
	UndoRestoreBaseOrder         *bool                                  `protobuf:"varint,8,req,name=undo_restore_base_order,json=undoRestoreBaseOrder" json:"undo_restore_base_order,omitempty"`
	UndoBaseRowOrder             []*UUID                                `protobuf:"bytes,9,rep,name=undo_base_row_order,json=undoBaseRowOrder" json:"undo_base_row_order,omitempty"`
	RestoreViewOrder             *bool                                  `protobuf:"varint,10,req,name=restore_view_order,json=restoreViewOrder" json:"restore_view_order,omitempty"`
	ViewRowOrder                 []*UUID                                `protobuf:"bytes,11,rep,name=view_row_order,json=viewRowOrder" json:"view_row_order,omitempty"`
	UndoRestoreViewOrder         *bool                                  `protobuf:"varint,12,req,name=undo_restore_view_order,json=undoRestoreViewOrder" json:"undo_restore_view_order,omitempty"`
	UndoViewRowOrder             []*UUID                                `protobuf:"bytes,13,rep,name=undo_view_row_order,json=undoViewRowOrder" json:"undo_view_row_order,omitempty"`
	CollapseState                []*UUID                                `protobuf:"bytes,14,rep,name=collapse_state,json=collapseState" json:"collapse_state,omitempty"`
	UndoCollapseState            []*UUID                                `protobuf:"bytes,15,rep,name=undo_collapse_state,json=undoCollapseState" json:"undo_collapse_state,omitempty"`
	SummaryChangeState           *SummaryModelGroupByChangeStateArchive `protobuf:"bytes,16,opt,name=summary_change_state,json=summaryChangeState" json:"summary_change_state,omitempty"`
	UndoSummaryChangeState       *SummaryModelGroupByChangeStateArchive `protobuf:"bytes,17,opt,name=undo_summary_change_state,json=undoSummaryChangeState" json:"undo_summary_change_state,omitempty"`
	NewColumnAggregates          *ColumnAggregateListArchive            `protobuf:"bytes,18,opt,name=new_column_aggregates,json=newColumnAggregates" json:"new_column_aggregates,omitempty"`
	OldColumnAggregates          *ColumnAggregateListArchive            `protobuf:"bytes,19,opt,name=old_column_aggregates,json=oldColumnAggregates" json:"old_column_aggregates,omitempty"`
	UndoSetEnabledRewriteCommand *Reference                             `protobuf:"bytes,20,opt,name=undo_set_enabled_rewrite_command,json=undoSetEnabledRewriteCommand" json:"undo_set_enabled_rewrite_command,omitempty"`
	UndoSetColumnsRewriteCommand *Reference                             `protobuf:"bytes,21,opt,name=undo_set_columns_rewrite_command,json=undoSetColumnsRewriteCommand" json:"undo_set_columns_rewrite_command,omitempty"`
	ForceRestoreAllStates        *bool                                  `protobuf:"varint,22,req,name=force_restore_all_states,json=forceRestoreAllStates" json:"force_restore_all_states,omitempty"`
	CellDiffMap                  *Reference                             `protobuf:"bytes,23,opt,name=cell_diff_map,json=cellDiffMap" json:"cell_diff_map,omitempty"`
	UndoCellDiffMap              *Reference                             `protobuf:"bytes,24,opt,name=undo_cell_diff_map,json=undoCellDiffMap" json:"undo_cell_diff_map,omitempty"`
	UndoSetGroupSortOrderCommand *Reference                             `protobuf:"bytes,25,opt,name=undo_set_group_sort_order_command,json=undoSetGroupSortOrderCommand" json:"undo_set_group_sort_order_command,omitempty"`
}

func (x *CommandCategorySetGroupingColumnsArchive) Reset() {
	*x = CommandCategorySetGroupingColumnsArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandCategorySetGroupingColumnsArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandCategorySetGroupingColumnsArchive) ProtoMessage() {}

func (x *CommandCategorySetGroupingColumnsArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandCategorySetGroupingColumnsArchive.ProtoReflect.Descriptor instead.
func (*CommandCategorySetGroupingColumnsArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{67}
}

func (x *CommandCategorySetGroupingColumnsArchive) GetSuper() *TableCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandCategorySetGroupingColumnsArchive) GetNewEnabledChanging() int32 {
	if x != nil && x.NewEnabledChanging != nil {
		return *x.NewEnabledChanging
	}
	return 0
}

func (x *CommandCategorySetGroupingColumnsArchive) GetOldEnabledChanging() int32 {
	if x != nil && x.OldEnabledChanging != nil {
		return *x.OldEnabledChanging
	}
	return 0
}

func (x *CommandCategorySetGroupingColumnsArchive) GetNewGroupingColumns() *GroupColumnListArchive {
	if x != nil {
		return x.NewGroupingColumns
	}
	return nil
}

func (x *CommandCategorySetGroupingColumnsArchive) GetOldGroupingColumns() *GroupColumnListArchive {
	if x != nil {
		return x.OldGroupingColumns
	}
	return nil
}

func (x *CommandCategorySetGroupingColumnsArchive) GetRestoreBaseOrder() bool {
	if x != nil && x.RestoreBaseOrder != nil {
		return *x.RestoreBaseOrder
	}
	return false
}

func (x *CommandCategorySetGroupingColumnsArchive) GetBaseRowOrder() []*UUID {
	if x != nil {
		return x.BaseRowOrder
	}
	return nil
}

func (x *CommandCategorySetGroupingColumnsArchive) GetUndoRestoreBaseOrder() bool {
	if x != nil && x.UndoRestoreBaseOrder != nil {
		return *x.UndoRestoreBaseOrder
	}
	return false
}

func (x *CommandCategorySetGroupingColumnsArchive) GetUndoBaseRowOrder() []*UUID {
	if x != nil {
		return x.UndoBaseRowOrder
	}
	return nil
}

func (x *CommandCategorySetGroupingColumnsArchive) GetRestoreViewOrder() bool {
	if x != nil && x.RestoreViewOrder != nil {
		return *x.RestoreViewOrder
	}
	return false
}

func (x *CommandCategorySetGroupingColumnsArchive) GetViewRowOrder() []*UUID {
	if x != nil {
		return x.ViewRowOrder
	}
	return nil
}

func (x *CommandCategorySetGroupingColumnsArchive) GetUndoRestoreViewOrder() bool {
	if x != nil && x.UndoRestoreViewOrder != nil {
		return *x.UndoRestoreViewOrder
	}
	return false
}

func (x *CommandCategorySetGroupingColumnsArchive) GetUndoViewRowOrder() []*UUID {
	if x != nil {
		return x.UndoViewRowOrder
	}
	return nil
}

func (x *CommandCategorySetGroupingColumnsArchive) GetCollapseState() []*UUID {
	if x != nil {
		return x.CollapseState
	}
	return nil
}

func (x *CommandCategorySetGroupingColumnsArchive) GetUndoCollapseState() []*UUID {
	if x != nil {
		return x.UndoCollapseState
	}
	return nil
}

func (x *CommandCategorySetGroupingColumnsArchive) GetSummaryChangeState() *SummaryModelGroupByChangeStateArchive {
	if x != nil {
		return x.SummaryChangeState
	}
	return nil
}

func (x *CommandCategorySetGroupingColumnsArchive) GetUndoSummaryChangeState() *SummaryModelGroupByChangeStateArchive {
	if x != nil {
		return x.UndoSummaryChangeState
	}
	return nil
}

func (x *CommandCategorySetGroupingColumnsArchive) GetNewColumnAggregates() *ColumnAggregateListArchive {
	if x != nil {
		return x.NewColumnAggregates
	}
	return nil
}

func (x *CommandCategorySetGroupingColumnsArchive) GetOldColumnAggregates() *ColumnAggregateListArchive {
	if x != nil {
		return x.OldColumnAggregates
	}
	return nil
}

func (x *CommandCategorySetGroupingColumnsArchive) GetUndoSetEnabledRewriteCommand() *Reference {
	if x != nil {
		return x.UndoSetEnabledRewriteCommand
	}
	return nil
}

func (x *CommandCategorySetGroupingColumnsArchive) GetUndoSetColumnsRewriteCommand() *Reference {
	if x != nil {
		return x.UndoSetColumnsRewriteCommand
	}
	return nil
}

func (x *CommandCategorySetGroupingColumnsArchive) GetForceRestoreAllStates() bool {
	if x != nil && x.ForceRestoreAllStates != nil {
		return *x.ForceRestoreAllStates
	}
	return false
}

func (x *CommandCategorySetGroupingColumnsArchive) GetCellDiffMap() *Reference {
	if x != nil {
		return x.CellDiffMap
	}
	return nil
}

func (x *CommandCategorySetGroupingColumnsArchive) GetUndoCellDiffMap() *Reference {
	if x != nil {
		return x.UndoCellDiffMap
	}
	return nil
}

func (x *CommandCategorySetGroupingColumnsArchive) GetUndoSetGroupSortOrderCommand() *Reference {
	if x != nil {
		return x.UndoSetGroupSortOrderCommand
	}
	return nil
}

type FormulaEditingCommandGroupArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super               *ProgressiveCommandGroupArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	UndoSelectionValid  *bool                           `protobuf:"varint,2,req,name=undoSelectionValid" json:"undoSelectionValid,omitempty"`
	UndoSelectionStart  *uint32                         `protobuf:"varint,3,req,name=undoSelectionStart" json:"undoSelectionStart,omitempty"`
	UndoSelectionLength *uint32                         `protobuf:"varint,4,req,name=undoSelectionLength" json:"undoSelectionLength,omitempty"`
	UndoActiveToken     *uint32                         `protobuf:"varint,5,req,name=undoActiveToken" json:"undoActiveToken,omitempty"`
	RedoSelectionValid  *bool                           `protobuf:"varint,6,req,name=redoSelectionValid" json:"redoSelectionValid,omitempty"`
	RedoSelectionStart  *uint32                         `protobuf:"varint,7,req,name=redoSelectionStart" json:"redoSelectionStart,omitempty"`
	RedoSelectionLength *uint32                         `protobuf:"varint,8,req,name=redoSelectionLength" json:"redoSelectionLength,omitempty"`
	RedoActiveToken     *uint32                         `protobuf:"varint,9,req,name=redoActiveToken" json:"redoActiveToken,omitempty"`
}

func (x *FormulaEditingCommandGroupArchive) Reset() {
	*x = FormulaEditingCommandGroupArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormulaEditingCommandGroupArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormulaEditingCommandGroupArchive) ProtoMessage() {}

func (x *FormulaEditingCommandGroupArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormulaEditingCommandGroupArchive.ProtoReflect.Descriptor instead.
func (*FormulaEditingCommandGroupArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{68}
}

func (x *FormulaEditingCommandGroupArchive) GetSuper() *ProgressiveCommandGroupArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *FormulaEditingCommandGroupArchive) GetUndoSelectionValid() bool {
	if x != nil && x.UndoSelectionValid != nil {
		return *x.UndoSelectionValid
	}
	return false
}

func (x *FormulaEditingCommandGroupArchive) GetUndoSelectionStart() uint32 {
	if x != nil && x.UndoSelectionStart != nil {
		return *x.UndoSelectionStart
	}
	return 0
}

func (x *FormulaEditingCommandGroupArchive) GetUndoSelectionLength() uint32 {
	if x != nil && x.UndoSelectionLength != nil {
		return *x.UndoSelectionLength
	}
	return 0
}

func (x *FormulaEditingCommandGroupArchive) GetUndoActiveToken() uint32 {
	if x != nil && x.UndoActiveToken != nil {
		return *x.UndoActiveToken
	}
	return 0
}

func (x *FormulaEditingCommandGroupArchive) GetRedoSelectionValid() bool {
	if x != nil && x.RedoSelectionValid != nil {
		return *x.RedoSelectionValid
	}
	return false
}

func (x *FormulaEditingCommandGroupArchive) GetRedoSelectionStart() uint32 {
	if x != nil && x.RedoSelectionStart != nil {
		return *x.RedoSelectionStart
	}
	return 0
}

func (x *FormulaEditingCommandGroupArchive) GetRedoSelectionLength() uint32 {
	if x != nil && x.RedoSelectionLength != nil {
		return *x.RedoSelectionLength
	}
	return 0
}

func (x *FormulaEditingCommandGroupArchive) GetRedoActiveToken() uint32 {
	if x != nil && x.RedoActiveToken != nil {
		return *x.RedoActiveToken
	}
	return 0
}

type FormulaEditingCommandSelectionBehaviorArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super           *CommandSelectionBehaviorArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	UndoActiveToken *uint32                          `protobuf:"varint,2,opt,name=undoActiveToken" json:"undoActiveToken,omitempty"`
	RedoActiveToken *uint32                          `protobuf:"varint,3,opt,name=redoActiveToken" json:"redoActiveToken,omitempty"`
}

func (x *FormulaEditingCommandSelectionBehaviorArchive) Reset() {
	*x = FormulaEditingCommandSelectionBehaviorArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormulaEditingCommandSelectionBehaviorArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormulaEditingCommandSelectionBehaviorArchive) ProtoMessage() {}

func (x *FormulaEditingCommandSelectionBehaviorArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormulaEditingCommandSelectionBehaviorArchive.ProtoReflect.Descriptor instead.
func (*FormulaEditingCommandSelectionBehaviorArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{69}
}

func (x *FormulaEditingCommandSelectionBehaviorArchive) GetSuper() *CommandSelectionBehaviorArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *FormulaEditingCommandSelectionBehaviorArchive) GetUndoActiveToken() uint32 {
	if x != nil && x.UndoActiveToken != nil {
		return *x.UndoActiveToken
	}
	return 0
}

func (x *FormulaEditingCommandSelectionBehaviorArchive) GetRedoActiveToken() uint32 {
	if x != nil && x.RedoActiveToken != nil {
		return *x.RedoActiveToken
	}
	return 0
}

type TableCommandSelectionBehaviorArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                 *CommandSelectionBehaviorArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	TableInfo             *Reference                       `protobuf:"bytes,2,opt,name=table_info,json=tableInfo" json:"table_info,omitempty"`
	LastColumnUidHitByTap *UUID                            `protobuf:"bytes,3,opt,name=last_column_uid_hit_by_tap,json=lastColumnUidHitByTap" json:"last_column_uid_hit_by_tap,omitempty"`
	InvalidateComments    *uint32                          `protobuf:"varint,4,opt,name=invalidate_comments,json=invalidateComments" json:"invalidate_comments,omitempty"`
}

func (x *TableCommandSelectionBehaviorArchive) Reset() {
	*x = TableCommandSelectionBehaviorArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableCommandSelectionBehaviorArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableCommandSelectionBehaviorArchive) ProtoMessage() {}

func (x *TableCommandSelectionBehaviorArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableCommandSelectionBehaviorArchive.ProtoReflect.Descriptor instead.
func (*TableCommandSelectionBehaviorArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{70}
}

func (x *TableCommandSelectionBehaviorArchive) GetSuper() *CommandSelectionBehaviorArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *TableCommandSelectionBehaviorArchive) GetTableInfo() *Reference {
	if x != nil {
		return x.TableInfo
	}
	return nil
}

func (x *TableCommandSelectionBehaviorArchive) GetLastColumnUidHitByTap() *UUID {
	if x != nil {
		return x.LastColumnUidHitByTap
	}
	return nil
}

func (x *TableCommandSelectionBehaviorArchive) GetInvalidateComments() uint32 {
	if x != nil && x.InvalidateComments != nil {
		return *x.InvalidateComments
	}
	return 0
}

type CommandApplyCellCommentArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super             *TableCommandArchive   `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	CellUid           *UUIDCoordArchive      `protobuf:"bytes,2,req,name=cell_uid,json=cellUid" json:"cell_uid,omitempty"`
	OldCommentStorage *Reference             `protobuf:"bytes,3,opt,name=old_comment_storage,json=oldCommentStorage" json:"old_comment_storage,omitempty"`
	NewCommentStorage *Reference             `protobuf:"bytes,4,opt,name=new_comment_storage,json=newCommentStorage" json:"new_comment_storage,omitempty"`
	ForwardVariant    *CommentCommandVariant `protobuf:"varint,5,opt,name=forward_variant,json=forwardVariant,enum=TSD.CommentCommandVariant" json:"forward_variant,omitempty"`
	InverseVariant    *CommentCommandVariant `protobuf:"varint,6,opt,name=inverse_variant,json=inverseVariant,enum=TSD.CommentCommandVariant" json:"inverse_variant,omitempty"`
}

func (x *CommandApplyCellCommentArchive) Reset() {
	*x = CommandApplyCellCommentArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandApplyCellCommentArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandApplyCellCommentArchive) ProtoMessage() {}

func (x *CommandApplyCellCommentArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandApplyCellCommentArchive.ProtoReflect.Descriptor instead.
func (*CommandApplyCellCommentArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{71}
}

func (x *CommandApplyCellCommentArchive) GetSuper() *TableCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandApplyCellCommentArchive) GetCellUid() *UUIDCoordArchive {
	if x != nil {
		return x.CellUid
	}
	return nil
}

func (x *CommandApplyCellCommentArchive) GetOldCommentStorage() *Reference {
	if x != nil {
		return x.OldCommentStorage
	}
	return nil
}

func (x *CommandApplyCellCommentArchive) GetNewCommentStorage() *Reference {
	if x != nil {
		return x.NewCommentStorage
	}
	return nil
}

func (x *CommandApplyCellCommentArchive) GetForwardVariant() CommentCommandVariant {
	if x != nil && x.ForwardVariant != nil {
		return *x.ForwardVariant
	}
	return CommentCommandVariant_BaseComment
}

func (x *CommandApplyCellCommentArchive) GetInverseVariant() CommentCommandVariant {
	if x != nil && x.InverseVariant != nil {
		return *x.InverseVariant
	}
	return CommentCommandVariant_BaseComment
}

type CommandSetFormulaTokenizationArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super        *CommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Tokenization *bool           `protobuf:"varint,2,req,name=tokenization" json:"tokenization,omitempty"`
}

func (x *CommandSetFormulaTokenizationArchive) Reset() {
	*x = CommandSetFormulaTokenizationArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSetFormulaTokenizationArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSetFormulaTokenizationArchive) ProtoMessage() {}

func (x *CommandSetFormulaTokenizationArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSetFormulaTokenizationArchive.ProtoReflect.Descriptor instead.
func (*CommandSetFormulaTokenizationArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{72}
}

func (x *CommandSetFormulaTokenizationArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandSetFormulaTokenizationArchive) GetTokenization() bool {
	if x != nil && x.Tokenization != nil {
		return *x.Tokenization
	}
	return false
}

type CommandSetFilterSetTypeArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super            *TableCommandArchive            `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	OldFilterSetType *FilterSetArchive_FilterSetType `protobuf:"varint,2,opt,name=old_filter_set_type,json=oldFilterSetType,enum=TST.FilterSetArchive_FilterSetType" json:"old_filter_set_type,omitempty"`
	NewFilterSetType *FilterSetArchive_FilterSetType `protobuf:"varint,3,req,name=new_filter_set_type,json=newFilterSetType,enum=TST.FilterSetArchive_FilterSetType" json:"new_filter_set_type,omitempty"`
	RollbackUidList  []*UUID                         `protobuf:"bytes,4,rep,name=rollback_uid_list,json=rollbackUidList" json:"rollback_uid_list,omitempty"`
}

func (x *CommandSetFilterSetTypeArchive) Reset() {
	*x = CommandSetFilterSetTypeArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSetFilterSetTypeArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSetFilterSetTypeArchive) ProtoMessage() {}

func (x *CommandSetFilterSetTypeArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSetFilterSetTypeArchive.ProtoReflect.Descriptor instead.
func (*CommandSetFilterSetTypeArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{73}
}

func (x *CommandSetFilterSetTypeArchive) GetSuper() *TableCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandSetFilterSetTypeArchive) GetOldFilterSetType() FilterSetArchive_FilterSetType {
	if x != nil && x.OldFilterSetType != nil {
		return *x.OldFilterSetType
	}
	return FilterSetArchive_FilterSetArchiveTypeAll
}

func (x *CommandSetFilterSetTypeArchive) GetNewFilterSetType() FilterSetArchive_FilterSetType {
	if x != nil && x.NewFilterSetType != nil {
		return *x.NewFilterSetType
	}
	return FilterSetArchive_FilterSetArchiveTypeAll
}

func (x *CommandSetFilterSetTypeArchive) GetRollbackUidList() []*UUID {
	if x != nil {
		return x.RollbackUidList
	}
	return nil
}

type CommandSetTextStyleArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super              *TableCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	CellDiffMap        *Reference           `protobuf:"bytes,2,req,name=cell_diff_map,json=cellDiffMap" json:"cell_diff_map,omitempty"`
	InverseCellDiffMap *Reference           `protobuf:"bytes,3,opt,name=inverse_cell_diff_map,json=inverseCellDiffMap" json:"inverse_cell_diff_map,omitempty"`
}

func (x *CommandSetTextStyleArchive) Reset() {
	*x = CommandSetTextStyleArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSetTextStyleArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSetTextStyleArchive) ProtoMessage() {}

func (x *CommandSetTextStyleArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSetTextStyleArchive.ProtoReflect.Descriptor instead.
func (*CommandSetTextStyleArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{74}
}

func (x *CommandSetTextStyleArchive) GetSuper() *TableCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandSetTextStyleArchive) GetCellDiffMap() *Reference {
	if x != nil {
		return x.CellDiffMap
	}
	return nil
}

func (x *CommandSetTextStyleArchive) GetInverseCellDiffMap() *Reference {
	if x != nil {
		return x.InverseCellDiffMap
	}
	return nil
}

type CommandSetTextStylePropertiesArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super              *TableCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	CellDiffMap        *Reference           `protobuf:"bytes,2,req,name=cell_diff_map,json=cellDiffMap" json:"cell_diff_map,omitempty"`
	CellWasRichText    []bool               `protobuf:"varint,3,rep,name=cell_was_rich_text,json=cellWasRichText" json:"cell_was_rich_text,omitempty"`
	InverseCellDiffMap *Reference           `protobuf:"bytes,4,opt,name=inverse_cell_diff_map,json=inverseCellDiffMap" json:"inverse_cell_diff_map,omitempty"`
}

func (x *CommandSetTextStylePropertiesArchive) Reset() {
	*x = CommandSetTextStylePropertiesArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSetTextStylePropertiesArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSetTextStylePropertiesArchive) ProtoMessage() {}

func (x *CommandSetTextStylePropertiesArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSetTextStylePropertiesArchive.ProtoReflect.Descriptor instead.
func (*CommandSetTextStylePropertiesArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{75}
}

func (x *CommandSetTextStylePropertiesArchive) GetSuper() *TableCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandSetTextStylePropertiesArchive) GetCellDiffMap() *Reference {
	if x != nil {
		return x.CellDiffMap
	}
	return nil
}

func (x *CommandSetTextStylePropertiesArchive) GetCellWasRichText() []bool {
	if x != nil {
		return x.CellWasRichText
	}
	return nil
}

func (x *CommandSetTextStylePropertiesArchive) GetInverseCellDiffMap() *Reference {
	if x != nil {
		return x.InverseCellDiffMap
	}
	return nil
}

type CommandJustForNotifyingArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                *TableCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	ChangeDescriptorType *uint32              `protobuf:"varint,2,req,name=change_descriptor_type,json=changeDescriptorType" json:"change_descriptor_type,omitempty"`
}

func (x *CommandJustForNotifyingArchive) Reset() {
	*x = CommandJustForNotifyingArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandJustForNotifyingArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandJustForNotifyingArchive) ProtoMessage() {}

func (x *CommandJustForNotifyingArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandJustForNotifyingArchive.ProtoReflect.Descriptor instead.
func (*CommandJustForNotifyingArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{76}
}

func (x *CommandJustForNotifyingArchive) GetSuper() *TableCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandJustForNotifyingArchive) GetChangeDescriptorType() uint32 {
	if x != nil && x.ChangeDescriptorType != nil {
		return *x.ChangeDescriptorType
	}
	return 0
}

type CommandSetStorageLanguageArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super           *CommandArchive  `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Storage         *Reference       `protobuf:"bytes,2,req,name=storage" json:"storage,omitempty"`
	Language        *string          `protobuf:"bytes,3,req,name=language" json:"language,omitempty"`
	RangeLocation   *uint32          `protobuf:"varint,4,req,name=range_location,json=rangeLocation" json:"range_location,omitempty"`
	RangeLength     *uint32          `protobuf:"varint,5,req,name=range_length,json=rangeLength" json:"range_length,omitempty"`
	UndoTransaction *UndoTransaction `protobuf:"bytes,6,opt,name=undo_transaction,json=undoTransaction" json:"undo_transaction,omitempty"`
}

func (x *CommandSetStorageLanguageArchive) Reset() {
	*x = CommandSetStorageLanguageArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSetStorageLanguageArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSetStorageLanguageArchive) ProtoMessage() {}

func (x *CommandSetStorageLanguageArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSetStorageLanguageArchive.ProtoReflect.Descriptor instead.
func (*CommandSetStorageLanguageArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{77}
}

func (x *CommandSetStorageLanguageArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandSetStorageLanguageArchive) GetStorage() *Reference {
	if x != nil {
		return x.Storage
	}
	return nil
}

func (x *CommandSetStorageLanguageArchive) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

func (x *CommandSetStorageLanguageArchive) GetRangeLocation() uint32 {
	if x != nil && x.RangeLocation != nil {
		return *x.RangeLocation
	}
	return 0
}

func (x *CommandSetStorageLanguageArchive) GetRangeLength() uint32 {
	if x != nil && x.RangeLength != nil {
		return *x.RangeLength
	}
	return 0
}

func (x *CommandSetStorageLanguageArchive) GetUndoTransaction() *UndoTransaction {
	if x != nil {
		return x.UndoTransaction
	}
	return nil
}

type CommandSetSortOrderArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super        *TableCommandArchive   `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	OldSortOrder *TableSortOrderArchive `protobuf:"bytes,2,opt,name=old_sort_order,json=oldSortOrder" json:"old_sort_order,omitempty"`
	NewSortOrder *TableSortOrderArchive `protobuf:"bytes,3,opt,name=new_sort_order,json=newSortOrder" json:"new_sort_order,omitempty"`
}

func (x *CommandSetSortOrderArchive) Reset() {
	*x = CommandSetSortOrderArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSetSortOrderArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSetSortOrderArchive) ProtoMessage() {}

func (x *CommandSetSortOrderArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSetSortOrderArchive.ProtoReflect.Descriptor instead.
func (*CommandSetSortOrderArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{78}
}

func (x *CommandSetSortOrderArchive) GetSuper() *TableCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandSetSortOrderArchive) GetOldSortOrder() *TableSortOrderArchive {
	if x != nil {
		return x.OldSortOrder
	}
	return nil
}

func (x *CommandSetSortOrderArchive) GetNewSortOrder() *TableSortOrderArchive {
	if x != nil {
		return x.NewSortOrder
	}
	return nil
}

type CommandSetGroupSortOrderArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super             *TableCommandArchive           `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	OldGroupSortOrder *TableGroupSortOrderUIDArchive `protobuf:"bytes,2,opt,name=old_group_sort_order,json=oldGroupSortOrder" json:"old_group_sort_order,omitempty"`
	NewGroupSortOrder *TableGroupSortOrderUIDArchive `protobuf:"bytes,3,opt,name=new_group_sort_order,json=newGroupSortOrder" json:"new_group_sort_order,omitempty"`
}

func (x *CommandSetGroupSortOrderArchive) Reset() {
	*x = CommandSetGroupSortOrderArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSetGroupSortOrderArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSetGroupSortOrderArchive) ProtoMessage() {}

func (x *CommandSetGroupSortOrderArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSetGroupSortOrderArchive.ProtoReflect.Descriptor instead.
func (*CommandSetGroupSortOrderArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{79}
}

func (x *CommandSetGroupSortOrderArchive) GetSuper() *TableCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandSetGroupSortOrderArchive) GetOldGroupSortOrder() *TableGroupSortOrderUIDArchive {
	if x != nil {
		return x.OldGroupSortOrder
	}
	return nil
}

func (x *CommandSetGroupSortOrderArchive) GetNewGroupSortOrder() *TableGroupSortOrderUIDArchive {
	if x != nil {
		return x.NewGroupSortOrder
	}
	return nil
}

type CommandRewriteSortOrderForTableResizeArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super        *TableCommandArchive   `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	OldSortOrder *TableSortOrderArchive `protobuf:"bytes,2,opt,name=old_sort_order,json=oldSortOrder" json:"old_sort_order,omitempty"`
	NewSortOrder *TableSortOrderArchive `protobuf:"bytes,3,opt,name=new_sort_order,json=newSortOrder" json:"new_sort_order,omitempty"`
}

func (x *CommandRewriteSortOrderForTableResizeArchive) Reset() {
	*x = CommandRewriteSortOrderForTableResizeArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandRewriteSortOrderForTableResizeArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandRewriteSortOrderForTableResizeArchive) ProtoMessage() {}

func (x *CommandRewriteSortOrderForTableResizeArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandRewriteSortOrderForTableResizeArchive.ProtoReflect.Descriptor instead.
func (*CommandRewriteSortOrderForTableResizeArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{80}
}

func (x *CommandRewriteSortOrderForTableResizeArchive) GetSuper() *TableCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandRewriteSortOrderForTableResizeArchive) GetOldSortOrder() *TableSortOrderArchive {
	if x != nil {
		return x.OldSortOrder
	}
	return nil
}

func (x *CommandRewriteSortOrderForTableResizeArchive) GetNewSortOrder() *TableSortOrderArchive {
	if x != nil {
		return x.NewSortOrder
	}
	return nil
}

type CommandRewriteSortOrderForRewriteSpecArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super        *TableCommandArchive       `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	RewriteSpec  *FormulaRewriteSpecArchive `protobuf:"bytes,2,req,name=rewrite_spec,json=rewriteSpec" json:"rewrite_spec,omitempty"`
	OldSortOrder *TableSortOrderArchive     `protobuf:"bytes,3,opt,name=old_sort_order,json=oldSortOrder" json:"old_sort_order,omitempty"`
	NewSortOrder *TableSortOrderArchive     `protobuf:"bytes,4,opt,name=new_sort_order,json=newSortOrder" json:"new_sort_order,omitempty"`
}

func (x *CommandRewriteSortOrderForRewriteSpecArchive) Reset() {
	*x = CommandRewriteSortOrderForRewriteSpecArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandRewriteSortOrderForRewriteSpecArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandRewriteSortOrderForRewriteSpecArchive) ProtoMessage() {}

func (x *CommandRewriteSortOrderForRewriteSpecArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandRewriteSortOrderForRewriteSpecArchive.ProtoReflect.Descriptor instead.
func (*CommandRewriteSortOrderForRewriteSpecArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{81}
}

func (x *CommandRewriteSortOrderForRewriteSpecArchive) GetSuper() *TableCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandRewriteSortOrderForRewriteSpecArchive) GetRewriteSpec() *FormulaRewriteSpecArchive {
	if x != nil {
		return x.RewriteSpec
	}
	return nil
}

func (x *CommandRewriteSortOrderForRewriteSpecArchive) GetOldSortOrder() *TableSortOrderArchive {
	if x != nil {
		return x.OldSortOrder
	}
	return nil
}

func (x *CommandRewriteSortOrderForRewriteSpecArchive) GetNewSortOrder() *TableSortOrderArchive {
	if x != nil {
		return x.NewSortOrder
	}
	return nil
}

type CommandSetFilterSetArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super           *TableCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	NewFilterSet    *Reference           `protobuf:"bytes,2,req,name=new_filter_set,json=newFilterSet" json:"new_filter_set,omitempty"`
	OldFilterSet    *Reference           `protobuf:"bytes,3,opt,name=old_filter_set,json=oldFilterSet" json:"old_filter_set,omitempty"`
	RollbackUidList []*UUID              `protobuf:"bytes,4,rep,name=rollback_uid_list,json=rollbackUidList" json:"rollback_uid_list,omitempty"`
}

func (x *CommandSetFilterSetArchive) Reset() {
	*x = CommandSetFilterSetArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSetFilterSetArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSetFilterSetArchive) ProtoMessage() {}

func (x *CommandSetFilterSetArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSetFilterSetArchive.ProtoReflect.Descriptor instead.
func (*CommandSetFilterSetArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{82}
}

func (x *CommandSetFilterSetArchive) GetSuper() *TableCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandSetFilterSetArchive) GetNewFilterSet() *Reference {
	if x != nil {
		return x.NewFilterSet
	}
	return nil
}

func (x *CommandSetFilterSetArchive) GetOldFilterSet() *Reference {
	if x != nil {
		return x.OldFilterSet
	}
	return nil
}

func (x *CommandSetFilterSetArchive) GetRollbackUidList() []*UUID {
	if x != nil {
		return x.RollbackUidList
	}
	return nil
}

type ColumnRowRestoreDataArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UidList   []*UUID                     `protobuf:"bytes,1,rep,name=uid_list,json=uidList" json:"uid_list,omitempty"`
	Metadatas []*ColumnRowMetadataArchive `protobuf:"bytes,2,rep,name=metadatas" json:"metadatas,omitempty"`
}

func (x *ColumnRowRestoreDataArchive) Reset() {
	*x = ColumnRowRestoreDataArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnRowRestoreDataArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnRowRestoreDataArchive) ProtoMessage() {}

func (x *ColumnRowRestoreDataArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnRowRestoreDataArchive.ProtoReflect.Descriptor instead.
func (*ColumnRowRestoreDataArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{83}
}

func (x *ColumnRowRestoreDataArchive) GetUidList() []*UUID {
	if x != nil {
		return x.UidList
	}
	return nil
}

func (x *ColumnRowRestoreDataArchive) GetMetadatas() []*ColumnRowMetadataArchive {
	if x != nil {
		return x.Metadatas
	}
	return nil
}

type CommandTransposeTableArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                     *TableCommandArchive         `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	OriginalTableRange        *ExpandedCellRange           `protobuf:"bytes,2,req,name=original_table_range,json=originalTableRange" json:"original_table_range,omitempty"`
	OriginalCellMap           *Reference                   `protobuf:"bytes,3,req,name=original_cell_map,json=originalCellMap" json:"original_cell_map,omitempty"`
	OriginalFooterRowCount    *uint32                      `protobuf:"varint,4,req,name=original_footer_row_count,json=originalFooterRowCount" json:"original_footer_row_count,omitempty"`
	OriginalColumnWidths      []float32                    `protobuf:"fixed32,5,rep,name=original_column_widths,json=originalColumnWidths" json:"original_column_widths,omitempty"`
	OriginalRowHeights        []float32                    `protobuf:"fixed32,6,rep,name=original_row_heights,json=originalRowHeights" json:"original_row_heights,omitempty"`
	IneligibleMergeList       []*CellRange                 `protobuf:"bytes,7,rep,name=ineligible_merge_list,json=ineligibleMergeList" json:"ineligible_merge_list,omitempty"`
	TransposedCellMap         *Reference                   `protobuf:"bytes,8,req,name=transposed_cell_map,json=transposedCellMap" json:"transposed_cell_map,omitempty"`
	UndoFormulaRewriteCommand *Reference                   `protobuf:"bytes,9,opt,name=undo_formula_rewrite_command,json=undoFormulaRewriteCommand" json:"undo_formula_rewrite_command,omitempty"`
	RichTextSubcommands       *Reference                   `protobuf:"bytes,10,opt,name=rich_text_subcommands,json=richTextSubcommands" json:"rich_text_subcommands,omitempty"`
	ColumnRestoreData         *ColumnRowRestoreDataArchive `protobuf:"bytes,11,opt,name=column_restore_data,json=columnRestoreData" json:"column_restore_data,omitempty"`
	RowRestoreData            *ColumnRowRestoreDataArchive `protobuf:"bytes,12,opt,name=row_restore_data,json=rowRestoreData" json:"row_restore_data,omitempty"`
}

func (x *CommandTransposeTableArchive) Reset() {
	*x = CommandTransposeTableArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandTransposeTableArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandTransposeTableArchive) ProtoMessage() {}

func (x *CommandTransposeTableArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandTransposeTableArchive.ProtoReflect.Descriptor instead.
func (*CommandTransposeTableArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{84}
}

func (x *CommandTransposeTableArchive) GetSuper() *TableCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandTransposeTableArchive) GetOriginalTableRange() *ExpandedCellRange {
	if x != nil {
		return x.OriginalTableRange
	}
	return nil
}

func (x *CommandTransposeTableArchive) GetOriginalCellMap() *Reference {
	if x != nil {
		return x.OriginalCellMap
	}
	return nil
}

func (x *CommandTransposeTableArchive) GetOriginalFooterRowCount() uint32 {
	if x != nil && x.OriginalFooterRowCount != nil {
		return *x.OriginalFooterRowCount
	}
	return 0
}

func (x *CommandTransposeTableArchive) GetOriginalColumnWidths() []float32 {
	if x != nil {
		return x.OriginalColumnWidths
	}
	return nil
}

func (x *CommandTransposeTableArchive) GetOriginalRowHeights() []float32 {
	if x != nil {
		return x.OriginalRowHeights
	}
	return nil
}

func (x *CommandTransposeTableArchive) GetIneligibleMergeList() []*CellRange {
	if x != nil {
		return x.IneligibleMergeList
	}
	return nil
}

func (x *CommandTransposeTableArchive) GetTransposedCellMap() *Reference {
	if x != nil {
		return x.TransposedCellMap
	}
	return nil
}

func (x *CommandTransposeTableArchive) GetUndoFormulaRewriteCommand() *Reference {
	if x != nil {
		return x.UndoFormulaRewriteCommand
	}
	return nil
}

func (x *CommandTransposeTableArchive) GetRichTextSubcommands() *Reference {
	if x != nil {
		return x.RichTextSubcommands
	}
	return nil
}

func (x *CommandTransposeTableArchive) GetColumnRestoreData() *ColumnRowRestoreDataArchive {
	if x != nil {
		return x.ColumnRestoreData
	}
	return nil
}

func (x *CommandTransposeTableArchive) GetRowRestoreData() *ColumnRowRestoreDataArchive {
	if x != nil {
		return x.RowRestoreData
	}
	return nil
}

type CommandSetStructuredTextImportRecordArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super           *TableCommandArchive        `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	NewImportRecord *StructuredTextImportRecord `protobuf:"bytes,2,opt,name=new_import_record,json=newImportRecord" json:"new_import_record,omitempty"`
	OldImportRecord *StructuredTextImportRecord `protobuf:"bytes,3,opt,name=old_import_record,json=oldImportRecord" json:"old_import_record,omitempty"`
}

func (x *CommandSetStructuredTextImportRecordArchive) Reset() {
	*x = CommandSetStructuredTextImportRecordArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandSetStructuredTextImportRecordArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSetStructuredTextImportRecordArchive) ProtoMessage() {}

func (x *CommandSetStructuredTextImportRecordArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSetStructuredTextImportRecordArchive.ProtoReflect.Descriptor instead.
func (*CommandSetStructuredTextImportRecordArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{85}
}

func (x *CommandSetStructuredTextImportRecordArchive) GetSuper() *TableCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandSetStructuredTextImportRecordArchive) GetNewImportRecord() *StructuredTextImportRecord {
	if x != nil {
		return x.NewImportRecord
	}
	return nil
}

func (x *CommandSetStructuredTextImportRecordArchive) GetOldImportRecord() *StructuredTextImportRecord {
	if x != nil {
		return x.OldImportRecord
	}
	return nil
}

type CommandCategoryCollapseExpandGroupArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super             *TableCommandArchive        `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	IsCollapsing      *bool                       `protobuf:"varint,2,req,name=is_collapsing,json=isCollapsing" json:"is_collapsing,omitempty"`
	GroupingColumns   *GroupColumnListArchive     `protobuf:"bytes,3,req,name=grouping_columns,json=groupingColumns" json:"grouping_columns,omitempty"`
	CollapseState     *ExpandCollapseStateArchive `protobuf:"bytes,4,req,name=collapse_state,json=collapseState" json:"collapse_state,omitempty"`
	UndoCollapseState *ExpandCollapseStateArchive `protobuf:"bytes,5,opt,name=undo_collapse_state,json=undoCollapseState" json:"undo_collapse_state,omitempty"`
}

func (x *CommandCategoryCollapseExpandGroupArchive) Reset() {
	*x = CommandCategoryCollapseExpandGroupArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandCategoryCollapseExpandGroupArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandCategoryCollapseExpandGroupArchive) ProtoMessage() {}

func (x *CommandCategoryCollapseExpandGroupArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandCategoryCollapseExpandGroupArchive.ProtoReflect.Descriptor instead.
func (*CommandCategoryCollapseExpandGroupArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{86}
}

func (x *CommandCategoryCollapseExpandGroupArchive) GetSuper() *TableCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandCategoryCollapseExpandGroupArchive) GetIsCollapsing() bool {
	if x != nil && x.IsCollapsing != nil {
		return *x.IsCollapsing
	}
	return false
}

func (x *CommandCategoryCollapseExpandGroupArchive) GetGroupingColumns() *GroupColumnListArchive {
	if x != nil {
		return x.GroupingColumns
	}
	return nil
}

func (x *CommandCategoryCollapseExpandGroupArchive) GetCollapseState() *ExpandCollapseStateArchive {
	if x != nil {
		return x.CollapseState
	}
	return nil
}

func (x *CommandCategoryCollapseExpandGroupArchive) GetUndoCollapseState() *ExpandCollapseStateArchive {
	if x != nil {
		return x.UndoCollapseState
	}
	return nil
}

type CommandCategoryChangeSummaryAggregateType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super             *TableCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	AggregateType     *uint32              `protobuf:"varint,2,req,name=aggregate_type,json=aggregateType" json:"aggregate_type,omitempty"`
	UndoAggregateType *uint32              `protobuf:"varint,3,req,name=undo_aggregate_type,json=undoAggregateType" json:"undo_aggregate_type,omitempty"`
	ColumnUid         *UUID                `protobuf:"bytes,4,req,name=column_uid,json=columnUid" json:"column_uid,omitempty"`
	GroupLevel        *int32               `protobuf:"zigzag32,5,req,name=group_level,json=groupLevel" json:"group_level,omitempty"`
}

func (x *CommandCategoryChangeSummaryAggregateType) Reset() {
	*x = CommandCategoryChangeSummaryAggregateType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandCategoryChangeSummaryAggregateType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandCategoryChangeSummaryAggregateType) ProtoMessage() {}

func (x *CommandCategoryChangeSummaryAggregateType) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandCategoryChangeSummaryAggregateType.ProtoReflect.Descriptor instead.
func (*CommandCategoryChangeSummaryAggregateType) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{87}
}

func (x *CommandCategoryChangeSummaryAggregateType) GetSuper() *TableCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandCategoryChangeSummaryAggregateType) GetAggregateType() uint32 {
	if x != nil && x.AggregateType != nil {
		return *x.AggregateType
	}
	return 0
}

func (x *CommandCategoryChangeSummaryAggregateType) GetUndoAggregateType() uint32 {
	if x != nil && x.UndoAggregateType != nil {
		return *x.UndoAggregateType
	}
	return 0
}

func (x *CommandCategoryChangeSummaryAggregateType) GetColumnUid() *UUID {
	if x != nil {
		return x.ColumnUid
	}
	return nil
}

func (x *CommandCategoryChangeSummaryAggregateType) GetGroupLevel() int32 {
	if x != nil && x.GroupLevel != nil {
		return *x.GroupLevel
	}
	return 0
}

type CommandCategorySetLabelRowVisibility struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                  *TableCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	GroupLevel             *uint32              `protobuf:"varint,2,req,name=group_level,json=groupLevel" json:"group_level,omitempty"`
	LabelRowVisibility     *uint32              `protobuf:"varint,3,req,name=label_row_visibility,json=labelRowVisibility" json:"label_row_visibility,omitempty"`
	UndoLabelRowVisibility *uint32              `protobuf:"varint,4,req,name=undo_label_row_visibility,json=undoLabelRowVisibility" json:"undo_label_row_visibility,omitempty"`
}

func (x *CommandCategorySetLabelRowVisibility) Reset() {
	*x = CommandCategorySetLabelRowVisibility{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandCategorySetLabelRowVisibility) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandCategorySetLabelRowVisibility) ProtoMessage() {}

func (x *CommandCategorySetLabelRowVisibility) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandCategorySetLabelRowVisibility.ProtoReflect.Descriptor instead.
func (*CommandCategorySetLabelRowVisibility) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{88}
}

func (x *CommandCategorySetLabelRowVisibility) GetSuper() *TableCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandCategorySetLabelRowVisibility) GetGroupLevel() uint32 {
	if x != nil && x.GroupLevel != nil {
		return *x.GroupLevel
	}
	return 0
}

func (x *CommandCategorySetLabelRowVisibility) GetLabelRowVisibility() uint32 {
	if x != nil && x.LabelRowVisibility != nil {
		return *x.LabelRowVisibility
	}
	return 0
}

func (x *CommandCategorySetLabelRowVisibility) GetUndoLabelRowVisibility() uint32 {
	if x != nil && x.UndoLabelRowVisibility != nil {
		return *x.UndoLabelRowVisibility
	}
	return 0
}

type CommandCategoryWillChangeGroupValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                 *TableCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	GroupNodeUid          *UUID                `protobuf:"bytes,2,req,name=group_node_uid,json=groupNodeUid" json:"group_node_uid,omitempty"`
	UndoGroupNodeUid      *UUID                `protobuf:"bytes,3,opt,name=undo_group_node_uid,json=undoGroupNodeUid" json:"undo_group_node_uid,omitempty"`
	GroupValue            *CellValueArchive    `protobuf:"bytes,4,opt,name=group_value,json=groupValue" json:"group_value,omitempty"`
	UndoGroupValue        *CellValueArchive    `protobuf:"bytes,5,opt,name=undo_group_value,json=undoGroupValue" json:"undo_group_value,omitempty"`
	RewriteCommandForUndo *Reference           `protobuf:"bytes,6,opt,name=rewrite_command_for_undo,json=rewriteCommandForUndo" json:"rewrite_command_for_undo,omitempty"`
}

func (x *CommandCategoryWillChangeGroupValue) Reset() {
	*x = CommandCategoryWillChangeGroupValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandCategoryWillChangeGroupValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandCategoryWillChangeGroupValue) ProtoMessage() {}

func (x *CommandCategoryWillChangeGroupValue) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandCategoryWillChangeGroupValue.ProtoReflect.Descriptor instead.
func (*CommandCategoryWillChangeGroupValue) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{89}
}

func (x *CommandCategoryWillChangeGroupValue) GetSuper() *TableCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandCategoryWillChangeGroupValue) GetGroupNodeUid() *UUID {
	if x != nil {
		return x.GroupNodeUid
	}
	return nil
}

func (x *CommandCategoryWillChangeGroupValue) GetUndoGroupNodeUid() *UUID {
	if x != nil {
		return x.UndoGroupNodeUid
	}
	return nil
}

func (x *CommandCategoryWillChangeGroupValue) GetGroupValue() *CellValueArchive {
	if x != nil {
		return x.GroupValue
	}
	return nil
}

func (x *CommandCategoryWillChangeGroupValue) GetUndoGroupValue() *CellValueArchive {
	if x != nil {
		return x.UndoGroupValue
	}
	return nil
}

func (x *CommandCategoryWillChangeGroupValue) GetRewriteCommandForUndo() *Reference {
	if x != nil {
		return x.RewriteCommandForUndo
	}
	return nil
}

type IdempotentSelectionTransformerArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArchivedSelection *Reference `protobuf:"bytes,1,req,name=archived_selection,json=archivedSelection" json:"archived_selection,omitempty"`
}

func (x *IdempotentSelectionTransformerArchive) Reset() {
	*x = IdempotentSelectionTransformerArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdempotentSelectionTransformerArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdempotentSelectionTransformerArchive) ProtoMessage() {}

func (x *IdempotentSelectionTransformerArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdempotentSelectionTransformerArchive.ProtoReflect.Descriptor instead.
func (*IdempotentSelectionTransformerArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{90}
}

func (x *IdempotentSelectionTransformerArchive) GetArchivedSelection() *Reference {
	if x != nil {
		return x.ArchivedSelection
	}
	return nil
}

type WPSelectionTransformerArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super             *TableSubSelectionTransformerBaseArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	ArchivedSelection *Reference                               `protobuf:"bytes,2,req,name=archived_selection,json=archivedSelection" json:"archived_selection,omitempty"`
	OriginCellUid     *UUIDCoordArchive                        `protobuf:"bytes,3,opt,name=origin_cell_uid,json=originCellUid" json:"origin_cell_uid,omitempty"`
}

func (x *WPSelectionTransformerArchive) Reset() {
	*x = WPSelectionTransformerArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WPSelectionTransformerArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WPSelectionTransformerArchive) ProtoMessage() {}

func (x *WPSelectionTransformerArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WPSelectionTransformerArchive.ProtoReflect.Descriptor instead.
func (*WPSelectionTransformerArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{91}
}

func (x *WPSelectionTransformerArchive) GetSuper() *TableSubSelectionTransformerBaseArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *WPSelectionTransformerArchive) GetArchivedSelection() *Reference {
	if x != nil {
		return x.ArchivedSelection
	}
	return nil
}

func (x *WPSelectionTransformerArchive) GetOriginCellUid() *UUIDCoordArchive {
	if x != nil {
		return x.OriginCellUid
	}
	return nil
}

type TableSubSelectionTransformerBaseArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableInfoIdPath *UUIDPath `protobuf:"bytes,1,req,name=table_info_id_path,json=tableInfoIdPath" json:"table_info_id_path,omitempty"`
}

func (x *TableSubSelectionTransformerBaseArchive) Reset() {
	*x = TableSubSelectionTransformerBaseArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableSubSelectionTransformerBaseArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableSubSelectionTransformerBaseArchive) ProtoMessage() {}

func (x *TableSubSelectionTransformerBaseArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableSubSelectionTransformerBaseArchive.ProtoReflect.Descriptor instead.
func (*TableSubSelectionTransformerBaseArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{92}
}

func (x *TableSubSelectionTransformerBaseArchive) GetTableInfoIdPath() *UUIDPath {
	if x != nil {
		return x.TableInfoIdPath
	}
	return nil
}

type TableNameSelectionTransformerArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *TableSubSelectionTransformerBaseArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
}

func (x *TableNameSelectionTransformerArchive) Reset() {
	*x = TableNameSelectionTransformerArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableNameSelectionTransformerArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableNameSelectionTransformerArchive) ProtoMessage() {}

func (x *TableNameSelectionTransformerArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableNameSelectionTransformerArchive.ProtoReflect.Descriptor instead.
func (*TableNameSelectionTransformerArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{93}
}

func (x *TableNameSelectionTransformerArchive) GetSuper() *TableSubSelectionTransformerBaseArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

type ControlCellSelectionTransformerArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super         *TableSubSelectionTransformerBaseArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	CellUids      *CellUIDListArchive                      `protobuf:"bytes,2,opt,name=cell_uids,json=cellUids" json:"cell_uids,omitempty"`
	OriginCellUid *UUIDCoordArchive                        `protobuf:"bytes,3,opt,name=origin_cell_uid,json=originCellUid" json:"origin_cell_uid,omitempty"`
	OriginCellId  *CellCoordinateArchive                   `protobuf:"bytes,4,req,name=origin_cell_id,json=originCellId" json:"origin_cell_id,omitempty"`
}

func (x *ControlCellSelectionTransformerArchive) Reset() {
	*x = ControlCellSelectionTransformerArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlCellSelectionTransformerArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlCellSelectionTransformerArchive) ProtoMessage() {}

func (x *ControlCellSelectionTransformerArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlCellSelectionTransformerArchive.ProtoReflect.Descriptor instead.
func (*ControlCellSelectionTransformerArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{94}
}

func (x *ControlCellSelectionTransformerArchive) GetSuper() *TableSubSelectionTransformerBaseArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *ControlCellSelectionTransformerArchive) GetCellUids() *CellUIDListArchive {
	if x != nil {
		return x.CellUids
	}
	return nil
}

func (x *ControlCellSelectionTransformerArchive) GetOriginCellUid() *UUIDCoordArchive {
	if x != nil {
		return x.OriginCellUid
	}
	return nil
}

func (x *ControlCellSelectionTransformerArchive) GetOriginCellId() *CellCoordinateArchive {
	if x != nil {
		return x.OriginCellId
	}
	return nil
}

type StockCellSelectionTransformerArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super         *TableSubSelectionTransformerBaseArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	CellUids      *CellUIDListArchive                      `protobuf:"bytes,2,opt,name=cell_uids,json=cellUids" json:"cell_uids,omitempty"`
	OriginCellUid *UUIDCoordArchive                        `protobuf:"bytes,3,opt,name=origin_cell_uid,json=originCellUid" json:"origin_cell_uid,omitempty"`
	OriginCellId  *CellCoordinateArchive                   `protobuf:"bytes,4,req,name=origin_cell_id,json=originCellId" json:"origin_cell_id,omitempty"`
}

func (x *StockCellSelectionTransformerArchive) Reset() {
	*x = StockCellSelectionTransformerArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockCellSelectionTransformerArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockCellSelectionTransformerArchive) ProtoMessage() {}

func (x *StockCellSelectionTransformerArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockCellSelectionTransformerArchive.ProtoReflect.Descriptor instead.
func (*StockCellSelectionTransformerArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{95}
}

func (x *StockCellSelectionTransformerArchive) GetSuper() *TableSubSelectionTransformerBaseArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *StockCellSelectionTransformerArchive) GetCellUids() *CellUIDListArchive {
	if x != nil {
		return x.CellUids
	}
	return nil
}

func (x *StockCellSelectionTransformerArchive) GetOriginCellUid() *UUIDCoordArchive {
	if x != nil {
		return x.OriginCellUid
	}
	return nil
}

func (x *StockCellSelectionTransformerArchive) GetOriginCellId() *CellCoordinateArchive {
	if x != nil {
		return x.OriginCellId
	}
	return nil
}

type RegionSelectionTransformerArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super         *TableSubSelectionTransformerBaseArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	CellUids      *CellUIDListArchive                      `protobuf:"bytes,2,opt,name=cell_uids,json=cellUids" json:"cell_uids,omitempty"`
	OriginCellUid *UUIDCoordArchive                        `protobuf:"bytes,3,opt,name=origin_cell_uid,json=originCellUid" json:"origin_cell_uid,omitempty"`
	AnchorCellUid *UUIDCoordArchive                        `protobuf:"bytes,4,req,name=anchor_cell_uid,json=anchorCellUid" json:"anchor_cell_uid,omitempty"`
	CursorCellUid *UUIDCoordArchive                        `protobuf:"bytes,5,req,name=cursor_cell_uid,json=cursorCellUid" json:"cursor_cell_uid,omitempty"`
}

func (x *RegionSelectionTransformerArchive) Reset() {
	*x = RegionSelectionTransformerArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegionSelectionTransformerArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionSelectionTransformerArchive) ProtoMessage() {}

func (x *RegionSelectionTransformerArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionSelectionTransformerArchive.ProtoReflect.Descriptor instead.
func (*RegionSelectionTransformerArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{96}
}

func (x *RegionSelectionTransformerArchive) GetSuper() *TableSubSelectionTransformerBaseArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *RegionSelectionTransformerArchive) GetCellUids() *CellUIDListArchive {
	if x != nil {
		return x.CellUids
	}
	return nil
}

func (x *RegionSelectionTransformerArchive) GetOriginCellUid() *UUIDCoordArchive {
	if x != nil {
		return x.OriginCellUid
	}
	return nil
}

func (x *RegionSelectionTransformerArchive) GetAnchorCellUid() *UUIDCoordArchive {
	if x != nil {
		return x.AnchorCellUid
	}
	return nil
}

func (x *RegionSelectionTransformerArchive) GetCursorCellUid() *UUIDCoordArchive {
	if x != nil {
		return x.CursorCellUid
	}
	return nil
}

type StrokeSelectionTransformerArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super             *TableSubSelectionTransformerBaseArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	ArchivedSelection *Reference                               `protobuf:"bytes,2,req,name=archived_selection,json=archivedSelection" json:"archived_selection,omitempty"`
}

func (x *StrokeSelectionTransformerArchive) Reset() {
	*x = StrokeSelectionTransformerArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StrokeSelectionTransformerArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrokeSelectionTransformerArchive) ProtoMessage() {}

func (x *StrokeSelectionTransformerArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrokeSelectionTransformerArchive.ProtoReflect.Descriptor instead.
func (*StrokeSelectionTransformerArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{97}
}

func (x *StrokeSelectionTransformerArchive) GetSuper() *TableSubSelectionTransformerBaseArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *StrokeSelectionTransformerArchive) GetArchivedSelection() *Reference {
	if x != nil {
		return x.ArchivedSelection
	}
	return nil
}

type RowColumnSelectionTransformerArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super         *TableSubSelectionTransformerBaseArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	SelectionType *SelectionTypeArchive                    `protobuf:"varint,2,req,name=selection_type,json=selectionType,enum=TST.SelectionTypeArchive" json:"selection_type,omitempty"`
	RowColUids    []*UUID                                  `protobuf:"bytes,3,rep,name=row_col_uids,json=rowColUids" json:"row_col_uids,omitempty"`
}

func (x *RowColumnSelectionTransformerArchive) Reset() {
	*x = RowColumnSelectionTransformerArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RowColumnSelectionTransformerArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RowColumnSelectionTransformerArchive) ProtoMessage() {}

func (x *RowColumnSelectionTransformerArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RowColumnSelectionTransformerArchive.ProtoReflect.Descriptor instead.
func (*RowColumnSelectionTransformerArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{98}
}

func (x *RowColumnSelectionTransformerArchive) GetSuper() *TableSubSelectionTransformerBaseArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *RowColumnSelectionTransformerArchive) GetSelectionType() SelectionTypeArchive {
	if x != nil && x.SelectionType != nil {
		return *x.SelectionType
	}
	return SelectionTypeArchive_deprecatedCellSelectionType
}

func (x *RowColumnSelectionTransformerArchive) GetRowColUids() []*UUID {
	if x != nil {
		return x.RowColUids
	}
	return nil
}

type CommandCategoryMoveRowsArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                *TableCommandArchive    `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	ActionType           *uint32                 `protobuf:"varint,2,req,name=action_type,json=actionType" json:"action_type,omitempty"`
	CategoryRowOrder     []*UUID                 `protobuf:"bytes,3,rep,name=category_row_order,json=categoryRowOrder" json:"category_row_order,omitempty"`
	UndoCategoryRowOrder []*UUID                 `protobuf:"bytes,4,rep,name=undo_category_row_order,json=undoCategoryRowOrder" json:"undo_category_row_order,omitempty"`
	CellDiffMap          *Reference              `protobuf:"bytes,5,req,name=cell_diff_map,json=cellDiffMap" json:"cell_diff_map,omitempty"`
	UndoCellDiffMap      *Reference              `protobuf:"bytes,6,opt,name=undo_cell_diff_map,json=undoCellDiffMap" json:"undo_cell_diff_map,omitempty"`
	GroupingColumns      *GroupColumnListArchive `protobuf:"bytes,7,opt,name=grouping_columns,json=groupingColumns" json:"grouping_columns,omitempty"`
}

func (x *CommandCategoryMoveRowsArchive) Reset() {
	*x = CommandCategoryMoveRowsArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandCategoryMoveRowsArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandCategoryMoveRowsArchive) ProtoMessage() {}

func (x *CommandCategoryMoveRowsArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandCategoryMoveRowsArchive.ProtoReflect.Descriptor instead.
func (*CommandCategoryMoveRowsArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{99}
}

func (x *CommandCategoryMoveRowsArchive) GetSuper() *TableCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandCategoryMoveRowsArchive) GetActionType() uint32 {
	if x != nil && x.ActionType != nil {
		return *x.ActionType
	}
	return 0
}

func (x *CommandCategoryMoveRowsArchive) GetCategoryRowOrder() []*UUID {
	if x != nil {
		return x.CategoryRowOrder
	}
	return nil
}

func (x *CommandCategoryMoveRowsArchive) GetUndoCategoryRowOrder() []*UUID {
	if x != nil {
		return x.UndoCategoryRowOrder
	}
	return nil
}

func (x *CommandCategoryMoveRowsArchive) GetCellDiffMap() *Reference {
	if x != nil {
		return x.CellDiffMap
	}
	return nil
}

func (x *CommandCategoryMoveRowsArchive) GetUndoCellDiffMap() *Reference {
	if x != nil {
		return x.UndoCellDiffMap
	}
	return nil
}

func (x *CommandCategoryMoveRowsArchive) GetGroupingColumns() *GroupColumnListArchive {
	if x != nil {
		return x.GroupingColumns
	}
	return nil
}

type CommandRewriteHiddenStatesForGroupByChangeArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super          *TableCommandArchive        `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	GroupByChange  *GroupByChangeArchive       `protobuf:"bytes,2,req,name=group_by_change,json=groupByChange" json:"group_by_change,omitempty"`
	CollapsedState *ExpandCollapseStateArchive `protobuf:"bytes,3,opt,name=collapsed_state,json=collapsedState" json:"collapsed_state,omitempty"`
}

func (x *CommandRewriteHiddenStatesForGroupByChangeArchive) Reset() {
	*x = CommandRewriteHiddenStatesForGroupByChangeArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandRewriteHiddenStatesForGroupByChangeArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandRewriteHiddenStatesForGroupByChangeArchive) ProtoMessage() {}

func (x *CommandRewriteHiddenStatesForGroupByChangeArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandRewriteHiddenStatesForGroupByChangeArchive.ProtoReflect.Descriptor instead.
func (*CommandRewriteHiddenStatesForGroupByChangeArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{100}
}

func (x *CommandRewriteHiddenStatesForGroupByChangeArchive) GetSuper() *TableCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandRewriteHiddenStatesForGroupByChangeArchive) GetGroupByChange() *GroupByChangeArchive {
	if x != nil {
		return x.GroupByChange
	}
	return nil
}

func (x *CommandRewriteHiddenStatesForGroupByChangeArchive) GetCollapsedState() *ExpandCollapseStateArchive {
	if x != nil {
		return x.CollapsedState
	}
	return nil
}

type CommandRewritePencilAnnotationFormulasArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super              *TableCommandArchive                                            `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	RewriteSpec        *FormulaRewriteSpecArchive                                      `protobuf:"bytes,2,req,name=rewrite_spec,json=rewriteSpec" json:"rewrite_spec,omitempty"`
	FormulasToRewrite  *FormulasForUndoArchive                                         `protobuf:"bytes,3,req,name=formulas_to_rewrite,json=formulasToRewrite" json:"formulas_to_rewrite,omitempty"`
	AnnotationsForUndo []*CommandRewritePencilAnnotationFormulasArchive_AnnotationPair `protobuf:"bytes,4,rep,name=annotations_for_undo,json=annotationsForUndo" json:"annotations_for_undo,omitempty"`
}

func (x *CommandRewritePencilAnnotationFormulasArchive) Reset() {
	*x = CommandRewritePencilAnnotationFormulasArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandRewritePencilAnnotationFormulasArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandRewritePencilAnnotationFormulasArchive) ProtoMessage() {}

func (x *CommandRewritePencilAnnotationFormulasArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandRewritePencilAnnotationFormulasArchive.ProtoReflect.Descriptor instead.
func (*CommandRewritePencilAnnotationFormulasArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{101}
}

func (x *CommandRewritePencilAnnotationFormulasArchive) GetSuper() *TableCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandRewritePencilAnnotationFormulasArchive) GetRewriteSpec() *FormulaRewriteSpecArchive {
	if x != nil {
		return x.RewriteSpec
	}
	return nil
}

func (x *CommandRewritePencilAnnotationFormulasArchive) GetFormulasToRewrite() *FormulasForUndoArchive {
	if x != nil {
		return x.FormulasToRewrite
	}
	return nil
}

func (x *CommandRewritePencilAnnotationFormulasArchive) GetAnnotationsForUndo() []*CommandRewritePencilAnnotationFormulasArchive_AnnotationPair {
	if x != nil {
		return x.AnnotationsForUndo
	}
	return nil
}

type CommandPivotSetPivotRulesArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                          *TableCommandArchive            `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	NewTargetPivotRefreshUid       *UUID                           `protobuf:"bytes,2,opt,name=new_target_pivot_refresh_uid,json=newTargetPivotRefreshUid" json:"new_target_pivot_refresh_uid,omitempty"`
	NewRowGroupings                *GroupColumnListArchive         `protobuf:"bytes,3,opt,name=new_row_groupings,json=newRowGroupings" json:"new_row_groupings,omitempty"`
	OldRowGroupings                *GroupColumnListArchive         `protobuf:"bytes,4,opt,name=old_row_groupings,json=oldRowGroupings" json:"old_row_groupings,omitempty"`
	NewColumnGroupings             *GroupColumnListArchive         `protobuf:"bytes,5,opt,name=new_column_groupings,json=newColumnGroupings" json:"new_column_groupings,omitempty"`
	OldColumnGroupings             *GroupColumnListArchive         `protobuf:"bytes,6,opt,name=old_column_groupings,json=oldColumnGroupings" json:"old_column_groupings,omitempty"`
	NewAggregates                  *ColumnAggregateListArchive     `protobuf:"bytes,7,opt,name=new_aggregates,json=newAggregates" json:"new_aggregates,omitempty"`
	OldAggregates                  *ColumnAggregateListArchive     `protobuf:"bytes,8,opt,name=old_aggregates,json=oldAggregates" json:"old_aggregates,omitempty"`
	NewFlatteningDimension         *TableDimensionArchive          `protobuf:"varint,9,opt,name=new_flattening_dimension,json=newFlatteningDimension,enum=TST.TableDimensionArchive" json:"new_flattening_dimension,omitempty"`
	OldFlatteningDimension         *TableDimensionArchive          `protobuf:"varint,10,opt,name=old_flattening_dimension,json=oldFlatteningDimension,enum=TST.TableDimensionArchive" json:"old_flattening_dimension,omitempty"`
	NewPivotDataModel              *Reference                      `protobuf:"bytes,11,opt,name=new_pivot_data_model,json=newPivotDataModel" json:"new_pivot_data_model,omitempty"`
	OldPivotDataModel              *Reference                      `protobuf:"bytes,12,opt,name=old_pivot_data_model,json=oldPivotDataModel" json:"old_pivot_data_model,omitempty"`
	NewPivotRefreshUid             *UUID                           `protobuf:"bytes,13,opt,name=new_pivot_refresh_uid,json=newPivotRefreshUid" json:"new_pivot_refresh_uid,omitempty"`
	OldPivotRefreshUid             *UUID                           `protobuf:"bytes,14,opt,name=old_pivot_refresh_uid,json=oldPivotRefreshUid" json:"old_pivot_refresh_uid,omitempty"`
	NewPivotRefreshTimestamp       *float64                        `protobuf:"fixed64,15,opt,name=new_pivot_refresh_timestamp,json=newPivotRefreshTimestamp" json:"new_pivot_refresh_timestamp,omitempty"`
	OldPivotRefreshTimestamp       *float64                        `protobuf:"fixed64,16,opt,name=old_pivot_refresh_timestamp,json=oldPivotRefreshTimestamp" json:"old_pivot_refresh_timestamp,omitempty"`
	NewOptionsMap                  *Reference                      `protobuf:"bytes,17,opt,name=new_options_map,json=newOptionsMap" json:"new_options_map,omitempty"`
	OldOptionsMap                  *Reference                      `protobuf:"bytes,18,opt,name=old_options_map,json=oldOptionsMap" json:"old_options_map,omitempty"`
	NewViewRowOrder                []*UUID                         `protobuf:"bytes,19,rep,name=new_view_row_order,json=newViewRowOrder" json:"new_view_row_order,omitempty"`
	OldViewRowOrder                []*UUID                         `protobuf:"bytes,20,rep,name=old_view_row_order,json=oldViewRowOrder" json:"old_view_row_order,omitempty"`
	NewViewColumnOrder             []*UUID                         `protobuf:"bytes,21,rep,name=new_view_column_order,json=newViewColumnOrder" json:"new_view_column_order,omitempty"`
	OldViewColumnOrder             []*UUID                         `protobuf:"bytes,22,rep,name=old_view_column_order,json=oldViewColumnOrder" json:"old_view_column_order,omitempty"`
	NewCollapsedRowGroups          []*UUID                         `protobuf:"bytes,23,rep,name=new_collapsed_row_groups,json=newCollapsedRowGroups" json:"new_collapsed_row_groups,omitempty"`
	OldCollapsedRowGroups          []*UUID                         `protobuf:"bytes,24,rep,name=old_collapsed_row_groups,json=oldCollapsedRowGroups" json:"old_collapsed_row_groups,omitempty"`
	NewCollapsedColumnGroups       []*UUID                         `protobuf:"bytes,25,rep,name=new_collapsed_column_groups,json=newCollapsedColumnGroups" json:"new_collapsed_column_groups,omitempty"`
	OldCollapsedColumnGroups       []*UUID                         `protobuf:"bytes,26,rep,name=old_collapsed_column_groups,json=oldCollapsedColumnGroups" json:"old_collapsed_column_groups,omitempty"`
	NewHierarchicalCellDiffMap     *HierarchicalCellDiffMapArchive `protobuf:"bytes,27,opt,name=new_hierarchical_cell_diff_map,json=newHierarchicalCellDiffMap" json:"new_hierarchical_cell_diff_map,omitempty"`
	OldHierarchicalCellDiffMap     *HierarchicalCellDiffMapArchive `protobuf:"bytes,28,opt,name=old_hierarchical_cell_diff_map,json=oldHierarchicalCellDiffMap" json:"old_hierarchical_cell_diff_map,omitempty"`
	FormulaRewriteCommandForUndo   *Reference                      `protobuf:"bytes,29,opt,name=formula_rewrite_command_for_undo,json=formulaRewriteCommandForUndo" json:"formula_rewrite_command_for_undo,omitempty"`
	NewBodyUidTract                *UUIDRectArchive                `protobuf:"bytes,30,opt,name=new_body_uid_tract,json=newBodyUidTract" json:"new_body_uid_tract,omitempty"`
	OldBodyUidTract                *UUIDRectArchive                `protobuf:"bytes,31,opt,name=old_body_uid_tract,json=oldBodyUidTract" json:"old_body_uid_tract,omitempty"`
	OldTargetPivotRefreshUid       *UUID                           `protobuf:"bytes,32,opt,name=old_target_pivot_refresh_uid,json=oldTargetPivotRefreshUid" json:"old_target_pivot_refresh_uid,omitempty"`
	NewPivotRowColumnRuleChangeUid *UUID                           `protobuf:"bytes,33,opt,name=new_pivot_row_column_rule_change_uid,json=newPivotRowColumnRuleChangeUid" json:"new_pivot_row_column_rule_change_uid,omitempty"`
	OldPivotRowColumnRuleChangeUid *UUID                           `protobuf:"bytes,34,opt,name=old_pivot_row_column_rule_change_uid,json=oldPivotRowColumnRuleChangeUid" json:"old_pivot_row_column_rule_change_uid,omitempty"`
	NewPivotAggregateRuleChangeUid *UUID                           `protobuf:"bytes,35,opt,name=new_pivot_aggregate_rule_change_uid,json=newPivotAggregateRuleChangeUid" json:"new_pivot_aggregate_rule_change_uid,omitempty"`
	OldPivotAggregateRuleChangeUid *UUID                           `protobuf:"bytes,36,opt,name=old_pivot_aggregate_rule_change_uid,json=oldPivotAggregateRuleChangeUid" json:"old_pivot_aggregate_rule_change_uid,omitempty"`
	IsOrderFinalized               *bool                           `protobuf:"varint,37,opt,name=is_order_finalized,json=isOrderFinalized" json:"is_order_finalized,omitempty"`
	UndoFilterEnabled              *bool                           `protobuf:"varint,38,opt,name=undo_filter_enabled,json=undoFilterEnabled" json:"undo_filter_enabled,omitempty"`
}

func (x *CommandPivotSetPivotRulesArchive) Reset() {
	*x = CommandPivotSetPivotRulesArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandPivotSetPivotRulesArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandPivotSetPivotRulesArchive) ProtoMessage() {}

func (x *CommandPivotSetPivotRulesArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandPivotSetPivotRulesArchive.ProtoReflect.Descriptor instead.
func (*CommandPivotSetPivotRulesArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{102}
}

func (x *CommandPivotSetPivotRulesArchive) GetSuper() *TableCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandPivotSetPivotRulesArchive) GetNewTargetPivotRefreshUid() *UUID {
	if x != nil {
		return x.NewTargetPivotRefreshUid
	}
	return nil
}

func (x *CommandPivotSetPivotRulesArchive) GetNewRowGroupings() *GroupColumnListArchive {
	if x != nil {
		return x.NewRowGroupings
	}
	return nil
}

func (x *CommandPivotSetPivotRulesArchive) GetOldRowGroupings() *GroupColumnListArchive {
	if x != nil {
		return x.OldRowGroupings
	}
	return nil
}

func (x *CommandPivotSetPivotRulesArchive) GetNewColumnGroupings() *GroupColumnListArchive {
	if x != nil {
		return x.NewColumnGroupings
	}
	return nil
}

func (x *CommandPivotSetPivotRulesArchive) GetOldColumnGroupings() *GroupColumnListArchive {
	if x != nil {
		return x.OldColumnGroupings
	}
	return nil
}

func (x *CommandPivotSetPivotRulesArchive) GetNewAggregates() *ColumnAggregateListArchive {
	if x != nil {
		return x.NewAggregates
	}
	return nil
}

func (x *CommandPivotSetPivotRulesArchive) GetOldAggregates() *ColumnAggregateListArchive {
	if x != nil {
		return x.OldAggregates
	}
	return nil
}

func (x *CommandPivotSetPivotRulesArchive) GetNewFlatteningDimension() TableDimensionArchive {
	if x != nil && x.NewFlatteningDimension != nil {
		return *x.NewFlatteningDimension
	}
	return TableDimensionArchive_dimensionNeither
}

func (x *CommandPivotSetPivotRulesArchive) GetOldFlatteningDimension() TableDimensionArchive {
	if x != nil && x.OldFlatteningDimension != nil {
		return *x.OldFlatteningDimension
	}
	return TableDimensionArchive_dimensionNeither
}

func (x *CommandPivotSetPivotRulesArchive) GetNewPivotDataModel() *Reference {
	if x != nil {
		return x.NewPivotDataModel
	}
	return nil
}

func (x *CommandPivotSetPivotRulesArchive) GetOldPivotDataModel() *Reference {
	if x != nil {
		return x.OldPivotDataModel
	}
	return nil
}

func (x *CommandPivotSetPivotRulesArchive) GetNewPivotRefreshUid() *UUID {
	if x != nil {
		return x.NewPivotRefreshUid
	}
	return nil
}

func (x *CommandPivotSetPivotRulesArchive) GetOldPivotRefreshUid() *UUID {
	if x != nil {
		return x.OldPivotRefreshUid
	}
	return nil
}

func (x *CommandPivotSetPivotRulesArchive) GetNewPivotRefreshTimestamp() float64 {
	if x != nil && x.NewPivotRefreshTimestamp != nil {
		return *x.NewPivotRefreshTimestamp
	}
	return 0
}

func (x *CommandPivotSetPivotRulesArchive) GetOldPivotRefreshTimestamp() float64 {
	if x != nil && x.OldPivotRefreshTimestamp != nil {
		return *x.OldPivotRefreshTimestamp
	}
	return 0
}

func (x *CommandPivotSetPivotRulesArchive) GetNewOptionsMap() *Reference {
	if x != nil {
		return x.NewOptionsMap
	}
	return nil
}

func (x *CommandPivotSetPivotRulesArchive) GetOldOptionsMap() *Reference {
	if x != nil {
		return x.OldOptionsMap
	}
	return nil
}

func (x *CommandPivotSetPivotRulesArchive) GetNewViewRowOrder() []*UUID {
	if x != nil {
		return x.NewViewRowOrder
	}
	return nil
}

func (x *CommandPivotSetPivotRulesArchive) GetOldViewRowOrder() []*UUID {
	if x != nil {
		return x.OldViewRowOrder
	}
	return nil
}

func (x *CommandPivotSetPivotRulesArchive) GetNewViewColumnOrder() []*UUID {
	if x != nil {
		return x.NewViewColumnOrder
	}
	return nil
}

func (x *CommandPivotSetPivotRulesArchive) GetOldViewColumnOrder() []*UUID {
	if x != nil {
		return x.OldViewColumnOrder
	}
	return nil
}

func (x *CommandPivotSetPivotRulesArchive) GetNewCollapsedRowGroups() []*UUID {
	if x != nil {
		return x.NewCollapsedRowGroups
	}
	return nil
}

func (x *CommandPivotSetPivotRulesArchive) GetOldCollapsedRowGroups() []*UUID {
	if x != nil {
		return x.OldCollapsedRowGroups
	}
	return nil
}

func (x *CommandPivotSetPivotRulesArchive) GetNewCollapsedColumnGroups() []*UUID {
	if x != nil {
		return x.NewCollapsedColumnGroups
	}
	return nil
}

func (x *CommandPivotSetPivotRulesArchive) GetOldCollapsedColumnGroups() []*UUID {
	if x != nil {
		return x.OldCollapsedColumnGroups
	}
	return nil
}

func (x *CommandPivotSetPivotRulesArchive) GetNewHierarchicalCellDiffMap() *HierarchicalCellDiffMapArchive {
	if x != nil {
		return x.NewHierarchicalCellDiffMap
	}
	return nil
}

func (x *CommandPivotSetPivotRulesArchive) GetOldHierarchicalCellDiffMap() *HierarchicalCellDiffMapArchive {
	if x != nil {
		return x.OldHierarchicalCellDiffMap
	}
	return nil
}

func (x *CommandPivotSetPivotRulesArchive) GetFormulaRewriteCommandForUndo() *Reference {
	if x != nil {
		return x.FormulaRewriteCommandForUndo
	}
	return nil
}

func (x *CommandPivotSetPivotRulesArchive) GetNewBodyUidTract() *UUIDRectArchive {
	if x != nil {
		return x.NewBodyUidTract
	}
	return nil
}

func (x *CommandPivotSetPivotRulesArchive) GetOldBodyUidTract() *UUIDRectArchive {
	if x != nil {
		return x.OldBodyUidTract
	}
	return nil
}

func (x *CommandPivotSetPivotRulesArchive) GetOldTargetPivotRefreshUid() *UUID {
	if x != nil {
		return x.OldTargetPivotRefreshUid
	}
	return nil
}

func (x *CommandPivotSetPivotRulesArchive) GetNewPivotRowColumnRuleChangeUid() *UUID {
	if x != nil {
		return x.NewPivotRowColumnRuleChangeUid
	}
	return nil
}

func (x *CommandPivotSetPivotRulesArchive) GetOldPivotRowColumnRuleChangeUid() *UUID {
	if x != nil {
		return x.OldPivotRowColumnRuleChangeUid
	}
	return nil
}

func (x *CommandPivotSetPivotRulesArchive) GetNewPivotAggregateRuleChangeUid() *UUID {
	if x != nil {
		return x.NewPivotAggregateRuleChangeUid
	}
	return nil
}

func (x *CommandPivotSetPivotRulesArchive) GetOldPivotAggregateRuleChangeUid() *UUID {
	if x != nil {
		return x.OldPivotAggregateRuleChangeUid
	}
	return nil
}

func (x *CommandPivotSetPivotRulesArchive) GetIsOrderFinalized() bool {
	if x != nil && x.IsOrderFinalized != nil {
		return *x.IsOrderFinalized
	}
	return false
}

func (x *CommandPivotSetPivotRulesArchive) GetUndoFilterEnabled() bool {
	if x != nil && x.UndoFilterEnabled != nil {
		return *x.UndoFilterEnabled
	}
	return false
}

type CommandPivotSetGroupingColumnOptionsArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super             *TableCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	GroupingColumnUid *UUID                `protobuf:"bytes,2,opt,name=grouping_column_uid,json=groupingColumnUid" json:"grouping_column_uid,omitempty"`
	NonSortingFlag    *uint32              `protobuf:"varint,3,opt,name=non_sorting_flag,json=nonSortingFlag" json:"non_sorting_flag,omitempty"`
	BoolValue         *bool                `protobuf:"varint,4,opt,name=bool_value,json=boolValue" json:"bool_value,omitempty"`
	UndoBoolValue     *bool                `protobuf:"varint,5,opt,name=undo_bool_value,json=undoBoolValue" json:"undo_bool_value,omitempty"`
}

func (x *CommandPivotSetGroupingColumnOptionsArchive) Reset() {
	*x = CommandPivotSetGroupingColumnOptionsArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandPivotSetGroupingColumnOptionsArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandPivotSetGroupingColumnOptionsArchive) ProtoMessage() {}

func (x *CommandPivotSetGroupingColumnOptionsArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandPivotSetGroupingColumnOptionsArchive.ProtoReflect.Descriptor instead.
func (*CommandPivotSetGroupingColumnOptionsArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{103}
}

func (x *CommandPivotSetGroupingColumnOptionsArchive) GetSuper() *TableCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandPivotSetGroupingColumnOptionsArchive) GetGroupingColumnUid() *UUID {
	if x != nil {
		return x.GroupingColumnUid
	}
	return nil
}

func (x *CommandPivotSetGroupingColumnOptionsArchive) GetNonSortingFlag() uint32 {
	if x != nil && x.NonSortingFlag != nil {
		return *x.NonSortingFlag
	}
	return 0
}

func (x *CommandPivotSetGroupingColumnOptionsArchive) GetBoolValue() bool {
	if x != nil && x.BoolValue != nil {
		return *x.BoolValue
	}
	return false
}

func (x *CommandPivotSetGroupingColumnOptionsArchive) GetUndoBoolValue() bool {
	if x != nil && x.UndoBoolValue != nil {
		return *x.UndoBoolValue
	}
	return false
}

type CommandPivotHideShowGrandTotalsArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super        *TableCommandArchive   `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Dimension    *TableDimensionArchive `protobuf:"varint,2,opt,name=dimension,enum=TST.TableDimensionArchive" json:"dimension,omitempty"`
	IsHiding     *bool                  `protobuf:"varint,3,opt,name=is_hiding,json=isHiding" json:"is_hiding,omitempty"`
	UndoIsHiding *bool                  `protobuf:"varint,4,opt,name=undo_is_hiding,json=undoIsHiding" json:"undo_is_hiding,omitempty"`
}

func (x *CommandPivotHideShowGrandTotalsArchive) Reset() {
	*x = CommandPivotHideShowGrandTotalsArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandPivotHideShowGrandTotalsArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandPivotHideShowGrandTotalsArchive) ProtoMessage() {}

func (x *CommandPivotHideShowGrandTotalsArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandPivotHideShowGrandTotalsArchive.ProtoReflect.Descriptor instead.
func (*CommandPivotHideShowGrandTotalsArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{104}
}

func (x *CommandPivotHideShowGrandTotalsArchive) GetSuper() *TableCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandPivotHideShowGrandTotalsArchive) GetDimension() TableDimensionArchive {
	if x != nil && x.Dimension != nil {
		return *x.Dimension
	}
	return TableDimensionArchive_dimensionNeither
}

func (x *CommandPivotHideShowGrandTotalsArchive) GetIsHiding() bool {
	if x != nil && x.IsHiding != nil {
		return *x.IsHiding
	}
	return false
}

func (x *CommandPivotHideShowGrandTotalsArchive) GetUndoIsHiding() bool {
	if x != nil && x.UndoIsHiding != nil {
		return *x.UndoIsHiding
	}
	return false
}

type CommandPivotSortArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                             *TableCommandArchive   `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Dimension                         *TableDimensionArchive `protobuf:"varint,2,opt,name=dimension,enum=TST.TableDimensionArchive" json:"dimension,omitempty"`
	ColumnOrder                       []*UUID                `protobuf:"bytes,3,rep,name=column_order,json=columnOrder" json:"column_order,omitempty"`
	UndoColumnOrder                   []*UUID                `protobuf:"bytes,4,rep,name=undo_column_order,json=undoColumnOrder" json:"undo_column_order,omitempty"`
	RowOrder                          []*UUID                `protobuf:"bytes,5,rep,name=row_order,json=rowOrder" json:"row_order,omitempty"`
	UndoRowOrder                      []*UUID                `protobuf:"bytes,6,rep,name=undo_row_order,json=undoRowOrder" json:"undo_row_order,omitempty"`
	TargetPivotRowColumnRuleChangeUid *UUID                  `protobuf:"bytes,7,req,name=target_pivot_row_column_rule_change_uid,json=targetPivotRowColumnRuleChangeUid" json:"target_pivot_row_column_rule_change_uid,omitempty"`
	TargetPivotAggregateRuleChangeUid *UUID                  `protobuf:"bytes,8,req,name=target_pivot_aggregate_rule_change_uid,json=targetPivotAggregateRuleChangeUid" json:"target_pivot_aggregate_rule_change_uid,omitempty"`
	TargetPivotDataRefreshUid         *UUID                  `protobuf:"bytes,9,req,name=target_pivot_data_refresh_uid,json=targetPivotDataRefreshUid" json:"target_pivot_data_refresh_uid,omitempty"`
	GroupingColumnUid                 *UUID                  `protobuf:"bytes,10,opt,name=grouping_column_uid,json=groupingColumnUid" json:"grouping_column_uid,omitempty"`
	SortingFlags                      *uint32                `protobuf:"varint,11,opt,name=sorting_flags,json=sortingFlags" json:"sorting_flags,omitempty"`
	UndoSortingFlags                  *uint32                `protobuf:"varint,12,opt,name=undo_sorting_flags,json=undoSortingFlags" json:"undo_sorting_flags,omitempty"`
	SortingAggregateRuleUid           *UUID                  `protobuf:"bytes,13,opt,name=sorting_aggregate_rule_uid,json=sortingAggregateRuleUid" json:"sorting_aggregate_rule_uid,omitempty"`
	UndoSortingAggregateRuleUid       *UUID                  `protobuf:"bytes,14,opt,name=undo_sorting_aggregate_rule_uid,json=undoSortingAggregateRuleUid" json:"undo_sorting_aggregate_rule_uid,omitempty"`
	IsOrderFinalized                  *bool                  `protobuf:"varint,15,req,name=is_order_finalized,json=isOrderFinalized" json:"is_order_finalized,omitempty"`
}

func (x *CommandPivotSortArchive) Reset() {
	*x = CommandPivotSortArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandPivotSortArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandPivotSortArchive) ProtoMessage() {}

func (x *CommandPivotSortArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandPivotSortArchive.ProtoReflect.Descriptor instead.
func (*CommandPivotSortArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{105}
}

func (x *CommandPivotSortArchive) GetSuper() *TableCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandPivotSortArchive) GetDimension() TableDimensionArchive {
	if x != nil && x.Dimension != nil {
		return *x.Dimension
	}
	return TableDimensionArchive_dimensionNeither
}

func (x *CommandPivotSortArchive) GetColumnOrder() []*UUID {
	if x != nil {
		return x.ColumnOrder
	}
	return nil
}

func (x *CommandPivotSortArchive) GetUndoColumnOrder() []*UUID {
	if x != nil {
		return x.UndoColumnOrder
	}
	return nil
}

func (x *CommandPivotSortArchive) GetRowOrder() []*UUID {
	if x != nil {
		return x.RowOrder
	}
	return nil
}

func (x *CommandPivotSortArchive) GetUndoRowOrder() []*UUID {
	if x != nil {
		return x.UndoRowOrder
	}
	return nil
}

func (x *CommandPivotSortArchive) GetTargetPivotRowColumnRuleChangeUid() *UUID {
	if x != nil {
		return x.TargetPivotRowColumnRuleChangeUid
	}
	return nil
}

func (x *CommandPivotSortArchive) GetTargetPivotAggregateRuleChangeUid() *UUID {
	if x != nil {
		return x.TargetPivotAggregateRuleChangeUid
	}
	return nil
}

func (x *CommandPivotSortArchive) GetTargetPivotDataRefreshUid() *UUID {
	if x != nil {
		return x.TargetPivotDataRefreshUid
	}
	return nil
}

func (x *CommandPivotSortArchive) GetGroupingColumnUid() *UUID {
	if x != nil {
		return x.GroupingColumnUid
	}
	return nil
}

func (x *CommandPivotSortArchive) GetSortingFlags() uint32 {
	if x != nil && x.SortingFlags != nil {
		return *x.SortingFlags
	}
	return 0
}

func (x *CommandPivotSortArchive) GetUndoSortingFlags() uint32 {
	if x != nil && x.UndoSortingFlags != nil {
		return *x.UndoSortingFlags
	}
	return 0
}

func (x *CommandPivotSortArchive) GetSortingAggregateRuleUid() *UUID {
	if x != nil {
		return x.SortingAggregateRuleUid
	}
	return nil
}

func (x *CommandPivotSortArchive) GetUndoSortingAggregateRuleUid() *UUID {
	if x != nil {
		return x.UndoSortingAggregateRuleUid
	}
	return nil
}

func (x *CommandPivotSortArchive) GetIsOrderFinalized() bool {
	if x != nil && x.IsOrderFinalized != nil {
		return *x.IsOrderFinalized
	}
	return false
}

type CommandRewriteTrackedReferencesArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super       *CommandArchive            `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	RewriteSpec *FormulaRewriteSpecArchive `protobuf:"bytes,2,opt,name=rewrite_spec,json=rewriteSpec" json:"rewrite_spec,omitempty"`
}

func (x *CommandRewriteTrackedReferencesArchive) Reset() {
	*x = CommandRewriteTrackedReferencesArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandRewriteTrackedReferencesArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandRewriteTrackedReferencesArchive) ProtoMessage() {}

func (x *CommandRewriteTrackedReferencesArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandRewriteTrackedReferencesArchive.ProtoReflect.Descriptor instead.
func (*CommandRewriteTrackedReferencesArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{106}
}

func (x *CommandRewriteTrackedReferencesArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandRewriteTrackedReferencesArchive) GetRewriteSpec() *FormulaRewriteSpecArchive {
	if x != nil {
		return x.RewriteSpec
	}
	return nil
}

type CommandExtendTableIDHistoryArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                   *CommandArchive             `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	RewriteSpec             *FormulaRewriteSpecArchive  `protobuf:"bytes,2,req,name=rewrite_spec,json=rewriteSpec" json:"rewrite_spec,omitempty"`
	TableUidHistoryRollback *RewriteTableUIDInfoArchive `protobuf:"bytes,3,opt,name=table_uid_history_rollback,json=tableUidHistoryRollback" json:"table_uid_history_rollback,omitempty"`
}

func (x *CommandExtendTableIDHistoryArchive) Reset() {
	*x = CommandExtendTableIDHistoryArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandExtendTableIDHistoryArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandExtendTableIDHistoryArchive) ProtoMessage() {}

func (x *CommandExtendTableIDHistoryArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandExtendTableIDHistoryArchive.ProtoReflect.Descriptor instead.
func (*CommandExtendTableIDHistoryArchive) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{107}
}

func (x *CommandExtendTableIDHistoryArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *CommandExtendTableIDHistoryArchive) GetRewriteSpec() *FormulaRewriteSpecArchive {
	if x != nil {
		return x.RewriteSpec
	}
	return nil
}

func (x *CommandExtendTableIDHistoryArchive) GetTableUidHistoryRollback() *RewriteTableUIDInfoArchive {
	if x != nil {
		return x.TableUidHistoryRollback
	}
	return nil
}

type CommandRewritePencilAnnotationFormulasArchive_AnnotationPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index      *uint64    `protobuf:"varint,1,req,name=index" json:"index,omitempty"`
	Annotation *Reference `protobuf:"bytes,2,req,name=annotation" json:"annotation,omitempty"`
}

func (x *CommandRewritePencilAnnotationFormulasArchive_AnnotationPair) Reset() {
	*x = CommandRewritePencilAnnotationFormulasArchive_AnnotationPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSTCommandArchives_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandRewritePencilAnnotationFormulasArchive_AnnotationPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandRewritePencilAnnotationFormulasArchive_AnnotationPair) ProtoMessage() {}

func (x *CommandRewritePencilAnnotationFormulasArchive_AnnotationPair) ProtoReflect() protoreflect.Message {
	mi := &file_TSTCommandArchives_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandRewritePencilAnnotationFormulasArchive_AnnotationPair.ProtoReflect.Descriptor instead.
func (*CommandRewritePencilAnnotationFormulasArchive_AnnotationPair) Descriptor() ([]byte, []int) {
	return file_TSTCommandArchives_proto_rawDescGZIP(), []int{101, 0}
}

func (x *CommandRewritePencilAnnotationFormulasArchive_AnnotationPair) GetIndex() uint64 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *CommandRewritePencilAnnotationFormulasArchive_AnnotationPair) GetAnnotation() *Reference {
	if x != nil {
		return x.Annotation
	}
	return nil
}

var File_TSTCommandArchives_proto protoreflect.FileDescriptor

var file_TSTCommandArchives_proto_rawDesc = []byte{
	0x0a, 0x18, 0x54, 0x53, 0x54, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x54, 0x53, 0x54, 0x1a,
	0x11, 0x54, 0x53, 0x50, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x18, 0x54, 0x53, 0x44, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x54, 0x53,
	0x4b, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x12, 0x54, 0x53, 0x43, 0x45, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x54, 0x53, 0x57, 0x50, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x54, 0x53, 0x54, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x54, 0x53, 0x54, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x5f, 0x73, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xc7, 0x03, 0x0a, 0x13, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x12, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x5f, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x50, 0x61, 0x74, 0x68, 0x52,
	0x0f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x64, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x51, 0x0a, 0x1d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x65,
	0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x1a, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x73, 0x65,
	0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x61, 0x6e,
	0x64, 0x6f, 0x6d, 0x53, 0x65, 0x65, 0x64, 0x4c, 0x6f, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x61, 0x6e,
	0x64, 0x6f, 0x6d, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x5f, 0x68, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53, 0x65, 0x65, 0x64, 0x48, 0x69, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6f, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x6c, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6f, 0x6c,
	0x64, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53, 0x65, 0x65, 0x64, 0x22, 0xa8, 0x02, 0x0a, 0x1f,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x65, 0x6c, 0x6c,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12,
	0x2e, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12,
	0x32, 0x0a, 0x0d, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x63, 0x65, 0x6c, 0x6c, 0x44, 0x69, 0x66, 0x66,
	0x4d, 0x61, 0x70, 0x12, 0x43, 0x0a, 0x16, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f,
	0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x13, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x65, 0x6c,
	0x6c, 0x44, 0x69, 0x66, 0x66, 0x4d, 0x61, 0x70, 0x12, 0x37, 0x0a, 0x12, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52,
	0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4b, 0x65, 0x79,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0xc1, 0x02, 0x0a, 0x1e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x65, 0x6c, 0x6c, 0x44, 0x69, 0x66, 0x66, 0x4d,
	0x61, 0x70, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x0d, 0x63, 0x65, 0x6c,
	0x6c, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x0b, 0x63, 0x65, 0x6c, 0x6c, 0x44, 0x69, 0x66, 0x66, 0x4d, 0x61, 0x70, 0x12, 0x3f, 0x0a,
	0x1c, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x65,
	0x72, 0x67, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x08, 0x52, 0x19, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x4d, 0x65, 0x72, 0x67, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x41,
	0x0a, 0x15, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x64,
	0x69, 0x66, 0x66, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x12, 0x69,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x44, 0x69, 0x66, 0x66, 0x4d, 0x61,
	0x70, 0x12, 0x37, 0x0a, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x22, 0xe9, 0x03, 0x0a, 0x1a, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x65, 0x6c, 0x6c, 0x4d,
	0x61, 0x70, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x0d, 0x72, 0x65, 0x64,
	0x6f, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x0b, 0x72, 0x65, 0x64, 0x6f, 0x43, 0x65, 0x6c, 0x6c, 0x4d, 0x61, 0x70, 0x12, 0x32, 0x0a,
	0x0d, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x75, 0x6e, 0x64, 0x6f, 0x43, 0x65, 0x6c, 0x6c, 0x4d, 0x61,
	0x70, 0x12, 0x4f, 0x0a, 0x1c, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c,
	0x61, 0x5f, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x19, 0x75, 0x6e, 0x64, 0x6f, 0x46, 0x6f, 0x72,
	0x6d, 0x75, 0x6c, 0x61, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x12, 0x37, 0x0a, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x6d,
	0x65, 0x72, 0x67, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x17, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x70, 0x61, 0x73, 0x74, 0x65, 0x18, 0x07, 0x20, 0x02, 0x28, 0x08, 0x52,
	0x0b, 0x69, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x61, 0x73, 0x74, 0x65, 0x12, 0x48, 0x0a, 0x18,
	0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x5f, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x16,
	0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x22, 0x9d, 0x04, 0x0a, 0x24, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x43, 0x65, 0x6c, 0x6c, 0x4d, 0x61, 0x70, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12,
	0x2e, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12,
	0x47, 0x0a, 0x18, 0x72, 0x65, 0x64, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x15, 0x72, 0x65, 0x64, 0x6f, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x43, 0x65, 0x6c, 0x6c, 0x4d, 0x61, 0x70, 0x12, 0x47, 0x0a, 0x18, 0x75, 0x6e, 0x64, 0x6f,
	0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x65, 0x6c, 0x6c,
	0x5f, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x15, 0x75, 0x6e, 0x64, 0x6f,
	0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x4d, 0x61,
	0x70, 0x12, 0x4f, 0x0a, 0x1c, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c,
	0x61, 0x5f, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x19, 0x75, 0x6e, 0x64, 0x6f, 0x46, 0x6f, 0x72,
	0x6d, 0x75, 0x6c, 0x61, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x12, 0x37, 0x0a, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x6d,
	0x65, 0x72, 0x67, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x17, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x70, 0x61, 0x73, 0x74, 0x65, 0x18, 0x07, 0x20, 0x02, 0x28, 0x08, 0x52,
	0x0b, 0x69, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x61, 0x73, 0x74, 0x65, 0x12, 0x48, 0x0a, 0x18,
	0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x5f, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x16,
	0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x22, 0xe7, 0x01, 0x0a, 0x25, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x12, 0x2e, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x12, 0x38, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x65,
	0x77, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x08, 0x52, 0x0e, 0x6e, 0x65, 0x77, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x66, 0x72, 0x65,
	0x65, 0x7a, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x08, 0x52,
	0x0f, 0x70, 0x72, 0x65, 0x76, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x22, 0xd0, 0x03, 0x0a, 0x19, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2e,
	0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x38,
	0x0a, 0x18, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x16, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x69,
	0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x2f, 0x0a, 0x13, 0x69, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x69, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x69, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x75, 0x69,
	0x64, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x54, 0x53, 0x54, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x55, 0x49, 0x44, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0d, 0x63, 0x65, 0x6c, 0x6c, 0x55,
	0x69, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x15, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x43, 0x65,
	0x6c, 0x6c, 0x55, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x12, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x65, 0x6c, 0x6c, 0x55, 0x69, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x1b, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f,
	0x6d, 0x61, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x18, 0x69, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x6c, 0x6c,
	0x4d, 0x61, 0x70, 0x22, 0xd2, 0x01, 0x0a, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0d, 0x63, 0x65, 0x6c, 0x6c,
	0x5f, 0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x55, 0x49, 0x44, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0b, 0x63, 0x65, 0x6c, 0x6c, 0x55, 0x69,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x15, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x12, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x43, 0x65, 0x6c,
	0x6c, 0x44, 0x69, 0x66, 0x66, 0x4d, 0x61, 0x70, 0x22, 0xc5, 0x02, 0x0a, 0x1e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x54,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0d, 0x63,
	0x65, 0x6c, 0x6c, 0x5f, 0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x55, 0x49, 0x44,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0b, 0x63, 0x65, 0x6c,
	0x6c, 0x55, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x15, 0x69, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x6d, 0x61,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x12, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x43, 0x65, 0x6c, 0x6c, 0x44, 0x69, 0x66, 0x66, 0x4d, 0x61, 0x70, 0x12, 0x41, 0x0a, 0x15, 0x77,
	0x68, 0x6f, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x64, 0x69, 0x66, 0x66,
	0x5f, 0x6d, 0x61, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x12, 0x77, 0x68, 0x6f, 0x6c,
	0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x44, 0x69, 0x66, 0x66, 0x4d, 0x61, 0x70, 0x12, 0x30,
	0x0a, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x12, 0x69, 0x6e,
	0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x8d, 0x01, 0x0a, 0x27, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x41,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x55, 0x6e, 0x69, 0x74, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x39, 0x0a, 0x05,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x54, 0x53,
	0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x43,
	0x65, 0x6c, 0x6c, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x69, 0x63, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x73,
	0x22, 0x82, 0x01, 0x0a, 0x1e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x25,
	0x0a, 0x0e, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x22, 0xb1, 0x01, 0x0a, 0x2c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x53, 0x65, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74,
	0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x65, 0x73, 0x74, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x73, 0x74, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x65, 0x73, 0x74, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x65,
	0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x73,
	0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6c, 0x61,
	0x72, 0x67, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x22, 0xc2, 0x01, 0x0a, 0x24, 0x54, 0x53,
	0x54, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x12, 0x32, 0x0a, 0x0d, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x5f,
	0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x75, 0x6e, 0x64, 0x6f, 0x44,
	0x69, 0x66, 0x66, 0x4d, 0x61, 0x70, 0x12, 0x36, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x5f, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x44, 0x69, 0x66, 0x66, 0x4d, 0x61, 0x70, 0x12, 0x2e,
	0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x22, 0xf3,
	0x07, 0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4d, 0x6f, 0x76, 0x65, 0x43, 0x65,
	0x6c, 0x6c, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x54, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x16, 0x64, 0x73,
	0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x69, 0x64, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x55, 0x55, 0x49, 0x44, 0x50, 0x61, 0x74, 0x68, 0x52, 0x12, 0x64, 0x73, 0x74, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x64, 0x50, 0x61, 0x74, 0x68, 0x12, 0x38, 0x0a,
	0x0d, 0x73, 0x72, 0x63, 0x5f, 0x75, 0x69, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52,
	0x65, 0x63, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0b, 0x73, 0x72, 0x63, 0x55,
	0x69, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x0d, 0x64, 0x73, 0x74, 0x5f, 0x75,
	0x69, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x65, 0x63, 0x74, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x0b, 0x64, 0x73, 0x74, 0x55, 0x69, 0x64, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x43, 0x0a, 0x0f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x54,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x69, 0x6d,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x0c, 0x73, 0x72, 0x63, 0x5f, 0x63, 0x65,
	0x6c, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x73, 0x72,
	0x63, 0x43, 0x65, 0x6c, 0x6c, 0x4d, 0x61, 0x70, 0x12, 0x30, 0x0a, 0x0c, 0x64, 0x73, 0x74, 0x5f,
	0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a,
	0x64, 0x73, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x4d, 0x61, 0x70, 0x12, 0x49, 0x0a, 0x19, 0x64, 0x73,
	0x74, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x16, 0x64,
	0x73, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x11, 0x73, 0x72, 0x63, 0x5f, 0x75, 0x6e, 0x64,
	0x6f, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x0e, 0x73, 0x72, 0x63, 0x55, 0x6e, 0x64, 0x6f, 0x43, 0x65, 0x6c, 0x6c, 0x4d, 0x61, 0x70,
	0x12, 0x39, 0x0a, 0x11, 0x64, 0x73, 0x74, 0x5f, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x63, 0x65, 0x6c,
	0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x64, 0x73, 0x74,
	0x55, 0x6e, 0x64, 0x6f, 0x43, 0x65, 0x6c, 0x6c, 0x4d, 0x61, 0x70, 0x12, 0x42, 0x0a, 0x1e, 0x64,
	0x73, 0x74, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x72,
	0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0b, 0x20,
	0x02, 0x28, 0x0d, 0x52, 0x1a, 0x64, 0x73, 0x74, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x48, 0x0a, 0x18, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x5f, 0x72, 0x65, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x16, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x51, 0x0a, 0x17, 0x6d, 0x65, 0x72,
	0x67, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x54,
	0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x14, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x57, 0x0a, 0x1c,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x75, 0x69, 0x64,
	0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x55, 0x49, 0x44,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x18, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x55, 0x69, 0x64, 0x73, 0x54, 0x6f, 0x52, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x4d, 0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x18, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x22, 0xd0, 0x01, 0x0a, 0x18, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52,
	0x6f, 0x77, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x01, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x69, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0c, 0x68, 0x69,
	0x64, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x0a, 0x63, 0x65,
	0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09,
	0x63, 0x65, 0x6c, 0x6c, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x0a, 0x74, 0x65, 0x78,
	0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x74,
	0x65, 0x78, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49,
	0x44, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0xd4, 0x05, 0x0a, 0x21, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x4f, 0x72, 0x52, 0x6f, 0x77, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a,
	0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54,
	0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x33, 0x0a,
	0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x54, 0x53, 0x54, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x6f, 0x77, 0x42, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x06, 0x62, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x63, 0x65, 0x6c, 0x6c, 0x4d, 0x61, 0x70, 0x12, 0x33, 0x0a,
	0x0d, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x75, 0x6e, 0x64, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x73, 0x12, 0x32, 0x0a, 0x0d, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f,
	0x6d, 0x61, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x75, 0x6e, 0x64, 0x6f, 0x43,
	0x65, 0x6c, 0x6c, 0x4d, 0x61, 0x70, 0x12, 0x3c, 0x0a, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x54, 0x53, 0x54,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x55,
	0x49, 0x44, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x12, 0x48, 0x0a, 0x21, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x65, 0x64,
	0x67, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c,
	0x61, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d,
	0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x45, 0x64, 0x67, 0x65, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64,
	0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x27, 0x0a,
	0x0f, 0x77, 0x61, 0x73, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x77, 0x61, 0x73, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x0a, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x09, 0x75, 0x6e, 0x64, 0x6f, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x36, 0x0a, 0x12, 0x73, 0x72, 0x63, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0f, 0x73, 0x72, 0x63, 0x52, 0x6f, 0x77, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x55, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x12, 0x6f, 0x70, 0x70, 0x5f,
	0x72, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x0c,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52,
	0x0f, 0x6f, 0x70, 0x70, 0x52, 0x6f, 0x77, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x55, 0x69, 0x64,
	0x12, 0x3c, 0x0a, 0x0b, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x52, 0x6f, 0x77, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x0a, 0x75, 0x6e, 0x64, 0x6f, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x22, 0xfe,
	0x03, 0x0a, 0x16, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x6f, 0x77, 0x42, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f,
	0x72, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x52, 0x6f, 0x77,
	0x12, 0x2d, 0x0a, 0x0d, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55,
	0x49, 0x44, 0x52, 0x0b, 0x76, 0x69, 0x65, 0x77, 0x55, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x46, 0x0a, 0x0e, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x6f, 0x77, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0c, 0x76, 0x69, 0x65, 0x77, 0x54,
	0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x55,
	0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x20,
	0x2e, 0x54, 0x53, 0x54, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x6f, 0x77, 0x42, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d,
	0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x40,
	0x0a, 0x17, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x14, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x59, 0x0a, 0x18, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x20, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52,
	0x6f, 0x77, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x45, 0x6e, 0x75, 0x6d, 0x52, 0x15, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x0d, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52,
	0x6f, 0x77, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x0c, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0xc1, 0x04, 0x0a, 0x21, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x4f, 0x72, 0x52, 0x6f, 0x77, 0x73, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x52, 0x6f, 0x77, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x63, 0x65,
	0x6c, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x63, 0x65,
	0x6c, 0x6c, 0x4d, 0x61, 0x70, 0x12, 0x32, 0x0a, 0x0d, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x63, 0x65,
	0x6c, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x75, 0x6e,
	0x64, 0x6f, 0x43, 0x65, 0x6c, 0x6c, 0x4d, 0x61, 0x70, 0x12, 0x36, 0x0a, 0x0f, 0x75, 0x6e, 0x64,
	0x6f, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x0d, 0x75, 0x6e, 0x64, 0x6f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x12, 0x45, 0x0a, 0x0f, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x54, 0x53, 0x54,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x55,
	0x49, 0x44, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0d, 0x75, 0x6e, 0x64, 0x6f, 0x53,
	0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x56, 0x0a, 0x20, 0x66, 0x6f, 0x72, 0x6d,
	0x75, 0x6c, 0x61, 0x5f, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x75, 0x6e, 0x64, 0x6f, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x1c, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x52, 0x65, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x46, 0x6f, 0x72, 0x55, 0x6e, 0x64, 0x6f,
	0x12, 0x57, 0x0a, 0x29, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x73, 0x68, 0x6f, 0x75,
	0x6c, 0x64, 0x5f, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x5f, 0x66,
	0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x24, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x53, 0x68, 0x6f, 0x75,
	0x6c, 0x64, 0x45, 0x64, 0x67, 0x65, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x46, 0x6f, 0x72, 0x6d,
	0x75, 0x6c, 0x61, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0a, 0x75, 0x6e, 0x64,
	0x6f, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x09, 0x75, 0x6e, 0x64, 0x6f, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x22, 0x84, 0x01, 0x0a, 0x1c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52,
	0x6f, 0x77, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x04, 0x75, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x04, 0x75,
	0x69, 0x64, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x72, 0x6f, 0x77, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x52, 0x6f, 0x77, 0x22, 0x96, 0x01, 0x0a, 0x1f, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x4f, 0x72, 0x52, 0x6f, 0x77, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x37,
	0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x54, 0x53, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x6f, 0x77, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x69, 0x7a, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x02, 0x52, 0x05, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x12, 0x24, 0x0a,
	0x0e, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x75, 0x6e, 0x64, 0x6f, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0c, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x55,
	0x6e, 0x64, 0x6f, 0x22, 0xbb, 0x03, 0x0a, 0x27, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x4f, 0x72, 0x52, 0x6f, 0x77, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12,
	0x2e, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12,
	0x2c, 0x0a, 0x12, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x6f, 0x77, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x02, 0x52, 0x10, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x73, 0x12, 0x3c, 0x0a,
	0x1b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x75, 0x6e, 0x64, 0x6f, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x02, 0x52, 0x17, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x6f, 0x77, 0x53,
	0x69, 0x7a, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x6e, 0x64, 0x6f, 0x12, 0x37, 0x0a, 0x18, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x72, 0x6f,
	0x77, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x02, 0x52, 0x15, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x6f, 0x77, 0x53,
	0x69, 0x7a, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x21, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x73,
	0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x75, 0x6e, 0x64, 0x6f, 0x18, 0x05, 0x20, 0x03, 0x28, 0x02, 0x52,
	0x1c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x6f,
	0x77, 0x53, 0x69, 0x7a, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x6e, 0x64, 0x6f, 0x12, 0x30, 0x0a,
	0x14, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x40, 0x0a, 0x1d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x75, 0x6e, 0x64, 0x6f,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x19, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x46, 0x6f, 0x72, 0x55, 0x6e, 0x64,
	0x6f, 0x22, 0x92, 0x02, 0x0a, 0x16, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x69, 0x64,
	0x65, 0x53, 0x68, 0x6f, 0x77, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x37, 0x0a, 0x05,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x54, 0x53,
	0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x6f, 0x77, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x10, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x73, 0x68,
	0x6f, 0x77, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x48, 0x69, 0x64, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0e, 0x68, 0x69, 0x64,
	0x65, 0x53, 0x68, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x68,
	0x69, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x0d, 0x52, 0x0c, 0x68, 0x69, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x54, 0x0a, 0x19, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x75, 0x6e, 0x64, 0x6f, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x48, 0x69, 0x64, 0x65, 0x53, 0x68,
	0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x15, 0x68, 0x69, 0x64, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x6f, 0x72, 0x55, 0x6e, 0x64, 0x6f, 0x22, 0xc1, 0x04, 0x0a, 0x25, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x54, 0x65, 0x78, 0x74, 0x50, 0x72, 0x65, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x49,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x12, 0x2e, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x12, 0x43, 0x0a, 0x15, 0x63, 0x6f, 0x61, 0x6c, 0x65, 0x73, 0x63, 0x65, 0x64, 0x5f, 0x74, 0x65,
	0x78, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x14, 0x63, 0x6f, 0x61, 0x6c, 0x65, 0x73, 0x63, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x3c, 0x0a, 0x11, 0x70, 0x6f, 0x73, 0x74, 0x66, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x11, 0x70, 0x6f, 0x73, 0x74, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x57, 0x69, 0x74,
	0x68, 0x50, 0x6f, 0x73, 0x74, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2c, 0x0a, 0x0c, 0x65,
	0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x18, 0x0a, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x0b, 0x65, 0x64,
	0x69, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x65, 0x6c, 0x6c, 0x12, 0x37, 0x0a, 0x0f, 0x65, 0x64, 0x69,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x0e, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x12, 0x32, 0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x5f, 0x68, 0x69, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x74, 0x61, 0x70, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x48, 0x69,
	0x74, 0x42, 0x79, 0x54, 0x61, 0x70, 0x12, 0x30, 0x0a, 0x08, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x75,
	0x69, 0x64, 0x18, 0x0d, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55,
	0x55, 0x49, 0x44, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x07, 0x63, 0x65, 0x6c, 0x6c, 0x55, 0x69, 0x64, 0x12, 0x60, 0x0a, 0x1f, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x74, 0x68, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1c, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x22, 0x80, 0x03, 0x0a, 0x1f, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x53, 0x65, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2e,
	0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x3a,
	0x0a, 0x10, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x75, 0x6e,
	0x64, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x75, 0x6e, 0x64, 0x6f, 0x12, 0x2c, 0x0a, 0x0c, 0x65, 0x64,
	0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x0b, 0x65, 0x64, 0x69,
	0x74, 0x69, 0x6e, 0x67, 0x43, 0x65, 0x6c, 0x6c, 0x12, 0x24, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f,
	0x63, 0x65, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x54,
	0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x43, 0x65, 0x6c, 0x6c, 0x12, 0x37,
	0x0a, 0x0f, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x18, 0x08, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x68, 0x69, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x74, 0x61,
	0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x48, 0x69, 0x74, 0x42, 0x79, 0x54, 0x61, 0x70, 0x12, 0x30, 0x0a, 0x08, 0x63,
	0x65, 0x6c, 0x6c, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x07, 0x63, 0x65, 0x6c, 0x6c, 0x55, 0x69, 0x64, 0x22, 0xff, 0x02,
	0x0a, 0x2b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x65, 0x61, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x4f, 0x72, 0x52, 0x6f, 0x77, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x37, 0x0a,
	0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x54,
	0x53, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x6f, 0x77, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x15, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x61, 0x72, 0x65, 0x61, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x41, 0x72, 0x65, 0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x13, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x65, 0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x0d, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x64, 0x69, 0x66,
	0x66, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x63, 0x65, 0x6c,
	0x6c, 0x44, 0x69, 0x66, 0x66, 0x4d, 0x61, 0x70, 0x12, 0x3b, 0x0a, 0x12, 0x75, 0x6e, 0x64, 0x6f,
	0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x75, 0x6e, 0x64, 0x6f, 0x43, 0x65, 0x6c, 0x6c, 0x44, 0x69,
	0x66, 0x66, 0x4d, 0x61, 0x70, 0x12, 0x33, 0x0a, 0x0d, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x75, 0x6e,
	0x64, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22,
	0x81, 0x03, 0x0a, 0x22, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x50, 0x65,
	0x6e, 0x63, 0x69, 0x6c, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x08, 0x66, 0x6f, 0x72, 0x6d,
	0x75, 0x6c, 0x61, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x54, 0x53, 0x43,
	0x45, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x08, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x6f,
	0x72, 0x6d, 0x75, 0x6c, 0x61, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x04, 0x52, 0x0e, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x10, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x66,
	0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x54, 0x53, 0x43, 0x45, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x6d,
	0x75, 0x6c, 0x61, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f,
	0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x04, 0x52, 0x15, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x46, 0x6f,
	0x72, 0x6d, 0x75, 0x6c, 0x61, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x22, 0xe0, 0x03, 0x0a, 0x1a, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53,
	0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x6c, 0x64, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x6c,
	0x64, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x6e, 0x65,
	0x77, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x6e, 0x65,
	0x77, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x6f, 0x6c, 0x64, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x6f, 0x6c, 0x64, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x05, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x12, 0x36, 0x0a, 0x0f, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x65, 0x5f,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x6f, 0x6c, 0x64,
	0x53, 0x68, 0x61, 0x70, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x0f, 0x6e, 0x65,
	0x77, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x65, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x0d, 0x6e, 0x65, 0x77, 0x53, 0x68, 0x61, 0x70, 0x65, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x12, 0x40, 0x0a, 0x1d, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x6f, 0x6c, 0x64, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x1d, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x6e, 0x65, 0x77,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xb8, 0x01, 0x0a, 0x21, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x53, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a, 0x05,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53,
	0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x10, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x70, 0x72,
	0x65, 0x76, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x70, 0x72, 0x65,
	0x76, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x22, 0xac, 0x03, 0x0a, 0x1e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x74,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65,
	0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x49, 0x6e, 0x63,
	0x72, 0x65, 0x61, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0c, 0x66,
	0x6f, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x44, 0x69, 0x66, 0x66, 0x12, 0x24, 0x0a, 0x0e, 0x66,
	0x6f, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x01, 0x52, 0x0c, 0x66, 0x6f, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x33, 0x0a, 0x16, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x66, 0x6f, 0x6e,
	0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x01, 0x52, 0x13, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x46, 0x6f, 0x6e, 0x74, 0x53, 0x69,
	0x7a, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x0d, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x64,
	0x69, 0x66, 0x66, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x63,
	0x65, 0x6c, 0x6c, 0x44, 0x69, 0x66, 0x66, 0x4d, 0x61, 0x70, 0x12, 0x41, 0x0a, 0x15, 0x69, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x5f,
	0x6d, 0x61, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x12, 0x69, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x44, 0x69, 0x66, 0x66, 0x4d, 0x61, 0x70, 0x12, 0x41, 0x0a,
	0x1d, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x08,
	0x20, 0x02, 0x28, 0x08, 0x52, 0x1a, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x44, 0x6f, 0x6e, 0x65,
	0x22, 0xbb, 0x03, 0x0a, 0x1e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6f, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x66, 0x61, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x46, 0x61, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x5f, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x46, 0x6f, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x14, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x12, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x40, 0x0a, 0x14, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x12, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x54, 0x65, 0x78,
	0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x0d, 0x63, 0x65, 0x6c, 0x6c, 0x5f,
	0x64, 0x69, 0x66, 0x66, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x07, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b,
	0x63, 0x65, 0x6c, 0x6c, 0x44, 0x69, 0x66, 0x66, 0x4d, 0x61, 0x70, 0x12, 0x41, 0x0a, 0x15, 0x69,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x64, 0x69, 0x66, 0x66,
	0x5f, 0x6d, 0x61, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x12, 0x69, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x44, 0x69, 0x66, 0x66, 0x4d, 0x61, 0x70, 0x22, 0xb8,
	0x01, 0x0a, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x15, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x01, 0x52, 0x12, 0x6f, 0x6c, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x01, 0x52, 0x12, 0x6e, 0x65, 0x77, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x46, 0x0a, 0x14, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x4e, 0x6f, 0x77, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x22, 0xe4, 0x02, 0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x74,
	0x57, 0x61, 0x73, 0x43, 0x75, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a,
	0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54,
	0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x2f, 0x0a,
	0x0e, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44,
	0x52, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x69, 0x64, 0x12, 0x38,
	0x0a, 0x13, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x10, 0x70, 0x72, 0x65, 0x76, 0x46, 0x72, 0x6f, 0x6d,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x77, 0x61, 0x73, 0x5f,
	0x63, 0x75, 0x74, 0x18, 0x04, 0x20, 0x02, 0x28, 0x08, 0x52, 0x06, 0x77, 0x61, 0x73, 0x43, 0x75,
	0x74, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x77, 0x61, 0x73, 0x5f, 0x63, 0x75,
	0x74, 0x18, 0x05, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x76, 0x57, 0x61, 0x73,
	0x43, 0x75, 0x74, 0x12, 0x34, 0x0a, 0x11, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x62, 0x79, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0e, 0x66, 0x72, 0x6f, 0x6d, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x55, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x16, 0x70, 0x72, 0x65,
	0x76, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x5f,
	0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x55, 0x55, 0x49, 0x44, 0x52, 0x12, 0x70, 0x72, 0x65, 0x76, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x42, 0x79, 0x55, 0x69, 0x64, 0x22, 0xdb, 0x02, 0x0a, 0x18, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x11, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x10, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x09,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x32, 0x0a, 0x0d, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x6d,
	0x61, 0x70, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x75, 0x6e, 0x64, 0x6f, 0x43, 0x65,
	0x6c, 0x6c, 0x4d, 0x61, 0x70, 0x12, 0x32, 0x0a, 0x0d, 0x72, 0x65, 0x64, 0x6f, 0x5f, 0x63, 0x65,
	0x6c, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x72, 0x65,
	0x64, 0x6f, 0x43, 0x65, 0x6c, 0x6c, 0x4d, 0x61, 0x70, 0x12, 0x2b, 0x0a, 0x09, 0x74, 0x65, 0x78,
	0x74, 0x5f, 0x75, 0x6e, 0x64, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x74, 0x65,
	0x78, 0x74, 0x55, 0x6e, 0x64, 0x6f, 0x22, 0xa3, 0x02, 0x0a, 0x18, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x11, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x10, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x09, 0x6f, 0x6c,
	0x64, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x54, 0x53, 0x54, 0x53, 0x4f, 0x53, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53,
	0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x08, 0x6f, 0x6c, 0x64, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x12, 0x47, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x54, 0x53, 0x54, 0x53, 0x4f, 0x53, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x22, 0x90, 0x02, 0x0a,
	0x27, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x52, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x72, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x16, 0x72, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x05,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53,
	0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x1d,
	0x70, 0x72, 0x65, 0x76, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1a, 0x70, 0x72, 0x65, 0x76, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22,
	0xe8, 0x01, 0x0a, 0x1f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x65, 0x77, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08,
	0x52, 0x11, 0x6e, 0x65, 0x77, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x6c, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x6f, 0x6c, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x11, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f,
	0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0f, 0x72, 0x6f, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x55, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xd6, 0x01, 0x0a, 0x21, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x12, 0x2e, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x31, 0x0a, 0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x02, 0x28,
	0x08, 0x52, 0x10, 0x73, 0x65, 0x6e, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x89, 0x02, 0x0a, 0x24, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53,
	0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x05, 0x74, 0x68, 0x65, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x05, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x40, 0x0a,
	0x14, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73,
	0x74, 0x79, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x12, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x15,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x6e, 0x5f,
	0x74, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x05, 0x52, 0x12, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x22,
	0xec, 0x01, 0x0a, 0x25, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x05, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x05, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x10, 0x6f, 0x6c,
	0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x6f, 0x6c, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x10, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e,
	0x6e, 0x65, 0x77, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x22, 0xf1,
	0x05, 0x0a, 0x23, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x12, 0x26,
	0x0a, 0x06, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x0b, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x75, 0x6e, 0x64,
	0x6f, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x12, 0x2f, 0x0a, 0x0b, 0x75, 0x6e, 0x64, 0x6f, 0x5f,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x75, 0x6e,
	0x64, 0x6f, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x0d, 0x63, 0x65, 0x6c, 0x6c,
	0x5f, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x0b, 0x63, 0x65, 0x6c, 0x6c, 0x44, 0x69, 0x66, 0x66, 0x4d, 0x61, 0x70, 0x12, 0x3b, 0x0a, 0x12,
	0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x6d,
	0x61, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x75, 0x6e, 0x64, 0x6f, 0x43, 0x65,
	0x6c, 0x6c, 0x44, 0x69, 0x66, 0x66, 0x4d, 0x61, 0x70, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x70, 0x70,
	0x6c, 0x79, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x02, 0x28, 0x05, 0x52, 0x11, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x66, 0x6c,
	0x61, 0x67, 0x18, 0x0b, 0x20, 0x02, 0x28, 0x08, 0x52, 0x12, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6c, 0x65, 0x61, 0x72, 0x73, 0x41, 0x6c, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x3a, 0x0a, 0x1a,
	0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72,
	0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x0c, 0x20, 0x02, 0x28, 0x08,
	0x52, 0x16, 0x75, 0x6e, 0x64, 0x6f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6c, 0x65, 0x61, 0x72,
	0x73, 0x41, 0x6c, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x43, 0x0a, 0x0e, 0x72, 0x6f, 0x77, 0x5f,
	0x63, 0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x6f, 0x77,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x0c, 0x72, 0x6f, 0x77, 0x43, 0x6f, 0x6c, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x12, 0x4c, 0x0a,
	0x13, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6c, 0x5f, 0x73, 0x74,
	0x79, 0x6c, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x54, 0x53, 0x54,
	0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x6f, 0x77, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x10, 0x75, 0x6e, 0x64, 0x6f, 0x52,
	0x6f, 0x77, 0x43, 0x6f, 0x6c, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x17, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x14, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x4d, 0x61, 0x70, 0x57, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x22, 0x66, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x74,
	0x42, 0x61, 0x73, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x54, 0x53, 0x54,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x43, 0x65,
	0x6c, 0x6c, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x22, 0x79, 0x0a, 0x1b, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x43, 0x65, 0x6c, 0x6c,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x21, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x53, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x4d, 0x69, 0x6e, 0x75, 0x73,
	0x53, 0x69, 0x67, 0x6e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x54, 0x53, 0x54,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x43, 0x65,
	0x6c, 0x6c, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x13, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75,
	0x73, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x73, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x08, 0x52, 0x10, 0x62, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x4d, 0x69, 0x6e, 0x75,
	0x73, 0x53, 0x69, 0x67, 0x6e, 0x22, 0x7f, 0x0a, 0x1d, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x53, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x21, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x53, 0x65, 0x74, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63,
	0x75, 0x72, 0x61, 0x63, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x39, 0x0a, 0x05,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x54, 0x53,
	0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x43,
	0x65, 0x6c, 0x6c, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x66, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x0d, 0x52, 0x10, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x75,
	0x72, 0x61, 0x63, 0x79, 0x22, 0x95, 0x01, 0x0a, 0x24, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x53, 0x65, 0x74, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x39, 0x0a,
	0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x54,
	0x53, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65,
	0x43, 0x65, 0x6c, 0x6c, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x6e, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x13, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x22, 0x8a, 0x01, 0x0a,
	0x26, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x4f, 0x66, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x73,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0d, 0x64, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x22, 0xb8, 0x01, 0x0a, 0x1f, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x39, 0x0a,
	0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x54,
	0x53, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65,
	0x43, 0x65, 0x6c, 0x6c, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x22, 0x9e, 0x01, 0x0a, 0x27, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x53, 0x65, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x54, 0x68, 0x6f, 0x75, 0x73, 0x61, 0x6e, 0x64, 0x73,
	0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x12, 0x39, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4d, 0x75, 0x74,
	0x61, 0x74, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x18, 0x73,
	0x68, 0x6f, 0x77, 0x5f, 0x74, 0x68, 0x6f, 0x75, 0x73, 0x61, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x65,
	0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x16, 0x73,
	0x68, 0x6f, 0x77, 0x54, 0x68, 0x6f, 0x75, 0x73, 0x61, 0x6e, 0x64, 0x73, 0x53, 0x65, 0x70, 0x61,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x92, 0x01, 0x0a, 0x23, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x39, 0x0a,
	0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x54,
	0x53, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65,
	0x43, 0x65, 0x6c, 0x6c, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x75, 0x73, 0x65, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x12, 0x75, 0x73, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x22, 0x86, 0x03, 0x0a, 0x26, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x49, 0x6e, 0x63, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x69, 0x6e,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x0d, 0x63, 0x65, 0x6c, 0x6c, 0x5f,
	0x64, 0x69, 0x66, 0x66, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b,
	0x63, 0x65, 0x6c, 0x6c, 0x44, 0x69, 0x66, 0x66, 0x4d, 0x61, 0x70, 0x12, 0x3b, 0x0a, 0x0d, 0x63,
	0x65, 0x6c, 0x6c, 0x5f, 0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x55, 0x49, 0x44,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0b, 0x63, 0x65, 0x6c,
	0x6c, 0x55, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x15, 0x69, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x6d, 0x61,
	0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x12, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x43, 0x65, 0x6c, 0x6c, 0x44, 0x69, 0x66, 0x66, 0x4d, 0x61, 0x70, 0x12, 0x26, 0x0a, 0x0f, 0x69,
	0x73, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x08,
	0x20, 0x02, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x46, 0x69, 0x72, 0x73, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x22, 0x80, 0x03, 0x0a, 0x1f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4d,
	0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x4f, 0x72, 0x52, 0x6f, 0x77, 0x73,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x74, 0x5f,
	0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x55, 0x55, 0x49, 0x44, 0x52, 0x07, 0x64, 0x65, 0x73, 0x74, 0x55, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x08, 0x52, 0x06, 0x62,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x2d, 0x0a, 0x0d, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x64, 0x65,
	0x73, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0b, 0x75, 0x6e, 0x64, 0x6f, 0x44, 0x65, 0x73,
	0x74, 0x55, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x62, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0a, 0x75, 0x6e, 0x64, 0x6f, 0x42,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x04, 0x75, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x04,
	0x75, 0x69, 0x64, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46,
	0x0a, 0x17, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x5f, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x15, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0xe6, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x53, 0x6f, 0x72, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a,
	0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54,
	0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x2d, 0x0a,
	0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x75, 0x69, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52,
	0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x55, 0x69, 0x64, 0x73, 0x12, 0x29, 0x0a, 0x0b,
	0x74, 0x6f, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x75, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x09, 0x74, 0x6f,
	0x52, 0x6f, 0x77, 0x55, 0x69, 0x64, 0x73, 0x12, 0x46, 0x0a, 0x17, 0x66, 0x6f, 0x72, 0x6d, 0x75,
	0x6c, 0x61, 0x5f, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x15, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c,
	0x61, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22,
	0xfd, 0x07, 0x0a, 0x19, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x52, 0x65, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x26, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x08,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x64,
	0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49,
	0x44, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x64, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x55, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x55, 0x69,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x12, 0x59, 0x0a, 0x18, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6f, 0x72, 0x5f, 0x72, 0x6f,
	0x77, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x4f, 0x72, 0x52, 0x6f, 0x77, 0x55, 0x75, 0x69, 0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x14, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4f, 0x72, 0x52,
	0x6f, 0x77, 0x55, 0x75, 0x69, 0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x60, 0x0a, 0x1c, 0x61,
	0x75, 0x78, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6f, 0x72, 0x5f, 0x72, 0x6f, 0x77,
	0x5f, 0x75, 0x75, 0x69, 0x64, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4f,
	0x72, 0x52, 0x6f, 0x77, 0x55, 0x75, 0x69, 0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x17, 0x61, 0x75, 0x78, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4f,
	0x72, 0x52, 0x6f, 0x77, 0x55, 0x75, 0x69, 0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x48, 0x0a,
	0x11, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x76, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4d, 0x6f,
	0x76, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x54,
	0x53, 0x43, 0x45, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x53, 0x0a, 0x15, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x55, 0x49, 0x44, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x12, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x53, 0x0a, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x73, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73,
	0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x54, 0x0a, 0x17, 0x6d,
	0x65, 0x72, 0x67, 0x65, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x6d, 0x6f, 0x76, 0x65,
	0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x54,
	0x53, 0x43, 0x45, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x4d,
	0x6f, 0x76, 0x65, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x14, 0x6d, 0x65, 0x72,
	0x67, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x4d, 0x6f, 0x76, 0x65, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x3b, 0x0a, 0x0c, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x4d,
	0x65, 0x72, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x0b, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4c,
	0x0a, 0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x52,
	0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x55,
	0x49, 0x44, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x41, 0x0a, 0x0e,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x62, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x42, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x62, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22,
	0xba, 0x02, 0x0a, 0x29, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x46, 0x6f, 0x72, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a,
	0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54,
	0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x41, 0x0a,
	0x0c, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c,
	0x61, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x4c, 0x0a, 0x13, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x5f, 0x74, 0x6f, 0x5f,
	0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x54, 0x53, 0x43, 0x45, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x46, 0x6f, 0x72,
	0x55, 0x6e, 0x64, 0x6f, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x11, 0x66, 0x6f, 0x72,
	0x6d, 0x75, 0x6c, 0x61, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0x4c,
	0x0a, 0x0e, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x42, 0x79, 0x43,
	0x65, 0x6c, 0x6c, 0x52, 0x65, 0x66, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0d, 0x77,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x74, 0x4d, 0x61, 0x70, 0x22, 0xf3, 0x01, 0x0a,
	0x30, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x46, 0x6f, 0x72, 0x52,
	0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x12, 0x41, 0x0a, 0x0c, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x46, 0x6f,
	0x72, 0x6d, 0x75, 0x6c, 0x61, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x4c, 0x0a, 0x13, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73,
	0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61,
	0x73, 0x46, 0x6f, 0x72, 0x55, 0x6e, 0x64, 0x6f, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x11, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x22, 0xe5, 0x01, 0x0a, 0x22, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c,
	0x61, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0c, 0x72, 0x65, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x52, 0x65, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x0b, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x4c, 0x0a, 0x13,
	0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x54, 0x53, 0x43, 0x45,
	0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x6e, 0x64, 0x6f,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x11, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61,
	0x73, 0x54, 0x6f, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x22, 0xe8, 0x01, 0x0a, 0x25, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0c, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x54, 0x53, 0x54,
	0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x4c, 0x0a, 0x13, 0x66, 0x6f, 0x72, 0x6d, 0x75,
	0x6c, 0x61, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x46, 0x6f, 0x72, 0x6d,
	0x75, 0x6c, 0x61, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x6e, 0x64, 0x6f, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x11, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x54, 0x6f, 0x52, 0x65,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x22, 0x63, 0x0a, 0x31, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x46, 0x6f, 0x72,
	0x6d, 0x75, 0x6c, 0x61, 0x73, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x69, 0x7a, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x54, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x22, 0xd5, 0x01, 0x0a, 0x31, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x46, 0x6f, 0x72, 0x52, 0x65,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x12, 0x2e, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x12, 0x2d, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12,
	0x41, 0x0a, 0x0c, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x46, 0x6f, 0x72, 0x6d,
	0x75, 0x6c, 0x61, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x22, 0xd4, 0x02, 0x0a, 0x34, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x53, 0x70, 0x65, 0x63, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x54,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0c, 0x72,
	0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x52,
	0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x0b, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x4c,
	0x0a, 0x13, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x54, 0x53,
	0x43, 0x45, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x6e,
	0x64, 0x6f, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x11, 0x66, 0x6f, 0x72, 0x6d, 0x75,
	0x6c, 0x61, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0x5b, 0x0a, 0x16,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x5f, 0x73, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x54,
	0x53, 0x43, 0x45, 0x2e, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c,
	0x52, 0x65, 0x66, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x73, 0x22, 0xea, 0x01, 0x0a, 0x27, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x50, 0x69, 0x76, 0x6f,
	0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0c, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x54, 0x53,
	0x54, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x53, 0x70, 0x65, 0x63, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x4c, 0x0a, 0x13, 0x66, 0x6f, 0x72, 0x6d,
	0x75, 0x6c, 0x61, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x46, 0x6f, 0x72,
	0x6d, 0x75, 0x6c, 0x61, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x6e, 0x64, 0x6f, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x11, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x54, 0x6f, 0x52,
	0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x22, 0xf1, 0x02, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2e,
	0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x3b,
	0x0a, 0x0d, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x43, 0x65, 0x6c, 0x6c,
	0x55, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0b,
	0x63, 0x65, 0x6c, 0x6c, 0x55, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x0d, 0x75,
	0x6e, 0x64, 0x6f, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x0b, 0x75, 0x6e, 0x64, 0x6f, 0x43, 0x65, 0x6c, 0x6c, 0x4d, 0x61, 0x70, 0x12,
	0x4f, 0x0a, 0x1c, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x5f,
	0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x19, 0x75, 0x6e, 0x64, 0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x75,
	0x6c, 0x61, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x12, 0x30, 0x0a, 0x14, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f,
	0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12,
	0x6d, 0x65, 0x72, 0x67, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x12, 0x36, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x63, 0x65, 0x6c,
	0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x4d, 0x61, 0x70, 0x22, 0x9d, 0x01, 0x0a, 0x1a, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x4d, 0x65, 0x72,
	0x67, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x65, 0x6c, 0x6c, 0x4d,
	0x61, 0x70, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x12, 0x48, 0x0a, 0x15, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x12, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x55, 0x69, 0x64, 0x22, 0x90, 0x02, 0x0a, 0x15, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x55, 0x6e, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x12, 0x75, 0x6e, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f,
	0x75, 0x69, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x65, 0x63, 0x74, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x10, 0x75, 0x6e, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x55,
	0x69, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x0d, 0x75, 0x6e, 0x64, 0x6f,
	0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x0b, 0x75, 0x6e, 0x64, 0x6f, 0x43, 0x65, 0x6c, 0x6c, 0x4d, 0x61, 0x70, 0x12, 0x4f, 0x0a, 0x1c,
	0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x5f, 0x72, 0x65, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x19, 0x75, 0x6e, 0x64, 0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x52,
	0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0x98, 0x02,
	0x0a, 0x23, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x65, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x12, 0x46, 0x0a, 0x0f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x6d, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x54, 0x53, 0x54, 0x2e,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0d, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x64, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x56, 0x0a, 0x20, 0x66, 0x6f, 0x72, 0x6d,
	0x75, 0x6c, 0x61, 0x5f, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x75, 0x6e, 0x64, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x1c, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x52, 0x65, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x46, 0x6f, 0x72, 0x55, 0x6e, 0x64, 0x6f,
	0x12, 0x26, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6c,
	0x65, 0x61, 0x72, 0x18, 0x04, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x41, 0x6e, 0x64, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x22, 0x8b, 0x0d, 0x0a, 0x28, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x6e, 0x65, 0x77, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x12, 0x6e, 0x65, 0x77, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x6f, 0x6c, 0x64, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x69, 0x6e, 0x67, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x12, 0x6f, 0x6c, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x4d, 0x0a, 0x14, 0x6e, 0x65, 0x77,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x73, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x12, 0x6e, 0x65, 0x77, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x4d, 0x0a, 0x14, 0x6f, 0x6c, 0x64, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x12, 0x6f, 0x6c, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x02, 0x28, 0x08, 0x52, 0x10, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x61, 0x73, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x0e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x6f,
	0x77, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x6f,
	0x77, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x17, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x72,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x08, 0x20, 0x02, 0x28, 0x08, 0x52, 0x14, 0x75, 0x6e, 0x64, 0x6f, 0x52, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x42, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x38, 0x0a,
	0x13, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x10, 0x75, 0x6e, 0x64, 0x6f, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x6f, 0x77, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0a, 0x20,
	0x02, 0x28, 0x08, 0x52, 0x10, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x56, 0x69, 0x65, 0x77,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x0e, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x72, 0x6f,
	0x77, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0c, 0x76, 0x69, 0x65, 0x77, 0x52, 0x6f,
	0x77, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x17, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x72,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x0c, 0x20, 0x02, 0x28, 0x08, 0x52, 0x14, 0x75, 0x6e, 0x64, 0x6f, 0x52, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x56, 0x69, 0x65, 0x77, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x38, 0x0a,
	0x13, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x10, 0x75, 0x6e, 0x64, 0x6f, 0x56, 0x69, 0x65, 0x77, 0x52,
	0x6f, 0x77, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x61,
	0x70, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x6c,
	0x61, 0x70, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x13, 0x75, 0x6e, 0x64,
	0x6f, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49,
	0x44, 0x52, 0x11, 0x75, 0x6e, 0x64, 0x6f, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x5c, 0x0a, 0x14, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x12,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x65, 0x0a, 0x19, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x16, 0x75, 0x6e, 0x64, 0x6f, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x53, 0x0a, 0x15, 0x6e, 0x65, 0x77,
	0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x13, 0x6e, 0x65, 0x77, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x73, 0x12, 0x53,
	0x0a, 0x15, 0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x54, 0x53, 0x54, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x13,
	0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x20, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x73, 0x65, 0x74, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x1c, 0x75,
	0x6e, 0x64, 0x6f, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x56, 0x0a, 0x20, 0x75,
	0x6e, 0x64, 0x6f, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x5f,
	0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x1c, 0x75, 0x6e, 0x64, 0x6f, 0x53, 0x65, 0x74, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18,
	0x16, 0x20, 0x02, 0x28, 0x08, 0x52, 0x15, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x0d,
	0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x0b, 0x63, 0x65, 0x6c, 0x6c, 0x44, 0x69, 0x66, 0x66, 0x4d, 0x61, 0x70,
	0x12, 0x3b, 0x0a, 0x12, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x64, 0x69,
	0x66, 0x66, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x75, 0x6e,
	0x64, 0x6f, 0x43, 0x65, 0x6c, 0x6c, 0x44, 0x69, 0x66, 0x66, 0x4d, 0x61, 0x70, 0x12, 0x57, 0x0a,
	0x21, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x1c, 0x75, 0x6e, 0x64, 0x6f, 0x53, 0x65,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0xd6, 0x03, 0x0a, 0x21, 0x46, 0x6f, 0x72, 0x6d, 0x75,
	0x6c, 0x61, 0x45, 0x64, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x39, 0x0a, 0x05,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x54, 0x53,
	0x4b, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x75, 0x6e, 0x64, 0x6f, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x08, 0x52, 0x12, 0x75, 0x6e, 0x64, 0x6f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x75, 0x6e, 0x64, 0x6f, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x0d, 0x52, 0x12, 0x75, 0x6e, 0x64, 0x6f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x75, 0x6e, 0x64, 0x6f, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x13, 0x75, 0x6e, 0x64, 0x6f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x6e, 0x64,
	0x6f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x02,
	0x28, 0x0d, 0x52, 0x0f, 0x75, 0x6e, 0x64, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x64, 0x6f, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x06, 0x20, 0x02, 0x28, 0x08, 0x52,
	0x12, 0x72, 0x65, 0x64, 0x6f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x64, 0x6f, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x07, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x12, 0x72, 0x65, 0x64, 0x6f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x72, 0x65, 0x64, 0x6f, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x08, 0x20, 0x02, 0x28, 0x0d,
	0x52, 0x13, 0x72, 0x65, 0x64, 0x6f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x64, 0x6f, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0f,
	0x72, 0x65, 0x64, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0xbf, 0x01, 0x0a, 0x2d, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x45, 0x64, 0x69, 0x74, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x12, 0x3a, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x28, 0x0a,
	0x0f, 0x75, 0x6e, 0x64, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x75, 0x6e, 0x64, 0x6f, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x64, 0x6f, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x72, 0x65, 0x64, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x88, 0x02, 0x0a, 0x24, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x54, 0x53, 0x4b, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x44, 0x0a, 0x1a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x75, 0x69, 0x64, 0x5f, 0x68, 0x69, 0x74, 0x5f, 0x62, 0x79, 0x5f,
	0x74, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x55, 0x55, 0x49, 0x44, 0x52, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x55, 0x69, 0x64, 0x48, 0x69, 0x74, 0x42, 0x79, 0x54, 0x61, 0x70, 0x12, 0x2f, 0x0a, 0x13, 0x69,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x8c, 0x03, 0x0a,
	0x1e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x65, 0x6c,
	0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12,
	0x2e, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12,
	0x30, 0x0a, 0x08, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x43, 0x6f, 0x6f, 0x72,
	0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x07, 0x63, 0x65, 0x6c, 0x6c, 0x55, 0x69,
	0x64, 0x12, 0x3e, 0x0a, 0x13, 0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x11,
	0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x12, 0x3e, 0x0a, 0x13, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x11,
	0x6e, 0x65, 0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x12, 0x43, 0x0a, 0x0f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x44,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x52, 0x0e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x52, 0x0e, 0x69, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x22, 0x75, 0x0a, 0x24, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x22,
	0x0a, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x08, 0x52, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xaf, 0x02, 0x0a, 0x1e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x65,
	0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x52, 0x0a, 0x13, 0x6f, 0x6c, 0x64, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x23, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x6f, 0x6c, 0x64, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x52, 0x0a, 0x13, 0x6e, 0x65, 0x77,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x6e, 0x65, 0x77,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a,
	0x11, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55,
	0x55, 0x49, 0x44, 0x52, 0x0f, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x69, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0xc3, 0x01, 0x0a, 0x1a, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x53, 0x65, 0x74, 0x54, 0x65, 0x78, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x0d, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x64, 0x69, 0x66, 0x66,
	0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x63, 0x65, 0x6c, 0x6c,
	0x44, 0x69, 0x66, 0x66, 0x4d, 0x61, 0x70, 0x12, 0x41, 0x0a, 0x15, 0x69, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x12, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x43,
	0x65, 0x6c, 0x6c, 0x44, 0x69, 0x66, 0x66, 0x4d, 0x61, 0x70, 0x22, 0xfa, 0x01, 0x0a, 0x24, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x54, 0x65, 0x78, 0x74, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x0d, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x64, 0x69, 0x66, 0x66,
	0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x63, 0x65, 0x6c, 0x6c,
	0x44, 0x69, 0x66, 0x66, 0x4d, 0x61, 0x70, 0x12, 0x2b, 0x0a, 0x12, 0x63, 0x65, 0x6c, 0x6c, 0x5f,
	0x77, 0x61, 0x73, 0x5f, 0x72, 0x69, 0x63, 0x68, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x65, 0x6c, 0x6c, 0x57, 0x61, 0x73, 0x52, 0x69, 0x63, 0x68,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x41, 0x0a, 0x15, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f,
	0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x12, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x43, 0x65, 0x6c, 0x6c,
	0x44, 0x69, 0x66, 0x66, 0x4d, 0x61, 0x70, 0x22, 0x86, 0x01, 0x0a, 0x1e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x4a, 0x75, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x69, 0x6e, 0x67, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x54, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x14, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x9f, 0x02, 0x0a, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x12, 0x28, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0d,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x05, 0x20,
	0x02, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x40, 0x0a, 0x10, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x54, 0x53, 0x57,
	0x50, 0x2e, 0x55, 0x6e, 0x64, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0f, 0x75, 0x6e, 0x64, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xd0, 0x01, 0x0a, 0x1a, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x65,
	0x74, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x12, 0x40, 0x0a, 0x0e, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x54, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0c, 0x6f, 0x6c, 0x64, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53,
	0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x53, 0x6f, 0x72, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0xfb, 0x01, 0x0a, 0x1f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x53, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x53, 0x0a, 0x14, 0x6f, 0x6c, 0x64,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x55, 0x49, 0x44, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x11, 0x6f, 0x6c, 0x64,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x53,
	0x0a, 0x14, 0x6e, 0x65, 0x77, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x6f, 0x72, 0x74,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x54,
	0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6f, 0x72,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x49, 0x44, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x11, 0x6e, 0x65, 0x77, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x22, 0xe2, 0x01, 0x0a, 0x2c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52,
	0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46,
	0x6f, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x0e, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x6f, 0x72, 0x74,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54,
	0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0c, 0x6f, 0x6c, 0x64, 0x53, 0x6f, 0x72,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x6f,
	0x72, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x53,
	0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0xa5, 0x02, 0x0a, 0x2c, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0c, 0x72, 0x65, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x52, 0x65, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x0b, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x40, 0x0a, 0x0e,
	0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x0c, 0x6f, 0x6c, 0x64, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x40,
	0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x22, 0xef, 0x01, 0x0a, 0x1a, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12,
	0x2e, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12,
	0x34, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x12, 0x34, 0x0a, 0x0e, 0x6f, 0x6c, 0x64, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x6f,
	0x6c, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12, 0x35, 0x0a, 0x11, 0x72,
	0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49,
	0x44, 0x52, 0x0f, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x69, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x80, 0x01, 0x0a, 0x1b, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x6f, 0x77,
	0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x12, 0x24, 0x0a, 0x08, 0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52,
	0x07, 0x75, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x54, 0x53,
	0x54, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x6f, 0x77, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x09, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0xae, 0x06, 0x0a, 0x1c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x14, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x45, 0x78, 0x70, 0x61, 0x6e,
	0x64, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x12, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x3a, 0x0a, 0x11, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x65, 0x6c,
	0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x4d, 0x61, 0x70, 0x12, 0x39, 0x0a, 0x19,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x5f,
	0x72, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x16, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x46, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x52,
	0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x02, 0x52, 0x14, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x57, 0x69, 0x64, 0x74, 0x68, 0x73, 0x12, 0x30, 0x0a,
	0x14, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x02, 0x52, 0x12, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x6f, 0x77, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12,
	0x42, 0x0a, 0x15, 0x69, 0x6e, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x65,
	0x72, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x54, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x13,
	0x69, 0x6e, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65,
	0x64, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x08, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c,
	0x4d, 0x61, 0x70, 0x12, 0x4f, 0x0a, 0x1c, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x66, 0x6f, 0x72, 0x6d,
	0x75, 0x6c, 0x61, 0x5f, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x19, 0x75, 0x6e, 0x64, 0x6f, 0x46,
	0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x12, 0x42, 0x0a, 0x15, 0x72, 0x69, 0x63, 0x68, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x5f, 0x73, 0x75, 0x62, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x13, 0x72, 0x69, 0x63, 0x68, 0x54, 0x65, 0x78, 0x74, 0x53, 0x75, 0x62,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x50, 0x0a, 0x13, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x52, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x11, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4a, 0x0a, 0x10, 0x72, 0x6f,
	0x77, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x52, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0e, 0x72, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0xf7, 0x01, 0x0a, 0x2b, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x53, 0x65, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x54,
	0x65, 0x78, 0x74, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x11, 0x6e, 0x65, 0x77, 0x5f, 0x69, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x0f, 0x6e, 0x65, 0x77, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x4b, 0x0a, 0x11, 0x6f, 0x6c, 0x64, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x54, 0x53, 0x54, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x54,
	0x65, 0x78, 0x74, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x0f, 0x6f, 0x6c, 0x64, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x22, 0xe1, 0x02, 0x0a, 0x29, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x45, 0x78, 0x70, 0x61,
	0x6e, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2e,
	0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x23,
	0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x69, 0x6e, 0x67, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73,
	0x69, 0x6e, 0x67, 0x12, 0x46, 0x0a, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x5f,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x54, 0x53, 0x54, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x46, 0x0a, 0x0e, 0x63,
	0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64,
	0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x4f, 0x0a, 0x13, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x63, 0x6f, 0x6c, 0x6c,
	0x61, 0x70, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x43, 0x6f, 0x6c,
	0x6c, 0x61, 0x70, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x11, 0x75, 0x6e, 0x64, 0x6f, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x22, 0xfd, 0x01, 0x0a, 0x29, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0d, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x75, 0x6e, 0x64,
	0x6f, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x11, 0x75, 0x6e, 0x64, 0x6f, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0a, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x55, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x05, 0x20, 0x02, 0x28, 0x11, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x22, 0xe4, 0x01, 0x0a, 0x24, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x52, 0x6f, 0x77, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a,
	0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54,
	0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x1f, 0x0a,
	0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x0d, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x30,
	0x0a, 0x14, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x76, 0x69, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x12, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x52, 0x6f, 0x77, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x39, 0x0a, 0x19, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x72,
	0x6f, 0x77, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20,
	0x02, 0x28, 0x0d, 0x52, 0x16, 0x75, 0x6e, 0x64, 0x6f, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x6f,
	0x77, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x84, 0x03, 0x0a, 0x23,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x57,
	0x69, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x64,
	0x65, 0x55, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x13, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x10, 0x75, 0x6e,
	0x64, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x55, 0x69, 0x64, 0x12, 0x37,
	0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x40, 0x0a, 0x10, 0x75, 0x6e, 0x64, 0x6f, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0e, 0x75, 0x6e, 0x64, 0x6f, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x47, 0x0a, 0x18, 0x72, 0x65, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x66, 0x6f, 0x72,
	0x5f, 0x75, 0x6e, 0x64, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x15, 0x72, 0x65, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x46, 0x6f, 0x72, 0x55, 0x6e,
	0x64, 0x6f, 0x22, 0x66, 0x0a, 0x25, 0x49, 0x64, 0x65, 0x6d, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x3d, 0x0a, 0x12, 0x61,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x11, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe1, 0x01, 0x0a, 0x1d, 0x57,
	0x50, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x6f, 0x72, 0x6d, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x42, 0x0a, 0x05,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x54, 0x53,
	0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x75, 0x62, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x42, 0x61,
	0x73, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x12, 0x3d, 0x0a, 0x12, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x11, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3d, 0x0a, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x75,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55,
	0x55, 0x49, 0x44, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x43, 0x65, 0x6c, 0x6c, 0x55, 0x69, 0x64, 0x22, 0x65,
	0x0a, 0x27, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x75, 0x62, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x42, 0x61,
	0x73, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x3a, 0x0a, 0x12, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44,
	0x50, 0x61, 0x74, 0x68, 0x52, 0x0f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49,
	0x64, 0x50, 0x61, 0x74, 0x68, 0x22, 0x6a, 0x0a, 0x24, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x42, 0x0a,
	0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x54,
	0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x75, 0x62, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x42,
	0x61, 0x73, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x22, 0xa4, 0x02, 0x0a, 0x26, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x65, 0x6c,
	0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x6f, 0x72, 0x6d, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x42, 0x0a, 0x05,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x54, 0x53,
	0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x75, 0x62, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x42, 0x61,
	0x73, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x12, 0x34, 0x0a, 0x09, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x75, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x55, 0x49,
	0x44, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x08, 0x63, 0x65,
	0x6c, 0x6c, 0x55, 0x69, 0x64, 0x73, 0x12, 0x3d, 0x0a, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x43, 0x65,
	0x6c, 0x6c, 0x55, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f,
	0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x54, 0x53, 0x43, 0x45, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x22, 0xa2, 0x02, 0x0a, 0x24, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x43, 0x65, 0x6c, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x12, 0x42, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x75, 0x62, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x09, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x75, 0x69,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x43,
	0x65, 0x6c, 0x6c, 0x55, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x08, 0x63, 0x65, 0x6c, 0x6c, 0x55, 0x69, 0x64, 0x73, 0x12, 0x3d, 0x0a, 0x0f, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x43,
	0x6f, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0d, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x43, 0x65, 0x6c, 0x6c, 0x55, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0e, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x43, 0x6f,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x22, 0xda, 0x02,
	0x0a, 0x21, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x12, 0x42, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x75,
	0x62, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x6f, 0x72, 0x6d, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x09, 0x63, 0x65, 0x6c, 0x6c, 0x5f,
	0x75, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x54, 0x53, 0x54,
	0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x55, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x08, 0x63, 0x65, 0x6c, 0x6c, 0x55, 0x69, 0x64, 0x73, 0x12, 0x3d, 0x0a,
	0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x75, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49,
	0x44, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0d, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x43, 0x65, 0x6c, 0x6c, 0x55, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x0f,
	0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44,
	0x43, 0x6f, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0d, 0x61, 0x6e,
	0x63, 0x68, 0x6f, 0x72, 0x43, 0x65, 0x6c, 0x6c, 0x55, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x0f, 0x63,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x43,
	0x6f, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0d, 0x63, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x43, 0x65, 0x6c, 0x6c, 0x55, 0x69, 0x64, 0x22, 0xa6, 0x01, 0x0a, 0x21, 0x53,
	0x74, 0x72, 0x6f, 0x6b, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x12, 0x42, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x75, 0x62, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d,
	0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x12, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64,
	0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x11, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xd9, 0x01, 0x0a, 0x24, 0x52, 0x6f, 0x77, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x6f, 0x72, 0x6d, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x42, 0x0a, 0x05,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x54, 0x53,
	0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x75, 0x62, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x42, 0x61,
	0x73, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x12, 0x40, 0x0a, 0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2b, 0x0a, 0x0c, 0x72, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6c, 0x5f, 0x75, 0x69,
	0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55,
	0x55, 0x49, 0x44, 0x52, 0x0a, 0x72, 0x6f, 0x77, 0x43, 0x6f, 0x6c, 0x55, 0x69, 0x64, 0x73, 0x22,
	0xa5, 0x03, 0x0a, 0x1e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x6f, 0x77, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x12, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f,
	0x72, 0x6f, 0x77, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x10, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x52, 0x6f, 0x77, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x17,
	0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x6f,
	0x77, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x14, 0x75, 0x6e, 0x64, 0x6f, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x6f, 0x77, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x32,
	0x0a, 0x0d, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x05, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x63, 0x65, 0x6c, 0x6c, 0x44, 0x69, 0x66, 0x66, 0x4d,
	0x61, 0x70, 0x12, 0x3b, 0x0a, 0x12, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f,
	0x64, 0x69, 0x66, 0x66, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0f,
	0x75, 0x6e, 0x64, 0x6f, 0x43, 0x65, 0x6c, 0x6c, 0x44, 0x69, 0x66, 0x66, 0x4d, 0x61, 0x70, 0x12,
	0x46, 0x0a, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x54, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x22, 0xf1, 0x01, 0x0a, 0x31, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a,
	0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54,
	0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x42, 0x0a,
	0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x42, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x48, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x54, 0x53, 0x54,
	0x2e, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6c,
	0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xbd, 0x03, 0x0a, 0x2d,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x50, 0x65,
	0x6e, 0x63, 0x69, 0x6c, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f,
	0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a,
	0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54,
	0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x41, 0x0a,
	0x0c, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c,
	0x61, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x4c, 0x0a, 0x13, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x5f, 0x74, 0x6f, 0x5f,
	0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x54, 0x53, 0x43, 0x45, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x46, 0x6f, 0x72,
	0x55, 0x6e, 0x64, 0x6f, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x11, 0x66, 0x6f, 0x72,
	0x6d, 0x75, 0x6c, 0x61, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0x73,
	0x0a, 0x14, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x66, 0x6f,
	0x72, 0x5f, 0x75, 0x6e, 0x64, 0x6f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x54,
	0x53, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x50, 0x65, 0x6e, 0x63, 0x69, 0x6c, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x69, 0x72, 0x52,
	0x12, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x55,
	0x6e, 0x64, 0x6f, 0x1a, 0x56, 0x0a, 0x0e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x69, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2e, 0x0a, 0x0a, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb8, 0x15, 0x0a, 0x20,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x69, 0x76, 0x6f, 0x74, 0x53, 0x65, 0x74, 0x50,
	0x69, 0x76, 0x6f, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x12, 0x2e, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x12, 0x49, 0x0a, 0x1c, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70,
	0x69, 0x76, 0x6f, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x75, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49,
	0x44, 0x52, 0x18, 0x6e, 0x65, 0x77, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x69, 0x76, 0x6f,
	0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x55, 0x69, 0x64, 0x12, 0x47, 0x0a, 0x11, 0x6e,
	0x65, 0x77, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x0f, 0x6e, 0x65, 0x77, 0x52, 0x6f, 0x77, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x47, 0x0a, 0x11, 0x6f, 0x6c, 0x64, 0x5f, 0x72, 0x6f, 0x77, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0f, 0x6f, 0x6c,
	0x64, 0x52, 0x6f, 0x77, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x4d, 0x0a,
	0x14, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53,
	0x54, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x12, 0x6e, 0x65, 0x77, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x4d, 0x0a, 0x14,
	0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x54,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x12, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x46, 0x0a, 0x0e, 0x6e,
	0x65, 0x77, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x0d, 0x6e, 0x65, 0x77, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0e, 0x6f, 0x6c, 0x64, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x54, 0x53,
	0x54, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0d, 0x6f, 0x6c,
	0x64, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x18, 0x6e,
	0x65, 0x77, 0x5f, 0x66, 0x6c, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69,
	0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x16, 0x6e, 0x65, 0x77, 0x46, 0x6c,
	0x61, 0x74, 0x74, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x54, 0x0a, 0x18, 0x6f, 0x6c, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x74, 0x74, 0x65, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x16, 0x6f, 0x6c, 0x64, 0x46, 0x6c, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x69,
	0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x14, 0x6e, 0x65, 0x77, 0x5f, 0x70,
	0x69, 0x76, 0x6f, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x11, 0x6e, 0x65, 0x77, 0x50, 0x69, 0x76, 0x6f, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x3f, 0x0a, 0x14, 0x6f, 0x6c, 0x64, 0x5f,
	0x70, 0x69, 0x76, 0x6f, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x11, 0x6f, 0x6c, 0x64, 0x50, 0x69, 0x76, 0x6f, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x3c, 0x0a, 0x15, 0x6e, 0x65, 0x77,
	0x5f, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x75,
	0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55,
	0x55, 0x49, 0x44, 0x52, 0x12, 0x6e, 0x65, 0x77, 0x50, 0x69, 0x76, 0x6f, 0x74, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x55, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x15, 0x6f, 0x6c, 0x64, 0x5f, 0x70,
	0x69, 0x76, 0x6f, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x75, 0x69, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49,
	0x44, 0x52, 0x12, 0x6f, 0x6c, 0x64, 0x50, 0x69, 0x76, 0x6f, 0x74, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x55, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x69, 0x76,
	0x6f, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x6e, 0x65, 0x77, 0x50,
	0x69, 0x76, 0x6f, 0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x3d, 0x0a, 0x1b, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x69, 0x76, 0x6f,
	0x74, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x6f, 0x6c, 0x64, 0x50, 0x69,
	0x76, 0x6f, 0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x36, 0x0a, 0x0f, 0x6e, 0x65, 0x77, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x6e, 0x65,
	0x77, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x61, 0x70, 0x12, 0x36, 0x0a, 0x0f, 0x6f,
	0x6c, 0x64, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x6f, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x4d, 0x61, 0x70, 0x12, 0x36, 0x0a, 0x12, 0x6e, 0x65, 0x77, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f,
	0x72, 0x6f, 0x77, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0f, 0x6e, 0x65, 0x77, 0x56,
	0x69, 0x65, 0x77, 0x52, 0x6f, 0x77, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x12, 0x6f,
	0x6c, 0x64, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55,
	0x49, 0x44, 0x52, 0x0f, 0x6f, 0x6c, 0x64, 0x56, 0x69, 0x65, 0x77, 0x52, 0x6f, 0x77, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x15, 0x6e, 0x65, 0x77, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x15, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x12, 0x6e,
	0x65, 0x77, 0x56, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x3c, 0x0a, 0x15, 0x6f, 0x6c, 0x64, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x12, 0x6f, 0x6c, 0x64,
	0x56, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x42, 0x0a, 0x18, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64,
	0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x15, 0x6e, 0x65,
	0x77, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x52, 0x6f, 0x77, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x12, 0x42, 0x0a, 0x18, 0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x61,
	0x70, 0x73, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18,
	0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44,
	0x52, 0x15, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x52, 0x6f,
	0x77, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x48, 0x0a, 0x1b, 0x6e, 0x65, 0x77, 0x5f, 0x63,
	0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x18, 0x6e, 0x65, 0x77, 0x43, 0x6f, 0x6c, 0x6c,
	0x61, 0x70, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x12, 0x48, 0x0a, 0x1b, 0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73,
	0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49,
	0x44, 0x52, 0x18, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x67, 0x0a, 0x1e, 0x6e,
	0x65, 0x77, 0x5f, 0x68, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x5f,
	0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x44, 0x69, 0x66, 0x66, 0x4d, 0x61,
	0x70, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1a, 0x6e, 0x65, 0x77, 0x48, 0x69, 0x65,
	0x72, 0x61, 0x72, 0x63, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x44, 0x69, 0x66,
	0x66, 0x4d, 0x61, 0x70, 0x12, 0x67, 0x0a, 0x1e, 0x6f, 0x6c, 0x64, 0x5f, 0x68, 0x69, 0x65, 0x72,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x64, 0x69,
	0x66, 0x66, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x54,
	0x53, 0x54, 0x2e, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x43,
	0x65, 0x6c, 0x6c, 0x44, 0x69, 0x66, 0x66, 0x4d, 0x61, 0x70, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x1a, 0x6f, 0x6c, 0x64, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x69, 0x63,
	0x61, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x44, 0x69, 0x66, 0x66, 0x4d, 0x61, 0x70, 0x12, 0x56, 0x0a,
	0x20, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x5f, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x75, 0x6e, 0x64,
	0x6f, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x1c, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61,
	0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x46, 0x6f,
	0x72, 0x55, 0x6e, 0x64, 0x6f, 0x12, 0x41, 0x0a, 0x12, 0x6e, 0x65, 0x77, 0x5f, 0x62, 0x6f, 0x64,
	0x79, 0x5f, 0x75, 0x69, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x65, 0x63, 0x74,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0f, 0x6e, 0x65, 0x77, 0x42, 0x6f, 0x64, 0x79,
	0x55, 0x69, 0x64, 0x54, 0x72, 0x61, 0x63, 0x74, 0x12, 0x41, 0x0a, 0x12, 0x6f, 0x6c, 0x64, 0x5f,
	0x62, 0x6f, 0x64, 0x79, 0x5f, 0x75, 0x69, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52,
	0x65, 0x63, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0f, 0x6f, 0x6c, 0x64, 0x42,
	0x6f, 0x64, 0x79, 0x55, 0x69, 0x64, 0x54, 0x72, 0x61, 0x63, 0x74, 0x12, 0x49, 0x0a, 0x1c, 0x6f,
	0x6c, 0x64, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x5f,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x18, 0x6f, 0x6c,
	0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x69, 0x76, 0x6f, 0x74, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x55, 0x69, 0x64, 0x12, 0x57, 0x0a, 0x24, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x69,
	0x76, 0x6f, 0x74, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x72,
	0x75, 0x6c, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52,
	0x1e, 0x6e, 0x65, 0x77, 0x50, 0x69, 0x76, 0x6f, 0x74, 0x52, 0x6f, 0x77, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x69, 0x64, 0x12,
	0x57, 0x0a, 0x24, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x5f, 0x72, 0x6f, 0x77,
	0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x1e, 0x6f, 0x6c, 0x64, 0x50, 0x69, 0x76,
	0x6f, 0x74, 0x52, 0x6f, 0x77, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x69, 0x64, 0x12, 0x56, 0x0a, 0x23, 0x6e, 0x65, 0x77, 0x5f,
	0x70, 0x69, 0x76, 0x6f, 0x74, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f,
	0x72, 0x75, 0x6c, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44,
	0x52, 0x1e, 0x6e, 0x65, 0x77, 0x50, 0x69, 0x76, 0x6f, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x69, 0x64,
	0x12, 0x56, 0x0a, 0x23, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x5f, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x1e, 0x6f, 0x6c, 0x64, 0x50, 0x69, 0x76,
	0x6f, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6e,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x26, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x75, 0x6e, 0x64, 0x6f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x89, 0x02, 0x0a, 0x2b, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x50, 0x69, 0x76, 0x6f, 0x74, 0x53, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x13, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x11,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x55, 0x69,
	0x64, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x6f, 0x6e, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6e, 0x6f, 0x6e,
	0x53, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x6e,
	0x64, 0x6f, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x75, 0x6e, 0x64, 0x6f, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xd5, 0x01, 0x0a, 0x26, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x69,
	0x76, 0x6f, 0x74, 0x48, 0x69, 0x64, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x47, 0x72, 0x61, 0x6e, 0x64,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a,
	0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54,
	0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x38, 0x0a,
	0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x69, 0x6d, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x09, 0x64, 0x69,
	0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x68, 0x69,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x48, 0x69,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x69, 0x73, 0x5f,
	0x68, 0x69, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x75, 0x6e,
	0x64, 0x6f, 0x49, 0x73, 0x48, 0x69, 0x64, 0x69, 0x6e, 0x67, 0x22, 0xa0, 0x07, 0x0a, 0x17, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x69, 0x76, 0x6f, 0x74, 0x53, 0x6f, 0x72, 0x74, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53, 0x54, 0x2e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x54, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x2c, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49,
	0x44, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x35,
	0x0a, 0x11, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x55, 0x55, 0x49, 0x44, 0x52, 0x0f, 0x75, 0x6e, 0x64, 0x6f, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x09, 0x72, 0x6f, 0x77, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55,
	0x55, 0x49, 0x44, 0x52, 0x08, 0x72, 0x6f, 0x77, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2f, 0x0a,
	0x0e, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44,
	0x52, 0x0c, 0x75, 0x6e, 0x64, 0x6f, 0x52, 0x6f, 0x77, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x5d,
	0x0a, 0x27, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x5f, 0x72,
	0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x21, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x50, 0x69, 0x76, 0x6f, 0x74, 0x52, 0x6f, 0x77, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x52, 0x75, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x69, 0x64, 0x12, 0x5c, 0x0a,
	0x26, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x5f, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x08, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x21, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x50, 0x69, 0x76, 0x6f, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x75,
	0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x69, 0x64, 0x12, 0x4b, 0x0a, 0x1d, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x09, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x19, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x69, 0x76, 0x6f, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x55, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x13, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44,
	0x52, 0x11, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x55, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x75, 0x6e, 0x64, 0x6f,
	0x5f, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x75, 0x6e, 0x64, 0x6f, 0x53, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x46, 0x0a, 0x1a, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x17, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x55, 0x69, 0x64, 0x12, 0x4f,
	0x0a, 0x1f, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x75, 0x69,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55,
	0x49, 0x44, 0x52, 0x1b, 0x75, 0x6e, 0x64, 0x6f, 0x53, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x55, 0x69, 0x64, 0x12,
	0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x6e, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x02, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x22, 0x96, 0x01,
	0x0a, 0x26, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0c, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x54, 0x53, 0x54, 0x2e,
	0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x22, 0xf1, 0x01, 0x0a, 0x22, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a,
	0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54,
	0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0c, 0x72, 0x65, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x54, 0x53, 0x54, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x52, 0x65, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0b,
	0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x5d, 0x0a, 0x1a, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x54, 0x53, 0x43, 0x45, 0x2e, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x55, 0x49, 0x44, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x17, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x69, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x2a, 0x69, 0x0a, 0x09, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x41, 0x72, 0x65, 0x61, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x41, 0x72, 0x65, 0x61, 0x42, 0x6f, 0x64, 0x79, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x41, 0x72, 0x65, 0x61, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x6f, 0x77,
	0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x65, 0x61, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x10, 0x03, 0x12, 0x16, 0x0a,
	0x12, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x65, 0x61, 0x46, 0x6f, 0x6f, 0x74, 0x65, 0x72,
	0x52, 0x6f, 0x77, 0x10, 0x04, 0x2a, 0x8b, 0x02, 0x0a, 0x13, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x41,
	0x72, 0x65, 0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a,
	0x22, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x65, 0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x6f, 0x77, 0x54, 0x6f, 0x42,
	0x6f, 0x64, 0x79, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x72,
	0x65, 0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79,
	0x54, 0x6f, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x6f, 0x77, 0x10, 0x02, 0x12, 0x26, 0x0a,
	0x22, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x65, 0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x77, 0x54, 0x6f, 0x42,
	0x6f, 0x64, 0x79, 0x10, 0x03, 0x12, 0x26, 0x0a, 0x22, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x72,
	0x65, 0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79,
	0x54, 0x6f, 0x46, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x77, 0x10, 0x04, 0x12, 0x29, 0x0a,
	0x25, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x65, 0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x54, 0x6f, 0x42, 0x6f, 0x64, 0x79, 0x10, 0x05, 0x12, 0x29, 0x0a, 0x25, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x41, 0x72, 0x65, 0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x6f, 0x64, 0x79, 0x54, 0x6f, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x10, 0x06, 0x2a, 0xc4, 0x01, 0x0a, 0x1b, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x6f,
	0x77, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x45,
	0x6e, 0x75, 0x6d, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x6f, 0x77,
	0x54, 0x79, 0x70, 0x65, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x6f, 0x77, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x52, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x6f, 0x77,
	0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x6f, 0x77, 0x54,
	0x79, 0x70, 0x65, 0x46, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x77, 0x10, 0x03, 0x12, 0x1d,
	0x0a, 0x19, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x10, 0x04, 0x12, 0x1b, 0x0a,
	0x17, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x42, 0x6f,
	0x64, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x10, 0x05, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x2f,
	0x6b, 0x70, 0x62,
}

var (
	file_TSTCommandArchives_proto_rawDescOnce sync.Once
	file_TSTCommandArchives_proto_rawDescData = file_TSTCommandArchives_proto_rawDesc
)

func file_TSTCommandArchives_proto_rawDescGZIP() []byte {
	file_TSTCommandArchives_proto_rawDescOnce.Do(func() {
		file_TSTCommandArchives_proto_rawDescData = protoimpl.X.CompressGZIP(file_TSTCommandArchives_proto_rawDescData)
	})
	return file_TSTCommandArchives_proto_rawDescData
}

var file_TSTCommandArchives_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_TSTCommandArchives_proto_msgTypes = make([]protoimpl.MessageInfo, 109)
var file_TSTCommandArchives_proto_goTypes = []interface{}{
	(TableArea)(0),                                                       // 0: TST.TableArea
	(TableAreaTransition)(0),                                             // 1: TST.TableAreaTransition
	(ColumnRowBundleItemTypeEnum)(0),                                     // 2: TST.ColumnRowBundleItemTypeEnum
	(*TableCommandArchive)(nil),                                          // 3: TST.TableCommandArchive
	(*CommandApplyCellContentsArchive)(nil),                              // 4: TST.CommandApplyCellContentsArchive
	(*CommandApplyCellDiffMapArchive)(nil),                               // 5: TST.CommandApplyCellDiffMapArchive
	(*CommandApplyCellMapArchive)(nil),                                   // 6: TST.CommandApplyCellMapArchive
	(*CommandApplyConcurrentCellMapArchive)(nil),                         // 7: TST.CommandApplyConcurrentCellMapArchive
	(*CommandChangeFreezeHeaderStateArchive)(nil),                        // 8: TST.CommandChangeFreezeHeaderStateArchive
	(*CommandDeleteCellsArchive)(nil),                                    // 9: TST.CommandDeleteCellsArchive
	(*CommandDeleteCellContentsArchive)(nil),                             // 10: TST.CommandDeleteCellContentsArchive
	(*CommandMutateCellFormatArchive)(nil),                               // 11: TST.CommandMutateCellFormatArchive
	(*CommandSetAutomaticDurationUnitsArchive)(nil),                      // 12: TST.CommandSetAutomaticDurationUnitsArchive
	(*CommandSetDurationStyleArchive)(nil),                               // 13: TST.CommandSetDurationStyleArchive
	(*CommandSetDurationUnitSmallestLargestArchive)(nil),                 // 14: TST.CommandSetDurationUnitSmallestLargestArchive
	(*TSTCommandReplaceCustomFormatArchive)(nil),                         // 15: TST.TSTCommandReplaceCustomFormatArchive
	(*CommandMoveCellsArchive)(nil),                                      // 16: TST.CommandMoveCellsArchive
	(*ColumnRowMetadataArchive)(nil),                                     // 17: TST.ColumnRowMetadataArchive
	(*CommandInsertColumnsOrRowsArchive)(nil),                            // 18: TST.CommandInsertColumnsOrRowsArchive
	(*ColumnRowBundleArchive)(nil),                                       // 19: TST.ColumnRowBundleArchive
	(*CommandRemoveColumnsOrRowsArchive)(nil),                            // 20: TST.CommandRemoveColumnsOrRowsArchive
	(*CommandRowColumnRangeArchive)(nil),                                 // 21: TST.CommandRowColumnRangeArchive
	(*CommandResizeColumnOrRowArchive)(nil),                              // 22: TST.CommandResizeColumnOrRowArchive
	(*CommandCategoryResizeColumnOrRowArchive)(nil),                      // 23: TST.CommandCategoryResizeColumnOrRowArchive
	(*CommandHideShowArchive)(nil),                                       // 24: TST.CommandHideShowArchive
	(*CommandTextPreflightInsertCellArchive)(nil),                        // 25: TST.CommandTextPreflightInsertCellArchive
	(*CommandPostflightSetCellArchive)(nil),                              // 26: TST.CommandPostflightSetCellArchive
	(*CommandChangeTableAreaForColumnOrRowArchive)(nil),                  // 27: TST.CommandChangeTableAreaForColumnOrRowArchive
	(*CommandSetPencilAnnotationsArchive)(nil),                           // 28: TST.CommandSetPencilAnnotationsArchive
	(*CommandSetTableNameArchive)(nil),                                   // 29: TST.CommandSetTableNameArchive
	(*CommandSetTableNameEnabledArchive)(nil),                            // 30: TST.CommandSetTableNameEnabledArchive
	(*CommandSetTableFontSizeArchive)(nil),                               // 31: TST.CommandSetTableFontSizeArchive
	(*CommandSetTableFontNameArchive)(nil),                               // 32: TST.CommandSetTableFontNameArchive
	(*CommandSetTableNameHeightArchive)(nil),                             // 33: TST.CommandSetTableNameHeightArchive
	(*CommandSetNowArchive)(nil),                                         // 34: TST.CommandSetNowArchive
	(*CommandSetWasCutArchive)(nil),                                      // 35: TST.CommandSetWasCutArchive
	(*CommandStyleCellsArchive)(nil),                                     // 36: TST.CommandStyleCellsArchive
	(*CommandStyleTableArchive)(nil),                                     // 37: TST.CommandStyleTableArchive
	(*CommandSetRepeatingHeaderEnabledArchive)(nil),                      // 38: TST.CommandSetRepeatingHeaderEnabledArchive
	(*CommandSetFiltersEnabledArchive)(nil),                              // 39: TST.CommandSetFiltersEnabledArchive
	(*CommandAddTableStylePresetArchive)(nil),                            // 40: TST.CommandAddTableStylePresetArchive
	(*CommandRemoveTableStylePresetArchive)(nil),                         // 41: TST.CommandRemoveTableStylePresetArchive
	(*CommandReplaceTableStylePresetArchive)(nil),                        // 42: TST.CommandReplaceTableStylePresetArchive
	(*CommandApplyTableStylePresetArchive)(nil),                          // 43: TST.CommandApplyTableStylePresetArchive
	(*CommandSetBaseArchive)(nil),                                        // 44: TST.CommandSetBaseArchive
	(*CommandSetBasePlacesArchive)(nil),                                  // 45: TST.CommandSetBasePlacesArchive
	(*CommandSetBaseUseMinusSignArchive)(nil),                            // 46: TST.CommandSetBaseUseMinusSignArchive
	(*CommandSetCurrencyCodeArchive)(nil),                                // 47: TST.CommandSetCurrencyCodeArchive
	(*CommandSetFractionAccuracyArchive)(nil),                            // 48: TST.CommandSetFractionAccuracyArchive
	(*CommandSetNegativeNumberStyleArchive)(nil),                         // 49: TST.CommandSetNegativeNumberStyleArchive
	(*CommandSetNumberOfDecimalPlacesArchive)(nil),                       // 50: TST.CommandSetNumberOfDecimalPlacesArchive
	(*CommandSetDateTimeFormatArchive)(nil),                              // 51: TST.CommandSetDateTimeFormatArchive
	(*CommandSetShowThousandsSeparatorArchive)(nil),                      // 52: TST.CommandSetShowThousandsSeparatorArchive
	(*CommandSetUseAccountingStyleArchive)(nil),                          // 53: TST.CommandSetUseAccountingStyleArchive
	(*CommandSetRangeControlMinMaxIncArchive)(nil),                       // 54: TST.CommandSetRangeControlMinMaxIncArchive
	(*CommandMoveColumnsOrRowsArchive)(nil),                              // 55: TST.CommandMoveColumnsOrRowsArchive
	(*CommandSortArchive)(nil),                                           // 56: TST.CommandSortArchive
	(*FormulaRewriteSpecArchive)(nil),                                    // 57: TST.FormulaRewriteSpecArchive
	(*CommandRewriteFormulasForTransposeArchive)(nil),                    // 58: TST.CommandRewriteFormulasForTransposeArchive
	(*CommandRewriteTableFormulasForRewriteSpecArchive)(nil),             // 59: TST.CommandRewriteTableFormulasForRewriteSpecArchive
	(*CommandRewriteMergeFormulasArchive)(nil),                           // 60: TST.CommandRewriteMergeFormulasArchive
	(*CommandRewriteCategoryFormulasArchive)(nil),                        // 61: TST.CommandRewriteCategoryFormulasArchive
	(*CommandRewriteFilterFormulasForTableResizeArchive)(nil),            // 62: TST.CommandRewriteFilterFormulasForTableResizeArchive
	(*CommandRewriteFilterFormulasForRewriteSpecArchive)(nil),            // 63: TST.CommandRewriteFilterFormulasForRewriteSpecArchive
	(*CommandRewriteConditionalStylesForRewriteSpecArchive)(nil),         // 64: TST.CommandRewriteConditionalStylesForRewriteSpecArchive
	(*CommandRewritePivotOwnerFormulasArchive)(nil),                      // 65: TST.CommandRewritePivotOwnerFormulasArchive
	(*CommandMergeArchive)(nil),                                          // 66: TST.CommandMergeArchive
	(*CommandInverseMergeArchive)(nil),                                   // 67: TST.CommandInverseMergeArchive
	(*CommandUnmergeArchive)(nil),                                        // 68: TST.CommandUnmergeArchive
	(*CommandChooseTableIdRemapperArchive)(nil),                          // 69: TST.CommandChooseTableIdRemapperArchive
	(*CommandCategorySetGroupingColumnsArchive)(nil),                     // 70: TST.CommandCategorySetGroupingColumnsArchive
	(*FormulaEditingCommandGroupArchive)(nil),                            // 71: TST.FormulaEditingCommandGroupArchive
	(*FormulaEditingCommandSelectionBehaviorArchive)(nil),                // 72: TST.FormulaEditingCommandSelectionBehaviorArchive
	(*TableCommandSelectionBehaviorArchive)(nil),                         // 73: TST.TableCommandSelectionBehaviorArchive
	(*CommandApplyCellCommentArchive)(nil),                               // 74: TST.CommandApplyCellCommentArchive
	(*CommandSetFormulaTokenizationArchive)(nil),                         // 75: TST.CommandSetFormulaTokenizationArchive
	(*CommandSetFilterSetTypeArchive)(nil),                               // 76: TST.CommandSetFilterSetTypeArchive
	(*CommandSetTextStyleArchive)(nil),                                   // 77: TST.CommandSetTextStyleArchive
	(*CommandSetTextStylePropertiesArchive)(nil),                         // 78: TST.CommandSetTextStylePropertiesArchive
	(*CommandJustForNotifyingArchive)(nil),                               // 79: TST.CommandJustForNotifyingArchive
	(*CommandSetStorageLanguageArchive)(nil),                             // 80: TST.CommandSetStorageLanguageArchive
	(*CommandSetSortOrderArchive)(nil),                                   // 81: TST.CommandSetSortOrderArchive
	(*CommandSetGroupSortOrderArchive)(nil),                              // 82: TST.CommandSetGroupSortOrderArchive
	(*CommandRewriteSortOrderForTableResizeArchive)(nil),                 // 83: TST.CommandRewriteSortOrderForTableResizeArchive
	(*CommandRewriteSortOrderForRewriteSpecArchive)(nil),                 // 84: TST.CommandRewriteSortOrderForRewriteSpecArchive
	(*CommandSetFilterSetArchive)(nil),                                   // 85: TST.CommandSetFilterSetArchive
	(*ColumnRowRestoreDataArchive)(nil),                                  // 86: TST.ColumnRowRestoreDataArchive
	(*CommandTransposeTableArchive)(nil),                                 // 87: TST.CommandTransposeTableArchive
	(*CommandSetStructuredTextImportRecordArchive)(nil),                  // 88: TST.CommandSetStructuredTextImportRecordArchive
	(*CommandCategoryCollapseExpandGroupArchive)(nil),                    // 89: TST.CommandCategoryCollapseExpandGroupArchive
	(*CommandCategoryChangeSummaryAggregateType)(nil),                    // 90: TST.CommandCategoryChangeSummaryAggregateType
	(*CommandCategorySetLabelRowVisibility)(nil),                         // 91: TST.CommandCategorySetLabelRowVisibility
	(*CommandCategoryWillChangeGroupValue)(nil),                          // 92: TST.CommandCategoryWillChangeGroupValue
	(*IdempotentSelectionTransformerArchive)(nil),                        // 93: TST.IdempotentSelectionTransformerArchive
	(*WPSelectionTransformerArchive)(nil),                                // 94: TST.WPSelectionTransformerArchive
	(*TableSubSelectionTransformerBaseArchive)(nil),                      // 95: TST.TableSubSelectionTransformerBaseArchive
	(*TableNameSelectionTransformerArchive)(nil),                         // 96: TST.TableNameSelectionTransformerArchive
	(*ControlCellSelectionTransformerArchive)(nil),                       // 97: TST.ControlCellSelectionTransformerArchive
	(*StockCellSelectionTransformerArchive)(nil),                         // 98: TST.StockCellSelectionTransformerArchive
	(*RegionSelectionTransformerArchive)(nil),                            // 99: TST.RegionSelectionTransformerArchive
	(*StrokeSelectionTransformerArchive)(nil),                            // 100: TST.StrokeSelectionTransformerArchive
	(*RowColumnSelectionTransformerArchive)(nil),                         // 101: TST.RowColumnSelectionTransformerArchive
	(*CommandCategoryMoveRowsArchive)(nil),                               // 102: TST.CommandCategoryMoveRowsArchive
	(*CommandRewriteHiddenStatesForGroupByChangeArchive)(nil),            // 103: TST.CommandRewriteHiddenStatesForGroupByChangeArchive
	(*CommandRewritePencilAnnotationFormulasArchive)(nil),                // 104: TST.CommandRewritePencilAnnotationFormulasArchive
	(*CommandPivotSetPivotRulesArchive)(nil),                             // 105: TST.CommandPivotSetPivotRulesArchive
	(*CommandPivotSetGroupingColumnOptionsArchive)(nil),                  // 106: TST.CommandPivotSetGroupingColumnOptionsArchive
	(*CommandPivotHideShowGrandTotalsArchive)(nil),                       // 107: TST.CommandPivotHideShowGrandTotalsArchive
	(*CommandPivotSortArchive)(nil),                                      // 108: TST.CommandPivotSortArchive
	(*CommandRewriteTrackedReferencesArchive)(nil),                       // 109: TST.CommandRewriteTrackedReferencesArchive
	(*CommandExtendTableIDHistoryArchive)(nil),                           // 110: TST.CommandExtendTableIDHistoryArchive
	(*CommandRewritePencilAnnotationFormulasArchive_AnnotationPair)(nil), // 111: TST.CommandRewritePencilAnnotationFormulasArchive.AnnotationPair
	(*CommandArchive)(nil),                                               // 112: TSK.CommandArchive
	(*UUIDPath)(nil),                                                     // 113: TSP.UUIDPath
	(*Reference)(nil),                                                    // 114: TSP.Reference
	(*UUID)(nil),                                                         // 115: TSP.UUID
	(TableDimensionArchive)(0),                                           // 116: TST.TableDimensionArchive
	(*CellUIDRegionArchive)(nil),                                         // 117: TST.CellUIDRegionArchive
	(*CellUIDListArchive)(nil),                                           // 118: TST.CellUIDListArchive
	(*UUIDRectArchive)(nil),                                              // 119: TSP.UUIDRectArchive
	(*MergeOperationArchive)(nil),                                        // 120: TST.MergeOperationArchive
	(*TableSortOrderUIDArchive)(nil),                                     // 121: TST.TableSortOrderUIDArchive
	(HideShowActionArchive)(0),                                           // 122: TST.HideShowActionArchive
	(*Cell)(nil),                                                         // 123: TST.Cell
	(*UUIDCoordArchive)(nil),                                             // 124: TSP.UUIDCoordArchive
	(*SelectionPathArchive)(nil),                                         // 125: TSK.SelectionPathArchive
	(*FormulaArchive)(nil),                                               // 126: TSCE.FormulaArchive
	(*ReferenceDictionary)(nil),                                          // 127: TSP.ReferenceDictionary
	(*SelectionArchive)(nil),                                             // 128: TST.SelectionArchive
	(*TableStylePropertyChangeSetArchive)(nil),                           // 129: TSTSOS.TableStylePropertyChangeSetArchive
	(*ColumnOrRowUuidsInfoArchive)(nil),                                  // 130: TSCE.ColumnOrRowUuidsInfoArchive
	(*RegionMovedInfoArchive)(nil),                                       // 131: TSCE.RegionMovedInfoArchive
	(*RegionInfoArchive)(nil),                                            // 132: TSCE.RegionInfoArchive
	(*RewriteTableUIDInfoArchive)(nil),                                   // 133: TSCE.RewriteTableUIDInfoArchive
	(*TableTransposeInfoArchive)(nil),                                    // 134: TSCE.TableTransposeInfoArchive
	(*MergeOriginMovedArchive)(nil),                                      // 135: TSCE.MergeOriginMovedArchive
	(*MergeSourceArchive)(nil),                                           // 136: TSCE.MergeSourceArchive
	(*RewriteGroupNodeUIDInfoArchive)(nil),                               // 137: TSCE.RewriteGroupNodeUIDInfoArchive
	(*GroupByChangeArchive)(nil),                                         // 138: TSCE.GroupByChangeArchive
	(*FormulasForUndoArchive)(nil),                                       // 139: TSCE.FormulasForUndoArchive
	(*ImportWarningSetByCellRefArchive)(nil),                             // 140: TST.ImportWarningSetByCellRefArchive
	(*ExpandedCellRefObjectMapArchive)(nil),                              // 141: TSCE.ExpandedCellRefObjectMapArchive
	(*MultiTableRemapperArchive)(nil),                                    // 142: TST.MultiTableRemapperArchive
	(*GroupColumnListArchive)(nil),                                       // 143: TST.GroupColumnListArchive
	(*SummaryModelGroupByChangeStateArchive)(nil),                        // 144: TST.SummaryModelGroupByChangeStateArchive
	(*ColumnAggregateListArchive)(nil),                                   // 145: TST.ColumnAggregateListArchive
	(*ProgressiveCommandGroupArchive)(nil),                               // 146: TSK.ProgressiveCommandGroupArchive
	(*CommandSelectionBehaviorArchive)(nil),                              // 147: TSK.CommandSelectionBehaviorArchive
	(CommentCommandVariant)(0),                                           // 148: TSD.CommentCommandVariant
	(FilterSetArchive_FilterSetType)(0),                                  // 149: TST.FilterSetArchive.FilterSetType
	(*UndoTransaction)(nil),                                              // 150: TSWP.UndoTransaction
	(*TableSortOrderArchive)(nil),                                        // 151: TST.TableSortOrderArchive
	(*TableGroupSortOrderUIDArchive)(nil),                                // 152: TST.TableGroupSortOrderUIDArchive
	(*ExpandedCellRange)(nil),                                            // 153: TST.ExpandedCellRange
	(*CellRange)(nil),                                                    // 154: TST.CellRange
	(*StructuredTextImportRecord)(nil),                                   // 155: TST.StructuredTextImportRecord
	(*ExpandCollapseStateArchive)(nil),                                   // 156: TST.ExpandCollapseStateArchive
	(*CellValueArchive)(nil),                                             // 157: TSCE.CellValueArchive
	(*CellCoordinateArchive)(nil),                                        // 158: TSCE.CellCoordinateArchive
	(SelectionTypeArchive)(0),                                            // 159: TST.SelectionTypeArchive
	(*HierarchicalCellDiffMapArchive)(nil),                               // 160: TST.HierarchicalCellDiffMapArchive
}
var file_TSTCommandArchives_proto_depIdxs = []int32{
	112, // 0: TST.TableCommandArchive.super:type_name -> TSK.CommandArchive
	113, // 1: TST.TableCommandArchive.table_info_id_path:type_name -> TSP.UUIDPath
	114, // 2: TST.TableCommandArchive.default_cell_styles_container:type_name -> TSP.Reference
	3,   // 3: TST.CommandApplyCellContentsArchive.super:type_name -> TST.TableCommandArchive
	114, // 4: TST.CommandApplyCellContentsArchive.cell_diff_map:type_name -> TSP.Reference
	114, // 5: TST.CommandApplyCellContentsArchive.rollback_cell_diff_map:type_name -> TSP.Reference
	115, // 6: TST.CommandApplyCellContentsArchive.custom_format_keys:type_name -> TSP.UUID
	3,   // 7: TST.CommandApplyCellDiffMapArchive.super:type_name -> TST.TableCommandArchive
	114, // 8: TST.CommandApplyCellDiffMapArchive.cell_diff_map:type_name -> TSP.Reference
	114, // 9: TST.CommandApplyCellDiffMapArchive.inverse_cell_diff_map:type_name -> TSP.Reference
	115, // 10: TST.CommandApplyCellDiffMapArchive.custom_format_keys:type_name -> TSP.UUID
	3,   // 11: TST.CommandApplyCellMapArchive.super:type_name -> TST.TableCommandArchive
	114, // 12: TST.CommandApplyCellMapArchive.redo_cell_map:type_name -> TSP.Reference
	114, // 13: TST.CommandApplyCellMapArchive.undo_cell_map:type_name -> TSP.Reference
	114, // 14: TST.CommandApplyCellMapArchive.undo_formula_rewrite_command:type_name -> TSP.Reference
	115, // 15: TST.CommandApplyCellMapArchive.custom_format_keys:type_name -> TSP.UUID
	114, // 16: TST.CommandApplyCellMapArchive.formula_rewrite_commands:type_name -> TSP.Reference
	3,   // 17: TST.CommandApplyConcurrentCellMapArchive.super:type_name -> TST.TableCommandArchive
	114, // 18: TST.CommandApplyConcurrentCellMapArchive.redo_concurrent_cell_map:type_name -> TSP.Reference
	114, // 19: TST.CommandApplyConcurrentCellMapArchive.undo_concurrent_cell_map:type_name -> TSP.Reference
	114, // 20: TST.CommandApplyConcurrentCellMapArchive.undo_formula_rewrite_command:type_name -> TSP.Reference
	115, // 21: TST.CommandApplyConcurrentCellMapArchive.custom_format_keys:type_name -> TSP.UUID
	114, // 22: TST.CommandApplyConcurrentCellMapArchive.formula_rewrite_commands:type_name -> TSP.Reference
	3,   // 23: TST.CommandChangeFreezeHeaderStateArchive.super:type_name -> TST.TableCommandArchive
	116, // 24: TST.CommandChangeFreezeHeaderStateArchive.direction:type_name -> TST.TableDimensionArchive
	3,   // 25: TST.CommandDeleteCellsArchive.super:type_name -> TST.TableCommandArchive
	117, // 26: TST.CommandDeleteCellsArchive.cell_uid_region:type_name -> TST.CellUIDRegionArchive
	118, // 27: TST.CommandDeleteCellsArchive.summary_cell_uid_list:type_name -> TST.CellUIDListArchive
	114, // 28: TST.CommandDeleteCellsArchive.inverse_concurrent_cell_map:type_name -> TSP.Reference
	3,   // 29: TST.CommandDeleteCellContentsArchive.super:type_name -> TST.TableCommandArchive
	118, // 30: TST.CommandDeleteCellContentsArchive.cell_uid_list:type_name -> TST.CellUIDListArchive
	114, // 31: TST.CommandDeleteCellContentsArchive.inverse_cell_diff_map:type_name -> TSP.Reference
	3,   // 32: TST.CommandMutateCellFormatArchive.super:type_name -> TST.TableCommandArchive
	118, // 33: TST.CommandMutateCellFormatArchive.cell_uid_list:type_name -> TST.CellUIDListArchive
	114, // 34: TST.CommandMutateCellFormatArchive.inverse_cell_diff_map:type_name -> TSP.Reference
	114, // 35: TST.CommandMutateCellFormatArchive.whole_format_diff_map:type_name -> TSP.Reference
	11,  // 36: TST.CommandSetAutomaticDurationUnitsArchive.super:type_name -> TST.CommandMutateCellFormatArchive
	11,  // 37: TST.CommandSetDurationStyleArchive.super:type_name -> TST.CommandMutateCellFormatArchive
	11,  // 38: TST.CommandSetDurationUnitSmallestLargestArchive.super:type_name -> TST.CommandMutateCellFormatArchive
	114, // 39: TST.TSTCommandReplaceCustomFormatArchive.undo_diff_map:type_name -> TSP.Reference
	114, // 40: TST.TSTCommandReplaceCustomFormatArchive.commit_diff_map:type_name -> TSP.Reference
	3,   // 41: TST.TSTCommandReplaceCustomFormatArchive.super:type_name -> TST.TableCommandArchive
	3,   // 42: TST.CommandMoveCellsArchive.super:type_name -> TST.TableCommandArchive
	113, // 43: TST.CommandMoveCellsArchive.dst_table_info_id_path:type_name -> TSP.UUIDPath
	119, // 44: TST.CommandMoveCellsArchive.src_uid_range:type_name -> TSP.UUIDRectArchive
	119, // 45: TST.CommandMoveCellsArchive.dst_uid_range:type_name -> TSP.UUIDRectArchive
	116, // 46: TST.CommandMoveCellsArchive.table_dimension:type_name -> TST.TableDimensionArchive
	114, // 47: TST.CommandMoveCellsArchive.src_cell_map:type_name -> TSP.Reference
	114, // 48: TST.CommandMoveCellsArchive.dst_cell_map:type_name -> TSP.Reference
	114, // 49: TST.CommandMoveCellsArchive.dst_cell_styles_container:type_name -> TSP.Reference
	114, // 50: TST.CommandMoveCellsArchive.src_undo_cell_map:type_name -> TSP.Reference
	114, // 51: TST.CommandMoveCellsArchive.dst_undo_cell_map:type_name -> TSP.Reference
	114, // 52: TST.CommandMoveCellsArchive.formula_rewrite_commands:type_name -> TSP.Reference
	120, // 53: TST.CommandMoveCellsArchive.merge_action_to_restore:type_name -> TST.MergeOperationArchive
	118, // 54: TST.CommandMoveCellsArchive.comment_cell_uids_to_restore:type_name -> TST.CellUIDListArchive
	114, // 55: TST.CommandMoveCellsArchive.comment_storages_to_restore:type_name -> TSP.Reference
	114, // 56: TST.ColumnRowMetadataArchive.cell_style:type_name -> TSP.Reference
	114, // 57: TST.ColumnRowMetadataArchive.text_style:type_name -> TSP.Reference
	115, // 58: TST.ColumnRowMetadataArchive.uuid:type_name -> TSP.UUID
	3,   // 59: TST.CommandInsertColumnsOrRowsArchive.super:type_name -> TST.TableCommandArchive
	19,  // 60: TST.CommandInsertColumnsOrRowsArchive.bundle:type_name -> TST.ColumnRowBundleArchive
	114, // 61: TST.CommandInsertColumnsOrRowsArchive.cell_map:type_name -> TSP.Reference
	114, // 62: TST.CommandInsertColumnsOrRowsArchive.undo_commands:type_name -> TSP.Reference
	114, // 63: TST.CommandInsertColumnsOrRowsArchive.undo_cell_map:type_name -> TSP.Reference
	121, // 64: TST.CommandInsertColumnsOrRowsArchive.sort_order:type_name -> TST.TableSortOrderUIDArchive
	114, // 65: TST.CommandInsertColumnsOrRowsArchive.filter_set:type_name -> TSP.Reference
	115, // 66: TST.CommandInsertColumnsOrRowsArchive.undo_order:type_name -> TSP.UUID
	115, // 67: TST.CommandInsertColumnsOrRowsArchive.src_row_column_uid:type_name -> TSP.UUID
	115, // 68: TST.CommandInsertColumnsOrRowsArchive.opp_row_column_uid:type_name -> TSP.UUID
	19,  // 69: TST.CommandInsertColumnsOrRowsArchive.undo_bundle:type_name -> TST.ColumnRowBundleArchive
	115, // 70: TST.ColumnRowBundleArchive.view_uid_list:type_name -> TSP.UUID
	2,   // 71: TST.ColumnRowBundleArchive.view_type_list:type_name -> TST.ColumnRowBundleItemTypeEnum
	115, // 72: TST.ColumnRowBundleArchive.base_uid_list:type_name -> TSP.UUID
	2,   // 73: TST.ColumnRowBundleArchive.base_type_list:type_name -> TST.ColumnRowBundleItemTypeEnum
	115, // 74: TST.ColumnRowBundleArchive.category_order_uid_list:type_name -> TSP.UUID
	2,   // 75: TST.ColumnRowBundleArchive.category_order_type_list:type_name -> TST.ColumnRowBundleItemTypeEnum
	17,  // 76: TST.ColumnRowBundleArchive.metadata_list:type_name -> TST.ColumnRowMetadataArchive
	3,   // 77: TST.CommandRemoveColumnsOrRowsArchive.super:type_name -> TST.TableCommandArchive
	19,  // 78: TST.CommandRemoveColumnsOrRowsArchive.bundle:type_name -> TST.ColumnRowBundleArchive
	114, // 79: TST.CommandRemoveColumnsOrRowsArchive.cell_map:type_name -> TSP.Reference
	114, // 80: TST.CommandRemoveColumnsOrRowsArchive.undo_cell_map:type_name -> TSP.Reference
	114, // 81: TST.CommandRemoveColumnsOrRowsArchive.undo_filter_set:type_name -> TSP.Reference
	121, // 82: TST.CommandRemoveColumnsOrRowsArchive.undo_sort_order:type_name -> TST.TableSortOrderUIDArchive
	114, // 83: TST.CommandRemoveColumnsOrRowsArchive.formula_rewrite_command_for_undo:type_name -> TSP.Reference
	115, // 84: TST.CommandRemoveColumnsOrRowsArchive.undo_order:type_name -> TSP.UUID
	3,   // 85: TST.CommandRowColumnRangeArchive.super:type_name -> TST.TableCommandArchive
	115, // 86: TST.CommandRowColumnRangeArchive.uids:type_name -> TSP.UUID
	21,  // 87: TST.CommandResizeColumnOrRowArchive.super:type_name -> TST.CommandRowColumnRangeArchive
	3,   // 88: TST.CommandCategoryResizeColumnOrRowArchive.super:type_name -> TST.TableCommandArchive
	21,  // 89: TST.CommandHideShowArchive.super:type_name -> TST.CommandRowColumnRangeArchive
	122, // 90: TST.CommandHideShowArchive.hide_show_action:type_name -> TST.HideShowActionArchive
	122, // 91: TST.CommandHideShowArchive.hide_show_action_for_undo:type_name -> TST.HideShowActionArchive
	3,   // 92: TST.CommandTextPreflightInsertCellArchive.super:type_name -> TST.TableCommandArchive
	114, // 93: TST.CommandTextPreflightInsertCellArchive.coalesced_textcommand:type_name -> TSP.Reference
	114, // 94: TST.CommandTextPreflightInsertCellArchive.postflightcommand:type_name -> TSP.Reference
	123, // 95: TST.CommandTextPreflightInsertCellArchive.editing_cell:type_name -> TST.Cell
	114, // 96: TST.CommandTextPreflightInsertCellArchive.editing_storage:type_name -> TSP.Reference
	124, // 97: TST.CommandTextPreflightInsertCellArchive.cell_uid:type_name -> TSP.UUIDCoordArchive
	125, // 98: TST.CommandTextPreflightInsertCellArchive.archived_initial_selection_path:type_name -> TSK.SelectionPathArchive
	3,   // 99: TST.CommandPostflightSetCellArchive.super:type_name -> TST.TableCommandArchive
	114, // 100: TST.CommandPostflightSetCellArchive.childcommandundo:type_name -> TSP.Reference
	123, // 101: TST.CommandPostflightSetCellArchive.editing_cell:type_name -> TST.Cell
	123, // 102: TST.CommandPostflightSetCellArchive.new_cell:type_name -> TST.Cell
	114, // 103: TST.CommandPostflightSetCellArchive.editing_storage:type_name -> TSP.Reference
	124, // 104: TST.CommandPostflightSetCellArchive.cell_uid:type_name -> TSP.UUIDCoordArchive
	21,  // 105: TST.CommandChangeTableAreaForColumnOrRowArchive.super:type_name -> TST.CommandRowColumnRangeArchive
	1,   // 106: TST.CommandChangeTableAreaForColumnOrRowArchive.table_area_transition:type_name -> TST.TableAreaTransition
	114, // 107: TST.CommandChangeTableAreaForColumnOrRowArchive.cell_diff_map:type_name -> TSP.Reference
	114, // 108: TST.CommandChangeTableAreaForColumnOrRowArchive.undo_cell_diff_map:type_name -> TSP.Reference
	114, // 109: TST.CommandChangeTableAreaForColumnOrRowArchive.undo_commands:type_name -> TSP.Reference
	3,   // 110: TST.CommandSetPencilAnnotationsArchive.super:type_name -> TST.TableCommandArchive
	114, // 111: TST.CommandSetPencilAnnotationsArchive.annotations:type_name -> TSP.Reference
	126, // 112: TST.CommandSetPencilAnnotationsArchive.formulas:type_name -> TSCE.FormulaArchive
	126, // 113: TST.CommandSetPencilAnnotationsArchive.inverse_formulas:type_name -> TSCE.FormulaArchive
	114, // 114: TST.CommandSetTableNameArchive.newstyle:type_name -> TSP.Reference
	114, // 115: TST.CommandSetTableNameArchive.oldstyle:type_name -> TSP.Reference
	3,   // 116: TST.CommandSetTableNameArchive.super:type_name -> TST.TableCommandArchive
	114, // 117: TST.CommandSetTableNameArchive.old_shape_style:type_name -> TSP.Reference
	114, // 118: TST.CommandSetTableNameArchive.new_shape_style:type_name -> TSP.Reference
	3,   // 119: TST.CommandSetTableNameEnabledArchive.super:type_name -> TST.TableCommandArchive
	3,   // 120: TST.CommandSetTableFontSizeArchive.super:type_name -> TST.TableCommandArchive
	114, // 121: TST.CommandSetTableFontSizeArchive.cell_diff_map:type_name -> TSP.Reference
	114, // 122: TST.CommandSetTableFontSizeArchive.inverse_cell_diff_map:type_name -> TSP.Reference
	3,   // 123: TST.CommandSetTableFontNameArchive.super:type_name -> TST.TableCommandArchive
	114, // 124: TST.CommandSetTableFontNameArchive.previous_table_style:type_name -> TSP.Reference
	114, // 125: TST.CommandSetTableFontNameArchive.previous_text_styles:type_name -> TSP.Reference
	114, // 126: TST.CommandSetTableFontNameArchive.cell_diff_map:type_name -> TSP.Reference
	114, // 127: TST.CommandSetTableFontNameArchive.inverse_cell_diff_map:type_name -> TSP.Reference
	3,   // 128: TST.CommandSetTableNameHeightArchive.super:type_name -> TST.TableCommandArchive
	3,   // 129: TST.CommandSetNowArchive.super:type_name -> TST.TableCommandArchive
	3,   // 130: TST.CommandSetWasCutArchive.super:type_name -> TST.TableCommandArchive
	115, // 131: TST.CommandSetWasCutArchive.from_table_uid:type_name -> TSP.UUID
	115, // 132: TST.CommandSetWasCutArchive.prev_from_table_uid:type_name -> TSP.UUID
	115, // 133: TST.CommandSetWasCutArchive.from_group_by_uid:type_name -> TSP.UUID
	115, // 134: TST.CommandSetWasCutArchive.prev_from_group_by_uid:type_name -> TSP.UUID
	3,   // 135: TST.CommandStyleCellsArchive.super:type_name -> TST.TableCommandArchive
	127, // 136: TST.CommandStyleCellsArchive.format_properties:type_name -> TSP.ReferenceDictionary
	128, // 137: TST.CommandStyleCellsArchive.selection:type_name -> TST.SelectionArchive
	114, // 138: TST.CommandStyleCellsArchive.undo_cell_map:type_name -> TSP.Reference
	114, // 139: TST.CommandStyleCellsArchive.redo_cell_map:type_name -> TSP.Reference
	114, // 140: TST.CommandStyleCellsArchive.text_undo:type_name -> TSP.Reference
	3,   // 141: TST.CommandStyleTableArchive.super:type_name -> TST.TableCommandArchive
	127, // 142: TST.CommandStyleTableArchive.format_properties:type_name -> TSP.ReferenceDictionary
	129, // 143: TST.CommandStyleTableArchive.old_style:type_name -> TSTSOS.TableStylePropertyChangeSetArchive
	129, // 144: TST.CommandStyleTableArchive.new_style:type_name -> TSTSOS.TableStylePropertyChangeSetArchive
	116, // 145: TST.CommandSetRepeatingHeaderEnabledArchive.direction:type_name -> TST.TableDimensionArchive
	3,   // 146: TST.CommandSetRepeatingHeaderEnabledArchive.super:type_name -> TST.TableCommandArchive
	3,   // 147: TST.CommandSetFiltersEnabledArchive.super:type_name -> TST.TableCommandArchive
	115, // 148: TST.CommandSetFiltersEnabledArchive.rollback_uid_list:type_name -> TSP.UUID
	3,   // 149: TST.CommandAddTableStylePresetArchive.super:type_name -> TST.TableCommandArchive
	114, // 150: TST.CommandAddTableStylePresetArchive.table_styles:type_name -> TSP.Reference
	112, // 151: TST.CommandRemoveTableStylePresetArchive.super:type_name -> TSK.CommandArchive
	114, // 152: TST.CommandRemoveTableStylePresetArchive.theme:type_name -> TSP.Reference
	114, // 153: TST.CommandRemoveTableStylePresetArchive.removed_table_styles:type_name -> TSP.Reference
	112, // 154: TST.CommandReplaceTableStylePresetArchive.super:type_name -> TSK.CommandArchive
	114, // 155: TST.CommandReplaceTableStylePresetArchive.theme:type_name -> TSP.Reference
	114, // 156: TST.CommandReplaceTableStylePresetArchive.old_table_styles:type_name -> TSP.Reference
	114, // 157: TST.CommandReplaceTableStylePresetArchive.new_table_styles:type_name -> TSP.Reference
	3,   // 158: TST.CommandApplyTableStylePresetArchive.super:type_name -> TST.TableCommandArchive
	114, // 159: TST.CommandApplyTableStylePresetArchive.preset:type_name -> TSP.Reference
	114, // 160: TST.CommandApplyTableStylePresetArchive.styles:type_name -> TSP.Reference
	114, // 161: TST.CommandApplyTableStylePresetArchive.undo_preset:type_name -> TSP.Reference
	114, // 162: TST.CommandApplyTableStylePresetArchive.undo_styles:type_name -> TSP.Reference
	114, // 163: TST.CommandApplyTableStylePresetArchive.cell_diff_map:type_name -> TSP.Reference
	114, // 164: TST.CommandApplyTableStylePresetArchive.undo_cell_diff_map:type_name -> TSP.Reference
	17,  // 165: TST.CommandApplyTableStylePresetArchive.row_col_styles:type_name -> TST.ColumnRowMetadataArchive
	17,  // 166: TST.CommandApplyTableStylePresetArchive.undo_row_col_styles:type_name -> TST.ColumnRowMetadataArchive
	114, // 167: TST.CommandApplyTableStylePresetArchive.change_prop_map_wrapper:type_name -> TSP.Reference
	11,  // 168: TST.CommandSetBaseArchive.super:type_name -> TST.CommandMutateCellFormatArchive
	11,  // 169: TST.CommandSetBasePlacesArchive.super:type_name -> TST.CommandMutateCellFormatArchive
	11,  // 170: TST.CommandSetBaseUseMinusSignArchive.super:type_name -> TST.CommandMutateCellFormatArchive
	11,  // 171: TST.CommandSetCurrencyCodeArchive.super:type_name -> TST.CommandMutateCellFormatArchive
	11,  // 172: TST.CommandSetFractionAccuracyArchive.super:type_name -> TST.CommandMutateCellFormatArchive
	11,  // 173: TST.CommandSetNegativeNumberStyleArchive.super:type_name -> TST.CommandMutateCellFormatArchive
	11,  // 174: TST.CommandSetNumberOfDecimalPlacesArchive.super:type_name -> TST.CommandMutateCellFormatArchive
	11,  // 175: TST.CommandSetDateTimeFormatArchive.super:type_name -> TST.CommandMutateCellFormatArchive
	11,  // 176: TST.CommandSetShowThousandsSeparatorArchive.super:type_name -> TST.CommandMutateCellFormatArchive
	11,  // 177: TST.CommandSetUseAccountingStyleArchive.super:type_name -> TST.CommandMutateCellFormatArchive
	3,   // 178: TST.CommandSetRangeControlMinMaxIncArchive.super:type_name -> TST.TableCommandArchive
	114, // 179: TST.CommandSetRangeControlMinMaxIncArchive.cell_diff_map:type_name -> TSP.Reference
	118, // 180: TST.CommandSetRangeControlMinMaxIncArchive.cell_uid_list:type_name -> TST.CellUIDListArchive
	114, // 181: TST.CommandSetRangeControlMinMaxIncArchive.inverse_cell_diff_map:type_name -> TSP.Reference
	3,   // 182: TST.CommandMoveColumnsOrRowsArchive.super:type_name -> TST.TableCommandArchive
	115, // 183: TST.CommandMoveColumnsOrRowsArchive.dest_uid:type_name -> TSP.UUID
	115, // 184: TST.CommandMoveColumnsOrRowsArchive.undo_dest_uid:type_name -> TSP.UUID
	115, // 185: TST.CommandMoveColumnsOrRowsArchive.uids:type_name -> TSP.UUID
	116, // 186: TST.CommandMoveColumnsOrRowsArchive.direction:type_name -> TST.TableDimensionArchive
	114, // 187: TST.CommandMoveColumnsOrRowsArchive.formula_rewrite_command:type_name -> TSP.Reference
	3,   // 188: TST.CommandSortArchive.super:type_name -> TST.TableCommandArchive
	115, // 189: TST.CommandSortArchive.from_row_uids:type_name -> TSP.UUID
	115, // 190: TST.CommandSortArchive.to_row_uids:type_name -> TSP.UUID
	114, // 191: TST.CommandSortArchive.formula_rewrite_command:type_name -> TSP.Reference
	115, // 192: TST.FormulaRewriteSpecArchive.table_uid:type_name -> TSP.UUID
	115, // 193: TST.FormulaRewriteSpecArchive.cond_style_owner_uid:type_name -> TSP.UUID
	115, // 194: TST.FormulaRewriteSpecArchive.group_by_uid:type_name -> TSP.UUID
	130, // 195: TST.FormulaRewriteSpecArchive.column_or_row_uuids_info:type_name -> TSCE.ColumnOrRowUuidsInfoArchive
	130, // 196: TST.FormulaRewriteSpecArchive.aux_column_or_row_uuids_info:type_name -> TSCE.ColumnOrRowUuidsInfoArchive
	131, // 197: TST.FormulaRewriteSpecArchive.region_moved_info:type_name -> TSCE.RegionMovedInfoArchive
	132, // 198: TST.FormulaRewriteSpecArchive.region_info:type_name -> TSCE.RegionInfoArchive
	133, // 199: TST.FormulaRewriteSpecArchive.rewrite_table_id_info:type_name -> TSCE.RewriteTableUIDInfoArchive
	134, // 200: TST.FormulaRewriteSpecArchive.transposed_table_info:type_name -> TSCE.TableTransposeInfoArchive
	135, // 201: TST.FormulaRewriteSpecArchive.merge_origin_moved_info:type_name -> TSCE.MergeOriginMovedArchive
	136, // 202: TST.FormulaRewriteSpecArchive.merge_source:type_name -> TSCE.MergeSourceArchive
	137, // 203: TST.FormulaRewriteSpecArchive.group_node_info:type_name -> TSCE.RewriteGroupNodeUIDInfoArchive
	138, // 204: TST.FormulaRewriteSpecArchive.groupby_change:type_name -> TSCE.GroupByChangeArchive
	3,   // 205: TST.CommandRewriteFormulasForTransposeArchive.super:type_name -> TST.TableCommandArchive
	57,  // 206: TST.CommandRewriteFormulasForTransposeArchive.rewrite_spec:type_name -> TST.FormulaRewriteSpecArchive
	139, // 207: TST.CommandRewriteFormulasForTransposeArchive.formulas_to_rewrite:type_name -> TSCE.FormulasForUndoArchive
	140, // 208: TST.CommandRewriteFormulasForTransposeArchive.warningset_map:type_name -> TST.ImportWarningSetByCellRefArchive
	3,   // 209: TST.CommandRewriteTableFormulasForRewriteSpecArchive.super:type_name -> TST.TableCommandArchive
	57,  // 210: TST.CommandRewriteTableFormulasForRewriteSpecArchive.rewrite_spec:type_name -> TST.FormulaRewriteSpecArchive
	139, // 211: TST.CommandRewriteTableFormulasForRewriteSpecArchive.formulas_to_rewrite:type_name -> TSCE.FormulasForUndoArchive
	3,   // 212: TST.CommandRewriteMergeFormulasArchive.super:type_name -> TST.TableCommandArchive
	57,  // 213: TST.CommandRewriteMergeFormulasArchive.rewrite_spec:type_name -> TST.FormulaRewriteSpecArchive
	139, // 214: TST.CommandRewriteMergeFormulasArchive.formulas_to_rewrite:type_name -> TSCE.FormulasForUndoArchive
	3,   // 215: TST.CommandRewriteCategoryFormulasArchive.super:type_name -> TST.TableCommandArchive
	57,  // 216: TST.CommandRewriteCategoryFormulasArchive.rewrite_spec:type_name -> TST.FormulaRewriteSpecArchive
	139, // 217: TST.CommandRewriteCategoryFormulasArchive.formulas_to_rewrite:type_name -> TSCE.FormulasForUndoArchive
	3,   // 218: TST.CommandRewriteFilterFormulasForTableResizeArchive.super:type_name -> TST.TableCommandArchive
	3,   // 219: TST.CommandRewriteFilterFormulasForRewriteSpecArchive.super:type_name -> TST.TableCommandArchive
	114, // 220: TST.CommandRewriteFilterFormulasForRewriteSpecArchive.filter_set:type_name -> TSP.Reference
	57,  // 221: TST.CommandRewriteFilterFormulasForRewriteSpecArchive.rewrite_spec:type_name -> TST.FormulaRewriteSpecArchive
	3,   // 222: TST.CommandRewriteConditionalStylesForRewriteSpecArchive.super:type_name -> TST.TableCommandArchive
	57,  // 223: TST.CommandRewriteConditionalStylesForRewriteSpecArchive.rewrite_spec:type_name -> TST.FormulaRewriteSpecArchive
	139, // 224: TST.CommandRewriteConditionalStylesForRewriteSpecArchive.formulas_to_rewrite:type_name -> TSCE.FormulasForUndoArchive
	141, // 225: TST.CommandRewriteConditionalStylesForRewriteSpecArchive.conditional_style_sets:type_name -> TSCE.ExpandedCellRefObjectMapArchive
	3,   // 226: TST.CommandRewritePivotOwnerFormulasArchive.super:type_name -> TST.TableCommandArchive
	57,  // 227: TST.CommandRewritePivotOwnerFormulasArchive.rewrite_spec:type_name -> TST.FormulaRewriteSpecArchive
	139, // 228: TST.CommandRewritePivotOwnerFormulasArchive.formulas_to_rewrite:type_name -> TSCE.FormulasForUndoArchive
	3,   // 229: TST.CommandMergeArchive.super:type_name -> TST.TableCommandArchive
	118, // 230: TST.CommandMergeArchive.cell_uid_list:type_name -> TST.CellUIDListArchive
	114, // 231: TST.CommandMergeArchive.undo_cell_map:type_name -> TSP.Reference
	114, // 232: TST.CommandMergeArchive.undo_formula_rewrite_command:type_name -> TSP.Reference
	114, // 233: TST.CommandMergeArchive.commit_cell_map:type_name -> TSP.Reference
	6,   // 234: TST.CommandInverseMergeArchive.super:type_name -> TST.CommandApplyCellMapArchive
	124, // 235: TST.CommandInverseMergeArchive.merge_source_cell_uid:type_name -> TSP.UUIDCoordArchive
	3,   // 236: TST.CommandUnmergeArchive.super:type_name -> TST.TableCommandArchive
	119, // 237: TST.CommandUnmergeArchive.unmerge_uid_ranges:type_name -> TSP.UUIDRectArchive
	114, // 238: TST.CommandUnmergeArchive.undo_cell_map:type_name -> TSP.Reference
	114, // 239: TST.CommandUnmergeArchive.undo_formula_rewrite_command:type_name -> TSP.Reference
	112, // 240: TST.CommandChooseTableIdRemapperArchive.super:type_name -> TSK.CommandArchive
	142, // 241: TST.CommandChooseTableIdRemapperArchive.table_id_mapper:type_name -> TST.MultiTableRemapperArchive
	114, // 242: TST.CommandChooseTableIdRemapperArchive.formula_rewrite_command_for_undo:type_name -> TSP.Reference
	3,   // 243: TST.CommandCategorySetGroupingColumnsArchive.super:type_name -> TST.TableCommandArchive
	143, // 244: TST.CommandCategorySetGroupingColumnsArchive.new_grouping_columns:type_name -> TST.GroupColumnListArchive
	143, // 245: TST.CommandCategorySetGroupingColumnsArchive.old_grouping_columns:type_name -> TST.GroupColumnListArchive
	115, // 246: TST.CommandCategorySetGroupingColumnsArchive.base_row_order:type_name -> TSP.UUID
	115, // 247: TST.CommandCategorySetGroupingColumnsArchive.undo_base_row_order:type_name -> TSP.UUID
	115, // 248: TST.CommandCategorySetGroupingColumnsArchive.view_row_order:type_name -> TSP.UUID
	115, // 249: TST.CommandCategorySetGroupingColumnsArchive.undo_view_row_order:type_name -> TSP.UUID
	115, // 250: TST.CommandCategorySetGroupingColumnsArchive.collapse_state:type_name -> TSP.UUID
	115, // 251: TST.CommandCategorySetGroupingColumnsArchive.undo_collapse_state:type_name -> TSP.UUID
	144, // 252: TST.CommandCategorySetGroupingColumnsArchive.summary_change_state:type_name -> TST.SummaryModelGroupByChangeStateArchive
	144, // 253: TST.CommandCategorySetGroupingColumnsArchive.undo_summary_change_state:type_name -> TST.SummaryModelGroupByChangeStateArchive
	145, // 254: TST.CommandCategorySetGroupingColumnsArchive.new_column_aggregates:type_name -> TST.ColumnAggregateListArchive
	145, // 255: TST.CommandCategorySetGroupingColumnsArchive.old_column_aggregates:type_name -> TST.ColumnAggregateListArchive
	114, // 256: TST.CommandCategorySetGroupingColumnsArchive.undo_set_enabled_rewrite_command:type_name -> TSP.Reference
	114, // 257: TST.CommandCategorySetGroupingColumnsArchive.undo_set_columns_rewrite_command:type_name -> TSP.Reference
	114, // 258: TST.CommandCategorySetGroupingColumnsArchive.cell_diff_map:type_name -> TSP.Reference
	114, // 259: TST.CommandCategorySetGroupingColumnsArchive.undo_cell_diff_map:type_name -> TSP.Reference
	114, // 260: TST.CommandCategorySetGroupingColumnsArchive.undo_set_group_sort_order_command:type_name -> TSP.Reference
	146, // 261: TST.FormulaEditingCommandGroupArchive.super:type_name -> TSK.ProgressiveCommandGroupArchive
	147, // 262: TST.FormulaEditingCommandSelectionBehaviorArchive.super:type_name -> TSK.CommandSelectionBehaviorArchive
	147, // 263: TST.TableCommandSelectionBehaviorArchive.super:type_name -> TSK.CommandSelectionBehaviorArchive
	114, // 264: TST.TableCommandSelectionBehaviorArchive.table_info:type_name -> TSP.Reference
	115, // 265: TST.TableCommandSelectionBehaviorArchive.last_column_uid_hit_by_tap:type_name -> TSP.UUID
	3,   // 266: TST.CommandApplyCellCommentArchive.super:type_name -> TST.TableCommandArchive
	124, // 267: TST.CommandApplyCellCommentArchive.cell_uid:type_name -> TSP.UUIDCoordArchive
	114, // 268: TST.CommandApplyCellCommentArchive.old_comment_storage:type_name -> TSP.Reference
	114, // 269: TST.CommandApplyCellCommentArchive.new_comment_storage:type_name -> TSP.Reference
	148, // 270: TST.CommandApplyCellCommentArchive.forward_variant:type_name -> TSD.CommentCommandVariant
	148, // 271: TST.CommandApplyCellCommentArchive.inverse_variant:type_name -> TSD.CommentCommandVariant
	112, // 272: TST.CommandSetFormulaTokenizationArchive.super:type_name -> TSK.CommandArchive
	3,   // 273: TST.CommandSetFilterSetTypeArchive.super:type_name -> TST.TableCommandArchive
	149, // 274: TST.CommandSetFilterSetTypeArchive.old_filter_set_type:type_name -> TST.FilterSetArchive.FilterSetType
	149, // 275: TST.CommandSetFilterSetTypeArchive.new_filter_set_type:type_name -> TST.FilterSetArchive.FilterSetType
	115, // 276: TST.CommandSetFilterSetTypeArchive.rollback_uid_list:type_name -> TSP.UUID
	3,   // 277: TST.CommandSetTextStyleArchive.super:type_name -> TST.TableCommandArchive
	114, // 278: TST.CommandSetTextStyleArchive.cell_diff_map:type_name -> TSP.Reference
	114, // 279: TST.CommandSetTextStyleArchive.inverse_cell_diff_map:type_name -> TSP.Reference
	3,   // 280: TST.CommandSetTextStylePropertiesArchive.super:type_name -> TST.TableCommandArchive
	114, // 281: TST.CommandSetTextStylePropertiesArchive.cell_diff_map:type_name -> TSP.Reference
	114, // 282: TST.CommandSetTextStylePropertiesArchive.inverse_cell_diff_map:type_name -> TSP.Reference
	3,   // 283: TST.CommandJustForNotifyingArchive.super:type_name -> TST.TableCommandArchive
	112, // 284: TST.CommandSetStorageLanguageArchive.super:type_name -> TSK.CommandArchive
	114, // 285: TST.CommandSetStorageLanguageArchive.storage:type_name -> TSP.Reference
	150, // 286: TST.CommandSetStorageLanguageArchive.undo_transaction:type_name -> TSWP.UndoTransaction
	3,   // 287: TST.CommandSetSortOrderArchive.super:type_name -> TST.TableCommandArchive
	151, // 288: TST.CommandSetSortOrderArchive.old_sort_order:type_name -> TST.TableSortOrderArchive
	151, // 289: TST.CommandSetSortOrderArchive.new_sort_order:type_name -> TST.TableSortOrderArchive
	3,   // 290: TST.CommandSetGroupSortOrderArchive.super:type_name -> TST.TableCommandArchive
	152, // 291: TST.CommandSetGroupSortOrderArchive.old_group_sort_order:type_name -> TST.TableGroupSortOrderUIDArchive
	152, // 292: TST.CommandSetGroupSortOrderArchive.new_group_sort_order:type_name -> TST.TableGroupSortOrderUIDArchive
	3,   // 293: TST.CommandRewriteSortOrderForTableResizeArchive.super:type_name -> TST.TableCommandArchive
	151, // 294: TST.CommandRewriteSortOrderForTableResizeArchive.old_sort_order:type_name -> TST.TableSortOrderArchive
	151, // 295: TST.CommandRewriteSortOrderForTableResizeArchive.new_sort_order:type_name -> TST.TableSortOrderArchive
	3,   // 296: TST.CommandRewriteSortOrderForRewriteSpecArchive.super:type_name -> TST.TableCommandArchive
	57,  // 297: TST.CommandRewriteSortOrderForRewriteSpecArchive.rewrite_spec:type_name -> TST.FormulaRewriteSpecArchive
	151, // 298: TST.CommandRewriteSortOrderForRewriteSpecArchive.old_sort_order:type_name -> TST.TableSortOrderArchive
	151, // 299: TST.CommandRewriteSortOrderForRewriteSpecArchive.new_sort_order:type_name -> TST.TableSortOrderArchive
	3,   // 300: TST.CommandSetFilterSetArchive.super:type_name -> TST.TableCommandArchive
	114, // 301: TST.CommandSetFilterSetArchive.new_filter_set:type_name -> TSP.Reference
	114, // 302: TST.CommandSetFilterSetArchive.old_filter_set:type_name -> TSP.Reference
	115, // 303: TST.CommandSetFilterSetArchive.rollback_uid_list:type_name -> TSP.UUID
	115, // 304: TST.ColumnRowRestoreDataArchive.uid_list:type_name -> TSP.UUID
	17,  // 305: TST.ColumnRowRestoreDataArchive.metadatas:type_name -> TST.ColumnRowMetadataArchive
	3,   // 306: TST.CommandTransposeTableArchive.super:type_name -> TST.TableCommandArchive
	153, // 307: TST.CommandTransposeTableArchive.original_table_range:type_name -> TST.ExpandedCellRange
	114, // 308: TST.CommandTransposeTableArchive.original_cell_map:type_name -> TSP.Reference
	154, // 309: TST.CommandTransposeTableArchive.ineligible_merge_list:type_name -> TST.CellRange
	114, // 310: TST.CommandTransposeTableArchive.transposed_cell_map:type_name -> TSP.Reference
	114, // 311: TST.CommandTransposeTableArchive.undo_formula_rewrite_command:type_name -> TSP.Reference
	114, // 312: TST.CommandTransposeTableArchive.rich_text_subcommands:type_name -> TSP.Reference
	86,  // 313: TST.CommandTransposeTableArchive.column_restore_data:type_name -> TST.ColumnRowRestoreDataArchive
	86,  // 314: TST.CommandTransposeTableArchive.row_restore_data:type_name -> TST.ColumnRowRestoreDataArchive
	3,   // 315: TST.CommandSetStructuredTextImportRecordArchive.super:type_name -> TST.TableCommandArchive
	155, // 316: TST.CommandSetStructuredTextImportRecordArchive.new_import_record:type_name -> TST.StructuredTextImportRecord
	155, // 317: TST.CommandSetStructuredTextImportRecordArchive.old_import_record:type_name -> TST.StructuredTextImportRecord
	3,   // 318: TST.CommandCategoryCollapseExpandGroupArchive.super:type_name -> TST.TableCommandArchive
	143, // 319: TST.CommandCategoryCollapseExpandGroupArchive.grouping_columns:type_name -> TST.GroupColumnListArchive
	156, // 320: TST.CommandCategoryCollapseExpandGroupArchive.collapse_state:type_name -> TST.ExpandCollapseStateArchive
	156, // 321: TST.CommandCategoryCollapseExpandGroupArchive.undo_collapse_state:type_name -> TST.ExpandCollapseStateArchive
	3,   // 322: TST.CommandCategoryChangeSummaryAggregateType.super:type_name -> TST.TableCommandArchive
	115, // 323: TST.CommandCategoryChangeSummaryAggregateType.column_uid:type_name -> TSP.UUID
	3,   // 324: TST.CommandCategorySetLabelRowVisibility.super:type_name -> TST.TableCommandArchive
	3,   // 325: TST.CommandCategoryWillChangeGroupValue.super:type_name -> TST.TableCommandArchive
	115, // 326: TST.CommandCategoryWillChangeGroupValue.group_node_uid:type_name -> TSP.UUID
	115, // 327: TST.CommandCategoryWillChangeGroupValue.undo_group_node_uid:type_name -> TSP.UUID
	157, // 328: TST.CommandCategoryWillChangeGroupValue.group_value:type_name -> TSCE.CellValueArchive
	157, // 329: TST.CommandCategoryWillChangeGroupValue.undo_group_value:type_name -> TSCE.CellValueArchive
	114, // 330: TST.CommandCategoryWillChangeGroupValue.rewrite_command_for_undo:type_name -> TSP.Reference
	114, // 331: TST.IdempotentSelectionTransformerArchive.archived_selection:type_name -> TSP.Reference
	95,  // 332: TST.WPSelectionTransformerArchive.super:type_name -> TST.TableSubSelectionTransformerBaseArchive
	114, // 333: TST.WPSelectionTransformerArchive.archived_selection:type_name -> TSP.Reference
	124, // 334: TST.WPSelectionTransformerArchive.origin_cell_uid:type_name -> TSP.UUIDCoordArchive
	113, // 335: TST.TableSubSelectionTransformerBaseArchive.table_info_id_path:type_name -> TSP.UUIDPath
	95,  // 336: TST.TableNameSelectionTransformerArchive.super:type_name -> TST.TableSubSelectionTransformerBaseArchive
	95,  // 337: TST.ControlCellSelectionTransformerArchive.super:type_name -> TST.TableSubSelectionTransformerBaseArchive
	118, // 338: TST.ControlCellSelectionTransformerArchive.cell_uids:type_name -> TST.CellUIDListArchive
	124, // 339: TST.ControlCellSelectionTransformerArchive.origin_cell_uid:type_name -> TSP.UUIDCoordArchive
	158, // 340: TST.ControlCellSelectionTransformerArchive.origin_cell_id:type_name -> TSCE.CellCoordinateArchive
	95,  // 341: TST.StockCellSelectionTransformerArchive.super:type_name -> TST.TableSubSelectionTransformerBaseArchive
	118, // 342: TST.StockCellSelectionTransformerArchive.cell_uids:type_name -> TST.CellUIDListArchive
	124, // 343: TST.StockCellSelectionTransformerArchive.origin_cell_uid:type_name -> TSP.UUIDCoordArchive
	158, // 344: TST.StockCellSelectionTransformerArchive.origin_cell_id:type_name -> TSCE.CellCoordinateArchive
	95,  // 345: TST.RegionSelectionTransformerArchive.super:type_name -> TST.TableSubSelectionTransformerBaseArchive
	118, // 346: TST.RegionSelectionTransformerArchive.cell_uids:type_name -> TST.CellUIDListArchive
	124, // 347: TST.RegionSelectionTransformerArchive.origin_cell_uid:type_name -> TSP.UUIDCoordArchive
	124, // 348: TST.RegionSelectionTransformerArchive.anchor_cell_uid:type_name -> TSP.UUIDCoordArchive
	124, // 349: TST.RegionSelectionTransformerArchive.cursor_cell_uid:type_name -> TSP.UUIDCoordArchive
	95,  // 350: TST.StrokeSelectionTransformerArchive.super:type_name -> TST.TableSubSelectionTransformerBaseArchive
	114, // 351: TST.StrokeSelectionTransformerArchive.archived_selection:type_name -> TSP.Reference
	95,  // 352: TST.RowColumnSelectionTransformerArchive.super:type_name -> TST.TableSubSelectionTransformerBaseArchive
	159, // 353: TST.RowColumnSelectionTransformerArchive.selection_type:type_name -> TST.SelectionTypeArchive
	115, // 354: TST.RowColumnSelectionTransformerArchive.row_col_uids:type_name -> TSP.UUID
	3,   // 355: TST.CommandCategoryMoveRowsArchive.super:type_name -> TST.TableCommandArchive
	115, // 356: TST.CommandCategoryMoveRowsArchive.category_row_order:type_name -> TSP.UUID
	115, // 357: TST.CommandCategoryMoveRowsArchive.undo_category_row_order:type_name -> TSP.UUID
	114, // 358: TST.CommandCategoryMoveRowsArchive.cell_diff_map:type_name -> TSP.Reference
	114, // 359: TST.CommandCategoryMoveRowsArchive.undo_cell_diff_map:type_name -> TSP.Reference
	143, // 360: TST.CommandCategoryMoveRowsArchive.grouping_columns:type_name -> TST.GroupColumnListArchive
	3,   // 361: TST.CommandRewriteHiddenStatesForGroupByChangeArchive.super:type_name -> TST.TableCommandArchive
	138, // 362: TST.CommandRewriteHiddenStatesForGroupByChangeArchive.group_by_change:type_name -> TSCE.GroupByChangeArchive
	156, // 363: TST.CommandRewriteHiddenStatesForGroupByChangeArchive.collapsed_state:type_name -> TST.ExpandCollapseStateArchive
	3,   // 364: TST.CommandRewritePencilAnnotationFormulasArchive.super:type_name -> TST.TableCommandArchive
	57,  // 365: TST.CommandRewritePencilAnnotationFormulasArchive.rewrite_spec:type_name -> TST.FormulaRewriteSpecArchive
	139, // 366: TST.CommandRewritePencilAnnotationFormulasArchive.formulas_to_rewrite:type_name -> TSCE.FormulasForUndoArchive
	111, // 367: TST.CommandRewritePencilAnnotationFormulasArchive.annotations_for_undo:type_name -> TST.CommandRewritePencilAnnotationFormulasArchive.AnnotationPair
	3,   // 368: TST.CommandPivotSetPivotRulesArchive.super:type_name -> TST.TableCommandArchive
	115, // 369: TST.CommandPivotSetPivotRulesArchive.new_target_pivot_refresh_uid:type_name -> TSP.UUID
	143, // 370: TST.CommandPivotSetPivotRulesArchive.new_row_groupings:type_name -> TST.GroupColumnListArchive
	143, // 371: TST.CommandPivotSetPivotRulesArchive.old_row_groupings:type_name -> TST.GroupColumnListArchive
	143, // 372: TST.CommandPivotSetPivotRulesArchive.new_column_groupings:type_name -> TST.GroupColumnListArchive
	143, // 373: TST.CommandPivotSetPivotRulesArchive.old_column_groupings:type_name -> TST.GroupColumnListArchive
	145, // 374: TST.CommandPivotSetPivotRulesArchive.new_aggregates:type_name -> TST.ColumnAggregateListArchive
	145, // 375: TST.CommandPivotSetPivotRulesArchive.old_aggregates:type_name -> TST.ColumnAggregateListArchive
	116, // 376: TST.CommandPivotSetPivotRulesArchive.new_flattening_dimension:type_name -> TST.TableDimensionArchive
	116, // 377: TST.CommandPivotSetPivotRulesArchive.old_flattening_dimension:type_name -> TST.TableDimensionArchive
	114, // 378: TST.CommandPivotSetPivotRulesArchive.new_pivot_data_model:type_name -> TSP.Reference
	114, // 379: TST.CommandPivotSetPivotRulesArchive.old_pivot_data_model:type_name -> TSP.Reference
	115, // 380: TST.CommandPivotSetPivotRulesArchive.new_pivot_refresh_uid:type_name -> TSP.UUID
	115, // 381: TST.CommandPivotSetPivotRulesArchive.old_pivot_refresh_uid:type_name -> TSP.UUID
	114, // 382: TST.CommandPivotSetPivotRulesArchive.new_options_map:type_name -> TSP.Reference
	114, // 383: TST.CommandPivotSetPivotRulesArchive.old_options_map:type_name -> TSP.Reference
	115, // 384: TST.CommandPivotSetPivotRulesArchive.new_view_row_order:type_name -> TSP.UUID
	115, // 385: TST.CommandPivotSetPivotRulesArchive.old_view_row_order:type_name -> TSP.UUID
	115, // 386: TST.CommandPivotSetPivotRulesArchive.new_view_column_order:type_name -> TSP.UUID
	115, // 387: TST.CommandPivotSetPivotRulesArchive.old_view_column_order:type_name -> TSP.UUID
	115, // 388: TST.CommandPivotSetPivotRulesArchive.new_collapsed_row_groups:type_name -> TSP.UUID
	115, // 389: TST.CommandPivotSetPivotRulesArchive.old_collapsed_row_groups:type_name -> TSP.UUID
	115, // 390: TST.CommandPivotSetPivotRulesArchive.new_collapsed_column_groups:type_name -> TSP.UUID
	115, // 391: TST.CommandPivotSetPivotRulesArchive.old_collapsed_column_groups:type_name -> TSP.UUID
	160, // 392: TST.CommandPivotSetPivotRulesArchive.new_hierarchical_cell_diff_map:type_name -> TST.HierarchicalCellDiffMapArchive
	160, // 393: TST.CommandPivotSetPivotRulesArchive.old_hierarchical_cell_diff_map:type_name -> TST.HierarchicalCellDiffMapArchive
	114, // 394: TST.CommandPivotSetPivotRulesArchive.formula_rewrite_command_for_undo:type_name -> TSP.Reference
	119, // 395: TST.CommandPivotSetPivotRulesArchive.new_body_uid_tract:type_name -> TSP.UUIDRectArchive
	119, // 396: TST.CommandPivotSetPivotRulesArchive.old_body_uid_tract:type_name -> TSP.UUIDRectArchive
	115, // 397: TST.CommandPivotSetPivotRulesArchive.old_target_pivot_refresh_uid:type_name -> TSP.UUID
	115, // 398: TST.CommandPivotSetPivotRulesArchive.new_pivot_row_column_rule_change_uid:type_name -> TSP.UUID
	115, // 399: TST.CommandPivotSetPivotRulesArchive.old_pivot_row_column_rule_change_uid:type_name -> TSP.UUID
	115, // 400: TST.CommandPivotSetPivotRulesArchive.new_pivot_aggregate_rule_change_uid:type_name -> TSP.UUID
	115, // 401: TST.CommandPivotSetPivotRulesArchive.old_pivot_aggregate_rule_change_uid:type_name -> TSP.UUID
	3,   // 402: TST.CommandPivotSetGroupingColumnOptionsArchive.super:type_name -> TST.TableCommandArchive
	115, // 403: TST.CommandPivotSetGroupingColumnOptionsArchive.grouping_column_uid:type_name -> TSP.UUID
	3,   // 404: TST.CommandPivotHideShowGrandTotalsArchive.super:type_name -> TST.TableCommandArchive
	116, // 405: TST.CommandPivotHideShowGrandTotalsArchive.dimension:type_name -> TST.TableDimensionArchive
	3,   // 406: TST.CommandPivotSortArchive.super:type_name -> TST.TableCommandArchive
	116, // 407: TST.CommandPivotSortArchive.dimension:type_name -> TST.TableDimensionArchive
	115, // 408: TST.CommandPivotSortArchive.column_order:type_name -> TSP.UUID
	115, // 409: TST.CommandPivotSortArchive.undo_column_order:type_name -> TSP.UUID
	115, // 410: TST.CommandPivotSortArchive.row_order:type_name -> TSP.UUID
	115, // 411: TST.CommandPivotSortArchive.undo_row_order:type_name -> TSP.UUID
	115, // 412: TST.CommandPivotSortArchive.target_pivot_row_column_rule_change_uid:type_name -> TSP.UUID
	115, // 413: TST.CommandPivotSortArchive.target_pivot_aggregate_rule_change_uid:type_name -> TSP.UUID
	115, // 414: TST.CommandPivotSortArchive.target_pivot_data_refresh_uid:type_name -> TSP.UUID
	115, // 415: TST.CommandPivotSortArchive.grouping_column_uid:type_name -> TSP.UUID
	115, // 416: TST.CommandPivotSortArchive.sorting_aggregate_rule_uid:type_name -> TSP.UUID
	115, // 417: TST.CommandPivotSortArchive.undo_sorting_aggregate_rule_uid:type_name -> TSP.UUID
	112, // 418: TST.CommandRewriteTrackedReferencesArchive.super:type_name -> TSK.CommandArchive
	57,  // 419: TST.CommandRewriteTrackedReferencesArchive.rewrite_spec:type_name -> TST.FormulaRewriteSpecArchive
	112, // 420: TST.CommandExtendTableIDHistoryArchive.super:type_name -> TSK.CommandArchive
	57,  // 421: TST.CommandExtendTableIDHistoryArchive.rewrite_spec:type_name -> TST.FormulaRewriteSpecArchive
	133, // 422: TST.CommandExtendTableIDHistoryArchive.table_uid_history_rollback:type_name -> TSCE.RewriteTableUIDInfoArchive
	114, // 423: TST.CommandRewritePencilAnnotationFormulasArchive.AnnotationPair.annotation:type_name -> TSP.Reference
	424, // [424:424] is the sub-list for method output_type
	424, // [424:424] is the sub-list for method input_type
	424, // [424:424] is the sub-list for extension type_name
	424, // [424:424] is the sub-list for extension extendee
	0,   // [0:424] is the sub-list for field type_name
}

func init() { file_TSTCommandArchives_proto_init() }
func file_TSTCommandArchives_proto_init() {
	if File_TSTCommandArchives_proto != nil {
		return
	}
	file_TSPMessages_proto_init()
	file_TSDCommandArchives_proto_init()
	file_TSKArchives_proto_init()
	file_TSCEArchives_proto_init()
	file_TSWPArchives_proto_init()
	file_TSTArchives_proto_init()
	file_TSTArchives_sos_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_TSTCommandArchives_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandApplyCellContentsArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandApplyCellDiffMapArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandApplyCellMapArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandApplyConcurrentCellMapArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandChangeFreezeHeaderStateArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandDeleteCellsArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandDeleteCellContentsArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandMutateCellFormatArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSetAutomaticDurationUnitsArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSetDurationStyleArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSetDurationUnitSmallestLargestArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSTCommandReplaceCustomFormatArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandMoveCellsArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnRowMetadataArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandInsertColumnsOrRowsArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnRowBundleArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandRemoveColumnsOrRowsArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandRowColumnRangeArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandResizeColumnOrRowArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandCategoryResizeColumnOrRowArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandHideShowArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandTextPreflightInsertCellArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandPostflightSetCellArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandChangeTableAreaForColumnOrRowArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSetPencilAnnotationsArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSetTableNameArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSetTableNameEnabledArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSetTableFontSizeArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSetTableFontNameArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSetTableNameHeightArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSetNowArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSetWasCutArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandStyleCellsArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandStyleTableArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSetRepeatingHeaderEnabledArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSetFiltersEnabledArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandAddTableStylePresetArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandRemoveTableStylePresetArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandReplaceTableStylePresetArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandApplyTableStylePresetArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSetBaseArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSetBasePlacesArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSetBaseUseMinusSignArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSetCurrencyCodeArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSetFractionAccuracyArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSetNegativeNumberStyleArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSetNumberOfDecimalPlacesArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSetDateTimeFormatArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSetShowThousandsSeparatorArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSetUseAccountingStyleArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSetRangeControlMinMaxIncArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandMoveColumnsOrRowsArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSortArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormulaRewriteSpecArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandRewriteFormulasForTransposeArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandRewriteTableFormulasForRewriteSpecArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandRewriteMergeFormulasArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandRewriteCategoryFormulasArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandRewriteFilterFormulasForTableResizeArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandRewriteFilterFormulasForRewriteSpecArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandRewriteConditionalStylesForRewriteSpecArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandRewritePivotOwnerFormulasArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandMergeArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandInverseMergeArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandUnmergeArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandChooseTableIdRemapperArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandCategorySetGroupingColumnsArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormulaEditingCommandGroupArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormulaEditingCommandSelectionBehaviorArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableCommandSelectionBehaviorArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandApplyCellCommentArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSetFormulaTokenizationArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSetFilterSetTypeArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSetTextStyleArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSetTextStylePropertiesArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandJustForNotifyingArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSetStorageLanguageArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSetSortOrderArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSetGroupSortOrderArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandRewriteSortOrderForTableResizeArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandRewriteSortOrderForRewriteSpecArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSetFilterSetArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnRowRestoreDataArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandTransposeTableArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandSetStructuredTextImportRecordArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandCategoryCollapseExpandGroupArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandCategoryChangeSummaryAggregateType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandCategorySetLabelRowVisibility); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandCategoryWillChangeGroupValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdempotentSelectionTransformerArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WPSelectionTransformerArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableSubSelectionTransformerBaseArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableNameSelectionTransformerArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlCellSelectionTransformerArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockCellSelectionTransformerArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegionSelectionTransformerArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StrokeSelectionTransformerArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RowColumnSelectionTransformerArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandCategoryMoveRowsArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandRewriteHiddenStatesForGroupByChangeArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandRewritePencilAnnotationFormulasArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandPivotSetPivotRulesArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandPivotSetGroupingColumnOptionsArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandPivotHideShowGrandTotalsArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandPivotSortArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandRewriteTrackedReferencesArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandExtendTableIDHistoryArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSTCommandArchives_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandRewritePencilAnnotationFormulasArchive_AnnotationPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_TSTCommandArchives_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   109,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_TSTCommandArchives_proto_goTypes,
		DependencyIndexes: file_TSTCommandArchives_proto_depIdxs,
		EnumInfos:         file_TSTCommandArchives_proto_enumTypes,
		MessageInfos:      file_TSTCommandArchives_proto_msgTypes,
	}.Build()
	File_TSTCommandArchives_proto = out.File
	file_TSTCommandArchives_proto_rawDesc = nil
	file_TSTCommandArchives_proto_goTypes = nil
	file_TSTCommandArchives_proto_depIdxs = nil
}
