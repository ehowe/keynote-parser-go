// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: TSCHArchives_GEN.proto

package kpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TSCHGenChartStyleArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tschchartinfodefault3Dchartopacity                 *float32                       `protobuf:"fixed32,1,opt,name=tschchartinfodefault3dchartopacity" json:"tschchartinfodefault3dchartopacity,omitempty"`
	Tschchartinfoarea3Dlightingpackage                 *Chart3DLightingPackageArchive `protobuf:"bytes,2,opt,name=tschchartinfoarea3dlightingpackage" json:"tschchartinfoarea3dlightingpackage,omitempty"`
	Tschchartinfobar3Dlightingpackage                  *Chart3DLightingPackageArchive `protobuf:"bytes,3,opt,name=tschchartinfobar3dlightingpackage" json:"tschchartinfobar3dlightingpackage,omitempty"`
	Tschchartinfocolumn3Dlightingpackage               *Chart3DLightingPackageArchive `protobuf:"bytes,4,opt,name=tschchartinfocolumn3dlightingpackage" json:"tschchartinfocolumn3dlightingpackage,omitempty"`
	Tschchartinfodefault3Dlightingpackage              *Chart3DLightingPackageArchive `protobuf:"bytes,5,opt,name=tschchartinfodefault3dlightingpackage" json:"tschchartinfodefault3dlightingpackage,omitempty"`
	Tschchartinfoline3Dlightingpackage                 *Chart3DLightingPackageArchive `protobuf:"bytes,6,opt,name=tschchartinfoline3dlightingpackage" json:"tschchartinfoline3dlightingpackage,omitempty"`
	Tschchartinfopie3Dlightingpackage                  *Chart3DLightingPackageArchive `protobuf:"bytes,7,opt,name=tschchartinfopie3dlightingpackage" json:"tschchartinfopie3dlightingpackage,omitempty"`
	Tschchartinfodefaultbackgroundfill                 *FillArchive                   `protobuf:"bytes,8,opt,name=tschchartinfodefaultbackgroundfill" json:"tschchartinfodefaultbackgroundfill,omitempty"`
	Tschchartinfodefaultbackgroundstroke               *StrokeArchive                 `protobuf:"bytes,9,opt,name=tschchartinfodefaultbackgroundstroke" json:"tschchartinfodefaultbackgroundstroke,omitempty"`
	Tschchartinfodefaultborderopacity                  *float32                       `protobuf:"fixed32,10,opt,name=tschchartinfodefaultborderopacity" json:"tschchartinfodefaultborderopacity,omitempty"`
	Tschchartinfodefaultbordershadow                   *ShadowArchive                 `protobuf:"bytes,11,opt,name=tschchartinfodefaultbordershadow" json:"tschchartinfodefaultbordershadow,omitempty"`
	Tschchartinfodefaultborderstroke                   *StrokeArchive                 `protobuf:"bytes,12,opt,name=tschchartinfodefaultborderstroke" json:"tschchartinfodefaultborderstroke,omitempty"`
	Tschchartinfodefaultcombinelayers                  *bool                          `protobuf:"varint,13,opt,name=tschchartinfodefaultcombinelayers" json:"tschchartinfodefaultcombinelayers,omitempty"`
	Tschchartinfodefaultdatasetnameparagraphstyleindex *int32                         `protobuf:"varint,21,opt,name=tschchartinfodefaultdatasetnameparagraphstyleindex" json:"tschchartinfodefaultdatasetnameparagraphstyleindex,omitempty"`
	Tschchartinfodefaultgridbackgroundfill             *FillArchive                   `protobuf:"bytes,14,opt,name=tschchartinfodefaultgridbackgroundfill" json:"tschchartinfodefaultgridbackgroundfill,omitempty"`
	Tschchartinfodefaultgridbackgroundopacity          *float32                       `protobuf:"fixed32,15,opt,name=tschchartinfodefaultgridbackgroundopacity" json:"tschchartinfodefaultgridbackgroundopacity,omitempty"`
	Tschchartinfodefaultinterbargap                    *float32                       `protobuf:"fixed32,16,opt,name=tschchartinfodefaultinterbargap" json:"tschchartinfodefaultinterbargap,omitempty"`
	Tschchartinfodefaultintersetgap                    *float32                       `protobuf:"fixed32,17,opt,name=tschchartinfodefaultintersetgap" json:"tschchartinfodefaultintersetgap,omitempty"`
	Tschchartinfodefaultradarradiusgridlinecurve       *bool                          `protobuf:"varint,29,opt,name=tschchartinfodefaultradarradiusgridlinecurve" json:"tschchartinfodefaultradarradiusgridlinecurve,omitempty"`
	Tschchartinfodefaultroundedcornerouterendonly      *bool                          `protobuf:"varint,123,opt,name=tschchartinfodefaultroundedcornerouterendonly" json:"tschchartinfodefaultroundedcornerouterendonly,omitempty"`
	Tschchartinfodefaultroundedcornerradius            *float32                       `protobuf:"fixed32,122,opt,name=tschchartinfodefaultroundedcornerradius" json:"tschchartinfodefaultroundedcornerradius,omitempty"`
	Tschchartinfodefaultshowborder                     *bool                          `protobuf:"varint,18,opt,name=tschchartinfodefaultshowborder" json:"tschchartinfodefaultshowborder,omitempty"`
	Tschchartinfodefaulttitlecolor                     *Color                         `protobuf:"bytes,19,opt,name=tschchartinfodefaulttitlecolor" json:"tschchartinfodefaulttitlecolor,omitempty"`
	Tschchartinfodefaulttitleparagraphstyleindex       *int32                         `protobuf:"varint,20,opt,name=tschchartinfodefaulttitleparagraphstyleindex" json:"tschchartinfodefaulttitleparagraphstyleindex,omitempty"`
}

func (x *TSCHGenChartStyleArchive) Reset() {
	*x = TSCHGenChartStyleArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHArchives_GEN_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSCHGenChartStyleArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSCHGenChartStyleArchive) ProtoMessage() {}

func (x *TSCHGenChartStyleArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHArchives_GEN_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSCHGenChartStyleArchive.ProtoReflect.Descriptor instead.
func (*TSCHGenChartStyleArchive) Descriptor() ([]byte, []int) {
	return file_TSCHArchives_GEN_proto_rawDescGZIP(), []int{0}
}

func (x *TSCHGenChartStyleArchive) GetTschchartinfodefault3Dchartopacity() float32 {
	if x != nil && x.Tschchartinfodefault3Dchartopacity != nil {
		return *x.Tschchartinfodefault3Dchartopacity
	}
	return 0
}

func (x *TSCHGenChartStyleArchive) GetTschchartinfoarea3Dlightingpackage() *Chart3DLightingPackageArchive {
	if x != nil {
		return x.Tschchartinfoarea3Dlightingpackage
	}
	return nil
}

func (x *TSCHGenChartStyleArchive) GetTschchartinfobar3Dlightingpackage() *Chart3DLightingPackageArchive {
	if x != nil {
		return x.Tschchartinfobar3Dlightingpackage
	}
	return nil
}

func (x *TSCHGenChartStyleArchive) GetTschchartinfocolumn3Dlightingpackage() *Chart3DLightingPackageArchive {
	if x != nil {
		return x.Tschchartinfocolumn3Dlightingpackage
	}
	return nil
}

func (x *TSCHGenChartStyleArchive) GetTschchartinfodefault3Dlightingpackage() *Chart3DLightingPackageArchive {
	if x != nil {
		return x.Tschchartinfodefault3Dlightingpackage
	}
	return nil
}

func (x *TSCHGenChartStyleArchive) GetTschchartinfoline3Dlightingpackage() *Chart3DLightingPackageArchive {
	if x != nil {
		return x.Tschchartinfoline3Dlightingpackage
	}
	return nil
}

func (x *TSCHGenChartStyleArchive) GetTschchartinfopie3Dlightingpackage() *Chart3DLightingPackageArchive {
	if x != nil {
		return x.Tschchartinfopie3Dlightingpackage
	}
	return nil
}

func (x *TSCHGenChartStyleArchive) GetTschchartinfodefaultbackgroundfill() *FillArchive {
	if x != nil {
		return x.Tschchartinfodefaultbackgroundfill
	}
	return nil
}

func (x *TSCHGenChartStyleArchive) GetTschchartinfodefaultbackgroundstroke() *StrokeArchive {
	if x != nil {
		return x.Tschchartinfodefaultbackgroundstroke
	}
	return nil
}

func (x *TSCHGenChartStyleArchive) GetTschchartinfodefaultborderopacity() float32 {
	if x != nil && x.Tschchartinfodefaultborderopacity != nil {
		return *x.Tschchartinfodefaultborderopacity
	}
	return 0
}

func (x *TSCHGenChartStyleArchive) GetTschchartinfodefaultbordershadow() *ShadowArchive {
	if x != nil {
		return x.Tschchartinfodefaultbordershadow
	}
	return nil
}

func (x *TSCHGenChartStyleArchive) GetTschchartinfodefaultborderstroke() *StrokeArchive {
	if x != nil {
		return x.Tschchartinfodefaultborderstroke
	}
	return nil
}

func (x *TSCHGenChartStyleArchive) GetTschchartinfodefaultcombinelayers() bool {
	if x != nil && x.Tschchartinfodefaultcombinelayers != nil {
		return *x.Tschchartinfodefaultcombinelayers
	}
	return false
}

func (x *TSCHGenChartStyleArchive) GetTschchartinfodefaultdatasetnameparagraphstyleindex() int32 {
	if x != nil && x.Tschchartinfodefaultdatasetnameparagraphstyleindex != nil {
		return *x.Tschchartinfodefaultdatasetnameparagraphstyleindex
	}
	return 0
}

func (x *TSCHGenChartStyleArchive) GetTschchartinfodefaultgridbackgroundfill() *FillArchive {
	if x != nil {
		return x.Tschchartinfodefaultgridbackgroundfill
	}
	return nil
}

func (x *TSCHGenChartStyleArchive) GetTschchartinfodefaultgridbackgroundopacity() float32 {
	if x != nil && x.Tschchartinfodefaultgridbackgroundopacity != nil {
		return *x.Tschchartinfodefaultgridbackgroundopacity
	}
	return 0
}

func (x *TSCHGenChartStyleArchive) GetTschchartinfodefaultinterbargap() float32 {
	if x != nil && x.Tschchartinfodefaultinterbargap != nil {
		return *x.Tschchartinfodefaultinterbargap
	}
	return 0
}

func (x *TSCHGenChartStyleArchive) GetTschchartinfodefaultintersetgap() float32 {
	if x != nil && x.Tschchartinfodefaultintersetgap != nil {
		return *x.Tschchartinfodefaultintersetgap
	}
	return 0
}

func (x *TSCHGenChartStyleArchive) GetTschchartinfodefaultradarradiusgridlinecurve() bool {
	if x != nil && x.Tschchartinfodefaultradarradiusgridlinecurve != nil {
		return *x.Tschchartinfodefaultradarradiusgridlinecurve
	}
	return false
}

func (x *TSCHGenChartStyleArchive) GetTschchartinfodefaultroundedcornerouterendonly() bool {
	if x != nil && x.Tschchartinfodefaultroundedcornerouterendonly != nil {
		return *x.Tschchartinfodefaultroundedcornerouterendonly
	}
	return false
}

func (x *TSCHGenChartStyleArchive) GetTschchartinfodefaultroundedcornerradius() float32 {
	if x != nil && x.Tschchartinfodefaultroundedcornerradius != nil {
		return *x.Tschchartinfodefaultroundedcornerradius
	}
	return 0
}

func (x *TSCHGenChartStyleArchive) GetTschchartinfodefaultshowborder() bool {
	if x != nil && x.Tschchartinfodefaultshowborder != nil {
		return *x.Tschchartinfodefaultshowborder
	}
	return false
}

func (x *TSCHGenChartStyleArchive) GetTschchartinfodefaulttitlecolor() *Color {
	if x != nil {
		return x.Tschchartinfodefaulttitlecolor
	}
	return nil
}

func (x *TSCHGenChartStyleArchive) GetTschchartinfodefaulttitleparagraphstyleindex() int32 {
	if x != nil && x.Tschchartinfodefaulttitleparagraphstyleindex != nil {
		return *x.Tschchartinfodefaulttitleparagraphstyleindex
	}
	return 0
}

type ChartNonStyleArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tschchartinfodefault3Dbarshape                          *int32                `protobuf:"varint,1,opt,name=tschchartinfodefault3dbarshape" json:"tschchartinfodefault3dbarshape,omitempty"`
	Tschchartinfodefault3Dbeveledges                        *bool                 `protobuf:"varint,2,opt,name=tschchartinfodefault3dbeveledges" json:"tschchartinfodefault3dbeveledges,omitempty"`
	Tschchartinfodefault3Dintersetdepthgap                  *float32              `protobuf:"fixed32,3,opt,name=tschchartinfodefault3dintersetdepthgap" json:"tschchartinfodefault3dintersetdepthgap,omitempty"`
	Tschchartinfodefault3Drotation                          *Chart3DVectorArchive `protobuf:"bytes,4,opt,name=tschchartinfodefault3drotation" json:"tschchartinfodefault3drotation,omitempty"`
	Tschchartinfoarea3Dscale                                *Chart3DVectorArchive `protobuf:"bytes,5,opt,name=tschchartinfoarea3dscale" json:"tschchartinfoarea3dscale,omitempty"`
	Tschchartinfobar3Dscale                                 *Chart3DVectorArchive `protobuf:"bytes,6,opt,name=tschchartinfobar3dscale" json:"tschchartinfobar3dscale,omitempty"`
	Tschchartinfocolumn3Dscale                              *Chart3DVectorArchive `protobuf:"bytes,7,opt,name=tschchartinfocolumn3dscale" json:"tschchartinfocolumn3dscale,omitempty"`
	Tschchartinfodefault3Dscale                             *Chart3DVectorArchive `protobuf:"bytes,8,opt,name=tschchartinfodefault3dscale" json:"tschchartinfodefault3dscale,omitempty"`
	Tschchartinfoline3Dscale                                *Chart3DVectorArchive `protobuf:"bytes,9,opt,name=tschchartinfoline3dscale" json:"tschchartinfoline3dscale,omitempty"`
	Tschchartinfopie3Dscale                                 *Chart3DVectorArchive `protobuf:"bytes,10,opt,name=tschchartinfopie3dscale" json:"tschchartinfopie3dscale,omitempty"`
	Tschchartinfodefault3Dviewport                          *Chart3DVectorArchive `protobuf:"bytes,11,opt,name=tschchartinfodefault3dviewport" json:"tschchartinfodefault3dviewport,omitempty"`
	Tschchartinfoareacalloutlinetype                        *int32                `protobuf:"varint,112,opt,name=tschchartinfoareacalloutlinetype" json:"tschchartinfoareacalloutlinetype,omitempty"`
	Tschchartinfobarcalloutlinetype                         *int32                `protobuf:"varint,113,opt,name=tschchartinfobarcalloutlinetype" json:"tschchartinfobarcalloutlinetype,omitempty"`
	Tschchartinfobubblecalloutlinetype                      *int32                `protobuf:"varint,114,opt,name=tschchartinfobubblecalloutlinetype" json:"tschchartinfobubblecalloutlinetype,omitempty"`
	Tschchartinfodefaultcalloutlinetype                     *int32                `protobuf:"varint,119,opt,name=tschchartinfodefaultcalloutlinetype" json:"tschchartinfodefaultcalloutlinetype,omitempty"`
	Tschchartinfolinecalloutlinetype                        *int32                `protobuf:"varint,115,opt,name=tschchartinfolinecalloutlinetype" json:"tschchartinfolinecalloutlinetype,omitempty"`
	Tschchartinfopiecalloutlinetype                         *int32                `protobuf:"varint,111,opt,name=tschchartinfopiecalloutlinetype" json:"tschchartinfopiecalloutlinetype,omitempty"`
	Tschchartinfoscattercalloutlinetype                     *int32                `protobuf:"varint,116,opt,name=tschchartinfoscattercalloutlinetype" json:"tschchartinfoscattercalloutlinetype,omitempty"`
	Tschchartinfostackedareacalloutlinetype                 *int32                `protobuf:"varint,117,opt,name=tschchartinfostackedareacalloutlinetype" json:"tschchartinfostackedareacalloutlinetype,omitempty"`
	Tschchartinfostackedbarcalloutlinetype                  *int32                `protobuf:"varint,118,opt,name=tschchartinfostackedbarcalloutlinetype" json:"tschchartinfostackedbarcalloutlinetype,omitempty"`
	Tschchartinfodefaultdeprecatedroundedcornerouterendonly *bool                 `protobuf:"varint,121,opt,name=tschchartinfodefaultdeprecatedroundedcornerouterendonly" json:"tschchartinfodefaultdeprecatedroundedcornerouterendonly,omitempty"`
	Tschchartinfodefaultdeprecatedroundedcornerradius       *float32              `protobuf:"fixed32,120,opt,name=tschchartinfodefaultdeprecatedroundedcornerradius" json:"tschchartinfodefaultdeprecatedroundedcornerradius,omitempty"`
	Tschchartinfodefaultdatasetnamelocation                 *int32                `protobuf:"varint,24,opt,name=tschchartinfodefaultdatasetnamelocation" json:"tschchartinfodefaultdatasetnamelocation,omitempty"`
	Tschchartinfodefaultdonutplacetitleatcenter             *bool                 `protobuf:"varint,28,opt,name=tschchartinfodefaultdonutplacetitleatcenter" json:"tschchartinfodefaultdonutplacetitleatcenter,omitempty"`
	Tschchartinfodefaultinnerradius                         *float32              `protobuf:"fixed32,27,opt,name=tschchartinfodefaultinnerradius" json:"tschchartinfodefaultinnerradius,omitempty"`
	Tschchartinfodefaultmultidatacontroltype                *int32                `protobuf:"varint,25,opt,name=tschchartinfodefaultmultidatacontroltype" json:"tschchartinfodefaultmultidatacontroltype,omitempty"`
	Tschchartinfodefaultpiestartangle                       *float32              `protobuf:"fixed32,19,opt,name=tschchartinfodefaultpiestartangle" json:"tschchartinfodefaultpiestartangle,omitempty"`
	Tschchartinfodefaultradarstartangle                     *float32              `protobuf:"fixed32,29,opt,name=tschchartinfodefaultradarstartangle" json:"tschchartinfodefaultradarstartangle,omitempty"`
	Tschchartinfodefaultshowlegend                          *bool                 `protobuf:"varint,20,opt,name=tschchartinfodefaultshowlegend" json:"tschchartinfodefaultshowlegend,omitempty"`
	Tschchartinfodefaultshowtitle                           *bool                 `protobuf:"varint,21,opt,name=tschchartinfodefaultshowtitle" json:"tschchartinfodefaultshowtitle,omitempty"`
	Tschchartinfodefaultskiphiddendata                      *bool                 `protobuf:"varint,22,opt,name=tschchartinfodefaultskiphiddendata" json:"tschchartinfodefaultskiphiddendata,omitempty"`
	Tschchartinfodefaulttitle                               *string               `protobuf:"bytes,23,opt,name=tschchartinfodefaulttitle" json:"tschchartinfodefaulttitle,omitempty"`
}

func (x *ChartNonStyleArchive) Reset() {
	*x = ChartNonStyleArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHArchives_GEN_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartNonStyleArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartNonStyleArchive) ProtoMessage() {}

func (x *ChartNonStyleArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHArchives_GEN_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartNonStyleArchive.ProtoReflect.Descriptor instead.
func (*ChartNonStyleArchive) Descriptor() ([]byte, []int) {
	return file_TSCHArchives_GEN_proto_rawDescGZIP(), []int{1}
}

func (x *ChartNonStyleArchive) GetTschchartinfodefault3Dbarshape() int32 {
	if x != nil && x.Tschchartinfodefault3Dbarshape != nil {
		return *x.Tschchartinfodefault3Dbarshape
	}
	return 0
}

func (x *ChartNonStyleArchive) GetTschchartinfodefault3Dbeveledges() bool {
	if x != nil && x.Tschchartinfodefault3Dbeveledges != nil {
		return *x.Tschchartinfodefault3Dbeveledges
	}
	return false
}

func (x *ChartNonStyleArchive) GetTschchartinfodefault3Dintersetdepthgap() float32 {
	if x != nil && x.Tschchartinfodefault3Dintersetdepthgap != nil {
		return *x.Tschchartinfodefault3Dintersetdepthgap
	}
	return 0
}

func (x *ChartNonStyleArchive) GetTschchartinfodefault3Drotation() *Chart3DVectorArchive {
	if x != nil {
		return x.Tschchartinfodefault3Drotation
	}
	return nil
}

func (x *ChartNonStyleArchive) GetTschchartinfoarea3Dscale() *Chart3DVectorArchive {
	if x != nil {
		return x.Tschchartinfoarea3Dscale
	}
	return nil
}

func (x *ChartNonStyleArchive) GetTschchartinfobar3Dscale() *Chart3DVectorArchive {
	if x != nil {
		return x.Tschchartinfobar3Dscale
	}
	return nil
}

func (x *ChartNonStyleArchive) GetTschchartinfocolumn3Dscale() *Chart3DVectorArchive {
	if x != nil {
		return x.Tschchartinfocolumn3Dscale
	}
	return nil
}

func (x *ChartNonStyleArchive) GetTschchartinfodefault3Dscale() *Chart3DVectorArchive {
	if x != nil {
		return x.Tschchartinfodefault3Dscale
	}
	return nil
}

func (x *ChartNonStyleArchive) GetTschchartinfoline3Dscale() *Chart3DVectorArchive {
	if x != nil {
		return x.Tschchartinfoline3Dscale
	}
	return nil
}

func (x *ChartNonStyleArchive) GetTschchartinfopie3Dscale() *Chart3DVectorArchive {
	if x != nil {
		return x.Tschchartinfopie3Dscale
	}
	return nil
}

func (x *ChartNonStyleArchive) GetTschchartinfodefault3Dviewport() *Chart3DVectorArchive {
	if x != nil {
		return x.Tschchartinfodefault3Dviewport
	}
	return nil
}

func (x *ChartNonStyleArchive) GetTschchartinfoareacalloutlinetype() int32 {
	if x != nil && x.Tschchartinfoareacalloutlinetype != nil {
		return *x.Tschchartinfoareacalloutlinetype
	}
	return 0
}

func (x *ChartNonStyleArchive) GetTschchartinfobarcalloutlinetype() int32 {
	if x != nil && x.Tschchartinfobarcalloutlinetype != nil {
		return *x.Tschchartinfobarcalloutlinetype
	}
	return 0
}

func (x *ChartNonStyleArchive) GetTschchartinfobubblecalloutlinetype() int32 {
	if x != nil && x.Tschchartinfobubblecalloutlinetype != nil {
		return *x.Tschchartinfobubblecalloutlinetype
	}
	return 0
}

func (x *ChartNonStyleArchive) GetTschchartinfodefaultcalloutlinetype() int32 {
	if x != nil && x.Tschchartinfodefaultcalloutlinetype != nil {
		return *x.Tschchartinfodefaultcalloutlinetype
	}
	return 0
}

func (x *ChartNonStyleArchive) GetTschchartinfolinecalloutlinetype() int32 {
	if x != nil && x.Tschchartinfolinecalloutlinetype != nil {
		return *x.Tschchartinfolinecalloutlinetype
	}
	return 0
}

func (x *ChartNonStyleArchive) GetTschchartinfopiecalloutlinetype() int32 {
	if x != nil && x.Tschchartinfopiecalloutlinetype != nil {
		return *x.Tschchartinfopiecalloutlinetype
	}
	return 0
}

func (x *ChartNonStyleArchive) GetTschchartinfoscattercalloutlinetype() int32 {
	if x != nil && x.Tschchartinfoscattercalloutlinetype != nil {
		return *x.Tschchartinfoscattercalloutlinetype
	}
	return 0
}

func (x *ChartNonStyleArchive) GetTschchartinfostackedareacalloutlinetype() int32 {
	if x != nil && x.Tschchartinfostackedareacalloutlinetype != nil {
		return *x.Tschchartinfostackedareacalloutlinetype
	}
	return 0
}

func (x *ChartNonStyleArchive) GetTschchartinfostackedbarcalloutlinetype() int32 {
	if x != nil && x.Tschchartinfostackedbarcalloutlinetype != nil {
		return *x.Tschchartinfostackedbarcalloutlinetype
	}
	return 0
}

func (x *ChartNonStyleArchive) GetTschchartinfodefaultdeprecatedroundedcornerouterendonly() bool {
	if x != nil && x.Tschchartinfodefaultdeprecatedroundedcornerouterendonly != nil {
		return *x.Tschchartinfodefaultdeprecatedroundedcornerouterendonly
	}
	return false
}

func (x *ChartNonStyleArchive) GetTschchartinfodefaultdeprecatedroundedcornerradius() float32 {
	if x != nil && x.Tschchartinfodefaultdeprecatedroundedcornerradius != nil {
		return *x.Tschchartinfodefaultdeprecatedroundedcornerradius
	}
	return 0
}

func (x *ChartNonStyleArchive) GetTschchartinfodefaultdatasetnamelocation() int32 {
	if x != nil && x.Tschchartinfodefaultdatasetnamelocation != nil {
		return *x.Tschchartinfodefaultdatasetnamelocation
	}
	return 0
}

func (x *ChartNonStyleArchive) GetTschchartinfodefaultdonutplacetitleatcenter() bool {
	if x != nil && x.Tschchartinfodefaultdonutplacetitleatcenter != nil {
		return *x.Tschchartinfodefaultdonutplacetitleatcenter
	}
	return false
}

func (x *ChartNonStyleArchive) GetTschchartinfodefaultinnerradius() float32 {
	if x != nil && x.Tschchartinfodefaultinnerradius != nil {
		return *x.Tschchartinfodefaultinnerradius
	}
	return 0
}

func (x *ChartNonStyleArchive) GetTschchartinfodefaultmultidatacontroltype() int32 {
	if x != nil && x.Tschchartinfodefaultmultidatacontroltype != nil {
		return *x.Tschchartinfodefaultmultidatacontroltype
	}
	return 0
}

func (x *ChartNonStyleArchive) GetTschchartinfodefaultpiestartangle() float32 {
	if x != nil && x.Tschchartinfodefaultpiestartangle != nil {
		return *x.Tschchartinfodefaultpiestartangle
	}
	return 0
}

func (x *ChartNonStyleArchive) GetTschchartinfodefaultradarstartangle() float32 {
	if x != nil && x.Tschchartinfodefaultradarstartangle != nil {
		return *x.Tschchartinfodefaultradarstartangle
	}
	return 0
}

func (x *ChartNonStyleArchive) GetTschchartinfodefaultshowlegend() bool {
	if x != nil && x.Tschchartinfodefaultshowlegend != nil {
		return *x.Tschchartinfodefaultshowlegend
	}
	return false
}

func (x *ChartNonStyleArchive) GetTschchartinfodefaultshowtitle() bool {
	if x != nil && x.Tschchartinfodefaultshowtitle != nil {
		return *x.Tschchartinfodefaultshowtitle
	}
	return false
}

func (x *ChartNonStyleArchive) GetTschchartinfodefaultskiphiddendata() bool {
	if x != nil && x.Tschchartinfodefaultskiphiddendata != nil {
		return *x.Tschchartinfodefaultskiphiddendata
	}
	return false
}

func (x *ChartNonStyleArchive) GetTschchartinfodefaulttitle() string {
	if x != nil && x.Tschchartinfodefaulttitle != nil {
		return *x.Tschchartinfodefaulttitle
	}
	return ""
}

type LegendStyleArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tschlegendmodeldefaultfill                     *FillArchive   `protobuf:"bytes,1,opt,name=tschlegendmodeldefaultfill" json:"tschlegendmodeldefaultfill,omitempty"`
	Tschlegendmodeldefaultlabelparagraphstyleindex *int32         `protobuf:"varint,2,opt,name=tschlegendmodeldefaultlabelparagraphstyleindex" json:"tschlegendmodeldefaultlabelparagraphstyleindex,omitempty"`
	Tschlegendmodeldefaultopacity                  *float32       `protobuf:"fixed32,3,opt,name=tschlegendmodeldefaultopacity" json:"tschlegendmodeldefaultopacity,omitempty"`
	Tschlegendmodeldefaultshadow                   *ShadowArchive `protobuf:"bytes,4,opt,name=tschlegendmodeldefaultshadow" json:"tschlegendmodeldefaultshadow,omitempty"`
	Tschlegendmodeldefaultstroke                   *StrokeArchive `protobuf:"bytes,5,opt,name=tschlegendmodeldefaultstroke" json:"tschlegendmodeldefaultstroke,omitempty"`
}

func (x *LegendStyleArchive) Reset() {
	*x = LegendStyleArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHArchives_GEN_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LegendStyleArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LegendStyleArchive) ProtoMessage() {}

func (x *LegendStyleArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHArchives_GEN_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LegendStyleArchive.ProtoReflect.Descriptor instead.
func (*LegendStyleArchive) Descriptor() ([]byte, []int) {
	return file_TSCHArchives_GEN_proto_rawDescGZIP(), []int{2}
}

func (x *LegendStyleArchive) GetTschlegendmodeldefaultfill() *FillArchive {
	if x != nil {
		return x.Tschlegendmodeldefaultfill
	}
	return nil
}

func (x *LegendStyleArchive) GetTschlegendmodeldefaultlabelparagraphstyleindex() int32 {
	if x != nil && x.Tschlegendmodeldefaultlabelparagraphstyleindex != nil {
		return *x.Tschlegendmodeldefaultlabelparagraphstyleindex
	}
	return 0
}

func (x *LegendStyleArchive) GetTschlegendmodeldefaultopacity() float32 {
	if x != nil && x.Tschlegendmodeldefaultopacity != nil {
		return *x.Tschlegendmodeldefaultopacity
	}
	return 0
}

func (x *LegendStyleArchive) GetTschlegendmodeldefaultshadow() *ShadowArchive {
	if x != nil {
		return x.Tschlegendmodeldefaultshadow
	}
	return nil
}

func (x *LegendStyleArchive) GetTschlegendmodeldefaultstroke() *StrokeArchive {
	if x != nil {
		return x.Tschlegendmodeldefaultstroke
	}
	return nil
}

type LegendNonStyleArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LegendNonStyleArchive) Reset() {
	*x = LegendNonStyleArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHArchives_GEN_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LegendNonStyleArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LegendNonStyleArchive) ProtoMessage() {}

func (x *LegendNonStyleArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHArchives_GEN_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LegendNonStyleArchive.ProtoReflect.Descriptor instead.
func (*LegendNonStyleArchive) Descriptor() ([]byte, []int) {
	return file_TSCHArchives_GEN_proto_rawDescGZIP(), []int{3}
}

type ChartAxisStyleArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tschchartaxiscategory3Dgridlineopacity          *float32       `protobuf:"fixed32,1,opt,name=tschchartaxiscategory3dgridlineopacity" json:"tschchartaxiscategory3dgridlineopacity,omitempty"`
	Tschchartaxisvalue3Dgridlineopacity             *float32       `protobuf:"fixed32,2,opt,name=tschchartaxisvalue3dgridlineopacity" json:"tschchartaxisvalue3dgridlineopacity,omitempty"`
	Tschchartaxiscategory3Dgridlinestroke           *StrokeArchive `protobuf:"bytes,3,opt,name=tschchartaxiscategory3dgridlinestroke" json:"tschchartaxiscategory3dgridlinestroke,omitempty"`
	Tschchartaxisvalue3Dgridlinestroke              *StrokeArchive `protobuf:"bytes,4,opt,name=tschchartaxisvalue3dgridlinestroke" json:"tschchartaxisvalue3dgridlinestroke,omitempty"`
	Tschchartaxiscategoryhorizontalspacing          *int32         `protobuf:"varint,5,opt,name=tschchartaxiscategoryhorizontalspacing" json:"tschchartaxiscategoryhorizontalspacing,omitempty"`
	Tschchartaxisdefaultlabelanglebaselinedirection *int32         `protobuf:"varint,46,opt,name=tschchartaxisdefaultlabelanglebaselinedirection" json:"tschchartaxisdefaultlabelanglebaselinedirection,omitempty"`
	Tschchartaxiscategorylabelparagraphstyleindex   *int32         `protobuf:"varint,6,opt,name=tschchartaxiscategorylabelparagraphstyleindex" json:"tschchartaxiscategorylabelparagraphstyleindex,omitempty"`
	Tschchartaxisdefaultlabelparagraphstyleindex    *int32         `protobuf:"varint,7,opt,name=tschchartaxisdefaultlabelparagraphstyleindex" json:"tschchartaxisdefaultlabelparagraphstyleindex,omitempty"`
	Tschchartaxisvaluelabelparagraphstyleindex      *int32         `protobuf:"varint,8,opt,name=tschchartaxisvaluelabelparagraphstyleindex" json:"tschchartaxisvaluelabelparagraphstyleindex,omitempty"`
	Tschchartaxiscategorylabelsorientation          *float32       `protobuf:"fixed32,9,opt,name=tschchartaxiscategorylabelsorientation" json:"tschchartaxiscategorylabelsorientation,omitempty"`
	Tschchartaxisdefaultlabelsorientation           *float32       `protobuf:"fixed32,10,opt,name=tschchartaxisdefaultlabelsorientation" json:"tschchartaxisdefaultlabelsorientation,omitempty"`
	Tschchartaxisvaluelabelsorientation             *float32       `protobuf:"fixed32,11,opt,name=tschchartaxisvaluelabelsorientation" json:"tschchartaxisvaluelabelsorientation,omitempty"`
	Tschchartaxiscategorymajorgridlineopacity       *float32       `protobuf:"fixed32,12,opt,name=tschchartaxiscategorymajorgridlineopacity" json:"tschchartaxiscategorymajorgridlineopacity,omitempty"`
	Tschchartaxisvaluemajorgridlineopacity          *float32       `protobuf:"fixed32,13,opt,name=tschchartaxisvaluemajorgridlineopacity" json:"tschchartaxisvaluemajorgridlineopacity,omitempty"`
	Tschchartaxiscategorymajorgridlineshadow        *ShadowArchive `protobuf:"bytes,14,opt,name=tschchartaxiscategorymajorgridlineshadow" json:"tschchartaxiscategorymajorgridlineshadow,omitempty"`
	Tschchartaxisvaluemajorgridlineshadow           *ShadowArchive `protobuf:"bytes,15,opt,name=tschchartaxisvaluemajorgridlineshadow" json:"tschchartaxisvaluemajorgridlineshadow,omitempty"`
	Tschchartaxiscategorymajorgridlinestroke        *StrokeArchive `protobuf:"bytes,16,opt,name=tschchartaxiscategorymajorgridlinestroke" json:"tschchartaxiscategorymajorgridlinestroke,omitempty"`
	Tschchartaxisvaluemajorgridlinestroke           *StrokeArchive `protobuf:"bytes,17,opt,name=tschchartaxisvaluemajorgridlinestroke" json:"tschchartaxisvaluemajorgridlinestroke,omitempty"`
	Tschchartaxiscategoryminorgridlineopacity       *float32       `protobuf:"fixed32,18,opt,name=tschchartaxiscategoryminorgridlineopacity" json:"tschchartaxiscategoryminorgridlineopacity,omitempty"`
	Tschchartaxisvalueminorgridlineopacity          *float32       `protobuf:"fixed32,19,opt,name=tschchartaxisvalueminorgridlineopacity" json:"tschchartaxisvalueminorgridlineopacity,omitempty"`
	Tschchartaxiscategoryminorgridlineshadow        *ShadowArchive `protobuf:"bytes,20,opt,name=tschchartaxiscategoryminorgridlineshadow" json:"tschchartaxiscategoryminorgridlineshadow,omitempty"`
	Tschchartaxisvalueminorgridlineshadow           *ShadowArchive `protobuf:"bytes,21,opt,name=tschchartaxisvalueminorgridlineshadow" json:"tschchartaxisvalueminorgridlineshadow,omitempty"`
	Tschchartaxiscategoryminorgridlinestroke        *StrokeArchive `protobuf:"bytes,22,opt,name=tschchartaxiscategoryminorgridlinestroke" json:"tschchartaxiscategoryminorgridlinestroke,omitempty"`
	Tschchartaxisvalueminorgridlinestroke           *StrokeArchive `protobuf:"bytes,23,opt,name=tschchartaxisvalueminorgridlinestroke" json:"tschchartaxisvalueminorgridlinestroke,omitempty"`
	Tschchartaxiscategoryshowaxis                   *bool          `protobuf:"varint,24,opt,name=tschchartaxiscategoryshowaxis" json:"tschchartaxiscategoryshowaxis,omitempty"`
	Tschchartaxisvalueshowaxis                      *bool          `protobuf:"varint,25,opt,name=tschchartaxisvalueshowaxis" json:"tschchartaxisvalueshowaxis,omitempty"`
	Tschchartaxisdefaultshowextensionlines          *bool          `protobuf:"varint,47,opt,name=tschchartaxisdefaultshowextensionlines" json:"tschchartaxisdefaultshowextensionlines,omitempty"`
	Tschchartaxiscategoryshowgridlinetickmarks      *bool          `protobuf:"varint,42,opt,name=tschchartaxiscategoryshowgridlinetickmarks" json:"tschchartaxiscategoryshowgridlinetickmarks,omitempty"`
	Tschchartaxisvalueshowgridlinetickmarks         *bool          `protobuf:"varint,43,opt,name=tschchartaxisvalueshowgridlinetickmarks" json:"tschchartaxisvalueshowgridlinetickmarks,omitempty"`
	Tschchartaxiscategoryshowlastlabel              *bool          `protobuf:"varint,26,opt,name=tschchartaxiscategoryshowlastlabel" json:"tschchartaxiscategoryshowlastlabel,omitempty"`
	Tschchartaxiscategoryshowmajorgridlines         *bool          `protobuf:"varint,27,opt,name=tschchartaxiscategoryshowmajorgridlines" json:"tschchartaxiscategoryshowmajorgridlines,omitempty"`
	Tschchartaxispolarcategoryshowmajorgridlines    *bool          `protobuf:"varint,44,opt,name=tschchartaxispolarcategoryshowmajorgridlines" json:"tschchartaxispolarcategoryshowmajorgridlines,omitempty"`
	Tschchartaxisvalueshowmajorgridlines            *bool          `protobuf:"varint,28,opt,name=tschchartaxisvalueshowmajorgridlines" json:"tschchartaxisvalueshowmajorgridlines,omitempty"`
	Tschchartaxiscategoryshowmajortickmarks         *bool          `protobuf:"varint,29,opt,name=tschchartaxiscategoryshowmajortickmarks" json:"tschchartaxiscategoryshowmajortickmarks,omitempty"`
	Tschchartaxisvalueshowmajortickmarks            *bool          `protobuf:"varint,30,opt,name=tschchartaxisvalueshowmajortickmarks" json:"tschchartaxisvalueshowmajortickmarks,omitempty"`
	Tschchartaxisvalueshowminimumlabel              *bool          `protobuf:"varint,31,opt,name=tschchartaxisvalueshowminimumlabel" json:"tschchartaxisvalueshowminimumlabel,omitempty"`
	Tschchartaxiscategoryshowminorgridlines         *bool          `protobuf:"varint,32,opt,name=tschchartaxiscategoryshowminorgridlines" json:"tschchartaxiscategoryshowminorgridlines,omitempty"`
	Tschchartaxisvalueshowminorgridlines            *bool          `protobuf:"varint,33,opt,name=tschchartaxisvalueshowminorgridlines" json:"tschchartaxisvalueshowminorgridlines,omitempty"`
	Tschchartaxiscategoryshowminortickmarks         *bool          `protobuf:"varint,34,opt,name=tschchartaxiscategoryshowminortickmarks" json:"tschchartaxiscategoryshowminortickmarks,omitempty"`
	Tschchartaxisvalueshowminortickmarks            *bool          `protobuf:"varint,35,opt,name=tschchartaxisvalueshowminortickmarks" json:"tschchartaxisvalueshowminortickmarks,omitempty"`
	Tschchartaxiscategorytickmarklocation           *int32         `protobuf:"varint,36,opt,name=tschchartaxiscategorytickmarklocation" json:"tschchartaxiscategorytickmarklocation,omitempty"`
	Tschchartaxisvaluetickmarklocation              *int32         `protobuf:"varint,37,opt,name=tschchartaxisvaluetickmarklocation" json:"tschchartaxisvaluetickmarklocation,omitempty"`
	Tschchartaxiscategorytitleparagraphstyleindex   *int32         `protobuf:"varint,38,opt,name=tschchartaxiscategorytitleparagraphstyleindex" json:"tschchartaxiscategorytitleparagraphstyleindex,omitempty"`
	Tschchartaxisdefaulttitleparagraphstyleindex    *int32         `protobuf:"varint,39,opt,name=tschchartaxisdefaulttitleparagraphstyleindex" json:"tschchartaxisdefaulttitleparagraphstyleindex,omitempty"`
	Tschchartaxisvaluetitleparagraphstyleindex      *int32         `protobuf:"varint,40,opt,name=tschchartaxisvaluetitleparagraphstyleindex" json:"tschchartaxisvaluetitleparagraphstyleindex,omitempty"`
	Tschchartaxiscategoryverticalspacing            *int32         `protobuf:"varint,41,opt,name=tschchartaxiscategoryverticalspacing" json:"tschchartaxiscategoryverticalspacing,omitempty"`
}

func (x *ChartAxisStyleArchive) Reset() {
	*x = ChartAxisStyleArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHArchives_GEN_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartAxisStyleArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartAxisStyleArchive) ProtoMessage() {}

func (x *ChartAxisStyleArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHArchives_GEN_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartAxisStyleArchive.ProtoReflect.Descriptor instead.
func (*ChartAxisStyleArchive) Descriptor() ([]byte, []int) {
	return file_TSCHArchives_GEN_proto_rawDescGZIP(), []int{4}
}

func (x *ChartAxisStyleArchive) GetTschchartaxiscategory3Dgridlineopacity() float32 {
	if x != nil && x.Tschchartaxiscategory3Dgridlineopacity != nil {
		return *x.Tschchartaxiscategory3Dgridlineopacity
	}
	return 0
}

func (x *ChartAxisStyleArchive) GetTschchartaxisvalue3Dgridlineopacity() float32 {
	if x != nil && x.Tschchartaxisvalue3Dgridlineopacity != nil {
		return *x.Tschchartaxisvalue3Dgridlineopacity
	}
	return 0
}

func (x *ChartAxisStyleArchive) GetTschchartaxiscategory3Dgridlinestroke() *StrokeArchive {
	if x != nil {
		return x.Tschchartaxiscategory3Dgridlinestroke
	}
	return nil
}

func (x *ChartAxisStyleArchive) GetTschchartaxisvalue3Dgridlinestroke() *StrokeArchive {
	if x != nil {
		return x.Tschchartaxisvalue3Dgridlinestroke
	}
	return nil
}

func (x *ChartAxisStyleArchive) GetTschchartaxiscategoryhorizontalspacing() int32 {
	if x != nil && x.Tschchartaxiscategoryhorizontalspacing != nil {
		return *x.Tschchartaxiscategoryhorizontalspacing
	}
	return 0
}

func (x *ChartAxisStyleArchive) GetTschchartaxisdefaultlabelanglebaselinedirection() int32 {
	if x != nil && x.Tschchartaxisdefaultlabelanglebaselinedirection != nil {
		return *x.Tschchartaxisdefaultlabelanglebaselinedirection
	}
	return 0
}

func (x *ChartAxisStyleArchive) GetTschchartaxiscategorylabelparagraphstyleindex() int32 {
	if x != nil && x.Tschchartaxiscategorylabelparagraphstyleindex != nil {
		return *x.Tschchartaxiscategorylabelparagraphstyleindex
	}
	return 0
}

func (x *ChartAxisStyleArchive) GetTschchartaxisdefaultlabelparagraphstyleindex() int32 {
	if x != nil && x.Tschchartaxisdefaultlabelparagraphstyleindex != nil {
		return *x.Tschchartaxisdefaultlabelparagraphstyleindex
	}
	return 0
}

func (x *ChartAxisStyleArchive) GetTschchartaxisvaluelabelparagraphstyleindex() int32 {
	if x != nil && x.Tschchartaxisvaluelabelparagraphstyleindex != nil {
		return *x.Tschchartaxisvaluelabelparagraphstyleindex
	}
	return 0
}

func (x *ChartAxisStyleArchive) GetTschchartaxiscategorylabelsorientation() float32 {
	if x != nil && x.Tschchartaxiscategorylabelsorientation != nil {
		return *x.Tschchartaxiscategorylabelsorientation
	}
	return 0
}

func (x *ChartAxisStyleArchive) GetTschchartaxisdefaultlabelsorientation() float32 {
	if x != nil && x.Tschchartaxisdefaultlabelsorientation != nil {
		return *x.Tschchartaxisdefaultlabelsorientation
	}
	return 0
}

func (x *ChartAxisStyleArchive) GetTschchartaxisvaluelabelsorientation() float32 {
	if x != nil && x.Tschchartaxisvaluelabelsorientation != nil {
		return *x.Tschchartaxisvaluelabelsorientation
	}
	return 0
}

func (x *ChartAxisStyleArchive) GetTschchartaxiscategorymajorgridlineopacity() float32 {
	if x != nil && x.Tschchartaxiscategorymajorgridlineopacity != nil {
		return *x.Tschchartaxiscategorymajorgridlineopacity
	}
	return 0
}

func (x *ChartAxisStyleArchive) GetTschchartaxisvaluemajorgridlineopacity() float32 {
	if x != nil && x.Tschchartaxisvaluemajorgridlineopacity != nil {
		return *x.Tschchartaxisvaluemajorgridlineopacity
	}
	return 0
}

func (x *ChartAxisStyleArchive) GetTschchartaxiscategorymajorgridlineshadow() *ShadowArchive {
	if x != nil {
		return x.Tschchartaxiscategorymajorgridlineshadow
	}
	return nil
}

func (x *ChartAxisStyleArchive) GetTschchartaxisvaluemajorgridlineshadow() *ShadowArchive {
	if x != nil {
		return x.Tschchartaxisvaluemajorgridlineshadow
	}
	return nil
}

func (x *ChartAxisStyleArchive) GetTschchartaxiscategorymajorgridlinestroke() *StrokeArchive {
	if x != nil {
		return x.Tschchartaxiscategorymajorgridlinestroke
	}
	return nil
}

func (x *ChartAxisStyleArchive) GetTschchartaxisvaluemajorgridlinestroke() *StrokeArchive {
	if x != nil {
		return x.Tschchartaxisvaluemajorgridlinestroke
	}
	return nil
}

func (x *ChartAxisStyleArchive) GetTschchartaxiscategoryminorgridlineopacity() float32 {
	if x != nil && x.Tschchartaxiscategoryminorgridlineopacity != nil {
		return *x.Tschchartaxiscategoryminorgridlineopacity
	}
	return 0
}

func (x *ChartAxisStyleArchive) GetTschchartaxisvalueminorgridlineopacity() float32 {
	if x != nil && x.Tschchartaxisvalueminorgridlineopacity != nil {
		return *x.Tschchartaxisvalueminorgridlineopacity
	}
	return 0
}

func (x *ChartAxisStyleArchive) GetTschchartaxiscategoryminorgridlineshadow() *ShadowArchive {
	if x != nil {
		return x.Tschchartaxiscategoryminorgridlineshadow
	}
	return nil
}

func (x *ChartAxisStyleArchive) GetTschchartaxisvalueminorgridlineshadow() *ShadowArchive {
	if x != nil {
		return x.Tschchartaxisvalueminorgridlineshadow
	}
	return nil
}

func (x *ChartAxisStyleArchive) GetTschchartaxiscategoryminorgridlinestroke() *StrokeArchive {
	if x != nil {
		return x.Tschchartaxiscategoryminorgridlinestroke
	}
	return nil
}

func (x *ChartAxisStyleArchive) GetTschchartaxisvalueminorgridlinestroke() *StrokeArchive {
	if x != nil {
		return x.Tschchartaxisvalueminorgridlinestroke
	}
	return nil
}

func (x *ChartAxisStyleArchive) GetTschchartaxiscategoryshowaxis() bool {
	if x != nil && x.Tschchartaxiscategoryshowaxis != nil {
		return *x.Tschchartaxiscategoryshowaxis
	}
	return false
}

func (x *ChartAxisStyleArchive) GetTschchartaxisvalueshowaxis() bool {
	if x != nil && x.Tschchartaxisvalueshowaxis != nil {
		return *x.Tschchartaxisvalueshowaxis
	}
	return false
}

func (x *ChartAxisStyleArchive) GetTschchartaxisdefaultshowextensionlines() bool {
	if x != nil && x.Tschchartaxisdefaultshowextensionlines != nil {
		return *x.Tschchartaxisdefaultshowextensionlines
	}
	return false
}

func (x *ChartAxisStyleArchive) GetTschchartaxiscategoryshowgridlinetickmarks() bool {
	if x != nil && x.Tschchartaxiscategoryshowgridlinetickmarks != nil {
		return *x.Tschchartaxiscategoryshowgridlinetickmarks
	}
	return false
}

func (x *ChartAxisStyleArchive) GetTschchartaxisvalueshowgridlinetickmarks() bool {
	if x != nil && x.Tschchartaxisvalueshowgridlinetickmarks != nil {
		return *x.Tschchartaxisvalueshowgridlinetickmarks
	}
	return false
}

func (x *ChartAxisStyleArchive) GetTschchartaxiscategoryshowlastlabel() bool {
	if x != nil && x.Tschchartaxiscategoryshowlastlabel != nil {
		return *x.Tschchartaxiscategoryshowlastlabel
	}
	return false
}

func (x *ChartAxisStyleArchive) GetTschchartaxiscategoryshowmajorgridlines() bool {
	if x != nil && x.Tschchartaxiscategoryshowmajorgridlines != nil {
		return *x.Tschchartaxiscategoryshowmajorgridlines
	}
	return false
}

func (x *ChartAxisStyleArchive) GetTschchartaxispolarcategoryshowmajorgridlines() bool {
	if x != nil && x.Tschchartaxispolarcategoryshowmajorgridlines != nil {
		return *x.Tschchartaxispolarcategoryshowmajorgridlines
	}
	return false
}

func (x *ChartAxisStyleArchive) GetTschchartaxisvalueshowmajorgridlines() bool {
	if x != nil && x.Tschchartaxisvalueshowmajorgridlines != nil {
		return *x.Tschchartaxisvalueshowmajorgridlines
	}
	return false
}

func (x *ChartAxisStyleArchive) GetTschchartaxiscategoryshowmajortickmarks() bool {
	if x != nil && x.Tschchartaxiscategoryshowmajortickmarks != nil {
		return *x.Tschchartaxiscategoryshowmajortickmarks
	}
	return false
}

func (x *ChartAxisStyleArchive) GetTschchartaxisvalueshowmajortickmarks() bool {
	if x != nil && x.Tschchartaxisvalueshowmajortickmarks != nil {
		return *x.Tschchartaxisvalueshowmajortickmarks
	}
	return false
}

func (x *ChartAxisStyleArchive) GetTschchartaxisvalueshowminimumlabel() bool {
	if x != nil && x.Tschchartaxisvalueshowminimumlabel != nil {
		return *x.Tschchartaxisvalueshowminimumlabel
	}
	return false
}

func (x *ChartAxisStyleArchive) GetTschchartaxiscategoryshowminorgridlines() bool {
	if x != nil && x.Tschchartaxiscategoryshowminorgridlines != nil {
		return *x.Tschchartaxiscategoryshowminorgridlines
	}
	return false
}

func (x *ChartAxisStyleArchive) GetTschchartaxisvalueshowminorgridlines() bool {
	if x != nil && x.Tschchartaxisvalueshowminorgridlines != nil {
		return *x.Tschchartaxisvalueshowminorgridlines
	}
	return false
}

func (x *ChartAxisStyleArchive) GetTschchartaxiscategoryshowminortickmarks() bool {
	if x != nil && x.Tschchartaxiscategoryshowminortickmarks != nil {
		return *x.Tschchartaxiscategoryshowminortickmarks
	}
	return false
}

func (x *ChartAxisStyleArchive) GetTschchartaxisvalueshowminortickmarks() bool {
	if x != nil && x.Tschchartaxisvalueshowminortickmarks != nil {
		return *x.Tschchartaxisvalueshowminortickmarks
	}
	return false
}

func (x *ChartAxisStyleArchive) GetTschchartaxiscategorytickmarklocation() int32 {
	if x != nil && x.Tschchartaxiscategorytickmarklocation != nil {
		return *x.Tschchartaxiscategorytickmarklocation
	}
	return 0
}

func (x *ChartAxisStyleArchive) GetTschchartaxisvaluetickmarklocation() int32 {
	if x != nil && x.Tschchartaxisvaluetickmarklocation != nil {
		return *x.Tschchartaxisvaluetickmarklocation
	}
	return 0
}

func (x *ChartAxisStyleArchive) GetTschchartaxiscategorytitleparagraphstyleindex() int32 {
	if x != nil && x.Tschchartaxiscategorytitleparagraphstyleindex != nil {
		return *x.Tschchartaxiscategorytitleparagraphstyleindex
	}
	return 0
}

func (x *ChartAxisStyleArchive) GetTschchartaxisdefaulttitleparagraphstyleindex() int32 {
	if x != nil && x.Tschchartaxisdefaulttitleparagraphstyleindex != nil {
		return *x.Tschchartaxisdefaulttitleparagraphstyleindex
	}
	return 0
}

func (x *ChartAxisStyleArchive) GetTschchartaxisvaluetitleparagraphstyleindex() int32 {
	if x != nil && x.Tschchartaxisvaluetitleparagraphstyleindex != nil {
		return *x.Tschchartaxisvaluetitleparagraphstyleindex
	}
	return 0
}

func (x *ChartAxisStyleArchive) GetTschchartaxiscategoryverticalspacing() int32 {
	if x != nil && x.Tschchartaxiscategoryverticalspacing != nil {
		return *x.Tschchartaxiscategoryverticalspacing
	}
	return 0
}

type ChartAxisNonStyleArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tschchartaxisdefault1_0Dateformat        *TSKFormatStructArchive      `protobuf:"bytes,20,opt,name=tschchartaxisdefault1_0dateformat,json=tschchartaxisdefault10dateformat" json:"tschchartaxisdefault1_0dateformat,omitempty"`
	Tschchartaxisdefault1_0Numberformat      *TSKFormatStructArchive      `protobuf:"bytes,2,opt,name=tschchartaxisdefault1_0numberformat,json=tschchartaxisdefault10numberformat" json:"tschchartaxisdefault1_0numberformat,omitempty"`
	Tschchartaxisdefault3Dlabelposition      *int32                       `protobuf:"varint,1,opt,name=tschchartaxisdefault3dlabelposition" json:"tschchartaxisdefault3dlabelposition,omitempty"`
	Tschchartaxisdefaultdateformat           *TSKFormatStructArchive      `protobuf:"bytes,22,opt,name=tschchartaxisdefaultdateformat" json:"tschchartaxisdefaultdateformat,omitempty"`
	Tschchartaxisdefaultdurationformat       *TSKFormatStructArchive      `protobuf:"bytes,21,opt,name=tschchartaxisdefaultdurationformat" json:"tschchartaxisdefaultdurationformat,omitempty"`
	Tschchartaxisdefaultlabelexplosion       *float32                     `protobuf:"fixed32,23,opt,name=tschchartaxisdefaultlabelexplosion" json:"tschchartaxisdefaultlabelexplosion,omitempty"`
	Tschchartaxisdefaultnumberformat         *TSKFormatStructArchive      `protobuf:"bytes,42,opt,name=tschchartaxisdefaultnumberformat" json:"tschchartaxisdefaultnumberformat,omitempty"`
	Tschchartaxisdefaultnumberformattype     *int32                       `protobuf:"varint,3,opt,name=tschchartaxisdefaultnumberformattype" json:"tschchartaxisdefaultnumberformattype,omitempty"`
	Tschchartaxisvaluenumberofdecades        *int32                       `protobuf:"varint,4,opt,name=tschchartaxisvaluenumberofdecades" json:"tschchartaxisvaluenumberofdecades,omitempty"`
	Tschchartaxisvaluenumberofmajorgridlines *int32                       `protobuf:"varint,5,opt,name=tschchartaxisvaluenumberofmajorgridlines" json:"tschchartaxisvaluenumberofmajorgridlines,omitempty"`
	Tschchartaxisvaluenumberofminorgridlines *int32                       `protobuf:"varint,6,opt,name=tschchartaxisvaluenumberofminorgridlines" json:"tschchartaxisvaluenumberofminorgridlines,omitempty"`
	Tschchartaxiscategoryplottoedges         *bool                        `protobuf:"varint,7,opt,name=tschchartaxiscategoryplottoedges" json:"tschchartaxiscategoryplottoedges,omitempty"`
	Tschchartaxisvaluescale                  *int32                       `protobuf:"varint,8,opt,name=tschchartaxisvaluescale" json:"tschchartaxisvaluescale,omitempty"`
	Tschchartaxiscategoryshowlabels          *bool                        `protobuf:"varint,9,opt,name=tschchartaxiscategoryshowlabels" json:"tschchartaxiscategoryshowlabels,omitempty"`
	Tschchartaxisdefaultshowlabels           *bool                        `protobuf:"varint,10,opt,name=tschchartaxisdefaultshowlabels" json:"tschchartaxisdefaultshowlabels,omitempty"`
	Tschchartaxisvalueshowlabels             *bool                        `protobuf:"varint,11,opt,name=tschchartaxisvalueshowlabels" json:"tschchartaxisvalueshowlabels,omitempty"`
	Tschchartaxiscategoryshowserieslabels    *bool                        `protobuf:"varint,12,opt,name=tschchartaxiscategoryshowserieslabels" json:"tschchartaxiscategoryshowserieslabels,omitempty"`
	Tschchartaxismultidatashowserieslabels   *bool                        `protobuf:"varint,19,opt,name=tschchartaxismultidatashowserieslabels" json:"tschchartaxismultidatashowserieslabels,omitempty"`
	Tschchartaxiscategoryshowtitle           *bool                        `protobuf:"varint,13,opt,name=tschchartaxiscategoryshowtitle" json:"tschchartaxiscategoryshowtitle,omitempty"`
	Tschchartaxisvalueshowtitle              *bool                        `protobuf:"varint,14,opt,name=tschchartaxisvalueshowtitle" json:"tschchartaxisvalueshowtitle,omitempty"`
	Tschchartaxiscategorytitle               *string                      `protobuf:"bytes,15,opt,name=tschchartaxiscategorytitle" json:"tschchartaxiscategorytitle,omitempty"`
	Tschchartaxisvaluetitle                  *string                      `protobuf:"bytes,16,opt,name=tschchartaxisvaluetitle" json:"tschchartaxisvaluetitle,omitempty"`
	Tschchartaxisdefaultusermax              *ChartsNSNumberDoubleArchive `protobuf:"bytes,17,opt,name=tschchartaxisdefaultusermax" json:"tschchartaxisdefaultusermax,omitempty"`
	Tschchartaxisdefaultusermin              *ChartsNSNumberDoubleArchive `protobuf:"bytes,18,opt,name=tschchartaxisdefaultusermin" json:"tschchartaxisdefaultusermin,omitempty"`
}

func (x *ChartAxisNonStyleArchive) Reset() {
	*x = ChartAxisNonStyleArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHArchives_GEN_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartAxisNonStyleArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartAxisNonStyleArchive) ProtoMessage() {}

func (x *ChartAxisNonStyleArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHArchives_GEN_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartAxisNonStyleArchive.ProtoReflect.Descriptor instead.
func (*ChartAxisNonStyleArchive) Descriptor() ([]byte, []int) {
	return file_TSCHArchives_GEN_proto_rawDescGZIP(), []int{5}
}

func (x *ChartAxisNonStyleArchive) GetTschchartaxisdefault1_0Dateformat() *TSKFormatStructArchive {
	if x != nil {
		return x.Tschchartaxisdefault1_0Dateformat
	}
	return nil
}

func (x *ChartAxisNonStyleArchive) GetTschchartaxisdefault1_0Numberformat() *TSKFormatStructArchive {
	if x != nil {
		return x.Tschchartaxisdefault1_0Numberformat
	}
	return nil
}

func (x *ChartAxisNonStyleArchive) GetTschchartaxisdefault3Dlabelposition() int32 {
	if x != nil && x.Tschchartaxisdefault3Dlabelposition != nil {
		return *x.Tschchartaxisdefault3Dlabelposition
	}
	return 0
}

func (x *ChartAxisNonStyleArchive) GetTschchartaxisdefaultdateformat() *TSKFormatStructArchive {
	if x != nil {
		return x.Tschchartaxisdefaultdateformat
	}
	return nil
}

func (x *ChartAxisNonStyleArchive) GetTschchartaxisdefaultdurationformat() *TSKFormatStructArchive {
	if x != nil {
		return x.Tschchartaxisdefaultdurationformat
	}
	return nil
}

func (x *ChartAxisNonStyleArchive) GetTschchartaxisdefaultlabelexplosion() float32 {
	if x != nil && x.Tschchartaxisdefaultlabelexplosion != nil {
		return *x.Tschchartaxisdefaultlabelexplosion
	}
	return 0
}

func (x *ChartAxisNonStyleArchive) GetTschchartaxisdefaultnumberformat() *TSKFormatStructArchive {
	if x != nil {
		return x.Tschchartaxisdefaultnumberformat
	}
	return nil
}

func (x *ChartAxisNonStyleArchive) GetTschchartaxisdefaultnumberformattype() int32 {
	if x != nil && x.Tschchartaxisdefaultnumberformattype != nil {
		return *x.Tschchartaxisdefaultnumberformattype
	}
	return 0
}

func (x *ChartAxisNonStyleArchive) GetTschchartaxisvaluenumberofdecades() int32 {
	if x != nil && x.Tschchartaxisvaluenumberofdecades != nil {
		return *x.Tschchartaxisvaluenumberofdecades
	}
	return 0
}

func (x *ChartAxisNonStyleArchive) GetTschchartaxisvaluenumberofmajorgridlines() int32 {
	if x != nil && x.Tschchartaxisvaluenumberofmajorgridlines != nil {
		return *x.Tschchartaxisvaluenumberofmajorgridlines
	}
	return 0
}

func (x *ChartAxisNonStyleArchive) GetTschchartaxisvaluenumberofminorgridlines() int32 {
	if x != nil && x.Tschchartaxisvaluenumberofminorgridlines != nil {
		return *x.Tschchartaxisvaluenumberofminorgridlines
	}
	return 0
}

func (x *ChartAxisNonStyleArchive) GetTschchartaxiscategoryplottoedges() bool {
	if x != nil && x.Tschchartaxiscategoryplottoedges != nil {
		return *x.Tschchartaxiscategoryplottoedges
	}
	return false
}

func (x *ChartAxisNonStyleArchive) GetTschchartaxisvaluescale() int32 {
	if x != nil && x.Tschchartaxisvaluescale != nil {
		return *x.Tschchartaxisvaluescale
	}
	return 0
}

func (x *ChartAxisNonStyleArchive) GetTschchartaxiscategoryshowlabels() bool {
	if x != nil && x.Tschchartaxiscategoryshowlabels != nil {
		return *x.Tschchartaxiscategoryshowlabels
	}
	return false
}

func (x *ChartAxisNonStyleArchive) GetTschchartaxisdefaultshowlabels() bool {
	if x != nil && x.Tschchartaxisdefaultshowlabels != nil {
		return *x.Tschchartaxisdefaultshowlabels
	}
	return false
}

func (x *ChartAxisNonStyleArchive) GetTschchartaxisvalueshowlabels() bool {
	if x != nil && x.Tschchartaxisvalueshowlabels != nil {
		return *x.Tschchartaxisvalueshowlabels
	}
	return false
}

func (x *ChartAxisNonStyleArchive) GetTschchartaxiscategoryshowserieslabels() bool {
	if x != nil && x.Tschchartaxiscategoryshowserieslabels != nil {
		return *x.Tschchartaxiscategoryshowserieslabels
	}
	return false
}

func (x *ChartAxisNonStyleArchive) GetTschchartaxismultidatashowserieslabels() bool {
	if x != nil && x.Tschchartaxismultidatashowserieslabels != nil {
		return *x.Tschchartaxismultidatashowserieslabels
	}
	return false
}

func (x *ChartAxisNonStyleArchive) GetTschchartaxiscategoryshowtitle() bool {
	if x != nil && x.Tschchartaxiscategoryshowtitle != nil {
		return *x.Tschchartaxiscategoryshowtitle
	}
	return false
}

func (x *ChartAxisNonStyleArchive) GetTschchartaxisvalueshowtitle() bool {
	if x != nil && x.Tschchartaxisvalueshowtitle != nil {
		return *x.Tschchartaxisvalueshowtitle
	}
	return false
}

func (x *ChartAxisNonStyleArchive) GetTschchartaxiscategorytitle() string {
	if x != nil && x.Tschchartaxiscategorytitle != nil {
		return *x.Tschchartaxiscategorytitle
	}
	return ""
}

func (x *ChartAxisNonStyleArchive) GetTschchartaxisvaluetitle() string {
	if x != nil && x.Tschchartaxisvaluetitle != nil {
		return *x.Tschchartaxisvaluetitle
	}
	return ""
}

func (x *ChartAxisNonStyleArchive) GetTschchartaxisdefaultusermax() *ChartsNSNumberDoubleArchive {
	if x != nil {
		return x.Tschchartaxisdefaultusermax
	}
	return nil
}

func (x *ChartAxisNonStyleArchive) GetTschchartaxisdefaultusermin() *ChartsNSNumberDoubleArchive {
	if x != nil {
		return x.Tschchartaxisdefaultusermin
	}
	return nil
}

type ChartSeriesStyleArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tschchartseriesdefaultcalloutlineendlineend                *LineEndArchive `protobuf:"bytes,130,opt,name=tschchartseriesdefaultcalloutlineendlineend" json:"tschchartseriesdefaultcalloutlineendlineend,omitempty"`
	Tschchartseriesdefaultcalloutlinestartlineend              *LineEndArchive `protobuf:"bytes,129,opt,name=tschchartseriesdefaultcalloutlinestartlineend" json:"tschchartseriesdefaultcalloutlinestartlineend,omitempty"`
	Tschchartseriesdefaultcalloutlinestrokestyle               *StrokeArchive  `protobuf:"bytes,128,opt,name=tschchartseriesdefaultcalloutlinestrokestyle" json:"tschchartseriesdefaultcalloutlinestrokestyle,omitempty"`
	Tschchartseriesdefaulterrorbarlineend                      *LineEndArchive `protobuf:"bytes,1,opt,name=tschchartseriesdefaulterrorbarlineend" json:"tschchartseriesdefaulterrorbarlineend,omitempty"`
	Tschchartseriesdefaulterrorbarlineendscatterx              *LineEndArchive `protobuf:"bytes,2,opt,name=tschchartseriesdefaulterrorbarlineendscatterx" json:"tschchartseriesdefaulterrorbarlineendscatterx,omitempty"`
	Tschchartseriesdefaulterrorbarshadow                       *ShadowArchive  `protobuf:"bytes,3,opt,name=tschchartseriesdefaulterrorbarshadow" json:"tschchartseriesdefaulterrorbarshadow,omitempty"`
	Tschchartseriesdefaulterrorbarspacing                      *int32          `protobuf:"varint,98,opt,name=tschchartseriesdefaulterrorbarspacing" json:"tschchartseriesdefaulterrorbarspacing,omitempty"`
	Tschchartseriesdefaulterrorbarspacingscatterx              *int32          `protobuf:"varint,99,opt,name=tschchartseriesdefaulterrorbarspacingscatterx" json:"tschchartseriesdefaulterrorbarspacingscatterx,omitempty"`
	Tschchartseriesdefaulterrorbarstroke                       *StrokeArchive  `protobuf:"bytes,4,opt,name=tschchartseriesdefaulterrorbarstroke" json:"tschchartseriesdefaulterrorbarstroke,omitempty"`
	Tschchartseriesdefaulterrorbarstrokescatterx               *StrokeArchive  `protobuf:"bytes,5,opt,name=tschchartseriesdefaulterrorbarstrokescatterx" json:"tschchartseriesdefaulterrorbarstrokescatterx,omitempty"`
	Tschchartseries3Dareafill                                  *FillArchive    `protobuf:"bytes,6,opt,name=tschchartseries3dareafill" json:"tschchartseries3dareafill,omitempty"`
	Tschchartseries3Dbarfill                                   *FillArchive    `protobuf:"bytes,7,opt,name=tschchartseries3dbarfill" json:"tschchartseries3dbarfill,omitempty"`
	Tschchartseries3Dcolumnfill                                *FillArchive    `protobuf:"bytes,8,opt,name=tschchartseries3dcolumnfill" json:"tschchartseries3dcolumnfill,omitempty"`
	Tschchartseries3Dlinefill                                  *FillArchive    `protobuf:"bytes,9,opt,name=tschchartseries3dlinefill" json:"tschchartseries3dlinefill,omitempty"`
	Tschchartseries3Dpiefill                                   *FillArchive    `protobuf:"bytes,10,opt,name=tschchartseries3dpiefill" json:"tschchartseries3dpiefill,omitempty"`
	Tschchartseriesareafill                                    *FillArchive    `protobuf:"bytes,11,opt,name=tschchartseriesareafill" json:"tschchartseriesareafill,omitempty"`
	Tschchartseriesbarfill                                     *FillArchive    `protobuf:"bytes,12,opt,name=tschchartseriesbarfill" json:"tschchartseriesbarfill,omitempty"`
	Tschchartseriescolumnfill                                  *FillArchive    `protobuf:"bytes,13,opt,name=tschchartseriescolumnfill" json:"tschchartseriescolumnfill,omitempty"`
	Tschchartseriesdefaultfill                                 *FillArchive    `protobuf:"bytes,14,opt,name=tschchartseriesdefaultfill" json:"tschchartseriesdefaultfill,omitempty"`
	Tschchartseriesmixedareafill                               *FillArchive    `protobuf:"bytes,15,opt,name=tschchartseriesmixedareafill" json:"tschchartseriesmixedareafill,omitempty"`
	Tschchartseriesmixedcolumnfill                             *FillArchive    `protobuf:"bytes,16,opt,name=tschchartseriesmixedcolumnfill" json:"tschchartseriesmixedcolumnfill,omitempty"`
	Tschchartseriespiefill                                     *FillArchive    `protobuf:"bytes,17,opt,name=tschchartseriespiefill" json:"tschchartseriespiefill,omitempty"`
	Tschchartseriesradarareafill                               *FillArchive    `protobuf:"bytes,165,opt,name=tschchartseriesradarareafill" json:"tschchartseriesradarareafill,omitempty"`
	Tschchartseriesradarareafilluseseriesstrokealphamultiplier *float32        `protobuf:"fixed32,189,opt,name=tschchartseriesradarareafilluseseriesstrokealphamultiplier" json:"tschchartseriesradarareafilluseseriesstrokealphamultiplier,omitempty"`
	Tschchartseriesradarareafilluseseriesstroke                *bool           `protobuf:"varint,188,opt,name=tschchartseriesradarareafilluseseriesstroke" json:"tschchartseriesradarareafilluseseriesstroke,omitempty"`
	Tschchartseriesarealabelparagraphstyleindex                *int32          `protobuf:"varint,18,opt,name=tschchartseriesarealabelparagraphstyleindex" json:"tschchartseriesarealabelparagraphstyleindex,omitempty"`
	Tschchartseriesbarlabelparagraphstyleindex                 *int32          `protobuf:"varint,19,opt,name=tschchartseriesbarlabelparagraphstyleindex" json:"tschchartseriesbarlabelparagraphstyleindex,omitempty"`
	Tschchartseriesdefaultlabelparagraphstyleindex             *int32          `protobuf:"varint,20,opt,name=tschchartseriesdefaultlabelparagraphstyleindex" json:"tschchartseriesdefaultlabelparagraphstyleindex,omitempty"`
	Tschchartseriesdonutlabelparagraphstyleindex               *int32          `protobuf:"varint,152,opt,name=tschchartseriesdonutlabelparagraphstyleindex" json:"tschchartseriesdonutlabelparagraphstyleindex,omitempty"`
	Tschchartserieslinelabelparagraphstyleindex                *int32          `protobuf:"varint,21,opt,name=tschchartserieslinelabelparagraphstyleindex" json:"tschchartserieslinelabelparagraphstyleindex,omitempty"`
	Tschchartseriesmixedlabelparagraphstyleindex               *int32          `protobuf:"varint,22,opt,name=tschchartseriesmixedlabelparagraphstyleindex" json:"tschchartseriesmixedlabelparagraphstyleindex,omitempty"`
	Tschchartseriespielabelparagraphstyleindex                 *int32          `protobuf:"varint,23,opt,name=tschchartseriespielabelparagraphstyleindex" json:"tschchartseriespielabelparagraphstyleindex,omitempty"`
	Tschchartseriesradarlabelparagraphstyleindex               *int32          `protobuf:"varint,167,opt,name=tschchartseriesradarlabelparagraphstyleindex" json:"tschchartseriesradarlabelparagraphstyleindex,omitempty"`
	Tschchartseriesdefaultopacity                              *float32        `protobuf:"fixed32,24,opt,name=tschchartseriesdefaultopacity" json:"tschchartseriesdefaultopacity,omitempty"`
	Tschchartseriesareaoutsidelabelparagraphstyleindex         *int32          `protobuf:"varint,25,opt,name=tschchartseriesareaoutsidelabelparagraphstyleindex" json:"tschchartseriesareaoutsidelabelparagraphstyleindex,omitempty"`
	Tschchartseriesbaroutsidelabelparagraphstyleindex          *int32          `protobuf:"varint,26,opt,name=tschchartseriesbaroutsidelabelparagraphstyleindex" json:"tschchartseriesbaroutsidelabelparagraphstyleindex,omitempty"`
	Tschchartseriesdefaultoutsidelabelparagraphstyleindex      *int32          `protobuf:"varint,27,opt,name=tschchartseriesdefaultoutsidelabelparagraphstyleindex" json:"tschchartseriesdefaultoutsidelabelparagraphstyleindex,omitempty"`
	Tschchartseriesdonutoutsidelabelparagraphstyleindex        *int32          `protobuf:"varint,153,opt,name=tschchartseriesdonutoutsidelabelparagraphstyleindex" json:"tschchartseriesdonutoutsidelabelparagraphstyleindex,omitempty"`
	Tschchartseriesmixedoutsidelabelparagraphstyleindex        *int32          `protobuf:"varint,28,opt,name=tschchartseriesmixedoutsidelabelparagraphstyleindex" json:"tschchartseriesmixedoutsidelabelparagraphstyleindex,omitempty"`
	Tschchartseriespieoutsidelabelparagraphstyleindex          *int32          `protobuf:"varint,29,opt,name=tschchartseriespieoutsidelabelparagraphstyleindex" json:"tschchartseriespieoutsidelabelparagraphstyleindex,omitempty"`
	Tschchartseriesradaroutsidelabelparagraphstyleindex        *int32          `protobuf:"varint,168,opt,name=tschchartseriesradaroutsidelabelparagraphstyleindex" json:"tschchartseriesradaroutsidelabelparagraphstyleindex,omitempty"`
	Tschchartseries3Dareashadow                                *ShadowArchive  `protobuf:"bytes,30,opt,name=tschchartseries3dareashadow" json:"tschchartseries3dareashadow,omitempty"`
	Tschchartseries3Dbarshadow                                 *ShadowArchive  `protobuf:"bytes,31,opt,name=tschchartseries3dbarshadow" json:"tschchartseries3dbarshadow,omitempty"`
	Tschchartseries3Dcolumnshadow                              *ShadowArchive  `protobuf:"bytes,32,opt,name=tschchartseries3dcolumnshadow" json:"tschchartseries3dcolumnshadow,omitempty"`
	Tschchartseries3Dlineshadow                                *ShadowArchive  `protobuf:"bytes,33,opt,name=tschchartseries3dlineshadow" json:"tschchartseries3dlineshadow,omitempty"`
	Tschchartseries3Dpieshadow                                 *ShadowArchive  `protobuf:"bytes,34,opt,name=tschchartseries3dpieshadow" json:"tschchartseries3dpieshadow,omitempty"`
	Tschchartseriesareashadow                                  *ShadowArchive  `protobuf:"bytes,35,opt,name=tschchartseriesareashadow" json:"tschchartseriesareashadow,omitempty"`
	Tschchartseriesbarshadow                                   *ShadowArchive  `protobuf:"bytes,36,opt,name=tschchartseriesbarshadow" json:"tschchartseriesbarshadow,omitempty"`
	Tschchartseriesbubbleshadow                                *ShadowArchive  `protobuf:"bytes,37,opt,name=tschchartseriesbubbleshadow" json:"tschchartseriesbubbleshadow,omitempty"`
	Tschchartseriesdefaultshadow                               *ShadowArchive  `protobuf:"bytes,38,opt,name=tschchartseriesdefaultshadow" json:"tschchartseriesdefaultshadow,omitempty"`
	Tschchartserieslineshadow                                  *ShadowArchive  `protobuf:"bytes,39,opt,name=tschchartserieslineshadow" json:"tschchartserieslineshadow,omitempty"`
	Tschchartseriesmixedareashadow                             *ShadowArchive  `protobuf:"bytes,40,opt,name=tschchartseriesmixedareashadow" json:"tschchartseriesmixedareashadow,omitempty"`
	Tschchartseriesmixedcolumnshadow                           *ShadowArchive  `protobuf:"bytes,41,opt,name=tschchartseriesmixedcolumnshadow" json:"tschchartseriesmixedcolumnshadow,omitempty"`
	Tschchartseriesmixedlineshadow                             *ShadowArchive  `protobuf:"bytes,42,opt,name=tschchartseriesmixedlineshadow" json:"tschchartseriesmixedlineshadow,omitempty"`
	Tschchartseriespieshadow                                   *ShadowArchive  `protobuf:"bytes,43,opt,name=tschchartseriespieshadow" json:"tschchartseriespieshadow,omitempty"`
	Tschchartseriesradarareashadow                             *ShadowArchive  `protobuf:"bytes,169,opt,name=tschchartseriesradarareashadow" json:"tschchartseriesradarareashadow,omitempty"`
	Tschchartseriesscattershadow                               *ShadowArchive  `protobuf:"bytes,44,opt,name=tschchartseriesscattershadow" json:"tschchartseriesscattershadow,omitempty"`
	Tschchartseriesareastroke                                  *StrokeArchive  `protobuf:"bytes,45,opt,name=tschchartseriesareastroke" json:"tschchartseriesareastroke,omitempty"`
	Tschchartseriesbarstroke                                   *StrokeArchive  `protobuf:"bytes,46,opt,name=tschchartseriesbarstroke" json:"tschchartseriesbarstroke,omitempty"`
	Tschchartseriesbubblestroke                                *StrokeArchive  `protobuf:"bytes,47,opt,name=tschchartseriesbubblestroke" json:"tschchartseriesbubblestroke,omitempty"`
	Tschchartserieslinestroke                                  *StrokeArchive  `protobuf:"bytes,48,opt,name=tschchartserieslinestroke" json:"tschchartserieslinestroke,omitempty"`
	Tschchartseriesmixedareastroke                             *StrokeArchive  `protobuf:"bytes,49,opt,name=tschchartseriesmixedareastroke" json:"tschchartseriesmixedareastroke,omitempty"`
	Tschchartseriesmixedcolumnstroke                           *StrokeArchive  `protobuf:"bytes,50,opt,name=tschchartseriesmixedcolumnstroke" json:"tschchartseriesmixedcolumnstroke,omitempty"`
	Tschchartseriesmixedlinestroke                             *StrokeArchive  `protobuf:"bytes,51,opt,name=tschchartseriesmixedlinestroke" json:"tschchartseriesmixedlinestroke,omitempty"`
	Tschchartseriespiestroke                                   *StrokeArchive  `protobuf:"bytes,52,opt,name=tschchartseriespiestroke" json:"tschchartseriespiestroke,omitempty"`
	Tschchartseriesradarareastroke                             *StrokeArchive  `protobuf:"bytes,172,opt,name=tschchartseriesradarareastroke" json:"tschchartseriesradarareastroke,omitempty"`
	Tschchartseriesscatterstroke                               *StrokeArchive  `protobuf:"bytes,53,opt,name=tschchartseriesscatterstroke" json:"tschchartseriesscatterstroke,omitempty"`
	Tschchartseriesareasymbolfill                              *FillArchive    `protobuf:"bytes,54,opt,name=tschchartseriesareasymbolfill" json:"tschchartseriesareasymbolfill,omitempty"`
	Tschchartseriesbubblesymbolfill                            *FillArchive    `protobuf:"bytes,55,opt,name=tschchartseriesbubblesymbolfill" json:"tschchartseriesbubblesymbolfill,omitempty"`
	Tschchartserieslinesymbolfill                              *FillArchive    `protobuf:"bytes,56,opt,name=tschchartserieslinesymbolfill" json:"tschchartserieslinesymbolfill,omitempty"`
	Tschchartseriesmixedareasymbolfill                         *FillArchive    `protobuf:"bytes,57,opt,name=tschchartseriesmixedareasymbolfill" json:"tschchartseriesmixedareasymbolfill,omitempty"`
	Tschchartseriesmixedlinesymbolfill                         *FillArchive    `protobuf:"bytes,58,opt,name=tschchartseriesmixedlinesymbolfill" json:"tschchartseriesmixedlinesymbolfill,omitempty"`
	Tschchartseriesradarareasymbolfill                         *FillArchive    `protobuf:"bytes,175,opt,name=tschchartseriesradarareasymbolfill" json:"tschchartseriesradarareasymbolfill,omitempty"`
	Tschchartseriesscattersymbolfill                           *FillArchive    `protobuf:"bytes,59,opt,name=tschchartseriesscattersymbolfill" json:"tschchartseriesscattersymbolfill,omitempty"`
	Tschchartseriesareasymbolfilluseseriesfill                 *bool           `protobuf:"varint,60,opt,name=tschchartseriesareasymbolfilluseseriesfill" json:"tschchartseriesareasymbolfilluseseriesfill,omitempty"`
	Tschchartserieslinesymbolfilluseseriesfill                 *bool           `protobuf:"varint,61,opt,name=tschchartserieslinesymbolfilluseseriesfill" json:"tschchartserieslinesymbolfilluseseriesfill,omitempty"`
	Tschchartseriesmixedareasymbolfilluseseriesfill            *bool           `protobuf:"varint,62,opt,name=tschchartseriesmixedareasymbolfilluseseriesfill" json:"tschchartseriesmixedareasymbolfilluseseriesfill,omitempty"`
	Tschchartseriesmixedlinesymbolfilluseseriesfill            *bool           `protobuf:"varint,63,opt,name=tschchartseriesmixedlinesymbolfilluseseriesfill" json:"tschchartseriesmixedlinesymbolfilluseseriesfill,omitempty"`
	Tschchartseriesradarareasymbolfilluseseriesfill            *bool           `protobuf:"varint,177,opt,name=tschchartseriesradarareasymbolfilluseseriesfill" json:"tschchartseriesradarareasymbolfilluseseriesfill,omitempty"`
	Tschchartseriesareasymbolfilluseseriesstroke               *bool           `protobuf:"varint,64,opt,name=tschchartseriesareasymbolfilluseseriesstroke" json:"tschchartseriesareasymbolfilluseseriesstroke,omitempty"`
	Tschchartseriesbubblesymbolfilluseseriesstroke             *bool           `protobuf:"varint,65,opt,name=tschchartseriesbubblesymbolfilluseseriesstroke" json:"tschchartseriesbubblesymbolfilluseseriesstroke,omitempty"`
	Tschchartserieslinesymbolfilluseseriesstroke               *bool           `protobuf:"varint,66,opt,name=tschchartserieslinesymbolfilluseseriesstroke" json:"tschchartserieslinesymbolfilluseseriesstroke,omitempty"`
	Tschchartseriesmixedareasymbolfilluseseriesstroke          *bool           `protobuf:"varint,67,opt,name=tschchartseriesmixedareasymbolfilluseseriesstroke" json:"tschchartseriesmixedareasymbolfilluseseriesstroke,omitempty"`
	Tschchartseriesmixedlinesymbolfilluseseriesstroke          *bool           `protobuf:"varint,68,opt,name=tschchartseriesmixedlinesymbolfilluseseriesstroke" json:"tschchartseriesmixedlinesymbolfilluseseriesstroke,omitempty"`
	Tschchartseriesradarareasymbolfilluseseriesstroke          *bool           `protobuf:"varint,179,opt,name=tschchartseriesradarareasymbolfilluseseriesstroke" json:"tschchartseriesradarareasymbolfilluseseriesstroke,omitempty"`
	Tschchartseriesscattersymbolfilluseseriesstroke            *bool           `protobuf:"varint,69,opt,name=tschchartseriesscattersymbolfilluseseriesstroke" json:"tschchartseriesscattersymbolfilluseseriesstroke,omitempty"`
	Tschchartseriesareasymbolsize                              *float32        `protobuf:"fixed32,70,opt,name=tschchartseriesareasymbolsize" json:"tschchartseriesareasymbolsize,omitempty"`
	Tschchartserieslinesymbolsize                              *float32        `protobuf:"fixed32,71,opt,name=tschchartserieslinesymbolsize" json:"tschchartserieslinesymbolsize,omitempty"`
	Tschchartseriesmixedareasymbolsize                         *float32        `protobuf:"fixed32,72,opt,name=tschchartseriesmixedareasymbolsize" json:"tschchartseriesmixedareasymbolsize,omitempty"`
	Tschchartseriesmixedlinesymbolsize                         *float32        `protobuf:"fixed32,73,opt,name=tschchartseriesmixedlinesymbolsize" json:"tschchartseriesmixedlinesymbolsize,omitempty"`
	Tschchartseriesradarareasymbolsize                         *float32        `protobuf:"fixed32,181,opt,name=tschchartseriesradarareasymbolsize" json:"tschchartseriesradarareasymbolsize,omitempty"`
	Tschchartseriesscattersymbolsize                           *float32        `protobuf:"fixed32,74,opt,name=tschchartseriesscattersymbolsize" json:"tschchartseriesscattersymbolsize,omitempty"`
	Tschchartseriesareasymbolstroke                            *StrokeArchive  `protobuf:"bytes,75,opt,name=tschchartseriesareasymbolstroke" json:"tschchartseriesareasymbolstroke,omitempty"`
	Tschchartseriesbubblesymbolstroke                          *StrokeArchive  `protobuf:"bytes,76,opt,name=tschchartseriesbubblesymbolstroke" json:"tschchartseriesbubblesymbolstroke,omitempty"`
	Tschchartserieslinesymbolstroke                            *StrokeArchive  `protobuf:"bytes,77,opt,name=tschchartserieslinesymbolstroke" json:"tschchartserieslinesymbolstroke,omitempty"`
	Tschchartseriesmixedareasymbolstroke                       *StrokeArchive  `protobuf:"bytes,78,opt,name=tschchartseriesmixedareasymbolstroke" json:"tschchartseriesmixedareasymbolstroke,omitempty"`
	Tschchartseriesmixedlinesymbolstroke                       *StrokeArchive  `protobuf:"bytes,79,opt,name=tschchartseriesmixedlinesymbolstroke" json:"tschchartseriesmixedlinesymbolstroke,omitempty"`
	Tschchartseriesradarareasymbolstroke                       *StrokeArchive  `protobuf:"bytes,183,opt,name=tschchartseriesradarareasymbolstroke" json:"tschchartseriesradarareasymbolstroke,omitempty"`
	Tschchartseriesscattersymbolstroke                         *StrokeArchive  `protobuf:"bytes,80,opt,name=tschchartseriesscattersymbolstroke" json:"tschchartseriesscattersymbolstroke,omitempty"`
	Tschchartseriesdefaulttrendlineshadow                      *ShadowArchive  `protobuf:"bytes,85,opt,name=tschchartseriesdefaulttrendlineshadow" json:"tschchartseriesdefaulttrendlineshadow,omitempty"`
	Tschchartseriesdefaulttrendlinestroke                      *StrokeArchive  `protobuf:"bytes,86,opt,name=tschchartseriesdefaulttrendlinestroke" json:"tschchartseriesdefaulttrendlinestroke,omitempty"`
	Tschchartseriesdefaulttrendlineequationopacity             *float32        `protobuf:"fixed32,81,opt,name=tschchartseriesdefaulttrendlineequationopacity" json:"tschchartseriesdefaulttrendlineequationopacity,omitempty"`
	Tschchartseriesdefaulttrendlineequationparagraphstyleindex *int32          `protobuf:"varint,82,opt,name=tschchartseriesdefaulttrendlineequationparagraphstyleindex" json:"tschchartseriesdefaulttrendlineequationparagraphstyleindex,omitempty"`
	Tschchartseriesdefaulttrendlinersquaredopacity             *float32        `protobuf:"fixed32,83,opt,name=tschchartseriesdefaulttrendlinersquaredopacity" json:"tschchartseriesdefaulttrendlinersquaredopacity,omitempty"`
	Tschchartseriesdefaulttrendlinersquaredparagraphstyleindex *int32          `protobuf:"varint,84,opt,name=tschchartseriesdefaulttrendlinersquaredparagraphstyleindex" json:"tschchartseriesdefaulttrendlinersquaredparagraphstyleindex,omitempty"`
	Tschchartseriesareavaluelabelposition                      *int32          `protobuf:"varint,87,opt,name=tschchartseriesareavaluelabelposition" json:"tschchartseriesareavaluelabelposition,omitempty"`
	Tschchartseriesbarvaluelabelposition                       *int32          `protobuf:"varint,88,opt,name=tschchartseriesbarvaluelabelposition" json:"tschchartseriesbarvaluelabelposition,omitempty"`
	Tschchartseriesbubblevaluelabelposition                    *int32          `protobuf:"varint,89,opt,name=tschchartseriesbubblevaluelabelposition" json:"tschchartseriesbubblevaluelabelposition,omitempty"`
	Tschchartseriesdefaultvaluelabelposition                   *int32          `protobuf:"varint,90,opt,name=tschchartseriesdefaultvaluelabelposition" json:"tschchartseriesdefaultvaluelabelposition,omitempty"`
	Tschchartserieslinevaluelabelposition                      *int32          `protobuf:"varint,91,opt,name=tschchartserieslinevaluelabelposition" json:"tschchartserieslinevaluelabelposition,omitempty"`
	Tschchartseriesmixedareavaluelabelposition                 *int32          `protobuf:"varint,92,opt,name=tschchartseriesmixedareavaluelabelposition" json:"tschchartseriesmixedareavaluelabelposition,omitempty"`
	Tschchartseriesmixedcolumnvaluelabelposition               *int32          `protobuf:"varint,93,opt,name=tschchartseriesmixedcolumnvaluelabelposition" json:"tschchartseriesmixedcolumnvaluelabelposition,omitempty"`
	Tschchartseriesmixedlinevaluelabelposition                 *int32          `protobuf:"varint,94,opt,name=tschchartseriesmixedlinevaluelabelposition" json:"tschchartseriesmixedlinevaluelabelposition,omitempty"`
	Tschchartseriesradarareavaluelabelposition                 *int32          `protobuf:"varint,185,opt,name=tschchartseriesradarareavaluelabelposition" json:"tschchartseriesradarareavaluelabelposition,omitempty"`
	Tschchartseriesscattervaluelabelposition                   *int32          `protobuf:"varint,95,opt,name=tschchartseriesscattervaluelabelposition" json:"tschchartseriesscattervaluelabelposition,omitempty"`
	Tschchartseriesstackedareavaluelabelposition               *int32          `protobuf:"varint,96,opt,name=tschchartseriesstackedareavaluelabelposition" json:"tschchartseriesstackedareavaluelabelposition,omitempty"`
	Tschchartseriesstackedbarvaluelabelposition                *int32          `protobuf:"varint,97,opt,name=tschchartseriesstackedbarvaluelabelposition" json:"tschchartseriesstackedbarvaluelabelposition,omitempty"`
	Tschchartseriesdefaultvaluelabelspacing                    *int32          `protobuf:"varint,100,opt,name=tschchartseriesdefaultvaluelabelspacing" json:"tschchartseriesdefaultvaluelabelspacing,omitempty"`
}

func (x *ChartSeriesStyleArchive) Reset() {
	*x = ChartSeriesStyleArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHArchives_GEN_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartSeriesStyleArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartSeriesStyleArchive) ProtoMessage() {}

func (x *ChartSeriesStyleArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHArchives_GEN_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartSeriesStyleArchive.ProtoReflect.Descriptor instead.
func (*ChartSeriesStyleArchive) Descriptor() ([]byte, []int) {
	return file_TSCHArchives_GEN_proto_rawDescGZIP(), []int{6}
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesdefaultcalloutlineendlineend() *LineEndArchive {
	if x != nil {
		return x.Tschchartseriesdefaultcalloutlineendlineend
	}
	return nil
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesdefaultcalloutlinestartlineend() *LineEndArchive {
	if x != nil {
		return x.Tschchartseriesdefaultcalloutlinestartlineend
	}
	return nil
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesdefaultcalloutlinestrokestyle() *StrokeArchive {
	if x != nil {
		return x.Tschchartseriesdefaultcalloutlinestrokestyle
	}
	return nil
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesdefaulterrorbarlineend() *LineEndArchive {
	if x != nil {
		return x.Tschchartseriesdefaulterrorbarlineend
	}
	return nil
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesdefaulterrorbarlineendscatterx() *LineEndArchive {
	if x != nil {
		return x.Tschchartseriesdefaulterrorbarlineendscatterx
	}
	return nil
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesdefaulterrorbarshadow() *ShadowArchive {
	if x != nil {
		return x.Tschchartseriesdefaulterrorbarshadow
	}
	return nil
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesdefaulterrorbarspacing() int32 {
	if x != nil && x.Tschchartseriesdefaulterrorbarspacing != nil {
		return *x.Tschchartseriesdefaulterrorbarspacing
	}
	return 0
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesdefaulterrorbarspacingscatterx() int32 {
	if x != nil && x.Tschchartseriesdefaulterrorbarspacingscatterx != nil {
		return *x.Tschchartseriesdefaulterrorbarspacingscatterx
	}
	return 0
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesdefaulterrorbarstroke() *StrokeArchive {
	if x != nil {
		return x.Tschchartseriesdefaulterrorbarstroke
	}
	return nil
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesdefaulterrorbarstrokescatterx() *StrokeArchive {
	if x != nil {
		return x.Tschchartseriesdefaulterrorbarstrokescatterx
	}
	return nil
}

func (x *ChartSeriesStyleArchive) GetTschchartseries3Dareafill() *FillArchive {
	if x != nil {
		return x.Tschchartseries3Dareafill
	}
	return nil
}

func (x *ChartSeriesStyleArchive) GetTschchartseries3Dbarfill() *FillArchive {
	if x != nil {
		return x.Tschchartseries3Dbarfill
	}
	return nil
}

func (x *ChartSeriesStyleArchive) GetTschchartseries3Dcolumnfill() *FillArchive {
	if x != nil {
		return x.Tschchartseries3Dcolumnfill
	}
	return nil
}

func (x *ChartSeriesStyleArchive) GetTschchartseries3Dlinefill() *FillArchive {
	if x != nil {
		return x.Tschchartseries3Dlinefill
	}
	return nil
}

func (x *ChartSeriesStyleArchive) GetTschchartseries3Dpiefill() *FillArchive {
	if x != nil {
		return x.Tschchartseries3Dpiefill
	}
	return nil
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesareafill() *FillArchive {
	if x != nil {
		return x.Tschchartseriesareafill
	}
	return nil
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesbarfill() *FillArchive {
	if x != nil {
		return x.Tschchartseriesbarfill
	}
	return nil
}

func (x *ChartSeriesStyleArchive) GetTschchartseriescolumnfill() *FillArchive {
	if x != nil {
		return x.Tschchartseriescolumnfill
	}
	return nil
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesdefaultfill() *FillArchive {
	if x != nil {
		return x.Tschchartseriesdefaultfill
	}
	return nil
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesmixedareafill() *FillArchive {
	if x != nil {
		return x.Tschchartseriesmixedareafill
	}
	return nil
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesmixedcolumnfill() *FillArchive {
	if x != nil {
		return x.Tschchartseriesmixedcolumnfill
	}
	return nil
}

func (x *ChartSeriesStyleArchive) GetTschchartseriespiefill() *FillArchive {
	if x != nil {
		return x.Tschchartseriespiefill
	}
	return nil
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesradarareafill() *FillArchive {
	if x != nil {
		return x.Tschchartseriesradarareafill
	}
	return nil
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesradarareafilluseseriesstrokealphamultiplier() float32 {
	if x != nil && x.Tschchartseriesradarareafilluseseriesstrokealphamultiplier != nil {
		return *x.Tschchartseriesradarareafilluseseriesstrokealphamultiplier
	}
	return 0
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesradarareafilluseseriesstroke() bool {
	if x != nil && x.Tschchartseriesradarareafilluseseriesstroke != nil {
		return *x.Tschchartseriesradarareafilluseseriesstroke
	}
	return false
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesarealabelparagraphstyleindex() int32 {
	if x != nil && x.Tschchartseriesarealabelparagraphstyleindex != nil {
		return *x.Tschchartseriesarealabelparagraphstyleindex
	}
	return 0
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesbarlabelparagraphstyleindex() int32 {
	if x != nil && x.Tschchartseriesbarlabelparagraphstyleindex != nil {
		return *x.Tschchartseriesbarlabelparagraphstyleindex
	}
	return 0
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesdefaultlabelparagraphstyleindex() int32 {
	if x != nil && x.Tschchartseriesdefaultlabelparagraphstyleindex != nil {
		return *x.Tschchartseriesdefaultlabelparagraphstyleindex
	}
	return 0
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesdonutlabelparagraphstyleindex() int32 {
	if x != nil && x.Tschchartseriesdonutlabelparagraphstyleindex != nil {
		return *x.Tschchartseriesdonutlabelparagraphstyleindex
	}
	return 0
}

func (x *ChartSeriesStyleArchive) GetTschchartserieslinelabelparagraphstyleindex() int32 {
	if x != nil && x.Tschchartserieslinelabelparagraphstyleindex != nil {
		return *x.Tschchartserieslinelabelparagraphstyleindex
	}
	return 0
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesmixedlabelparagraphstyleindex() int32 {
	if x != nil && x.Tschchartseriesmixedlabelparagraphstyleindex != nil {
		return *x.Tschchartseriesmixedlabelparagraphstyleindex
	}
	return 0
}

func (x *ChartSeriesStyleArchive) GetTschchartseriespielabelparagraphstyleindex() int32 {
	if x != nil && x.Tschchartseriespielabelparagraphstyleindex != nil {
		return *x.Tschchartseriespielabelparagraphstyleindex
	}
	return 0
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesradarlabelparagraphstyleindex() int32 {
	if x != nil && x.Tschchartseriesradarlabelparagraphstyleindex != nil {
		return *x.Tschchartseriesradarlabelparagraphstyleindex
	}
	return 0
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesdefaultopacity() float32 {
	if x != nil && x.Tschchartseriesdefaultopacity != nil {
		return *x.Tschchartseriesdefaultopacity
	}
	return 0
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesareaoutsidelabelparagraphstyleindex() int32 {
	if x != nil && x.Tschchartseriesareaoutsidelabelparagraphstyleindex != nil {
		return *x.Tschchartseriesareaoutsidelabelparagraphstyleindex
	}
	return 0
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesbaroutsidelabelparagraphstyleindex() int32 {
	if x != nil && x.Tschchartseriesbaroutsidelabelparagraphstyleindex != nil {
		return *x.Tschchartseriesbaroutsidelabelparagraphstyleindex
	}
	return 0
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesdefaultoutsidelabelparagraphstyleindex() int32 {
	if x != nil && x.Tschchartseriesdefaultoutsidelabelparagraphstyleindex != nil {
		return *x.Tschchartseriesdefaultoutsidelabelparagraphstyleindex
	}
	return 0
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesdonutoutsidelabelparagraphstyleindex() int32 {
	if x != nil && x.Tschchartseriesdonutoutsidelabelparagraphstyleindex != nil {
		return *x.Tschchartseriesdonutoutsidelabelparagraphstyleindex
	}
	return 0
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesmixedoutsidelabelparagraphstyleindex() int32 {
	if x != nil && x.Tschchartseriesmixedoutsidelabelparagraphstyleindex != nil {
		return *x.Tschchartseriesmixedoutsidelabelparagraphstyleindex
	}
	return 0
}

func (x *ChartSeriesStyleArchive) GetTschchartseriespieoutsidelabelparagraphstyleindex() int32 {
	if x != nil && x.Tschchartseriespieoutsidelabelparagraphstyleindex != nil {
		return *x.Tschchartseriespieoutsidelabelparagraphstyleindex
	}
	return 0
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesradaroutsidelabelparagraphstyleindex() int32 {
	if x != nil && x.Tschchartseriesradaroutsidelabelparagraphstyleindex != nil {
		return *x.Tschchartseriesradaroutsidelabelparagraphstyleindex
	}
	return 0
}

func (x *ChartSeriesStyleArchive) GetTschchartseries3Dareashadow() *ShadowArchive {
	if x != nil {
		return x.Tschchartseries3Dareashadow
	}
	return nil
}

func (x *ChartSeriesStyleArchive) GetTschchartseries3Dbarshadow() *ShadowArchive {
	if x != nil {
		return x.Tschchartseries3Dbarshadow
	}
	return nil
}

func (x *ChartSeriesStyleArchive) GetTschchartseries3Dcolumnshadow() *ShadowArchive {
	if x != nil {
		return x.Tschchartseries3Dcolumnshadow
	}
	return nil
}

func (x *ChartSeriesStyleArchive) GetTschchartseries3Dlineshadow() *ShadowArchive {
	if x != nil {
		return x.Tschchartseries3Dlineshadow
	}
	return nil
}

func (x *ChartSeriesStyleArchive) GetTschchartseries3Dpieshadow() *ShadowArchive {
	if x != nil {
		return x.Tschchartseries3Dpieshadow
	}
	return nil
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesareashadow() *ShadowArchive {
	if x != nil {
		return x.Tschchartseriesareashadow
	}
	return nil
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesbarshadow() *ShadowArchive {
	if x != nil {
		return x.Tschchartseriesbarshadow
	}
	return nil
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesbubbleshadow() *ShadowArchive {
	if x != nil {
		return x.Tschchartseriesbubbleshadow
	}
	return nil
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesdefaultshadow() *ShadowArchive {
	if x != nil {
		return x.Tschchartseriesdefaultshadow
	}
	return nil
}

func (x *ChartSeriesStyleArchive) GetTschchartserieslineshadow() *ShadowArchive {
	if x != nil {
		return x.Tschchartserieslineshadow
	}
	return nil
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesmixedareashadow() *ShadowArchive {
	if x != nil {
		return x.Tschchartseriesmixedareashadow
	}
	return nil
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesmixedcolumnshadow() *ShadowArchive {
	if x != nil {
		return x.Tschchartseriesmixedcolumnshadow
	}
	return nil
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesmixedlineshadow() *ShadowArchive {
	if x != nil {
		return x.Tschchartseriesmixedlineshadow
	}
	return nil
}

func (x *ChartSeriesStyleArchive) GetTschchartseriespieshadow() *ShadowArchive {
	if x != nil {
		return x.Tschchartseriespieshadow
	}
	return nil
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesradarareashadow() *ShadowArchive {
	if x != nil {
		return x.Tschchartseriesradarareashadow
	}
	return nil
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesscattershadow() *ShadowArchive {
	if x != nil {
		return x.Tschchartseriesscattershadow
	}
	return nil
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesareastroke() *StrokeArchive {
	if x != nil {
		return x.Tschchartseriesareastroke
	}
	return nil
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesbarstroke() *StrokeArchive {
	if x != nil {
		return x.Tschchartseriesbarstroke
	}
	return nil
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesbubblestroke() *StrokeArchive {
	if x != nil {
		return x.Tschchartseriesbubblestroke
	}
	return nil
}

func (x *ChartSeriesStyleArchive) GetTschchartserieslinestroke() *StrokeArchive {
	if x != nil {
		return x.Tschchartserieslinestroke
	}
	return nil
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesmixedareastroke() *StrokeArchive {
	if x != nil {
		return x.Tschchartseriesmixedareastroke
	}
	return nil
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesmixedcolumnstroke() *StrokeArchive {
	if x != nil {
		return x.Tschchartseriesmixedcolumnstroke
	}
	return nil
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesmixedlinestroke() *StrokeArchive {
	if x != nil {
		return x.Tschchartseriesmixedlinestroke
	}
	return nil
}

func (x *ChartSeriesStyleArchive) GetTschchartseriespiestroke() *StrokeArchive {
	if x != nil {
		return x.Tschchartseriespiestroke
	}
	return nil
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesradarareastroke() *StrokeArchive {
	if x != nil {
		return x.Tschchartseriesradarareastroke
	}
	return nil
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesscatterstroke() *StrokeArchive {
	if x != nil {
		return x.Tschchartseriesscatterstroke
	}
	return nil
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesareasymbolfill() *FillArchive {
	if x != nil {
		return x.Tschchartseriesareasymbolfill
	}
	return nil
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesbubblesymbolfill() *FillArchive {
	if x != nil {
		return x.Tschchartseriesbubblesymbolfill
	}
	return nil
}

func (x *ChartSeriesStyleArchive) GetTschchartserieslinesymbolfill() *FillArchive {
	if x != nil {
		return x.Tschchartserieslinesymbolfill
	}
	return nil
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesmixedareasymbolfill() *FillArchive {
	if x != nil {
		return x.Tschchartseriesmixedareasymbolfill
	}
	return nil
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesmixedlinesymbolfill() *FillArchive {
	if x != nil {
		return x.Tschchartseriesmixedlinesymbolfill
	}
	return nil
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesradarareasymbolfill() *FillArchive {
	if x != nil {
		return x.Tschchartseriesradarareasymbolfill
	}
	return nil
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesscattersymbolfill() *FillArchive {
	if x != nil {
		return x.Tschchartseriesscattersymbolfill
	}
	return nil
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesareasymbolfilluseseriesfill() bool {
	if x != nil && x.Tschchartseriesareasymbolfilluseseriesfill != nil {
		return *x.Tschchartseriesareasymbolfilluseseriesfill
	}
	return false
}

func (x *ChartSeriesStyleArchive) GetTschchartserieslinesymbolfilluseseriesfill() bool {
	if x != nil && x.Tschchartserieslinesymbolfilluseseriesfill != nil {
		return *x.Tschchartserieslinesymbolfilluseseriesfill
	}
	return false
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesmixedareasymbolfilluseseriesfill() bool {
	if x != nil && x.Tschchartseriesmixedareasymbolfilluseseriesfill != nil {
		return *x.Tschchartseriesmixedareasymbolfilluseseriesfill
	}
	return false
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesmixedlinesymbolfilluseseriesfill() bool {
	if x != nil && x.Tschchartseriesmixedlinesymbolfilluseseriesfill != nil {
		return *x.Tschchartseriesmixedlinesymbolfilluseseriesfill
	}
	return false
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesradarareasymbolfilluseseriesfill() bool {
	if x != nil && x.Tschchartseriesradarareasymbolfilluseseriesfill != nil {
		return *x.Tschchartseriesradarareasymbolfilluseseriesfill
	}
	return false
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesareasymbolfilluseseriesstroke() bool {
	if x != nil && x.Tschchartseriesareasymbolfilluseseriesstroke != nil {
		return *x.Tschchartseriesareasymbolfilluseseriesstroke
	}
	return false
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesbubblesymbolfilluseseriesstroke() bool {
	if x != nil && x.Tschchartseriesbubblesymbolfilluseseriesstroke != nil {
		return *x.Tschchartseriesbubblesymbolfilluseseriesstroke
	}
	return false
}

func (x *ChartSeriesStyleArchive) GetTschchartserieslinesymbolfilluseseriesstroke() bool {
	if x != nil && x.Tschchartserieslinesymbolfilluseseriesstroke != nil {
		return *x.Tschchartserieslinesymbolfilluseseriesstroke
	}
	return false
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesmixedareasymbolfilluseseriesstroke() bool {
	if x != nil && x.Tschchartseriesmixedareasymbolfilluseseriesstroke != nil {
		return *x.Tschchartseriesmixedareasymbolfilluseseriesstroke
	}
	return false
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesmixedlinesymbolfilluseseriesstroke() bool {
	if x != nil && x.Tschchartseriesmixedlinesymbolfilluseseriesstroke != nil {
		return *x.Tschchartseriesmixedlinesymbolfilluseseriesstroke
	}
	return false
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesradarareasymbolfilluseseriesstroke() bool {
	if x != nil && x.Tschchartseriesradarareasymbolfilluseseriesstroke != nil {
		return *x.Tschchartseriesradarareasymbolfilluseseriesstroke
	}
	return false
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesscattersymbolfilluseseriesstroke() bool {
	if x != nil && x.Tschchartseriesscattersymbolfilluseseriesstroke != nil {
		return *x.Tschchartseriesscattersymbolfilluseseriesstroke
	}
	return false
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesareasymbolsize() float32 {
	if x != nil && x.Tschchartseriesareasymbolsize != nil {
		return *x.Tschchartseriesareasymbolsize
	}
	return 0
}

func (x *ChartSeriesStyleArchive) GetTschchartserieslinesymbolsize() float32 {
	if x != nil && x.Tschchartserieslinesymbolsize != nil {
		return *x.Tschchartserieslinesymbolsize
	}
	return 0
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesmixedareasymbolsize() float32 {
	if x != nil && x.Tschchartseriesmixedareasymbolsize != nil {
		return *x.Tschchartseriesmixedareasymbolsize
	}
	return 0
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesmixedlinesymbolsize() float32 {
	if x != nil && x.Tschchartseriesmixedlinesymbolsize != nil {
		return *x.Tschchartseriesmixedlinesymbolsize
	}
	return 0
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesradarareasymbolsize() float32 {
	if x != nil && x.Tschchartseriesradarareasymbolsize != nil {
		return *x.Tschchartseriesradarareasymbolsize
	}
	return 0
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesscattersymbolsize() float32 {
	if x != nil && x.Tschchartseriesscattersymbolsize != nil {
		return *x.Tschchartseriesscattersymbolsize
	}
	return 0
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesareasymbolstroke() *StrokeArchive {
	if x != nil {
		return x.Tschchartseriesareasymbolstroke
	}
	return nil
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesbubblesymbolstroke() *StrokeArchive {
	if x != nil {
		return x.Tschchartseriesbubblesymbolstroke
	}
	return nil
}

func (x *ChartSeriesStyleArchive) GetTschchartserieslinesymbolstroke() *StrokeArchive {
	if x != nil {
		return x.Tschchartserieslinesymbolstroke
	}
	return nil
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesmixedareasymbolstroke() *StrokeArchive {
	if x != nil {
		return x.Tschchartseriesmixedareasymbolstroke
	}
	return nil
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesmixedlinesymbolstroke() *StrokeArchive {
	if x != nil {
		return x.Tschchartseriesmixedlinesymbolstroke
	}
	return nil
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesradarareasymbolstroke() *StrokeArchive {
	if x != nil {
		return x.Tschchartseriesradarareasymbolstroke
	}
	return nil
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesscattersymbolstroke() *StrokeArchive {
	if x != nil {
		return x.Tschchartseriesscattersymbolstroke
	}
	return nil
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesdefaulttrendlineshadow() *ShadowArchive {
	if x != nil {
		return x.Tschchartseriesdefaulttrendlineshadow
	}
	return nil
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesdefaulttrendlinestroke() *StrokeArchive {
	if x != nil {
		return x.Tschchartseriesdefaulttrendlinestroke
	}
	return nil
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesdefaulttrendlineequationopacity() float32 {
	if x != nil && x.Tschchartseriesdefaulttrendlineequationopacity != nil {
		return *x.Tschchartseriesdefaulttrendlineequationopacity
	}
	return 0
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesdefaulttrendlineequationparagraphstyleindex() int32 {
	if x != nil && x.Tschchartseriesdefaulttrendlineequationparagraphstyleindex != nil {
		return *x.Tschchartseriesdefaulttrendlineequationparagraphstyleindex
	}
	return 0
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesdefaulttrendlinersquaredopacity() float32 {
	if x != nil && x.Tschchartseriesdefaulttrendlinersquaredopacity != nil {
		return *x.Tschchartseriesdefaulttrendlinersquaredopacity
	}
	return 0
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesdefaulttrendlinersquaredparagraphstyleindex() int32 {
	if x != nil && x.Tschchartseriesdefaulttrendlinersquaredparagraphstyleindex != nil {
		return *x.Tschchartseriesdefaulttrendlinersquaredparagraphstyleindex
	}
	return 0
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesareavaluelabelposition() int32 {
	if x != nil && x.Tschchartseriesareavaluelabelposition != nil {
		return *x.Tschchartseriesareavaluelabelposition
	}
	return 0
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesbarvaluelabelposition() int32 {
	if x != nil && x.Tschchartseriesbarvaluelabelposition != nil {
		return *x.Tschchartseriesbarvaluelabelposition
	}
	return 0
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesbubblevaluelabelposition() int32 {
	if x != nil && x.Tschchartseriesbubblevaluelabelposition != nil {
		return *x.Tschchartseriesbubblevaluelabelposition
	}
	return 0
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesdefaultvaluelabelposition() int32 {
	if x != nil && x.Tschchartseriesdefaultvaluelabelposition != nil {
		return *x.Tschchartseriesdefaultvaluelabelposition
	}
	return 0
}

func (x *ChartSeriesStyleArchive) GetTschchartserieslinevaluelabelposition() int32 {
	if x != nil && x.Tschchartserieslinevaluelabelposition != nil {
		return *x.Tschchartserieslinevaluelabelposition
	}
	return 0
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesmixedareavaluelabelposition() int32 {
	if x != nil && x.Tschchartseriesmixedareavaluelabelposition != nil {
		return *x.Tschchartseriesmixedareavaluelabelposition
	}
	return 0
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesmixedcolumnvaluelabelposition() int32 {
	if x != nil && x.Tschchartseriesmixedcolumnvaluelabelposition != nil {
		return *x.Tschchartseriesmixedcolumnvaluelabelposition
	}
	return 0
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesmixedlinevaluelabelposition() int32 {
	if x != nil && x.Tschchartseriesmixedlinevaluelabelposition != nil {
		return *x.Tschchartseriesmixedlinevaluelabelposition
	}
	return 0
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesradarareavaluelabelposition() int32 {
	if x != nil && x.Tschchartseriesradarareavaluelabelposition != nil {
		return *x.Tschchartseriesradarareavaluelabelposition
	}
	return 0
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesscattervaluelabelposition() int32 {
	if x != nil && x.Tschchartseriesscattervaluelabelposition != nil {
		return *x.Tschchartseriesscattervaluelabelposition
	}
	return 0
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesstackedareavaluelabelposition() int32 {
	if x != nil && x.Tschchartseriesstackedareavaluelabelposition != nil {
		return *x.Tschchartseriesstackedareavaluelabelposition
	}
	return 0
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesstackedbarvaluelabelposition() int32 {
	if x != nil && x.Tschchartseriesstackedbarvaluelabelposition != nil {
		return *x.Tschchartseriesstackedbarvaluelabelposition
	}
	return 0
}

func (x *ChartSeriesStyleArchive) GetTschchartseriesdefaultvaluelabelspacing() int32 {
	if x != nil && x.Tschchartseriesdefaultvaluelabelspacing != nil {
		return *x.Tschchartseriesdefaultvaluelabelspacing
	}
	return 0
}

type ChartSeriesNonStyleArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tschchartseriesdefault1_0Dateformat                      *TSKFormatStructArchive               `protobuf:"bytes,69,opt,name=tschchartseriesdefault1_0dateformat,json=tschchartseriesdefault10dateformat" json:"tschchartseriesdefault1_0dateformat,omitempty"`
	Tschchartseriesdefault1_0Numberformat                    *TSKFormatStructArchive               `protobuf:"bytes,21,opt,name=tschchartseriesdefault1_0numberformat,json=tschchartseriesdefault10numberformat" json:"tschchartseriesdefault1_0numberformat,omitempty"`
	Tschchartseriespie1_0Numberformat                        *TSKFormatStructArchive               `protobuf:"bytes,22,opt,name=tschchartseriespie1_0numberformat,json=tschchartseriespie10numberformat" json:"tschchartseriespie1_0numberformat,omitempty"`
	Tschchartseriespie2_3Labelexplosion                      *float32                              `protobuf:"fixed32,16,opt,name=tschchartseriespie2_3labelexplosion,json=tschchartseriespie23labelexplosion" json:"tschchartseriespie2_3labelexplosion,omitempty"`
	Tschchartseriesbubbleadjustmentscale                     *float32                              `protobuf:"fixed32,1,opt,name=tschchartseriesbubbleadjustmentscale" json:"tschchartseriesbubbleadjustmentscale,omitempty"`
	Tschchartseriesdefaultdateformat                         *TSKFormatStructArchive               `protobuf:"bytes,71,opt,name=tschchartseriesdefaultdateformat" json:"tschchartseriesdefaultdateformat,omitempty"`
	Tschchartseriesdefaultdurationformat                     *TSKFormatStructArchive               `protobuf:"bytes,70,opt,name=tschchartseriesdefaultdurationformat" json:"tschchartseriesdefaultdurationformat,omitempty"`
	Tschchartseriesareaenablecalloutline                     *int32                                `protobuf:"varint,103,opt,name=tschchartseriesareaenablecalloutline" json:"tschchartseriesareaenablecalloutline,omitempty"`
	Tschchartseriesbarenablecalloutline                      *int32                                `protobuf:"varint,104,opt,name=tschchartseriesbarenablecalloutline" json:"tschchartseriesbarenablecalloutline,omitempty"`
	Tschchartseriesbubbleenablecalloutline                   *int32                                `protobuf:"varint,105,opt,name=tschchartseriesbubbleenablecalloutline" json:"tschchartseriesbubbleenablecalloutline,omitempty"`
	Tschchartseriesdefaultenablecalloutline                  *int32                                `protobuf:"varint,110,opt,name=tschchartseriesdefaultenablecalloutline" json:"tschchartseriesdefaultenablecalloutline,omitempty"`
	Tschchartserieslineenablecalloutline                     *int32                                `protobuf:"varint,106,opt,name=tschchartserieslineenablecalloutline" json:"tschchartserieslineenablecalloutline,omitempty"`
	Tschchartseriespieenablecalloutline                      *int32                                `protobuf:"varint,102,opt,name=tschchartseriespieenablecalloutline" json:"tschchartseriespieenablecalloutline,omitempty"`
	Tschchartseriesscatterenablecalloutline                  *int32                                `protobuf:"varint,107,opt,name=tschchartseriesscatterenablecalloutline" json:"tschchartseriesscatterenablecalloutline,omitempty"`
	Tschchartseriesstackedareaenablecalloutline              *int32                                `protobuf:"varint,108,opt,name=tschchartseriesstackedareaenablecalloutline" json:"tschchartseriesstackedareaenablecalloutline,omitempty"`
	Tschchartseriesstackedbarenablecalloutline               *int32                                `protobuf:"varint,109,opt,name=tschchartseriesstackedbarenablecalloutline" json:"tschchartseriesstackedbarenablecalloutline,omitempty"`
	Tschchartseriesdefaulterrorbarcustomnegativedata         *ChartsNSArrayOfNSNumberDoubleArchive `protobuf:"bytes,2,opt,name=tschchartseriesdefaulterrorbarcustomnegativedata" json:"tschchartseriesdefaulterrorbarcustomnegativedata,omitempty"`
	Tschchartseriesdefaulterrorbarcustomnegativedatascatterx *ChartsNSArrayOfNSNumberDoubleArchive `protobuf:"bytes,3,opt,name=tschchartseriesdefaulterrorbarcustomnegativedatascatterx" json:"tschchartseriesdefaulterrorbarcustomnegativedatascatterx,omitempty"`
	Tschchartseriesdefaulterrorbarcustompositivedata         *ChartsNSArrayOfNSNumberDoubleArchive `protobuf:"bytes,4,opt,name=tschchartseriesdefaulterrorbarcustompositivedata" json:"tschchartseriesdefaulterrorbarcustompositivedata,omitempty"`
	Tschchartseriesdefaulterrorbarcustompositivedatascatterx *ChartsNSArrayOfNSNumberDoubleArchive `protobuf:"bytes,5,opt,name=tschchartseriesdefaulterrorbarcustompositivedatascatterx" json:"tschchartseriesdefaulterrorbarcustompositivedatascatterx,omitempty"`
	Tschchartseriesdefaulterrorbarfixedvalue                 *float32                              `protobuf:"fixed32,6,opt,name=tschchartseriesdefaulterrorbarfixedvalue" json:"tschchartseriesdefaulterrorbarfixedvalue,omitempty"`
	Tschchartseriesdefaulterrorbarfixedvaluescatterx         *float32                              `protobuf:"fixed32,7,opt,name=tschchartseriesdefaulterrorbarfixedvaluescatterx" json:"tschchartseriesdefaulterrorbarfixedvaluescatterx,omitempty"`
	Tschchartseriesdefaulterrorbarpercentvalue               *float32                              `protobuf:"fixed32,8,opt,name=tschchartseriesdefaulterrorbarpercentvalue" json:"tschchartseriesdefaulterrorbarpercentvalue,omitempty"`
	Tschchartseriesdefaulterrorbarpercentvaluescatterx       *float32                              `protobuf:"fixed32,9,opt,name=tschchartseriesdefaulterrorbarpercentvaluescatterx" json:"tschchartseriesdefaulterrorbarpercentvaluescatterx,omitempty"`
	Tschchartseriesdefaulterrorbarsetting                    *int32                                `protobuf:"varint,10,opt,name=tschchartseriesdefaulterrorbarsetting" json:"tschchartseriesdefaulterrorbarsetting,omitempty"`
	Tschchartseriesdefaulterrorbarsettingscatterx            *int32                                `protobuf:"varint,11,opt,name=tschchartseriesdefaulterrorbarsettingscatterx" json:"tschchartseriesdefaulterrorbarsettingscatterx,omitempty"`
	Tschchartseriesdefaulterrorbarstddevvalue                *float32                              `protobuf:"fixed32,12,opt,name=tschchartseriesdefaulterrorbarstddevvalue" json:"tschchartseriesdefaulterrorbarstddevvalue,omitempty"`
	Tschchartseriesdefaulterrorbarstddevvaluescatterx        *float32                              `protobuf:"fixed32,13,opt,name=tschchartseriesdefaulterrorbarstddevvaluescatterx" json:"tschchartseriesdefaulterrorbarstddevvaluescatterx,omitempty"`
	Tschchartseriesdefaulterrorbartype                       *int32                                `protobuf:"varint,14,opt,name=tschchartseriesdefaulterrorbartype" json:"tschchartseriesdefaulterrorbartype,omitempty"`
	Tschchartseriesdefaulterrorbartypescatterx               *int32                                `protobuf:"varint,15,opt,name=tschchartseriesdefaulterrorbartypescatterx" json:"tschchartseriesdefaulterrorbartypescatterx,omitempty"`
	Tschchartseriespielabelexplosion                         *float32                              `protobuf:"fixed32,147,opt,name=tschchartseriespielabelexplosion" json:"tschchartseriespielabelexplosion,omitempty"`
	Tschchartseriesbubblelinetype                            *int32                                `protobuf:"varint,17,opt,name=tschchartseriesbubblelinetype" json:"tschchartseriesbubblelinetype,omitempty"`
	Tschchartserieslinelinetype                              *int32                                `protobuf:"varint,18,opt,name=tschchartserieslinelinetype" json:"tschchartserieslinelinetype,omitempty"`
	Tschchartseriesmixedlinelinetype                         *int32                                `protobuf:"varint,19,opt,name=tschchartseriesmixedlinelinetype" json:"tschchartseriesmixedlinelinetype,omitempty"`
	Tschchartseriesradararealinetype                         *int32                                `protobuf:"varint,189,opt,name=tschchartseriesradararealinetype" json:"tschchartseriesradararealinetype,omitempty"`
	Tschchartseriesscatterlinetype                           *int32                                `protobuf:"varint,20,opt,name=tschchartseriesscatterlinetype" json:"tschchartseriesscatterlinetype,omitempty"`
	Tschchartseriesdefaultnumberformat                       *TSKFormatStructArchive               `protobuf:"bytes,98,opt,name=tschchartseriesdefaultnumberformat" json:"tschchartseriesdefaultnumberformat,omitempty"`
	Tschchartseriespienumberformat                           *TSKFormatStructArchive               `protobuf:"bytes,99,opt,name=tschchartseriespienumberformat" json:"tschchartseriespienumberformat,omitempty"`
	Tschchartseriesdefaultnumberformattype                   *int32                                `protobuf:"varint,23,opt,name=tschchartseriesdefaultnumberformattype" json:"tschchartseriesdefaultnumberformattype,omitempty"`
	Tschchartseriespienumberformattype                       *int32                                `protobuf:"varint,24,opt,name=tschchartseriespienumberformattype" json:"tschchartseriespienumberformattype,omitempty"`
	Tschchartseriesstackedpercentnumberformat                *TSKFormatStructArchive               `protobuf:"bytes,25,opt,name=tschchartseriesstackedpercentnumberformat" json:"tschchartseriesstackedpercentnumberformat,omitempty"`
	Tschchartseriesdefaultseriestype                         *int32                                `protobuf:"varint,26,opt,name=tschchartseriesdefaultseriestype" json:"tschchartseriesdefaultseriestype,omitempty"`
	Tschchartseriesdefaultshowerrorbar                       *bool                                 `protobuf:"varint,27,opt,name=tschchartseriesdefaultshowerrorbar" json:"tschchartseriesdefaultshowerrorbar,omitempty"`
	Tschchartseriesdefaultshowerrorbarscatterx               *bool                                 `protobuf:"varint,28,opt,name=tschchartseriesdefaultshowerrorbarscatterx" json:"tschchartseriesdefaultshowerrorbarscatterx,omitempty"`
	Tschchartseriesbubbleshowlabelsinfront                   *bool                                 `protobuf:"varint,101,opt,name=tschchartseriesbubbleshowlabelsinfront" json:"tschchartseriesbubbleshowlabelsinfront,omitempty"`
	Tschchartseriesdefaultshowlabelsinfront                  *bool                                 `protobuf:"varint,100,opt,name=tschchartseriesdefaultshowlabelsinfront" json:"tschchartseriesdefaultshowlabelsinfront,omitempty"`
	Tschchartseriesscattershowline                           *bool                                 `protobuf:"varint,29,opt,name=tschchartseriesscattershowline" json:"tschchartseriesscattershowline,omitempty"`
	Tschchartseriesbubbleshownegativedata                    *bool                                 `protobuf:"varint,30,opt,name=tschchartseriesbubbleshownegativedata" json:"tschchartseriesbubbleshownegativedata,omitempty"`
	Tschchartseriesbubbleshowserieslabels                    *bool                                 `protobuf:"varint,65,opt,name=tschchartseriesbubbleshowserieslabels" json:"tschchartseriesbubbleshowserieslabels,omitempty"`
	Tschchartseriespieshowserieslabels                       *bool                                 `protobuf:"varint,31,opt,name=tschchartseriespieshowserieslabels" json:"tschchartseriespieshowserieslabels,omitempty"`
	Tschchartseriesscattershowserieslabels                   *bool                                 `protobuf:"varint,67,opt,name=tschchartseriesscattershowserieslabels" json:"tschchartseriesscattershowserieslabels,omitempty"`
	Tschchartseriesareashowsymbol                            *bool                                 `protobuf:"varint,32,opt,name=tschchartseriesareashowsymbol" json:"tschchartseriesareashowsymbol,omitempty"`
	Tschchartserieslineshowsymbol                            *bool                                 `protobuf:"varint,33,opt,name=tschchartserieslineshowsymbol" json:"tschchartserieslineshowsymbol,omitempty"`
	Tschchartseriesmixedareashowsymbol                       *bool                                 `protobuf:"varint,34,opt,name=tschchartseriesmixedareashowsymbol" json:"tschchartseriesmixedareashowsymbol,omitempty"`
	Tschchartseriesmixedlineshowsymbol                       *bool                                 `protobuf:"varint,35,opt,name=tschchartseriesmixedlineshowsymbol" json:"tschchartseriesmixedlineshowsymbol,omitempty"`
	Tschchartseriesradarareashowsymbol                       *bool                                 `protobuf:"varint,160,opt,name=tschchartseriesradarareashowsymbol" json:"tschchartseriesradarareashowsymbol,omitempty"`
	Tschchartseriesscattershowsymbol                         *bool                                 `protobuf:"varint,36,opt,name=tschchartseriesscattershowsymbol" json:"tschchartseriesscattershowsymbol,omitempty"`
	Tschchartseriesdefaultshowtrendline                      *bool                                 `protobuf:"varint,37,opt,name=tschchartseriesdefaultshowtrendline" json:"tschchartseriesdefaultshowtrendline,omitempty"`
	Tschchartseriesareashowvaluelabels                       *bool                                 `protobuf:"varint,38,opt,name=tschchartseriesareashowvaluelabels" json:"tschchartseriesareashowvaluelabels,omitempty"`
	Tschchartseriesbarshowvaluelabels                        *bool                                 `protobuf:"varint,39,opt,name=tschchartseriesbarshowvaluelabels" json:"tschchartseriesbarshowvaluelabels,omitempty"`
	Tschchartseriesbubbleshowvaluelabels                     *bool                                 `protobuf:"varint,40,opt,name=tschchartseriesbubbleshowvaluelabels" json:"tschchartseriesbubbleshowvaluelabels,omitempty"`
	Tschchartseriesdefaultshowvaluelabels                    *bool                                 `protobuf:"varint,41,opt,name=tschchartseriesdefaultshowvaluelabels" json:"tschchartseriesdefaultshowvaluelabels,omitempty"`
	Tschchartserieslineshowvaluelabels                       *bool                                 `protobuf:"varint,42,opt,name=tschchartserieslineshowvaluelabels" json:"tschchartserieslineshowvaluelabels,omitempty"`
	Tschchartseriesmixedshowvaluelabels                      *bool                                 `protobuf:"varint,43,opt,name=tschchartseriesmixedshowvaluelabels" json:"tschchartseriesmixedshowvaluelabels,omitempty"`
	Tschchartseriespieshowvaluelabels                        *bool                                 `protobuf:"varint,44,opt,name=tschchartseriespieshowvaluelabels" json:"tschchartseriespieshowvaluelabels,omitempty"`
	Tschchartseriesradarshowvaluelabels                      *bool                                 `protobuf:"varint,162,opt,name=tschchartseriesradarshowvaluelabels" json:"tschchartseriesradarshowvaluelabels,omitempty"`
	Tschchartseriesscattershowvaluelabels                    *bool                                 `protobuf:"varint,45,opt,name=tschchartseriesscattershowvaluelabels" json:"tschchartseriesscattershowvaluelabels,omitempty"`
	Tschchartseriesbubblesizedimension                       *int32                                `protobuf:"varint,46,opt,name=tschchartseriesbubblesizedimension" json:"tschchartseriesbubblesizedimension,omitempty"`
	Tschchartseriesareastacklabels                           *bool                                 `protobuf:"varint,139,opt,name=tschchartseriesareastacklabels" json:"tschchartseriesareastacklabels,omitempty"`
	Tschchartseriesbarstacklabels                            *bool                                 `protobuf:"varint,140,opt,name=tschchartseriesbarstacklabels" json:"tschchartseriesbarstacklabels,omitempty"`
	Tschchartseriesbubblestacklabels                         *bool                                 `protobuf:"varint,141,opt,name=tschchartseriesbubblestacklabels" json:"tschchartseriesbubblestacklabels,omitempty"`
	Tschchartseriesdefaultstacklabels                        *bool                                 `protobuf:"varint,146,opt,name=tschchartseriesdefaultstacklabels" json:"tschchartseriesdefaultstacklabels,omitempty"`
	Tschchartserieslinestacklabels                           *bool                                 `protobuf:"varint,142,opt,name=tschchartserieslinestacklabels" json:"tschchartserieslinestacklabels,omitempty"`
	Tschchartseriespiestacklabels                            *bool                                 `protobuf:"varint,138,opt,name=tschchartseriespiestacklabels" json:"tschchartseriespiestacklabels,omitempty"`
	Tschchartseriesscatterstacklabels                        *bool                                 `protobuf:"varint,143,opt,name=tschchartseriesscatterstacklabels" json:"tschchartseriesscatterstacklabels,omitempty"`
	Tschchartseriesstackedareastacklabels                    *bool                                 `protobuf:"varint,144,opt,name=tschchartseriesstackedareastacklabels" json:"tschchartseriesstackedareastacklabels,omitempty"`
	Tschchartseriesstackedbarstacklabels                     *bool                                 `protobuf:"varint,145,opt,name=tschchartseriesstackedbarstacklabels" json:"tschchartseriesstackedbarstacklabels,omitempty"`
	Tschchartseriesareasymboltype                            *int32                                `protobuf:"varint,47,opt,name=tschchartseriesareasymboltype" json:"tschchartseriesareasymboltype,omitempty"`
	Tschchartserieslinesymboltype                            *int32                                `protobuf:"varint,48,opt,name=tschchartserieslinesymboltype" json:"tschchartserieslinesymboltype,omitempty"`
	Tschchartseriesmixedareasymboltype                       *int32                                `protobuf:"varint,49,opt,name=tschchartseriesmixedareasymboltype" json:"tschchartseriesmixedareasymboltype,omitempty"`
	Tschchartseriesmixedlinesymboltype                       *int32                                `protobuf:"varint,50,opt,name=tschchartseriesmixedlinesymboltype" json:"tschchartseriesmixedlinesymboltype,omitempty"`
	Tschchartseriesradarareasymboltype                       *int32                                `protobuf:"varint,163,opt,name=tschchartseriesradarareasymboltype" json:"tschchartseriesradarareasymboltype,omitempty"`
	Tschchartseriesscattersymboltype                         *int32                                `protobuf:"varint,51,opt,name=tschchartseriesscattersymboltype" json:"tschchartseriesscattersymboltype,omitempty"`
	Tschchartseriesdefaulttrendlineequationoffsetx           *float32                              `protobuf:"fixed32,52,opt,name=tschchartseriesdefaulttrendlineequationoffsetx" json:"tschchartseriesdefaulttrendlineequationoffsetx,omitempty"`
	Tschchartseriesdefaulttrendlineequationoffsety           *float32                              `protobuf:"fixed32,53,opt,name=tschchartseriesdefaulttrendlineequationoffsety" json:"tschchartseriesdefaulttrendlineequationoffsety,omitempty"`
	Tschchartseriesdefaulttrendlinelabelstring               *string                               `protobuf:"bytes,54,opt,name=tschchartseriesdefaulttrendlinelabelstring" json:"tschchartseriesdefaulttrendlinelabelstring,omitempty"`
	Tschchartseriesdefaulttrendlineorder                     *int32                                `protobuf:"varint,55,opt,name=tschchartseriesdefaulttrendlineorder" json:"tschchartseriesdefaulttrendlineorder,omitempty"`
	Tschchartseriesdefaulttrendlineperiod                    *int32                                `protobuf:"varint,56,opt,name=tschchartseriesdefaulttrendlineperiod" json:"tschchartseriesdefaulttrendlineperiod,omitempty"`
	Tschchartseriesdefaulttrendlinersquaredoffsetx           *float32                              `protobuf:"fixed32,57,opt,name=tschchartseriesdefaulttrendlinersquaredoffsetx" json:"tschchartseriesdefaulttrendlinersquaredoffsetx,omitempty"`
	Tschchartseriesdefaulttrendlinersquaredoffsety           *float32                              `protobuf:"fixed32,58,opt,name=tschchartseriesdefaulttrendlinersquaredoffsety" json:"tschchartseriesdefaulttrendlinersquaredoffsety,omitempty"`
	Tschchartseriesdefaulttrendlineshowequation              *bool                                 `protobuf:"varint,59,opt,name=tschchartseriesdefaulttrendlineshowequation" json:"tschchartseriesdefaulttrendlineshowequation,omitempty"`
	Tschchartseriesdefaulttrendlineshowlabel                 *bool                                 `protobuf:"varint,60,opt,name=tschchartseriesdefaulttrendlineshowlabel" json:"tschchartseriesdefaulttrendlineshowlabel,omitempty"`
	Tschchartseriesdefaulttrendlineshowr2Value               *bool                                 `protobuf:"varint,61,opt,name=tschchartseriesdefaulttrendlineshowr2value" json:"tschchartseriesdefaulttrendlineshowr2value,omitempty"`
	Tschchartseriesdefaulttrendlinetype                      *int32                                `protobuf:"varint,62,opt,name=tschchartseriesdefaulttrendlinetype" json:"tschchartseriesdefaulttrendlinetype,omitempty"`
	Tschchartseriesbubblevaluelabelsaxis                     *int32                                `protobuf:"varint,66,opt,name=tschchartseriesbubblevaluelabelsaxis" json:"tschchartseriesbubblevaluelabelsaxis,omitempty"`
	Tschchartseriesscattervaluelabelsaxis                    *int32                                `protobuf:"varint,68,opt,name=tschchartseriesscattervaluelabelsaxis" json:"tschchartseriesscattervaluelabelsaxis,omitempty"`
	Tschchartseriespiewedgeexplosion                         *float32                              `protobuf:"fixed32,63,opt,name=tschchartseriespiewedgeexplosion" json:"tschchartseriespiewedgeexplosion,omitempty"`
	Tschchartseriesdefaultyaxisordinal                       *int32                                `protobuf:"varint,64,opt,name=tschchartseriesdefaultyaxisordinal" json:"tschchartseriesdefaultyaxisordinal,omitempty"`
}

func (x *ChartSeriesNonStyleArchive) Reset() {
	*x = ChartSeriesNonStyleArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHArchives_GEN_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartSeriesNonStyleArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartSeriesNonStyleArchive) ProtoMessage() {}

func (x *ChartSeriesNonStyleArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHArchives_GEN_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartSeriesNonStyleArchive.ProtoReflect.Descriptor instead.
func (*ChartSeriesNonStyleArchive) Descriptor() ([]byte, []int) {
	return file_TSCHArchives_GEN_proto_rawDescGZIP(), []int{7}
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesdefault1_0Dateformat() *TSKFormatStructArchive {
	if x != nil {
		return x.Tschchartseriesdefault1_0Dateformat
	}
	return nil
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesdefault1_0Numberformat() *TSKFormatStructArchive {
	if x != nil {
		return x.Tschchartseriesdefault1_0Numberformat
	}
	return nil
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriespie1_0Numberformat() *TSKFormatStructArchive {
	if x != nil {
		return x.Tschchartseriespie1_0Numberformat
	}
	return nil
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriespie2_3Labelexplosion() float32 {
	if x != nil && x.Tschchartseriespie2_3Labelexplosion != nil {
		return *x.Tschchartseriespie2_3Labelexplosion
	}
	return 0
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesbubbleadjustmentscale() float32 {
	if x != nil && x.Tschchartseriesbubbleadjustmentscale != nil {
		return *x.Tschchartseriesbubbleadjustmentscale
	}
	return 0
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesdefaultdateformat() *TSKFormatStructArchive {
	if x != nil {
		return x.Tschchartseriesdefaultdateformat
	}
	return nil
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesdefaultdurationformat() *TSKFormatStructArchive {
	if x != nil {
		return x.Tschchartseriesdefaultdurationformat
	}
	return nil
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesareaenablecalloutline() int32 {
	if x != nil && x.Tschchartseriesareaenablecalloutline != nil {
		return *x.Tschchartseriesareaenablecalloutline
	}
	return 0
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesbarenablecalloutline() int32 {
	if x != nil && x.Tschchartseriesbarenablecalloutline != nil {
		return *x.Tschchartseriesbarenablecalloutline
	}
	return 0
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesbubbleenablecalloutline() int32 {
	if x != nil && x.Tschchartseriesbubbleenablecalloutline != nil {
		return *x.Tschchartseriesbubbleenablecalloutline
	}
	return 0
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesdefaultenablecalloutline() int32 {
	if x != nil && x.Tschchartseriesdefaultenablecalloutline != nil {
		return *x.Tschchartseriesdefaultenablecalloutline
	}
	return 0
}

func (x *ChartSeriesNonStyleArchive) GetTschchartserieslineenablecalloutline() int32 {
	if x != nil && x.Tschchartserieslineenablecalloutline != nil {
		return *x.Tschchartserieslineenablecalloutline
	}
	return 0
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriespieenablecalloutline() int32 {
	if x != nil && x.Tschchartseriespieenablecalloutline != nil {
		return *x.Tschchartseriespieenablecalloutline
	}
	return 0
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesscatterenablecalloutline() int32 {
	if x != nil && x.Tschchartseriesscatterenablecalloutline != nil {
		return *x.Tschchartseriesscatterenablecalloutline
	}
	return 0
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesstackedareaenablecalloutline() int32 {
	if x != nil && x.Tschchartseriesstackedareaenablecalloutline != nil {
		return *x.Tschchartseriesstackedareaenablecalloutline
	}
	return 0
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesstackedbarenablecalloutline() int32 {
	if x != nil && x.Tschchartseriesstackedbarenablecalloutline != nil {
		return *x.Tschchartseriesstackedbarenablecalloutline
	}
	return 0
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesdefaulterrorbarcustomnegativedata() *ChartsNSArrayOfNSNumberDoubleArchive {
	if x != nil {
		return x.Tschchartseriesdefaulterrorbarcustomnegativedata
	}
	return nil
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesdefaulterrorbarcustomnegativedatascatterx() *ChartsNSArrayOfNSNumberDoubleArchive {
	if x != nil {
		return x.Tschchartseriesdefaulterrorbarcustomnegativedatascatterx
	}
	return nil
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesdefaulterrorbarcustompositivedata() *ChartsNSArrayOfNSNumberDoubleArchive {
	if x != nil {
		return x.Tschchartseriesdefaulterrorbarcustompositivedata
	}
	return nil
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesdefaulterrorbarcustompositivedatascatterx() *ChartsNSArrayOfNSNumberDoubleArchive {
	if x != nil {
		return x.Tschchartseriesdefaulterrorbarcustompositivedatascatterx
	}
	return nil
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesdefaulterrorbarfixedvalue() float32 {
	if x != nil && x.Tschchartseriesdefaulterrorbarfixedvalue != nil {
		return *x.Tschchartseriesdefaulterrorbarfixedvalue
	}
	return 0
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesdefaulterrorbarfixedvaluescatterx() float32 {
	if x != nil && x.Tschchartseriesdefaulterrorbarfixedvaluescatterx != nil {
		return *x.Tschchartseriesdefaulterrorbarfixedvaluescatterx
	}
	return 0
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesdefaulterrorbarpercentvalue() float32 {
	if x != nil && x.Tschchartseriesdefaulterrorbarpercentvalue != nil {
		return *x.Tschchartseriesdefaulterrorbarpercentvalue
	}
	return 0
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesdefaulterrorbarpercentvaluescatterx() float32 {
	if x != nil && x.Tschchartseriesdefaulterrorbarpercentvaluescatterx != nil {
		return *x.Tschchartseriesdefaulterrorbarpercentvaluescatterx
	}
	return 0
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesdefaulterrorbarsetting() int32 {
	if x != nil && x.Tschchartseriesdefaulterrorbarsetting != nil {
		return *x.Tschchartseriesdefaulterrorbarsetting
	}
	return 0
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesdefaulterrorbarsettingscatterx() int32 {
	if x != nil && x.Tschchartseriesdefaulterrorbarsettingscatterx != nil {
		return *x.Tschchartseriesdefaulterrorbarsettingscatterx
	}
	return 0
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesdefaulterrorbarstddevvalue() float32 {
	if x != nil && x.Tschchartseriesdefaulterrorbarstddevvalue != nil {
		return *x.Tschchartseriesdefaulterrorbarstddevvalue
	}
	return 0
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesdefaulterrorbarstddevvaluescatterx() float32 {
	if x != nil && x.Tschchartseriesdefaulterrorbarstddevvaluescatterx != nil {
		return *x.Tschchartseriesdefaulterrorbarstddevvaluescatterx
	}
	return 0
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesdefaulterrorbartype() int32 {
	if x != nil && x.Tschchartseriesdefaulterrorbartype != nil {
		return *x.Tschchartseriesdefaulterrorbartype
	}
	return 0
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesdefaulterrorbartypescatterx() int32 {
	if x != nil && x.Tschchartseriesdefaulterrorbartypescatterx != nil {
		return *x.Tschchartseriesdefaulterrorbartypescatterx
	}
	return 0
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriespielabelexplosion() float32 {
	if x != nil && x.Tschchartseriespielabelexplosion != nil {
		return *x.Tschchartseriespielabelexplosion
	}
	return 0
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesbubblelinetype() int32 {
	if x != nil && x.Tschchartseriesbubblelinetype != nil {
		return *x.Tschchartseriesbubblelinetype
	}
	return 0
}

func (x *ChartSeriesNonStyleArchive) GetTschchartserieslinelinetype() int32 {
	if x != nil && x.Tschchartserieslinelinetype != nil {
		return *x.Tschchartserieslinelinetype
	}
	return 0
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesmixedlinelinetype() int32 {
	if x != nil && x.Tschchartseriesmixedlinelinetype != nil {
		return *x.Tschchartseriesmixedlinelinetype
	}
	return 0
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesradararealinetype() int32 {
	if x != nil && x.Tschchartseriesradararealinetype != nil {
		return *x.Tschchartseriesradararealinetype
	}
	return 0
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesscatterlinetype() int32 {
	if x != nil && x.Tschchartseriesscatterlinetype != nil {
		return *x.Tschchartseriesscatterlinetype
	}
	return 0
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesdefaultnumberformat() *TSKFormatStructArchive {
	if x != nil {
		return x.Tschchartseriesdefaultnumberformat
	}
	return nil
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriespienumberformat() *TSKFormatStructArchive {
	if x != nil {
		return x.Tschchartseriespienumberformat
	}
	return nil
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesdefaultnumberformattype() int32 {
	if x != nil && x.Tschchartseriesdefaultnumberformattype != nil {
		return *x.Tschchartseriesdefaultnumberformattype
	}
	return 0
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriespienumberformattype() int32 {
	if x != nil && x.Tschchartseriespienumberformattype != nil {
		return *x.Tschchartseriespienumberformattype
	}
	return 0
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesstackedpercentnumberformat() *TSKFormatStructArchive {
	if x != nil {
		return x.Tschchartseriesstackedpercentnumberformat
	}
	return nil
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesdefaultseriestype() int32 {
	if x != nil && x.Tschchartseriesdefaultseriestype != nil {
		return *x.Tschchartseriesdefaultseriestype
	}
	return 0
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesdefaultshowerrorbar() bool {
	if x != nil && x.Tschchartseriesdefaultshowerrorbar != nil {
		return *x.Tschchartseriesdefaultshowerrorbar
	}
	return false
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesdefaultshowerrorbarscatterx() bool {
	if x != nil && x.Tschchartseriesdefaultshowerrorbarscatterx != nil {
		return *x.Tschchartseriesdefaultshowerrorbarscatterx
	}
	return false
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesbubbleshowlabelsinfront() bool {
	if x != nil && x.Tschchartseriesbubbleshowlabelsinfront != nil {
		return *x.Tschchartseriesbubbleshowlabelsinfront
	}
	return false
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesdefaultshowlabelsinfront() bool {
	if x != nil && x.Tschchartseriesdefaultshowlabelsinfront != nil {
		return *x.Tschchartseriesdefaultshowlabelsinfront
	}
	return false
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesscattershowline() bool {
	if x != nil && x.Tschchartseriesscattershowline != nil {
		return *x.Tschchartseriesscattershowline
	}
	return false
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesbubbleshownegativedata() bool {
	if x != nil && x.Tschchartseriesbubbleshownegativedata != nil {
		return *x.Tschchartseriesbubbleshownegativedata
	}
	return false
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesbubbleshowserieslabels() bool {
	if x != nil && x.Tschchartseriesbubbleshowserieslabels != nil {
		return *x.Tschchartseriesbubbleshowserieslabels
	}
	return false
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriespieshowserieslabels() bool {
	if x != nil && x.Tschchartseriespieshowserieslabels != nil {
		return *x.Tschchartseriespieshowserieslabels
	}
	return false
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesscattershowserieslabels() bool {
	if x != nil && x.Tschchartseriesscattershowserieslabels != nil {
		return *x.Tschchartseriesscattershowserieslabels
	}
	return false
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesareashowsymbol() bool {
	if x != nil && x.Tschchartseriesareashowsymbol != nil {
		return *x.Tschchartseriesareashowsymbol
	}
	return false
}

func (x *ChartSeriesNonStyleArchive) GetTschchartserieslineshowsymbol() bool {
	if x != nil && x.Tschchartserieslineshowsymbol != nil {
		return *x.Tschchartserieslineshowsymbol
	}
	return false
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesmixedareashowsymbol() bool {
	if x != nil && x.Tschchartseriesmixedareashowsymbol != nil {
		return *x.Tschchartseriesmixedareashowsymbol
	}
	return false
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesmixedlineshowsymbol() bool {
	if x != nil && x.Tschchartseriesmixedlineshowsymbol != nil {
		return *x.Tschchartseriesmixedlineshowsymbol
	}
	return false
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesradarareashowsymbol() bool {
	if x != nil && x.Tschchartseriesradarareashowsymbol != nil {
		return *x.Tschchartseriesradarareashowsymbol
	}
	return false
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesscattershowsymbol() bool {
	if x != nil && x.Tschchartseriesscattershowsymbol != nil {
		return *x.Tschchartseriesscattershowsymbol
	}
	return false
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesdefaultshowtrendline() bool {
	if x != nil && x.Tschchartseriesdefaultshowtrendline != nil {
		return *x.Tschchartseriesdefaultshowtrendline
	}
	return false
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesareashowvaluelabels() bool {
	if x != nil && x.Tschchartseriesareashowvaluelabels != nil {
		return *x.Tschchartseriesareashowvaluelabels
	}
	return false
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesbarshowvaluelabels() bool {
	if x != nil && x.Tschchartseriesbarshowvaluelabels != nil {
		return *x.Tschchartseriesbarshowvaluelabels
	}
	return false
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesbubbleshowvaluelabels() bool {
	if x != nil && x.Tschchartseriesbubbleshowvaluelabels != nil {
		return *x.Tschchartseriesbubbleshowvaluelabels
	}
	return false
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesdefaultshowvaluelabels() bool {
	if x != nil && x.Tschchartseriesdefaultshowvaluelabels != nil {
		return *x.Tschchartseriesdefaultshowvaluelabels
	}
	return false
}

func (x *ChartSeriesNonStyleArchive) GetTschchartserieslineshowvaluelabels() bool {
	if x != nil && x.Tschchartserieslineshowvaluelabels != nil {
		return *x.Tschchartserieslineshowvaluelabels
	}
	return false
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesmixedshowvaluelabels() bool {
	if x != nil && x.Tschchartseriesmixedshowvaluelabels != nil {
		return *x.Tschchartseriesmixedshowvaluelabels
	}
	return false
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriespieshowvaluelabels() bool {
	if x != nil && x.Tschchartseriespieshowvaluelabels != nil {
		return *x.Tschchartseriespieshowvaluelabels
	}
	return false
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesradarshowvaluelabels() bool {
	if x != nil && x.Tschchartseriesradarshowvaluelabels != nil {
		return *x.Tschchartseriesradarshowvaluelabels
	}
	return false
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesscattershowvaluelabels() bool {
	if x != nil && x.Tschchartseriesscattershowvaluelabels != nil {
		return *x.Tschchartseriesscattershowvaluelabels
	}
	return false
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesbubblesizedimension() int32 {
	if x != nil && x.Tschchartseriesbubblesizedimension != nil {
		return *x.Tschchartseriesbubblesizedimension
	}
	return 0
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesareastacklabels() bool {
	if x != nil && x.Tschchartseriesareastacklabels != nil {
		return *x.Tschchartseriesareastacklabels
	}
	return false
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesbarstacklabels() bool {
	if x != nil && x.Tschchartseriesbarstacklabels != nil {
		return *x.Tschchartseriesbarstacklabels
	}
	return false
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesbubblestacklabels() bool {
	if x != nil && x.Tschchartseriesbubblestacklabels != nil {
		return *x.Tschchartseriesbubblestacklabels
	}
	return false
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesdefaultstacklabels() bool {
	if x != nil && x.Tschchartseriesdefaultstacklabels != nil {
		return *x.Tschchartseriesdefaultstacklabels
	}
	return false
}

func (x *ChartSeriesNonStyleArchive) GetTschchartserieslinestacklabels() bool {
	if x != nil && x.Tschchartserieslinestacklabels != nil {
		return *x.Tschchartserieslinestacklabels
	}
	return false
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriespiestacklabels() bool {
	if x != nil && x.Tschchartseriespiestacklabels != nil {
		return *x.Tschchartseriespiestacklabels
	}
	return false
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesscatterstacklabels() bool {
	if x != nil && x.Tschchartseriesscatterstacklabels != nil {
		return *x.Tschchartseriesscatterstacklabels
	}
	return false
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesstackedareastacklabels() bool {
	if x != nil && x.Tschchartseriesstackedareastacklabels != nil {
		return *x.Tschchartseriesstackedareastacklabels
	}
	return false
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesstackedbarstacklabels() bool {
	if x != nil && x.Tschchartseriesstackedbarstacklabels != nil {
		return *x.Tschchartseriesstackedbarstacklabels
	}
	return false
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesareasymboltype() int32 {
	if x != nil && x.Tschchartseriesareasymboltype != nil {
		return *x.Tschchartseriesareasymboltype
	}
	return 0
}

func (x *ChartSeriesNonStyleArchive) GetTschchartserieslinesymboltype() int32 {
	if x != nil && x.Tschchartserieslinesymboltype != nil {
		return *x.Tschchartserieslinesymboltype
	}
	return 0
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesmixedareasymboltype() int32 {
	if x != nil && x.Tschchartseriesmixedareasymboltype != nil {
		return *x.Tschchartseriesmixedareasymboltype
	}
	return 0
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesmixedlinesymboltype() int32 {
	if x != nil && x.Tschchartseriesmixedlinesymboltype != nil {
		return *x.Tschchartseriesmixedlinesymboltype
	}
	return 0
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesradarareasymboltype() int32 {
	if x != nil && x.Tschchartseriesradarareasymboltype != nil {
		return *x.Tschchartseriesradarareasymboltype
	}
	return 0
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesscattersymboltype() int32 {
	if x != nil && x.Tschchartseriesscattersymboltype != nil {
		return *x.Tschchartseriesscattersymboltype
	}
	return 0
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesdefaulttrendlineequationoffsetx() float32 {
	if x != nil && x.Tschchartseriesdefaulttrendlineequationoffsetx != nil {
		return *x.Tschchartseriesdefaulttrendlineequationoffsetx
	}
	return 0
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesdefaulttrendlineequationoffsety() float32 {
	if x != nil && x.Tschchartseriesdefaulttrendlineequationoffsety != nil {
		return *x.Tschchartseriesdefaulttrendlineequationoffsety
	}
	return 0
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesdefaulttrendlinelabelstring() string {
	if x != nil && x.Tschchartseriesdefaulttrendlinelabelstring != nil {
		return *x.Tschchartseriesdefaulttrendlinelabelstring
	}
	return ""
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesdefaulttrendlineorder() int32 {
	if x != nil && x.Tschchartseriesdefaulttrendlineorder != nil {
		return *x.Tschchartseriesdefaulttrendlineorder
	}
	return 0
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesdefaulttrendlineperiod() int32 {
	if x != nil && x.Tschchartseriesdefaulttrendlineperiod != nil {
		return *x.Tschchartseriesdefaulttrendlineperiod
	}
	return 0
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesdefaulttrendlinersquaredoffsetx() float32 {
	if x != nil && x.Tschchartseriesdefaulttrendlinersquaredoffsetx != nil {
		return *x.Tschchartseriesdefaulttrendlinersquaredoffsetx
	}
	return 0
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesdefaulttrendlinersquaredoffsety() float32 {
	if x != nil && x.Tschchartseriesdefaulttrendlinersquaredoffsety != nil {
		return *x.Tschchartseriesdefaulttrendlinersquaredoffsety
	}
	return 0
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesdefaulttrendlineshowequation() bool {
	if x != nil && x.Tschchartseriesdefaulttrendlineshowequation != nil {
		return *x.Tschchartseriesdefaulttrendlineshowequation
	}
	return false
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesdefaulttrendlineshowlabel() bool {
	if x != nil && x.Tschchartseriesdefaulttrendlineshowlabel != nil {
		return *x.Tschchartseriesdefaulttrendlineshowlabel
	}
	return false
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesdefaulttrendlineshowr2Value() bool {
	if x != nil && x.Tschchartseriesdefaulttrendlineshowr2Value != nil {
		return *x.Tschchartseriesdefaulttrendlineshowr2Value
	}
	return false
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesdefaulttrendlinetype() int32 {
	if x != nil && x.Tschchartseriesdefaulttrendlinetype != nil {
		return *x.Tschchartseriesdefaulttrendlinetype
	}
	return 0
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesbubblevaluelabelsaxis() int32 {
	if x != nil && x.Tschchartseriesbubblevaluelabelsaxis != nil {
		return *x.Tschchartseriesbubblevaluelabelsaxis
	}
	return 0
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesscattervaluelabelsaxis() int32 {
	if x != nil && x.Tschchartseriesscattervaluelabelsaxis != nil {
		return *x.Tschchartseriesscattervaluelabelsaxis
	}
	return 0
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriespiewedgeexplosion() float32 {
	if x != nil && x.Tschchartseriespiewedgeexplosion != nil {
		return *x.Tschchartseriespiewedgeexplosion
	}
	return 0
}

func (x *ChartSeriesNonStyleArchive) GetTschchartseriesdefaultyaxisordinal() int32 {
	if x != nil && x.Tschchartseriesdefaultyaxisordinal != nil {
		return *x.Tschchartseriesdefaultyaxisordinal
	}
	return 0
}

type ReferenceLineStyleArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tschreferencelinedefaultlabelparagraphstyleindex      *int32         `protobuf:"varint,3,opt,name=tschreferencelinedefaultlabelparagraphstyleindex" json:"tschreferencelinedefaultlabelparagraphstyleindex,omitempty"`
	Tschreferencelinedefaultshadow                        *ShadowArchive `protobuf:"bytes,2,opt,name=tschreferencelinedefaultshadow" json:"tschreferencelinedefaultshadow,omitempty"`
	Tschreferencelinedefaultstroke                        *StrokeArchive `protobuf:"bytes,1,opt,name=tschreferencelinedefaultstroke" json:"tschreferencelinedefaultstroke,omitempty"`
	Tschreferencelinedefaultvaluelabelparagraphstyleindex *int32         `protobuf:"varint,4,opt,name=tschreferencelinedefaultvaluelabelparagraphstyleindex" json:"tschreferencelinedefaultvaluelabelparagraphstyleindex,omitempty"`
}

func (x *ReferenceLineStyleArchive) Reset() {
	*x = ReferenceLineStyleArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHArchives_GEN_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferenceLineStyleArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferenceLineStyleArchive) ProtoMessage() {}

func (x *ReferenceLineStyleArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHArchives_GEN_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferenceLineStyleArchive.ProtoReflect.Descriptor instead.
func (*ReferenceLineStyleArchive) Descriptor() ([]byte, []int) {
	return file_TSCHArchives_GEN_proto_rawDescGZIP(), []int{8}
}

func (x *ReferenceLineStyleArchive) GetTschreferencelinedefaultlabelparagraphstyleindex() int32 {
	if x != nil && x.Tschreferencelinedefaultlabelparagraphstyleindex != nil {
		return *x.Tschreferencelinedefaultlabelparagraphstyleindex
	}
	return 0
}

func (x *ReferenceLineStyleArchive) GetTschreferencelinedefaultshadow() *ShadowArchive {
	if x != nil {
		return x.Tschreferencelinedefaultshadow
	}
	return nil
}

func (x *ReferenceLineStyleArchive) GetTschreferencelinedefaultstroke() *StrokeArchive {
	if x != nil {
		return x.Tschreferencelinedefaultstroke
	}
	return nil
}

func (x *ReferenceLineStyleArchive) GetTschreferencelinedefaultvaluelabelparagraphstyleindex() int32 {
	if x != nil && x.Tschreferencelinedefaultvaluelabelparagraphstyleindex != nil {
		return *x.Tschreferencelinedefaultvaluelabelparagraphstyleindex
	}
	return 0
}

type ReferenceLineNonStyleArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tschreferencelinedefaultcustomvalue    *ChartsNSNumberDoubleArchive `protobuf:"bytes,6,opt,name=tschreferencelinedefaultcustomvalue" json:"tschreferencelinedefaultcustomvalue,omitempty"`
	Tschreferencelinedefaultlabel          *string                      `protobuf:"bytes,5,opt,name=tschreferencelinedefaultlabel" json:"tschreferencelinedefaultlabel,omitempty"`
	Tschreferencelinedefaultshowlabel      *bool                        `protobuf:"varint,3,opt,name=tschreferencelinedefaultshowlabel" json:"tschreferencelinedefaultshowlabel,omitempty"`
	Tschreferencelinedefaultshowline       *bool                        `protobuf:"varint,2,opt,name=tschreferencelinedefaultshowline" json:"tschreferencelinedefaultshowline,omitempty"`
	Tschreferencelinedefaultshowvaluelabel *bool                        `protobuf:"varint,4,opt,name=tschreferencelinedefaultshowvaluelabel" json:"tschreferencelinedefaultshowvaluelabel,omitempty"`
	Tschreferencelinedefaulttype           *int32                       `protobuf:"varint,1,opt,name=tschreferencelinedefaulttype" json:"tschreferencelinedefaulttype,omitempty"`
}

func (x *ReferenceLineNonStyleArchive) Reset() {
	*x = ReferenceLineNonStyleArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHArchives_GEN_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferenceLineNonStyleArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferenceLineNonStyleArchive) ProtoMessage() {}

func (x *ReferenceLineNonStyleArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHArchives_GEN_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferenceLineNonStyleArchive.ProtoReflect.Descriptor instead.
func (*ReferenceLineNonStyleArchive) Descriptor() ([]byte, []int) {
	return file_TSCHArchives_GEN_proto_rawDescGZIP(), []int{9}
}

func (x *ReferenceLineNonStyleArchive) GetTschreferencelinedefaultcustomvalue() *ChartsNSNumberDoubleArchive {
	if x != nil {
		return x.Tschreferencelinedefaultcustomvalue
	}
	return nil
}

func (x *ReferenceLineNonStyleArchive) GetTschreferencelinedefaultlabel() string {
	if x != nil && x.Tschreferencelinedefaultlabel != nil {
		return *x.Tschreferencelinedefaultlabel
	}
	return ""
}

func (x *ReferenceLineNonStyleArchive) GetTschreferencelinedefaultshowlabel() bool {
	if x != nil && x.Tschreferencelinedefaultshowlabel != nil {
		return *x.Tschreferencelinedefaultshowlabel
	}
	return false
}

func (x *ReferenceLineNonStyleArchive) GetTschreferencelinedefaultshowline() bool {
	if x != nil && x.Tschreferencelinedefaultshowline != nil {
		return *x.Tschreferencelinedefaultshowline
	}
	return false
}

func (x *ReferenceLineNonStyleArchive) GetTschreferencelinedefaultshowvaluelabel() bool {
	if x != nil && x.Tschreferencelinedefaultshowvaluelabel != nil {
		return *x.Tschreferencelinedefaultshowvaluelabel
	}
	return false
}

func (x *ReferenceLineNonStyleArchive) GetTschreferencelinedefaulttype() int32 {
	if x != nil && x.Tschreferencelinedefaulttype != nil {
		return *x.Tschreferencelinedefaulttype
	}
	return 0
}

type ChartGenericPropertyMapArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tschchartinfo3Dbarshape                          *int32                         `protobuf:"varint,1,opt,name=tschchartinfo3dbarshape" json:"tschchartinfo3dbarshape,omitempty"`
	Tschchartinfo3Dbeveledges                        *bool                          `protobuf:"varint,2,opt,name=tschchartinfo3dbeveledges" json:"tschchartinfo3dbeveledges,omitempty"`
	Tschchartinfo3Dchartopacity                      *float32                       `protobuf:"fixed32,3,opt,name=tschchartinfo3dchartopacity" json:"tschchartinfo3dchartopacity,omitempty"`
	Tschchartinfo3Dintersetdepthgap                  *float32                       `protobuf:"fixed32,4,opt,name=tschchartinfo3dintersetdepthgap" json:"tschchartinfo3dintersetdepthgap,omitempty"`
	Tschchartinfo3Dlightingpackage                   *Chart3DLightingPackageArchive `protobuf:"bytes,5,opt,name=tschchartinfo3dlightingpackage" json:"tschchartinfo3dlightingpackage,omitempty"`
	Tschchartinfo3Drotation                          *Chart3DVectorArchive          `protobuf:"bytes,6,opt,name=tschchartinfo3drotation" json:"tschchartinfo3drotation,omitempty"`
	Tschchartinfo3Dscale                             *Chart3DVectorArchive          `protobuf:"bytes,7,opt,name=tschchartinfo3dscale" json:"tschchartinfo3dscale,omitempty"`
	Tschchartinfo3Dviewport                          *Chart3DVectorArchive          `protobuf:"bytes,8,opt,name=tschchartinfo3dviewport" json:"tschchartinfo3dviewport,omitempty"`
	Tschchartinfobackgroundfill                      *FillArchive                   `protobuf:"bytes,9,opt,name=tschchartinfobackgroundfill" json:"tschchartinfobackgroundfill,omitempty"`
	Tschchartinfobackgroundstroke                    *StrokeArchive                 `protobuf:"bytes,10,opt,name=tschchartinfobackgroundstroke" json:"tschchartinfobackgroundstroke,omitempty"`
	Tschchartinfoborderopacity                       *float32                       `protobuf:"fixed32,11,opt,name=tschchartinfoborderopacity" json:"tschchartinfoborderopacity,omitempty"`
	Tschchartinfobordershadow                        *ShadowArchive                 `protobuf:"bytes,12,opt,name=tschchartinfobordershadow" json:"tschchartinfobordershadow,omitempty"`
	Tschchartinfoborderstroke                        *StrokeArchive                 `protobuf:"bytes,13,opt,name=tschchartinfoborderstroke" json:"tschchartinfoborderstroke,omitempty"`
	Tschchartinfocalloutlinetype                     *int32                         `protobuf:"varint,14,opt,name=tschchartinfocalloutlinetype" json:"tschchartinfocalloutlinetype,omitempty"`
	Tschchartinfocombinelayers                       *bool                          `protobuf:"varint,15,opt,name=tschchartinfocombinelayers" json:"tschchartinfocombinelayers,omitempty"`
	Tschchartinfodeprecatedroundedcornerouterendonly *bool                          `protobuf:"varint,16,opt,name=tschchartinfodeprecatedroundedcornerouterendonly" json:"tschchartinfodeprecatedroundedcornerouterendonly,omitempty"`
	Tschchartinfodeprecatedroundedcornerradius       *float32                       `protobuf:"fixed32,17,opt,name=tschchartinfodeprecatedroundedcornerradius" json:"tschchartinfodeprecatedroundedcornerradius,omitempty"`
	Tschchartinfodatasetnamelocation                 *int32                         `protobuf:"varint,18,opt,name=tschchartinfodatasetnamelocation" json:"tschchartinfodatasetnamelocation,omitempty"`
	Tschchartinfodatasetnameparagraphstyleindex      *int32                         `protobuf:"varint,19,opt,name=tschchartinfodatasetnameparagraphstyleindex" json:"tschchartinfodatasetnameparagraphstyleindex,omitempty"`
	Tschchartinfodonutplacetitleatcenter             *bool                          `protobuf:"varint,20,opt,name=tschchartinfodonutplacetitleatcenter" json:"tschchartinfodonutplacetitleatcenter,omitempty"`
	Tschchartinfogridbackgroundfill                  *FillArchive                   `protobuf:"bytes,21,opt,name=tschchartinfogridbackgroundfill" json:"tschchartinfogridbackgroundfill,omitempty"`
	Tschchartinfogridbackgroundopacity               *float32                       `protobuf:"fixed32,22,opt,name=tschchartinfogridbackgroundopacity" json:"tschchartinfogridbackgroundopacity,omitempty"`
	Tschchartinfoinnerradius                         *float32                       `protobuf:"fixed32,23,opt,name=tschchartinfoinnerradius" json:"tschchartinfoinnerradius,omitempty"`
	Tschchartinfointerbargap                         *float32                       `protobuf:"fixed32,24,opt,name=tschchartinfointerbargap" json:"tschchartinfointerbargap,omitempty"`
	Tschchartinfointersetgap                         *float32                       `protobuf:"fixed32,25,opt,name=tschchartinfointersetgap" json:"tschchartinfointersetgap,omitempty"`
	Tschchartinfomultidatacontroltype                *int32                         `protobuf:"varint,26,opt,name=tschchartinfomultidatacontroltype" json:"tschchartinfomultidatacontroltype,omitempty"`
	Tschchartinfopiestartangle                       *float32                       `protobuf:"fixed32,27,opt,name=tschchartinfopiestartangle" json:"tschchartinfopiestartangle,omitempty"`
	Tschchartinforadarradiusgridlinecurve            *bool                          `protobuf:"varint,28,opt,name=tschchartinforadarradiusgridlinecurve" json:"tschchartinforadarradiusgridlinecurve,omitempty"`
	Tschchartinforadarstartangle                     *float32                       `protobuf:"fixed32,29,opt,name=tschchartinforadarstartangle" json:"tschchartinforadarstartangle,omitempty"`
	Tschchartinforoundedcornerouterendonly           *bool                          `protobuf:"varint,30,opt,name=tschchartinforoundedcornerouterendonly" json:"tschchartinforoundedcornerouterendonly,omitempty"`
	Tschchartinforoundedcornerradius                 *float32                       `protobuf:"fixed32,31,opt,name=tschchartinforoundedcornerradius" json:"tschchartinforoundedcornerradius,omitempty"`
	Tschchartinfoshowborder                          *bool                          `protobuf:"varint,32,opt,name=tschchartinfoshowborder" json:"tschchartinfoshowborder,omitempty"`
	Tschchartinfoshowlegend                          *bool                          `protobuf:"varint,33,opt,name=tschchartinfoshowlegend" json:"tschchartinfoshowlegend,omitempty"`
	Tschchartinfoshowtitle                           *bool                          `protobuf:"varint,34,opt,name=tschchartinfoshowtitle" json:"tschchartinfoshowtitle,omitempty"`
	Tschchartinfoskiphiddendata                      *bool                          `protobuf:"varint,35,opt,name=tschchartinfoskiphiddendata" json:"tschchartinfoskiphiddendata,omitempty"`
	Tschchartinfotitlecolor                          *Color                         `protobuf:"bytes,36,opt,name=tschchartinfotitlecolor" json:"tschchartinfotitlecolor,omitempty"`
	Tschchartinfotitle                               *string                        `protobuf:"bytes,37,opt,name=tschchartinfotitle" json:"tschchartinfotitle,omitempty"`
	Tschchartinfotitleparagraphstyleindex            *int32                         `protobuf:"varint,38,opt,name=tschchartinfotitleparagraphstyleindex" json:"tschchartinfotitleparagraphstyleindex,omitempty"`
}

func (x *ChartGenericPropertyMapArchive) Reset() {
	*x = ChartGenericPropertyMapArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHArchives_GEN_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartGenericPropertyMapArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartGenericPropertyMapArchive) ProtoMessage() {}

func (x *ChartGenericPropertyMapArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHArchives_GEN_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartGenericPropertyMapArchive.ProtoReflect.Descriptor instead.
func (*ChartGenericPropertyMapArchive) Descriptor() ([]byte, []int) {
	return file_TSCHArchives_GEN_proto_rawDescGZIP(), []int{10}
}

func (x *ChartGenericPropertyMapArchive) GetTschchartinfo3Dbarshape() int32 {
	if x != nil && x.Tschchartinfo3Dbarshape != nil {
		return *x.Tschchartinfo3Dbarshape
	}
	return 0
}

func (x *ChartGenericPropertyMapArchive) GetTschchartinfo3Dbeveledges() bool {
	if x != nil && x.Tschchartinfo3Dbeveledges != nil {
		return *x.Tschchartinfo3Dbeveledges
	}
	return false
}

func (x *ChartGenericPropertyMapArchive) GetTschchartinfo3Dchartopacity() float32 {
	if x != nil && x.Tschchartinfo3Dchartopacity != nil {
		return *x.Tschchartinfo3Dchartopacity
	}
	return 0
}

func (x *ChartGenericPropertyMapArchive) GetTschchartinfo3Dintersetdepthgap() float32 {
	if x != nil && x.Tschchartinfo3Dintersetdepthgap != nil {
		return *x.Tschchartinfo3Dintersetdepthgap
	}
	return 0
}

func (x *ChartGenericPropertyMapArchive) GetTschchartinfo3Dlightingpackage() *Chart3DLightingPackageArchive {
	if x != nil {
		return x.Tschchartinfo3Dlightingpackage
	}
	return nil
}

func (x *ChartGenericPropertyMapArchive) GetTschchartinfo3Drotation() *Chart3DVectorArchive {
	if x != nil {
		return x.Tschchartinfo3Drotation
	}
	return nil
}

func (x *ChartGenericPropertyMapArchive) GetTschchartinfo3Dscale() *Chart3DVectorArchive {
	if x != nil {
		return x.Tschchartinfo3Dscale
	}
	return nil
}

func (x *ChartGenericPropertyMapArchive) GetTschchartinfo3Dviewport() *Chart3DVectorArchive {
	if x != nil {
		return x.Tschchartinfo3Dviewport
	}
	return nil
}

func (x *ChartGenericPropertyMapArchive) GetTschchartinfobackgroundfill() *FillArchive {
	if x != nil {
		return x.Tschchartinfobackgroundfill
	}
	return nil
}

func (x *ChartGenericPropertyMapArchive) GetTschchartinfobackgroundstroke() *StrokeArchive {
	if x != nil {
		return x.Tschchartinfobackgroundstroke
	}
	return nil
}

func (x *ChartGenericPropertyMapArchive) GetTschchartinfoborderopacity() float32 {
	if x != nil && x.Tschchartinfoborderopacity != nil {
		return *x.Tschchartinfoborderopacity
	}
	return 0
}

func (x *ChartGenericPropertyMapArchive) GetTschchartinfobordershadow() *ShadowArchive {
	if x != nil {
		return x.Tschchartinfobordershadow
	}
	return nil
}

func (x *ChartGenericPropertyMapArchive) GetTschchartinfoborderstroke() *StrokeArchive {
	if x != nil {
		return x.Tschchartinfoborderstroke
	}
	return nil
}

func (x *ChartGenericPropertyMapArchive) GetTschchartinfocalloutlinetype() int32 {
	if x != nil && x.Tschchartinfocalloutlinetype != nil {
		return *x.Tschchartinfocalloutlinetype
	}
	return 0
}

func (x *ChartGenericPropertyMapArchive) GetTschchartinfocombinelayers() bool {
	if x != nil && x.Tschchartinfocombinelayers != nil {
		return *x.Tschchartinfocombinelayers
	}
	return false
}

func (x *ChartGenericPropertyMapArchive) GetTschchartinfodeprecatedroundedcornerouterendonly() bool {
	if x != nil && x.Tschchartinfodeprecatedroundedcornerouterendonly != nil {
		return *x.Tschchartinfodeprecatedroundedcornerouterendonly
	}
	return false
}

func (x *ChartGenericPropertyMapArchive) GetTschchartinfodeprecatedroundedcornerradius() float32 {
	if x != nil && x.Tschchartinfodeprecatedroundedcornerradius != nil {
		return *x.Tschchartinfodeprecatedroundedcornerradius
	}
	return 0
}

func (x *ChartGenericPropertyMapArchive) GetTschchartinfodatasetnamelocation() int32 {
	if x != nil && x.Tschchartinfodatasetnamelocation != nil {
		return *x.Tschchartinfodatasetnamelocation
	}
	return 0
}

func (x *ChartGenericPropertyMapArchive) GetTschchartinfodatasetnameparagraphstyleindex() int32 {
	if x != nil && x.Tschchartinfodatasetnameparagraphstyleindex != nil {
		return *x.Tschchartinfodatasetnameparagraphstyleindex
	}
	return 0
}

func (x *ChartGenericPropertyMapArchive) GetTschchartinfodonutplacetitleatcenter() bool {
	if x != nil && x.Tschchartinfodonutplacetitleatcenter != nil {
		return *x.Tschchartinfodonutplacetitleatcenter
	}
	return false
}

func (x *ChartGenericPropertyMapArchive) GetTschchartinfogridbackgroundfill() *FillArchive {
	if x != nil {
		return x.Tschchartinfogridbackgroundfill
	}
	return nil
}

func (x *ChartGenericPropertyMapArchive) GetTschchartinfogridbackgroundopacity() float32 {
	if x != nil && x.Tschchartinfogridbackgroundopacity != nil {
		return *x.Tschchartinfogridbackgroundopacity
	}
	return 0
}

func (x *ChartGenericPropertyMapArchive) GetTschchartinfoinnerradius() float32 {
	if x != nil && x.Tschchartinfoinnerradius != nil {
		return *x.Tschchartinfoinnerradius
	}
	return 0
}

func (x *ChartGenericPropertyMapArchive) GetTschchartinfointerbargap() float32 {
	if x != nil && x.Tschchartinfointerbargap != nil {
		return *x.Tschchartinfointerbargap
	}
	return 0
}

func (x *ChartGenericPropertyMapArchive) GetTschchartinfointersetgap() float32 {
	if x != nil && x.Tschchartinfointersetgap != nil {
		return *x.Tschchartinfointersetgap
	}
	return 0
}

func (x *ChartGenericPropertyMapArchive) GetTschchartinfomultidatacontroltype() int32 {
	if x != nil && x.Tschchartinfomultidatacontroltype != nil {
		return *x.Tschchartinfomultidatacontroltype
	}
	return 0
}

func (x *ChartGenericPropertyMapArchive) GetTschchartinfopiestartangle() float32 {
	if x != nil && x.Tschchartinfopiestartangle != nil {
		return *x.Tschchartinfopiestartangle
	}
	return 0
}

func (x *ChartGenericPropertyMapArchive) GetTschchartinforadarradiusgridlinecurve() bool {
	if x != nil && x.Tschchartinforadarradiusgridlinecurve != nil {
		return *x.Tschchartinforadarradiusgridlinecurve
	}
	return false
}

func (x *ChartGenericPropertyMapArchive) GetTschchartinforadarstartangle() float32 {
	if x != nil && x.Tschchartinforadarstartangle != nil {
		return *x.Tschchartinforadarstartangle
	}
	return 0
}

func (x *ChartGenericPropertyMapArchive) GetTschchartinforoundedcornerouterendonly() bool {
	if x != nil && x.Tschchartinforoundedcornerouterendonly != nil {
		return *x.Tschchartinforoundedcornerouterendonly
	}
	return false
}

func (x *ChartGenericPropertyMapArchive) GetTschchartinforoundedcornerradius() float32 {
	if x != nil && x.Tschchartinforoundedcornerradius != nil {
		return *x.Tschchartinforoundedcornerradius
	}
	return 0
}

func (x *ChartGenericPropertyMapArchive) GetTschchartinfoshowborder() bool {
	if x != nil && x.Tschchartinfoshowborder != nil {
		return *x.Tschchartinfoshowborder
	}
	return false
}

func (x *ChartGenericPropertyMapArchive) GetTschchartinfoshowlegend() bool {
	if x != nil && x.Tschchartinfoshowlegend != nil {
		return *x.Tschchartinfoshowlegend
	}
	return false
}

func (x *ChartGenericPropertyMapArchive) GetTschchartinfoshowtitle() bool {
	if x != nil && x.Tschchartinfoshowtitle != nil {
		return *x.Tschchartinfoshowtitle
	}
	return false
}

func (x *ChartGenericPropertyMapArchive) GetTschchartinfoskiphiddendata() bool {
	if x != nil && x.Tschchartinfoskiphiddendata != nil {
		return *x.Tschchartinfoskiphiddendata
	}
	return false
}

func (x *ChartGenericPropertyMapArchive) GetTschchartinfotitlecolor() *Color {
	if x != nil {
		return x.Tschchartinfotitlecolor
	}
	return nil
}

func (x *ChartGenericPropertyMapArchive) GetTschchartinfotitle() string {
	if x != nil && x.Tschchartinfotitle != nil {
		return *x.Tschchartinfotitle
	}
	return ""
}

func (x *ChartGenericPropertyMapArchive) GetTschchartinfotitleparagraphstyleindex() int32 {
	if x != nil && x.Tschchartinfotitleparagraphstyleindex != nil {
		return *x.Tschchartinfotitleparagraphstyleindex
	}
	return 0
}

type LegendGenericPropertyMapArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tschlegendmodelfill                     *FillArchive   `protobuf:"bytes,1,opt,name=tschlegendmodelfill" json:"tschlegendmodelfill,omitempty"`
	Tschlegendmodellabelparagraphstyleindex *int32         `protobuf:"varint,2,opt,name=tschlegendmodellabelparagraphstyleindex" json:"tschlegendmodellabelparagraphstyleindex,omitempty"`
	Tschlegendmodelopacity                  *float32       `protobuf:"fixed32,3,opt,name=tschlegendmodelopacity" json:"tschlegendmodelopacity,omitempty"`
	Tschlegendmodelshadow                   *ShadowArchive `protobuf:"bytes,4,opt,name=tschlegendmodelshadow" json:"tschlegendmodelshadow,omitempty"`
	Tschlegendmodelstroke                   *StrokeArchive `protobuf:"bytes,5,opt,name=tschlegendmodelstroke" json:"tschlegendmodelstroke,omitempty"`
}

func (x *LegendGenericPropertyMapArchive) Reset() {
	*x = LegendGenericPropertyMapArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHArchives_GEN_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LegendGenericPropertyMapArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LegendGenericPropertyMapArchive) ProtoMessage() {}

func (x *LegendGenericPropertyMapArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHArchives_GEN_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LegendGenericPropertyMapArchive.ProtoReflect.Descriptor instead.
func (*LegendGenericPropertyMapArchive) Descriptor() ([]byte, []int) {
	return file_TSCHArchives_GEN_proto_rawDescGZIP(), []int{11}
}

func (x *LegendGenericPropertyMapArchive) GetTschlegendmodelfill() *FillArchive {
	if x != nil {
		return x.Tschlegendmodelfill
	}
	return nil
}

func (x *LegendGenericPropertyMapArchive) GetTschlegendmodellabelparagraphstyleindex() int32 {
	if x != nil && x.Tschlegendmodellabelparagraphstyleindex != nil {
		return *x.Tschlegendmodellabelparagraphstyleindex
	}
	return 0
}

func (x *LegendGenericPropertyMapArchive) GetTschlegendmodelopacity() float32 {
	if x != nil && x.Tschlegendmodelopacity != nil {
		return *x.Tschlegendmodelopacity
	}
	return 0
}

func (x *LegendGenericPropertyMapArchive) GetTschlegendmodelshadow() *ShadowArchive {
	if x != nil {
		return x.Tschlegendmodelshadow
	}
	return nil
}

func (x *LegendGenericPropertyMapArchive) GetTschlegendmodelstroke() *StrokeArchive {
	if x != nil {
		return x.Tschlegendmodelstroke
	}
	return nil
}

type ChartAxisGenericPropertyMapArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tschchartaxis1_0Dateformat               *TSKFormatStructArchive      `protobuf:"bytes,1,opt,name=tschchartaxis1_0dateformat,json=tschchartaxis10dateformat" json:"tschchartaxis1_0dateformat,omitempty"`
	Tschchartaxis1_0Numberformat             *TSKFormatStructArchive      `protobuf:"bytes,2,opt,name=tschchartaxis1_0numberformat,json=tschchartaxis10numberformat" json:"tschchartaxis1_0numberformat,omitempty"`
	Tschchartaxis3Dgridlineopacity           *float32                     `protobuf:"fixed32,3,opt,name=tschchartaxis3dgridlineopacity" json:"tschchartaxis3dgridlineopacity,omitempty"`
	Tschchartaxis3Dgridlinestroke            *StrokeArchive               `protobuf:"bytes,4,opt,name=tschchartaxis3dgridlinestroke" json:"tschchartaxis3dgridlinestroke,omitempty"`
	Tschchartaxis3Dlabelposition             *int32                       `protobuf:"varint,5,opt,name=tschchartaxis3dlabelposition" json:"tschchartaxis3dlabelposition,omitempty"`
	Tschchartaxisdateformat                  *TSKFormatStructArchive      `protobuf:"bytes,6,opt,name=tschchartaxisdateformat" json:"tschchartaxisdateformat,omitempty"`
	Tschchartaxisdurationformat              *TSKFormatStructArchive      `protobuf:"bytes,7,opt,name=tschchartaxisdurationformat" json:"tschchartaxisdurationformat,omitempty"`
	Tschchartaxishorizontalspacing           *int32                       `protobuf:"varint,8,opt,name=tschchartaxishorizontalspacing" json:"tschchartaxishorizontalspacing,omitempty"`
	Tschchartaxislabelanglebaselinedirection *int32                       `protobuf:"varint,9,opt,name=tschchartaxislabelanglebaselinedirection" json:"tschchartaxislabelanglebaselinedirection,omitempty"`
	Tschchartaxislabelexplosion              *float32                     `protobuf:"fixed32,10,opt,name=tschchartaxislabelexplosion" json:"tschchartaxislabelexplosion,omitempty"`
	Tschchartaxislabelparagraphstyleindex    *int32                       `protobuf:"varint,11,opt,name=tschchartaxislabelparagraphstyleindex" json:"tschchartaxislabelparagraphstyleindex,omitempty"`
	Tschchartaxislabelsorientation           *float32                     `protobuf:"fixed32,12,opt,name=tschchartaxislabelsorientation" json:"tschchartaxislabelsorientation,omitempty"`
	Tschchartaxismajorgridlineopacity        *float32                     `protobuf:"fixed32,13,opt,name=tschchartaxismajorgridlineopacity" json:"tschchartaxismajorgridlineopacity,omitempty"`
	Tschchartaxismajorgridlineshadow         *ShadowArchive               `protobuf:"bytes,14,opt,name=tschchartaxismajorgridlineshadow" json:"tschchartaxismajorgridlineshadow,omitempty"`
	Tschchartaxismajorgridlinestroke         *StrokeArchive               `protobuf:"bytes,15,opt,name=tschchartaxismajorgridlinestroke" json:"tschchartaxismajorgridlinestroke,omitempty"`
	Tschchartaxisminorgridlineopacity        *float32                     `protobuf:"fixed32,16,opt,name=tschchartaxisminorgridlineopacity" json:"tschchartaxisminorgridlineopacity,omitempty"`
	Tschchartaxisminorgridlineshadow         *ShadowArchive               `protobuf:"bytes,17,opt,name=tschchartaxisminorgridlineshadow" json:"tschchartaxisminorgridlineshadow,omitempty"`
	Tschchartaxisminorgridlinestroke         *StrokeArchive               `protobuf:"bytes,18,opt,name=tschchartaxisminorgridlinestroke" json:"tschchartaxisminorgridlinestroke,omitempty"`
	Tschchartaxisnumberformat                *TSKFormatStructArchive      `protobuf:"bytes,19,opt,name=tschchartaxisnumberformat" json:"tschchartaxisnumberformat,omitempty"`
	Tschchartaxisnumberformattype            *int32                       `protobuf:"varint,20,opt,name=tschchartaxisnumberformattype" json:"tschchartaxisnumberformattype,omitempty"`
	Tschchartaxisnumberofdecades             *int32                       `protobuf:"varint,21,opt,name=tschchartaxisnumberofdecades" json:"tschchartaxisnumberofdecades,omitempty"`
	Tschchartaxisnumberofmajorgridlines      *int32                       `protobuf:"varint,22,opt,name=tschchartaxisnumberofmajorgridlines" json:"tschchartaxisnumberofmajorgridlines,omitempty"`
	Tschchartaxisnumberofminorgridlines      *int32                       `protobuf:"varint,23,opt,name=tschchartaxisnumberofminorgridlines" json:"tschchartaxisnumberofminorgridlines,omitempty"`
	Tschchartaxisplottoedges                 *bool                        `protobuf:"varint,24,opt,name=tschchartaxisplottoedges" json:"tschchartaxisplottoedges,omitempty"`
	Tschchartaxisscale                       *int32                       `protobuf:"varint,25,opt,name=tschchartaxisscale" json:"tschchartaxisscale,omitempty"`
	Tschchartaxisshowaxis                    *bool                        `protobuf:"varint,26,opt,name=tschchartaxisshowaxis" json:"tschchartaxisshowaxis,omitempty"`
	Tschchartaxisshowextensionlines          *bool                        `protobuf:"varint,27,opt,name=tschchartaxisshowextensionlines" json:"tschchartaxisshowextensionlines,omitempty"`
	Tschchartaxisshowgridlinetickmarks       *bool                        `protobuf:"varint,28,opt,name=tschchartaxisshowgridlinetickmarks" json:"tschchartaxisshowgridlinetickmarks,omitempty"`
	Tschchartaxisshowlabels                  *bool                        `protobuf:"varint,29,opt,name=tschchartaxisshowlabels" json:"tschchartaxisshowlabels,omitempty"`
	Tschchartaxisshowlastlabel               *bool                        `protobuf:"varint,30,opt,name=tschchartaxisshowlastlabel" json:"tschchartaxisshowlastlabel,omitempty"`
	Tschchartaxisshowmajorgridlines          *bool                        `protobuf:"varint,31,opt,name=tschchartaxisshowmajorgridlines" json:"tschchartaxisshowmajorgridlines,omitempty"`
	Tschchartaxisshowmajortickmarks          *bool                        `protobuf:"varint,32,opt,name=tschchartaxisshowmajortickmarks" json:"tschchartaxisshowmajortickmarks,omitempty"`
	Tschchartaxisshowminimumlabel            *bool                        `protobuf:"varint,33,opt,name=tschchartaxisshowminimumlabel" json:"tschchartaxisshowminimumlabel,omitempty"`
	Tschchartaxisshowminorgridlines          *bool                        `protobuf:"varint,34,opt,name=tschchartaxisshowminorgridlines" json:"tschchartaxisshowminorgridlines,omitempty"`
	Tschchartaxisshowminortickmarks          *bool                        `protobuf:"varint,35,opt,name=tschchartaxisshowminortickmarks" json:"tschchartaxisshowminortickmarks,omitempty"`
	Tschchartaxisshowserieslabels            *bool                        `protobuf:"varint,36,opt,name=tschchartaxisshowserieslabels" json:"tschchartaxisshowserieslabels,omitempty"`
	Tschchartaxisshowtitle                   *bool                        `protobuf:"varint,37,opt,name=tschchartaxisshowtitle" json:"tschchartaxisshowtitle,omitempty"`
	Tschchartaxistickmarklocation            *int32                       `protobuf:"varint,38,opt,name=tschchartaxistickmarklocation" json:"tschchartaxistickmarklocation,omitempty"`
	Tschchartaxistitle                       *string                      `protobuf:"bytes,39,opt,name=tschchartaxistitle" json:"tschchartaxistitle,omitempty"`
	Tschchartaxistitleparagraphstyleindex    *int32                       `protobuf:"varint,40,opt,name=tschchartaxistitleparagraphstyleindex" json:"tschchartaxistitleparagraphstyleindex,omitempty"`
	Tschchartaxisusermax                     *ChartsNSNumberDoubleArchive `protobuf:"bytes,41,opt,name=tschchartaxisusermax" json:"tschchartaxisusermax,omitempty"`
	Tschchartaxisusermin                     *ChartsNSNumberDoubleArchive `protobuf:"bytes,42,opt,name=tschchartaxisusermin" json:"tschchartaxisusermin,omitempty"`
	Tschchartaxisverticalspacing             *int32                       `protobuf:"varint,43,opt,name=tschchartaxisverticalspacing" json:"tschchartaxisverticalspacing,omitempty"`
}

func (x *ChartAxisGenericPropertyMapArchive) Reset() {
	*x = ChartAxisGenericPropertyMapArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHArchives_GEN_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartAxisGenericPropertyMapArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartAxisGenericPropertyMapArchive) ProtoMessage() {}

func (x *ChartAxisGenericPropertyMapArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHArchives_GEN_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartAxisGenericPropertyMapArchive.ProtoReflect.Descriptor instead.
func (*ChartAxisGenericPropertyMapArchive) Descriptor() ([]byte, []int) {
	return file_TSCHArchives_GEN_proto_rawDescGZIP(), []int{12}
}

func (x *ChartAxisGenericPropertyMapArchive) GetTschchartaxis1_0Dateformat() *TSKFormatStructArchive {
	if x != nil {
		return x.Tschchartaxis1_0Dateformat
	}
	return nil
}

func (x *ChartAxisGenericPropertyMapArchive) GetTschchartaxis1_0Numberformat() *TSKFormatStructArchive {
	if x != nil {
		return x.Tschchartaxis1_0Numberformat
	}
	return nil
}

func (x *ChartAxisGenericPropertyMapArchive) GetTschchartaxis3Dgridlineopacity() float32 {
	if x != nil && x.Tschchartaxis3Dgridlineopacity != nil {
		return *x.Tschchartaxis3Dgridlineopacity
	}
	return 0
}

func (x *ChartAxisGenericPropertyMapArchive) GetTschchartaxis3Dgridlinestroke() *StrokeArchive {
	if x != nil {
		return x.Tschchartaxis3Dgridlinestroke
	}
	return nil
}

func (x *ChartAxisGenericPropertyMapArchive) GetTschchartaxis3Dlabelposition() int32 {
	if x != nil && x.Tschchartaxis3Dlabelposition != nil {
		return *x.Tschchartaxis3Dlabelposition
	}
	return 0
}

func (x *ChartAxisGenericPropertyMapArchive) GetTschchartaxisdateformat() *TSKFormatStructArchive {
	if x != nil {
		return x.Tschchartaxisdateformat
	}
	return nil
}

func (x *ChartAxisGenericPropertyMapArchive) GetTschchartaxisdurationformat() *TSKFormatStructArchive {
	if x != nil {
		return x.Tschchartaxisdurationformat
	}
	return nil
}

func (x *ChartAxisGenericPropertyMapArchive) GetTschchartaxishorizontalspacing() int32 {
	if x != nil && x.Tschchartaxishorizontalspacing != nil {
		return *x.Tschchartaxishorizontalspacing
	}
	return 0
}

func (x *ChartAxisGenericPropertyMapArchive) GetTschchartaxislabelanglebaselinedirection() int32 {
	if x != nil && x.Tschchartaxislabelanglebaselinedirection != nil {
		return *x.Tschchartaxislabelanglebaselinedirection
	}
	return 0
}

func (x *ChartAxisGenericPropertyMapArchive) GetTschchartaxislabelexplosion() float32 {
	if x != nil && x.Tschchartaxislabelexplosion != nil {
		return *x.Tschchartaxislabelexplosion
	}
	return 0
}

func (x *ChartAxisGenericPropertyMapArchive) GetTschchartaxislabelparagraphstyleindex() int32 {
	if x != nil && x.Tschchartaxislabelparagraphstyleindex != nil {
		return *x.Tschchartaxislabelparagraphstyleindex
	}
	return 0
}

func (x *ChartAxisGenericPropertyMapArchive) GetTschchartaxislabelsorientation() float32 {
	if x != nil && x.Tschchartaxislabelsorientation != nil {
		return *x.Tschchartaxislabelsorientation
	}
	return 0
}

func (x *ChartAxisGenericPropertyMapArchive) GetTschchartaxismajorgridlineopacity() float32 {
	if x != nil && x.Tschchartaxismajorgridlineopacity != nil {
		return *x.Tschchartaxismajorgridlineopacity
	}
	return 0
}

func (x *ChartAxisGenericPropertyMapArchive) GetTschchartaxismajorgridlineshadow() *ShadowArchive {
	if x != nil {
		return x.Tschchartaxismajorgridlineshadow
	}
	return nil
}

func (x *ChartAxisGenericPropertyMapArchive) GetTschchartaxismajorgridlinestroke() *StrokeArchive {
	if x != nil {
		return x.Tschchartaxismajorgridlinestroke
	}
	return nil
}

func (x *ChartAxisGenericPropertyMapArchive) GetTschchartaxisminorgridlineopacity() float32 {
	if x != nil && x.Tschchartaxisminorgridlineopacity != nil {
		return *x.Tschchartaxisminorgridlineopacity
	}
	return 0
}

func (x *ChartAxisGenericPropertyMapArchive) GetTschchartaxisminorgridlineshadow() *ShadowArchive {
	if x != nil {
		return x.Tschchartaxisminorgridlineshadow
	}
	return nil
}

func (x *ChartAxisGenericPropertyMapArchive) GetTschchartaxisminorgridlinestroke() *StrokeArchive {
	if x != nil {
		return x.Tschchartaxisminorgridlinestroke
	}
	return nil
}

func (x *ChartAxisGenericPropertyMapArchive) GetTschchartaxisnumberformat() *TSKFormatStructArchive {
	if x != nil {
		return x.Tschchartaxisnumberformat
	}
	return nil
}

func (x *ChartAxisGenericPropertyMapArchive) GetTschchartaxisnumberformattype() int32 {
	if x != nil && x.Tschchartaxisnumberformattype != nil {
		return *x.Tschchartaxisnumberformattype
	}
	return 0
}

func (x *ChartAxisGenericPropertyMapArchive) GetTschchartaxisnumberofdecades() int32 {
	if x != nil && x.Tschchartaxisnumberofdecades != nil {
		return *x.Tschchartaxisnumberofdecades
	}
	return 0
}

func (x *ChartAxisGenericPropertyMapArchive) GetTschchartaxisnumberofmajorgridlines() int32 {
	if x != nil && x.Tschchartaxisnumberofmajorgridlines != nil {
		return *x.Tschchartaxisnumberofmajorgridlines
	}
	return 0
}

func (x *ChartAxisGenericPropertyMapArchive) GetTschchartaxisnumberofminorgridlines() int32 {
	if x != nil && x.Tschchartaxisnumberofminorgridlines != nil {
		return *x.Tschchartaxisnumberofminorgridlines
	}
	return 0
}

func (x *ChartAxisGenericPropertyMapArchive) GetTschchartaxisplottoedges() bool {
	if x != nil && x.Tschchartaxisplottoedges != nil {
		return *x.Tschchartaxisplottoedges
	}
	return false
}

func (x *ChartAxisGenericPropertyMapArchive) GetTschchartaxisscale() int32 {
	if x != nil && x.Tschchartaxisscale != nil {
		return *x.Tschchartaxisscale
	}
	return 0
}

func (x *ChartAxisGenericPropertyMapArchive) GetTschchartaxisshowaxis() bool {
	if x != nil && x.Tschchartaxisshowaxis != nil {
		return *x.Tschchartaxisshowaxis
	}
	return false
}

func (x *ChartAxisGenericPropertyMapArchive) GetTschchartaxisshowextensionlines() bool {
	if x != nil && x.Tschchartaxisshowextensionlines != nil {
		return *x.Tschchartaxisshowextensionlines
	}
	return false
}

func (x *ChartAxisGenericPropertyMapArchive) GetTschchartaxisshowgridlinetickmarks() bool {
	if x != nil && x.Tschchartaxisshowgridlinetickmarks != nil {
		return *x.Tschchartaxisshowgridlinetickmarks
	}
	return false
}

func (x *ChartAxisGenericPropertyMapArchive) GetTschchartaxisshowlabels() bool {
	if x != nil && x.Tschchartaxisshowlabels != nil {
		return *x.Tschchartaxisshowlabels
	}
	return false
}

func (x *ChartAxisGenericPropertyMapArchive) GetTschchartaxisshowlastlabel() bool {
	if x != nil && x.Tschchartaxisshowlastlabel != nil {
		return *x.Tschchartaxisshowlastlabel
	}
	return false
}

func (x *ChartAxisGenericPropertyMapArchive) GetTschchartaxisshowmajorgridlines() bool {
	if x != nil && x.Tschchartaxisshowmajorgridlines != nil {
		return *x.Tschchartaxisshowmajorgridlines
	}
	return false
}

func (x *ChartAxisGenericPropertyMapArchive) GetTschchartaxisshowmajortickmarks() bool {
	if x != nil && x.Tschchartaxisshowmajortickmarks != nil {
		return *x.Tschchartaxisshowmajortickmarks
	}
	return false
}

func (x *ChartAxisGenericPropertyMapArchive) GetTschchartaxisshowminimumlabel() bool {
	if x != nil && x.Tschchartaxisshowminimumlabel != nil {
		return *x.Tschchartaxisshowminimumlabel
	}
	return false
}

func (x *ChartAxisGenericPropertyMapArchive) GetTschchartaxisshowminorgridlines() bool {
	if x != nil && x.Tschchartaxisshowminorgridlines != nil {
		return *x.Tschchartaxisshowminorgridlines
	}
	return false
}

func (x *ChartAxisGenericPropertyMapArchive) GetTschchartaxisshowminortickmarks() bool {
	if x != nil && x.Tschchartaxisshowminortickmarks != nil {
		return *x.Tschchartaxisshowminortickmarks
	}
	return false
}

func (x *ChartAxisGenericPropertyMapArchive) GetTschchartaxisshowserieslabels() bool {
	if x != nil && x.Tschchartaxisshowserieslabels != nil {
		return *x.Tschchartaxisshowserieslabels
	}
	return false
}

func (x *ChartAxisGenericPropertyMapArchive) GetTschchartaxisshowtitle() bool {
	if x != nil && x.Tschchartaxisshowtitle != nil {
		return *x.Tschchartaxisshowtitle
	}
	return false
}

func (x *ChartAxisGenericPropertyMapArchive) GetTschchartaxistickmarklocation() int32 {
	if x != nil && x.Tschchartaxistickmarklocation != nil {
		return *x.Tschchartaxistickmarklocation
	}
	return 0
}

func (x *ChartAxisGenericPropertyMapArchive) GetTschchartaxistitle() string {
	if x != nil && x.Tschchartaxistitle != nil {
		return *x.Tschchartaxistitle
	}
	return ""
}

func (x *ChartAxisGenericPropertyMapArchive) GetTschchartaxistitleparagraphstyleindex() int32 {
	if x != nil && x.Tschchartaxistitleparagraphstyleindex != nil {
		return *x.Tschchartaxistitleparagraphstyleindex
	}
	return 0
}

func (x *ChartAxisGenericPropertyMapArchive) GetTschchartaxisusermax() *ChartsNSNumberDoubleArchive {
	if x != nil {
		return x.Tschchartaxisusermax
	}
	return nil
}

func (x *ChartAxisGenericPropertyMapArchive) GetTschchartaxisusermin() *ChartsNSNumberDoubleArchive {
	if x != nil {
		return x.Tschchartaxisusermin
	}
	return nil
}

func (x *ChartAxisGenericPropertyMapArchive) GetTschchartaxisverticalspacing() int32 {
	if x != nil && x.Tschchartaxisverticalspacing != nil {
		return *x.Tschchartaxisverticalspacing
	}
	return 0
}

type ChartSeriesGenericPropertyMapArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tschchartseries1_0Dateformat                        *TSKFormatStructArchive               `protobuf:"bytes,1,opt,name=tschchartseries1_0dateformat,json=tschchartseries10dateformat" json:"tschchartseries1_0dateformat,omitempty"`
	Tschchartseries1_0Numberformat                      *TSKFormatStructArchive               `protobuf:"bytes,2,opt,name=tschchartseries1_0numberformat,json=tschchartseries10numberformat" json:"tschchartseries1_0numberformat,omitempty"`
	Tschchartseries2_3Labelexplosion                    *float32                              `protobuf:"fixed32,3,opt,name=tschchartseries2_3labelexplosion,json=tschchartseries23labelexplosion" json:"tschchartseries2_3labelexplosion,omitempty"`
	Tschchartseriesadjustmentscale                      *float32                              `protobuf:"fixed32,4,opt,name=tschchartseriesadjustmentscale" json:"tschchartseriesadjustmentscale,omitempty"`
	Tschchartseriescalloutlineendlineend                *LineEndArchive                       `protobuf:"bytes,5,opt,name=tschchartseriescalloutlineendlineend" json:"tschchartseriescalloutlineendlineend,omitempty"`
	Tschchartseriescalloutlinestartlineend              *LineEndArchive                       `protobuf:"bytes,6,opt,name=tschchartseriescalloutlinestartlineend" json:"tschchartseriescalloutlinestartlineend,omitempty"`
	Tschchartseriescalloutlinestrokestyle               *StrokeArchive                        `protobuf:"bytes,7,opt,name=tschchartseriescalloutlinestrokestyle" json:"tschchartseriescalloutlinestrokestyle,omitempty"`
	Tschchartseriesdateformat                           *TSKFormatStructArchive               `protobuf:"bytes,8,opt,name=tschchartseriesdateformat" json:"tschchartseriesdateformat,omitempty"`
	Tschchartseriesdurationformat                       *TSKFormatStructArchive               `protobuf:"bytes,9,opt,name=tschchartseriesdurationformat" json:"tschchartseriesdurationformat,omitempty"`
	Tschchartseriesenablecalloutline                    *int32                                `protobuf:"varint,10,opt,name=tschchartseriesenablecalloutline" json:"tschchartseriesenablecalloutline,omitempty"`
	Tschchartserieserrorbarcustomnegativedata           *ChartsNSArrayOfNSNumberDoubleArchive `protobuf:"bytes,11,opt,name=tschchartserieserrorbarcustomnegativedata" json:"tschchartserieserrorbarcustomnegativedata,omitempty"`
	Tschchartserieserrorbarcustomnegativedatascatterx   *ChartsNSArrayOfNSNumberDoubleArchive `protobuf:"bytes,12,opt,name=tschchartserieserrorbarcustomnegativedatascatterx" json:"tschchartserieserrorbarcustomnegativedatascatterx,omitempty"`
	Tschchartserieserrorbarcustompositivedata           *ChartsNSArrayOfNSNumberDoubleArchive `protobuf:"bytes,13,opt,name=tschchartserieserrorbarcustompositivedata" json:"tschchartserieserrorbarcustompositivedata,omitempty"`
	Tschchartserieserrorbarcustompositivedatascatterx   *ChartsNSArrayOfNSNumberDoubleArchive `protobuf:"bytes,14,opt,name=tschchartserieserrorbarcustompositivedatascatterx" json:"tschchartserieserrorbarcustompositivedatascatterx,omitempty"`
	Tschchartserieserrorbarfixedvalue                   *float32                              `protobuf:"fixed32,15,opt,name=tschchartserieserrorbarfixedvalue" json:"tschchartserieserrorbarfixedvalue,omitempty"`
	Tschchartserieserrorbarfixedvaluescatterx           *float32                              `protobuf:"fixed32,16,opt,name=tschchartserieserrorbarfixedvaluescatterx" json:"tschchartserieserrorbarfixedvaluescatterx,omitempty"`
	Tschchartserieserrorbarlineend                      *LineEndArchive                       `protobuf:"bytes,17,opt,name=tschchartserieserrorbarlineend" json:"tschchartserieserrorbarlineend,omitempty"`
	Tschchartserieserrorbarlineendscatterx              *LineEndArchive                       `protobuf:"bytes,18,opt,name=tschchartserieserrorbarlineendscatterx" json:"tschchartserieserrorbarlineendscatterx,omitempty"`
	Tschchartserieserrorbarpercentvalue                 *float32                              `protobuf:"fixed32,19,opt,name=tschchartserieserrorbarpercentvalue" json:"tschchartserieserrorbarpercentvalue,omitempty"`
	Tschchartserieserrorbarpercentvaluescatterx         *float32                              `protobuf:"fixed32,20,opt,name=tschchartserieserrorbarpercentvaluescatterx" json:"tschchartserieserrorbarpercentvaluescatterx,omitempty"`
	Tschchartserieserrorbarsetting                      *int32                                `protobuf:"varint,21,opt,name=tschchartserieserrorbarsetting" json:"tschchartserieserrorbarsetting,omitempty"`
	Tschchartserieserrorbarsettingscatterx              *int32                                `protobuf:"varint,22,opt,name=tschchartserieserrorbarsettingscatterx" json:"tschchartserieserrorbarsettingscatterx,omitempty"`
	Tschchartserieserrorbarshadow                       *ShadowArchive                        `protobuf:"bytes,23,opt,name=tschchartserieserrorbarshadow" json:"tschchartserieserrorbarshadow,omitempty"`
	Tschchartserieserrorbarspacing                      *int32                                `protobuf:"varint,24,opt,name=tschchartserieserrorbarspacing" json:"tschchartserieserrorbarspacing,omitempty"`
	Tschchartserieserrorbarspacingscatterx              *int32                                `protobuf:"varint,25,opt,name=tschchartserieserrorbarspacingscatterx" json:"tschchartserieserrorbarspacingscatterx,omitempty"`
	Tschchartserieserrorbarstddevvalue                  *float32                              `protobuf:"fixed32,26,opt,name=tschchartserieserrorbarstddevvalue" json:"tschchartserieserrorbarstddevvalue,omitempty"`
	Tschchartserieserrorbarstddevvaluescatterx          *float32                              `protobuf:"fixed32,27,opt,name=tschchartserieserrorbarstddevvaluescatterx" json:"tschchartserieserrorbarstddevvaluescatterx,omitempty"`
	Tschchartserieserrorbarstroke                       *StrokeArchive                        `protobuf:"bytes,28,opt,name=tschchartserieserrorbarstroke" json:"tschchartserieserrorbarstroke,omitempty"`
	Tschchartserieserrorbarstrokescatterx               *StrokeArchive                        `protobuf:"bytes,29,opt,name=tschchartserieserrorbarstrokescatterx" json:"tschchartserieserrorbarstrokescatterx,omitempty"`
	Tschchartserieserrorbartype                         *int32                                `protobuf:"varint,30,opt,name=tschchartserieserrorbartype" json:"tschchartserieserrorbartype,omitempty"`
	Tschchartserieserrorbartypescatterx                 *int32                                `protobuf:"varint,31,opt,name=tschchartserieserrorbartypescatterx" json:"tschchartserieserrorbartypescatterx,omitempty"`
	Tschchartseriesfill                                 *FillArchive                          `protobuf:"bytes,32,opt,name=tschchartseriesfill" json:"tschchartseriesfill,omitempty"`
	Tschchartseriesfilluseseriesstrokealphamultiplier   *float32                              `protobuf:"fixed32,33,opt,name=tschchartseriesfilluseseriesstrokealphamultiplier" json:"tschchartseriesfilluseseriesstrokealphamultiplier,omitempty"`
	Tschchartseriesfilluseseriesstroke                  *bool                                 `protobuf:"varint,34,opt,name=tschchartseriesfilluseseriesstroke" json:"tschchartseriesfilluseseriesstroke,omitempty"`
	Tschchartserieslabelexplosion                       *float32                              `protobuf:"fixed32,35,opt,name=tschchartserieslabelexplosion" json:"tschchartserieslabelexplosion,omitempty"`
	Tschchartserieslabelparagraphstyleindex             *int32                                `protobuf:"varint,36,opt,name=tschchartserieslabelparagraphstyleindex" json:"tschchartserieslabelparagraphstyleindex,omitempty"`
	Tschchartserieslinetype                             *int32                                `protobuf:"varint,37,opt,name=tschchartserieslinetype" json:"tschchartserieslinetype,omitempty"`
	Tschchartseriesnumberformat                         *TSKFormatStructArchive               `protobuf:"bytes,38,opt,name=tschchartseriesnumberformat" json:"tschchartseriesnumberformat,omitempty"`
	Tschchartseriesnumberformattype                     *int32                                `protobuf:"varint,39,opt,name=tschchartseriesnumberformattype" json:"tschchartseriesnumberformattype,omitempty"`
	Tschchartseriesopacity                              *float32                              `protobuf:"fixed32,40,opt,name=tschchartseriesopacity" json:"tschchartseriesopacity,omitempty"`
	Tschchartseriesoutsidelabelparagraphstyleindex      *int32                                `protobuf:"varint,41,opt,name=tschchartseriesoutsidelabelparagraphstyleindex" json:"tschchartseriesoutsidelabelparagraphstyleindex,omitempty"`
	Tschchartseriespercentnumberformat                  *TSKFormatStructArchive               `protobuf:"bytes,42,opt,name=tschchartseriespercentnumberformat" json:"tschchartseriespercentnumberformat,omitempty"`
	Tschchartseriesseriestype                           *int32                                `protobuf:"varint,43,opt,name=tschchartseriesseriestype" json:"tschchartseriesseriestype,omitempty"`
	Tschchartseriesshadow                               *ShadowArchive                        `protobuf:"bytes,44,opt,name=tschchartseriesshadow" json:"tschchartseriesshadow,omitempty"`
	Tschchartseriesshowerrorbar                         *bool                                 `protobuf:"varint,45,opt,name=tschchartseriesshowerrorbar" json:"tschchartseriesshowerrorbar,omitempty"`
	Tschchartseriesshowerrorbarscatterx                 *bool                                 `protobuf:"varint,46,opt,name=tschchartseriesshowerrorbarscatterx" json:"tschchartseriesshowerrorbarscatterx,omitempty"`
	Tschchartseriesshowlabelsinfront                    *bool                                 `protobuf:"varint,47,opt,name=tschchartseriesshowlabelsinfront" json:"tschchartseriesshowlabelsinfront,omitempty"`
	Tschchartseriesshowline                             *bool                                 `protobuf:"varint,48,opt,name=tschchartseriesshowline" json:"tschchartseriesshowline,omitempty"`
	Tschchartseriesshownegativedata                     *bool                                 `protobuf:"varint,49,opt,name=tschchartseriesshownegativedata" json:"tschchartseriesshownegativedata,omitempty"`
	Tschchartseriesshowserieslabels                     *bool                                 `protobuf:"varint,50,opt,name=tschchartseriesshowserieslabels" json:"tschchartseriesshowserieslabels,omitempty"`
	Tschchartseriesshowsymbol                           *bool                                 `protobuf:"varint,51,opt,name=tschchartseriesshowsymbol" json:"tschchartseriesshowsymbol,omitempty"`
	Tschchartseriesshowtrendline                        *bool                                 `protobuf:"varint,52,opt,name=tschchartseriesshowtrendline" json:"tschchartseriesshowtrendline,omitempty"`
	Tschchartseriesshowvaluelabels                      *bool                                 `protobuf:"varint,53,opt,name=tschchartseriesshowvaluelabels" json:"tschchartseriesshowvaluelabels,omitempty"`
	Tschchartseriessizedimension                        *int32                                `protobuf:"varint,54,opt,name=tschchartseriessizedimension" json:"tschchartseriessizedimension,omitempty"`
	Tschchartseriesstacklabels                          *bool                                 `protobuf:"varint,55,opt,name=tschchartseriesstacklabels" json:"tschchartseriesstacklabels,omitempty"`
	Tschchartseriesstroke                               *StrokeArchive                        `protobuf:"bytes,56,opt,name=tschchartseriesstroke" json:"tschchartseriesstroke,omitempty"`
	Tschchartseriessymbolfill                           *FillArchive                          `protobuf:"bytes,57,opt,name=tschchartseriessymbolfill" json:"tschchartseriessymbolfill,omitempty"`
	Tschchartseriessymbolfilluseseriesfill              *bool                                 `protobuf:"varint,58,opt,name=tschchartseriessymbolfilluseseriesfill" json:"tschchartseriessymbolfilluseseriesfill,omitempty"`
	Tschchartseriessymbolfilluseseriesstroke            *bool                                 `protobuf:"varint,59,opt,name=tschchartseriessymbolfilluseseriesstroke" json:"tschchartseriessymbolfilluseseriesstroke,omitempty"`
	Tschchartseriessymbolsize                           *float32                              `protobuf:"fixed32,60,opt,name=tschchartseriessymbolsize" json:"tschchartseriessymbolsize,omitempty"`
	Tschchartseriessymbolstroke                         *StrokeArchive                        `protobuf:"bytes,61,opt,name=tschchartseriessymbolstroke" json:"tschchartseriessymbolstroke,omitempty"`
	Tschchartseriessymboltype                           *int32                                `protobuf:"varint,62,opt,name=tschchartseriessymboltype" json:"tschchartseriessymboltype,omitempty"`
	Tschchartseriestrendlineequationoffsetx             *float32                              `protobuf:"fixed32,63,opt,name=tschchartseriestrendlineequationoffsetx" json:"tschchartseriestrendlineequationoffsetx,omitempty"`
	Tschchartseriestrendlineequationoffsety             *float32                              `protobuf:"fixed32,64,opt,name=tschchartseriestrendlineequationoffsety" json:"tschchartseriestrendlineequationoffsety,omitempty"`
	Tschchartseriestrendlinelabelstring                 *string                               `protobuf:"bytes,65,opt,name=tschchartseriestrendlinelabelstring" json:"tschchartseriestrendlinelabelstring,omitempty"`
	Tschchartseriestrendlineorder                       *int32                                `protobuf:"varint,66,opt,name=tschchartseriestrendlineorder" json:"tschchartseriestrendlineorder,omitempty"`
	Tschchartseriestrendlineperiod                      *int32                                `protobuf:"varint,67,opt,name=tschchartseriestrendlineperiod" json:"tschchartseriestrendlineperiod,omitempty"`
	Tschchartseriestrendlinersquaredoffsetx             *float32                              `protobuf:"fixed32,68,opt,name=tschchartseriestrendlinersquaredoffsetx" json:"tschchartseriestrendlinersquaredoffsetx,omitempty"`
	Tschchartseriestrendlinersquaredoffsety             *float32                              `protobuf:"fixed32,69,opt,name=tschchartseriestrendlinersquaredoffsety" json:"tschchartseriestrendlinersquaredoffsety,omitempty"`
	Tschchartseriestrendlineshadow                      *ShadowArchive                        `protobuf:"bytes,70,opt,name=tschchartseriestrendlineshadow" json:"tschchartseriestrendlineshadow,omitempty"`
	Tschchartseriestrendlineshowequation                *bool                                 `protobuf:"varint,71,opt,name=tschchartseriestrendlineshowequation" json:"tschchartseriestrendlineshowequation,omitempty"`
	Tschchartseriestrendlineshowlabel                   *bool                                 `protobuf:"varint,72,opt,name=tschchartseriestrendlineshowlabel" json:"tschchartseriestrendlineshowlabel,omitempty"`
	Tschchartseriestrendlineshowr2Value                 *bool                                 `protobuf:"varint,73,opt,name=tschchartseriestrendlineshowr2value" json:"tschchartseriestrendlineshowr2value,omitempty"`
	Tschchartseriestrendlinestroke                      *StrokeArchive                        `protobuf:"bytes,74,opt,name=tschchartseriestrendlinestroke" json:"tschchartseriestrendlinestroke,omitempty"`
	Tschchartseriestrendlinetype                        *int32                                `protobuf:"varint,75,opt,name=tschchartseriestrendlinetype" json:"tschchartseriestrendlinetype,omitempty"`
	Tschchartseriestrendlineequationopacity             *float32                              `protobuf:"fixed32,76,opt,name=tschchartseriestrendlineequationopacity" json:"tschchartseriestrendlineequationopacity,omitempty"`
	Tschchartseriestrendlineequationparagraphstyleindex *int32                                `protobuf:"varint,77,opt,name=tschchartseriestrendlineequationparagraphstyleindex" json:"tschchartseriestrendlineequationparagraphstyleindex,omitempty"`
	Tschchartseriestrendlinersquaredopacity             *float32                              `protobuf:"fixed32,78,opt,name=tschchartseriestrendlinersquaredopacity" json:"tschchartseriestrendlinersquaredopacity,omitempty"`
	Tschchartseriestrendlinersquaredparagraphstyleindex *int32                                `protobuf:"varint,79,opt,name=tschchartseriestrendlinersquaredparagraphstyleindex" json:"tschchartseriestrendlinersquaredparagraphstyleindex,omitempty"`
	Tschchartseriesvaluelabelposition                   *int32                                `protobuf:"varint,80,opt,name=tschchartseriesvaluelabelposition" json:"tschchartseriesvaluelabelposition,omitempty"`
	Tschchartseriesvaluelabelspacing                    *int32                                `protobuf:"varint,81,opt,name=tschchartseriesvaluelabelspacing" json:"tschchartseriesvaluelabelspacing,omitempty"`
	Tschchartseriesvaluelabelsaxis                      *int32                                `protobuf:"varint,82,opt,name=tschchartseriesvaluelabelsaxis" json:"tschchartseriesvaluelabelsaxis,omitempty"`
	Tschchartserieswedgeexplosion                       *float32                              `protobuf:"fixed32,83,opt,name=tschchartserieswedgeexplosion" json:"tschchartserieswedgeexplosion,omitempty"`
	Tschchartseriesyaxisordinal                         *int32                                `protobuf:"varint,84,opt,name=tschchartseriesyaxisordinal" json:"tschchartseriesyaxisordinal,omitempty"`
}

func (x *ChartSeriesGenericPropertyMapArchive) Reset() {
	*x = ChartSeriesGenericPropertyMapArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHArchives_GEN_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartSeriesGenericPropertyMapArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartSeriesGenericPropertyMapArchive) ProtoMessage() {}

func (x *ChartSeriesGenericPropertyMapArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHArchives_GEN_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartSeriesGenericPropertyMapArchive.ProtoReflect.Descriptor instead.
func (*ChartSeriesGenericPropertyMapArchive) Descriptor() ([]byte, []int) {
	return file_TSCHArchives_GEN_proto_rawDescGZIP(), []int{13}
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartseries1_0Dateformat() *TSKFormatStructArchive {
	if x != nil {
		return x.Tschchartseries1_0Dateformat
	}
	return nil
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartseries1_0Numberformat() *TSKFormatStructArchive {
	if x != nil {
		return x.Tschchartseries1_0Numberformat
	}
	return nil
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartseries2_3Labelexplosion() float32 {
	if x != nil && x.Tschchartseries2_3Labelexplosion != nil {
		return *x.Tschchartseries2_3Labelexplosion
	}
	return 0
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartseriesadjustmentscale() float32 {
	if x != nil && x.Tschchartseriesadjustmentscale != nil {
		return *x.Tschchartseriesadjustmentscale
	}
	return 0
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartseriescalloutlineendlineend() *LineEndArchive {
	if x != nil {
		return x.Tschchartseriescalloutlineendlineend
	}
	return nil
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartseriescalloutlinestartlineend() *LineEndArchive {
	if x != nil {
		return x.Tschchartseriescalloutlinestartlineend
	}
	return nil
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartseriescalloutlinestrokestyle() *StrokeArchive {
	if x != nil {
		return x.Tschchartseriescalloutlinestrokestyle
	}
	return nil
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartseriesdateformat() *TSKFormatStructArchive {
	if x != nil {
		return x.Tschchartseriesdateformat
	}
	return nil
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartseriesdurationformat() *TSKFormatStructArchive {
	if x != nil {
		return x.Tschchartseriesdurationformat
	}
	return nil
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartseriesenablecalloutline() int32 {
	if x != nil && x.Tschchartseriesenablecalloutline != nil {
		return *x.Tschchartseriesenablecalloutline
	}
	return 0
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartserieserrorbarcustomnegativedata() *ChartsNSArrayOfNSNumberDoubleArchive {
	if x != nil {
		return x.Tschchartserieserrorbarcustomnegativedata
	}
	return nil
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartserieserrorbarcustomnegativedatascatterx() *ChartsNSArrayOfNSNumberDoubleArchive {
	if x != nil {
		return x.Tschchartserieserrorbarcustomnegativedatascatterx
	}
	return nil
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartserieserrorbarcustompositivedata() *ChartsNSArrayOfNSNumberDoubleArchive {
	if x != nil {
		return x.Tschchartserieserrorbarcustompositivedata
	}
	return nil
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartserieserrorbarcustompositivedatascatterx() *ChartsNSArrayOfNSNumberDoubleArchive {
	if x != nil {
		return x.Tschchartserieserrorbarcustompositivedatascatterx
	}
	return nil
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartserieserrorbarfixedvalue() float32 {
	if x != nil && x.Tschchartserieserrorbarfixedvalue != nil {
		return *x.Tschchartserieserrorbarfixedvalue
	}
	return 0
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartserieserrorbarfixedvaluescatterx() float32 {
	if x != nil && x.Tschchartserieserrorbarfixedvaluescatterx != nil {
		return *x.Tschchartserieserrorbarfixedvaluescatterx
	}
	return 0
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartserieserrorbarlineend() *LineEndArchive {
	if x != nil {
		return x.Tschchartserieserrorbarlineend
	}
	return nil
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartserieserrorbarlineendscatterx() *LineEndArchive {
	if x != nil {
		return x.Tschchartserieserrorbarlineendscatterx
	}
	return nil
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartserieserrorbarpercentvalue() float32 {
	if x != nil && x.Tschchartserieserrorbarpercentvalue != nil {
		return *x.Tschchartserieserrorbarpercentvalue
	}
	return 0
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartserieserrorbarpercentvaluescatterx() float32 {
	if x != nil && x.Tschchartserieserrorbarpercentvaluescatterx != nil {
		return *x.Tschchartserieserrorbarpercentvaluescatterx
	}
	return 0
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartserieserrorbarsetting() int32 {
	if x != nil && x.Tschchartserieserrorbarsetting != nil {
		return *x.Tschchartserieserrorbarsetting
	}
	return 0
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartserieserrorbarsettingscatterx() int32 {
	if x != nil && x.Tschchartserieserrorbarsettingscatterx != nil {
		return *x.Tschchartserieserrorbarsettingscatterx
	}
	return 0
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartserieserrorbarshadow() *ShadowArchive {
	if x != nil {
		return x.Tschchartserieserrorbarshadow
	}
	return nil
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartserieserrorbarspacing() int32 {
	if x != nil && x.Tschchartserieserrorbarspacing != nil {
		return *x.Tschchartserieserrorbarspacing
	}
	return 0
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartserieserrorbarspacingscatterx() int32 {
	if x != nil && x.Tschchartserieserrorbarspacingscatterx != nil {
		return *x.Tschchartserieserrorbarspacingscatterx
	}
	return 0
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartserieserrorbarstddevvalue() float32 {
	if x != nil && x.Tschchartserieserrorbarstddevvalue != nil {
		return *x.Tschchartserieserrorbarstddevvalue
	}
	return 0
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartserieserrorbarstddevvaluescatterx() float32 {
	if x != nil && x.Tschchartserieserrorbarstddevvaluescatterx != nil {
		return *x.Tschchartserieserrorbarstddevvaluescatterx
	}
	return 0
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartserieserrorbarstroke() *StrokeArchive {
	if x != nil {
		return x.Tschchartserieserrorbarstroke
	}
	return nil
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartserieserrorbarstrokescatterx() *StrokeArchive {
	if x != nil {
		return x.Tschchartserieserrorbarstrokescatterx
	}
	return nil
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartserieserrorbartype() int32 {
	if x != nil && x.Tschchartserieserrorbartype != nil {
		return *x.Tschchartserieserrorbartype
	}
	return 0
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartserieserrorbartypescatterx() int32 {
	if x != nil && x.Tschchartserieserrorbartypescatterx != nil {
		return *x.Tschchartserieserrorbartypescatterx
	}
	return 0
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartseriesfill() *FillArchive {
	if x != nil {
		return x.Tschchartseriesfill
	}
	return nil
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartseriesfilluseseriesstrokealphamultiplier() float32 {
	if x != nil && x.Tschchartseriesfilluseseriesstrokealphamultiplier != nil {
		return *x.Tschchartseriesfilluseseriesstrokealphamultiplier
	}
	return 0
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartseriesfilluseseriesstroke() bool {
	if x != nil && x.Tschchartseriesfilluseseriesstroke != nil {
		return *x.Tschchartseriesfilluseseriesstroke
	}
	return false
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartserieslabelexplosion() float32 {
	if x != nil && x.Tschchartserieslabelexplosion != nil {
		return *x.Tschchartserieslabelexplosion
	}
	return 0
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartserieslabelparagraphstyleindex() int32 {
	if x != nil && x.Tschchartserieslabelparagraphstyleindex != nil {
		return *x.Tschchartserieslabelparagraphstyleindex
	}
	return 0
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartserieslinetype() int32 {
	if x != nil && x.Tschchartserieslinetype != nil {
		return *x.Tschchartserieslinetype
	}
	return 0
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartseriesnumberformat() *TSKFormatStructArchive {
	if x != nil {
		return x.Tschchartseriesnumberformat
	}
	return nil
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartseriesnumberformattype() int32 {
	if x != nil && x.Tschchartseriesnumberformattype != nil {
		return *x.Tschchartseriesnumberformattype
	}
	return 0
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartseriesopacity() float32 {
	if x != nil && x.Tschchartseriesopacity != nil {
		return *x.Tschchartseriesopacity
	}
	return 0
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartseriesoutsidelabelparagraphstyleindex() int32 {
	if x != nil && x.Tschchartseriesoutsidelabelparagraphstyleindex != nil {
		return *x.Tschchartseriesoutsidelabelparagraphstyleindex
	}
	return 0
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartseriespercentnumberformat() *TSKFormatStructArchive {
	if x != nil {
		return x.Tschchartseriespercentnumberformat
	}
	return nil
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartseriesseriestype() int32 {
	if x != nil && x.Tschchartseriesseriestype != nil {
		return *x.Tschchartseriesseriestype
	}
	return 0
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartseriesshadow() *ShadowArchive {
	if x != nil {
		return x.Tschchartseriesshadow
	}
	return nil
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartseriesshowerrorbar() bool {
	if x != nil && x.Tschchartseriesshowerrorbar != nil {
		return *x.Tschchartseriesshowerrorbar
	}
	return false
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartseriesshowerrorbarscatterx() bool {
	if x != nil && x.Tschchartseriesshowerrorbarscatterx != nil {
		return *x.Tschchartseriesshowerrorbarscatterx
	}
	return false
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartseriesshowlabelsinfront() bool {
	if x != nil && x.Tschchartseriesshowlabelsinfront != nil {
		return *x.Tschchartseriesshowlabelsinfront
	}
	return false
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartseriesshowline() bool {
	if x != nil && x.Tschchartseriesshowline != nil {
		return *x.Tschchartseriesshowline
	}
	return false
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartseriesshownegativedata() bool {
	if x != nil && x.Tschchartseriesshownegativedata != nil {
		return *x.Tschchartseriesshownegativedata
	}
	return false
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartseriesshowserieslabels() bool {
	if x != nil && x.Tschchartseriesshowserieslabels != nil {
		return *x.Tschchartseriesshowserieslabels
	}
	return false
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartseriesshowsymbol() bool {
	if x != nil && x.Tschchartseriesshowsymbol != nil {
		return *x.Tschchartseriesshowsymbol
	}
	return false
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartseriesshowtrendline() bool {
	if x != nil && x.Tschchartseriesshowtrendline != nil {
		return *x.Tschchartseriesshowtrendline
	}
	return false
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartseriesshowvaluelabels() bool {
	if x != nil && x.Tschchartseriesshowvaluelabels != nil {
		return *x.Tschchartseriesshowvaluelabels
	}
	return false
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartseriessizedimension() int32 {
	if x != nil && x.Tschchartseriessizedimension != nil {
		return *x.Tschchartseriessizedimension
	}
	return 0
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartseriesstacklabels() bool {
	if x != nil && x.Tschchartseriesstacklabels != nil {
		return *x.Tschchartseriesstacklabels
	}
	return false
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartseriesstroke() *StrokeArchive {
	if x != nil {
		return x.Tschchartseriesstroke
	}
	return nil
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartseriessymbolfill() *FillArchive {
	if x != nil {
		return x.Tschchartseriessymbolfill
	}
	return nil
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartseriessymbolfilluseseriesfill() bool {
	if x != nil && x.Tschchartseriessymbolfilluseseriesfill != nil {
		return *x.Tschchartseriessymbolfilluseseriesfill
	}
	return false
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartseriessymbolfilluseseriesstroke() bool {
	if x != nil && x.Tschchartseriessymbolfilluseseriesstroke != nil {
		return *x.Tschchartseriessymbolfilluseseriesstroke
	}
	return false
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartseriessymbolsize() float32 {
	if x != nil && x.Tschchartseriessymbolsize != nil {
		return *x.Tschchartseriessymbolsize
	}
	return 0
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartseriessymbolstroke() *StrokeArchive {
	if x != nil {
		return x.Tschchartseriessymbolstroke
	}
	return nil
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartseriessymboltype() int32 {
	if x != nil && x.Tschchartseriessymboltype != nil {
		return *x.Tschchartseriessymboltype
	}
	return 0
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartseriestrendlineequationoffsetx() float32 {
	if x != nil && x.Tschchartseriestrendlineequationoffsetx != nil {
		return *x.Tschchartseriestrendlineequationoffsetx
	}
	return 0
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartseriestrendlineequationoffsety() float32 {
	if x != nil && x.Tschchartseriestrendlineequationoffsety != nil {
		return *x.Tschchartseriestrendlineequationoffsety
	}
	return 0
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartseriestrendlinelabelstring() string {
	if x != nil && x.Tschchartseriestrendlinelabelstring != nil {
		return *x.Tschchartseriestrendlinelabelstring
	}
	return ""
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartseriestrendlineorder() int32 {
	if x != nil && x.Tschchartseriestrendlineorder != nil {
		return *x.Tschchartseriestrendlineorder
	}
	return 0
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartseriestrendlineperiod() int32 {
	if x != nil && x.Tschchartseriestrendlineperiod != nil {
		return *x.Tschchartseriestrendlineperiod
	}
	return 0
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartseriestrendlinersquaredoffsetx() float32 {
	if x != nil && x.Tschchartseriestrendlinersquaredoffsetx != nil {
		return *x.Tschchartseriestrendlinersquaredoffsetx
	}
	return 0
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartseriestrendlinersquaredoffsety() float32 {
	if x != nil && x.Tschchartseriestrendlinersquaredoffsety != nil {
		return *x.Tschchartseriestrendlinersquaredoffsety
	}
	return 0
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartseriestrendlineshadow() *ShadowArchive {
	if x != nil {
		return x.Tschchartseriestrendlineshadow
	}
	return nil
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartseriestrendlineshowequation() bool {
	if x != nil && x.Tschchartseriestrendlineshowequation != nil {
		return *x.Tschchartseriestrendlineshowequation
	}
	return false
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartseriestrendlineshowlabel() bool {
	if x != nil && x.Tschchartseriestrendlineshowlabel != nil {
		return *x.Tschchartseriestrendlineshowlabel
	}
	return false
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartseriestrendlineshowr2Value() bool {
	if x != nil && x.Tschchartseriestrendlineshowr2Value != nil {
		return *x.Tschchartseriestrendlineshowr2Value
	}
	return false
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartseriestrendlinestroke() *StrokeArchive {
	if x != nil {
		return x.Tschchartseriestrendlinestroke
	}
	return nil
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartseriestrendlinetype() int32 {
	if x != nil && x.Tschchartseriestrendlinetype != nil {
		return *x.Tschchartseriestrendlinetype
	}
	return 0
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartseriestrendlineequationopacity() float32 {
	if x != nil && x.Tschchartseriestrendlineequationopacity != nil {
		return *x.Tschchartseriestrendlineequationopacity
	}
	return 0
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartseriestrendlineequationparagraphstyleindex() int32 {
	if x != nil && x.Tschchartseriestrendlineequationparagraphstyleindex != nil {
		return *x.Tschchartseriestrendlineequationparagraphstyleindex
	}
	return 0
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartseriestrendlinersquaredopacity() float32 {
	if x != nil && x.Tschchartseriestrendlinersquaredopacity != nil {
		return *x.Tschchartseriestrendlinersquaredopacity
	}
	return 0
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartseriestrendlinersquaredparagraphstyleindex() int32 {
	if x != nil && x.Tschchartseriestrendlinersquaredparagraphstyleindex != nil {
		return *x.Tschchartseriestrendlinersquaredparagraphstyleindex
	}
	return 0
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartseriesvaluelabelposition() int32 {
	if x != nil && x.Tschchartseriesvaluelabelposition != nil {
		return *x.Tschchartseriesvaluelabelposition
	}
	return 0
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartseriesvaluelabelspacing() int32 {
	if x != nil && x.Tschchartseriesvaluelabelspacing != nil {
		return *x.Tschchartseriesvaluelabelspacing
	}
	return 0
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartseriesvaluelabelsaxis() int32 {
	if x != nil && x.Tschchartseriesvaluelabelsaxis != nil {
		return *x.Tschchartseriesvaluelabelsaxis
	}
	return 0
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartserieswedgeexplosion() float32 {
	if x != nil && x.Tschchartserieswedgeexplosion != nil {
		return *x.Tschchartserieswedgeexplosion
	}
	return 0
}

func (x *ChartSeriesGenericPropertyMapArchive) GetTschchartseriesyaxisordinal() int32 {
	if x != nil && x.Tschchartseriesyaxisordinal != nil {
		return *x.Tschchartseriesyaxisordinal
	}
	return 0
}

type ReferenceLineGenericPropertyMapArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tschreferencelinecustomvalue                   *ChartsNSNumberDoubleArchive `protobuf:"bytes,1,opt,name=tschreferencelinecustomvalue" json:"tschreferencelinecustomvalue,omitempty"`
	Tschreferencelinelabel                         *string                      `protobuf:"bytes,2,opt,name=tschreferencelinelabel" json:"tschreferencelinelabel,omitempty"`
	Tschreferencelinelabelparagraphstyleindex      *int32                       `protobuf:"varint,3,opt,name=tschreferencelinelabelparagraphstyleindex" json:"tschreferencelinelabelparagraphstyleindex,omitempty"`
	Tschreferencelineshadow                        *ShadowArchive               `protobuf:"bytes,4,opt,name=tschreferencelineshadow" json:"tschreferencelineshadow,omitempty"`
	Tschreferencelineshowlabel                     *bool                        `protobuf:"varint,5,opt,name=tschreferencelineshowlabel" json:"tschreferencelineshowlabel,omitempty"`
	Tschreferencelineshowline                      *bool                        `protobuf:"varint,6,opt,name=tschreferencelineshowline" json:"tschreferencelineshowline,omitempty"`
	Tschreferencelineshowvaluelabel                *bool                        `protobuf:"varint,7,opt,name=tschreferencelineshowvaluelabel" json:"tschreferencelineshowvaluelabel,omitempty"`
	Tschreferencelinestroke                        *StrokeArchive               `protobuf:"bytes,8,opt,name=tschreferencelinestroke" json:"tschreferencelinestroke,omitempty"`
	Tschreferencelinetype                          *int32                       `protobuf:"varint,9,opt,name=tschreferencelinetype" json:"tschreferencelinetype,omitempty"`
	Tschreferencelinevaluelabelparagraphstyleindex *int32                       `protobuf:"varint,10,opt,name=tschreferencelinevaluelabelparagraphstyleindex" json:"tschreferencelinevaluelabelparagraphstyleindex,omitempty"`
}

func (x *ReferenceLineGenericPropertyMapArchive) Reset() {
	*x = ReferenceLineGenericPropertyMapArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSCHArchives_GEN_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferenceLineGenericPropertyMapArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferenceLineGenericPropertyMapArchive) ProtoMessage() {}

func (x *ReferenceLineGenericPropertyMapArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSCHArchives_GEN_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferenceLineGenericPropertyMapArchive.ProtoReflect.Descriptor instead.
func (*ReferenceLineGenericPropertyMapArchive) Descriptor() ([]byte, []int) {
	return file_TSCHArchives_GEN_proto_rawDescGZIP(), []int{14}
}

func (x *ReferenceLineGenericPropertyMapArchive) GetTschreferencelinecustomvalue() *ChartsNSNumberDoubleArchive {
	if x != nil {
		return x.Tschreferencelinecustomvalue
	}
	return nil
}

func (x *ReferenceLineGenericPropertyMapArchive) GetTschreferencelinelabel() string {
	if x != nil && x.Tschreferencelinelabel != nil {
		return *x.Tschreferencelinelabel
	}
	return ""
}

func (x *ReferenceLineGenericPropertyMapArchive) GetTschreferencelinelabelparagraphstyleindex() int32 {
	if x != nil && x.Tschreferencelinelabelparagraphstyleindex != nil {
		return *x.Tschreferencelinelabelparagraphstyleindex
	}
	return 0
}

func (x *ReferenceLineGenericPropertyMapArchive) GetTschreferencelineshadow() *ShadowArchive {
	if x != nil {
		return x.Tschreferencelineshadow
	}
	return nil
}

func (x *ReferenceLineGenericPropertyMapArchive) GetTschreferencelineshowlabel() bool {
	if x != nil && x.Tschreferencelineshowlabel != nil {
		return *x.Tschreferencelineshowlabel
	}
	return false
}

func (x *ReferenceLineGenericPropertyMapArchive) GetTschreferencelineshowline() bool {
	if x != nil && x.Tschreferencelineshowline != nil {
		return *x.Tschreferencelineshowline
	}
	return false
}

func (x *ReferenceLineGenericPropertyMapArchive) GetTschreferencelineshowvaluelabel() bool {
	if x != nil && x.Tschreferencelineshowvaluelabel != nil {
		return *x.Tschreferencelineshowvaluelabel
	}
	return false
}

func (x *ReferenceLineGenericPropertyMapArchive) GetTschreferencelinestroke() *StrokeArchive {
	if x != nil {
		return x.Tschreferencelinestroke
	}
	return nil
}

func (x *ReferenceLineGenericPropertyMapArchive) GetTschreferencelinetype() int32 {
	if x != nil && x.Tschreferencelinetype != nil {
		return *x.Tschreferencelinetype
	}
	return 0
}

func (x *ReferenceLineGenericPropertyMapArchive) GetTschreferencelinevaluelabelparagraphstyleindex() int32 {
	if x != nil && x.Tschreferencelinevaluelabelparagraphstyleindex != nil {
		return *x.Tschreferencelinevaluelabelparagraphstyleindex
	}
	return 0
}

var file_TSCHArchives_GEN_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*TSCHCommonChartStyleArchive)(nil),
		ExtensionType: (*TSCHCommonChartStyleArchive)(nil),
		Field:         10000,
		Name:          "TSCH.Generated.TSCHGenChartStyleArchive.current",
		Tag:           "bytes,10000,opt,name=current",
		Filename:      "TSCHArchives_GEN.proto",
	},
	{
		ExtendedType:  (*TSCHCommonChartNonStyleArchive)(nil),
		ExtensionType: (*TSCHCommonChartNonStyleArchive)(nil),
		Field:         10000,
		Name:          "TSCH.Generated.ChartNonStyleArchive.current",
		Tag:           "bytes,10000,opt,name=current",
		Filename:      "TSCHArchives_GEN.proto",
	},
	{
		ExtendedType:  (*TSCHCommonLegendStyleArchive)(nil),
		ExtensionType: (*TSCHCommonLegendStyleArchive)(nil),
		Field:         10000,
		Name:          "TSCH.Generated.LegendStyleArchive.current",
		Tag:           "bytes,10000,opt,name=current",
		Filename:      "TSCHArchives_GEN.proto",
	},
	{
		ExtendedType:  (*TSCHCommonLegendNonStyleArchive)(nil),
		ExtensionType: (*TSCHCommonLegendNonStyleArchive)(nil),
		Field:         10000,
		Name:          "TSCH.Generated.LegendNonStyleArchive.current",
		Tag:           "bytes,10000,opt,name=current",
		Filename:      "TSCHArchives_GEN.proto",
	},
	{
		ExtendedType:  (*TSCHCommonChartAxisStyleArchive)(nil),
		ExtensionType: (*TSCHCommonChartAxisStyleArchive)(nil),
		Field:         10000,
		Name:          "TSCH.Generated.ChartAxisStyleArchive.current",
		Tag:           "bytes,10000,opt,name=current",
		Filename:      "TSCHArchives_GEN.proto",
	},
	{
		ExtendedType:  (*TSCHCommonChartAxisNonStyleArchive)(nil),
		ExtensionType: (*TSCHCommonChartAxisNonStyleArchive)(nil),
		Field:         10000,
		Name:          "TSCH.Generated.ChartAxisNonStyleArchive.current",
		Tag:           "bytes,10000,opt,name=current",
		Filename:      "TSCHArchives_GEN.proto",
	},
	{
		ExtendedType:  (*TSCHCommonChartSeriesStyleArchive)(nil),
		ExtensionType: (*TSCHCommonChartSeriesStyleArchive)(nil),
		Field:         10000,
		Name:          "TSCH.Generated.ChartSeriesStyleArchive.current",
		Tag:           "bytes,10000,opt,name=current",
		Filename:      "TSCHArchives_GEN.proto",
	},
	{
		ExtendedType:  (*TSCHCommonChartSeriesNonStyleArchive)(nil),
		ExtensionType: (*TSCHCommonChartSeriesNonStyleArchive)(nil),
		Field:         10000,
		Name:          "TSCH.Generated.ChartSeriesNonStyleArchive.current",
		Tag:           "bytes,10000,opt,name=current",
		Filename:      "TSCHArchives_GEN.proto",
	},
	{
		ExtendedType:  (*TSCHCommonReferenceLineStyleArchive)(nil),
		ExtensionType: (*TSCHCommonReferenceLineStyleArchive)(nil),
		Field:         10000,
		Name:          "TSCH.Generated.ReferenceLineStyleArchive.current",
		Tag:           "bytes,10000,opt,name=current",
		Filename:      "TSCHArchives_GEN.proto",
	},
	{
		ExtendedType:  (*TSCHCommonReferenceLineNonStyleArchive)(nil),
		ExtensionType: (*TSCHCommonReferenceLineNonStyleArchive)(nil),
		Field:         10000,
		Name:          "TSCH.Generated.ReferenceLineNonStyleArchive.current",
		Tag:           "bytes,10000,opt,name=current",
		Filename:      "TSCHArchives_GEN.proto",
	},
}

// Extension fields to TSCHCommonChartStyleArchive.
var (
	// optional TSCH.TSCHCommonChartStyleArchive current = 10000;
	E_TSCHGenChartStyleArchive_Current = &file_TSCHArchives_GEN_proto_extTypes[0]
)

// Extension fields to TSCHCommonChartNonStyleArchive.
var (
	// optional TSCH.TSCHCommonChartNonStyleArchive current = 10000;
	E_ChartNonStyleArchive_Current = &file_TSCHArchives_GEN_proto_extTypes[1]
)

// Extension fields to TSCHCommonLegendStyleArchive.
var (
	// optional TSCH.TSCHCommonLegendStyleArchive current = 10000;
	E_LegendStyleArchive_Current = &file_TSCHArchives_GEN_proto_extTypes[2]
)

// Extension fields to TSCHCommonLegendNonStyleArchive.
var (
	// optional TSCH.TSCHCommonLegendNonStyleArchive current = 10000;
	E_LegendNonStyleArchive_Current = &file_TSCHArchives_GEN_proto_extTypes[3]
)

// Extension fields to TSCHCommonChartAxisStyleArchive.
var (
	// optional TSCH.TSCHCommonChartAxisStyleArchive current = 10000;
	E_ChartAxisStyleArchive_Current = &file_TSCHArchives_GEN_proto_extTypes[4]
)

// Extension fields to TSCHCommonChartAxisNonStyleArchive.
var (
	// optional TSCH.TSCHCommonChartAxisNonStyleArchive current = 10000;
	E_ChartAxisNonStyleArchive_Current = &file_TSCHArchives_GEN_proto_extTypes[5]
)

// Extension fields to TSCHCommonChartSeriesStyleArchive.
var (
	// optional TSCH.TSCHCommonChartSeriesStyleArchive current = 10000;
	E_ChartSeriesStyleArchive_Current = &file_TSCHArchives_GEN_proto_extTypes[6]
)

// Extension fields to TSCHCommonChartSeriesNonStyleArchive.
var (
	// optional TSCH.TSCHCommonChartSeriesNonStyleArchive current = 10000;
	E_ChartSeriesNonStyleArchive_Current = &file_TSCHArchives_GEN_proto_extTypes[7]
)

// Extension fields to TSCHCommonReferenceLineStyleArchive.
var (
	// optional TSCH.TSCHCommonReferenceLineStyleArchive current = 10000;
	E_ReferenceLineStyleArchive_Current = &file_TSCHArchives_GEN_proto_extTypes[8]
)

// Extension fields to TSCHCommonReferenceLineNonStyleArchive.
var (
	// optional TSCH.TSCHCommonReferenceLineNonStyleArchive current = 10000;
	E_ReferenceLineNonStyleArchive_Current = &file_TSCHArchives_GEN_proto_extTypes[9]
)

var File_TSCHArchives_GEN_proto protoreflect.FileDescriptor

var file_TSCHArchives_GEN_proto_rawDesc = []byte{
	0x0a, 0x16, 0x54, 0x53, 0x43, 0x48, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x5f, 0x47,
	0x45, 0x4e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x1a, 0x11, 0x54, 0x53, 0x50, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x54, 0x53, 0x4b,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11,
	0x54, 0x53, 0x44, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x19, 0x54, 0x53, 0x43, 0x48, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x5f,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x54, 0x53,
	0x43, 0x48, 0x33, 0x44, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xa5, 0x13, 0x0a, 0x18, 0x54, 0x53, 0x43, 0x48, 0x47, 0x65, 0x6e, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12,
	0x4e, 0x0a, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x33, 0x64, 0x63, 0x68, 0x61, 0x72, 0x74, 0x6f, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x22, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x33, 0x64, 0x63, 0x68, 0x61, 0x72, 0x74, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12,
	0x73, 0x0a, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f,
	0x61, 0x72, 0x65, 0x61, 0x33, 0x64, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x54, 0x53,
	0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x61,
	0x72, 0x65, 0x61, 0x33, 0x64, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x12, 0x71, 0x0a, 0x21, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x61, 0x72, 0x33, 0x64, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69,
	0x6e, 0x67, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x4c, 0x69,
	0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x21, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69,
	0x6e, 0x66, 0x6f, 0x62, 0x61, 0x72, 0x33, 0x64, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x77, 0x0a, 0x24, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x33, 0x64,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x33, 0x44, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x24, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x33,
	0x64, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x12, 0x79, 0x0a, 0x25, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66,
	0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x33, 0x64, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69,
	0x6e, 0x67, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x4c, 0x69,
	0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x25, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69,
	0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x33, 0x64, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x69, 0x6e, 0x67, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x73, 0x0a, 0x22, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x6c, 0x69, 0x6e, 0x65,
	0x33, 0x64, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x22, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x6c, 0x69, 0x6e, 0x65, 0x33,
	0x64, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x12, 0x71, 0x0a, 0x21, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66,
	0x6f, 0x70, 0x69, 0x65, 0x33, 0x64, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x54, 0x53,
	0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x21, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x70,
	0x69, 0x65, 0x33, 0x64, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x12, 0x60, 0x0a, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x62, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x66, 0x69, 0x6c, 0x6c, 0x12, 0x66, 0x0a, 0x24, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x62, 0x61, 0x63,
	0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x24, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x62, 0x61, 0x63,
	0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x4c, 0x0a,
	0x21, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x6f, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x21, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x62, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x5e, 0x0a, 0x20, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x68, 0x61, 0x64,
	0x6f, 0x77, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x20, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x62,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x12, 0x5e, 0x0a, 0x20, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f,
	0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x20, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x62,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x4c, 0x0a, 0x21, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x21, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x6d, 0x62,
	0x69, 0x6e, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x6e, 0x0a, 0x32, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x72, 0x61,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x32, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73,
	0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x68, 0x0a, 0x26, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x67, 0x72, 0x69, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x66,
	0x69, 0x6c, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54, 0x53, 0x44, 0x2e,
	0x46, 0x69, 0x6c, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x26, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x67, 0x72, 0x69, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x66,
	0x69, 0x6c, 0x6c, 0x12, 0x5c, 0x0a, 0x29, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x67, 0x72, 0x69, 0x64, 0x62,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x29, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x67, 0x72, 0x69, 0x64,
	0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x12, 0x48, 0x0a, 0x1f, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e,
	0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x62, 0x61,
	0x72, 0x67, 0x61, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1f, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x62, 0x61, 0x72, 0x67, 0x61, 0x70, 0x12, 0x48, 0x0a, 0x1f, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x74, 0x67, 0x61, 0x70, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x1f, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69,
	0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x65, 0x74, 0x67, 0x61, 0x70, 0x12, 0x62, 0x0a, 0x2c, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x72, 0x61, 0x64,
	0x61, 0x72, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x63, 0x75, 0x72, 0x76, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x2c, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x72, 0x61, 0x64, 0x61, 0x72, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x67, 0x72, 0x69, 0x64,
	0x6c, 0x69, 0x6e, 0x65, 0x63, 0x75, 0x72, 0x76, 0x65, 0x12, 0x64, 0x0a, 0x2d, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x7b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x2d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x63, 0x6f, 0x72,
	0x6e, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x12,
	0x58, 0x0a, 0x27, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x63, 0x6f,
	0x72, 0x6e, 0x65, 0x72, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x27, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x63, 0x6f, 0x72,
	0x6e, 0x65, 0x72, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x46, 0x0a, 0x1e, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x73, 0x68, 0x6f, 0x77, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x68, 0x6f, 0x77, 0x62, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x52, 0x0a, 0x1e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e,
	0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x1e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x62, 0x0a, 0x2c, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x2c, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73,
	0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x32, 0x5f, 0x0a, 0x07, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x54, 0x53, 0x43, 0x48,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x18, 0x90, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x9f, 0x16, 0x0a, 0x14, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x4e, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x12, 0x46, 0x0a, 0x1e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x33, 0x64, 0x62, 0x61, 0x72,
	0x73, 0x68, 0x61, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1e, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x33, 0x64, 0x62, 0x61, 0x72, 0x73, 0x68, 0x61, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x20, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x33, 0x64, 0x62, 0x65, 0x76, 0x65, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x20, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x33, 0x64, 0x62, 0x65, 0x76,
	0x65, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x26, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x33,
	0x64, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x74, 0x64, 0x65, 0x70, 0x74, 0x68, 0x67, 0x61,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x26, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x33, 0x64, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x74, 0x64, 0x65, 0x70, 0x74, 0x68, 0x67, 0x61, 0x70, 0x12,
	0x62, 0x0a, 0x1e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x33, 0x64, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x1e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e,
	0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x33, 0x64, 0x72, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x18, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x69, 0x6e, 0x66, 0x6f, 0x61, 0x72, 0x65, 0x61, 0x33, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x33, 0x44, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x18, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f,
	0x61, 0x72, 0x65, 0x61, 0x33, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x54, 0x0a, 0x17, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x61, 0x72, 0x33,
	0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54,
	0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x17, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x61, 0x72, 0x33, 0x64, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x12, 0x5a, 0x0a, 0x1a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e,
	0x66, 0x6f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x33, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x33, 0x44, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x1a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x33, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x5c, 0x0a,
	0x1b, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x33, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x33,
	0x44, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1b,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x33, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x56, 0x0a, 0x18, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x6c, 0x69, 0x6e, 0x65,
	0x33, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x18, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x6c, 0x69, 0x6e, 0x65, 0x33, 0x64, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x12, 0x54, 0x0a, 0x17, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x69, 0x6e, 0x66, 0x6f, 0x70, 0x69, 0x65, 0x33, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72,
	0x74, 0x33, 0x44, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x17, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x70,
	0x69, 0x65, 0x33, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x62, 0x0a, 0x1e, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x33, 0x64, 0x76, 0x69, 0x65, 0x77, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x33, 0x44,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1e, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x33, 0x64, 0x76, 0x69, 0x65, 0x77, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x4a, 0x0a,
	0x20, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x61, 0x72,
	0x65, 0x61, 0x63, 0x61, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x70, 0x20, 0x01, 0x28, 0x05, 0x52, 0x20, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x61, 0x72, 0x65, 0x61, 0x63, 0x61, 0x6c, 0x6c, 0x6f, 0x75,
	0x74, 0x6c, 0x69, 0x6e, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x1f, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x61, 0x72, 0x63, 0x61, 0x6c,
	0x6c, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x71, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x1f, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66,
	0x6f, 0x62, 0x61, 0x72, 0x63, 0x61, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x4e, 0x0a, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x69, 0x6e, 0x66, 0x6f, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x6f, 0x75,
	0x74, 0x6c, 0x69, 0x6e, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x72, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x75,
	0x62, 0x62, 0x6c, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x50, 0x0a, 0x23, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x63, 0x61, 0x6c, 0x6c, 0x6f,
	0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x77, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x23, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x63, 0x61, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x20, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x6c, 0x69, 0x6e, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x6f, 0x75,
	0x74, 0x6c, 0x69, 0x6e, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x73, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x20, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x6c, 0x69,
	0x6e, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x48, 0x0a, 0x1f, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e,
	0x66, 0x6f, 0x70, 0x69, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1f, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x70, 0x69, 0x65, 0x63, 0x61, 0x6c, 0x6c,
	0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x50, 0x0a, 0x23, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x63, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x63, 0x61, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x74, 0x20, 0x01, 0x28, 0x05, 0x52, 0x23, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x63, 0x61,
	0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x58, 0x0a,
	0x27, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x65, 0x64, 0x61, 0x72, 0x65, 0x61, 0x63, 0x61, 0x6c, 0x6c, 0x6f, 0x75, 0x74,
	0x6c, 0x69, 0x6e, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x75, 0x20, 0x01, 0x28, 0x05, 0x52, 0x27,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x65, 0x64, 0x61, 0x72, 0x65, 0x61, 0x63, 0x61, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x6c,
	0x69, 0x6e, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x56, 0x0a, 0x26, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x62,
	0x61, 0x72, 0x63, 0x61, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x76, 0x20, 0x01, 0x28, 0x05, 0x52, 0x26, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x62, 0x61, 0x72,
	0x63, 0x61, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x78, 0x0a, 0x37, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x79, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x37, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x65, 0x6e, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x12, 0x6c, 0x0a, 0x31, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x65, 0x64, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x78,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x31, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69,
	0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x63, 0x6f, 0x72, 0x6e, 0x65,
	0x72, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x58, 0x0a, 0x27, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x27, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x60, 0x0a, 0x2b, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e,
	0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x64, 0x6f, 0x6e, 0x75, 0x74, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x61, 0x74, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x2b, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x64, 0x6f, 0x6e, 0x75,
	0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x61, 0x74, 0x63, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x1f, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1f, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x5a, 0x0a,
	0x28, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x28, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4c, 0x0a, 0x21, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x70, 0x69, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x21, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69,
	0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x70, 0x69, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x50, 0x0a, 0x23, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x72,
	0x61, 0x64, 0x61, 0x72, 0x73, 0x74, 0x61, 0x72, 0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x23, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69,
	0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x72, 0x61, 0x64, 0x61, 0x72, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x46, 0x0a, 0x1e, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x73, 0x68, 0x6f, 0x77, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x68, 0x6f, 0x77, 0x6c, 0x65, 0x67, 0x65, 0x6e,
	0x64, 0x12, 0x44, 0x0a, 0x1d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e,
	0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x68, 0x6f, 0x77, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x68,
	0x6f, 0x77, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x4e, 0x0a, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73,
	0x6b, 0x69, 0x70, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x61, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e,
	0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x6b, 0x69, 0x70, 0x68, 0x69, 0x64,
	0x64, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3c, 0x0a, 0x19, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x32, 0x65, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0x24, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x4e, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x18, 0x90, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x54, 0x53, 0x43, 0x48, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x4e, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x22, 0xa7, 0x04, 0x0a,
	0x12, 0x4c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x12, 0x50, 0x0a, 0x1a, 0x74, 0x73, 0x63, 0x68, 0x6c, 0x65, 0x67, 0x65, 0x6e,
	0x64, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x66, 0x69, 0x6c,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x46, 0x69,
	0x6c, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1a, 0x74, 0x73, 0x63, 0x68, 0x6c,
	0x65, 0x67, 0x65, 0x6e, 0x64, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x66, 0x69, 0x6c, 0x6c, 0x12, 0x66, 0x0a, 0x2e, 0x74, 0x73, 0x63, 0x68, 0x6c, 0x65, 0x67,
	0x65, 0x6e, 0x64, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x2e, 0x74,
	0x73, 0x63, 0x68, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x44, 0x0a,
	0x1d, 0x74, 0x73, 0x63, 0x68, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x1d, 0x74, 0x73, 0x63, 0x68, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x6f, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x12, 0x56, 0x0a, 0x1c, 0x74, 0x73, 0x63, 0x68, 0x6c, 0x65, 0x67, 0x65, 0x6e,
	0x64, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x68, 0x61,
	0x64, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e,
	0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1c, 0x74,
	0x73, 0x63, 0x68, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x12, 0x56, 0x0a, 0x1c, 0x74,
	0x73, 0x63, 0x68, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1c, 0x74, 0x73, 0x63, 0x68, 0x6c, 0x65, 0x67, 0x65, 0x6e,
	0x64, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x74, 0x72,
	0x6f, 0x6b, 0x65, 0x32, 0x61, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x22,
	0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x4c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x18, 0x90, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x54, 0x53, 0x43, 0x48,
	0x2e, 0x54, 0x53, 0x43, 0x48, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4c, 0x65, 0x67, 0x65, 0x6e,
	0x64, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x07, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x80, 0x01, 0x0a, 0x15, 0x4c, 0x65, 0x67, 0x65, 0x6e,
	0x64, 0x4e, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x32, 0x67, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x2e, 0x54, 0x53,
	0x43, 0x48, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4c, 0x65, 0x67,
	0x65, 0x6e, 0x64, 0x4e, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x18, 0x90, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x54, 0x53, 0x43, 0x48,
	0x2e, 0x54, 0x53, 0x43, 0x48, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4c, 0x65, 0x67, 0x65, 0x6e,
	0x64, 0x4e, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x22, 0xb0, 0x22, 0x0a, 0x15, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x41, 0x78, 0x69, 0x73, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x12, 0x56, 0x0a, 0x26, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x61, 0x78, 0x69, 0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x33, 0x64, 0x67, 0x72,
	0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x26, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78,
	0x69, 0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x33, 0x64, 0x67, 0x72, 0x69, 0x64,
	0x6c, 0x69, 0x6e, 0x65, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x50, 0x0a, 0x23, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x33, 0x64, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x6f, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x23, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x33, 0x64, 0x67, 0x72,
	0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x68, 0x0a,
	0x25, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x33, 0x64, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54,
	0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x25, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x33, 0x64, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x62, 0x0a, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x33, 0x64, 0x67,
	0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x33, 0x64, 0x67, 0x72, 0x69,
	0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x56, 0x0a, 0x26, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x73, 0x70,
	0x61, 0x63, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x26, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x73, 0x70, 0x61, 0x63,
	0x69, 0x6e, 0x67, 0x12, 0x68, 0x0a, 0x2f, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x61, 0x78, 0x69, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x61, 0x6e, 0x67, 0x6c, 0x65, 0x62, 0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x2f, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x62, 0x61, 0x73, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x64, 0x0a,
	0x2d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x2d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61,
	0x78, 0x69, 0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x62, 0x0a, 0x2c, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x61, 0x78, 0x69, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x2c, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x5e, 0x0a, 0x2a, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x2a, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x56, 0x0a, 0x26, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x26, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x54, 0x0a, 0x25, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x6f, 0x72, 0x69,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x25,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x23, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x23, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69,
	0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x6f, 0x72, 0x69, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x29, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x6f, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x29, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x6f, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x56, 0x0a, 0x26, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x6a, 0x6f, 0x72,
	0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x26, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x61, 0x78, 0x69, 0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x67, 0x72,
	0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x6e, 0x0a,
	0x28, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x67, 0x72, 0x69, 0x64, 0x6c,
	0x69, 0x6e, 0x65, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x28, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78,
	0x69, 0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x67,
	0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x12, 0x68, 0x0a,
	0x25, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54,
	0x53, 0x44, 0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x25, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x12, 0x6e, 0x0a, 0x28, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x74, 0x72,
	0x6f, 0x6b, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e,
	0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x28, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x68, 0x0a, 0x25, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61, 0x6a,
	0x6f, 0x72, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72,
	0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x25, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x61,
	0x6a, 0x6f, 0x72, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x6b,
	0x65, 0x12, 0x5c, 0x0a, 0x29, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78,
	0x69, 0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x67,
	0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x29, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61,
	0x78, 0x69, 0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x6d, 0x69, 0x6e, 0x6f, 0x72,
	0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12,
	0x56, 0x0a, 0x26, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69,
	0x6e, 0x65, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x26, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x6e, 0x0a, 0x28, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x68, 0x61,
	0x64, 0x6f, 0x77, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e,
	0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x28, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x12, 0x68, 0x0a, 0x25, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x69, 0x6e,
	0x6f, 0x72, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x68, 0x61,
	0x64, 0x6f, 0x77, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x25, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x69,
	0x6e, 0x6f, 0x72, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x68, 0x61, 0x64, 0x6f,
	0x77, 0x12, 0x6e, 0x0a, 0x28, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78,
	0x69, 0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x67,
	0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x28, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x6d, 0x69,
	0x6e, 0x6f, 0x72, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x6b,
	0x65, 0x12, 0x68, 0x0a, 0x25, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78,
	0x69, 0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x67, 0x72, 0x69, 0x64,
	0x6c, 0x69, 0x6e, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x25, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61,
	0x78, 0x69, 0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x67, 0x72, 0x69,
	0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x44, 0x0a, 0x1d, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x73, 0x68, 0x6f, 0x77, 0x61, 0x78, 0x69, 0x73, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69,
	0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x73, 0x68, 0x6f, 0x77, 0x61, 0x78, 0x69,
	0x73, 0x12, 0x3e, 0x0a, 0x1a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78,
	0x69, 0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x61, 0x78, 0x69, 0x73, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x61, 0x78, 0x69, 0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x61, 0x78, 0x69,
	0x73, 0x12, 0x56, 0x0a, 0x26, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78,
	0x69, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x68, 0x6f, 0x77, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x2f, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x26, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x68, 0x6f, 0x77, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x5e, 0x0a, 0x2a, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x73, 0x68, 0x6f, 0x77, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x74, 0x69,
	0x63, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x2a, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x73, 0x68, 0x6f, 0x77, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x74, 0x69, 0x63, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x58, 0x0a, 0x27, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x68, 0x6f, 0x77, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x6b, 0x6d,
	0x61, 0x72, 0x6b, 0x73, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x27, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x68,
	0x6f, 0x77, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x6b, 0x6d, 0x61,
	0x72, 0x6b, 0x73, 0x12, 0x4e, 0x0a, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x61, 0x78, 0x69, 0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x73, 0x68, 0x6f, 0x77,
	0x6c, 0x61, 0x73, 0x74, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x73, 0x68, 0x6f, 0x77, 0x6c, 0x61, 0x73, 0x74, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x58, 0x0a, 0x27, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x61, 0x78, 0x69, 0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x73, 0x68, 0x6f, 0x77,
	0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x27, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61,
	0x78, 0x69, 0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x73, 0x68, 0x6f, 0x77, 0x6d,
	0x61, 0x6a, 0x6f, 0x72, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x62, 0x0a,
	0x2c, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x70, 0x6f,
	0x6c, 0x61, 0x72, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x73, 0x68, 0x6f, 0x77, 0x6d,
	0x61, 0x6a, 0x6f, 0x72, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x2c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x2c, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78,
	0x69, 0x73, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x73,
	0x68, 0x6f, 0x77, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x73, 0x12, 0x52, 0x0a, 0x24, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78,
	0x69, 0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x6d, 0x61, 0x6a, 0x6f, 0x72,
	0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x24, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x67, 0x72, 0x69, 0x64,
	0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x27, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x73, 0x68,
	0x6f, 0x77, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x74, 0x69, 0x63, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x27, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x61, 0x78, 0x69, 0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x73, 0x68, 0x6f,
	0x77, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x74, 0x69, 0x63, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12,
	0x52, 0x0a, 0x24, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x74, 0x69,
	0x63, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x24, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x68, 0x6f, 0x77, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x74, 0x69, 0x63, 0x6b, 0x6d, 0x61,
	0x72, 0x6b, 0x73, 0x12, 0x4e, 0x0a, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x61, 0x78, 0x69, 0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x6d, 0x69, 0x6e,
	0x69, 0x6d, 0x75, 0x6d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x58, 0x0a, 0x27, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x61, 0x78, 0x69, 0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x73, 0x68, 0x6f, 0x77,
	0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x27, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61,
	0x78, 0x69, 0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x73, 0x68, 0x6f, 0x77, 0x6d,
	0x69, 0x6e, 0x6f, 0x72, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x52, 0x0a,
	0x24, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x67, 0x72, 0x69, 0x64,
	0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x08, 0x52, 0x24, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x68, 0x6f, 0x77, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x73, 0x12, 0x58, 0x0a, 0x27, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78,
	0x69, 0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x73, 0x68, 0x6f, 0x77, 0x6d, 0x69,
	0x6e, 0x6f, 0x72, 0x74, 0x69, 0x63, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x27, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69,
	0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x73, 0x68, 0x6f, 0x77, 0x6d, 0x69, 0x6e,
	0x6f, 0x72, 0x74, 0x69, 0x63, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x52, 0x0a, 0x24, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x68, 0x6f, 0x77, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x74, 0x69, 0x63, 0x6b, 0x6d, 0x61,
	0x72, 0x6b, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x24, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x68, 0x6f,
	0x77, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x74, 0x69, 0x63, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12,
	0x54, 0x0a, 0x25, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x74, 0x69, 0x63, 0x6b, 0x6d, 0x61, 0x72, 0x6b,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x24, 0x20, 0x01, 0x28, 0x05, 0x52, 0x25,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x74, 0x69, 0x63, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x74, 0x69, 0x63, 0x6b, 0x6d,
	0x61, 0x72, 0x6b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x25, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x74, 0x69, 0x63, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x64, 0x0a, 0x2d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x26, 0x20, 0x01, 0x28, 0x05, 0x52, 0x2d, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x62, 0x0a, 0x2c, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x27, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x2c, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x70, 0x61, 0x72, 0x61,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x5e, 0x0a, 0x2a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x2a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78,
	0x69, 0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x70, 0x61, 0x72, 0x61,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x52, 0x0a, 0x24, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x73, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x18, 0x29, 0x20, 0x01, 0x28, 0x05, 0x52, 0x24, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x73, 0x70, 0x61, 0x63,
	0x69, 0x6e, 0x67, 0x32, 0x67, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x25,
	0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x41, 0x78, 0x69, 0x73, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x18, 0x90, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x54,
	0x53, 0x43, 0x48, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x41, 0x78, 0x69, 0x73, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x22, 0xf0, 0x10, 0x0a,
	0x18, 0x43, 0x68, 0x61, 0x72, 0x74, 0x41, 0x78, 0x69, 0x73, 0x4e, 0x6f, 0x6e, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x68, 0x0a, 0x21, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x31, 0x5f, 0x30, 0x64, 0x61, 0x74, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x54, 0x53, 0x4b, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x20, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x31, 0x30, 0x64, 0x61, 0x74, 0x65, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x6c, 0x0a, 0x23, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x61, 0x78, 0x69, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x31, 0x5f, 0x30, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x54, 0x53, 0x4b, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x22, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x31, 0x30, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x12, 0x50, 0x0a, 0x23, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78,
	0x69, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x33, 0x64, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x23,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x33, 0x64, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x63, 0x0a, 0x1e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x61, 0x78, 0x69, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x64, 0x61, 0x74, 0x65, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53,
	0x4b, 0x2e, 0x54, 0x53, 0x4b, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x64, 0x61,
	0x74, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x6b, 0x0a, 0x22, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x54, 0x53, 0x4b, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x4e, 0x0a, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x78, 0x70, 0x6c,
	0x6f, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x67, 0x0a, 0x20, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x54, 0x53, 0x4b, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x20, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x52,
	0x0a, 0x24, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x24, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x4c, 0x0a, 0x21, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61,
	0x78, 0x69, 0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x6f, 0x66,
	0x64, 0x65, 0x63, 0x61, 0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x21, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x6f, 0x66, 0x64, 0x65, 0x63, 0x61, 0x64, 0x65, 0x73,
	0x12, 0x5a, 0x0a, 0x28, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69,
	0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x6f, 0x66, 0x6d, 0x61,
	0x6a, 0x6f, 0x72, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x28, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69,
	0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x6f, 0x66, 0x6d, 0x61,
	0x6a, 0x6f, 0x72, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x28,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x6f, 0x66, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x67,
	0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x28,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x6f, 0x66, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x67,
	0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x20, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x70, 0x6c, 0x6f, 0x74, 0x74, 0x6f, 0x65, 0x64, 0x67, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x20, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69,
	0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x70, 0x6c, 0x6f, 0x74, 0x74, 0x6f, 0x65,
	0x64, 0x67, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x61, 0x78, 0x69, 0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x61, 0x78, 0x69, 0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x48,
	0x0a, 0x1f, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x73, 0x68, 0x6f, 0x77, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1f, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x73, 0x68,
	0x6f, 0x77, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x46, 0x0a, 0x1e, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x73, 0x68, 0x6f, 0x77, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x1e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x68, 0x6f, 0x77, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x12, 0x42, 0x0a, 0x1c, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69,
	0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x61, 0x78, 0x69, 0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x12, 0x54, 0x0a, 0x25, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x61, 0x78, 0x69, 0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x73, 0x68, 0x6f,
	0x77, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x25, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78,
	0x69, 0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x73, 0x68, 0x6f, 0x77, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x56, 0x0a, 0x26, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x68, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x26, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x68, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x12, 0x46, 0x0a, 0x1e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61,
	0x78, 0x69, 0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x73, 0x68, 0x6f, 0x77, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x73, 0x68, 0x6f, 0x77, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x40, 0x0a, 0x1b, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x68, 0x6f, 0x77, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1b, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x1a,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x17,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x63, 0x0a, 0x1b, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x75, 0x73,
	0x65, 0x72, 0x6d, 0x61, 0x78, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x54, 0x53,
	0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x4e, 0x53, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1b,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x75, 0x73, 0x65, 0x72, 0x6d, 0x61, 0x78, 0x12, 0x63, 0x0a, 0x1b, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x75, 0x73, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x4e, 0x53,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x1b, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78,
	0x69, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x75, 0x73, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x32, 0x6d, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x2e, 0x54, 0x53,
	0x43, 0x48, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x41, 0x78, 0x69, 0x73, 0x4e, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x18, 0x90, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x54,
	0x53, 0x43, 0x48, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x41, 0x78, 0x69, 0x73, 0x4e, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x22,
	0xfc, 0x58, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x72, 0x74, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x76, 0x0a, 0x2b, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x63, 0x61, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65,
	0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x65, 0x6e, 0x64, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x45, 0x6e, 0x64, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x2b, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x63, 0x61,
	0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x65, 0x6e, 0x64, 0x12, 0x7a, 0x0a, 0x2d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x63, 0x61, 0x6c,
	0x6c, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x6c, 0x69, 0x6e,
	0x65, 0x65, 0x6e, 0x64, 0x18, 0x81, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53,
	0x44, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x45, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x2d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x63, 0x61, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x6c,
	0x69, 0x6e, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x65, 0x6e, 0x64, 0x12,
	0x77, 0x0a, 0x2c, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x63, 0x61, 0x6c, 0x6c, 0x6f, 0x75, 0x74,
	0x6c, 0x69, 0x6e, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18,
	0x80, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72,
	0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x2c, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x63, 0x61, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x74, 0x72,
	0x6f, 0x6b, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x69, 0x0a, 0x25, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x65, 0x6e,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x4c, 0x69,
	0x6e, 0x65, 0x45, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x25, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x6c, 0x69, 0x6e, 0x65,
	0x65, 0x6e, 0x64, 0x12, 0x79, 0x0a, 0x2d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x62, 0x61, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x65, 0x6e, 0x64, 0x73, 0x63, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x44,
	0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x45, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x2d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x6c,
	0x69, 0x6e, 0x65, 0x65, 0x6e, 0x64, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x78, 0x12, 0x66,
	0x0a, 0x24, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72,
	0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54,
	0x53, 0x44, 0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x24, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72,
	0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x12, 0x54, 0x0a, 0x25, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x73, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x18,
	0x62, 0x20, 0x01, 0x28, 0x05, 0x52, 0x25, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x62, 0x61, 0x72, 0x73, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x64, 0x0a, 0x2d,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x73, 0x70,
	0x61, 0x63, 0x69, 0x6e, 0x67, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x78, 0x18, 0x63, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x2d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x62, 0x61, 0x72, 0x73, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x78, 0x12, 0x66, 0x0a, 0x24, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x62, 0x61, 0x72, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x24, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x62, 0x61, 0x72, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x76, 0x0a, 0x2c, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x73, 0x74, 0x72, 0x6f,
	0x6b, 0x65, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x2c, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x62, 0x61, 0x72, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x78, 0x12, 0x4e, 0x0a, 0x19, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x33, 0x64, 0x61, 0x72, 0x65, 0x61, 0x66, 0x69, 0x6c, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x46, 0x69, 0x6c, 0x6c,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x19, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x33, 0x64, 0x61, 0x72, 0x65, 0x61, 0x66, 0x69,
	0x6c, 0x6c, 0x12, 0x4c, 0x0a, 0x18, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x33, 0x64, 0x62, 0x61, 0x72, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x18, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x33, 0x64, 0x62, 0x61, 0x72, 0x66, 0x69, 0x6c, 0x6c,
	0x12, 0x52, 0x0a, 0x1b, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x33, 0x64, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x66, 0x69, 0x6c, 0x6c, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x46, 0x69, 0x6c, 0x6c,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1b, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x33, 0x64, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x66, 0x69, 0x6c, 0x6c, 0x12, 0x4e, 0x0a, 0x19, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x33, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x66, 0x69, 0x6c,
	0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x46, 0x69,
	0x6c, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x19, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x33, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x66, 0x69, 0x6c, 0x6c, 0x12, 0x4c, 0x0a, 0x18, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x33, 0x64, 0x70, 0x69, 0x65, 0x66, 0x69, 0x6c, 0x6c,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x46, 0x69, 0x6c,
	0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x18, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x33, 0x64, 0x70, 0x69, 0x65, 0x66, 0x69,
	0x6c, 0x6c, 0x12, 0x4a, 0x0a, 0x17, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x61, 0x72, 0x65, 0x61, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x17, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x61, 0x72, 0x65, 0x61, 0x66, 0x69, 0x6c, 0x6c, 0x12, 0x48,
	0x0a, 0x16, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x62, 0x61, 0x72, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x54, 0x53, 0x44, 0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x16, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x62, 0x61, 0x72, 0x66, 0x69, 0x6c, 0x6c, 0x12, 0x4e, 0x0a, 0x19, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54, 0x53,
	0x44, 0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x19, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x66, 0x69, 0x6c, 0x6c, 0x12, 0x50, 0x0a, 0x1a, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54,
	0x53, 0x44, 0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1a,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x66, 0x69, 0x6c, 0x6c, 0x12, 0x54, 0x0a, 0x1c, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78,
	0x65, 0x64, 0x61, 0x72, 0x65, 0x61, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x1c, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x61, 0x72, 0x65, 0x61, 0x66, 0x69, 0x6c, 0x6c,
	0x12, 0x58, 0x0a, 0x1e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x66, 0x69,
	0x6c, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x46,
	0x69, 0x6c, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1e, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x66, 0x69, 0x6c, 0x6c, 0x12, 0x48, 0x0a, 0x16, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x70, 0x69, 0x65,
	0x66, 0x69, 0x6c, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54, 0x53, 0x44,
	0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x16, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x70, 0x69, 0x65,
	0x66, 0x69, 0x6c, 0x6c, 0x12, 0x55, 0x0a, 0x1c, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x72, 0x61, 0x64, 0x61, 0x72, 0x61, 0x72, 0x65, 0x61,
	0x66, 0x69, 0x6c, 0x6c, 0x18, 0xa5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54, 0x53,
	0x44, 0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1c, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x72, 0x61,
	0x64, 0x61, 0x72, 0x61, 0x72, 0x65, 0x61, 0x66, 0x69, 0x6c, 0x6c, 0x12, 0x7f, 0x0a, 0x3a, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x72, 0x61,
	0x64, 0x61, 0x72, 0x61, 0x72, 0x65, 0x61, 0x66, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x65, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0xbd, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x3a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x72, 0x61, 0x64, 0x61, 0x72, 0x61, 0x72, 0x65, 0x61, 0x66, 0x69, 0x6c, 0x6c, 0x75, 0x73,
	0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x61, 0x0a, 0x2b,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x72,
	0x61, 0x64, 0x61, 0x72, 0x61, 0x72, 0x65, 0x61, 0x66, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x65, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0xbc, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x2b, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x72, 0x61, 0x64, 0x61, 0x72, 0x61, 0x72, 0x65, 0x61, 0x66, 0x69, 0x6c, 0x6c,
	0x75, 0x73, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12,
	0x60, 0x0a, 0x2b, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x61, 0x72, 0x65, 0x61, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x2b, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x61, 0x72, 0x65, 0x61, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x61,
	0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x5e, 0x0a, 0x2a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x62, 0x61, 0x72, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x61, 0x72, 0x61,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x2a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x62, 0x61, 0x72, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x61,
	0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x66, 0x0a, 0x2e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x2e, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73,
	0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x63, 0x0a, 0x2c, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x6f, 0x6e, 0x75,
	0x74, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73,
	0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x2c, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x64, 0x6f, 0x6e, 0x75, 0x74, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x60,
	0x0a, 0x2b, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x6c, 0x69, 0x6e, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x2b, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x6c, 0x69, 0x6e, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x61, 0x72,
	0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x62, 0x0a, 0x2c, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x61, 0x72,
	0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x2c, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x5e, 0x0a, 0x2a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x70, 0x69, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70,
	0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x2a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x70, 0x69, 0x65, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x63, 0x0a, 0x2c, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x72, 0x61, 0x64, 0x61, 0x72, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0xa7, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x2c, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x72, 0x61, 0x64, 0x61,
	0x72, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73,
	0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x44, 0x0a, 0x1d, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x1d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12,
	0x6e, 0x0a, 0x32, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x61, 0x72, 0x65, 0x61, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x32, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x61, 0x72, 0x65, 0x61,
	0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x61, 0x72, 0x61,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x6c, 0x0a, 0x31, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x62, 0x61, 0x72, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x31, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x62, 0x61, 0x72, 0x6f, 0x75,
	0x74, 0x73, 0x69, 0x64, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x74, 0x0a,
	0x35, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x35, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x71, 0x0a, 0x33, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x6f, 0x6e, 0x75, 0x74, 0x6f, 0x75, 0x74, 0x73, 0x69,
	0x64, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x99, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x33, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x64, 0x6f, 0x6e, 0x75, 0x74, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x70, 0x0a, 0x33, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x6f, 0x75,
	0x74, 0x73, 0x69, 0x64, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x33, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74,
	0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x6c, 0x0a, 0x31, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x70, 0x69, 0x65, 0x6f, 0x75,
	0x74, 0x73, 0x69, 0x64, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x31, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x70, 0x69, 0x65, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x71, 0x0a, 0x33, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x72, 0x61, 0x64, 0x61, 0x72, 0x6f, 0x75,
	0x74, 0x73, 0x69, 0x64, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xa8, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x33, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x72, 0x61, 0x64, 0x61, 0x72, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64,
	0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73,
	0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x54, 0x0a, 0x1b, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x33, 0x64, 0x61, 0x72,
	0x65, 0x61, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x1b, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x33, 0x64, 0x61, 0x72, 0x65, 0x61, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x12,
	0x52, 0x0a, 0x1a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x33, 0x64, 0x62, 0x61, 0x72, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x33, 0x64, 0x62, 0x61, 0x72, 0x73, 0x68, 0x61,
	0x64, 0x6f, 0x77, 0x12, 0x58, 0x0a, 0x1d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x33, 0x64, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x68,
	0x61, 0x64, 0x6f, 0x77, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44,
	0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1d,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x33,
	0x64, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x12, 0x54, 0x0a,
	0x1b, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x33, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1b, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x33, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x68, 0x61,
	0x64, 0x6f, 0x77, 0x12, 0x52, 0x0a, 0x1a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x33, 0x64, 0x70, 0x69, 0x65, 0x73, 0x68, 0x61, 0x64, 0x6f,
	0x77, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x68,
	0x61, 0x64, 0x6f, 0x77, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1a, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x33, 0x64, 0x70, 0x69,
	0x65, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x12, 0x50, 0x0a, 0x19, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x61, 0x72, 0x65, 0x61, 0x73, 0x68,
	0x61, 0x64, 0x6f, 0x77, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44,
	0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x19,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x61,
	0x72, 0x65, 0x61, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x12, 0x4e, 0x0a, 0x18, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x62, 0x61, 0x72, 0x73,
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53,
	0x44, 0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x18, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x62, 0x61, 0x72, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x12, 0x54, 0x0a, 0x1b, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x62, 0x75, 0x62, 0x62,
	0x6c, 0x65, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x1b, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x12,
	0x56, 0x0a, 0x1c, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x18,
	0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x68, 0x61, 0x64,
	0x6f, 0x77, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1c, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x12, 0x50, 0x0a, 0x19, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x68,
	0x61, 0x64, 0x6f, 0x77, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44,
	0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x19,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6c,
	0x69, 0x6e, 0x65, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x12, 0x5a, 0x0a, 0x1e, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65,
	0x64, 0x61, 0x72, 0x65, 0x61, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x61, 0x72, 0x65, 0x61, 0x73,
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x12, 0x5e, 0x0a, 0x20, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x20, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x12, 0x5a, 0x0a, 0x1e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x54, 0x53, 0x44, 0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x1e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x68, 0x61, 0x64, 0x6f,
	0x77, 0x12, 0x4e, 0x0a, 0x18, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x70, 0x69, 0x65, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x18, 0x2b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x18, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x70, 0x69, 0x65, 0x73, 0x68, 0x61, 0x64, 0x6f,
	0x77, 0x12, 0x5b, 0x0a, 0x1e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x72, 0x61, 0x64, 0x61, 0x72, 0x61, 0x72, 0x65, 0x61, 0x73, 0x68, 0x61,
	0x64, 0x6f, 0x77, 0x18, 0xa9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44,
	0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1e,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x72,
	0x61, 0x64, 0x61, 0x72, 0x61, 0x72, 0x65, 0x61, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x12, 0x56,
	0x0a, 0x1c, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x18, 0x2c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f,
	0x77, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1c, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x12, 0x50, 0x0a, 0x19, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x61, 0x72, 0x65, 0x61, 0x73, 0x74, 0x72,
	0x6f, 0x6b, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e,
	0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x19, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x61, 0x72,
	0x65, 0x61, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x4e, 0x0a, 0x18, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x62, 0x61, 0x72, 0x73, 0x74,
	0x72, 0x6f, 0x6b, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44,
	0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x18,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x62,
	0x61, 0x72, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x54, 0x0a, 0x1b, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x62, 0x75, 0x62, 0x62, 0x6c,
	0x65, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x1b, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x50,
	0x0a, 0x19, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x19, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65,
	0x12, 0x5a, 0x0a, 0x1e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x61, 0x72, 0x65, 0x61, 0x73, 0x74, 0x72, 0x6f,
	0x6b, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53,
	0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1e, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78,
	0x65, 0x64, 0x61, 0x72, 0x65, 0x61, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x5e, 0x0a, 0x20,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d,
	0x69, 0x78, 0x65, 0x64, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65,
	0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72,
	0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x20, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x5a, 0x0a, 0x1e,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d,
	0x69, 0x78, 0x65, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x33,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b,
	0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x4e, 0x0a, 0x18, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x70, 0x69, 0x65, 0x73, 0x74,
	0x72, 0x6f, 0x6b, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44,
	0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x18,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x70,
	0x69, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x5b, 0x0a, 0x1e, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x72, 0x61, 0x64, 0x61, 0x72,
	0x61, 0x72, 0x65, 0x61, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0xac, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x72, 0x61, 0x64, 0x61, 0x72, 0x61, 0x72, 0x65, 0x61, 0x73,
	0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x56, 0x0a, 0x1c, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x73,
	0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53,
	0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x1c, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x56, 0x0a,
	0x1d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x61, 0x72, 0x65, 0x61, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x36,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x61, 0x72, 0x65, 0x61, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x12, 0x5a, 0x0a, 0x1f, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x54, 0x53, 0x44, 0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x1f, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x66, 0x69, 0x6c,
	0x6c, 0x12, 0x56, 0x0a, 0x1d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x66, 0x69,
	0x6c, 0x6c, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x46,
	0x69, 0x6c, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1d, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6c, 0x69, 0x6e, 0x65, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x12, 0x60, 0x0a, 0x22, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65,
	0x64, 0x61, 0x72, 0x65, 0x61, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x18,
	0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x46, 0x69, 0x6c, 0x6c,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x61, 0x72, 0x65,
	0x61, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x12, 0x60, 0x0a, 0x22, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69,
	0x78, 0x65, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x66, 0x69, 0x6c,
	0x6c, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x46, 0x69,
	0x6c, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x6c,
	0x69, 0x6e, 0x65, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x12, 0x61, 0x0a,
	0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x72, 0x61, 0x64, 0x61, 0x72, 0x61, 0x72, 0x65, 0x61, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x66,
	0x69, 0x6c, 0x6c, 0x18, 0xaf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54, 0x53, 0x44,
	0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x22, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x72, 0x61, 0x64,
	0x61, 0x72, 0x61, 0x72, 0x65, 0x61, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x66, 0x69, 0x6c, 0x6c,
	0x12, 0x5c, 0x0a, 0x20, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x66, 0x69, 0x6c, 0x6c, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54, 0x53, 0x44,
	0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x20, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x63, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x12, 0x5e,
	0x0a, 0x2a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x61, 0x72, 0x65, 0x61, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x75,
	0x73, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x3c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x2a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x61, 0x72, 0x65, 0x61, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x66, 0x69, 0x6c,
	0x6c, 0x75, 0x73, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x66, 0x69, 0x6c, 0x6c, 0x12, 0x5e,
	0x0a, 0x2a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x75,
	0x73, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x3d, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x2a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x66, 0x69, 0x6c,
	0x6c, 0x75, 0x73, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x66, 0x69, 0x6c, 0x6c, 0x12, 0x68,
	0x0a, 0x2f, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x61, 0x72, 0x65, 0x61, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x66, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x66, 0x69, 0x6c,
	0x6c, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x2f, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x61, 0x72, 0x65,
	0x61, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x65, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x66, 0x69, 0x6c, 0x6c, 0x12, 0x68, 0x0a, 0x2f, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64,
	0x6c, 0x69, 0x6e, 0x65, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x75, 0x73,
	0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x3f, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x2f, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x66, 0x69,
	0x6c, 0x6c, 0x12, 0x69, 0x0a, 0x2f, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x72, 0x61, 0x64, 0x61, 0x72, 0x61, 0x72, 0x65, 0x61, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0xb1, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x2f, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x72, 0x61, 0x64,
	0x61, 0x72, 0x61, 0x72, 0x65, 0x61, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x66, 0x69, 0x6c, 0x6c,
	0x75, 0x73, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x66, 0x69, 0x6c, 0x6c, 0x12, 0x62, 0x0a,
	0x2c, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x61, 0x72, 0x65, 0x61, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x75, 0x73,
	0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x40, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x2c, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x61, 0x72, 0x65, 0x61, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x66, 0x69,
	0x6c, 0x6c, 0x75, 0x73, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x74, 0x72, 0x6f, 0x6b,
	0x65, 0x12, 0x66, 0x0a, 0x2e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x66, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x74, 0x72,
	0x6f, 0x6b, 0x65, 0x18, 0x41, 0x20, 0x01, 0x28, 0x08, 0x52, 0x2e, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x65, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x62, 0x0a, 0x2c, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6c, 0x69, 0x6e, 0x65,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x65, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x42, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x2c, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x6c, 0x69, 0x6e, 0x65, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x75, 0x73,
	0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x6c, 0x0a,
	0x31, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x6d, 0x69, 0x78, 0x65, 0x64, 0x61, 0x72, 0x65, 0x61, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x66,
	0x69, 0x6c, 0x6c, 0x75, 0x73, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x74, 0x72, 0x6f,
	0x6b, 0x65, 0x18, 0x43, 0x20, 0x01, 0x28, 0x08, 0x52, 0x31, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x61, 0x72,
	0x65, 0x61, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x65, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x6c, 0x0a, 0x31, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69,
	0x78, 0x65, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x66, 0x69, 0x6c,
	0x6c, 0x75, 0x73, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65,
	0x18, 0x44, 0x20, 0x01, 0x28, 0x08, 0x52, 0x31, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x65, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x6d, 0x0a, 0x31, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x72, 0x61, 0x64, 0x61,
	0x72, 0x61, 0x72, 0x65, 0x61, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x75,
	0x73, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0xb3,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x31, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x72, 0x61, 0x64, 0x61, 0x72, 0x61, 0x72, 0x65, 0x61, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x65, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x68, 0x0a, 0x2f, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x63, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x65, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x45, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x2f, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x66,
	0x69, 0x6c, 0x6c, 0x75, 0x73, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x74, 0x72, 0x6f,
	0x6b, 0x65, 0x12, 0x44, 0x0a, 0x1d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x61, 0x72, 0x65, 0x61, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1d, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x61, 0x72, 0x65, 0x61, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x44, 0x0a, 0x1d, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6c, 0x69, 0x6e, 0x65, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x47, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x1d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x6c, 0x69, 0x6e, 0x65, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x4e,
	0x0a, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x61, 0x72, 0x65, 0x61, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x48, 0x20, 0x01, 0x28, 0x02, 0x52, 0x22, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64,
	0x61, 0x72, 0x65, 0x61, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x4e,
	0x0a, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x49, 0x20, 0x01, 0x28, 0x02, 0x52, 0x22, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64,
	0x6c, 0x69, 0x6e, 0x65, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x4f,
	0x0a, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x72, 0x61, 0x64, 0x61, 0x72, 0x61, 0x72, 0x65, 0x61, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0xb5, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x22, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x72, 0x61, 0x64, 0x61,
	0x72, 0x61, 0x72, 0x65, 0x61, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x4a, 0x0a, 0x20, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x20, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x5c, 0x0a, 0x1f, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x61, 0x72,
	0x65, 0x61, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x4b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b,
	0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1f, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x61, 0x72, 0x65, 0x61, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x60, 0x0a, 0x21, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x62, 0x75, 0x62, 0x62,
	0x6c, 0x65, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x4c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b,
	0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x21, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x5c, 0x0a, 0x1f, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x4d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b,
	0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1f, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x66, 0x0a, 0x24, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65,
	0x64, 0x61, 0x72, 0x65, 0x61, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x74, 0x72, 0x6f, 0x6b,
	0x65, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74,
	0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x24, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65,
	0x64, 0x61, 0x72, 0x65, 0x61, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x74, 0x72, 0x6f, 0x6b,
	0x65, 0x12, 0x66, 0x0a, 0x24, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x24, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x67, 0x0a, 0x24, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x72, 0x61, 0x64, 0x61,
	0x72, 0x61, 0x72, 0x65, 0x61, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x74, 0x72, 0x6f, 0x6b,
	0x65, 0x18, 0xb7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53,
	0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x24, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x72, 0x61, 0x64,
	0x61, 0x72, 0x61, 0x72, 0x65, 0x61, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x74, 0x72, 0x6f,
	0x6b, 0x65, 0x12, 0x62, 0x0a, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x68, 0x0a, 0x25, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x18,
	0x55, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x68, 0x61, 0x64,
	0x6f, 0x77, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x25, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77,
	0x12, 0x68, 0x0a, 0x25, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c,
	0x69, 0x6e, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x56, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x25, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x72, 0x65, 0x6e, 0x64,
	0x6c, 0x69, 0x6e, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x66, 0x0a, 0x2e, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x65, 0x71, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x51, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x2e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c,
	0x69, 0x6e, 0x65, 0x65, 0x71, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6f, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x12, 0x7e, 0x0a, 0x3a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x72, 0x65, 0x6e,
	0x64, 0x6c, 0x69, 0x6e, 0x65, 0x65, 0x71, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x61, 0x72,
	0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x52, 0x20, 0x01, 0x28, 0x05, 0x52, 0x3a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x72,
	0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x65, 0x71, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70,
	0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x66, 0x0a, 0x2e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x72, 0x65, 0x6e,
	0x64, 0x6c, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x64, 0x6f, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x53, 0x20, 0x01, 0x28, 0x02, 0x52, 0x2e, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x71, 0x75, 0x61,
	0x72, 0x65, 0x64, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x7e, 0x0a, 0x3a, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x71,
	0x75, 0x61, 0x72, 0x65, 0x64, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74,
	0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x54, 0x20, 0x01, 0x28, 0x05, 0x52, 0x3a,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x72,
	0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x64, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x54, 0x0a, 0x25, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x61, 0x72, 0x65,
	0x61, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x57, 0x20, 0x01, 0x28, 0x05, 0x52, 0x25, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x61, 0x72, 0x65, 0x61, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x52, 0x0a, 0x24, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x62, 0x61, 0x72, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x58, 0x20, 0x01, 0x28, 0x05, 0x52, 0x24,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x62,
	0x61, 0x72, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x27, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x59, 0x20, 0x01, 0x28, 0x05, 0x52, 0x27, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a,
	0x0a, 0x28, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x28, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x25, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6c, 0x69, 0x6e,
	0x65, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x25, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6c, 0x69, 0x6e, 0x65, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x5e, 0x0a, 0x2a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x61, 0x72, 0x65, 0x61, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x5c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x2a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x61, 0x72, 0x65, 0x61, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x62, 0x0a, 0x2c, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x5d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x2c, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5e, 0x0a, 0x2a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x5e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x2a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x6c, 0x69,
	0x6e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5f, 0x0a, 0x2a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x72, 0x61, 0x64, 0x61, 0x72, 0x61, 0x72, 0x65, 0x61,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0xb9, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x2a, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x72, 0x61, 0x64, 0x61, 0x72, 0x61,
	0x72, 0x65, 0x61, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x28, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x5f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x28, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x62, 0x0a, 0x2c, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x61, 0x72, 0x65, 0x61, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x60, 0x20, 0x01, 0x28, 0x05, 0x52, 0x2c, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x61,
	0x72, 0x65, 0x61, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x2b, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x62,
	0x61, 0x72, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x61, 0x20, 0x01, 0x28, 0x05, 0x52, 0x2b, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x65, 0x64, 0x62, 0x61, 0x72, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x27, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x70, 0x61, 0x63, 0x69,
	0x6e, 0x67, 0x18, 0x64, 0x20, 0x01, 0x28, 0x05, 0x52, 0x27, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x70, 0x61, 0x63, 0x69, 0x6e,
	0x67, 0x32, 0x6b, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x2e, 0x54,
	0x53, 0x43, 0x48, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x18, 0x90, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x54,
	0x53, 0x43, 0x48, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x22, 0xe7,
	0x45, 0x0a, 0x1a, 0x43, 0x68, 0x61, 0x72, 0x74, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4e, 0x6f,
	0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x6c, 0x0a,
	0x23, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x31, 0x5f, 0x30, 0x64, 0x61, 0x74, 0x65, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x18, 0x45, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x4b,
	0x2e, 0x54, 0x53, 0x4b, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x31,
	0x30, 0x64, 0x61, 0x74, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x70, 0x0a, 0x25, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x31, 0x5f, 0x30, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x4b,
	0x2e, 0x54, 0x53, 0x4b, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x24, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x31,
	0x30, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x68, 0x0a,
	0x21, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x70, 0x69, 0x65, 0x31, 0x5f, 0x30, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x54,
	0x53, 0x4b, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x20, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x70, 0x69, 0x65, 0x31, 0x30, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x4f, 0x0a, 0x23, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x70, 0x69, 0x65, 0x32, 0x5f, 0x33,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x70, 0x69, 0x65, 0x32, 0x33, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65,
	0x78, 0x70, 0x6c, 0x6f, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x24, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x62, 0x75, 0x62, 0x62, 0x6c,
	0x65, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x24, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x61, 0x64, 0x6a,
	0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x67, 0x0a, 0x20,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x64, 0x61, 0x74, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x18, 0x47, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x54, 0x53, 0x4b,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x20, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x64, 0x61, 0x74, 0x65, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x6f, 0x0a, 0x24, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x46, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x54, 0x53, 0x4b, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x24, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x52, 0x0a, 0x24, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x61, 0x72, 0x65, 0x61, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x67,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x24, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x61, 0x72, 0x65, 0x61, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x63,
	0x61, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x50, 0x0a, 0x23, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x62, 0x61, 0x72,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x68, 0x20, 0x01, 0x28, 0x05, 0x52, 0x23, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x62, 0x61, 0x72, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x63, 0x61, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x56, 0x0a, 0x26,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x62,
	0x75, 0x62, 0x62, 0x6c, 0x65, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x6f,
	0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x69, 0x20, 0x01, 0x28, 0x05, 0x52, 0x26, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x62, 0x75, 0x62,
	0x62, 0x6c, 0x65, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x6f, 0x75, 0x74,
	0x6c, 0x69, 0x6e, 0x65, 0x12, 0x58, 0x0a, 0x27, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x6e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x27, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x52,
	0x0a, 0x24, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x6c, 0x69, 0x6e, 0x65, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x6f,
	0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x24, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6c, 0x69, 0x6e,
	0x65, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x50, 0x0a, 0x23, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x70, 0x69, 0x65, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x61,
	0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x23, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x70, 0x69, 0x65, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x6f, 0x75, 0x74,
	0x6c, 0x69, 0x6e, 0x65, 0x12, 0x58, 0x0a, 0x27, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x6b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x27, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x60,
	0x0a, 0x2b, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x61, 0x72, 0x65, 0x61, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x6c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x2b, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x61, 0x72, 0x65, 0x61, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65,
	0x12, 0x5e, 0x0a, 0x2a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x62, 0x61, 0x72, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x6d,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x2a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x62, 0x61, 0x72, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65,
	0x12, 0x96, 0x01, 0x0a, 0x30, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x62, 0x61, 0x72, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x54, 0x53,
	0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x4e, 0x53, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x4f, 0x66, 0x4e, 0x53, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x30, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x6e, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x64, 0x61, 0x74, 0x61, 0x12, 0xa6, 0x01, 0x0a, 0x38, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x64, 0x61, 0x74, 0x61, 0x73, 0x63,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x54,
	0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x4e, 0x53, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x4f, 0x66, 0x4e, 0x53, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x38, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x6e, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x64, 0x61, 0x74, 0x61, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x78, 0x12, 0x96, 0x01, 0x0a, 0x30, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x62, 0x61, 0x72, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x76, 0x65, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x4e, 0x53, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x4f, 0x66, 0x4e, 0x53, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x30, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x64, 0x61, 0x74, 0x61, 0x12, 0xa6, 0x01, 0x0a, 0x38,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x4e, 0x53, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x4f, 0x66, 0x4e, 0x53, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x38, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x64, 0x61, 0x74, 0x61, 0x73, 0x63, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x78, 0x12, 0x5a, 0x0a, 0x28, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x66, 0x69, 0x78, 0x65, 0x64, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x28, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x66, 0x69, 0x78, 0x65, 0x64, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x6a, 0x0a, 0x30, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62,
	0x61, 0x72, 0x66, 0x69, 0x78, 0x65, 0x64, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x63, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x30, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x66, 0x69, 0x78, 0x65, 0x64, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x78, 0x12, 0x5e, 0x0a, 0x2a,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x2a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x6e, 0x0a, 0x32,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x32, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x78, 0x12, 0x54, 0x0a, 0x25,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x25, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x64, 0x0a, 0x2d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x62, 0x61, 0x72, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x63, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x2d, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x78, 0x12, 0x5c, 0x0a, 0x29, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x73, 0x74, 0x64, 0x64, 0x65, 0x76,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x29, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x73, 0x74, 0x64, 0x64, 0x65,
	0x76, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x6c, 0x0a, 0x31, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x73, 0x74, 0x64, 0x64, 0x65, 0x76, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x78, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x31, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61,
	0x72, 0x73, 0x74, 0x64, 0x64, 0x65, 0x76, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x63, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x78, 0x12, 0x4e, 0x0a, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x5e, 0x0a, 0x2a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x74, 0x79, 0x70, 0x65, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x78, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x2a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x74, 0x79, 0x70, 0x65, 0x73, 0x63, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x78, 0x12, 0x4b, 0x0a, 0x20, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x70, 0x69, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65,
	0x78, 0x70, 0x6c, 0x6f, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x93, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x20, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x70, 0x69, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x44, 0x0a, 0x1d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x1b, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6c, 0x69, 0x6e, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1b, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6c, 0x69, 0x6e,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x20, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65,
	0x64, 0x6c, 0x69, 0x6e, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x20, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x20, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x72, 0x61, 0x64, 0x61, 0x72, 0x61, 0x72, 0x65,
	0x61, 0x6c, 0x69, 0x6e, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0xbd, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x20, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x72, 0x61, 0x64, 0x61, 0x72, 0x61, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x46, 0x0a, 0x1e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1e, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x63, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x6b, 0x0a, 0x22, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x18, 0x62, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x54, 0x53, 0x4b,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x63, 0x0a, 0x1e, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x70, 0x69, 0x65, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x63, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x54, 0x53, 0x4b, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1e, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x70, 0x69, 0x65,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x56, 0x0a, 0x26,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x74, 0x79, 0x70, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x26, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x4e, 0x0a, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x70, 0x69, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x79, 0x70, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x70, 0x69, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x79, 0x0a, 0x29, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x54, 0x53,
	0x4b, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x29, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12,
	0x4a, 0x0a, 0x20, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x20, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4e, 0x0a, 0x22, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x68, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61,
	0x72, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73,
	0x68, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x12, 0x5e, 0x0a, 0x2a, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x68, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61,
	0x72, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x78, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x2a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x68, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x62, 0x61, 0x72, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x78, 0x12, 0x56, 0x0a, 0x26, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x62, 0x75,
	0x62, 0x62, 0x6c, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x69, 0x6e,
	0x66, 0x72, 0x6f, 0x6e, 0x74, 0x18, 0x65, 0x20, 0x01, 0x28, 0x08, 0x52, 0x26, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x62, 0x75, 0x62, 0x62,
	0x6c, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x69, 0x6e, 0x66, 0x72,
	0x6f, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x27, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x68, 0x6f,
	0x77, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x69, 0x6e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x18, 0x64,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x27, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x68, 0x6f, 0x77,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x69, 0x6e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x12, 0x46, 0x0a,
	0x1e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x73, 0x68, 0x6f, 0x77, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x73, 0x68, 0x6f,
	0x77, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x54, 0x0a, 0x25, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x73, 0x68,
	0x6f, 0x77, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x64, 0x61, 0x74, 0x61, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x25, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x6e,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x64, 0x61, 0x74, 0x61, 0x12, 0x54, 0x0a, 0x25, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x62, 0x75,
	0x62, 0x62, 0x6c, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x41, 0x20, 0x01, 0x28, 0x08, 0x52, 0x25, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x62, 0x75, 0x62, 0x62, 0x6c,
	0x65, 0x73, 0x68, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x4e, 0x0a, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x70, 0x69, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x22, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x70, 0x69,
	0x65, 0x73, 0x68, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x56, 0x0a, 0x26, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x73, 0x68, 0x6f, 0x77, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x43, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x26, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x73, 0x68, 0x6f, 0x77, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x44, 0x0a, 0x1d, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x61, 0x72, 0x65, 0x61,
	0x73, 0x68, 0x6f, 0x77, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x1d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x61, 0x72, 0x65, 0x61, 0x73, 0x68, 0x6f, 0x77, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12,
	0x44, 0x0a, 0x1d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x4e, 0x0a, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x61, 0x72, 0x65,
	0x61, 0x73, 0x68, 0x6f, 0x77, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x61, 0x72, 0x65, 0x61, 0x73, 0x68, 0x6f, 0x77, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x4e, 0x0a, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x68, 0x6f, 0x77, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x4f, 0x0a, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x72, 0x61, 0x64, 0x61, 0x72, 0x61, 0x72, 0x65,
	0x61, 0x73, 0x68, 0x6f, 0x77, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0xa0, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x72, 0x61, 0x64, 0x61, 0x72, 0x61, 0x72, 0x65, 0x61, 0x73, 0x68, 0x6f, 0x77,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x4a, 0x0a, 0x20, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x73, 0x68, 0x6f, 0x77, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x24, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x20, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x73, 0x68, 0x6f, 0x77, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x12, 0x50, 0x0a, 0x23, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x68, 0x6f, 0x77,
	0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x23, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x68, 0x6f, 0x77, 0x74, 0x72, 0x65, 0x6e, 0x64,
	0x6c, 0x69, 0x6e, 0x65, 0x12, 0x4e, 0x0a, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x61, 0x72, 0x65, 0x61, 0x73, 0x68, 0x6f, 0x77, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x26, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x61, 0x72, 0x65, 0x61, 0x73, 0x68, 0x6f, 0x77, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x12, 0x4c, 0x0a, 0x21, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x62, 0x61, 0x72, 0x73, 0x68, 0x6f, 0x77, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x27, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x21, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x62, 0x61, 0x72, 0x73, 0x68, 0x6f, 0x77, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x12, 0x52, 0x0a, 0x24, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x24, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x54, 0x0a, 0x25, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x73, 0x68, 0x6f, 0x77, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x29, 0x20, 0x01, 0x28, 0x08, 0x52, 0x25, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x68, 0x6f,
	0x77, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x4e, 0x0a, 0x22,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6c,
	0x69, 0x6e, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x68, 0x6f,
	0x77, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x50, 0x0a, 0x23,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d,
	0x69, 0x78, 0x65, 0x64, 0x73, 0x68, 0x6f, 0x77, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x23, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x73,
	0x68, 0x6f, 0x77, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x4c,
	0x0a, 0x21, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x70, 0x69, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x21, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x70, 0x69, 0x65, 0x73, 0x68, 0x6f,
	0x77, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x51, 0x0a, 0x23,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x72,
	0x61, 0x64, 0x61, 0x72, 0x73, 0x68, 0x6f, 0x77, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0xa2, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x23, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x72, 0x61, 0x64, 0x61, 0x72,
	0x73, 0x68, 0x6f, 0x77, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x54, 0x0a, 0x25, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x73, 0x68, 0x6f, 0x77, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x25,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73,
	0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x73, 0x68, 0x6f, 0x77, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x4e, 0x0a, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x73, 0x69,
	0x7a, 0x65, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x2e, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x64, 0x69, 0x6d, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x1e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x61, 0x72, 0x65, 0x61, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x8b, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x61,
	0x72, 0x65, 0x61, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x45,
	0x0a, 0x1d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x62, 0x61, 0x72, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x8c, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x62, 0x61, 0x72, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x4b, 0x0a, 0x20, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x8d, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x20, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x12, 0x4d, 0x0a, 0x21, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x92, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x21,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x47, 0x0a, 0x1e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6c, 0x69, 0x6e, 0x65, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x45, 0x0a, 0x1d, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x70, 0x69, 0x65,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x8a, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x70, 0x69, 0x65, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x4d, 0x0a, 0x21, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x8f, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x21, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x63,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x12, 0x55, 0x0a, 0x25, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x61, 0x72, 0x65, 0x61, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x90, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x25, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x61, 0x72, 0x65, 0x61, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x53, 0x0a, 0x24, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x65,
	0x64, 0x62, 0x61, 0x72, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x91, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x24, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x62, 0x61,
	0x72, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x44, 0x0a, 0x1d,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x61,
	0x72, 0x65, 0x61, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x18, 0x2f, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x1d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x61, 0x72, 0x65, 0x61, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x44, 0x0a, 0x1d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1d, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4e, 0x0a, 0x22, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64,
	0x61, 0x72, 0x65, 0x61, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x18, 0x31,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x61, 0x72, 0x65, 0x61, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4e, 0x0a, 0x22, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64,
	0x6c, 0x69, 0x6e, 0x65, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4f, 0x0a, 0x22, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x72, 0x61, 0x64, 0x61, 0x72,
	0x61, 0x72, 0x65, 0x61, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x18, 0xa3,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x72, 0x61, 0x64, 0x61, 0x72, 0x61, 0x72, 0x65, 0x61, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x20, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x63, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x20, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x74, 0x79, 0x70, 0x65, 0x12, 0x66, 0x0a, 0x2e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74,
	0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x65, 0x71, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x78, 0x18, 0x34, 0x20, 0x01, 0x28, 0x02, 0x52, 0x2e, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x65, 0x71,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x78, 0x12, 0x66, 0x0a,
	0x2e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x65, 0x71, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x79, 0x18,
	0x35, 0x20, 0x01, 0x28, 0x02, 0x52, 0x2e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x72, 0x65,
	0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x65, 0x71, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x79, 0x12, 0x5e, 0x0a, 0x2a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74,
	0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x2a, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x52, 0x0a, 0x24, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74,
	0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x37, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x24, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x72, 0x65, 0x6e, 0x64,
	0x6c, 0x69, 0x6e, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x54, 0x0a, 0x25, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x18, 0x38, 0x20, 0x01, 0x28, 0x05, 0x52, 0x25, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12,
	0x66, 0x0a, 0x2e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69,
	0x6e, 0x65, 0x72, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x64, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x78, 0x18, 0x39, 0x20, 0x01, 0x28, 0x02, 0x52, 0x2e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74,
	0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x64,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x78, 0x12, 0x66, 0x0a, 0x2e, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x71, 0x75, 0x61, 0x72,
	0x65, 0x64, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x79, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x2e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x72, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x64, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x79, 0x12,
	0x60, 0x0a, 0x2b, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x65, 0x71, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x3b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x2b, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x72, 0x65, 0x6e,
	0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x65, 0x71, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x5a, 0x0a, 0x28, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x72, 0x65, 0x6e, 0x64,
	0x6c, 0x69, 0x6e, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x3c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x28, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x72, 0x65, 0x6e, 0x64,
	0x6c, 0x69, 0x6e, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x5e, 0x0a,
	0x2a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x73, 0x68, 0x6f, 0x77, 0x72, 0x32, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x3d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x2a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x72, 0x32, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x50, 0x0a,
	0x23, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x23, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x52, 0x0a, 0x24, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x61, 0x78, 0x69, 0x73, 0x18, 0x42, 0x20, 0x01, 0x28, 0x05, 0x52, 0x24, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x62, 0x75,
	0x62, 0x62, 0x6c, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x61,
	0x78, 0x69, 0x73, 0x12, 0x54, 0x0a, 0x25, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x61, 0x78, 0x69, 0x73, 0x18, 0x44, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x25, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x61, 0x78, 0x69, 0x73, 0x12, 0x4a, 0x0a, 0x20, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x70, 0x69, 0x65, 0x77,
	0x65, 0x64, 0x67, 0x65, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x3f, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x20, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x70, 0x69, 0x65, 0x77, 0x65, 0x64, 0x67, 0x65, 0x65, 0x78, 0x70, 0x6c,
	0x6f, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x79,
	0x61, 0x78, 0x69, 0x73, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x40, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x79, 0x61, 0x78, 0x69, 0x73, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x6c, 0x32, 0x71, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0x2a, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4e, 0x6f, 0x6e,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x18, 0x90, 0x4e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x4e, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x22, 0xa6, 0x04, 0x0a, 0x19, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x6a, 0x0a, 0x30, 0x74, 0x73, 0x63, 0x68, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x30, 0x74, 0x73, 0x63, 0x68, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70,
	0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x5a, 0x0a, 0x1e, 0x74, 0x73, 0x63, 0x68, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x68,
	0x61, 0x64, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44,
	0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1e,
	0x74, 0x73, 0x63, 0x68, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x12, 0x5a,
	0x0a, 0x1e, 0x74, 0x73, 0x63, 0x68, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72,
	0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1e, 0x74, 0x73, 0x63, 0x68,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x74, 0x0a, 0x35, 0x74, 0x73,
	0x63, 0x68, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x35, 0x74, 0x73, 0x63, 0x68, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x61, 0x72,
	0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x32, 0x6f, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x2e, 0x54, 0x53,
	0x43, 0x48, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x18, 0x90, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x54, 0x53, 0x43, 0x48, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x22, 0x86, 0x05, 0x0a, 0x1c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c,
	0x69, 0x6e, 0x65, 0x4e, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x12, 0x73, 0x0a, 0x23, 0x74, 0x73, 0x63, 0x68, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x4e, 0x53, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x23, 0x74, 0x73, 0x63, 0x68, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x44, 0x0a, 0x1d, 0x74, 0x73, 0x63, 0x68, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d,
	0x74, 0x73, 0x63, 0x68, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x4c, 0x0a,
	0x21, 0x74, 0x73, 0x63, 0x68, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x68, 0x6f, 0x77, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x21, 0x74, 0x73, 0x63, 0x68, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x73, 0x68, 0x6f, 0x77, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x4a, 0x0a, 0x20, 0x74,
	0x73, 0x63, 0x68, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x68, 0x6f, 0x77, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x20, 0x74, 0x73, 0x63, 0x68, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73,
	0x68, 0x6f, 0x77, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x56, 0x0a, 0x26, 0x74, 0x73, 0x63, 0x68, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x73, 0x68, 0x6f, 0x77, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x26, 0x74, 0x73, 0x63, 0x68, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x73, 0x68, 0x6f, 0x77, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x42, 0x0a, 0x1c, 0x74, 0x73, 0x63, 0x68, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1c, 0x74, 0x73, 0x63, 0x68, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x74,
	0x79, 0x70, 0x65, 0x32, 0x75, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x2c,
	0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x6f, 0x6e,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x18, 0x90, 0x4e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69,
	0x6e, 0x65, 0x4e, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x22, 0xd7, 0x16, 0x0a, 0x1e, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x38, 0x0a,
	0x17, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x33, 0x64,
	0x62, 0x61, 0x72, 0x73, 0x68, 0x61, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x33, 0x64, 0x62,
	0x61, 0x72, 0x73, 0x68, 0x61, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x19, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x33, 0x64, 0x62, 0x65, 0x76, 0x65, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x33, 0x64, 0x62, 0x65, 0x76, 0x65, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x1b, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x33, 0x64, 0x63, 0x68, 0x61, 0x72, 0x74, 0x6f, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1b, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x33, 0x64, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x48, 0x0a, 0x1f, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x33, 0x64, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x65, 0x74, 0x64, 0x65, 0x70, 0x74, 0x68, 0x67, 0x61, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x1f, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x33,
	0x64, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x74, 0x64, 0x65, 0x70, 0x74, 0x68, 0x67, 0x61,
	0x70, 0x12, 0x6b, 0x0a, 0x1e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e,
	0x66, 0x6f, 0x33, 0x64, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x54, 0x53, 0x43, 0x48,
	0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1e,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x33, 0x64, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x54,
	0x0a, 0x17, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x33,
	0x64, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x33, 0x44, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x17, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x33, 0x64, 0x72, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x14, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x69, 0x6e, 0x66, 0x6f, 0x33, 0x64, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x33,
	0x44, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x14,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x33, 0x64, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x12, 0x54, 0x0a, 0x17, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x69, 0x6e, 0x66, 0x6f, 0x33, 0x64, 0x76, 0x69, 0x65, 0x77, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x33, 0x44, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x17, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f,
	0x33, 0x64, 0x76, 0x69, 0x65, 0x77, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x52, 0x0a, 0x1b, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x1b, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f,
	0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x66, 0x69, 0x6c, 0x6c, 0x12, 0x58,
	0x0a, 0x1d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x62,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f,
	0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1d, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x6f,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1a, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x50, 0x0a, 0x19, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53,
	0x44, 0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x19, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x12, 0x50, 0x0a, 0x19, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x19, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f,
	0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x42, 0x0a, 0x1c,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x63, 0x61, 0x6c,
	0x6c, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x1c, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66,
	0x6f, 0x63, 0x61, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x3e, 0x0a, 0x1a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66,
	0x6f, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69,
	0x6e, 0x66, 0x6f, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x12, 0x6a, 0x0a, 0x30, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66,
	0x6f, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x65, 0x64, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x65, 0x6e, 0x64,
	0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x30, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x12, 0x5e, 0x0a, 0x2a,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x65, 0x70,
	0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x63, 0x6f,
	0x72, 0x6e, 0x65, 0x72, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x2a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64,
	0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64,
	0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x4a, 0x0a, 0x20,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x20, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x2b, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x2b, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x52, 0x0a, 0x24, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x6f, 0x6e, 0x75, 0x74,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x61, 0x74, 0x63, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x24, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x64, 0x6f, 0x6e, 0x75, 0x74, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x61, 0x74, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x5a,
	0x0a, 0x1f, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x67,
	0x72, 0x69, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x66, 0x69, 0x6c,
	0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x46, 0x69,
	0x6c, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1f, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x67, 0x72, 0x69, 0x64, 0x62, 0x61, 0x63, 0x6b,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x66, 0x69, 0x6c, 0x6c, 0x12, 0x4e, 0x0a, 0x22, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x67, 0x72, 0x69, 0x64, 0x62,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x02, 0x52, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x69, 0x6e, 0x66, 0x6f, 0x67, 0x72, 0x69, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x3a, 0x0a, 0x18, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x02, 0x52, 0x18, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x18, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x62, 0x61, 0x72, 0x67,
	0x61, 0x70, 0x18, 0x18, 0x20, 0x01, 0x28, 0x02, 0x52, 0x18, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x62, 0x61, 0x72, 0x67,
	0x61, 0x70, 0x12, 0x3a, 0x0a, 0x18, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69,
	0x6e, 0x66, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x74, 0x67, 0x61, 0x70, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x18, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69,
	0x6e, 0x66, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x74, 0x67, 0x61, 0x70, 0x12, 0x4c,
	0x0a, 0x21, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x64, 0x61, 0x74, 0x61, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x21, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x64, 0x61, 0x74,
	0x61, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x1a,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x70, 0x69, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x1a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x70,
	0x69, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x54, 0x0a, 0x25,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x61, 0x64,
	0x61, 0x72, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x63, 0x75, 0x72, 0x76, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x25, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x61, 0x64, 0x61, 0x72, 0x72,
	0x61, 0x64, 0x69, 0x75, 0x73, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x63, 0x75, 0x72,
	0x76, 0x65, 0x12, 0x42, 0x0a, 0x1c, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x61, 0x64, 0x61, 0x72, 0x73, 0x74, 0x61, 0x72, 0x74, 0x61, 0x6e, 0x67,
	0x6c, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1c, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x61, 0x64, 0x61, 0x72, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x56, 0x0a, 0x26, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x63, 0x6f,
	0x72, 0x6e, 0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x6f, 0x6e, 0x6c, 0x79,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x26, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x63, 0x6f, 0x72, 0x6e,
	0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x65, 0x6e, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x12, 0x4a,
	0x0a, 0x20, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x72, 0x61, 0x64, 0x69,
	0x75, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x20, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x63, 0x6f,
	0x72, 0x6e, 0x65, 0x72, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x68, 0x6f, 0x77, 0x62,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x68, 0x6f, 0x77, 0x62, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x17, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x68, 0x6f, 0x77, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x68, 0x6f, 0x77, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x12, 0x36,
	0x0a, 0x16, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x68, 0x6f, 0x77, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x68, 0x6f,
	0x77, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x40, 0x0a, 0x1b, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x6b, 0x69, 0x70, 0x68, 0x69, 0x64, 0x64, 0x65,
	0x6e, 0x64, 0x61, 0x74, 0x61, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x6b, 0x69, 0x70, 0x68, 0x69,
	0x64, 0x64, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x17, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x17, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x69, 0x6e, 0x66, 0x6f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x2e,
	0x0a, 0x12, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x54,
	0x0a, 0x25, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x26, 0x20, 0x01, 0x28, 0x05, 0x52, 0x25, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x22, 0x8b, 0x03, 0x0a, 0x1f, 0x4c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4d, 0x61,
	0x70, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x42, 0x0a, 0x13, 0x74, 0x73, 0x63, 0x68,
	0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x46, 0x69, 0x6c, 0x6c,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x13, 0x74, 0x73, 0x63, 0x68, 0x6c, 0x65, 0x67,
	0x65, 0x6e, 0x64, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x12, 0x58, 0x0a, 0x27,
	0x74, 0x73, 0x63, 0x68, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x27, 0x74,
	0x73, 0x63, 0x68, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x36, 0x0a, 0x16, 0x74, 0x73, 0x63, 0x68, 0x6c, 0x65,
	0x67, 0x65, 0x6e, 0x64, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x16, 0x74, 0x73, 0x63, 0x68, 0x6c, 0x65, 0x67, 0x65,
	0x6e, 0x64, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x48,
	0x0a, 0x15, 0x74, 0x73, 0x63, 0x68, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x54, 0x53, 0x44, 0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x15, 0x74, 0x73, 0x63, 0x68, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x12, 0x48, 0x0a, 0x15, 0x74, 0x73, 0x63, 0x68,
	0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x74, 0x72, 0x6f, 0x6b,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74,
	0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x15, 0x74, 0x73, 0x63,
	0x68, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x74, 0x72, 0x6f,
	0x6b, 0x65, 0x22, 0x85, 0x1a, 0x0a, 0x22, 0x43, 0x68, 0x61, 0x72, 0x74, 0x41, 0x78, 0x69, 0x73,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4d,
	0x61, 0x70, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x5a, 0x0a, 0x1a, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x31, 0x5f, 0x30, 0x64, 0x61, 0x74,
	0x65, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x54, 0x53, 0x4b, 0x2e, 0x54, 0x53, 0x4b, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x19, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x31, 0x30, 0x64, 0x61, 0x74, 0x65, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x5e, 0x0a, 0x1c, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x31, 0x5f, 0x30, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53,
	0x4b, 0x2e, 0x54, 0x53, 0x4b, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1b, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x31, 0x30, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x46, 0x0a, 0x1e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x33, 0x64, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1e, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x33, 0x64, 0x67, 0x72,
	0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x58, 0x0a,
	0x1d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x33, 0x64,
	0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b,
	0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x33, 0x64, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x42, 0x0a, 0x1c, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x33, 0x64, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1c, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x33, 0x64, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x17, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x64, 0x61, 0x74, 0x65,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54,
	0x53, 0x4b, 0x2e, 0x54, 0x53, 0x4b, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x17, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x64, 0x61, 0x74, 0x65, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x5d, 0x0a, 0x1b, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61,
	0x78, 0x69, 0x73, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x54, 0x53,
	0x4b, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x1b, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61,
	0x78, 0x69, 0x73, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x12, 0x46, 0x0a, 0x1e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78,
	0x69, 0x73, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x73, 0x70, 0x61, 0x63,
	0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1e, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74,
	0x61, 0x6c, 0x73, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x5a, 0x0a, 0x28, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x61,
	0x6e, 0x67, 0x6c, 0x65, 0x62, 0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x28, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x61,
	0x6e, 0x67, 0x6c, 0x65, 0x62, 0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x1b, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x78, 0x70, 0x6c, 0x6f,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1b, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x78,
	0x70, 0x6c, 0x6f, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x25, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x61, 0x72,
	0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x25, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x61, 0x78, 0x69, 0x73, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x46, 0x0a,
	0x1e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x61, 0x78, 0x69, 0x73, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x21, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x67, 0x72, 0x69, 0x64, 0x6c,
	0x69, 0x6e, 0x65, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x21, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x6d,
	0x61, 0x6a, 0x6f, 0x72, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x6f, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x12, 0x5e, 0x0a, 0x20, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x61, 0x78, 0x69, 0x73, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x54, 0x53, 0x44, 0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x20, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73,
	0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x68, 0x61,
	0x64, 0x6f, 0x77, 0x12, 0x5e, 0x0a, 0x20, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x61, 0x78, 0x69, 0x73, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x20, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73,
	0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x74, 0x72,
	0x6f, 0x6b, 0x65, 0x12, 0x4c, 0x0a, 0x21, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x61, 0x78, 0x69, 0x73, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e,
	0x65, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x21,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x6d, 0x69, 0x6e,
	0x6f, 0x72, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x12, 0x5e, 0x0a, 0x20, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78,
	0x69, 0x73, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73,
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53,
	0x44, 0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x20, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x6d, 0x69,
	0x6e, 0x6f, 0x72, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x68, 0x61, 0x64, 0x6f,
	0x77, 0x12, 0x5e, 0x0a, 0x20, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78,
	0x69, 0x73, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73,
	0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53,
	0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x20, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x6d, 0x69,
	0x6e, 0x6f, 0x72, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x6b,
	0x65, 0x12, 0x59, 0x0a, 0x19, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78,
	0x69, 0x73, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x54, 0x53, 0x4b, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x19, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x44, 0x0a, 0x1d,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x1d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78,
	0x69, 0x73, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x42, 0x0a, 0x1c, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61,
	0x78, 0x69, 0x73, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x6f, 0x66, 0x64, 0x65, 0x63, 0x61, 0x64,
	0x65, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1c, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x6f, 0x66, 0x64,
	0x65, 0x63, 0x61, 0x64, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x23, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x6f, 0x66, 0x6d,
	0x61, 0x6a, 0x6f, 0x72, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x23, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78,
	0x69, 0x73, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x6f, 0x66, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x67,
	0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x23, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x6f,
	0x66, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x23, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x61, 0x78, 0x69, 0x73, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x6f, 0x66, 0x6d, 0x69, 0x6e, 0x6f,
	0x72, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x18, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x70, 0x6c, 0x6f, 0x74, 0x74,
	0x6f, 0x65, 0x64, 0x67, 0x65, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x70, 0x6c, 0x6f, 0x74, 0x74,
	0x6f, 0x65, 0x64, 0x67, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x12, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69,
	0x73, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x73, 0x68, 0x6f, 0x77, 0x61, 0x78, 0x69, 0x73, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x61, 0x78, 0x69, 0x73, 0x73, 0x68, 0x6f, 0x77, 0x61, 0x78, 0x69, 0x73, 0x12, 0x48, 0x0a, 0x1f,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x73, 0x68, 0x6f,
	0x77, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1f, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x61, 0x78, 0x69, 0x73, 0x73, 0x68, 0x6f, 0x77, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x73, 0x68, 0x6f, 0x77, 0x67, 0x72, 0x69, 0x64, 0x6c,
	0x69, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69,
	0x73, 0x73, 0x68, 0x6f, 0x77, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x74, 0x69, 0x63,
	0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x73, 0x68, 0x6f, 0x77, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x73, 0x68, 0x6f, 0x77, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x12, 0x3e, 0x0a, 0x1a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69,
	0x73, 0x73, 0x68, 0x6f, 0x77, 0x6c, 0x61, 0x73, 0x74, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61,
	0x78, 0x69, 0x73, 0x73, 0x68, 0x6f, 0x77, 0x6c, 0x61, 0x73, 0x74, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x48, 0x0a, 0x1f, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69,
	0x73, 0x73, 0x68, 0x6f, 0x77, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1f, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x73, 0x68, 0x6f, 0x77, 0x6d, 0x61, 0x6a, 0x6f,
	0x72, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x1f, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x73, 0x68, 0x6f, 0x77, 0x6d,
	0x61, 0x6a, 0x6f, 0x72, 0x74, 0x69, 0x63, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1f, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78,
	0x69, 0x73, 0x73, 0x68, 0x6f, 0x77, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x74, 0x69, 0x63, 0x6b, 0x6d,
	0x61, 0x72, 0x6b, 0x73, 0x12, 0x44, 0x0a, 0x1d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x61, 0x78, 0x69, 0x73, 0x73, 0x68, 0x6f, 0x77, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x21, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x73, 0x68, 0x6f, 0x77, 0x6d, 0x69,
	0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x48, 0x0a, 0x1f, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x73, 0x68, 0x6f, 0x77, 0x6d,
	0x69, 0x6e, 0x6f, 0x72, 0x67, 0x72, 0x69, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x22, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1f, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78,
	0x69, 0x73, 0x73, 0x68, 0x6f, 0x77, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x67, 0x72, 0x69, 0x64, 0x6c,
	0x69, 0x6e, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x1f, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x61, 0x78, 0x69, 0x73, 0x73, 0x68, 0x6f, 0x77, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x74, 0x69,
	0x63, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1f, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x73, 0x68, 0x6f, 0x77,
	0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x74, 0x69, 0x63, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x44,
	0x0a, 0x1d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x73,
	0x68, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x24, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x61, 0x78, 0x69, 0x73, 0x73, 0x68, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x61, 0x78, 0x69, 0x73, 0x73, 0x68, 0x6f, 0x77, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61,
	0x78, 0x69, 0x73, 0x73, 0x68, 0x6f, 0x77, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x44, 0x0a, 0x1d,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x26, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x1d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61,
	0x78, 0x69, 0x73, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x54, 0x0a, 0x25, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61,
	0x78, 0x69, 0x73, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x25, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74,
	0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x55, 0x0a, 0x14, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x75, 0x73, 0x65, 0x72, 0x6d, 0x61, 0x78,
	0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x4e, 0x53, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x14, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x75, 0x73, 0x65, 0x72, 0x6d, 0x61, 0x78, 0x12,
	0x55, 0x0a, 0x14, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73,
	0x75, 0x73, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x4e, 0x53, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x14, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x75,
	0x73, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x12, 0x42, 0x0a, 0x1c, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x73,
	0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1c, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x61, 0x78, 0x69, 0x73, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x73, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x22, 0xcf, 0x38, 0x0a, 0x24, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69,
	0x63, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x12, 0x5e, 0x0a, 0x1c, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x31, 0x5f, 0x30, 0x64, 0x61, 0x74, 0x65, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x4b, 0x2e,
	0x54, 0x53, 0x4b, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1b, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x31, 0x30, 0x64, 0x61, 0x74, 0x65, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x62, 0x0a, 0x1e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x31, 0x5f, 0x30, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53,
	0x4b, 0x2e, 0x54, 0x53, 0x4b, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x31, 0x30, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x49, 0x0a, 0x20, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x32, 0x5f, 0x33, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x1f, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x32, 0x33, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x1e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1e, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x61, 0x64, 0x6a, 0x75, 0x73,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x67, 0x0a, 0x24, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x63, 0x61, 0x6c,
	0x6c, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x65,
	0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x4c,
	0x69, 0x6e, 0x65, 0x45, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x24, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x63, 0x61,
	0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x65, 0x6e, 0x64, 0x12, 0x6b, 0x0a, 0x26, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x65, 0x6e, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x45, 0x6e,
	0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x26, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x6c, 0x6f, 0x75, 0x74,
	0x6c, 0x69, 0x6e, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x65, 0x6e, 0x64,
	0x12, 0x68, 0x0a, 0x25, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x74,
	0x72, 0x6f, 0x6b, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x25, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x63, 0x61, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x73,
	0x74, 0x72, 0x6f, 0x6b, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x59, 0x0a, 0x19, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x61, 0x74,
	0x65, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x54, 0x53, 0x4b, 0x2e, 0x54, 0x53, 0x4b, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x19, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x61, 0x74, 0x65, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x61, 0x0a, 0x1d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54,
	0x53, 0x4b, 0x2e, 0x54, 0x53, 0x4b, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1d, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x4a, 0x0a, 0x20, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x63, 0x61, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x20, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x6f, 0x75, 0x74,
	0x6c, 0x69, 0x6e, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x29, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x4e, 0x53, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4f, 0x66, 0x4e,
	0x53, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x29, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x98, 0x01, 0x0a, 0x31, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x64, 0x61, 0x74, 0x61, 0x73, 0x63, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x54, 0x53,
	0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x4e, 0x53, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x4f, 0x66, 0x4e, 0x53, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x31, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x78, 0x12, 0x88, 0x01, 0x0a, 0x29, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x4e, 0x53, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x4f, 0x66, 0x4e, 0x53, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x29, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x62, 0x61, 0x72, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76,
	0x65, 0x64, 0x61, 0x74, 0x61, 0x12, 0x98, 0x01, 0x0a, 0x31, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61,
	0x72, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x78, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x4e,
	0x53, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4f, 0x66, 0x4e, 0x53, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x31, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x64, 0x61, 0x74, 0x61, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x78,
	0x12, 0x4c, 0x0a, 0x21, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x21, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x62, 0x61, 0x72, 0x66, 0x69, 0x78, 0x65, 0x64, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x5c,
	0x0a, 0x29, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x66, 0x69, 0x78, 0x65, 0x64, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x78, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x29, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x66, 0x69, 0x78, 0x65, 0x64, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x78, 0x12, 0x5b, 0x0a, 0x1e,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x65, 0x6e, 0x64, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x45,
	0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1e, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62,
	0x61, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x65, 0x6e, 0x64, 0x12, 0x6b, 0x0a, 0x26, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x62, 0x61, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x65, 0x6e, 0x64, 0x73, 0x63, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x78, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x44, 0x2e,
	0x4c, 0x69, 0x6e, 0x65, 0x45, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x26,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x65, 0x6e, 0x64, 0x73, 0x63,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x78, 0x12, 0x50, 0x0a, 0x23, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61,
	0x72, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x23, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x60, 0x0a, 0x2b, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x62, 0x61, 0x72, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x78, 0x18, 0x14, 0x20, 0x01, 0x28, 0x02, 0x52, 0x2b, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x78, 0x12, 0x46, 0x0a, 0x1e, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x62, 0x61, 0x72, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x1e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x56, 0x0a, 0x26, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x78, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x26, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x78, 0x12, 0x58, 0x0a, 0x1d, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x62, 0x61, 0x72, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x73, 0x68,
	0x61, 0x64, 0x6f, 0x77, 0x12, 0x46, 0x0a, 0x1e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x73,
	0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1e, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x62, 0x61, 0x72, 0x73, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x56, 0x0a, 0x26,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x73, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x73, 0x63,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x78, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x26, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x62, 0x61, 0x72, 0x73, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x73, 0x63, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x78, 0x12, 0x4e, 0x0a, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x73,
	0x74, 0x64, 0x64, 0x65, 0x76, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x73, 0x74, 0x64, 0x64, 0x65, 0x76, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x5e, 0x0a, 0x2a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x73,
	0x74, 0x64, 0x64, 0x65, 0x76, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x78, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x2a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61,
	0x72, 0x73, 0x74, 0x64, 0x64, 0x65, 0x76, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x63, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x78, 0x12, 0x58, 0x0a, 0x1d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x73,
	0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53,
	0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x1d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x68,
	0x0a, 0x25, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x73,
	0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x78, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x25, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65,
	0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x78, 0x12, 0x40, 0x0a, 0x1b, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x62, 0x61, 0x72, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1b, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x74, 0x79, 0x70, 0x65, 0x12, 0x50, 0x0a, 0x23, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x62, 0x61, 0x72, 0x74, 0x79, 0x70, 0x65, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x78, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x23, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x78, 0x12, 0x42, 0x0a, 0x13,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x66,
	0x69, 0x6c, 0x6c, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54, 0x53, 0x44, 0x2e,
	0x46, 0x69, 0x6c, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x13, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x66, 0x69, 0x6c, 0x6c,
	0x12, 0x6c, 0x0a, 0x31, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x66, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x21, 0x20, 0x01, 0x28, 0x02, 0x52, 0x31, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x66, 0x69, 0x6c, 0x6c,
	0x75, 0x73, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x4e,
	0x0a, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x66, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x74,
	0x72, 0x6f, 0x6b, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52, 0x22, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x66, 0x69, 0x6c, 0x6c, 0x75,
	0x73, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x44,
	0x0a, 0x1d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x78, 0x70, 0x6c, 0x6f,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x27, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x61, 0x72, 0x61,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x24, 0x20, 0x01, 0x28, 0x05, 0x52, 0x27, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x38,
	0x0a, 0x17, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x6c, 0x69, 0x6e, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x17, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x6c, 0x69, 0x6e, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x5d, 0x0a, 0x1b, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x54, 0x53, 0x4b, 0x2e, 0x54, 0x53, 0x4b, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1b, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x48, 0x0a, 0x1f, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x79, 0x70, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x1f, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x36, 0x0a, 0x16, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x16, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x66, 0x0a, 0x2e, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6f, 0x75, 0x74, 0x73,
	0x69, 0x64, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x29, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x2e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x61,
	0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x6b, 0x0a, 0x22, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x54, 0x53, 0x4b, 0x2e, 0x54, 0x53, 0x4b, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x22, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x3c,
	0x0a, 0x19, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x74, 0x79, 0x70, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x19, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x74, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x15,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73,
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53,
	0x44, 0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x15, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x12, 0x40, 0x0a, 0x1b, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x68, 0x6f, 0x77, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x62, 0x61, 0x72, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x68, 0x6f, 0x77,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x12, 0x50, 0x0a, 0x23, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x68, 0x6f, 0x77, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x62, 0x61, 0x72, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x78, 0x18,
	0x2e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x23, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x68, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x62,
	0x61, 0x72, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x78, 0x12, 0x4a, 0x0a, 0x20, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x68, 0x6f,
	0x77, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x69, 0x6e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x18, 0x2f,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x20, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x68, 0x6f, 0x77, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x69,
	0x6e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x17, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x68, 0x6f, 0x77, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x68, 0x6f, 0x77, 0x6c, 0x69, 0x6e, 0x65,
	0x12, 0x48, 0x0a, 0x1f, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x73, 0x68, 0x6f, 0x77, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x31, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1f, 0x74, 0x73, 0x63, 0x68, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x68, 0x6f, 0x77, 0x6e, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x64, 0x61, 0x74, 0x61, 0x12, 0x48, 0x0a, 0x1f, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x68, 0x6f,
	0x77, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x32, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1f, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x73, 0x68, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x12, 0x3c, 0x0a, 0x19, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x68, 0x6f, 0x77, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x18, 0x33, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x68, 0x6f, 0x77, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x12, 0x42, 0x0a, 0x1c, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x68, 0x6f, 0x77, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x68, 0x6f, 0x77, 0x74, 0x72, 0x65,
	0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x46, 0x0a, 0x1e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x68, 0x6f, 0x77, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x35, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73,
	0x68, 0x6f, 0x77, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x42,
	0x0a, 0x1c, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x73, 0x69, 0x7a, 0x65, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x36,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x1c, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x69, 0x7a, 0x65, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x1a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x37, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x12, 0x48, 0x0a, 0x15, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x15, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x4e, 0x0a, 0x19,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x19, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x12, 0x56, 0x0a, 0x26,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x65, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x26, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x75, 0x73, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x66, 0x69, 0x6c, 0x6c, 0x12, 0x5a, 0x0a, 0x28, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x66, 0x69, 0x6c,
	0x6c, 0x75, 0x73, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65,
	0x18, 0x3b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x28, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x66, 0x69, 0x6c,
	0x6c, 0x75, 0x73, 0x65, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65,
	0x12, 0x3c, 0x0a, 0x19, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x3c, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x19, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x54,
	0x0a, 0x1b, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x3d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1b, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x74,
	0x72, 0x6f, 0x6b, 0x65, 0x12, 0x3c, 0x0a, 0x19, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x58, 0x0a, 0x27, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x65, 0x71,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x78, 0x18, 0x3f, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x27, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x65, 0x71, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x78, 0x12, 0x58, 0x0a, 0x27,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x74,
	0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x65, 0x71, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x79, 0x18, 0x40, 0x20, 0x01, 0x28, 0x02, 0x52, 0x27, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x74, 0x72,
	0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x65, 0x71, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x79, 0x12, 0x50, 0x0a, 0x23, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69,
	0x6e, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x41, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x23, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x44, 0x0a, 0x1d, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x64,
	0x6c, 0x69, 0x6e, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x42, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x1d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x46,
	0x0a, 0x1e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x18, 0x43, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x58, 0x0a, 0x27, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69,
	0x6e, 0x65, 0x72, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x64, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x78, 0x18, 0x44, 0x20, 0x01, 0x28, 0x02, 0x52, 0x27, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e,
	0x65, 0x72, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x64, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x78,
	0x12, 0x58, 0x0a, 0x27, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x71, 0x75,
	0x61, 0x72, 0x65, 0x64, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x79, 0x18, 0x45, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x27, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x71, 0x75, 0x61,
	0x72, 0x65, 0x64, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x79, 0x12, 0x5a, 0x0a, 0x1e, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x74, 0x72, 0x65,
	0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x18, 0x46, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x12, 0x52, 0x0a, 0x24, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x65, 0x71, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x47,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x24, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x68,
	0x6f, 0x77, 0x65, 0x71, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x21, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x74, 0x72, 0x65,
	0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x48, 0x20, 0x01, 0x28, 0x08, 0x52, 0x21, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73,
	0x68, 0x6f, 0x77, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x50, 0x0a, 0x23, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x64,
	0x6c, 0x69, 0x6e, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x72, 0x32, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x49, 0x20, 0x01, 0x28, 0x08, 0x52, 0x23, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73,
	0x68, 0x6f, 0x77, 0x72, 0x32, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x5a, 0x0a, 0x1e, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x74, 0x72, 0x65,
	0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x4a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x1e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x42, 0x0a, 0x1c, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69,
	0x6e, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1c, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x74, 0x72, 0x65,
	0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x58, 0x0a, 0x27, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x74, 0x72, 0x65,
	0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x65, 0x71, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6f, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x27, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x74, 0x72, 0x65, 0x6e,
	0x64, 0x6c, 0x69, 0x6e, 0x65, 0x65, 0x71, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6f, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x12, 0x70, 0x0a, 0x33, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x65, 0x71, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x4d, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x33, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x65, 0x71, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x58, 0x0a, 0x27, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68,
	0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69,
	0x6e, 0x65, 0x72, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x64, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x27, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e,
	0x65, 0x72, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x64, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x12, 0x70, 0x0a, 0x33, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x71, 0x75,
	0x61, 0x72, 0x65, 0x64, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x33, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x74, 0x72,
	0x65, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x64, 0x70,
	0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x4c, 0x0a, 0x21, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x50, 0x20, 0x01, 0x28, 0x05, 0x52, 0x21, 0x74,
	0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x4a, 0x0a, 0x20, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x70, 0x61,
	0x63, 0x69, 0x6e, 0x67, 0x18, 0x51, 0x20, 0x01, 0x28, 0x05, 0x52, 0x20, 0x74, 0x73, 0x63, 0x68,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x46, 0x0a, 0x1e,
	0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x61, 0x78, 0x69, 0x73, 0x18, 0x52,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x1e, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x61, 0x78, 0x69, 0x73, 0x12, 0x44, 0x0a, 0x1d, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x77, 0x65, 0x64, 0x67, 0x65, 0x65, 0x78, 0x70, 0x6c,
	0x6f, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x53, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1d, 0x74, 0x73, 0x63,
	0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x77, 0x65, 0x64, 0x67,
	0x65, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x1b, 0x74, 0x73,
	0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x79, 0x61, 0x78,
	0x69, 0x73, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x54, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x1b, 0x74, 0x73, 0x63, 0x68, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x79, 0x61, 0x78, 0x69, 0x73, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x22, 0xa7, 0x06, 0x0a,
	0x26, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4d, 0x61, 0x70,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x65, 0x0a, 0x1c, 0x74, 0x73, 0x63, 0x68, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x54, 0x53, 0x43, 0x48, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x4e, 0x53, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x1c, 0x74, 0x73, 0x63, 0x68, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x36,
	0x0a, 0x16, 0x74, 0x73, 0x63, 0x68, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16,
	0x74, 0x73, 0x63, 0x68, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x5c, 0x0a, 0x29, 0x74, 0x73, 0x63, 0x68, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x29, 0x74, 0x73, 0x63, 0x68, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x4c, 0x0a, 0x17, 0x74, 0x73, 0x63, 0x68, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x68, 0x61, 0x64,
	0x6f, 0x77, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x17, 0x74, 0x73, 0x63, 0x68, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x68, 0x61, 0x64,
	0x6f, 0x77, 0x12, 0x3e, 0x0a, 0x1a, 0x74, 0x73, 0x63, 0x68, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x74, 0x73, 0x63, 0x68, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x12, 0x3c, 0x0a, 0x19, 0x74, 0x73, 0x63, 0x68, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x74, 0x73, 0x63, 0x68, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x6c, 0x69, 0x6e, 0x65,
	0x12, 0x48, 0x0a, 0x1f, 0x74, 0x73, 0x63, 0x68, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x68, 0x6f, 0x77, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1f, 0x74, 0x73, 0x63, 0x68, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x68, 0x6f, 0x77,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x4c, 0x0a, 0x17, 0x74, 0x73,
	0x63, 0x68, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73,
	0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53,
	0x44, 0x2e, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x17, 0x74, 0x73, 0x63, 0x68, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x74, 0x73, 0x63, 0x68,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x74, 0x73, 0x63, 0x68, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x66,
	0x0a, 0x2e, 0x74, 0x73, 0x63, 0x68, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x70, 0x61, 0x72,
	0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x2e, 0x74, 0x73, 0x63, 0x68, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x2f, 0x6b, 0x70, 0x62,
}

var (
	file_TSCHArchives_GEN_proto_rawDescOnce sync.Once
	file_TSCHArchives_GEN_proto_rawDescData = file_TSCHArchives_GEN_proto_rawDesc
)

func file_TSCHArchives_GEN_proto_rawDescGZIP() []byte {
	file_TSCHArchives_GEN_proto_rawDescOnce.Do(func() {
		file_TSCHArchives_GEN_proto_rawDescData = protoimpl.X.CompressGZIP(file_TSCHArchives_GEN_proto_rawDescData)
	})
	return file_TSCHArchives_GEN_proto_rawDescData
}

var file_TSCHArchives_GEN_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_TSCHArchives_GEN_proto_goTypes = []interface{}{
	(*TSCHGenChartStyleArchive)(nil),               // 0: TSCH.Generated.TSCHGenChartStyleArchive
	(*ChartNonStyleArchive)(nil),                   // 1: TSCH.Generated.ChartNonStyleArchive
	(*LegendStyleArchive)(nil),                     // 2: TSCH.Generated.LegendStyleArchive
	(*LegendNonStyleArchive)(nil),                  // 3: TSCH.Generated.LegendNonStyleArchive
	(*ChartAxisStyleArchive)(nil),                  // 4: TSCH.Generated.ChartAxisStyleArchive
	(*ChartAxisNonStyleArchive)(nil),               // 5: TSCH.Generated.ChartAxisNonStyleArchive
	(*ChartSeriesStyleArchive)(nil),                // 6: TSCH.Generated.ChartSeriesStyleArchive
	(*ChartSeriesNonStyleArchive)(nil),             // 7: TSCH.Generated.ChartSeriesNonStyleArchive
	(*ReferenceLineStyleArchive)(nil),              // 8: TSCH.Generated.ReferenceLineStyleArchive
	(*ReferenceLineNonStyleArchive)(nil),           // 9: TSCH.Generated.ReferenceLineNonStyleArchive
	(*ChartGenericPropertyMapArchive)(nil),         // 10: TSCH.Generated.ChartGenericPropertyMapArchive
	(*LegendGenericPropertyMapArchive)(nil),        // 11: TSCH.Generated.LegendGenericPropertyMapArchive
	(*ChartAxisGenericPropertyMapArchive)(nil),     // 12: TSCH.Generated.ChartAxisGenericPropertyMapArchive
	(*ChartSeriesGenericPropertyMapArchive)(nil),   // 13: TSCH.Generated.ChartSeriesGenericPropertyMapArchive
	(*ReferenceLineGenericPropertyMapArchive)(nil), // 14: TSCH.Generated.ReferenceLineGenericPropertyMapArchive
	(*Chart3DLightingPackageArchive)(nil),          // 15: TSCH.Chart3DLightingPackageArchive
	(*FillArchive)(nil),                            // 16: TSD.FillArchive
	(*StrokeArchive)(nil),                          // 17: TSD.StrokeArchive
	(*ShadowArchive)(nil),                          // 18: TSD.ShadowArchive
	(*Color)(nil),                                  // 19: TSP.Color
	(*Chart3DVectorArchive)(nil),                   // 20: TSCH.Chart3DVectorArchive
	(*TSKFormatStructArchive)(nil),                 // 21: TSK.TSKFormatStructArchive
	(*ChartsNSNumberDoubleArchive)(nil),            // 22: TSCH.ChartsNSNumberDoubleArchive
	(*LineEndArchive)(nil),                         // 23: TSD.LineEndArchive
	(*ChartsNSArrayOfNSNumberDoubleArchive)(nil),   // 24: TSCH.ChartsNSArrayOfNSNumberDoubleArchive
	(*TSCHCommonChartStyleArchive)(nil),            // 25: TSCH.TSCHCommonChartStyleArchive
	(*TSCHCommonChartNonStyleArchive)(nil),         // 26: TSCH.TSCHCommonChartNonStyleArchive
	(*TSCHCommonLegendStyleArchive)(nil),           // 27: TSCH.TSCHCommonLegendStyleArchive
	(*TSCHCommonLegendNonStyleArchive)(nil),        // 28: TSCH.TSCHCommonLegendNonStyleArchive
	(*TSCHCommonChartAxisStyleArchive)(nil),        // 29: TSCH.TSCHCommonChartAxisStyleArchive
	(*TSCHCommonChartAxisNonStyleArchive)(nil),     // 30: TSCH.TSCHCommonChartAxisNonStyleArchive
	(*TSCHCommonChartSeriesStyleArchive)(nil),      // 31: TSCH.TSCHCommonChartSeriesStyleArchive
	(*TSCHCommonChartSeriesNonStyleArchive)(nil),   // 32: TSCH.TSCHCommonChartSeriesNonStyleArchive
	(*TSCHCommonReferenceLineStyleArchive)(nil),    // 33: TSCH.TSCHCommonReferenceLineStyleArchive
	(*TSCHCommonReferenceLineNonStyleArchive)(nil), // 34: TSCH.TSCHCommonReferenceLineNonStyleArchive
}
var file_TSCHArchives_GEN_proto_depIdxs = []int32{
	15,  // 0: TSCH.Generated.TSCHGenChartStyleArchive.tschchartinfoarea3dlightingpackage:type_name -> TSCH.Chart3DLightingPackageArchive
	15,  // 1: TSCH.Generated.TSCHGenChartStyleArchive.tschchartinfobar3dlightingpackage:type_name -> TSCH.Chart3DLightingPackageArchive
	15,  // 2: TSCH.Generated.TSCHGenChartStyleArchive.tschchartinfocolumn3dlightingpackage:type_name -> TSCH.Chart3DLightingPackageArchive
	15,  // 3: TSCH.Generated.TSCHGenChartStyleArchive.tschchartinfodefault3dlightingpackage:type_name -> TSCH.Chart3DLightingPackageArchive
	15,  // 4: TSCH.Generated.TSCHGenChartStyleArchive.tschchartinfoline3dlightingpackage:type_name -> TSCH.Chart3DLightingPackageArchive
	15,  // 5: TSCH.Generated.TSCHGenChartStyleArchive.tschchartinfopie3dlightingpackage:type_name -> TSCH.Chart3DLightingPackageArchive
	16,  // 6: TSCH.Generated.TSCHGenChartStyleArchive.tschchartinfodefaultbackgroundfill:type_name -> TSD.FillArchive
	17,  // 7: TSCH.Generated.TSCHGenChartStyleArchive.tschchartinfodefaultbackgroundstroke:type_name -> TSD.StrokeArchive
	18,  // 8: TSCH.Generated.TSCHGenChartStyleArchive.tschchartinfodefaultbordershadow:type_name -> TSD.ShadowArchive
	17,  // 9: TSCH.Generated.TSCHGenChartStyleArchive.tschchartinfodefaultborderstroke:type_name -> TSD.StrokeArchive
	16,  // 10: TSCH.Generated.TSCHGenChartStyleArchive.tschchartinfodefaultgridbackgroundfill:type_name -> TSD.FillArchive
	19,  // 11: TSCH.Generated.TSCHGenChartStyleArchive.tschchartinfodefaulttitlecolor:type_name -> TSP.Color
	20,  // 12: TSCH.Generated.ChartNonStyleArchive.tschchartinfodefault3drotation:type_name -> TSCH.Chart3DVectorArchive
	20,  // 13: TSCH.Generated.ChartNonStyleArchive.tschchartinfoarea3dscale:type_name -> TSCH.Chart3DVectorArchive
	20,  // 14: TSCH.Generated.ChartNonStyleArchive.tschchartinfobar3dscale:type_name -> TSCH.Chart3DVectorArchive
	20,  // 15: TSCH.Generated.ChartNonStyleArchive.tschchartinfocolumn3dscale:type_name -> TSCH.Chart3DVectorArchive
	20,  // 16: TSCH.Generated.ChartNonStyleArchive.tschchartinfodefault3dscale:type_name -> TSCH.Chart3DVectorArchive
	20,  // 17: TSCH.Generated.ChartNonStyleArchive.tschchartinfoline3dscale:type_name -> TSCH.Chart3DVectorArchive
	20,  // 18: TSCH.Generated.ChartNonStyleArchive.tschchartinfopie3dscale:type_name -> TSCH.Chart3DVectorArchive
	20,  // 19: TSCH.Generated.ChartNonStyleArchive.tschchartinfodefault3dviewport:type_name -> TSCH.Chart3DVectorArchive
	16,  // 20: TSCH.Generated.LegendStyleArchive.tschlegendmodeldefaultfill:type_name -> TSD.FillArchive
	18,  // 21: TSCH.Generated.LegendStyleArchive.tschlegendmodeldefaultshadow:type_name -> TSD.ShadowArchive
	17,  // 22: TSCH.Generated.LegendStyleArchive.tschlegendmodeldefaultstroke:type_name -> TSD.StrokeArchive
	17,  // 23: TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategory3dgridlinestroke:type_name -> TSD.StrokeArchive
	17,  // 24: TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvalue3dgridlinestroke:type_name -> TSD.StrokeArchive
	18,  // 25: TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategorymajorgridlineshadow:type_name -> TSD.ShadowArchive
	18,  // 26: TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvaluemajorgridlineshadow:type_name -> TSD.ShadowArchive
	17,  // 27: TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategorymajorgridlinestroke:type_name -> TSD.StrokeArchive
	17,  // 28: TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvaluemajorgridlinestroke:type_name -> TSD.StrokeArchive
	18,  // 29: TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategoryminorgridlineshadow:type_name -> TSD.ShadowArchive
	18,  // 30: TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvalueminorgridlineshadow:type_name -> TSD.ShadowArchive
	17,  // 31: TSCH.Generated.ChartAxisStyleArchive.tschchartaxiscategoryminorgridlinestroke:type_name -> TSD.StrokeArchive
	17,  // 32: TSCH.Generated.ChartAxisStyleArchive.tschchartaxisvalueminorgridlinestroke:type_name -> TSD.StrokeArchive
	21,  // 33: TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisdefault1_0dateformat:type_name -> TSK.TSKFormatStructArchive
	21,  // 34: TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisdefault1_0numberformat:type_name -> TSK.TSKFormatStructArchive
	21,  // 35: TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisdefaultdateformat:type_name -> TSK.TSKFormatStructArchive
	21,  // 36: TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisdefaultdurationformat:type_name -> TSK.TSKFormatStructArchive
	21,  // 37: TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisdefaultnumberformat:type_name -> TSK.TSKFormatStructArchive
	22,  // 38: TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisdefaultusermax:type_name -> TSCH.ChartsNSNumberDoubleArchive
	22,  // 39: TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisdefaultusermin:type_name -> TSCH.ChartsNSNumberDoubleArchive
	23,  // 40: TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaultcalloutlineendlineend:type_name -> TSD.LineEndArchive
	23,  // 41: TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaultcalloutlinestartlineend:type_name -> TSD.LineEndArchive
	17,  // 42: TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaultcalloutlinestrokestyle:type_name -> TSD.StrokeArchive
	23,  // 43: TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarlineend:type_name -> TSD.LineEndArchive
	23,  // 44: TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarlineendscatterx:type_name -> TSD.LineEndArchive
	18,  // 45: TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarshadow:type_name -> TSD.ShadowArchive
	17,  // 46: TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarstroke:type_name -> TSD.StrokeArchive
	17,  // 47: TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulterrorbarstrokescatterx:type_name -> TSD.StrokeArchive
	16,  // 48: TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dareafill:type_name -> TSD.FillArchive
	16,  // 49: TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dbarfill:type_name -> TSD.FillArchive
	16,  // 50: TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dcolumnfill:type_name -> TSD.FillArchive
	16,  // 51: TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dlinefill:type_name -> TSD.FillArchive
	16,  // 52: TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dpiefill:type_name -> TSD.FillArchive
	16,  // 53: TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareafill:type_name -> TSD.FillArchive
	16,  // 54: TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbarfill:type_name -> TSD.FillArchive
	16,  // 55: TSCH.Generated.ChartSeriesStyleArchive.tschchartseriescolumnfill:type_name -> TSD.FillArchive
	16,  // 56: TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaultfill:type_name -> TSD.FillArchive
	16,  // 57: TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareafill:type_name -> TSD.FillArchive
	16,  // 58: TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedcolumnfill:type_name -> TSD.FillArchive
	16,  // 59: TSCH.Generated.ChartSeriesStyleArchive.tschchartseriespiefill:type_name -> TSD.FillArchive
	16,  // 60: TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesradarareafill:type_name -> TSD.FillArchive
	18,  // 61: TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dareashadow:type_name -> TSD.ShadowArchive
	18,  // 62: TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dbarshadow:type_name -> TSD.ShadowArchive
	18,  // 63: TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dcolumnshadow:type_name -> TSD.ShadowArchive
	18,  // 64: TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dlineshadow:type_name -> TSD.ShadowArchive
	18,  // 65: TSCH.Generated.ChartSeriesStyleArchive.tschchartseries3dpieshadow:type_name -> TSD.ShadowArchive
	18,  // 66: TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareashadow:type_name -> TSD.ShadowArchive
	18,  // 67: TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbarshadow:type_name -> TSD.ShadowArchive
	18,  // 68: TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbubbleshadow:type_name -> TSD.ShadowArchive
	18,  // 69: TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaultshadow:type_name -> TSD.ShadowArchive
	18,  // 70: TSCH.Generated.ChartSeriesStyleArchive.tschchartserieslineshadow:type_name -> TSD.ShadowArchive
	18,  // 71: TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareashadow:type_name -> TSD.ShadowArchive
	18,  // 72: TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedcolumnshadow:type_name -> TSD.ShadowArchive
	18,  // 73: TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedlineshadow:type_name -> TSD.ShadowArchive
	18,  // 74: TSCH.Generated.ChartSeriesStyleArchive.tschchartseriespieshadow:type_name -> TSD.ShadowArchive
	18,  // 75: TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesradarareashadow:type_name -> TSD.ShadowArchive
	18,  // 76: TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesscattershadow:type_name -> TSD.ShadowArchive
	17,  // 77: TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareastroke:type_name -> TSD.StrokeArchive
	17,  // 78: TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbarstroke:type_name -> TSD.StrokeArchive
	17,  // 79: TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbubblestroke:type_name -> TSD.StrokeArchive
	17,  // 80: TSCH.Generated.ChartSeriesStyleArchive.tschchartserieslinestroke:type_name -> TSD.StrokeArchive
	17,  // 81: TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareastroke:type_name -> TSD.StrokeArchive
	17,  // 82: TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedcolumnstroke:type_name -> TSD.StrokeArchive
	17,  // 83: TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedlinestroke:type_name -> TSD.StrokeArchive
	17,  // 84: TSCH.Generated.ChartSeriesStyleArchive.tschchartseriespiestroke:type_name -> TSD.StrokeArchive
	17,  // 85: TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesradarareastroke:type_name -> TSD.StrokeArchive
	17,  // 86: TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesscatterstroke:type_name -> TSD.StrokeArchive
	16,  // 87: TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareasymbolfill:type_name -> TSD.FillArchive
	16,  // 88: TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbubblesymbolfill:type_name -> TSD.FillArchive
	16,  // 89: TSCH.Generated.ChartSeriesStyleArchive.tschchartserieslinesymbolfill:type_name -> TSD.FillArchive
	16,  // 90: TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareasymbolfill:type_name -> TSD.FillArchive
	16,  // 91: TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedlinesymbolfill:type_name -> TSD.FillArchive
	16,  // 92: TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesradarareasymbolfill:type_name -> TSD.FillArchive
	16,  // 93: TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesscattersymbolfill:type_name -> TSD.FillArchive
	17,  // 94: TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesareasymbolstroke:type_name -> TSD.StrokeArchive
	17,  // 95: TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesbubblesymbolstroke:type_name -> TSD.StrokeArchive
	17,  // 96: TSCH.Generated.ChartSeriesStyleArchive.tschchartserieslinesymbolstroke:type_name -> TSD.StrokeArchive
	17,  // 97: TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedareasymbolstroke:type_name -> TSD.StrokeArchive
	17,  // 98: TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesmixedlinesymbolstroke:type_name -> TSD.StrokeArchive
	17,  // 99: TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesradarareasymbolstroke:type_name -> TSD.StrokeArchive
	17,  // 100: TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesscattersymbolstroke:type_name -> TSD.StrokeArchive
	18,  // 101: TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulttrendlineshadow:type_name -> TSD.ShadowArchive
	17,  // 102: TSCH.Generated.ChartSeriesStyleArchive.tschchartseriesdefaulttrendlinestroke:type_name -> TSD.StrokeArchive
	21,  // 103: TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefault1_0dateformat:type_name -> TSK.TSKFormatStructArchive
	21,  // 104: TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefault1_0numberformat:type_name -> TSK.TSKFormatStructArchive
	21,  // 105: TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriespie1_0numberformat:type_name -> TSK.TSKFormatStructArchive
	21,  // 106: TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaultdateformat:type_name -> TSK.TSKFormatStructArchive
	21,  // 107: TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaultdurationformat:type_name -> TSK.TSKFormatStructArchive
	24,  // 108: TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarcustomnegativedata:type_name -> TSCH.ChartsNSArrayOfNSNumberDoubleArchive
	24,  // 109: TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarcustomnegativedatascatterx:type_name -> TSCH.ChartsNSArrayOfNSNumberDoubleArchive
	24,  // 110: TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarcustompositivedata:type_name -> TSCH.ChartsNSArrayOfNSNumberDoubleArchive
	24,  // 111: TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulterrorbarcustompositivedatascatterx:type_name -> TSCH.ChartsNSArrayOfNSNumberDoubleArchive
	21,  // 112: TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaultnumberformat:type_name -> TSK.TSKFormatStructArchive
	21,  // 113: TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriespienumberformat:type_name -> TSK.TSKFormatStructArchive
	21,  // 114: TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesstackedpercentnumberformat:type_name -> TSK.TSKFormatStructArchive
	18,  // 115: TSCH.Generated.ReferenceLineStyleArchive.tschreferencelinedefaultshadow:type_name -> TSD.ShadowArchive
	17,  // 116: TSCH.Generated.ReferenceLineStyleArchive.tschreferencelinedefaultstroke:type_name -> TSD.StrokeArchive
	22,  // 117: TSCH.Generated.ReferenceLineNonStyleArchive.tschreferencelinedefaultcustomvalue:type_name -> TSCH.ChartsNSNumberDoubleArchive
	15,  // 118: TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfo3dlightingpackage:type_name -> TSCH.Chart3DLightingPackageArchive
	20,  // 119: TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfo3drotation:type_name -> TSCH.Chart3DVectorArchive
	20,  // 120: TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfo3dscale:type_name -> TSCH.Chart3DVectorArchive
	20,  // 121: TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfo3dviewport:type_name -> TSCH.Chart3DVectorArchive
	16,  // 122: TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfobackgroundfill:type_name -> TSD.FillArchive
	17,  // 123: TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfobackgroundstroke:type_name -> TSD.StrokeArchive
	18,  // 124: TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfobordershadow:type_name -> TSD.ShadowArchive
	17,  // 125: TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfoborderstroke:type_name -> TSD.StrokeArchive
	16,  // 126: TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfogridbackgroundfill:type_name -> TSD.FillArchive
	19,  // 127: TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfotitlecolor:type_name -> TSP.Color
	16,  // 128: TSCH.Generated.LegendGenericPropertyMapArchive.tschlegendmodelfill:type_name -> TSD.FillArchive
	18,  // 129: TSCH.Generated.LegendGenericPropertyMapArchive.tschlegendmodelshadow:type_name -> TSD.ShadowArchive
	17,  // 130: TSCH.Generated.LegendGenericPropertyMapArchive.tschlegendmodelstroke:type_name -> TSD.StrokeArchive
	21,  // 131: TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxis1_0dateformat:type_name -> TSK.TSKFormatStructArchive
	21,  // 132: TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxis1_0numberformat:type_name -> TSK.TSKFormatStructArchive
	17,  // 133: TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxis3dgridlinestroke:type_name -> TSD.StrokeArchive
	21,  // 134: TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisdateformat:type_name -> TSK.TSKFormatStructArchive
	21,  // 135: TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisdurationformat:type_name -> TSK.TSKFormatStructArchive
	18,  // 136: TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxismajorgridlineshadow:type_name -> TSD.ShadowArchive
	17,  // 137: TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxismajorgridlinestroke:type_name -> TSD.StrokeArchive
	18,  // 138: TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisminorgridlineshadow:type_name -> TSD.ShadowArchive
	17,  // 139: TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisminorgridlinestroke:type_name -> TSD.StrokeArchive
	21,  // 140: TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisnumberformat:type_name -> TSK.TSKFormatStructArchive
	22,  // 141: TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisusermax:type_name -> TSCH.ChartsNSNumberDoubleArchive
	22,  // 142: TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxisusermin:type_name -> TSCH.ChartsNSNumberDoubleArchive
	21,  // 143: TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseries1_0dateformat:type_name -> TSK.TSKFormatStructArchive
	21,  // 144: TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseries1_0numberformat:type_name -> TSK.TSKFormatStructArchive
	23,  // 145: TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriescalloutlineendlineend:type_name -> TSD.LineEndArchive
	23,  // 146: TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriescalloutlinestartlineend:type_name -> TSD.LineEndArchive
	17,  // 147: TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriescalloutlinestrokestyle:type_name -> TSD.StrokeArchive
	21,  // 148: TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesdateformat:type_name -> TSK.TSKFormatStructArchive
	21,  // 149: TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesdurationformat:type_name -> TSK.TSKFormatStructArchive
	24,  // 150: TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarcustomnegativedata:type_name -> TSCH.ChartsNSArrayOfNSNumberDoubleArchive
	24,  // 151: TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarcustomnegativedatascatterx:type_name -> TSCH.ChartsNSArrayOfNSNumberDoubleArchive
	24,  // 152: TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarcustompositivedata:type_name -> TSCH.ChartsNSArrayOfNSNumberDoubleArchive
	24,  // 153: TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarcustompositivedatascatterx:type_name -> TSCH.ChartsNSArrayOfNSNumberDoubleArchive
	23,  // 154: TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarlineend:type_name -> TSD.LineEndArchive
	23,  // 155: TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarlineendscatterx:type_name -> TSD.LineEndArchive
	18,  // 156: TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarshadow:type_name -> TSD.ShadowArchive
	17,  // 157: TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarstroke:type_name -> TSD.StrokeArchive
	17,  // 158: TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartserieserrorbarstrokescatterx:type_name -> TSD.StrokeArchive
	16,  // 159: TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesfill:type_name -> TSD.FillArchive
	21,  // 160: TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesnumberformat:type_name -> TSK.TSKFormatStructArchive
	21,  // 161: TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriespercentnumberformat:type_name -> TSK.TSKFormatStructArchive
	18,  // 162: TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesshadow:type_name -> TSD.ShadowArchive
	17,  // 163: TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriesstroke:type_name -> TSD.StrokeArchive
	16,  // 164: TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriessymbolfill:type_name -> TSD.FillArchive
	17,  // 165: TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriessymbolstroke:type_name -> TSD.StrokeArchive
	18,  // 166: TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriestrendlineshadow:type_name -> TSD.ShadowArchive
	17,  // 167: TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriestrendlinestroke:type_name -> TSD.StrokeArchive
	22,  // 168: TSCH.Generated.ReferenceLineGenericPropertyMapArchive.tschreferencelinecustomvalue:type_name -> TSCH.ChartsNSNumberDoubleArchive
	18,  // 169: TSCH.Generated.ReferenceLineGenericPropertyMapArchive.tschreferencelineshadow:type_name -> TSD.ShadowArchive
	17,  // 170: TSCH.Generated.ReferenceLineGenericPropertyMapArchive.tschreferencelinestroke:type_name -> TSD.StrokeArchive
	25,  // 171: TSCH.Generated.TSCHGenChartStyleArchive.current:extendee -> TSCH.TSCHCommonChartStyleArchive
	26,  // 172: TSCH.Generated.ChartNonStyleArchive.current:extendee -> TSCH.TSCHCommonChartNonStyleArchive
	27,  // 173: TSCH.Generated.LegendStyleArchive.current:extendee -> TSCH.TSCHCommonLegendStyleArchive
	28,  // 174: TSCH.Generated.LegendNonStyleArchive.current:extendee -> TSCH.TSCHCommonLegendNonStyleArchive
	29,  // 175: TSCH.Generated.ChartAxisStyleArchive.current:extendee -> TSCH.TSCHCommonChartAxisStyleArchive
	30,  // 176: TSCH.Generated.ChartAxisNonStyleArchive.current:extendee -> TSCH.TSCHCommonChartAxisNonStyleArchive
	31,  // 177: TSCH.Generated.ChartSeriesStyleArchive.current:extendee -> TSCH.TSCHCommonChartSeriesStyleArchive
	32,  // 178: TSCH.Generated.ChartSeriesNonStyleArchive.current:extendee -> TSCH.TSCHCommonChartSeriesNonStyleArchive
	33,  // 179: TSCH.Generated.ReferenceLineStyleArchive.current:extendee -> TSCH.TSCHCommonReferenceLineStyleArchive
	34,  // 180: TSCH.Generated.ReferenceLineNonStyleArchive.current:extendee -> TSCH.TSCHCommonReferenceLineNonStyleArchive
	25,  // 181: TSCH.Generated.TSCHGenChartStyleArchive.current:type_name -> TSCH.TSCHCommonChartStyleArchive
	26,  // 182: TSCH.Generated.ChartNonStyleArchive.current:type_name -> TSCH.TSCHCommonChartNonStyleArchive
	27,  // 183: TSCH.Generated.LegendStyleArchive.current:type_name -> TSCH.TSCHCommonLegendStyleArchive
	28,  // 184: TSCH.Generated.LegendNonStyleArchive.current:type_name -> TSCH.TSCHCommonLegendNonStyleArchive
	29,  // 185: TSCH.Generated.ChartAxisStyleArchive.current:type_name -> TSCH.TSCHCommonChartAxisStyleArchive
	30,  // 186: TSCH.Generated.ChartAxisNonStyleArchive.current:type_name -> TSCH.TSCHCommonChartAxisNonStyleArchive
	31,  // 187: TSCH.Generated.ChartSeriesStyleArchive.current:type_name -> TSCH.TSCHCommonChartSeriesStyleArchive
	32,  // 188: TSCH.Generated.ChartSeriesNonStyleArchive.current:type_name -> TSCH.TSCHCommonChartSeriesNonStyleArchive
	33,  // 189: TSCH.Generated.ReferenceLineStyleArchive.current:type_name -> TSCH.TSCHCommonReferenceLineStyleArchive
	34,  // 190: TSCH.Generated.ReferenceLineNonStyleArchive.current:type_name -> TSCH.TSCHCommonReferenceLineNonStyleArchive
	191, // [191:191] is the sub-list for method output_type
	191, // [191:191] is the sub-list for method input_type
	181, // [181:191] is the sub-list for extension type_name
	171, // [171:181] is the sub-list for extension extendee
	0,   // [0:171] is the sub-list for field type_name
}

func init() { file_TSCHArchives_GEN_proto_init() }
func file_TSCHArchives_GEN_proto_init() {
	if File_TSCHArchives_GEN_proto != nil {
		return
	}
	file_TSPMessages_proto_init()
	file_TSKArchives_proto_init()
	file_TSDArchives_proto_init()
	file_TSCHArchives_Common_proto_init()
	file_TSCH3DArchives_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_TSCHArchives_GEN_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSCHGenChartStyleArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHArchives_GEN_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartNonStyleArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHArchives_GEN_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LegendStyleArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHArchives_GEN_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LegendNonStyleArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHArchives_GEN_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartAxisStyleArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHArchives_GEN_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartAxisNonStyleArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHArchives_GEN_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartSeriesStyleArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHArchives_GEN_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartSeriesNonStyleArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHArchives_GEN_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferenceLineStyleArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHArchives_GEN_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferenceLineNonStyleArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHArchives_GEN_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartGenericPropertyMapArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHArchives_GEN_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LegendGenericPropertyMapArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHArchives_GEN_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartAxisGenericPropertyMapArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHArchives_GEN_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartSeriesGenericPropertyMapArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSCHArchives_GEN_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferenceLineGenericPropertyMapArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_TSCHArchives_GEN_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 10,
			NumServices:   0,
		},
		GoTypes:           file_TSCHArchives_GEN_proto_goTypes,
		DependencyIndexes: file_TSCHArchives_GEN_proto_depIdxs,
		MessageInfos:      file_TSCHArchives_GEN_proto_msgTypes,
		ExtensionInfos:    file_TSCHArchives_GEN_proto_extTypes,
	}.Build()
	File_TSCHArchives_GEN_proto = out.File
	file_TSCHArchives_GEN_proto_rawDesc = nil
	file_TSCHArchives_GEN_proto_goTypes = nil
	file_TSCHArchives_GEN_proto_depIdxs = nil
}
