// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: TSDArchives_sos.proto

package kpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SpecSetFillArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fill  *FillArchive `protobuf:"bytes,1,opt,name=fill" json:"fill,omitempty"`
	Unset *bool        `protobuf:"varint,2,req,name=unset" json:"unset,omitempty"`
}

func (x *SpecSetFillArchive) Reset() {
	*x = SpecSetFillArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_sos_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecSetFillArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecSetFillArchive) ProtoMessage() {}

func (x *SpecSetFillArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_sos_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecSetFillArchive.ProtoReflect.Descriptor instead.
func (*SpecSetFillArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_sos_proto_rawDescGZIP(), []int{0}
}

func (x *SpecSetFillArchive) GetFill() *FillArchive {
	if x != nil {
		return x.Fill
	}
	return nil
}

func (x *SpecSetFillArchive) GetUnset() bool {
	if x != nil && x.Unset != nil {
		return *x.Unset
	}
	return false
}

type SpecSetLineEndArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LineEnd *LineEndArchive `protobuf:"bytes,1,opt,name=line_end,json=lineEnd" json:"line_end,omitempty"`
	Unset   *bool           `protobuf:"varint,2,req,name=unset" json:"unset,omitempty"`
}

func (x *SpecSetLineEndArchive) Reset() {
	*x = SpecSetLineEndArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_sos_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecSetLineEndArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecSetLineEndArchive) ProtoMessage() {}

func (x *SpecSetLineEndArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_sos_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecSetLineEndArchive.ProtoReflect.Descriptor instead.
func (*SpecSetLineEndArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_sos_proto_rawDescGZIP(), []int{1}
}

func (x *SpecSetLineEndArchive) GetLineEnd() *LineEndArchive {
	if x != nil {
		return x.LineEnd
	}
	return nil
}

func (x *SpecSetLineEndArchive) GetUnset() bool {
	if x != nil && x.Unset != nil {
		return *x.Unset
	}
	return false
}

type SpecSetReflectionArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reflection *ReflectionArchive `protobuf:"bytes,1,opt,name=reflection" json:"reflection,omitempty"`
	Unset      *bool              `protobuf:"varint,2,req,name=unset" json:"unset,omitempty"`
}

func (x *SpecSetReflectionArchive) Reset() {
	*x = SpecSetReflectionArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_sos_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecSetReflectionArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecSetReflectionArchive) ProtoMessage() {}

func (x *SpecSetReflectionArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_sos_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecSetReflectionArchive.ProtoReflect.Descriptor instead.
func (*SpecSetReflectionArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_sos_proto_rawDescGZIP(), []int{2}
}

func (x *SpecSetReflectionArchive) GetReflection() *ReflectionArchive {
	if x != nil {
		return x.Reflection
	}
	return nil
}

func (x *SpecSetReflectionArchive) GetUnset() bool {
	if x != nil && x.Unset != nil {
		return *x.Unset
	}
	return false
}

type SpecSetShadowArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Shadow *ShadowArchive `protobuf:"bytes,1,opt,name=shadow" json:"shadow,omitempty"`
	Unset  *bool          `protobuf:"varint,2,req,name=unset" json:"unset,omitempty"`
}

func (x *SpecSetShadowArchive) Reset() {
	*x = SpecSetShadowArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_sos_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecSetShadowArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecSetShadowArchive) ProtoMessage() {}

func (x *SpecSetShadowArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_sos_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecSetShadowArchive.ProtoReflect.Descriptor instead.
func (*SpecSetShadowArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_sos_proto_rawDescGZIP(), []int{3}
}

func (x *SpecSetShadowArchive) GetShadow() *ShadowArchive {
	if x != nil {
		return x.Shadow
	}
	return nil
}

func (x *SpecSetShadowArchive) GetUnset() bool {
	if x != nil && x.Unset != nil {
		return *x.Unset
	}
	return false
}

type SpecSetStrokeArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stroke *StrokeArchive `protobuf:"bytes,1,opt,name=stroke" json:"stroke,omitempty"`
	Unset  *bool          `protobuf:"varint,2,req,name=unset" json:"unset,omitempty"`
}

func (x *SpecSetStrokeArchive) Reset() {
	*x = SpecSetStrokeArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_sos_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecSetStrokeArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecSetStrokeArchive) ProtoMessage() {}

func (x *SpecSetStrokeArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_sos_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecSetStrokeArchive.ProtoReflect.Descriptor instead.
func (*SpecSetStrokeArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_sos_proto_rawDescGZIP(), []int{4}
}

func (x *SpecSetStrokeArchive) GetStroke() *StrokeArchive {
	if x != nil {
		return x.Stroke
	}
	return nil
}

func (x *SpecSetStrokeArchive) GetUnset() bool {
	if x != nil && x.Unset != nil {
		return *x.Unset
	}
	return false
}

type SpecFillArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpecColorFillSetColor     *SpecColorFillSetColorArchive     `protobuf:"bytes,1,opt,name=spec_color_fill_set_color,json=specColorFillSetColor" json:"spec_color_fill_set_color,omitempty"`
	SpecGradientFillSetAngle  *SpecGradientFillSetAngleArchive  `protobuf:"bytes,2,opt,name=spec_gradient_fill_set_angle,json=specGradientFillSetAngle" json:"spec_gradient_fill_set_angle,omitempty"`
	SpecImageFillSetTechnique *SpecImageFillSetTechniqueArchive `protobuf:"bytes,3,opt,name=spec_image_fill_set_technique,json=specImageFillSetTechnique" json:"spec_image_fill_set_technique,omitempty"`
	SpecSetFill               *SpecSetFillArchive               `protobuf:"bytes,4,opt,name=spec_set_fill,json=specSetFill" json:"spec_set_fill,omitempty"`
}

func (x *SpecFillArchive) Reset() {
	*x = SpecFillArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_sos_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecFillArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecFillArchive) ProtoMessage() {}

func (x *SpecFillArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_sos_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecFillArchive.ProtoReflect.Descriptor instead.
func (*SpecFillArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_sos_proto_rawDescGZIP(), []int{5}
}

func (x *SpecFillArchive) GetSpecColorFillSetColor() *SpecColorFillSetColorArchive {
	if x != nil {
		return x.SpecColorFillSetColor
	}
	return nil
}

func (x *SpecFillArchive) GetSpecGradientFillSetAngle() *SpecGradientFillSetAngleArchive {
	if x != nil {
		return x.SpecGradientFillSetAngle
	}
	return nil
}

func (x *SpecFillArchive) GetSpecImageFillSetTechnique() *SpecImageFillSetTechniqueArchive {
	if x != nil {
		return x.SpecImageFillSetTechnique
	}
	return nil
}

func (x *SpecFillArchive) GetSpecSetFill() *SpecSetFillArchive {
	if x != nil {
		return x.SpecSetFill
	}
	return nil
}

type SpecLineEndArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpecSetLineEnd *SpecSetLineEndArchive `protobuf:"bytes,1,opt,name=spec_set_line_end,json=specSetLineEnd" json:"spec_set_line_end,omitempty"`
}

func (x *SpecLineEndArchive) Reset() {
	*x = SpecLineEndArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_sos_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecLineEndArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecLineEndArchive) ProtoMessage() {}

func (x *SpecLineEndArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_sos_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecLineEndArchive.ProtoReflect.Descriptor instead.
func (*SpecLineEndArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_sos_proto_rawDescGZIP(), []int{6}
}

func (x *SpecLineEndArchive) GetSpecSetLineEnd() *SpecSetLineEndArchive {
	if x != nil {
		return x.SpecSetLineEnd
	}
	return nil
}

type SpecReflectionArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpecReflectionSetOpacity *SpecReflectionSetOpacityArchive `protobuf:"bytes,1,opt,name=spec_reflection_set_opacity,json=specReflectionSetOpacity" json:"spec_reflection_set_opacity,omitempty"`
	SpecSetReflection        *SpecSetReflectionArchive        `protobuf:"bytes,2,opt,name=spec_set_reflection,json=specSetReflection" json:"spec_set_reflection,omitempty"`
}

func (x *SpecReflectionArchive) Reset() {
	*x = SpecReflectionArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_sos_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecReflectionArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecReflectionArchive) ProtoMessage() {}

func (x *SpecReflectionArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_sos_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecReflectionArchive.ProtoReflect.Descriptor instead.
func (*SpecReflectionArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_sos_proto_rawDescGZIP(), []int{7}
}

func (x *SpecReflectionArchive) GetSpecReflectionSetOpacity() *SpecReflectionSetOpacityArchive {
	if x != nil {
		return x.SpecReflectionSetOpacity
	}
	return nil
}

func (x *SpecReflectionArchive) GetSpecSetReflection() *SpecSetReflectionArchive {
	if x != nil {
		return x.SpecSetReflection
	}
	return nil
}

type SpecShadowArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpecSetShadow        *SpecSetShadowArchive        `protobuf:"bytes,1,opt,name=spec_set_shadow,json=specSetShadow" json:"spec_set_shadow,omitempty"`
	SpecShadowSetAngle   *SpecShadowSetAngleArchive   `protobuf:"bytes,2,opt,name=spec_shadow_set_angle,json=specShadowSetAngle" json:"spec_shadow_set_angle,omitempty"`
	SpecShadowSetColor   *SpecShadowSetColorArchive   `protobuf:"bytes,3,opt,name=spec_shadow_set_color,json=specShadowSetColor" json:"spec_shadow_set_color,omitempty"`
	SpecShadowSetOffset  *SpecShadowSetOffsetArchive  `protobuf:"bytes,4,opt,name=spec_shadow_set_offset,json=specShadowSetOffset" json:"spec_shadow_set_offset,omitempty"`
	SpecShadowSetOpacity *SpecShadowSetOpacityArchive `protobuf:"bytes,5,opt,name=spec_shadow_set_opacity,json=specShadowSetOpacity" json:"spec_shadow_set_opacity,omitempty"`
	SpecShadowSetRadius  *SpecShadowSetRadiusArchive  `protobuf:"bytes,6,opt,name=spec_shadow_set_radius,json=specShadowSetRadius" json:"spec_shadow_set_radius,omitempty"`
}

func (x *SpecShadowArchive) Reset() {
	*x = SpecShadowArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_sos_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecShadowArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecShadowArchive) ProtoMessage() {}

func (x *SpecShadowArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_sos_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecShadowArchive.ProtoReflect.Descriptor instead.
func (*SpecShadowArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_sos_proto_rawDescGZIP(), []int{8}
}

func (x *SpecShadowArchive) GetSpecSetShadow() *SpecSetShadowArchive {
	if x != nil {
		return x.SpecSetShadow
	}
	return nil
}

func (x *SpecShadowArchive) GetSpecShadowSetAngle() *SpecShadowSetAngleArchive {
	if x != nil {
		return x.SpecShadowSetAngle
	}
	return nil
}

func (x *SpecShadowArchive) GetSpecShadowSetColor() *SpecShadowSetColorArchive {
	if x != nil {
		return x.SpecShadowSetColor
	}
	return nil
}

func (x *SpecShadowArchive) GetSpecShadowSetOffset() *SpecShadowSetOffsetArchive {
	if x != nil {
		return x.SpecShadowSetOffset
	}
	return nil
}

func (x *SpecShadowArchive) GetSpecShadowSetOpacity() *SpecShadowSetOpacityArchive {
	if x != nil {
		return x.SpecShadowSetOpacity
	}
	return nil
}

func (x *SpecShadowArchive) GetSpecShadowSetRadius() *SpecShadowSetRadiusArchive {
	if x != nil {
		return x.SpecShadowSetRadius
	}
	return nil
}

type SpecStrokeArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpecFrameSetAssetScale *SpecFrameSetAssetScaleArchive `protobuf:"bytes,1,opt,name=spec_frame_set_asset_scale,json=specFrameSetAssetScale" json:"spec_frame_set_asset_scale,omitempty"`
	SpecSetStroke          *SpecSetStrokeArchive          `protobuf:"bytes,2,opt,name=spec_set_stroke,json=specSetStroke" json:"spec_set_stroke,omitempty"`
	SpecStrokeSetColor     *SpecStrokeSetColorArchive     `protobuf:"bytes,3,opt,name=spec_stroke_set_color,json=specStrokeSetColor" json:"spec_stroke_set_color,omitempty"`
	SpecStrokeSetPattern   *SpecStrokeSetPatternArchive   `protobuf:"bytes,4,opt,name=spec_stroke_set_pattern,json=specStrokeSetPattern" json:"spec_stroke_set_pattern,omitempty"`
	SpecStrokeSetWidth     *SpecStrokeSetWidthArchive     `protobuf:"bytes,5,opt,name=spec_stroke_set_width,json=specStrokeSetWidth" json:"spec_stroke_set_width,omitempty"`
}

func (x *SpecStrokeArchive) Reset() {
	*x = SpecStrokeArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_sos_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecStrokeArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecStrokeArchive) ProtoMessage() {}

func (x *SpecStrokeArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_sos_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecStrokeArchive.ProtoReflect.Descriptor instead.
func (*SpecStrokeArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_sos_proto_rawDescGZIP(), []int{9}
}

func (x *SpecStrokeArchive) GetSpecFrameSetAssetScale() *SpecFrameSetAssetScaleArchive {
	if x != nil {
		return x.SpecFrameSetAssetScale
	}
	return nil
}

func (x *SpecStrokeArchive) GetSpecSetStroke() *SpecSetStrokeArchive {
	if x != nil {
		return x.SpecSetStroke
	}
	return nil
}

func (x *SpecStrokeArchive) GetSpecStrokeSetColor() *SpecStrokeSetColorArchive {
	if x != nil {
		return x.SpecStrokeSetColor
	}
	return nil
}

func (x *SpecStrokeArchive) GetSpecStrokeSetPattern() *SpecStrokeSetPatternArchive {
	if x != nil {
		return x.SpecStrokeSetPattern
	}
	return nil
}

func (x *SpecStrokeArchive) GetSpecStrokeSetWidth() *SpecStrokeSetWidthArchive {
	if x != nil {
		return x.SpecStrokeSetWidth
	}
	return nil
}

type BaseShapeStylePropertyChangeSetArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fill                 *SpecFillArchive       `protobuf:"bytes,1,opt,name=fill" json:"fill,omitempty"`
	FillUndefined        *bool                  `protobuf:"varint,2,opt,name=fill_undefined,json=fillUndefined" json:"fill_undefined,omitempty"`
	Stroke               *SpecStrokeArchive     `protobuf:"bytes,3,opt,name=stroke" json:"stroke,omitempty"`
	StrokeUndefined      *bool                  `protobuf:"varint,4,opt,name=stroke_undefined,json=strokeUndefined" json:"stroke_undefined,omitempty"`
	Opacity              *SpecDoubleArchive     `protobuf:"bytes,5,opt,name=opacity" json:"opacity,omitempty"`
	OpacityUndefined     *bool                  `protobuf:"varint,6,opt,name=opacity_undefined,json=opacityUndefined" json:"opacity_undefined,omitempty"`
	Shadow               *SpecShadowArchive     `protobuf:"bytes,7,opt,name=shadow" json:"shadow,omitempty"`
	ShadowUndefined      *bool                  `protobuf:"varint,8,opt,name=shadow_undefined,json=shadowUndefined" json:"shadow_undefined,omitempty"`
	Reflection           *SpecReflectionArchive `protobuf:"bytes,9,opt,name=reflection" json:"reflection,omitempty"`
	ReflectionUndefined  *bool                  `protobuf:"varint,10,opt,name=reflection_undefined,json=reflectionUndefined" json:"reflection_undefined,omitempty"`
	HeadLineEnd          *SpecLineEndArchive    `protobuf:"bytes,11,opt,name=head_line_end,json=headLineEnd" json:"head_line_end,omitempty"`
	HeadLineEndUndefined *bool                  `protobuf:"varint,12,opt,name=head_line_end_undefined,json=headLineEndUndefined" json:"head_line_end_undefined,omitempty"`
	TailLineEnd          *SpecLineEndArchive    `protobuf:"bytes,13,opt,name=tail_line_end,json=tailLineEnd" json:"tail_line_end,omitempty"`
	TailLineEndUndefined *bool                  `protobuf:"varint,14,opt,name=tail_line_end_undefined,json=tailLineEndUndefined" json:"tail_line_end_undefined,omitempty"`
}

func (x *BaseShapeStylePropertyChangeSetArchive) Reset() {
	*x = BaseShapeStylePropertyChangeSetArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_sos_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseShapeStylePropertyChangeSetArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseShapeStylePropertyChangeSetArchive) ProtoMessage() {}

func (x *BaseShapeStylePropertyChangeSetArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_sos_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseShapeStylePropertyChangeSetArchive.ProtoReflect.Descriptor instead.
func (*BaseShapeStylePropertyChangeSetArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_sos_proto_rawDescGZIP(), []int{10}
}

func (x *BaseShapeStylePropertyChangeSetArchive) GetFill() *SpecFillArchive {
	if x != nil {
		return x.Fill
	}
	return nil
}

func (x *BaseShapeStylePropertyChangeSetArchive) GetFillUndefined() bool {
	if x != nil && x.FillUndefined != nil {
		return *x.FillUndefined
	}
	return false
}

func (x *BaseShapeStylePropertyChangeSetArchive) GetStroke() *SpecStrokeArchive {
	if x != nil {
		return x.Stroke
	}
	return nil
}

func (x *BaseShapeStylePropertyChangeSetArchive) GetStrokeUndefined() bool {
	if x != nil && x.StrokeUndefined != nil {
		return *x.StrokeUndefined
	}
	return false
}

func (x *BaseShapeStylePropertyChangeSetArchive) GetOpacity() *SpecDoubleArchive {
	if x != nil {
		return x.Opacity
	}
	return nil
}

func (x *BaseShapeStylePropertyChangeSetArchive) GetOpacityUndefined() bool {
	if x != nil && x.OpacityUndefined != nil {
		return *x.OpacityUndefined
	}
	return false
}

func (x *BaseShapeStylePropertyChangeSetArchive) GetShadow() *SpecShadowArchive {
	if x != nil {
		return x.Shadow
	}
	return nil
}

func (x *BaseShapeStylePropertyChangeSetArchive) GetShadowUndefined() bool {
	if x != nil && x.ShadowUndefined != nil {
		return *x.ShadowUndefined
	}
	return false
}

func (x *BaseShapeStylePropertyChangeSetArchive) GetReflection() *SpecReflectionArchive {
	if x != nil {
		return x.Reflection
	}
	return nil
}

func (x *BaseShapeStylePropertyChangeSetArchive) GetReflectionUndefined() bool {
	if x != nil && x.ReflectionUndefined != nil {
		return *x.ReflectionUndefined
	}
	return false
}

func (x *BaseShapeStylePropertyChangeSetArchive) GetHeadLineEnd() *SpecLineEndArchive {
	if x != nil {
		return x.HeadLineEnd
	}
	return nil
}

func (x *BaseShapeStylePropertyChangeSetArchive) GetHeadLineEndUndefined() bool {
	if x != nil && x.HeadLineEndUndefined != nil {
		return *x.HeadLineEndUndefined
	}
	return false
}

func (x *BaseShapeStylePropertyChangeSetArchive) GetTailLineEnd() *SpecLineEndArchive {
	if x != nil {
		return x.TailLineEnd
	}
	return nil
}

func (x *BaseShapeStylePropertyChangeSetArchive) GetTailLineEndUndefined() bool {
	if x != nil && x.TailLineEndUndefined != nil {
		return *x.TailLineEndUndefined
	}
	return false
}

type MediaStylePropertyChangeSetArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stroke              *SpecStrokeArchive     `protobuf:"bytes,1,opt,name=stroke" json:"stroke,omitempty"`
	StrokeUndefined     *bool                  `protobuf:"varint,2,opt,name=stroke_undefined,json=strokeUndefined" json:"stroke_undefined,omitempty"`
	Opacity             *SpecDoubleArchive     `protobuf:"bytes,3,opt,name=opacity" json:"opacity,omitempty"`
	OpacityUndefined    *bool                  `protobuf:"varint,4,opt,name=opacity_undefined,json=opacityUndefined" json:"opacity_undefined,omitempty"`
	Shadow              *SpecShadowArchive     `protobuf:"bytes,5,opt,name=shadow" json:"shadow,omitempty"`
	ShadowUndefined     *bool                  `protobuf:"varint,6,opt,name=shadow_undefined,json=shadowUndefined" json:"shadow_undefined,omitempty"`
	Reflection          *SpecReflectionArchive `protobuf:"bytes,7,opt,name=reflection" json:"reflection,omitempty"`
	ReflectionUndefined *bool                  `protobuf:"varint,8,opt,name=reflection_undefined,json=reflectionUndefined" json:"reflection_undefined,omitempty"`
}

func (x *MediaStylePropertyChangeSetArchive) Reset() {
	*x = MediaStylePropertyChangeSetArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSDArchives_sos_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaStylePropertyChangeSetArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaStylePropertyChangeSetArchive) ProtoMessage() {}

func (x *MediaStylePropertyChangeSetArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSDArchives_sos_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaStylePropertyChangeSetArchive.ProtoReflect.Descriptor instead.
func (*MediaStylePropertyChangeSetArchive) Descriptor() ([]byte, []int) {
	return file_TSDArchives_sos_proto_rawDescGZIP(), []int{11}
}

func (x *MediaStylePropertyChangeSetArchive) GetStroke() *SpecStrokeArchive {
	if x != nil {
		return x.Stroke
	}
	return nil
}

func (x *MediaStylePropertyChangeSetArchive) GetStrokeUndefined() bool {
	if x != nil && x.StrokeUndefined != nil {
		return *x.StrokeUndefined
	}
	return false
}

func (x *MediaStylePropertyChangeSetArchive) GetOpacity() *SpecDoubleArchive {
	if x != nil {
		return x.Opacity
	}
	return nil
}

func (x *MediaStylePropertyChangeSetArchive) GetOpacityUndefined() bool {
	if x != nil && x.OpacityUndefined != nil {
		return *x.OpacityUndefined
	}
	return false
}

func (x *MediaStylePropertyChangeSetArchive) GetShadow() *SpecShadowArchive {
	if x != nil {
		return x.Shadow
	}
	return nil
}

func (x *MediaStylePropertyChangeSetArchive) GetShadowUndefined() bool {
	if x != nil && x.ShadowUndefined != nil {
		return *x.ShadowUndefined
	}
	return false
}

func (x *MediaStylePropertyChangeSetArchive) GetReflection() *SpecReflectionArchive {
	if x != nil {
		return x.Reflection
	}
	return nil
}

func (x *MediaStylePropertyChangeSetArchive) GetReflectionUndefined() bool {
	if x != nil && x.ReflectionUndefined != nil {
		return *x.ReflectionUndefined
	}
	return false
}

var File_TSDArchives_sos_proto protoreflect.FileDescriptor

var file_TSDArchives_sos_proto_rawDesc = []byte{
	0x0a, 0x15, 0x54, 0x53, 0x44, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x5f, 0x73, 0x6f,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x54, 0x53, 0x44, 0x53, 0x4f, 0x53, 0x1a,
	0x11, 0x54, 0x53, 0x44, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x15, 0x54, 0x53, 0x53, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x5f,
	0x73, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x50, 0x0a, 0x12, 0x53, 0x70, 0x65,
	0x63, 0x53, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12,
	0x24, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x54, 0x53, 0x44, 0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x04, 0x66, 0x69, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e, 0x73, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x08, 0x52, 0x05, 0x75, 0x6e, 0x73, 0x65, 0x74, 0x22, 0x5d, 0x0a, 0x15, 0x53,
	0x70, 0x65, 0x63, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x45, 0x6e, 0x64, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x65, 0x6e, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x4c, 0x69, 0x6e,
	0x65, 0x45, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x07, 0x6c, 0x69, 0x6e,
	0x65, 0x45, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x08, 0x52, 0x05, 0x75, 0x6e, 0x73, 0x65, 0x74, 0x22, 0x68, 0x0a, 0x18, 0x53, 0x70,
	0x65, 0x63, 0x53, 0x65, 0x74, 0x52, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x54, 0x53, 0x44,
	0x2e, 0x52, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x75, 0x6e, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x05, 0x75,
	0x6e, 0x73, 0x65, 0x74, 0x22, 0x58, 0x0a, 0x14, 0x53, 0x70, 0x65, 0x63, 0x53, 0x65, 0x74, 0x53,
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2a, 0x0a, 0x06,
	0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54,
	0x53, 0x44, 0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x06, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e, 0x73, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x52, 0x05, 0x75, 0x6e, 0x73, 0x65, 0x74, 0x22, 0x58,
	0x0a, 0x14, 0x53, 0x70, 0x65, 0x63, 0x53, 0x65, 0x74, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x74, 0x72,
	0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x06, 0x73, 0x74, 0x72, 0x6f,
	0x6b, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x08, 0x52, 0x05, 0x75, 0x6e, 0x73, 0x65, 0x74, 0x22, 0xfd, 0x02, 0x0a, 0x0f, 0x53, 0x70, 0x65,
	0x63, 0x46, 0x69, 0x6c, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x5b, 0x0a, 0x19,
	0x73, 0x70, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x5f,
	0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x46,
	0x69, 0x6c, 0x6c, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x15, 0x73, 0x70, 0x65, 0x63, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x46, 0x69, 0x6c,
	0x6c, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x64, 0x0a, 0x1c, 0x73, 0x70, 0x65,
	0x63, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x5f,
	0x73, 0x65, 0x74, 0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65,
	0x6e, 0x74, 0x46, 0x69, 0x6c, 0x6c, 0x53, 0x65, 0x74, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x18, 0x73, 0x70, 0x65, 0x63, 0x47, 0x72, 0x61, 0x64, 0x69,
	0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x6c, 0x53, 0x65, 0x74, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x12,
	0x67, 0x0a, 0x1d, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x69,
	0x6c, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x70, 0x65,
	0x63, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x6c, 0x53, 0x65, 0x74, 0x54, 0x65, 0x63,
	0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x19, 0x73,
	0x70, 0x65, 0x63, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x6c, 0x53, 0x65, 0x74, 0x54,
	0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x73, 0x70, 0x65, 0x63,
	0x5f, 0x73, 0x65, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x54, 0x53, 0x44, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x53, 0x65, 0x74,
	0x46, 0x69, 0x6c, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0b, 0x73, 0x70, 0x65,
	0x63, 0x53, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x6c, 0x22, 0x5e, 0x0a, 0x12, 0x53, 0x70, 0x65, 0x63,
	0x4c, 0x69, 0x6e, 0x65, 0x45, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x48,
	0x0a, 0x11, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x65, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x54, 0x53, 0x44, 0x53,
	0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x45, 0x6e,
	0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0e, 0x73, 0x70, 0x65, 0x63, 0x53, 0x65,
	0x74, 0x4c, 0x69, 0x6e, 0x65, 0x45, 0x6e, 0x64, 0x22, 0xce, 0x01, 0x0a, 0x15, 0x53, 0x70, 0x65,
	0x63, 0x52, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x12, 0x63, 0x0a, 0x1b, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x72, 0x65, 0x66, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x70,
	0x65, 0x63, 0x52, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x4f,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x18, 0x73,
	0x70, 0x65, 0x63, 0x52, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x4f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x50, 0x0a, 0x13, 0x73, 0x70, 0x65, 0x63, 0x5f,
	0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x54, 0x53, 0x44, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70,
	0x65, 0x63, 0x53, 0x65, 0x74, 0x52, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x11, 0x73, 0x70, 0x65, 0x63, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x84, 0x04, 0x0a, 0x11, 0x53, 0x70,
	0x65, 0x63, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12,
	0x44, 0x0a, 0x0f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x64,
	0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x54, 0x53, 0x44, 0x53, 0x4f,
	0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x53, 0x65, 0x74, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x53, 0x65, 0x74, 0x53,
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x12, 0x51, 0x0a, 0x15, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x73, 0x68,
	0x61, 0x64, 0x6f, 0x77, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x53,
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x53, 0x65, 0x74, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x12, 0x73, 0x70, 0x65, 0x63, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77,
	0x53, 0x65, 0x74, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x51, 0x0a, 0x15, 0x73, 0x70, 0x65, 0x63,
	0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x70,
	0x65, 0x63, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x12, 0x73, 0x70, 0x65, 0x63, 0x53, 0x68, 0x61,
	0x64, 0x6f, 0x77, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x54, 0x0a, 0x16, 0x73,
	0x70, 0x65, 0x63, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x54, 0x53,
	0x44, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x53, 0x65, 0x74, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x13, 0x73, 0x70,
	0x65, 0x63, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x53, 0x65, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x57, 0x0a, 0x17, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77,
	0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x53, 0x68, 0x61,
	0x64, 0x6f, 0x77, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x14, 0x73, 0x70, 0x65, 0x63, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77,
	0x53, 0x65, 0x74, 0x4f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x54, 0x0a, 0x16, 0x73, 0x70,
	0x65, 0x63, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x61,
	0x64, 0x69, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x54, 0x53, 0x44,
	0x2e, 0x53, 0x70, 0x65, 0x63, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x53, 0x65, 0x74, 0x52, 0x61,
	0x64, 0x69, 0x75, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x13, 0x73, 0x70, 0x65,
	0x63, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x53, 0x65, 0x74, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73,
	0x22, 0xb8, 0x03, 0x0a, 0x11, 0x53, 0x70, 0x65, 0x63, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x5e, 0x0a, 0x1a, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x54, 0x53, 0x44,
	0x2e, 0x53, 0x70, 0x65, 0x63, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x16,
	0x73, 0x70, 0x65, 0x63, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x73,
	0x65, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x54, 0x53, 0x44, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x53, 0x65, 0x74,
	0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0d, 0x73,
	0x70, 0x65, 0x63, 0x53, 0x65, 0x74, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x51, 0x0a, 0x15,
	0x73, 0x70, 0x65, 0x63, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x54, 0x53,
	0x44, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x53, 0x65, 0x74, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x12, 0x73, 0x70, 0x65,
	0x63, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12,
	0x57, 0x0a, 0x17, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x5f, 0x73,
	0x65, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x53, 0x74, 0x72, 0x6f, 0x6b,
	0x65, 0x53, 0x65, 0x74, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x14, 0x73, 0x70, 0x65, 0x63, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x53, 0x65,
	0x74, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x51, 0x0a, 0x15, 0x73, 0x70, 0x65, 0x63,
	0x5f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x70,
	0x65, 0x63, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x53, 0x65, 0x74, 0x57, 0x69, 0x64, 0x74, 0x68,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x12, 0x73, 0x70, 0x65, 0x63, 0x53, 0x74, 0x72,
	0x6f, 0x6b, 0x65, 0x53, 0x65, 0x74, 0x57, 0x69, 0x64, 0x74, 0x68, 0x22, 0xfa, 0x05, 0x0a, 0x26,
	0x42, 0x61, 0x73, 0x65, 0x53, 0x68, 0x61, 0x70, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x74, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x54, 0x53, 0x44, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70,
	0x65, 0x63, 0x46, 0x69, 0x6c, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x04, 0x66,
	0x69, 0x6c, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x75, 0x6e, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x66, 0x69, 0x6c,
	0x6c, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74,
	0x72, 0x6f, 0x6b, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x44,
	0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x06, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x55,
	0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x07, 0x6f, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x53, 0x53,
	0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x07, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x2b, 0x0a,
	0x11, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x68,
	0x61, 0x64, 0x6f, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x54, 0x53, 0x44,
	0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x06, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x12, 0x29, 0x0a,
	0x10, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x55,
	0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x54,
	0x53, 0x44, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x66, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x66,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x14, 0x72, 0x65, 0x66, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x0d, 0x68, 0x65,
	0x61, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x44, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x4c,
	0x69, 0x6e, 0x65, 0x45, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0b, 0x68,
	0x65, 0x61, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x68, 0x65,
	0x61, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x75, 0x6e, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x68, 0x65, 0x61,
	0x64, 0x4c, 0x69, 0x6e, 0x65, 0x45, 0x6e, 0x64, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x12, 0x3e, 0x0a, 0x0d, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x65,
	0x6e, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x44, 0x53, 0x4f,
	0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x4c, 0x69, 0x6e, 0x65, 0x45, 0x6e, 0x64, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x0b, 0x74, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x6e, 0x65, 0x45, 0x6e,
	0x64, 0x12, 0x35, 0x0a, 0x17, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x65,
	0x6e, 0x64, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x14, 0x74, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x6e, 0x65, 0x45, 0x6e, 0x64, 0x55,
	0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x22, 0xb4, 0x03, 0x0a, 0x22, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12,
	0x31, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x54, 0x53, 0x44, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x53, 0x74, 0x72,
	0x6f, 0x6b, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x06, 0x73, 0x74, 0x72, 0x6f,
	0x6b, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x5f, 0x75, 0x6e, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x74,
	0x72, 0x6f, 0x6b, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x33, 0x0a,
	0x07, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x54, 0x53, 0x53, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x07, 0x6f, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x75, 0x6e,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x6f,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12,
	0x31, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x54, 0x53, 0x44, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x53, 0x68, 0x61,
	0x64, 0x6f, 0x77, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x06, 0x73, 0x68, 0x61, 0x64,
	0x6f, 0x77, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5f, 0x75, 0x6e, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x68,
	0x61, 0x64, 0x6f, 0x77, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3d, 0x0a,
	0x0a, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x54, 0x53, 0x44, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x52,
	0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x0a, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x14,
	0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x72, 0x65, 0x66, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x42,
	0x07, 0x5a, 0x05, 0x2e, 0x2f, 0x6b, 0x70, 0x62,
}

var (
	file_TSDArchives_sos_proto_rawDescOnce sync.Once
	file_TSDArchives_sos_proto_rawDescData = file_TSDArchives_sos_proto_rawDesc
)

func file_TSDArchives_sos_proto_rawDescGZIP() []byte {
	file_TSDArchives_sos_proto_rawDescOnce.Do(func() {
		file_TSDArchives_sos_proto_rawDescData = protoimpl.X.CompressGZIP(file_TSDArchives_sos_proto_rawDescData)
	})
	return file_TSDArchives_sos_proto_rawDescData
}

var file_TSDArchives_sos_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_TSDArchives_sos_proto_goTypes = []interface{}{
	(*SpecSetFillArchive)(nil),                     // 0: TSDSOS.SpecSetFillArchive
	(*SpecSetLineEndArchive)(nil),                  // 1: TSDSOS.SpecSetLineEndArchive
	(*SpecSetReflectionArchive)(nil),               // 2: TSDSOS.SpecSetReflectionArchive
	(*SpecSetShadowArchive)(nil),                   // 3: TSDSOS.SpecSetShadowArchive
	(*SpecSetStrokeArchive)(nil),                   // 4: TSDSOS.SpecSetStrokeArchive
	(*SpecFillArchive)(nil),                        // 5: TSDSOS.SpecFillArchive
	(*SpecLineEndArchive)(nil),                     // 6: TSDSOS.SpecLineEndArchive
	(*SpecReflectionArchive)(nil),                  // 7: TSDSOS.SpecReflectionArchive
	(*SpecShadowArchive)(nil),                      // 8: TSDSOS.SpecShadowArchive
	(*SpecStrokeArchive)(nil),                      // 9: TSDSOS.SpecStrokeArchive
	(*BaseShapeStylePropertyChangeSetArchive)(nil), // 10: TSDSOS.BaseShapeStylePropertyChangeSetArchive
	(*MediaStylePropertyChangeSetArchive)(nil),     // 11: TSDSOS.MediaStylePropertyChangeSetArchive
	(*FillArchive)(nil),                            // 12: TSD.FillArchive
	(*LineEndArchive)(nil),                         // 13: TSD.LineEndArchive
	(*ReflectionArchive)(nil),                      // 14: TSD.ReflectionArchive
	(*ShadowArchive)(nil),                          // 15: TSD.ShadowArchive
	(*StrokeArchive)(nil),                          // 16: TSD.StrokeArchive
	(*SpecColorFillSetColorArchive)(nil),           // 17: TSD.SpecColorFillSetColorArchive
	(*SpecGradientFillSetAngleArchive)(nil),        // 18: TSD.SpecGradientFillSetAngleArchive
	(*SpecImageFillSetTechniqueArchive)(nil),       // 19: TSD.SpecImageFillSetTechniqueArchive
	(*SpecReflectionSetOpacityArchive)(nil),        // 20: TSD.SpecReflectionSetOpacityArchive
	(*SpecShadowSetAngleArchive)(nil),              // 21: TSD.SpecShadowSetAngleArchive
	(*SpecShadowSetColorArchive)(nil),              // 22: TSD.SpecShadowSetColorArchive
	(*SpecShadowSetOffsetArchive)(nil),             // 23: TSD.SpecShadowSetOffsetArchive
	(*SpecShadowSetOpacityArchive)(nil),            // 24: TSD.SpecShadowSetOpacityArchive
	(*SpecShadowSetRadiusArchive)(nil),             // 25: TSD.SpecShadowSetRadiusArchive
	(*SpecFrameSetAssetScaleArchive)(nil),          // 26: TSD.SpecFrameSetAssetScaleArchive
	(*SpecStrokeSetColorArchive)(nil),              // 27: TSD.SpecStrokeSetColorArchive
	(*SpecStrokeSetPatternArchive)(nil),            // 28: TSD.SpecStrokeSetPatternArchive
	(*SpecStrokeSetWidthArchive)(nil),              // 29: TSD.SpecStrokeSetWidthArchive
	(*SpecDoubleArchive)(nil),                      // 30: TSSSOS.SpecDoubleArchive
}
var file_TSDArchives_sos_proto_depIdxs = []int32{
	12, // 0: TSDSOS.SpecSetFillArchive.fill:type_name -> TSD.FillArchive
	13, // 1: TSDSOS.SpecSetLineEndArchive.line_end:type_name -> TSD.LineEndArchive
	14, // 2: TSDSOS.SpecSetReflectionArchive.reflection:type_name -> TSD.ReflectionArchive
	15, // 3: TSDSOS.SpecSetShadowArchive.shadow:type_name -> TSD.ShadowArchive
	16, // 4: TSDSOS.SpecSetStrokeArchive.stroke:type_name -> TSD.StrokeArchive
	17, // 5: TSDSOS.SpecFillArchive.spec_color_fill_set_color:type_name -> TSD.SpecColorFillSetColorArchive
	18, // 6: TSDSOS.SpecFillArchive.spec_gradient_fill_set_angle:type_name -> TSD.SpecGradientFillSetAngleArchive
	19, // 7: TSDSOS.SpecFillArchive.spec_image_fill_set_technique:type_name -> TSD.SpecImageFillSetTechniqueArchive
	0,  // 8: TSDSOS.SpecFillArchive.spec_set_fill:type_name -> TSDSOS.SpecSetFillArchive
	1,  // 9: TSDSOS.SpecLineEndArchive.spec_set_line_end:type_name -> TSDSOS.SpecSetLineEndArchive
	20, // 10: TSDSOS.SpecReflectionArchive.spec_reflection_set_opacity:type_name -> TSD.SpecReflectionSetOpacityArchive
	2,  // 11: TSDSOS.SpecReflectionArchive.spec_set_reflection:type_name -> TSDSOS.SpecSetReflectionArchive
	3,  // 12: TSDSOS.SpecShadowArchive.spec_set_shadow:type_name -> TSDSOS.SpecSetShadowArchive
	21, // 13: TSDSOS.SpecShadowArchive.spec_shadow_set_angle:type_name -> TSD.SpecShadowSetAngleArchive
	22, // 14: TSDSOS.SpecShadowArchive.spec_shadow_set_color:type_name -> TSD.SpecShadowSetColorArchive
	23, // 15: TSDSOS.SpecShadowArchive.spec_shadow_set_offset:type_name -> TSD.SpecShadowSetOffsetArchive
	24, // 16: TSDSOS.SpecShadowArchive.spec_shadow_set_opacity:type_name -> TSD.SpecShadowSetOpacityArchive
	25, // 17: TSDSOS.SpecShadowArchive.spec_shadow_set_radius:type_name -> TSD.SpecShadowSetRadiusArchive
	26, // 18: TSDSOS.SpecStrokeArchive.spec_frame_set_asset_scale:type_name -> TSD.SpecFrameSetAssetScaleArchive
	4,  // 19: TSDSOS.SpecStrokeArchive.spec_set_stroke:type_name -> TSDSOS.SpecSetStrokeArchive
	27, // 20: TSDSOS.SpecStrokeArchive.spec_stroke_set_color:type_name -> TSD.SpecStrokeSetColorArchive
	28, // 21: TSDSOS.SpecStrokeArchive.spec_stroke_set_pattern:type_name -> TSD.SpecStrokeSetPatternArchive
	29, // 22: TSDSOS.SpecStrokeArchive.spec_stroke_set_width:type_name -> TSD.SpecStrokeSetWidthArchive
	5,  // 23: TSDSOS.BaseShapeStylePropertyChangeSetArchive.fill:type_name -> TSDSOS.SpecFillArchive
	9,  // 24: TSDSOS.BaseShapeStylePropertyChangeSetArchive.stroke:type_name -> TSDSOS.SpecStrokeArchive
	30, // 25: TSDSOS.BaseShapeStylePropertyChangeSetArchive.opacity:type_name -> TSSSOS.SpecDoubleArchive
	8,  // 26: TSDSOS.BaseShapeStylePropertyChangeSetArchive.shadow:type_name -> TSDSOS.SpecShadowArchive
	7,  // 27: TSDSOS.BaseShapeStylePropertyChangeSetArchive.reflection:type_name -> TSDSOS.SpecReflectionArchive
	6,  // 28: TSDSOS.BaseShapeStylePropertyChangeSetArchive.head_line_end:type_name -> TSDSOS.SpecLineEndArchive
	6,  // 29: TSDSOS.BaseShapeStylePropertyChangeSetArchive.tail_line_end:type_name -> TSDSOS.SpecLineEndArchive
	9,  // 30: TSDSOS.MediaStylePropertyChangeSetArchive.stroke:type_name -> TSDSOS.SpecStrokeArchive
	30, // 31: TSDSOS.MediaStylePropertyChangeSetArchive.opacity:type_name -> TSSSOS.SpecDoubleArchive
	8,  // 32: TSDSOS.MediaStylePropertyChangeSetArchive.shadow:type_name -> TSDSOS.SpecShadowArchive
	7,  // 33: TSDSOS.MediaStylePropertyChangeSetArchive.reflection:type_name -> TSDSOS.SpecReflectionArchive
	34, // [34:34] is the sub-list for method output_type
	34, // [34:34] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_TSDArchives_sos_proto_init() }
func file_TSDArchives_sos_proto_init() {
	if File_TSDArchives_sos_proto != nil {
		return
	}
	file_TSDArchives_proto_init()
	file_TSSArchives_sos_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_TSDArchives_sos_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecSetFillArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_sos_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecSetLineEndArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_sos_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecSetReflectionArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_sos_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecSetShadowArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_sos_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecSetStrokeArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_sos_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecFillArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_sos_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecLineEndArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_sos_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecReflectionArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_sos_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecShadowArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_sos_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecStrokeArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_sos_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseShapeStylePropertyChangeSetArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSDArchives_sos_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaStylePropertyChangeSetArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_TSDArchives_sos_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_TSDArchives_sos_proto_goTypes,
		DependencyIndexes: file_TSDArchives_sos_proto_depIdxs,
		MessageInfos:      file_TSDArchives_sos_proto_msgTypes,
	}.Build()
	File_TSDArchives_sos_proto = out.File
	file_TSDArchives_sos_proto_rawDesc = nil
	file_TSDArchives_sos_proto_goTypes = nil
	file_TSDArchives_sos_proto_depIdxs = nil
}
