// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: TSSArchives.proto

package kpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ValueType int32

const (
	ValueType_ObjectType ValueType = 0
	ValueType_IntType    ValueType = 1
	ValueType_FloatType  ValueType = 2
	ValueType_DoubleType ValueType = 3
)

// Enum value maps for ValueType.
var (
	ValueType_name = map[int32]string{
		0: "ObjectType",
		1: "IntType",
		2: "FloatType",
		3: "DoubleType",
	}
	ValueType_value = map[string]int32{
		"ObjectType": 0,
		"IntType":    1,
		"FloatType":  2,
		"DoubleType": 3,
	}
)

func (x ValueType) Enum() *ValueType {
	p := new(ValueType)
	*p = x
	return p
}

func (x ValueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ValueType) Descriptor() protoreflect.EnumDescriptor {
	return file_TSSArchives_proto_enumTypes[0].Descriptor()
}

func (ValueType) Type() protoreflect.EnumType {
	return &file_TSSArchives_proto_enumTypes[0]
}

func (x ValueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ValueType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ValueType(num)
	return nil
}

// Deprecated: Use ValueType.Descriptor instead.
func (ValueType) EnumDescriptor() ([]byte, []int) {
	return file_TSSArchives_proto_rawDescGZIP(), []int{0}
}

type PropertyType int32

const (
	PropertyType_InvalidPropertyType   PropertyType = 1
	PropertyType_NullPropertyType      PropertyType = 2
	PropertyType_IntegerPropertyType   PropertyType = 3
	PropertyType_FloatPropertyType     PropertyType = 4
	PropertyType_DoublePropertyType    PropertyType = 5
	PropertyType_NSStringPropertyType  PropertyType = 6
	PropertyType_TSPObjectPropertyType PropertyType = 7
)

// Enum value maps for PropertyType.
var (
	PropertyType_name = map[int32]string{
		1: "InvalidPropertyType",
		2: "NullPropertyType",
		3: "IntegerPropertyType",
		4: "FloatPropertyType",
		5: "DoublePropertyType",
		6: "NSStringPropertyType",
		7: "TSPObjectPropertyType",
	}
	PropertyType_value = map[string]int32{
		"InvalidPropertyType":   1,
		"NullPropertyType":      2,
		"IntegerPropertyType":   3,
		"FloatPropertyType":     4,
		"DoublePropertyType":    5,
		"NSStringPropertyType":  6,
		"TSPObjectPropertyType": 7,
	}
)

func (x PropertyType) Enum() *PropertyType {
	p := new(PropertyType)
	*p = x
	return p
}

func (x PropertyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PropertyType) Descriptor() protoreflect.EnumDescriptor {
	return file_TSSArchives_proto_enumTypes[1].Descriptor()
}

func (PropertyType) Type() protoreflect.EnumType {
	return &file_TSSArchives_proto_enumTypes[1]
}

func (x PropertyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PropertyType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PropertyType(num)
	return nil
}

// Deprecated: Use PropertyType.Descriptor instead.
func (PropertyType) EnumDescriptor() ([]byte, []int) {
	return file_TSSArchives_proto_rawDescGZIP(), []int{1}
}

type StyleArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            *string    `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	StyleIdentifier *string    `protobuf:"bytes,2,opt,name=style_identifier,json=styleIdentifier" json:"style_identifier,omitempty"`
	Parent          *Reference `protobuf:"bytes,3,opt,name=parent" json:"parent,omitempty"`
	IsVariation     *bool      `protobuf:"varint,4,opt,name=is_variation,json=isVariation,def=0" json:"is_variation,omitempty"`
	Stylesheet      *Reference `protobuf:"bytes,5,opt,name=stylesheet" json:"stylesheet,omitempty"`
}

// Default values for StyleArchive fields.
const (
	Default_StyleArchive_IsVariation = bool(false)
)

func (x *StyleArchive) Reset() {
	*x = StyleArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSSArchives_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StyleArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StyleArchive) ProtoMessage() {}

func (x *StyleArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSSArchives_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StyleArchive.ProtoReflect.Descriptor instead.
func (*StyleArchive) Descriptor() ([]byte, []int) {
	return file_TSSArchives_proto_rawDescGZIP(), []int{0}
}

func (x *StyleArchive) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *StyleArchive) GetStyleIdentifier() string {
	if x != nil && x.StyleIdentifier != nil {
		return *x.StyleIdentifier
	}
	return ""
}

func (x *StyleArchive) GetParent() *Reference {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *StyleArchive) GetIsVariation() bool {
	if x != nil && x.IsVariation != nil {
		return *x.IsVariation
	}
	return Default_StyleArchive_IsVariation
}

func (x *StyleArchive) GetStylesheet() *Reference {
	if x != nil {
		return x.Stylesheet
	}
	return nil
}

type StylesheetArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Styles                   []*Reference                              `protobuf:"bytes,1,rep,name=styles" json:"styles,omitempty"`
	IdentifierToStyleMap     []*StylesheetArchive_IdentifiedStyleEntry `protobuf:"bytes,2,rep,name=identifier_to_style_map,json=identifierToStyleMap" json:"identifier_to_style_map,omitempty"`
	Parent                   *Reference                                `protobuf:"bytes,3,opt,name=parent" json:"parent,omitempty"`
	IsLocked                 *bool                                     `protobuf:"varint,4,opt,name=is_locked,json=isLocked,def=1" json:"is_locked,omitempty"`
	ParentToChildrenStyleMap []*StylesheetArchive_StyleChildrenEntry   `protobuf:"bytes,5,rep,name=parent_to_children_style_map,json=parentToChildrenStyleMap" json:"parent_to_children_style_map,omitempty"`
	CanCullStyles            *bool                                     `protobuf:"varint,6,opt,name=can_cull_styles,json=canCullStyles,def=0" json:"can_cull_styles,omitempty"`
	StylesFor_10_0           *StylesheetArchive_VersionedStyles        `protobuf:"bytes,7,opt,name=styles_for_10_0,json=stylesFor100" json:"styles_for_10_0,omitempty"`
	StylesFor_10_1           *StylesheetArchive_VersionedStyles        `protobuf:"bytes,8,opt,name=styles_for_10_1,json=stylesFor101" json:"styles_for_10_1,omitempty"`
	StylesFor_10_2           *StylesheetArchive_VersionedStyles        `protobuf:"bytes,9,opt,name=styles_for_10_2,json=stylesFor102" json:"styles_for_10_2,omitempty"`
	StylesFor_11_0           *StylesheetArchive_VersionedStyles        `protobuf:"bytes,10,opt,name=styles_for_11_0,json=stylesFor110" json:"styles_for_11_0,omitempty"`
	StylesFor_11_1           *StylesheetArchive_VersionedStyles        `protobuf:"bytes,11,opt,name=styles_for_11_1,json=stylesFor111" json:"styles_for_11_1,omitempty"`
	StylesFor_11_2           *StylesheetArchive_VersionedStyles        `protobuf:"bytes,12,opt,name=styles_for_11_2,json=stylesFor112" json:"styles_for_11_2,omitempty"`
}

// Default values for StylesheetArchive fields.
const (
	Default_StylesheetArchive_IsLocked      = bool(true)
	Default_StylesheetArchive_CanCullStyles = bool(false)
)

func (x *StylesheetArchive) Reset() {
	*x = StylesheetArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSSArchives_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StylesheetArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StylesheetArchive) ProtoMessage() {}

func (x *StylesheetArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSSArchives_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StylesheetArchive.ProtoReflect.Descriptor instead.
func (*StylesheetArchive) Descriptor() ([]byte, []int) {
	return file_TSSArchives_proto_rawDescGZIP(), []int{1}
}

func (x *StylesheetArchive) GetStyles() []*Reference {
	if x != nil {
		return x.Styles
	}
	return nil
}

func (x *StylesheetArchive) GetIdentifierToStyleMap() []*StylesheetArchive_IdentifiedStyleEntry {
	if x != nil {
		return x.IdentifierToStyleMap
	}
	return nil
}

func (x *StylesheetArchive) GetParent() *Reference {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *StylesheetArchive) GetIsLocked() bool {
	if x != nil && x.IsLocked != nil {
		return *x.IsLocked
	}
	return Default_StylesheetArchive_IsLocked
}

func (x *StylesheetArchive) GetParentToChildrenStyleMap() []*StylesheetArchive_StyleChildrenEntry {
	if x != nil {
		return x.ParentToChildrenStyleMap
	}
	return nil
}

func (x *StylesheetArchive) GetCanCullStyles() bool {
	if x != nil && x.CanCullStyles != nil {
		return *x.CanCullStyles
	}
	return Default_StylesheetArchive_CanCullStyles
}

func (x *StylesheetArchive) GetStylesFor_10_0() *StylesheetArchive_VersionedStyles {
	if x != nil {
		return x.StylesFor_10_0
	}
	return nil
}

func (x *StylesheetArchive) GetStylesFor_10_1() *StylesheetArchive_VersionedStyles {
	if x != nil {
		return x.StylesFor_10_1
	}
	return nil
}

func (x *StylesheetArchive) GetStylesFor_10_2() *StylesheetArchive_VersionedStyles {
	if x != nil {
		return x.StylesFor_10_2
	}
	return nil
}

func (x *StylesheetArchive) GetStylesFor_11_0() *StylesheetArchive_VersionedStyles {
	if x != nil {
		return x.StylesFor_11_0
	}
	return nil
}

func (x *StylesheetArchive) GetStylesFor_11_1() *StylesheetArchive_VersionedStyles {
	if x != nil {
		return x.StylesFor_11_1
	}
	return nil
}

func (x *StylesheetArchive) GetStylesFor_11_2() *StylesheetArchive_VersionedStyles {
	if x != nil {
		return x.StylesFor_11_2
	}
	return nil
}

type TSSThemeArchive struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	LegacyStylesheet              *Reference `protobuf:"bytes,1,opt,name=legacy_stylesheet,json=legacyStylesheet" json:"legacy_stylesheet,omitempty"`
	ThemeIdentifier               *string    `protobuf:"bytes,3,opt,name=theme_identifier,json=themeIdentifier" json:"theme_identifier,omitempty"`
	DocumentStylesheet            *Reference `protobuf:"bytes,4,opt,name=document_stylesheet,json=documentStylesheet" json:"document_stylesheet,omitempty"`
	OldUuidsForPresetReplacements []*UUID    `protobuf:"bytes,5,rep,name=old_uuids_for_preset_replacements,json=oldUuidsForPresetReplacements" json:"old_uuids_for_preset_replacements,omitempty"`
	NewUuidsForPresetReplacements []*UUID    `protobuf:"bytes,6,rep,name=new_uuids_for_preset_replacements,json=newUuidsForPresetReplacements" json:"new_uuids_for_preset_replacements,omitempty"`
	ColorPresets                  []*Color   `protobuf:"bytes,10,rep,name=color_presets,json=colorPresets" json:"color_presets,omitempty"`
}

func (x *TSSThemeArchive) Reset() {
	*x = TSSThemeArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSSArchives_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSSThemeArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSSThemeArchive) ProtoMessage() {}

func (x *TSSThemeArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSSArchives_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSSThemeArchive.ProtoReflect.Descriptor instead.
func (*TSSThemeArchive) Descriptor() ([]byte, []int) {
	return file_TSSArchives_proto_rawDescGZIP(), []int{2}
}

func (x *TSSThemeArchive) GetLegacyStylesheet() *Reference {
	if x != nil {
		return x.LegacyStylesheet
	}
	return nil
}

func (x *TSSThemeArchive) GetThemeIdentifier() string {
	if x != nil && x.ThemeIdentifier != nil {
		return *x.ThemeIdentifier
	}
	return ""
}

func (x *TSSThemeArchive) GetDocumentStylesheet() *Reference {
	if x != nil {
		return x.DocumentStylesheet
	}
	return nil
}

func (x *TSSThemeArchive) GetOldUuidsForPresetReplacements() []*UUID {
	if x != nil {
		return x.OldUuidsForPresetReplacements
	}
	return nil
}

func (x *TSSThemeArchive) GetNewUuidsForPresetReplacements() []*UUID {
	if x != nil {
		return x.NewUuidsForPresetReplacements
	}
	return nil
}

func (x *TSSThemeArchive) GetColorPresets() []*Color {
	if x != nil {
		return x.ColorPresets
	}
	return nil
}

type ApplyThemeCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super    *CommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Commands []*Reference    `protobuf:"bytes,2,rep,name=commands" json:"commands,omitempty"`
	OldTheme *Reference      `protobuf:"bytes,3,opt,name=old_theme,json=oldTheme" json:"old_theme,omitempty"`
	NewTheme *Reference      `protobuf:"bytes,4,opt,name=new_theme,json=newTheme" json:"new_theme,omitempty"`
}

func (x *ApplyThemeCommandArchive) Reset() {
	*x = ApplyThemeCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSSArchives_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyThemeCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyThemeCommandArchive) ProtoMessage() {}

func (x *ApplyThemeCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSSArchives_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyThemeCommandArchive.ProtoReflect.Descriptor instead.
func (*ApplyThemeCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSSArchives_proto_rawDescGZIP(), []int{3}
}

func (x *ApplyThemeCommandArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *ApplyThemeCommandArchive) GetCommands() []*Reference {
	if x != nil {
		return x.Commands
	}
	return nil
}

func (x *ApplyThemeCommandArchive) GetOldTheme() *Reference {
	if x != nil {
		return x.OldTheme
	}
	return nil
}

func (x *ApplyThemeCommandArchive) GetNewTheme() *Reference {
	if x != nil {
		return x.NewTheme
	}
	return nil
}

type ApplyThemeChildCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super  *CommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Parent *Reference      `protobuf:"bytes,2,opt,name=parent" json:"parent,omitempty"`
}

func (x *ApplyThemeChildCommandArchive) Reset() {
	*x = ApplyThemeChildCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSSArchives_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyThemeChildCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyThemeChildCommandArchive) ProtoMessage() {}

func (x *ApplyThemeChildCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSSArchives_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyThemeChildCommandArchive.ProtoReflect.Descriptor instead.
func (*ApplyThemeChildCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSSArchives_proto_rawDescGZIP(), []int{4}
}

func (x *ApplyThemeChildCommandArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *ApplyThemeChildCommandArchive) GetParent() *Reference {
	if x != nil {
		return x.Parent
	}
	return nil
}

type TSSStyleUpdatePropertyMapCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                   *CommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	CurrentStyle            *Reference      `protobuf:"bytes,2,req,name=current_style,json=currentStyle" json:"current_style,omitempty"`
	StyleWithOldPropertyMap *Reference      `protobuf:"bytes,3,opt,name=style_with_old_property_map,json=styleWithOldPropertyMap" json:"style_with_old_property_map,omitempty"`
	StyleWithNewPropertyMap *Reference      `protobuf:"bytes,4,opt,name=style_with_new_property_map,json=styleWithNewPropertyMap" json:"style_with_new_property_map,omitempty"`
	StyleDiff               *Reference      `protobuf:"bytes,7,opt,name=style_diff,json=styleDiff" json:"style_diff,omitempty"`
	NotifyForStyleClients   *bool           `protobuf:"varint,6,opt,name=notify_for_style_clients,json=notifyForStyleClients,def=1" json:"notify_for_style_clients,omitempty"`
}

// Default values for TSSStyleUpdatePropertyMapCommandArchive fields.
const (
	Default_TSSStyleUpdatePropertyMapCommandArchive_NotifyForStyleClients = bool(true)
)

func (x *TSSStyleUpdatePropertyMapCommandArchive) Reset() {
	*x = TSSStyleUpdatePropertyMapCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSSArchives_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSSStyleUpdatePropertyMapCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSSStyleUpdatePropertyMapCommandArchive) ProtoMessage() {}

func (x *TSSStyleUpdatePropertyMapCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSSArchives_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSSStyleUpdatePropertyMapCommandArchive.ProtoReflect.Descriptor instead.
func (*TSSStyleUpdatePropertyMapCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSSArchives_proto_rawDescGZIP(), []int{5}
}

func (x *TSSStyleUpdatePropertyMapCommandArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *TSSStyleUpdatePropertyMapCommandArchive) GetCurrentStyle() *Reference {
	if x != nil {
		return x.CurrentStyle
	}
	return nil
}

func (x *TSSStyleUpdatePropertyMapCommandArchive) GetStyleWithOldPropertyMap() *Reference {
	if x != nil {
		return x.StyleWithOldPropertyMap
	}
	return nil
}

func (x *TSSStyleUpdatePropertyMapCommandArchive) GetStyleWithNewPropertyMap() *Reference {
	if x != nil {
		return x.StyleWithNewPropertyMap
	}
	return nil
}

func (x *TSSStyleUpdatePropertyMapCommandArchive) GetStyleDiff() *Reference {
	if x != nil {
		return x.StyleDiff
	}
	return nil
}

func (x *TSSStyleUpdatePropertyMapCommandArchive) GetNotifyForStyleClients() bool {
	if x != nil && x.NotifyForStyleClients != nil {
		return *x.NotifyForStyleClients
	}
	return Default_TSSStyleUpdatePropertyMapCommandArchive_NotifyForStyleClients
}

type ThemeReplacePresetCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super     *CommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Preset    *Reference      `protobuf:"bytes,3,req,name=preset" json:"preset,omitempty"`
	OldPreset *Reference      `protobuf:"bytes,4,opt,name=oldPreset" json:"oldPreset,omitempty"`
	Index     *uint32         `protobuf:"varint,5,req,name=index" json:"index,omitempty"`
}

func (x *ThemeReplacePresetCommandArchive) Reset() {
	*x = ThemeReplacePresetCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSSArchives_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThemeReplacePresetCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThemeReplacePresetCommandArchive) ProtoMessage() {}

func (x *ThemeReplacePresetCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSSArchives_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThemeReplacePresetCommandArchive.ProtoReflect.Descriptor instead.
func (*ThemeReplacePresetCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSSArchives_proto_rawDescGZIP(), []int{6}
}

func (x *ThemeReplacePresetCommandArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *ThemeReplacePresetCommandArchive) GetPreset() *Reference {
	if x != nil {
		return x.Preset
	}
	return nil
}

func (x *ThemeReplacePresetCommandArchive) GetOldPreset() *Reference {
	if x != nil {
		return x.OldPreset
	}
	return nil
}

func (x *ThemeReplacePresetCommandArchive) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

type ThemeReplaceColorPresetCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super    *CommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Theme    *Reference      `protobuf:"bytes,2,req,name=theme" json:"theme,omitempty"`
	Color    *Color          `protobuf:"bytes,3,req,name=color" json:"color,omitempty"`
	OldColor *Color          `protobuf:"bytes,4,req,name=old_color,json=oldColor" json:"old_color,omitempty"`
	Index    *uint32         `protobuf:"varint,5,req,name=index" json:"index,omitempty"`
}

func (x *ThemeReplaceColorPresetCommandArchive) Reset() {
	*x = ThemeReplaceColorPresetCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSSArchives_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThemeReplaceColorPresetCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThemeReplaceColorPresetCommandArchive) ProtoMessage() {}

func (x *ThemeReplaceColorPresetCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSSArchives_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThemeReplaceColorPresetCommandArchive.ProtoReflect.Descriptor instead.
func (*ThemeReplaceColorPresetCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSSArchives_proto_rawDescGZIP(), []int{7}
}

func (x *ThemeReplaceColorPresetCommandArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *ThemeReplaceColorPresetCommandArchive) GetTheme() *Reference {
	if x != nil {
		return x.Theme
	}
	return nil
}

func (x *ThemeReplaceColorPresetCommandArchive) GetColor() *Color {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *ThemeReplaceColorPresetCommandArchive) GetOldColor() *Color {
	if x != nil {
		return x.OldColor
	}
	return nil
}

func (x *ThemeReplaceColorPresetCommandArchive) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

type ThemeAddStylePresetCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                 *CommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Theme                 *Reference      `protobuf:"bytes,2,req,name=theme" json:"theme,omitempty"`
	Preset                *Reference      `protobuf:"bytes,3,req,name=preset" json:"preset,omitempty"`
	PresetKind            *string         `protobuf:"bytes,4,req,name=preset_kind,json=presetKind" json:"preset_kind,omitempty"`
	Identifier            *string         `protobuf:"bytes,5,opt,name=identifier" json:"identifier,omitempty"`
	AddPresetToStylesheet *bool           `protobuf:"varint,6,opt,name=add_preset_to_stylesheet,json=addPresetToStylesheet" json:"add_preset_to_stylesheet,omitempty"`
}

func (x *ThemeAddStylePresetCommandArchive) Reset() {
	*x = ThemeAddStylePresetCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSSArchives_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThemeAddStylePresetCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThemeAddStylePresetCommandArchive) ProtoMessage() {}

func (x *ThemeAddStylePresetCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSSArchives_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThemeAddStylePresetCommandArchive.ProtoReflect.Descriptor instead.
func (*ThemeAddStylePresetCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSSArchives_proto_rawDescGZIP(), []int{8}
}

func (x *ThemeAddStylePresetCommandArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *ThemeAddStylePresetCommandArchive) GetTheme() *Reference {
	if x != nil {
		return x.Theme
	}
	return nil
}

func (x *ThemeAddStylePresetCommandArchive) GetPreset() *Reference {
	if x != nil {
		return x.Preset
	}
	return nil
}

func (x *ThemeAddStylePresetCommandArchive) GetPresetKind() string {
	if x != nil && x.PresetKind != nil {
		return *x.PresetKind
	}
	return ""
}

func (x *ThemeAddStylePresetCommandArchive) GetIdentifier() string {
	if x != nil && x.Identifier != nil {
		return *x.Identifier
	}
	return ""
}

func (x *ThemeAddStylePresetCommandArchive) GetAddPresetToStylesheet() bool {
	if x != nil && x.AddPresetToStylesheet != nil {
		return *x.AddPresetToStylesheet
	}
	return false
}

type ThemeRemoveStylePresetCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super             *CommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Theme             *Reference      `protobuf:"bytes,2,req,name=theme" json:"theme,omitempty"`
	Preset            *Reference      `protobuf:"bytes,3,req,name=preset" json:"preset,omitempty"`
	PresetIndex       *uint32         `protobuf:"varint,4,req,name=preset_index,json=presetIndex" json:"preset_index,omitempty"`
	PresetKind        *string         `protobuf:"bytes,5,req,name=preset_kind,json=presetKind" json:"preset_kind,omitempty"`
	Identifier        *string         `protobuf:"bytes,6,opt,name=identifier" json:"identifier,omitempty"`
	ReplacementPreset *Reference      `protobuf:"bytes,7,opt,name=replacement_preset,json=replacementPreset" json:"replacement_preset,omitempty"`
}

func (x *ThemeRemoveStylePresetCommandArchive) Reset() {
	*x = ThemeRemoveStylePresetCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSSArchives_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThemeRemoveStylePresetCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThemeRemoveStylePresetCommandArchive) ProtoMessage() {}

func (x *ThemeRemoveStylePresetCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSSArchives_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThemeRemoveStylePresetCommandArchive.ProtoReflect.Descriptor instead.
func (*ThemeRemoveStylePresetCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSSArchives_proto_rawDescGZIP(), []int{9}
}

func (x *ThemeRemoveStylePresetCommandArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *ThemeRemoveStylePresetCommandArchive) GetTheme() *Reference {
	if x != nil {
		return x.Theme
	}
	return nil
}

func (x *ThemeRemoveStylePresetCommandArchive) GetPreset() *Reference {
	if x != nil {
		return x.Preset
	}
	return nil
}

func (x *ThemeRemoveStylePresetCommandArchive) GetPresetIndex() uint32 {
	if x != nil && x.PresetIndex != nil {
		return *x.PresetIndex
	}
	return 0
}

func (x *ThemeRemoveStylePresetCommandArchive) GetPresetKind() string {
	if x != nil && x.PresetKind != nil {
		return *x.PresetKind
	}
	return ""
}

func (x *ThemeRemoveStylePresetCommandArchive) GetIdentifier() string {
	if x != nil && x.Identifier != nil {
		return *x.Identifier
	}
	return ""
}

func (x *ThemeRemoveStylePresetCommandArchive) GetReplacementPreset() *Reference {
	if x != nil {
		return x.ReplacementPreset
	}
	return nil
}

type ThemeMovePresetCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super    *CommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Theme    *Reference      `protobuf:"bytes,2,req,name=theme" json:"theme,omitempty"`
	PresetId *UUID           `protobuf:"bytes,3,req,name=preset_id,json=presetId" json:"preset_id,omitempty"`
	NewIndex *uint32         `protobuf:"varint,4,req,name=new_index,json=newIndex" json:"new_index,omitempty"`
	OldIndex *uint32         `protobuf:"varint,5,req,name=old_index,json=oldIndex" json:"old_index,omitempty"`
}

func (x *ThemeMovePresetCommandArchive) Reset() {
	*x = ThemeMovePresetCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSSArchives_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThemeMovePresetCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThemeMovePresetCommandArchive) ProtoMessage() {}

func (x *ThemeMovePresetCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSSArchives_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThemeMovePresetCommandArchive.ProtoReflect.Descriptor instead.
func (*ThemeMovePresetCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSSArchives_proto_rawDescGZIP(), []int{10}
}

func (x *ThemeMovePresetCommandArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *ThemeMovePresetCommandArchive) GetTheme() *Reference {
	if x != nil {
		return x.Theme
	}
	return nil
}

func (x *ThemeMovePresetCommandArchive) GetPresetId() *UUID {
	if x != nil {
		return x.PresetId
	}
	return nil
}

func (x *ThemeMovePresetCommandArchive) GetNewIndex() uint32 {
	if x != nil && x.NewIndex != nil {
		return *x.NewIndex
	}
	return 0
}

func (x *ThemeMovePresetCommandArchive) GetOldIndex() uint32 {
	if x != nil && x.OldIndex != nil {
		return *x.OldIndex
	}
	return 0
}

type ThemeReplaceStylePresetAndDisconnectStylesCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super             *CommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Preset            *Reference      `protobuf:"bytes,2,req,name=preset" json:"preset,omitempty"`
	ReplacementPreset *Reference      `protobuf:"bytes,3,req,name=replacement_preset,json=replacementPreset" json:"replacement_preset,omitempty"`
}

func (x *ThemeReplaceStylePresetAndDisconnectStylesCommandArchive) Reset() {
	*x = ThemeReplaceStylePresetAndDisconnectStylesCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSSArchives_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThemeReplaceStylePresetAndDisconnectStylesCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThemeReplaceStylePresetAndDisconnectStylesCommandArchive) ProtoMessage() {}

func (x *ThemeReplaceStylePresetAndDisconnectStylesCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSSArchives_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThemeReplaceStylePresetAndDisconnectStylesCommandArchive.ProtoReflect.Descriptor instead.
func (*ThemeReplaceStylePresetAndDisconnectStylesCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSSArchives_proto_rawDescGZIP(), []int{11}
}

func (x *ThemeReplaceStylePresetAndDisconnectStylesCommandArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *ThemeReplaceStylePresetAndDisconnectStylesCommandArchive) GetPreset() *Reference {
	if x != nil {
		return x.Preset
	}
	return nil
}

func (x *ThemeReplaceStylePresetAndDisconnectStylesCommandArchive) GetReplacementPreset() *Reference {
	if x != nil {
		return x.ReplacementPreset
	}
	return nil
}

type CommandPropertyEntryArchive struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	Property     *uint32    `protobuf:"varint,1,req,name=property" json:"property,omitempty"`
	Type         *int32     `protobuf:"varint,2,req,name=type" json:"type,omitempty"`
	IntegerValue *int32     `protobuf:"varint,3,opt,name=integer_value,json=integerValue" json:"integer_value,omitempty"`
	FloatValue   *float32   `protobuf:"fixed32,4,opt,name=float_value,json=floatValue" json:"float_value,omitempty"`
	DoubleValue  *float64   `protobuf:"fixed64,5,opt,name=double_value,json=doubleValue" json:"double_value,omitempty"`
	StringValue  *string    `protobuf:"bytes,6,opt,name=string_value,json=stringValue" json:"string_value,omitempty"`
	TspReference *Reference `protobuf:"bytes,7,opt,name=tsp_reference,json=tspReference" json:"tsp_reference,omitempty"`
}

func (x *CommandPropertyEntryArchive) Reset() {
	*x = CommandPropertyEntryArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSSArchives_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandPropertyEntryArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandPropertyEntryArchive) ProtoMessage() {}

func (x *CommandPropertyEntryArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSSArchives_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandPropertyEntryArchive.ProtoReflect.Descriptor instead.
func (*CommandPropertyEntryArchive) Descriptor() ([]byte, []int) {
	return file_TSSArchives_proto_rawDescGZIP(), []int{12}
}

func (x *CommandPropertyEntryArchive) GetProperty() uint32 {
	if x != nil && x.Property != nil {
		return *x.Property
	}
	return 0
}

func (x *CommandPropertyEntryArchive) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *CommandPropertyEntryArchive) GetIntegerValue() int32 {
	if x != nil && x.IntegerValue != nil {
		return *x.IntegerValue
	}
	return 0
}

func (x *CommandPropertyEntryArchive) GetFloatValue() float32 {
	if x != nil && x.FloatValue != nil {
		return *x.FloatValue
	}
	return 0
}

func (x *CommandPropertyEntryArchive) GetDoubleValue() float64 {
	if x != nil && x.DoubleValue != nil {
		return *x.DoubleValue
	}
	return 0
}

func (x *CommandPropertyEntryArchive) GetStringValue() string {
	if x != nil && x.StringValue != nil {
		return *x.StringValue
	}
	return ""
}

func (x *CommandPropertyEntryArchive) GetTspReference() *Reference {
	if x != nil {
		return x.TspReference
	}
	return nil
}

type CommandPropertyMapArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PropertyEntries []*CommandPropertyEntryArchive `protobuf:"bytes,1,rep,name=property_entries,json=propertyEntries" json:"property_entries,omitempty"`
}

func (x *CommandPropertyMapArchive) Reset() {
	*x = CommandPropertyMapArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSSArchives_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandPropertyMapArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandPropertyMapArchive) ProtoMessage() {}

func (x *CommandPropertyMapArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSSArchives_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandPropertyMapArchive.ProtoReflect.Descriptor instead.
func (*CommandPropertyMapArchive) Descriptor() ([]byte, []int) {
	return file_TSSArchives_proto_rawDescGZIP(), []int{13}
}

func (x *CommandPropertyMapArchive) GetPropertyEntries() []*CommandPropertyEntryArchive {
	if x != nil {
		return x.PropertyEntries
	}
	return nil
}

type StylesheetArchive_IdentifiedStyleEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier *string    `protobuf:"bytes,1,req,name=identifier" json:"identifier,omitempty"`
	Style      *Reference `protobuf:"bytes,2,req,name=style" json:"style,omitempty"`
}

func (x *StylesheetArchive_IdentifiedStyleEntry) Reset() {
	*x = StylesheetArchive_IdentifiedStyleEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSSArchives_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StylesheetArchive_IdentifiedStyleEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StylesheetArchive_IdentifiedStyleEntry) ProtoMessage() {}

func (x *StylesheetArchive_IdentifiedStyleEntry) ProtoReflect() protoreflect.Message {
	mi := &file_TSSArchives_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StylesheetArchive_IdentifiedStyleEntry.ProtoReflect.Descriptor instead.
func (*StylesheetArchive_IdentifiedStyleEntry) Descriptor() ([]byte, []int) {
	return file_TSSArchives_proto_rawDescGZIP(), []int{1, 0}
}

func (x *StylesheetArchive_IdentifiedStyleEntry) GetIdentifier() string {
	if x != nil && x.Identifier != nil {
		return *x.Identifier
	}
	return ""
}

func (x *StylesheetArchive_IdentifiedStyleEntry) GetStyle() *Reference {
	if x != nil {
		return x.Style
	}
	return nil
}

type StylesheetArchive_StyleChildrenEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent   *Reference   `protobuf:"bytes,1,req,name=parent" json:"parent,omitempty"`
	Children []*Reference `protobuf:"bytes,2,rep,name=children" json:"children,omitempty"`
}

func (x *StylesheetArchive_StyleChildrenEntry) Reset() {
	*x = StylesheetArchive_StyleChildrenEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSSArchives_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StylesheetArchive_StyleChildrenEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StylesheetArchive_StyleChildrenEntry) ProtoMessage() {}

func (x *StylesheetArchive_StyleChildrenEntry) ProtoReflect() protoreflect.Message {
	mi := &file_TSSArchives_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StylesheetArchive_StyleChildrenEntry.ProtoReflect.Descriptor instead.
func (*StylesheetArchive_StyleChildrenEntry) Descriptor() ([]byte, []int) {
	return file_TSSArchives_proto_rawDescGZIP(), []int{1, 1}
}

func (x *StylesheetArchive_StyleChildrenEntry) GetParent() *Reference {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *StylesheetArchive_StyleChildrenEntry) GetChildren() []*Reference {
	if x != nil {
		return x.Children
	}
	return nil
}

type StylesheetArchive_VersionedStyles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Styles                   []*Reference                              `protobuf:"bytes,1,rep,name=styles" json:"styles,omitempty"`
	IdentifierToStyleMap     []*StylesheetArchive_IdentifiedStyleEntry `protobuf:"bytes,2,rep,name=identifier_to_style_map,json=identifierToStyleMap" json:"identifier_to_style_map,omitempty"`
	ParentToChildrenStyleMap []*StylesheetArchive_StyleChildrenEntry   `protobuf:"bytes,3,rep,name=parent_to_children_style_map,json=parentToChildrenStyleMap" json:"parent_to_children_style_map,omitempty"`
}

func (x *StylesheetArchive_VersionedStyles) Reset() {
	*x = StylesheetArchive_VersionedStyles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSSArchives_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StylesheetArchive_VersionedStyles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StylesheetArchive_VersionedStyles) ProtoMessage() {}

func (x *StylesheetArchive_VersionedStyles) ProtoReflect() protoreflect.Message {
	mi := &file_TSSArchives_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StylesheetArchive_VersionedStyles.ProtoReflect.Descriptor instead.
func (*StylesheetArchive_VersionedStyles) Descriptor() ([]byte, []int) {
	return file_TSSArchives_proto_rawDescGZIP(), []int{1, 2}
}

func (x *StylesheetArchive_VersionedStyles) GetStyles() []*Reference {
	if x != nil {
		return x.Styles
	}
	return nil
}

func (x *StylesheetArchive_VersionedStyles) GetIdentifierToStyleMap() []*StylesheetArchive_IdentifiedStyleEntry {
	if x != nil {
		return x.IdentifierToStyleMap
	}
	return nil
}

func (x *StylesheetArchive_VersionedStyles) GetParentToChildrenStyleMap() []*StylesheetArchive_StyleChildrenEntry {
	if x != nil {
		return x.ParentToChildrenStyleMap
	}
	return nil
}

var file_TSSArchives_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*CommandPropertyEntryArchive)(nil),
		ExtensionType: (*Color)(nil),
		Field:         8,
		Name:          "TSS.color",
		Tag:           "bytes,8,opt,name=color",
		Filename:      "TSSArchives.proto",
	},
}

// Extension fields to CommandPropertyEntryArchive.
var (
	// optional TSP.Color color = 8;
	E_Color = &file_TSSArchives_proto_extTypes[0]
)

var File_TSSArchives_proto protoreflect.FileDescriptor

var file_TSSArchives_proto_rawDesc = []byte{
	0x0a, 0x11, 0x54, 0x53, 0x53, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x03, 0x54, 0x53, 0x53, 0x1a, 0x11, 0x54, 0x53, 0x50, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x54, 0x53, 0x4b,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcf,
	0x01, 0x0a, 0x0c, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73,
	0x74, 0x79, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x26,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x52, 0x0b, 0x69, 0x73, 0x56, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2e, 0x0a, 0x0a, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x68, 0x65, 0x65, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x68, 0x65, 0x65, 0x74,
	0x22, 0xb1, 0x0a, 0x0a, 0x11, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x68, 0x65, 0x65, 0x74, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x12, 0x62,
	0x0a, 0x17, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x5f,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x54, 0x53, 0x53, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x68, 0x65, 0x65, 0x74,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x6f, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x4d,
	0x61, 0x70, 0x12, 0x26, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x09, 0x69, 0x73,
	0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74,
	0x72, 0x75, 0x65, 0x52, 0x08, 0x69, 0x73, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x69, 0x0a,
	0x1c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x72, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x54, 0x53, 0x53, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73,
	0x68, 0x65, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x18,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x2d, 0x0a, 0x0f, 0x63, 0x61, 0x6e, 0x5f,
	0x63, 0x75, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0d, 0x63, 0x61, 0x6e, 0x43, 0x75, 0x6c,
	0x6c, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x0f, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x31, 0x30, 0x5f, 0x30, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x54, 0x53, 0x53, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x68, 0x65, 0x65,
	0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x65, 0x64, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x52, 0x0c, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73,
	0x46, 0x6f, 0x72, 0x31, 0x30, 0x30, 0x12, 0x4d, 0x0a, 0x0f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73,
	0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x31, 0x30, 0x5f, 0x31, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x54, 0x53, 0x53, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x68, 0x65, 0x65, 0x74,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65,
	0x64, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x52, 0x0c, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x46,
	0x6f, 0x72, 0x31, 0x30, 0x31, 0x12, 0x4d, 0x0a, 0x0f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x5f,
	0x66, 0x6f, 0x72, 0x5f, 0x31, 0x30, 0x5f, 0x32, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x54, 0x53, 0x53, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x68, 0x65, 0x65, 0x74, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x52, 0x0c, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x46, 0x6f,
	0x72, 0x31, 0x30, 0x32, 0x12, 0x4d, 0x0a, 0x0f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x5f, 0x66,
	0x6f, 0x72, 0x5f, 0x31, 0x31, 0x5f, 0x30, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x54, 0x53, 0x53, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x68, 0x65, 0x65, 0x74, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x73, 0x52, 0x0c, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x46, 0x6f, 0x72,
	0x31, 0x31, 0x30, 0x12, 0x4d, 0x0a, 0x0f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x5f, 0x66, 0x6f,
	0x72, 0x5f, 0x31, 0x31, 0x5f, 0x31, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x54,
	0x53, 0x53, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x68, 0x65, 0x65, 0x74, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x73, 0x52, 0x0c, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x31,
	0x31, 0x31, 0x12, 0x4d, 0x0a, 0x0f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72,
	0x5f, 0x31, 0x31, 0x5f, 0x32, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x54, 0x53,
	0x53, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x68, 0x65, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x73, 0x52, 0x0c, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x31, 0x31,
	0x32, 0x1a, 0x5c, 0x0a, 0x14, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x05, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x1a,
	0x68, 0x0a, 0x12, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x26, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a,
	0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x1a, 0x88, 0x02, 0x0a, 0x0f, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x12, 0x26, 0x0a,
	0x06, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x73,
	0x74, 0x79, 0x6c, 0x65, 0x73, 0x12, 0x62, 0x0a, 0x17, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x54, 0x53, 0x53, 0x2e, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x73, 0x68, 0x65, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x14, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54,
	0x6f, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x69, 0x0a, 0x1c, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x5f,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x54, 0x53, 0x53, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x68, 0x65, 0x65, 0x74,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x43, 0x68, 0x69,
	0x6c, 0x64, 0x72, 0x65, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x18, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x4d, 0x61, 0x70, 0x22, 0x9f, 0x03, 0x0a, 0x0f, 0x54, 0x53, 0x53, 0x54, 0x68, 0x65, 0x6d,
	0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x3b, 0x0a, 0x11, 0x6c, 0x65, 0x67, 0x61,
	0x63, 0x79, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x68, 0x65, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x10, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x73, 0x68, 0x65, 0x65, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x3f, 0x0a, 0x13, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x73, 0x68, 0x65, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x12, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x68, 0x65, 0x65,
	0x74, 0x12, 0x53, 0x0a, 0x21, 0x6f, 0x6c, 0x64, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x73, 0x5f, 0x66,
	0x6f, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x1d, 0x6f, 0x6c, 0x64, 0x55, 0x75, 0x69, 0x64,
	0x73, 0x46, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x53, 0x0a, 0x21, 0x6e, 0x65, 0x77, 0x5f, 0x75, 0x75,
	0x69, 0x64, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x72,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x1d, 0x6e, 0x65,
	0x77, 0x55, 0x75, 0x69, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x0d, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x0c,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x2a, 0x08, 0x08, 0x64,
	0x10, 0x80, 0x80, 0x80, 0x80, 0x02, 0x22, 0xcb, 0x01, 0x0a, 0x18, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x54, 0x68, 0x65, 0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x2a,
	0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x2b, 0x0a, 0x09, 0x6f, 0x6c,
	0x64, 0x5f, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x6f,
	0x6c, 0x64, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x74,
	0x68, 0x65, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x54,
	0x68, 0x65, 0x6d, 0x65, 0x22, 0x72, 0x0a, 0x1d, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x68, 0x65,
	0x6d, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x12, 0x26, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x93, 0x03, 0x0a, 0x27, 0x54, 0x53, 0x53,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12,
	0x33, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x12, 0x4c, 0x0a, 0x1b, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x5f, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f,
	0x6d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x17, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x57, 0x69, 0x74, 0x68, 0x4f, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4d,
	0x61, 0x70, 0x12, 0x4c, 0x0a, 0x1b, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68,
	0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x6d, 0x61,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x17, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x57, 0x69,
	0x74, 0x68, 0x4e, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4d, 0x61, 0x70,
	0x12, 0x2d, 0x0a, 0x0a, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x44, 0x69, 0x66, 0x66, 0x12,
	0x3d, 0x0a, 0x18, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x73, 0x74,
	0x79, 0x6c, 0x65, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x15, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x46,
	0x6f, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xb9,
	0x01, 0x0a, 0x20, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x26,
	0x0a, 0x06, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x12, 0x2c, 0x0a, 0x09, 0x6f, 0x6c, 0x64, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x6f, 0x6c, 0x64, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20,
	0x02, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xd9, 0x01, 0x0a, 0x25, 0x54,
	0x68, 0x65, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12,
	0x24, 0x0a, 0x05, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x05,
	0x74, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x09, 0x6f, 0x6c, 0x64, 0x5f, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x96, 0x02, 0x0a, 0x21, 0x54, 0x68, 0x65, 0x6d, 0x65,
	0x41, 0x64, 0x64, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53,
	0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x05, 0x74, 0x68, 0x65, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x05, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x26, 0x0a,
	0x06, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x64, 0x64, 0x5f, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x68, 0x65,
	0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x61, 0x64, 0x64, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x54, 0x6f, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x68, 0x65, 0x65, 0x74, 0x22,
	0xc2, 0x02, 0x0a, 0x24, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x05, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x05, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x6b,
	0x69, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x22, 0xd2, 0x01, 0x0a, 0x1d, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x4d, 0x6f,
	0x76, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x12, 0x24, 0x0a, 0x05, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x05, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x08, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x02,
	0x28, 0x0d, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09,
	0x6f, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0d, 0x52,
	0x08, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xcc, 0x01, 0x0a, 0x38, 0x54, 0x68,
	0x65, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x41, 0x6e, 0x64, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x12, 0x26, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x06, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x12, 0x3d, 0x0a, 0x12, 0x72, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x22, 0x95, 0x02, 0x0a, 0x1b, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x33, 0x0a, 0x0d, 0x74, 0x73, 0x70, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x74, 0x73, 0x70,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2a, 0x05, 0x08, 0x08, 0x10, 0xd1, 0x0f,
	0x22, 0x68, 0x0a, 0x19, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x4b, 0x0a,
	0x10, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x54, 0x53, 0x53, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2a, 0x47, 0x0a, 0x09, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x10, 0x03, 0x2a, 0xba, 0x01, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x10, 0x01, 0x12, 0x14, 0x0a,
	0x10, 0x4e, 0x75, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x4e,
	0x53, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x53, 0x50, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x10, 0x07,
	0x3a, 0x42, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x20, 0x2e, 0x54, 0x53, 0x53, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x2f, 0x6b, 0x70, 0x62,
}

var (
	file_TSSArchives_proto_rawDescOnce sync.Once
	file_TSSArchives_proto_rawDescData = file_TSSArchives_proto_rawDesc
)

func file_TSSArchives_proto_rawDescGZIP() []byte {
	file_TSSArchives_proto_rawDescOnce.Do(func() {
		file_TSSArchives_proto_rawDescData = protoimpl.X.CompressGZIP(file_TSSArchives_proto_rawDescData)
	})
	return file_TSSArchives_proto_rawDescData
}

var file_TSSArchives_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_TSSArchives_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_TSSArchives_proto_goTypes = []interface{}{
	(ValueType)(0),                                                   // 0: TSS.ValueType
	(PropertyType)(0),                                                // 1: TSS.PropertyType
	(*StyleArchive)(nil),                                             // 2: TSS.StyleArchive
	(*StylesheetArchive)(nil),                                        // 3: TSS.StylesheetArchive
	(*TSSThemeArchive)(nil),                                          // 4: TSS.TSSThemeArchive
	(*ApplyThemeCommandArchive)(nil),                                 // 5: TSS.ApplyThemeCommandArchive
	(*ApplyThemeChildCommandArchive)(nil),                            // 6: TSS.ApplyThemeChildCommandArchive
	(*TSSStyleUpdatePropertyMapCommandArchive)(nil),                  // 7: TSS.TSSStyleUpdatePropertyMapCommandArchive
	(*ThemeReplacePresetCommandArchive)(nil),                         // 8: TSS.ThemeReplacePresetCommandArchive
	(*ThemeReplaceColorPresetCommandArchive)(nil),                    // 9: TSS.ThemeReplaceColorPresetCommandArchive
	(*ThemeAddStylePresetCommandArchive)(nil),                        // 10: TSS.ThemeAddStylePresetCommandArchive
	(*ThemeRemoveStylePresetCommandArchive)(nil),                     // 11: TSS.ThemeRemoveStylePresetCommandArchive
	(*ThemeMovePresetCommandArchive)(nil),                            // 12: TSS.ThemeMovePresetCommandArchive
	(*ThemeReplaceStylePresetAndDisconnectStylesCommandArchive)(nil), // 13: TSS.ThemeReplaceStylePresetAndDisconnectStylesCommandArchive
	(*CommandPropertyEntryArchive)(nil),                              // 14: TSS.CommandPropertyEntryArchive
	(*CommandPropertyMapArchive)(nil),                                // 15: TSS.CommandPropertyMapArchive
	(*StylesheetArchive_IdentifiedStyleEntry)(nil),                   // 16: TSS.StylesheetArchive.IdentifiedStyleEntry
	(*StylesheetArchive_StyleChildrenEntry)(nil),                     // 17: TSS.StylesheetArchive.StyleChildrenEntry
	(*StylesheetArchive_VersionedStyles)(nil),                        // 18: TSS.StylesheetArchive.VersionedStyles
	(*Reference)(nil),                                                // 19: TSP.Reference
	(*UUID)(nil),                                                     // 20: TSP.UUID
	(*Color)(nil),                                                    // 21: TSP.Color
	(*CommandArchive)(nil),                                           // 22: TSK.CommandArchive
}
var file_TSSArchives_proto_depIdxs = []int32{
	19, // 0: TSS.StyleArchive.parent:type_name -> TSP.Reference
	19, // 1: TSS.StyleArchive.stylesheet:type_name -> TSP.Reference
	19, // 2: TSS.StylesheetArchive.styles:type_name -> TSP.Reference
	16, // 3: TSS.StylesheetArchive.identifier_to_style_map:type_name -> TSS.StylesheetArchive.IdentifiedStyleEntry
	19, // 4: TSS.StylesheetArchive.parent:type_name -> TSP.Reference
	17, // 5: TSS.StylesheetArchive.parent_to_children_style_map:type_name -> TSS.StylesheetArchive.StyleChildrenEntry
	18, // 6: TSS.StylesheetArchive.styles_for_10_0:type_name -> TSS.StylesheetArchive.VersionedStyles
	18, // 7: TSS.StylesheetArchive.styles_for_10_1:type_name -> TSS.StylesheetArchive.VersionedStyles
	18, // 8: TSS.StylesheetArchive.styles_for_10_2:type_name -> TSS.StylesheetArchive.VersionedStyles
	18, // 9: TSS.StylesheetArchive.styles_for_11_0:type_name -> TSS.StylesheetArchive.VersionedStyles
	18, // 10: TSS.StylesheetArchive.styles_for_11_1:type_name -> TSS.StylesheetArchive.VersionedStyles
	18, // 11: TSS.StylesheetArchive.styles_for_11_2:type_name -> TSS.StylesheetArchive.VersionedStyles
	19, // 12: TSS.TSSThemeArchive.legacy_stylesheet:type_name -> TSP.Reference
	19, // 13: TSS.TSSThemeArchive.document_stylesheet:type_name -> TSP.Reference
	20, // 14: TSS.TSSThemeArchive.old_uuids_for_preset_replacements:type_name -> TSP.UUID
	20, // 15: TSS.TSSThemeArchive.new_uuids_for_preset_replacements:type_name -> TSP.UUID
	21, // 16: TSS.TSSThemeArchive.color_presets:type_name -> TSP.Color
	22, // 17: TSS.ApplyThemeCommandArchive.super:type_name -> TSK.CommandArchive
	19, // 18: TSS.ApplyThemeCommandArchive.commands:type_name -> TSP.Reference
	19, // 19: TSS.ApplyThemeCommandArchive.old_theme:type_name -> TSP.Reference
	19, // 20: TSS.ApplyThemeCommandArchive.new_theme:type_name -> TSP.Reference
	22, // 21: TSS.ApplyThemeChildCommandArchive.super:type_name -> TSK.CommandArchive
	19, // 22: TSS.ApplyThemeChildCommandArchive.parent:type_name -> TSP.Reference
	22, // 23: TSS.TSSStyleUpdatePropertyMapCommandArchive.super:type_name -> TSK.CommandArchive
	19, // 24: TSS.TSSStyleUpdatePropertyMapCommandArchive.current_style:type_name -> TSP.Reference
	19, // 25: TSS.TSSStyleUpdatePropertyMapCommandArchive.style_with_old_property_map:type_name -> TSP.Reference
	19, // 26: TSS.TSSStyleUpdatePropertyMapCommandArchive.style_with_new_property_map:type_name -> TSP.Reference
	19, // 27: TSS.TSSStyleUpdatePropertyMapCommandArchive.style_diff:type_name -> TSP.Reference
	22, // 28: TSS.ThemeReplacePresetCommandArchive.super:type_name -> TSK.CommandArchive
	19, // 29: TSS.ThemeReplacePresetCommandArchive.preset:type_name -> TSP.Reference
	19, // 30: TSS.ThemeReplacePresetCommandArchive.oldPreset:type_name -> TSP.Reference
	22, // 31: TSS.ThemeReplaceColorPresetCommandArchive.super:type_name -> TSK.CommandArchive
	19, // 32: TSS.ThemeReplaceColorPresetCommandArchive.theme:type_name -> TSP.Reference
	21, // 33: TSS.ThemeReplaceColorPresetCommandArchive.color:type_name -> TSP.Color
	21, // 34: TSS.ThemeReplaceColorPresetCommandArchive.old_color:type_name -> TSP.Color
	22, // 35: TSS.ThemeAddStylePresetCommandArchive.super:type_name -> TSK.CommandArchive
	19, // 36: TSS.ThemeAddStylePresetCommandArchive.theme:type_name -> TSP.Reference
	19, // 37: TSS.ThemeAddStylePresetCommandArchive.preset:type_name -> TSP.Reference
	22, // 38: TSS.ThemeRemoveStylePresetCommandArchive.super:type_name -> TSK.CommandArchive
	19, // 39: TSS.ThemeRemoveStylePresetCommandArchive.theme:type_name -> TSP.Reference
	19, // 40: TSS.ThemeRemoveStylePresetCommandArchive.preset:type_name -> TSP.Reference
	19, // 41: TSS.ThemeRemoveStylePresetCommandArchive.replacement_preset:type_name -> TSP.Reference
	22, // 42: TSS.ThemeMovePresetCommandArchive.super:type_name -> TSK.CommandArchive
	19, // 43: TSS.ThemeMovePresetCommandArchive.theme:type_name -> TSP.Reference
	20, // 44: TSS.ThemeMovePresetCommandArchive.preset_id:type_name -> TSP.UUID
	22, // 45: TSS.ThemeReplaceStylePresetAndDisconnectStylesCommandArchive.super:type_name -> TSK.CommandArchive
	19, // 46: TSS.ThemeReplaceStylePresetAndDisconnectStylesCommandArchive.preset:type_name -> TSP.Reference
	19, // 47: TSS.ThemeReplaceStylePresetAndDisconnectStylesCommandArchive.replacement_preset:type_name -> TSP.Reference
	19, // 48: TSS.CommandPropertyEntryArchive.tsp_reference:type_name -> TSP.Reference
	14, // 49: TSS.CommandPropertyMapArchive.property_entries:type_name -> TSS.CommandPropertyEntryArchive
	19, // 50: TSS.StylesheetArchive.IdentifiedStyleEntry.style:type_name -> TSP.Reference
	19, // 51: TSS.StylesheetArchive.StyleChildrenEntry.parent:type_name -> TSP.Reference
	19, // 52: TSS.StylesheetArchive.StyleChildrenEntry.children:type_name -> TSP.Reference
	19, // 53: TSS.StylesheetArchive.VersionedStyles.styles:type_name -> TSP.Reference
	16, // 54: TSS.StylesheetArchive.VersionedStyles.identifier_to_style_map:type_name -> TSS.StylesheetArchive.IdentifiedStyleEntry
	17, // 55: TSS.StylesheetArchive.VersionedStyles.parent_to_children_style_map:type_name -> TSS.StylesheetArchive.StyleChildrenEntry
	14, // 56: TSS.color:extendee -> TSS.CommandPropertyEntryArchive
	21, // 57: TSS.color:type_name -> TSP.Color
	58, // [58:58] is the sub-list for method output_type
	58, // [58:58] is the sub-list for method input_type
	57, // [57:58] is the sub-list for extension type_name
	56, // [56:57] is the sub-list for extension extendee
	0,  // [0:56] is the sub-list for field type_name
}

func init() { file_TSSArchives_proto_init() }
func file_TSSArchives_proto_init() {
	if File_TSSArchives_proto != nil {
		return
	}
	file_TSPMessages_proto_init()
	file_TSKArchives_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_TSSArchives_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StyleArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSSArchives_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StylesheetArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSSArchives_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSSThemeArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_TSSArchives_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyThemeCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSSArchives_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyThemeChildCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSSArchives_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSSStyleUpdatePropertyMapCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSSArchives_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThemeReplacePresetCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSSArchives_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThemeReplaceColorPresetCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSSArchives_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThemeAddStylePresetCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSSArchives_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThemeRemoveStylePresetCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSSArchives_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThemeMovePresetCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSSArchives_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThemeReplaceStylePresetAndDisconnectStylesCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSSArchives_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandPropertyEntryArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_TSSArchives_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandPropertyMapArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSSArchives_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StylesheetArchive_IdentifiedStyleEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSSArchives_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StylesheetArchive_StyleChildrenEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSSArchives_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StylesheetArchive_VersionedStyles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_TSSArchives_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   17,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_TSSArchives_proto_goTypes,
		DependencyIndexes: file_TSSArchives_proto_depIdxs,
		EnumInfos:         file_TSSArchives_proto_enumTypes,
		MessageInfos:      file_TSSArchives_proto_msgTypes,
		ExtensionInfos:    file_TSSArchives_proto_extTypes,
	}.Build()
	File_TSSArchives_proto = out.File
	file_TSSArchives_proto_rawDesc = nil
	file_TSSArchives_proto_goTypes = nil
	file_TSSArchives_proto_depIdxs = nil
}
