// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: TSWPCommandArchives.proto

package kpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ObjectPropertyType int32

const (
	ObjectPropertyType_kObjectPropertyTypeBool    ObjectPropertyType = 0
	ObjectPropertyType_kObjectPropertyTypeFloat   ObjectPropertyType = 1
	ObjectPropertyType_kObjectPropertyTypeInteger ObjectPropertyType = 2
	ObjectPropertyType_kObjectPropertyTypeString  ObjectPropertyType = 3
	ObjectPropertyType_kObjectPropertyTypeIdPath  ObjectPropertyType = 4
	ObjectPropertyType_kObjectPropertyTypeFill    ObjectPropertyType = 5
	ObjectPropertyType_kObjectPropertyTypeColor   ObjectPropertyType = 6
	ObjectPropertyType_kObjectPropertyTypeShadow  ObjectPropertyType = 7
)

// Enum value maps for ObjectPropertyType.
var (
	ObjectPropertyType_name = map[int32]string{
		0: "kObjectPropertyTypeBool",
		1: "kObjectPropertyTypeFloat",
		2: "kObjectPropertyTypeInteger",
		3: "kObjectPropertyTypeString",
		4: "kObjectPropertyTypeIdPath",
		5: "kObjectPropertyTypeFill",
		6: "kObjectPropertyTypeColor",
		7: "kObjectPropertyTypeShadow",
	}
	ObjectPropertyType_value = map[string]int32{
		"kObjectPropertyTypeBool":    0,
		"kObjectPropertyTypeFloat":   1,
		"kObjectPropertyTypeInteger": 2,
		"kObjectPropertyTypeString":  3,
		"kObjectPropertyTypeIdPath":  4,
		"kObjectPropertyTypeFill":    5,
		"kObjectPropertyTypeColor":   6,
		"kObjectPropertyTypeShadow":  7,
	}
)

func (x ObjectPropertyType) Enum() *ObjectPropertyType {
	p := new(ObjectPropertyType)
	*p = x
	return p
}

func (x ObjectPropertyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ObjectPropertyType) Descriptor() protoreflect.EnumDescriptor {
	return file_TSWPCommandArchives_proto_enumTypes[0].Descriptor()
}

func (ObjectPropertyType) Type() protoreflect.EnumType {
	return &file_TSWPCommandArchives_proto_enumTypes[0]
}

func (x ObjectPropertyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ObjectPropertyType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ObjectPropertyType(num)
	return nil
}

// Deprecated: Use ObjectPropertyType.Descriptor instead.
func (ObjectPropertyType) EnumDescriptor() ([]byte, []int) {
	return file_TSWPCommandArchives_proto_rawDescGZIP(), []int{0}
}

type TextCommandArchive_Kind int32

const (
	TextCommandArchive_kKindContained                    TextCommandArchive_Kind = 0
	TextCommandArchive_kKindReplaceText                  TextCommandArchive_Kind = 1
	TextCommandArchive_kKindPaste                        TextCommandArchive_Kind = 2
	TextCommandArchive_kKindParagraphStyle               TextCommandArchive_Kind = 3
	TextCommandArchive_kKindListStyle                    TextCommandArchive_Kind = 4
	TextCommandArchive_kKindIndentParagraphLevel         TextCommandArchive_Kind = 5
	TextCommandArchive_kKindDragText                     TextCommandArchive_Kind = 6
	TextCommandArchive_kKindPasteStyle                   TextCommandArchive_Kind = 7
	TextCommandArchive_kKindApplyChangesInRange          TextCommandArchive_Kind = 8
	TextCommandArchive_kKindInsertCitationField          TextCommandArchive_Kind = 10
	TextCommandArchive_kKindInsertBibliographyEntry      TextCommandArchive_Kind = 11
	TextCommandArchive_kKindFormatCitationFields         TextCommandArchive_Kind = 12
	TextCommandArchive_kKindInsertTOCSmartField          TextCommandArchive_Kind = 13
	TextCommandArchive_kKindInsertDateTimeField          TextCommandArchive_Kind = 14
	TextCommandArchive_kKindUpdateDateTimeField          TextCommandArchive_Kind = 15
	TextCommandArchive_kKindSetParagraphFirstTopicNumber TextCommandArchive_Kind = 16
	TextCommandArchive_kKindCharacterStyle               TextCommandArchive_Kind = 17
	TextCommandArchive_kKindRevertStyles                 TextCommandArchive_Kind = 18
	TextCommandArchive_kKindSetParagraphBidi             TextCommandArchive_Kind = 19
)

// Enum value maps for TextCommandArchive_Kind.
var (
	TextCommandArchive_Kind_name = map[int32]string{
		0:  "kKindContained",
		1:  "kKindReplaceText",
		2:  "kKindPaste",
		3:  "kKindParagraphStyle",
		4:  "kKindListStyle",
		5:  "kKindIndentParagraphLevel",
		6:  "kKindDragText",
		7:  "kKindPasteStyle",
		8:  "kKindApplyChangesInRange",
		10: "kKindInsertCitationField",
		11: "kKindInsertBibliographyEntry",
		12: "kKindFormatCitationFields",
		13: "kKindInsertTOCSmartField",
		14: "kKindInsertDateTimeField",
		15: "kKindUpdateDateTimeField",
		16: "kKindSetParagraphFirstTopicNumber",
		17: "kKindCharacterStyle",
		18: "kKindRevertStyles",
		19: "kKindSetParagraphBidi",
	}
	TextCommandArchive_Kind_value = map[string]int32{
		"kKindContained":                    0,
		"kKindReplaceText":                  1,
		"kKindPaste":                        2,
		"kKindParagraphStyle":               3,
		"kKindListStyle":                    4,
		"kKindIndentParagraphLevel":         5,
		"kKindDragText":                     6,
		"kKindPasteStyle":                   7,
		"kKindApplyChangesInRange":          8,
		"kKindInsertCitationField":          10,
		"kKindInsertBibliographyEntry":      11,
		"kKindFormatCitationFields":         12,
		"kKindInsertTOCSmartField":          13,
		"kKindInsertDateTimeField":          14,
		"kKindUpdateDateTimeField":          15,
		"kKindSetParagraphFirstTopicNumber": 16,
		"kKindCharacterStyle":               17,
		"kKindRevertStyles":                 18,
		"kKindSetParagraphBidi":             19,
	}
)

func (x TextCommandArchive_Kind) Enum() *TextCommandArchive_Kind {
	p := new(TextCommandArchive_Kind)
	*p = x
	return p
}

func (x TextCommandArchive_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TextCommandArchive_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_TSWPCommandArchives_proto_enumTypes[1].Descriptor()
}

func (TextCommandArchive_Kind) Type() protoreflect.EnumType {
	return &file_TSWPCommandArchives_proto_enumTypes[1]
}

func (x TextCommandArchive_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TextCommandArchive_Kind) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TextCommandArchive_Kind(num)
	return nil
}

// Deprecated: Use TextCommandArchive_Kind.Descriptor instead.
func (TextCommandArchive_Kind) EnumDescriptor() ([]byte, []int) {
	return file_TSWPCommandArchives_proto_rawDescGZIP(), []int{1, 0}
}

type StorageActionCommandArchive_Kind int32

const (
	StorageActionCommandArchive_kKindContained                    StorageActionCommandArchive_Kind = 0
	StorageActionCommandArchive_kKindReplaceText                  StorageActionCommandArchive_Kind = 1
	StorageActionCommandArchive_kKindPaste                        StorageActionCommandArchive_Kind = 2
	StorageActionCommandArchive_kKindParagraphStyle               StorageActionCommandArchive_Kind = 3
	StorageActionCommandArchive_kKindListStyle                    StorageActionCommandArchive_Kind = 4
	StorageActionCommandArchive_kKindIndentParagraphLevel         StorageActionCommandArchive_Kind = 5
	StorageActionCommandArchive_kKindDragText                     StorageActionCommandArchive_Kind = 6
	StorageActionCommandArchive_kKindPasteStyle                   StorageActionCommandArchive_Kind = 7
	StorageActionCommandArchive_kKindApplyChangesInRange          StorageActionCommandArchive_Kind = 8
	StorageActionCommandArchive_kKindInsertCitationField          StorageActionCommandArchive_Kind = 10
	StorageActionCommandArchive_kKindInsertBibliographyEntry      StorageActionCommandArchive_Kind = 11
	StorageActionCommandArchive_kKindFormatCitationFields         StorageActionCommandArchive_Kind = 12
	StorageActionCommandArchive_kKindInsertTOCSmartField          StorageActionCommandArchive_Kind = 13
	StorageActionCommandArchive_kKindInsertDateTimeField          StorageActionCommandArchive_Kind = 14
	StorageActionCommandArchive_kKindUpdateDateTimeField          StorageActionCommandArchive_Kind = 15
	StorageActionCommandArchive_kKindSetParagraphFirstTopicNumber StorageActionCommandArchive_Kind = 16
	StorageActionCommandArchive_kKindCharacterStyle               StorageActionCommandArchive_Kind = 17
	StorageActionCommandArchive_kKindRevertStyles                 StorageActionCommandArchive_Kind = 18
	StorageActionCommandArchive_kKindSetParagraphBidi             StorageActionCommandArchive_Kind = 19
	StorageActionCommandArchive_kKindFormatText                   StorageActionCommandArchive_Kind = 20
	StorageActionCommandArchive_kKindInsertAttachment             StorageActionCommandArchive_Kind = 21
	StorageActionCommandArchive_kKindCreateHyperlink              StorageActionCommandArchive_Kind = 22
	StorageActionCommandArchive_kKindModifyHyperlink              StorageActionCommandArchive_Kind = 23
	StorageActionCommandArchive_kKindRemoveHyperlink              StorageActionCommandArchive_Kind = 24
	StorageActionCommandArchive_kKindApplyHighlightText           StorageActionCommandArchive_Kind = 25
	StorageActionCommandArchive_kKindPropagateStyleChanges        StorageActionCommandArchive_Kind = 26
	StorageActionCommandArchive_kKindMovedAnchoredDrawableInline  StorageActionCommandArchive_Kind = 27
	StorageActionCommandArchive_kKindMoveDrawablesAttached        StorageActionCommandArchive_Kind = 28
	StorageActionCommandArchive_kKindMoveMoveDrawablesFloating    StorageActionCommandArchive_Kind = 29
	StorageActionCommandArchive_kKindMoveInlineDrawableAnchored   StorageActionCommandArchive_Kind = 30
	StorageActionCommandArchive_kKindAnchorAttachment             StorageActionCommandArchive_Kind = 31
	StorageActionCommandArchive_kKindBookmark                     StorageActionCommandArchive_Kind = 32
	StorageActionCommandArchive_kKindReplaceSection               StorageActionCommandArchive_Kind = 33
	StorageActionCommandArchive_kKindApplyPencilAnnotation        StorageActionCommandArchive_Kind = 34
	StorageActionCommandArchive_kKindCreateRuby                   StorageActionCommandArchive_Kind = 35
	StorageActionCommandArchive_kKindModifyRuby                   StorageActionCommandArchive_Kind = 36
	StorageActionCommandArchive_kKindRemoveRuby                   StorageActionCommandArchive_Kind = 37
	StorageActionCommandArchive_kKindTateChuYoko                  StorageActionCommandArchive_Kind = 38
	StorageActionCommandArchive_kKindDropCapStyle                 StorageActionCommandArchive_Kind = 39
)

// Enum value maps for StorageActionCommandArchive_Kind.
var (
	StorageActionCommandArchive_Kind_name = map[int32]string{
		0:  "kKindContained",
		1:  "kKindReplaceText",
		2:  "kKindPaste",
		3:  "kKindParagraphStyle",
		4:  "kKindListStyle",
		5:  "kKindIndentParagraphLevel",
		6:  "kKindDragText",
		7:  "kKindPasteStyle",
		8:  "kKindApplyChangesInRange",
		10: "kKindInsertCitationField",
		11: "kKindInsertBibliographyEntry",
		12: "kKindFormatCitationFields",
		13: "kKindInsertTOCSmartField",
		14: "kKindInsertDateTimeField",
		15: "kKindUpdateDateTimeField",
		16: "kKindSetParagraphFirstTopicNumber",
		17: "kKindCharacterStyle",
		18: "kKindRevertStyles",
		19: "kKindSetParagraphBidi",
		20: "kKindFormatText",
		21: "kKindInsertAttachment",
		22: "kKindCreateHyperlink",
		23: "kKindModifyHyperlink",
		24: "kKindRemoveHyperlink",
		25: "kKindApplyHighlightText",
		26: "kKindPropagateStyleChanges",
		27: "kKindMovedAnchoredDrawableInline",
		28: "kKindMoveDrawablesAttached",
		29: "kKindMoveMoveDrawablesFloating",
		30: "kKindMoveInlineDrawableAnchored",
		31: "kKindAnchorAttachment",
		32: "kKindBookmark",
		33: "kKindReplaceSection",
		34: "kKindApplyPencilAnnotation",
		35: "kKindCreateRuby",
		36: "kKindModifyRuby",
		37: "kKindRemoveRuby",
		38: "kKindTateChuYoko",
		39: "kKindDropCapStyle",
	}
	StorageActionCommandArchive_Kind_value = map[string]int32{
		"kKindContained":                    0,
		"kKindReplaceText":                  1,
		"kKindPaste":                        2,
		"kKindParagraphStyle":               3,
		"kKindListStyle":                    4,
		"kKindIndentParagraphLevel":         5,
		"kKindDragText":                     6,
		"kKindPasteStyle":                   7,
		"kKindApplyChangesInRange":          8,
		"kKindInsertCitationField":          10,
		"kKindInsertBibliographyEntry":      11,
		"kKindFormatCitationFields":         12,
		"kKindInsertTOCSmartField":          13,
		"kKindInsertDateTimeField":          14,
		"kKindUpdateDateTimeField":          15,
		"kKindSetParagraphFirstTopicNumber": 16,
		"kKindCharacterStyle":               17,
		"kKindRevertStyles":                 18,
		"kKindSetParagraphBidi":             19,
		"kKindFormatText":                   20,
		"kKindInsertAttachment":             21,
		"kKindCreateHyperlink":              22,
		"kKindModifyHyperlink":              23,
		"kKindRemoveHyperlink":              24,
		"kKindApplyHighlightText":           25,
		"kKindPropagateStyleChanges":        26,
		"kKindMovedAnchoredDrawableInline":  27,
		"kKindMoveDrawablesAttached":        28,
		"kKindMoveMoveDrawablesFloating":    29,
		"kKindMoveInlineDrawableAnchored":   30,
		"kKindAnchorAttachment":             31,
		"kKindBookmark":                     32,
		"kKindReplaceSection":               33,
		"kKindApplyPencilAnnotation":        34,
		"kKindCreateRuby":                   35,
		"kKindModifyRuby":                   36,
		"kKindRemoveRuby":                   37,
		"kKindTateChuYoko":                  38,
		"kKindDropCapStyle":                 39,
	}
)

func (x StorageActionCommandArchive_Kind) Enum() *StorageActionCommandArchive_Kind {
	p := new(StorageActionCommandArchive_Kind)
	*p = x
	return p
}

func (x StorageActionCommandArchive_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StorageActionCommandArchive_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_TSWPCommandArchives_proto_enumTypes[2].Descriptor()
}

func (StorageActionCommandArchive_Kind) Type() protoreflect.EnumType {
	return &file_TSWPCommandArchives_proto_enumTypes[2]
}

func (x StorageActionCommandArchive_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *StorageActionCommandArchive_Kind) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = StorageActionCommandArchive_Kind(num)
	return nil
}

// Deprecated: Use StorageActionCommandArchive_Kind.Descriptor instead.
func (StorageActionCommandArchive_Kind) EnumDescriptor() ([]byte, []int) {
	return file_TSWPCommandArchives_proto_rawDescGZIP(), []int{2, 0}
}

type UpdateFlowInfoCommandArchive_Mode int32

const (
	UpdateFlowInfoCommandArchive_kModeRearrange  UpdateFlowInfoCommandArchive_Mode = 0
	UpdateFlowInfoCommandArchive_kModeAdd        UpdateFlowInfoCommandArchive_Mode = 1
	UpdateFlowInfoCommandArchive_kModeRemove     UpdateFlowInfoCommandArchive_Mode = 2
	UpdateFlowInfoCommandArchive_kModeCompensate UpdateFlowInfoCommandArchive_Mode = 3
)

// Enum value maps for UpdateFlowInfoCommandArchive_Mode.
var (
	UpdateFlowInfoCommandArchive_Mode_name = map[int32]string{
		0: "kModeRearrange",
		1: "kModeAdd",
		2: "kModeRemove",
		3: "kModeCompensate",
	}
	UpdateFlowInfoCommandArchive_Mode_value = map[string]int32{
		"kModeRearrange":  0,
		"kModeAdd":        1,
		"kModeRemove":     2,
		"kModeCompensate": 3,
	}
)

func (x UpdateFlowInfoCommandArchive_Mode) Enum() *UpdateFlowInfoCommandArchive_Mode {
	p := new(UpdateFlowInfoCommandArchive_Mode)
	*p = x
	return p
}

func (x UpdateFlowInfoCommandArchive_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateFlowInfoCommandArchive_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_TSWPCommandArchives_proto_enumTypes[3].Descriptor()
}

func (UpdateFlowInfoCommandArchive_Mode) Type() protoreflect.EnumType {
	return &file_TSWPCommandArchives_proto_enumTypes[3]
}

func (x UpdateFlowInfoCommandArchive_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *UpdateFlowInfoCommandArchive_Mode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = UpdateFlowInfoCommandArchive_Mode(num)
	return nil
}

// Deprecated: Use UpdateFlowInfoCommandArchive_Mode.Descriptor instead.
func (UpdateFlowInfoCommandArchive_Mode) EnumDescriptor() ([]byte, []int) {
	return file_TSWPCommandArchives_proto_rawDescGZIP(), []int{36, 0}
}

type DummyCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Foo *uint32 `protobuf:"varint,1,req,name=foo" json:"foo,omitempty"`
}

func (x *DummyCommandArchive) Reset() {
	*x = DummyCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPCommandArchives_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DummyCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DummyCommandArchive) ProtoMessage() {}

func (x *DummyCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPCommandArchives_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DummyCommandArchive.ProtoReflect.Descriptor instead.
func (*DummyCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSWPCommandArchives_proto_rawDescGZIP(), []int{0}
}

func (x *DummyCommandArchive) GetFoo() uint32 {
	if x != nil && x.Foo != nil {
		return *x.Foo
	}
	return 0
}

type TextCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                    *CommandArchive          `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	Storage                  *Reference               `protobuf:"bytes,2,opt,name=storage" json:"storage,omitempty"`
	UndoTransaction          *UndoTransaction         `protobuf:"bytes,3,opt,name=undo_transaction,json=undoTransaction" json:"undo_transaction,omitempty"`
	RestoreRangeLocation     *uint32                  `protobuf:"varint,4,opt,name=restore_range_location,json=restoreRangeLocation" json:"restore_range_location,omitempty"`
	RestoreRangeLength       *uint32                  `protobuf:"varint,5,opt,name=restore_range_length,json=restoreRangeLength" json:"restore_range_length,omitempty"`
	RedoRestoreRangeLocation *uint32                  `protobuf:"varint,6,opt,name=redo_restore_range_location,json=redoRestoreRangeLocation" json:"redo_restore_range_location,omitempty"`
	RedoRestoreRangeLength   *uint32                  `protobuf:"varint,7,opt,name=redo_restore_range_length,json=redoRestoreRangeLength" json:"redo_restore_range_length,omitempty"`
	TextCommandFlags         *uint32                  `protobuf:"varint,9,opt,name=text_command_flags,json=textCommandFlags" json:"text_command_flags,omitempty"`
	Kind                     *TextCommandArchive_Kind `protobuf:"varint,10,opt,name=kind,enum=TSWP.TextCommandArchive_Kind,def=0" json:"kind,omitempty"`
}

// Default values for TextCommandArchive fields.
const (
	Default_TextCommandArchive_Kind = TextCommandArchive_kKindContained
)

func (x *TextCommandArchive) Reset() {
	*x = TextCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPCommandArchives_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextCommandArchive) ProtoMessage() {}

func (x *TextCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPCommandArchives_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextCommandArchive.ProtoReflect.Descriptor instead.
func (*TextCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSWPCommandArchives_proto_rawDescGZIP(), []int{1}
}

func (x *TextCommandArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *TextCommandArchive) GetStorage() *Reference {
	if x != nil {
		return x.Storage
	}
	return nil
}

func (x *TextCommandArchive) GetUndoTransaction() *UndoTransaction {
	if x != nil {
		return x.UndoTransaction
	}
	return nil
}

func (x *TextCommandArchive) GetRestoreRangeLocation() uint32 {
	if x != nil && x.RestoreRangeLocation != nil {
		return *x.RestoreRangeLocation
	}
	return 0
}

func (x *TextCommandArchive) GetRestoreRangeLength() uint32 {
	if x != nil && x.RestoreRangeLength != nil {
		return *x.RestoreRangeLength
	}
	return 0
}

func (x *TextCommandArchive) GetRedoRestoreRangeLocation() uint32 {
	if x != nil && x.RedoRestoreRangeLocation != nil {
		return *x.RedoRestoreRangeLocation
	}
	return 0
}

func (x *TextCommandArchive) GetRedoRestoreRangeLength() uint32 {
	if x != nil && x.RedoRestoreRangeLength != nil {
		return *x.RedoRestoreRangeLength
	}
	return 0
}

func (x *TextCommandArchive) GetTextCommandFlags() uint32 {
	if x != nil && x.TextCommandFlags != nil {
		return *x.TextCommandFlags
	}
	return 0
}

func (x *TextCommandArchive) GetKind() TextCommandArchive_Kind {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return Default_TextCommandArchive_Kind
}

type StorageActionCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                      *CommandArchive                   `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	Storage                    *UUIDPath                         `protobuf:"bytes,2,opt,name=storage" json:"storage,omitempty"`
	UndoTransaction            *UndoTransaction                  `protobuf:"bytes,3,opt,name=undo_transaction,json=undoTransaction" json:"undo_transaction,omitempty"`
	TextCommandFlags           *uint32                           `protobuf:"varint,4,opt,name=text_command_flags,json=textCommandFlags" json:"text_command_flags,omitempty"`
	Kind                       *StorageActionCommandArchive_Kind `protobuf:"varint,5,opt,name=kind,enum=TSWP.StorageActionCommandArchive_Kind,def=0" json:"kind,omitempty"`
	CustomFormatKeys           []*UUID                           `protobuf:"bytes,6,rep,name=custom_format_keys,json=customFormatKeys" json:"custom_format_keys,omitempty"`
	IsForwardInverseCommand    *bool                             `protobuf:"varint,7,opt,name=is_forward_inverse_command,json=isForwardInverseCommand" json:"is_forward_inverse_command,omitempty"`
	Coalesceable               *bool                             `protobuf:"varint,8,opt,name=coalesceable" json:"coalesceable,omitempty"`
	CoalescingText             *bool                             `protobuf:"varint,9,opt,name=coalescing_text,json=coalescingText" json:"coalescing_text,omitempty"`
	ShouldMigrateStyles        *bool                             `protobuf:"varint,10,opt,name=should_migrate_styles,json=shouldMigrateStyles" json:"should_migrate_styles,omitempty"`
	ChangedDataReferenceRecord *DataReferenceRecord              `protobuf:"bytes,11,opt,name=changed_data_reference_record,json=changedDataReferenceRecord" json:"changed_data_reference_record,omitempty"`
	CoalescingProperty         *string                           `protobuf:"bytes,12,opt,name=coalescing_property,json=coalescingProperty" json:"coalescing_property,omitempty"`
}

// Default values for StorageActionCommandArchive fields.
const (
	Default_StorageActionCommandArchive_Kind = StorageActionCommandArchive_kKindContained
)

func (x *StorageActionCommandArchive) Reset() {
	*x = StorageActionCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPCommandArchives_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageActionCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageActionCommandArchive) ProtoMessage() {}

func (x *StorageActionCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPCommandArchives_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageActionCommandArchive.ProtoReflect.Descriptor instead.
func (*StorageActionCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSWPCommandArchives_proto_rawDescGZIP(), []int{2}
}

func (x *StorageActionCommandArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *StorageActionCommandArchive) GetStorage() *UUIDPath {
	if x != nil {
		return x.Storage
	}
	return nil
}

func (x *StorageActionCommandArchive) GetUndoTransaction() *UndoTransaction {
	if x != nil {
		return x.UndoTransaction
	}
	return nil
}

func (x *StorageActionCommandArchive) GetTextCommandFlags() uint32 {
	if x != nil && x.TextCommandFlags != nil {
		return *x.TextCommandFlags
	}
	return 0
}

func (x *StorageActionCommandArchive) GetKind() StorageActionCommandArchive_Kind {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return Default_StorageActionCommandArchive_Kind
}

func (x *StorageActionCommandArchive) GetCustomFormatKeys() []*UUID {
	if x != nil {
		return x.CustomFormatKeys
	}
	return nil
}

func (x *StorageActionCommandArchive) GetIsForwardInverseCommand() bool {
	if x != nil && x.IsForwardInverseCommand != nil {
		return *x.IsForwardInverseCommand
	}
	return false
}

func (x *StorageActionCommandArchive) GetCoalesceable() bool {
	if x != nil && x.Coalesceable != nil {
		return *x.Coalesceable
	}
	return false
}

func (x *StorageActionCommandArchive) GetCoalescingText() bool {
	if x != nil && x.CoalescingText != nil {
		return *x.CoalescingText
	}
	return false
}

func (x *StorageActionCommandArchive) GetShouldMigrateStyles() bool {
	if x != nil && x.ShouldMigrateStyles != nil {
		return *x.ShouldMigrateStyles
	}
	return false
}

func (x *StorageActionCommandArchive) GetChangedDataReferenceRecord() *DataReferenceRecord {
	if x != nil {
		return x.ChangedDataReferenceRecord
	}
	return nil
}

func (x *StorageActionCommandArchive) GetCoalescingProperty() string {
	if x != nil && x.CoalescingProperty != nil {
		return *x.CoalescingProperty
	}
	return ""
}

type SetColumnStyleCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super           *CommandArchive  `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	Storage         *Reference       `protobuf:"bytes,2,opt,name=storage" json:"storage,omitempty"`
	UndoTransaction *UndoTransaction `protobuf:"bytes,3,opt,name=undo_transaction,json=undoTransaction" json:"undo_transaction,omitempty"`
}

func (x *SetColumnStyleCommandArchive) Reset() {
	*x = SetColumnStyleCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPCommandArchives_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetColumnStyleCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetColumnStyleCommandArchive) ProtoMessage() {}

func (x *SetColumnStyleCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPCommandArchives_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetColumnStyleCommandArchive.ProtoReflect.Descriptor instead.
func (*SetColumnStyleCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSWPCommandArchives_proto_rawDescGZIP(), []int{3}
}

func (x *SetColumnStyleCommandArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *SetColumnStyleCommandArchive) GetStorage() *Reference {
	if x != nil {
		return x.Storage
	}
	return nil
}

func (x *SetColumnStyleCommandArchive) GetUndoTransaction() *UndoTransaction {
	if x != nil {
		return x.UndoTransaction
	}
	return nil
}

type ReplaceAllUsesOfStyleCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super           *CommandArchive  `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	Storage         *Reference       `protobuf:"bytes,2,opt,name=storage" json:"storage,omitempty"`
	UndoTransaction *UndoTransaction `protobuf:"bytes,3,opt,name=undo_transaction,json=undoTransaction" json:"undo_transaction,omitempty"`
}

func (x *ReplaceAllUsesOfStyleCommandArchive) Reset() {
	*x = ReplaceAllUsesOfStyleCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPCommandArchives_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplaceAllUsesOfStyleCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceAllUsesOfStyleCommandArchive) ProtoMessage() {}

func (x *ReplaceAllUsesOfStyleCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPCommandArchives_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceAllUsesOfStyleCommandArchive.ProtoReflect.Descriptor instead.
func (*ReplaceAllUsesOfStyleCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSWPCommandArchives_proto_rawDescGZIP(), []int{4}
}

func (x *ReplaceAllUsesOfStyleCommandArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *ReplaceAllUsesOfStyleCommandArchive) GetStorage() *Reference {
	if x != nil {
		return x.Storage
	}
	return nil
}

func (x *ReplaceAllUsesOfStyleCommandArchive) GetUndoTransaction() *UndoTransaction {
	if x != nil {
		return x.UndoTransaction
	}
	return nil
}

type InsertColumnsCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super           *CommandArchive  `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	Storage         *Reference       `protobuf:"bytes,2,opt,name=storage" json:"storage,omitempty"`
	ColumnIndex     *uint32          `protobuf:"varint,3,opt,name=column_index,json=columnIndex" json:"column_index,omitempty"`
	ColumnCount     *uint32          `protobuf:"varint,4,opt,name=column_count,json=columnCount" json:"column_count,omitempty"`
	UndoTransaction *UndoTransaction `protobuf:"bytes,5,opt,name=undo_transaction,json=undoTransaction" json:"undo_transaction,omitempty"`
}

func (x *InsertColumnsCommandArchive) Reset() {
	*x = InsertColumnsCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPCommandArchives_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertColumnsCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertColumnsCommandArchive) ProtoMessage() {}

func (x *InsertColumnsCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPCommandArchives_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertColumnsCommandArchive.ProtoReflect.Descriptor instead.
func (*InsertColumnsCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSWPCommandArchives_proto_rawDescGZIP(), []int{5}
}

func (x *InsertColumnsCommandArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *InsertColumnsCommandArchive) GetStorage() *Reference {
	if x != nil {
		return x.Storage
	}
	return nil
}

func (x *InsertColumnsCommandArchive) GetColumnIndex() uint32 {
	if x != nil && x.ColumnIndex != nil {
		return *x.ColumnIndex
	}
	return 0
}

func (x *InsertColumnsCommandArchive) GetColumnCount() uint32 {
	if x != nil && x.ColumnCount != nil {
		return *x.ColumnCount
	}
	return 0
}

func (x *InsertColumnsCommandArchive) GetUndoTransaction() *UndoTransaction {
	if x != nil {
		return x.UndoTransaction
	}
	return nil
}

type InsertRowsCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super           *CommandArchive  `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	Storage         *Reference       `protobuf:"bytes,2,opt,name=storage" json:"storage,omitempty"`
	RowIndex        *uint32          `protobuf:"varint,3,opt,name=row_index,json=rowIndex" json:"row_index,omitempty"`
	RowCount        *uint32          `protobuf:"varint,4,opt,name=row_count,json=rowCount" json:"row_count,omitempty"`
	UndoTransaction *UndoTransaction `protobuf:"bytes,5,opt,name=undo_transaction,json=undoTransaction" json:"undo_transaction,omitempty"`
}

func (x *InsertRowsCommandArchive) Reset() {
	*x = InsertRowsCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPCommandArchives_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertRowsCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertRowsCommandArchive) ProtoMessage() {}

func (x *InsertRowsCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPCommandArchives_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertRowsCommandArchive.ProtoReflect.Descriptor instead.
func (*InsertRowsCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSWPCommandArchives_proto_rawDescGZIP(), []int{6}
}

func (x *InsertRowsCommandArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *InsertRowsCommandArchive) GetStorage() *Reference {
	if x != nil {
		return x.Storage
	}
	return nil
}

func (x *InsertRowsCommandArchive) GetRowIndex() uint32 {
	if x != nil && x.RowIndex != nil {
		return *x.RowIndex
	}
	return 0
}

func (x *InsertRowsCommandArchive) GetRowCount() uint32 {
	if x != nil && x.RowCount != nil {
		return *x.RowCount
	}
	return 0
}

func (x *InsertRowsCommandArchive) GetUndoTransaction() *UndoTransaction {
	if x != nil {
		return x.UndoTransaction
	}
	return nil
}

type RemoveColumnsCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super           *CommandArchive  `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	Storage         *Reference       `protobuf:"bytes,2,opt,name=storage" json:"storage,omitempty"`
	ColumnIndex     *uint32          `protobuf:"varint,3,opt,name=column_index,json=columnIndex" json:"column_index,omitempty"`
	ColumnCount     *uint32          `protobuf:"varint,4,opt,name=column_count,json=columnCount" json:"column_count,omitempty"`
	UndoTransaction *UndoTransaction `protobuf:"bytes,5,opt,name=undo_transaction,json=undoTransaction" json:"undo_transaction,omitempty"`
}

func (x *RemoveColumnsCommandArchive) Reset() {
	*x = RemoveColumnsCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPCommandArchives_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveColumnsCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveColumnsCommandArchive) ProtoMessage() {}

func (x *RemoveColumnsCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPCommandArchives_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveColumnsCommandArchive.ProtoReflect.Descriptor instead.
func (*RemoveColumnsCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSWPCommandArchives_proto_rawDescGZIP(), []int{7}
}

func (x *RemoveColumnsCommandArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *RemoveColumnsCommandArchive) GetStorage() *Reference {
	if x != nil {
		return x.Storage
	}
	return nil
}

func (x *RemoveColumnsCommandArchive) GetColumnIndex() uint32 {
	if x != nil && x.ColumnIndex != nil {
		return *x.ColumnIndex
	}
	return 0
}

func (x *RemoveColumnsCommandArchive) GetColumnCount() uint32 {
	if x != nil && x.ColumnCount != nil {
		return *x.ColumnCount
	}
	return 0
}

func (x *RemoveColumnsCommandArchive) GetUndoTransaction() *UndoTransaction {
	if x != nil {
		return x.UndoTransaction
	}
	return nil
}

type RemoveRowsCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super           *CommandArchive  `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	Storage         *Reference       `protobuf:"bytes,2,opt,name=storage" json:"storage,omitempty"`
	RowIndex        *uint32          `protobuf:"varint,3,opt,name=row_index,json=rowIndex" json:"row_index,omitempty"`
	RowCount        *uint32          `protobuf:"varint,4,opt,name=row_count,json=rowCount" json:"row_count,omitempty"`
	UndoTransaction *UndoTransaction `protobuf:"bytes,5,opt,name=undo_transaction,json=undoTransaction" json:"undo_transaction,omitempty"`
}

func (x *RemoveRowsCommandArchive) Reset() {
	*x = RemoveRowsCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPCommandArchives_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveRowsCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveRowsCommandArchive) ProtoMessage() {}

func (x *RemoveRowsCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPCommandArchives_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveRowsCommandArchive.ProtoReflect.Descriptor instead.
func (*RemoveRowsCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSWPCommandArchives_proto_rawDescGZIP(), []int{8}
}

func (x *RemoveRowsCommandArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *RemoveRowsCommandArchive) GetStorage() *Reference {
	if x != nil {
		return x.Storage
	}
	return nil
}

func (x *RemoveRowsCommandArchive) GetRowIndex() uint32 {
	if x != nil && x.RowIndex != nil {
		return *x.RowIndex
	}
	return 0
}

func (x *RemoveRowsCommandArchive) GetRowCount() uint32 {
	if x != nil && x.RowCount != nil {
		return *x.RowCount
	}
	return 0
}

func (x *RemoveRowsCommandArchive) GetUndoTransaction() *UndoTransaction {
	if x != nil {
		return x.UndoTransaction
	}
	return nil
}

type MergeCellsCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super           *CommandArchive  `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	Storage         *Reference       `protobuf:"bytes,2,opt,name=storage" json:"storage,omitempty"`
	Row             *uint32          `protobuf:"varint,3,opt,name=row" json:"row,omitempty"`
	Column          *uint32          `protobuf:"varint,4,opt,name=column" json:"column,omitempty"`
	RowCount        *uint32          `protobuf:"varint,5,opt,name=row_count,json=rowCount" json:"row_count,omitempty"`
	ColumnCount     *uint32          `protobuf:"varint,6,opt,name=column_count,json=columnCount" json:"column_count,omitempty"`
	UndoTransaction *UndoTransaction `protobuf:"bytes,7,opt,name=undo_transaction,json=undoTransaction" json:"undo_transaction,omitempty"`
}

func (x *MergeCellsCommandArchive) Reset() {
	*x = MergeCellsCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPCommandArchives_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergeCellsCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeCellsCommandArchive) ProtoMessage() {}

func (x *MergeCellsCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPCommandArchives_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeCellsCommandArchive.ProtoReflect.Descriptor instead.
func (*MergeCellsCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSWPCommandArchives_proto_rawDescGZIP(), []int{9}
}

func (x *MergeCellsCommandArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *MergeCellsCommandArchive) GetStorage() *Reference {
	if x != nil {
		return x.Storage
	}
	return nil
}

func (x *MergeCellsCommandArchive) GetRow() uint32 {
	if x != nil && x.Row != nil {
		return *x.Row
	}
	return 0
}

func (x *MergeCellsCommandArchive) GetColumn() uint32 {
	if x != nil && x.Column != nil {
		return *x.Column
	}
	return 0
}

func (x *MergeCellsCommandArchive) GetRowCount() uint32 {
	if x != nil && x.RowCount != nil {
		return *x.RowCount
	}
	return 0
}

func (x *MergeCellsCommandArchive) GetColumnCount() uint32 {
	if x != nil && x.ColumnCount != nil {
		return *x.ColumnCount
	}
	return 0
}

func (x *MergeCellsCommandArchive) GetUndoTransaction() *UndoTransaction {
	if x != nil {
		return x.UndoTransaction
	}
	return nil
}

type ApplyPlaceholderTextCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                  *CommandArchive  `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	Storage                *Reference       `protobuf:"bytes,2,opt,name=storage" json:"storage,omitempty"`
	SelectionRangeLocation *uint32          `protobuf:"varint,3,opt,name=selection_range_location,json=selectionRangeLocation" json:"selection_range_location,omitempty"`
	SelectionRangeLength   *uint32          `protobuf:"varint,4,opt,name=selection_range_length,json=selectionRangeLength" json:"selection_range_length,omitempty"`
	UndoTransaction        *UndoTransaction `protobuf:"bytes,5,opt,name=undo_transaction,json=undoTransaction" json:"undo_transaction,omitempty"`
	ScriptTag              *string          `protobuf:"bytes,6,opt,name=script_tag,json=scriptTag" json:"script_tag,omitempty"`
}

func (x *ApplyPlaceholderTextCommandArchive) Reset() {
	*x = ApplyPlaceholderTextCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPCommandArchives_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyPlaceholderTextCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyPlaceholderTextCommandArchive) ProtoMessage() {}

func (x *ApplyPlaceholderTextCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPCommandArchives_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyPlaceholderTextCommandArchive.ProtoReflect.Descriptor instead.
func (*ApplyPlaceholderTextCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSWPCommandArchives_proto_rawDescGZIP(), []int{10}
}

func (x *ApplyPlaceholderTextCommandArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *ApplyPlaceholderTextCommandArchive) GetStorage() *Reference {
	if x != nil {
		return x.Storage
	}
	return nil
}

func (x *ApplyPlaceholderTextCommandArchive) GetSelectionRangeLocation() uint32 {
	if x != nil && x.SelectionRangeLocation != nil {
		return *x.SelectionRangeLocation
	}
	return 0
}

func (x *ApplyPlaceholderTextCommandArchive) GetSelectionRangeLength() uint32 {
	if x != nil && x.SelectionRangeLength != nil {
		return *x.SelectionRangeLength
	}
	return 0
}

func (x *ApplyPlaceholderTextCommandArchive) GetUndoTransaction() *UndoTransaction {
	if x != nil {
		return x.UndoTransaction
	}
	return nil
}

func (x *ApplyPlaceholderTextCommandArchive) GetScriptTag() string {
	if x != nil && x.ScriptTag != nil {
		return *x.ScriptTag
	}
	return ""
}

type UpdateDateTimeFieldCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super         *TextCommandArchive                               `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	DateTimeField *Reference                                        `protobuf:"bytes,2,opt,name=date_time_field,json=dateTimeField" json:"date_time_field,omitempty"`
	Date          *Date                                             `protobuf:"bytes,3,opt,name=date" json:"date,omitempty"`
	DateStyle     *DateTimeSmartFieldArchive_DateTimeFormatterStyle `protobuf:"varint,4,opt,name=date_style,json=dateStyle,enum=TSWP.DateTimeSmartFieldArchive_DateTimeFormatterStyle" json:"date_style,omitempty"`
	TimeStyle     *DateTimeSmartFieldArchive_DateTimeFormatterStyle `protobuf:"varint,5,opt,name=time_style,json=timeStyle,enum=TSWP.DateTimeSmartFieldArchive_DateTimeFormatterStyle" json:"time_style,omitempty"`
}

func (x *UpdateDateTimeFieldCommandArchive) Reset() {
	*x = UpdateDateTimeFieldCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPCommandArchives_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDateTimeFieldCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDateTimeFieldCommandArchive) ProtoMessage() {}

func (x *UpdateDateTimeFieldCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPCommandArchives_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDateTimeFieldCommandArchive.ProtoReflect.Descriptor instead.
func (*UpdateDateTimeFieldCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSWPCommandArchives_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateDateTimeFieldCommandArchive) GetSuper() *TextCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *UpdateDateTimeFieldCommandArchive) GetDateTimeField() *Reference {
	if x != nil {
		return x.DateTimeField
	}
	return nil
}

func (x *UpdateDateTimeFieldCommandArchive) GetDate() *Date {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *UpdateDateTimeFieldCommandArchive) GetDateStyle() DateTimeSmartFieldArchive_DateTimeFormatterStyle {
	if x != nil && x.DateStyle != nil {
		return *x.DateStyle
	}
	return DateTimeSmartFieldArchive_kDateTimeFormatterStyleNone
}

func (x *UpdateDateTimeFieldCommandArchive) GetTimeStyle() DateTimeSmartFieldArchive_DateTimeFormatterStyle {
	if x != nil && x.TimeStyle != nil {
		return *x.TimeStyle
	}
	return DateTimeSmartFieldArchive_kDateTimeFormatterStyleNone
}

type ApplyRubyTextCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                  *CommandArchive  `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	Storage                *Reference       `protobuf:"bytes,2,opt,name=storage" json:"storage,omitempty"`
	SelectionRangeLocation *uint32          `protobuf:"varint,3,opt,name=selection_range_location,json=selectionRangeLocation" json:"selection_range_location,omitempty"`
	SelectionRangeLength   *uint32          `protobuf:"varint,4,opt,name=selection_range_length,json=selectionRangeLength" json:"selection_range_length,omitempty"`
	RubyText               *string          `protobuf:"bytes,5,opt,name=ruby_text,json=rubyText" json:"ruby_text,omitempty"`
	UndoTransaction        *UndoTransaction `protobuf:"bytes,6,opt,name=undo_transaction,json=undoTransaction" json:"undo_transaction,omitempty"`
}

func (x *ApplyRubyTextCommandArchive) Reset() {
	*x = ApplyRubyTextCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPCommandArchives_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyRubyTextCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyRubyTextCommandArchive) ProtoMessage() {}

func (x *ApplyRubyTextCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPCommandArchives_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyRubyTextCommandArchive.ProtoReflect.Descriptor instead.
func (*ApplyRubyTextCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSWPCommandArchives_proto_rawDescGZIP(), []int{12}
}

func (x *ApplyRubyTextCommandArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *ApplyRubyTextCommandArchive) GetStorage() *Reference {
	if x != nil {
		return x.Storage
	}
	return nil
}

func (x *ApplyRubyTextCommandArchive) GetSelectionRangeLocation() uint32 {
	if x != nil && x.SelectionRangeLocation != nil {
		return *x.SelectionRangeLocation
	}
	return 0
}

func (x *ApplyRubyTextCommandArchive) GetSelectionRangeLength() uint32 {
	if x != nil && x.SelectionRangeLength != nil {
		return *x.SelectionRangeLength
	}
	return 0
}

func (x *ApplyRubyTextCommandArchive) GetRubyText() string {
	if x != nil && x.RubyText != nil {
		return *x.RubyText
	}
	return ""
}

func (x *ApplyRubyTextCommandArchive) GetUndoTransaction() *UndoTransaction {
	if x != nil {
		return x.UndoTransaction
	}
	return nil
}

type ModifyRubyTextCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super           *CommandArchive  `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	RubyField       *Reference       `protobuf:"bytes,2,opt,name=ruby_field,json=rubyField" json:"ruby_field,omitempty"`
	RubyText        *string          `protobuf:"bytes,3,opt,name=ruby_text,json=rubyText" json:"ruby_text,omitempty"`
	BaseText        *string          `protobuf:"bytes,4,opt,name=base_text,json=baseText" json:"base_text,omitempty"`
	UndoTransaction *UndoTransaction `protobuf:"bytes,5,opt,name=undo_transaction,json=undoTransaction" json:"undo_transaction,omitempty"`
}

func (x *ModifyRubyTextCommandArchive) Reset() {
	*x = ModifyRubyTextCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPCommandArchives_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyRubyTextCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyRubyTextCommandArchive) ProtoMessage() {}

func (x *ModifyRubyTextCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPCommandArchives_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyRubyTextCommandArchive.ProtoReflect.Descriptor instead.
func (*ModifyRubyTextCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSWPCommandArchives_proto_rawDescGZIP(), []int{13}
}

func (x *ModifyRubyTextCommandArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *ModifyRubyTextCommandArchive) GetRubyField() *Reference {
	if x != nil {
		return x.RubyField
	}
	return nil
}

func (x *ModifyRubyTextCommandArchive) GetRubyText() string {
	if x != nil && x.RubyText != nil {
		return *x.RubyText
	}
	return ""
}

func (x *ModifyRubyTextCommandArchive) GetBaseText() string {
	if x != nil && x.BaseText != nil {
		return *x.BaseText
	}
	return ""
}

func (x *ModifyRubyTextCommandArchive) GetUndoTransaction() *UndoTransaction {
	if x != nil {
		return x.UndoTransaction
	}
	return nil
}

type ModifyTOCSettingsBaseCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super          *CommandArchive `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	OldTocSettings *Reference      `protobuf:"bytes,2,opt,name=old_toc_settings,json=oldTocSettings" json:"old_toc_settings,omitempty"`
	NewTocSettings *Reference      `protobuf:"bytes,3,opt,name=new_toc_settings,json=newTocSettings" json:"new_toc_settings,omitempty"`
}

func (x *ModifyTOCSettingsBaseCommandArchive) Reset() {
	*x = ModifyTOCSettingsBaseCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPCommandArchives_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyTOCSettingsBaseCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyTOCSettingsBaseCommandArchive) ProtoMessage() {}

func (x *ModifyTOCSettingsBaseCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPCommandArchives_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyTOCSettingsBaseCommandArchive.ProtoReflect.Descriptor instead.
func (*ModifyTOCSettingsBaseCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSWPCommandArchives_proto_rawDescGZIP(), []int{14}
}

func (x *ModifyTOCSettingsBaseCommandArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *ModifyTOCSettingsBaseCommandArchive) GetOldTocSettings() *Reference {
	if x != nil {
		return x.OldTocSettings
	}
	return nil
}

func (x *ModifyTOCSettingsBaseCommandArchive) GetNewTocSettings() *Reference {
	if x != nil {
		return x.NewTocSettings
	}
	return nil
}

type ModifyTOCSettingsForTOCInfoCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super           *ModifyTOCSettingsBaseCommandArchive `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	TocInfoUuidPath *UUIDPath                            `protobuf:"bytes,2,opt,name=toc_info_uuid_path,json=tocInfoUuidPath" json:"toc_info_uuid_path,omitempty"`
}

func (x *ModifyTOCSettingsForTOCInfoCommandArchive) Reset() {
	*x = ModifyTOCSettingsForTOCInfoCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPCommandArchives_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyTOCSettingsForTOCInfoCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyTOCSettingsForTOCInfoCommandArchive) ProtoMessage() {}

func (x *ModifyTOCSettingsForTOCInfoCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPCommandArchives_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyTOCSettingsForTOCInfoCommandArchive.ProtoReflect.Descriptor instead.
func (*ModifyTOCSettingsForTOCInfoCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSWPCommandArchives_proto_rawDescGZIP(), []int{15}
}

func (x *ModifyTOCSettingsForTOCInfoCommandArchive) GetSuper() *ModifyTOCSettingsBaseCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *ModifyTOCSettingsForTOCInfoCommandArchive) GetTocInfoUuidPath() *UUIDPath {
	if x != nil {
		return x.TocInfoUuidPath
	}
	return nil
}

type ModifyTOCSettingsPresetForThemeCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super       *ModifyTOCSettingsBaseCommandArchive `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	Theme       *Reference                           `protobuf:"bytes,2,opt,name=theme" json:"theme,omitempty"`
	PresetIndex *uint32                              `protobuf:"varint,3,opt,name=preset_index,json=presetIndex" json:"preset_index,omitempty"`
}

func (x *ModifyTOCSettingsPresetForThemeCommandArchive) Reset() {
	*x = ModifyTOCSettingsPresetForThemeCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPCommandArchives_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyTOCSettingsPresetForThemeCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyTOCSettingsPresetForThemeCommandArchive) ProtoMessage() {}

func (x *ModifyTOCSettingsPresetForThemeCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPCommandArchives_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyTOCSettingsPresetForThemeCommandArchive.ProtoReflect.Descriptor instead.
func (*ModifyTOCSettingsPresetForThemeCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSWPCommandArchives_proto_rawDescGZIP(), []int{16}
}

func (x *ModifyTOCSettingsPresetForThemeCommandArchive) GetSuper() *ModifyTOCSettingsBaseCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *ModifyTOCSettingsPresetForThemeCommandArchive) GetTheme() *Reference {
	if x != nil {
		return x.Theme
	}
	return nil
}

func (x *ModifyTOCSettingsPresetForThemeCommandArchive) GetPresetIndex() uint32 {
	if x != nil && x.PresetIndex != nil {
		return *x.PresetIndex
	}
	return 0
}

type AnchorAttachmentCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super           *StorageActionCommandArchive `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	Attachment      *Reference                   `protobuf:"bytes,2,opt,name=attachment" json:"attachment,omitempty"`
	HOffsetType     *uint32                      `protobuf:"varint,3,opt,name=h_offset_type,json=hOffsetType" json:"h_offset_type,omitempty"`
	HOffset         *float32                     `protobuf:"fixed32,4,opt,name=h_offset,json=hOffset" json:"h_offset,omitempty"`
	VOffsetType     *uint32                      `protobuf:"varint,5,opt,name=v_offset_type,json=vOffsetType" json:"v_offset_type,omitempty"`
	VOffset         *float32                     `protobuf:"fixed32,6,opt,name=v_offset,json=vOffset" json:"v_offset,omitempty"`
	IsHtmlWrap      *bool                        `protobuf:"varint,7,opt,name=is_html_wrap,json=isHtmlWrap" json:"is_html_wrap,omitempty"`
	UndoHOffsetType *uint32                      `protobuf:"varint,8,opt,name=undo_h_offset_type,json=undoHOffsetType" json:"undo_h_offset_type,omitempty"`
	UndoHOffset     *float32                     `protobuf:"fixed32,9,opt,name=undo_h_offset,json=undoHOffset" json:"undo_h_offset,omitempty"`
	UndoVOffsetType *uint32                      `protobuf:"varint,10,opt,name=undo_v_offset_type,json=undoVOffsetType" json:"undo_v_offset_type,omitempty"`
	UndoVOffset     *float32                     `protobuf:"fixed32,11,opt,name=undo_v_offset,json=undoVOffset" json:"undo_v_offset,omitempty"`
	UndoIsHtmlWrap  *bool                        `protobuf:"varint,12,opt,name=undo_is_html_wrap,json=undoIsHtmlWrap" json:"undo_is_html_wrap,omitempty"`
}

func (x *AnchorAttachmentCommandArchive) Reset() {
	*x = AnchorAttachmentCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPCommandArchives_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnchorAttachmentCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnchorAttachmentCommandArchive) ProtoMessage() {}

func (x *AnchorAttachmentCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPCommandArchives_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnchorAttachmentCommandArchive.ProtoReflect.Descriptor instead.
func (*AnchorAttachmentCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSWPCommandArchives_proto_rawDescGZIP(), []int{17}
}

func (x *AnchorAttachmentCommandArchive) GetSuper() *StorageActionCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *AnchorAttachmentCommandArchive) GetAttachment() *Reference {
	if x != nil {
		return x.Attachment
	}
	return nil
}

func (x *AnchorAttachmentCommandArchive) GetHOffsetType() uint32 {
	if x != nil && x.HOffsetType != nil {
		return *x.HOffsetType
	}
	return 0
}

func (x *AnchorAttachmentCommandArchive) GetHOffset() float32 {
	if x != nil && x.HOffset != nil {
		return *x.HOffset
	}
	return 0
}

func (x *AnchorAttachmentCommandArchive) GetVOffsetType() uint32 {
	if x != nil && x.VOffsetType != nil {
		return *x.VOffsetType
	}
	return 0
}

func (x *AnchorAttachmentCommandArchive) GetVOffset() float32 {
	if x != nil && x.VOffset != nil {
		return *x.VOffset
	}
	return 0
}

func (x *AnchorAttachmentCommandArchive) GetIsHtmlWrap() bool {
	if x != nil && x.IsHtmlWrap != nil {
		return *x.IsHtmlWrap
	}
	return false
}

func (x *AnchorAttachmentCommandArchive) GetUndoHOffsetType() uint32 {
	if x != nil && x.UndoHOffsetType != nil {
		return *x.UndoHOffsetType
	}
	return 0
}

func (x *AnchorAttachmentCommandArchive) GetUndoHOffset() float32 {
	if x != nil && x.UndoHOffset != nil {
		return *x.UndoHOffset
	}
	return 0
}

func (x *AnchorAttachmentCommandArchive) GetUndoVOffsetType() uint32 {
	if x != nil && x.UndoVOffsetType != nil {
		return *x.UndoVOffsetType
	}
	return 0
}

func (x *AnchorAttachmentCommandArchive) GetUndoVOffset() float32 {
	if x != nil && x.UndoVOffset != nil {
		return *x.UndoVOffset
	}
	return 0
}

func (x *AnchorAttachmentCommandArchive) GetUndoIsHtmlWrap() bool {
	if x != nil && x.UndoIsHtmlWrap != nil {
		return *x.UndoIsHtmlWrap
	}
	return false
}

type TextApplyThemeCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super           *ApplyThemeChildCommandArchive `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	Storage         *Reference                     `protobuf:"bytes,2,opt,name=storage" json:"storage,omitempty"`
	UndoTransaction *UndoTransaction               `protobuf:"bytes,6,opt,name=undo_transaction,json=undoTransaction" json:"undo_transaction,omitempty"`
}

func (x *TextApplyThemeCommandArchive) Reset() {
	*x = TextApplyThemeCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPCommandArchives_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextApplyThemeCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextApplyThemeCommandArchive) ProtoMessage() {}

func (x *TextApplyThemeCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPCommandArchives_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextApplyThemeCommandArchive.ProtoReflect.Descriptor instead.
func (*TextApplyThemeCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSWPCommandArchives_proto_rawDescGZIP(), []int{18}
}

func (x *TextApplyThemeCommandArchive) GetSuper() *ApplyThemeChildCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *TextApplyThemeCommandArchive) GetStorage() *Reference {
	if x != nil {
		return x.Storage
	}
	return nil
}

func (x *TextApplyThemeCommandArchive) GetUndoTransaction() *UndoTransaction {
	if x != nil {
		return x.UndoTransaction
	}
	return nil
}

type MoveColumnsCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super           *CommandArchive  `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	Storage         *Reference       `protobuf:"bytes,2,opt,name=storage" json:"storage,omitempty"`
	SrcIndex        *uint32          `protobuf:"varint,3,opt,name=src_index,json=srcIndex" json:"src_index,omitempty"`
	DstIndex        *uint32          `protobuf:"varint,4,opt,name=dst_index,json=dstIndex" json:"dst_index,omitempty"`
	Count           *uint32          `protobuf:"varint,5,opt,name=count" json:"count,omitempty"`
	UndoTransaction *UndoTransaction `protobuf:"bytes,6,opt,name=undo_transaction,json=undoTransaction" json:"undo_transaction,omitempty"`
}

func (x *MoveColumnsCommandArchive) Reset() {
	*x = MoveColumnsCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPCommandArchives_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveColumnsCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveColumnsCommandArchive) ProtoMessage() {}

func (x *MoveColumnsCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPCommandArchives_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveColumnsCommandArchive.ProtoReflect.Descriptor instead.
func (*MoveColumnsCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSWPCommandArchives_proto_rawDescGZIP(), []int{19}
}

func (x *MoveColumnsCommandArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *MoveColumnsCommandArchive) GetStorage() *Reference {
	if x != nil {
		return x.Storage
	}
	return nil
}

func (x *MoveColumnsCommandArchive) GetSrcIndex() uint32 {
	if x != nil && x.SrcIndex != nil {
		return *x.SrcIndex
	}
	return 0
}

func (x *MoveColumnsCommandArchive) GetDstIndex() uint32 {
	if x != nil && x.DstIndex != nil {
		return *x.DstIndex
	}
	return 0
}

func (x *MoveColumnsCommandArchive) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *MoveColumnsCommandArchive) GetUndoTransaction() *UndoTransaction {
	if x != nil {
		return x.UndoTransaction
	}
	return nil
}

type MoveRowsCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super           *CommandArchive  `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	Storage         *Reference       `protobuf:"bytes,2,opt,name=storage" json:"storage,omitempty"`
	SrcIndex        *uint32          `protobuf:"varint,3,opt,name=src_index,json=srcIndex" json:"src_index,omitempty"`
	DstIndex        *uint32          `protobuf:"varint,4,opt,name=dst_index,json=dstIndex" json:"dst_index,omitempty"`
	Count           *uint32          `protobuf:"varint,5,opt,name=count" json:"count,omitempty"`
	UndoTransaction *UndoTransaction `protobuf:"bytes,6,opt,name=undo_transaction,json=undoTransaction" json:"undo_transaction,omitempty"`
}

func (x *MoveRowsCommandArchive) Reset() {
	*x = MoveRowsCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPCommandArchives_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveRowsCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveRowsCommandArchive) ProtoMessage() {}

func (x *MoveRowsCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPCommandArchives_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveRowsCommandArchive.ProtoReflect.Descriptor instead.
func (*MoveRowsCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSWPCommandArchives_proto_rawDescGZIP(), []int{20}
}

func (x *MoveRowsCommandArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *MoveRowsCommandArchive) GetStorage() *Reference {
	if x != nil {
		return x.Storage
	}
	return nil
}

func (x *MoveRowsCommandArchive) GetSrcIndex() uint32 {
	if x != nil && x.SrcIndex != nil {
		return *x.SrcIndex
	}
	return 0
}

func (x *MoveRowsCommandArchive) GetDstIndex() uint32 {
	if x != nil && x.DstIndex != nil {
		return *x.DstIndex
	}
	return 0
}

func (x *MoveRowsCommandArchive) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *MoveRowsCommandArchive) GetUndoTransaction() *UndoTransaction {
	if x != nil {
		return x.UndoTransaction
	}
	return nil
}

type TSWPShapeApplyPresetCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super     *BaseApplyPresetCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	UndoStyle *Reference                     `protobuf:"bytes,2,opt,name=undo_style,json=undoStyle" json:"undo_style,omitempty"`
}

func (x *TSWPShapeApplyPresetCommandArchive) Reset() {
	*x = TSWPShapeApplyPresetCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPCommandArchives_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSWPShapeApplyPresetCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSWPShapeApplyPresetCommandArchive) ProtoMessage() {}

func (x *TSWPShapeApplyPresetCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPCommandArchives_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSWPShapeApplyPresetCommandArchive.ProtoReflect.Descriptor instead.
func (*TSWPShapeApplyPresetCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSWPCommandArchives_proto_rawDescGZIP(), []int{21}
}

func (x *TSWPShapeApplyPresetCommandArchive) GetSuper() *BaseApplyPresetCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *TSWPShapeApplyPresetCommandArchive) GetUndoStyle() *Reference {
	if x != nil {
		return x.UndoStyle
	}
	return nil
}

type StyleBaseCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *CommandArchive `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	Theme *Reference      `protobuf:"bytes,2,opt,name=theme" json:"theme,omitempty"`
	Style *Reference      `protobuf:"bytes,3,opt,name=style" json:"style,omitempty"`
}

func (x *StyleBaseCommandArchive) Reset() {
	*x = StyleBaseCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPCommandArchives_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StyleBaseCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StyleBaseCommandArchive) ProtoMessage() {}

func (x *StyleBaseCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPCommandArchives_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StyleBaseCommandArchive.ProtoReflect.Descriptor instead.
func (*StyleBaseCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSWPCommandArchives_proto_rawDescGZIP(), []int{22}
}

func (x *StyleBaseCommandArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *StyleBaseCommandArchive) GetTheme() *Reference {
	if x != nil {
		return x.Theme
	}
	return nil
}

func (x *StyleBaseCommandArchive) GetStyle() *Reference {
	if x != nil {
		return x.Style
	}
	return nil
}

type StyleCreateCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super       *StyleBaseCommandArchive `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	PresetIndex *uint32                  `protobuf:"varint,2,opt,name=preset_index,json=presetIndex" json:"preset_index,omitempty"`
}

func (x *StyleCreateCommandArchive) Reset() {
	*x = StyleCreateCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPCommandArchives_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StyleCreateCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StyleCreateCommandArchive) ProtoMessage() {}

func (x *StyleCreateCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPCommandArchives_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StyleCreateCommandArchive.ProtoReflect.Descriptor instead.
func (*StyleCreateCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSWPCommandArchives_proto_rawDescGZIP(), []int{23}
}

func (x *StyleCreateCommandArchive) GetSuper() *StyleBaseCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *StyleCreateCommandArchive) GetPresetIndex() uint32 {
	if x != nil && x.PresetIndex != nil {
		return *x.PresetIndex
	}
	return 0
}

type StyleRenameCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super       *StyleBaseCommandArchive `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	UpdatedName *string                  `protobuf:"bytes,2,opt,name=updated_name,json=updatedName" json:"updated_name,omitempty"`
	OldName     *string                  `protobuf:"bytes,3,opt,name=old_name,json=oldName" json:"old_name,omitempty"`
}

func (x *StyleRenameCommandArchive) Reset() {
	*x = StyleRenameCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPCommandArchives_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StyleRenameCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StyleRenameCommandArchive) ProtoMessage() {}

func (x *StyleRenameCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPCommandArchives_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StyleRenameCommandArchive.ProtoReflect.Descriptor instead.
func (*StyleRenameCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSWPCommandArchives_proto_rawDescGZIP(), []int{24}
}

func (x *StyleRenameCommandArchive) GetSuper() *StyleBaseCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *StyleRenameCommandArchive) GetUpdatedName() string {
	if x != nil && x.UpdatedName != nil {
		return *x.UpdatedName
	}
	return ""
}

func (x *StyleRenameCommandArchive) GetOldName() string {
	if x != nil && x.OldName != nil {
		return *x.OldName
	}
	return ""
}

type StyleUpdateCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super         *StyleBaseCommandArchive `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	OriginalStyle *Reference               `protobuf:"bytes,2,opt,name=original_style,json=originalStyle" json:"original_style,omitempty"`
	UpdatedStyle  *Reference               `protobuf:"bytes,3,opt,name=updated_style,json=updatedStyle" json:"updated_style,omitempty"`
}

func (x *StyleUpdateCommandArchive) Reset() {
	*x = StyleUpdateCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPCommandArchives_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StyleUpdateCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StyleUpdateCommandArchive) ProtoMessage() {}

func (x *StyleUpdateCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPCommandArchives_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StyleUpdateCommandArchive.ProtoReflect.Descriptor instead.
func (*StyleUpdateCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSWPCommandArchives_proto_rawDescGZIP(), []int{25}
}

func (x *StyleUpdateCommandArchive) GetSuper() *StyleBaseCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *StyleUpdateCommandArchive) GetOriginalStyle() *Reference {
	if x != nil {
		return x.OriginalStyle
	}
	return nil
}

func (x *StyleUpdateCommandArchive) GetUpdatedStyle() *Reference {
	if x != nil {
		return x.UpdatedStyle
	}
	return nil
}

type StyleDeleteCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super          *StyleBaseCommandArchive `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	OldPresetIndex *uint32                  `protobuf:"varint,2,opt,name=old_preset_index,json=oldPresetIndex" json:"old_preset_index,omitempty"`
}

func (x *StyleDeleteCommandArchive) Reset() {
	*x = StyleDeleteCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPCommandArchives_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StyleDeleteCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StyleDeleteCommandArchive) ProtoMessage() {}

func (x *StyleDeleteCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPCommandArchives_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StyleDeleteCommandArchive.ProtoReflect.Descriptor instead.
func (*StyleDeleteCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSWPCommandArchives_proto_rawDescGZIP(), []int{26}
}

func (x *StyleDeleteCommandArchive) GetSuper() *StyleBaseCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *StyleDeleteCommandArchive) GetOldPresetIndex() uint32 {
	if x != nil && x.OldPresetIndex != nil {
		return *x.OldPresetIndex
	}
	return 0
}

type StyleReorderCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super          *StyleBaseCommandArchive `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	OldPresetIndex *uint32                  `protobuf:"varint,2,opt,name=old_preset_index,json=oldPresetIndex" json:"old_preset_index,omitempty"`
	NewPresetIndex *uint32                  `protobuf:"varint,3,opt,name=new_preset_index,json=newPresetIndex" json:"new_preset_index,omitempty"`
}

func (x *StyleReorderCommandArchive) Reset() {
	*x = StyleReorderCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPCommandArchives_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StyleReorderCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StyleReorderCommandArchive) ProtoMessage() {}

func (x *StyleReorderCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPCommandArchives_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StyleReorderCommandArchive.ProtoReflect.Descriptor instead.
func (*StyleReorderCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSWPCommandArchives_proto_rawDescGZIP(), []int{27}
}

func (x *StyleReorderCommandArchive) GetSuper() *StyleBaseCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *StyleReorderCommandArchive) GetOldPresetIndex() uint32 {
	if x != nil && x.OldPresetIndex != nil {
		return *x.OldPresetIndex
	}
	return 0
}

func (x *StyleReorderCommandArchive) GetNewPresetIndex() uint32 {
	if x != nil && x.NewPresetIndex != nil {
		return *x.NewPresetIndex
	}
	return 0
}

type TSWPStyleUpdatePropertyMapCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *TSSStyleUpdatePropertyMapCommandArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
}

func (x *TSWPStyleUpdatePropertyMapCommandArchive) Reset() {
	*x = TSWPStyleUpdatePropertyMapCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPCommandArchives_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSWPStyleUpdatePropertyMapCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSWPStyleUpdatePropertyMapCommandArchive) ProtoMessage() {}

func (x *TSWPStyleUpdatePropertyMapCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPCommandArchives_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSWPStyleUpdatePropertyMapCommandArchive.ProtoReflect.Descriptor instead.
func (*TSWPStyleUpdatePropertyMapCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSWPCommandArchives_proto_rawDescGZIP(), []int{28}
}

func (x *TSWPStyleUpdatePropertyMapCommandArchive) GetSuper() *TSSStyleUpdatePropertyMapCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

type TSWPShapeStyleSetValueCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super  *BaseStyleSetValueCommandArchive    `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Change *ShapeStylePropertyChangeSetArchive `protobuf:"bytes,4,opt,name=change" json:"change,omitempty"`
}

func (x *TSWPShapeStyleSetValueCommandArchive) Reset() {
	*x = TSWPShapeStyleSetValueCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPCommandArchives_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSWPShapeStyleSetValueCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSWPShapeStyleSetValueCommandArchive) ProtoMessage() {}

func (x *TSWPShapeStyleSetValueCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPCommandArchives_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSWPShapeStyleSetValueCommandArchive.ProtoReflect.Descriptor instead.
func (*TSWPShapeStyleSetValueCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSWPCommandArchives_proto_rawDescGZIP(), []int{29}
}

func (x *TSWPShapeStyleSetValueCommandArchive) GetSuper() *BaseStyleSetValueCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *TSWPShapeStyleSetValueCommandArchive) GetChange() *ShapeStylePropertyChangeSetArchive {
	if x != nil {
		return x.Change
	}
	return nil
}

type SelectionTransformerArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StorageUuidPath   *UUIDPath  `protobuf:"bytes,1,req,name=storage_uuid_path,json=storageUuidPath" json:"storage_uuid_path,omitempty"`
	Selection         *Reference `protobuf:"bytes,2,req,name=selection" json:"selection,omitempty"`
	TransformedToNoop *bool      `protobuf:"varint,3,opt,name=transformed_to_noop,json=transformedToNoop" json:"transformed_to_noop,omitempty"`
}

func (x *SelectionTransformerArchive) Reset() {
	*x = SelectionTransformerArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPCommandArchives_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectionTransformerArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectionTransformerArchive) ProtoMessage() {}

func (x *SelectionTransformerArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPCommandArchives_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectionTransformerArchive.ProtoReflect.Descriptor instead.
func (*SelectionTransformerArchive) Descriptor() ([]byte, []int) {
	return file_TSWPCommandArchives_proto_rawDescGZIP(), []int{30}
}

func (x *SelectionTransformerArchive) GetStorageUuidPath() *UUIDPath {
	if x != nil {
		return x.StorageUuidPath
	}
	return nil
}

func (x *SelectionTransformerArchive) GetSelection() *Reference {
	if x != nil {
		return x.Selection
	}
	return nil
}

func (x *SelectionTransformerArchive) GetTransformedToNoop() bool {
	if x != nil && x.TransformedToNoop != nil {
		return *x.TransformedToNoop
	}
	return false
}

type TSWPPencilAnnotationSelectionTransformerArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StorageUuidPath          *UUIDPath `protobuf:"bytes,1,req,name=storage_uuid_path,json=storageUuidPath" json:"storage_uuid_path,omitempty"`
	TextPencilAnnotationUuid *string   `protobuf:"bytes,2,req,name=text_pencil_annotation_uuid,json=textPencilAnnotationUuid" json:"text_pencil_annotation_uuid,omitempty"`
}

func (x *TSWPPencilAnnotationSelectionTransformerArchive) Reset() {
	*x = TSWPPencilAnnotationSelectionTransformerArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPCommandArchives_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSWPPencilAnnotationSelectionTransformerArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSWPPencilAnnotationSelectionTransformerArchive) ProtoMessage() {}

func (x *TSWPPencilAnnotationSelectionTransformerArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPCommandArchives_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSWPPencilAnnotationSelectionTransformerArchive.ProtoReflect.Descriptor instead.
func (*TSWPPencilAnnotationSelectionTransformerArchive) Descriptor() ([]byte, []int) {
	return file_TSWPCommandArchives_proto_rawDescGZIP(), []int{31}
}

func (x *TSWPPencilAnnotationSelectionTransformerArchive) GetStorageUuidPath() *UUIDPath {
	if x != nil {
		return x.StorageUuidPath
	}
	return nil
}

func (x *TSWPPencilAnnotationSelectionTransformerArchive) GetTextPencilAnnotationUuid() string {
	if x != nil && x.TextPencilAnnotationUuid != nil {
		return *x.TextPencilAnnotationUuid
	}
	return ""
}

type TSWPShapeSelectionTransformerArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super           *ShapeSelectionTransformerArchive `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	StorageUuidPath *UUIDPath                         `protobuf:"bytes,2,opt,name=storage_uuid_path,json=storageUuidPath" json:"storage_uuid_path,omitempty"`
}

func (x *TSWPShapeSelectionTransformerArchive) Reset() {
	*x = TSWPShapeSelectionTransformerArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPCommandArchives_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSWPShapeSelectionTransformerArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSWPShapeSelectionTransformerArchive) ProtoMessage() {}

func (x *TSWPShapeSelectionTransformerArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPCommandArchives_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSWPShapeSelectionTransformerArchive.ProtoReflect.Descriptor instead.
func (*TSWPShapeSelectionTransformerArchive) Descriptor() ([]byte, []int) {
	return file_TSWPCommandArchives_proto_rawDescGZIP(), []int{32}
}

func (x *TSWPShapeSelectionTransformerArchive) GetSuper() *ShapeSelectionTransformerArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *TSWPShapeSelectionTransformerArchive) GetStorageUuidPath() *UUIDPath {
	if x != nil {
		return x.StorageUuidPath
	}
	return nil
}

type ShapeContentDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super             *DrawableContentDescription `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	TextRangeLocation *uint32                     `protobuf:"varint,2,opt,name=text_range_location,json=textRangeLocation" json:"text_range_location,omitempty"`
	TextRangeLength   *uint32                     `protobuf:"varint,3,opt,name=text_range_length,json=textRangeLength" json:"text_range_length,omitempty"`
}

func (x *ShapeContentDescription) Reset() {
	*x = ShapeContentDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPCommandArchives_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShapeContentDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShapeContentDescription) ProtoMessage() {}

func (x *ShapeContentDescription) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPCommandArchives_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShapeContentDescription.ProtoReflect.Descriptor instead.
func (*ShapeContentDescription) Descriptor() ([]byte, []int) {
	return file_TSWPCommandArchives_proto_rawDescGZIP(), []int{33}
}

func (x *ShapeContentDescription) GetSuper() *DrawableContentDescription {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *ShapeContentDescription) GetTextRangeLocation() uint32 {
	if x != nil && x.TextRangeLocation != nil {
		return *x.TextRangeLocation
	}
	return 0
}

func (x *ShapeContentDescription) GetTextRangeLength() uint32 {
	if x != nil && x.TextRangeLength != nil {
		return *x.TextRangeLength
	}
	return 0
}

type ObjectPropertyArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         *string             `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Type         *ObjectPropertyType `protobuf:"varint,2,req,name=type,enum=TSWP.ObjectPropertyType" json:"type,omitempty"`
	BoolValue    *bool               `protobuf:"varint,3,opt,name=bool_value,json=boolValue" json:"bool_value,omitempty"`
	FloatValue   *float32            `protobuf:"fixed32,4,opt,name=float_value,json=floatValue" json:"float_value,omitempty"`
	IntegerValue *int32              `protobuf:"varint,5,opt,name=integer_value,json=integerValue" json:"integer_value,omitempty"`
	StringValue  *string             `protobuf:"bytes,6,opt,name=string_value,json=stringValue" json:"string_value,omitempty"`
	IdPathValue  *UUIDPath           `protobuf:"bytes,7,opt,name=id_path_value,json=idPathValue" json:"id_path_value,omitempty"`
	FillValue    *FillArchive        `protobuf:"bytes,8,opt,name=fill_value,json=fillValue" json:"fill_value,omitempty"`
	ColorValue   *Color              `protobuf:"bytes,9,opt,name=color_value,json=colorValue" json:"color_value,omitempty"`
	ShadowValue  *ShadowArchive      `protobuf:"bytes,10,opt,name=shadow_value,json=shadowValue" json:"shadow_value,omitempty"`
}

func (x *ObjectPropertyArchive) Reset() {
	*x = ObjectPropertyArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPCommandArchives_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectPropertyArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectPropertyArchive) ProtoMessage() {}

func (x *ObjectPropertyArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPCommandArchives_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectPropertyArchive.ProtoReflect.Descriptor instead.
func (*ObjectPropertyArchive) Descriptor() ([]byte, []int) {
	return file_TSWPCommandArchives_proto_rawDescGZIP(), []int{34}
}

func (x *ObjectPropertyArchive) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ObjectPropertyArchive) GetType() ObjectPropertyType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ObjectPropertyType_kObjectPropertyTypeBool
}

func (x *ObjectPropertyArchive) GetBoolValue() bool {
	if x != nil && x.BoolValue != nil {
		return *x.BoolValue
	}
	return false
}

func (x *ObjectPropertyArchive) GetFloatValue() float32 {
	if x != nil && x.FloatValue != nil {
		return *x.FloatValue
	}
	return 0
}

func (x *ObjectPropertyArchive) GetIntegerValue() int32 {
	if x != nil && x.IntegerValue != nil {
		return *x.IntegerValue
	}
	return 0
}

func (x *ObjectPropertyArchive) GetStringValue() string {
	if x != nil && x.StringValue != nil {
		return *x.StringValue
	}
	return ""
}

func (x *ObjectPropertyArchive) GetIdPathValue() *UUIDPath {
	if x != nil {
		return x.IdPathValue
	}
	return nil
}

func (x *ObjectPropertyArchive) GetFillValue() *FillArchive {
	if x != nil {
		return x.FillValue
	}
	return nil
}

func (x *ObjectPropertyArchive) GetColorValue() *Color {
	if x != nil {
		return x.ColorValue
	}
	return nil
}

func (x *ObjectPropertyArchive) GetShadowValue() *ShadowArchive {
	if x != nil {
		return x.ShadowValue
	}
	return nil
}

type SetObjectPropertiesCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super          *CommandArchive          `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	ObjectUuidPath *UUIDPath                `protobuf:"bytes,2,req,name=object_uuid_path,json=objectUuidPath" json:"object_uuid_path,omitempty"`
	Properties     []*ObjectPropertyArchive `protobuf:"bytes,3,rep,name=properties" json:"properties,omitempty"`
	ActionString   *string                  `protobuf:"bytes,4,opt,name=action_string,json=actionString" json:"action_string,omitempty"`
	OldProperties  []*ObjectPropertyArchive `protobuf:"bytes,5,rep,name=old_properties,json=oldProperties" json:"old_properties,omitempty"`
}

func (x *SetObjectPropertiesCommandArchive) Reset() {
	*x = SetObjectPropertiesCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPCommandArchives_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetObjectPropertiesCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetObjectPropertiesCommandArchive) ProtoMessage() {}

func (x *SetObjectPropertiesCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPCommandArchives_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetObjectPropertiesCommandArchive.ProtoReflect.Descriptor instead.
func (*SetObjectPropertiesCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSWPCommandArchives_proto_rawDescGZIP(), []int{35}
}

func (x *SetObjectPropertiesCommandArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *SetObjectPropertiesCommandArchive) GetObjectUuidPath() *UUIDPath {
	if x != nil {
		return x.ObjectUuidPath
	}
	return nil
}

func (x *SetObjectPropertiesCommandArchive) GetProperties() []*ObjectPropertyArchive {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *SetObjectPropertiesCommandArchive) GetActionString() string {
	if x != nil && x.ActionString != nil {
		return *x.ActionString
	}
	return ""
}

func (x *SetObjectPropertiesCommandArchive) GetOldProperties() []*ObjectPropertyArchive {
	if x != nil {
		return x.OldProperties
	}
	return nil
}

type UpdateFlowInfoCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                        *CommandArchive                    `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	CommandMode                  *UpdateFlowInfoCommandArchive_Mode `protobuf:"varint,2,opt,name=command_mode,json=commandMode,enum=TSWP.UpdateFlowInfoCommandArchive_Mode,def=0" json:"command_mode,omitempty"`
	FlowInfoUuidPath             *UUIDPath                          `protobuf:"bytes,3,opt,name=flow_info_uuid_path,json=flowInfoUuidPath" json:"flow_info_uuid_path,omitempty"`
	TextBoxIdPathToAddOrRemove   *UUIDPath                          `protobuf:"bytes,4,opt,name=text_box_id_path_to_add_or_remove,json=textBoxIdPathToAddOrRemove" json:"text_box_id_path_to_add_or_remove,omitempty"`
	TextBoxIdPathsAtStart        []*UUIDPath                        `protobuf:"bytes,5,rep,name=text_box_id_paths_at_start,json=textBoxIdPathsAtStart" json:"text_box_id_paths_at_start,omitempty"`
	SuggestedTextBoxIdPathsAtEnd []*UUIDPath                        `protobuf:"bytes,6,rep,name=suggested_text_box_id_paths_at_end,json=suggestedTextBoxIdPathsAtEnd" json:"suggested_text_box_id_paths_at_end,omitempty"`
	UndoTextBoxesToRestore       []*Reference                       `protobuf:"bytes,7,rep,name=undo_text_boxes_to_restore,json=undoTextBoxesToRestore" json:"undo_text_boxes_to_restore,omitempty"`
	UndoAddedShapeInfo           *Reference                         `protobuf:"bytes,8,opt,name=undo_added_shape_info,json=undoAddedShapeInfo" json:"undo_added_shape_info,omitempty"`
	UndoRemovedShapeInfo         *Reference                         `protobuf:"bytes,9,opt,name=undo_removed_shape_info,json=undoRemovedShapeInfo" json:"undo_removed_shape_info,omitempty"`
}

// Default values for UpdateFlowInfoCommandArchive fields.
const (
	Default_UpdateFlowInfoCommandArchive_CommandMode = UpdateFlowInfoCommandArchive_kModeRearrange
)

func (x *UpdateFlowInfoCommandArchive) Reset() {
	*x = UpdateFlowInfoCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPCommandArchives_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFlowInfoCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFlowInfoCommandArchive) ProtoMessage() {}

func (x *UpdateFlowInfoCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPCommandArchives_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFlowInfoCommandArchive.ProtoReflect.Descriptor instead.
func (*UpdateFlowInfoCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSWPCommandArchives_proto_rawDescGZIP(), []int{36}
}

func (x *UpdateFlowInfoCommandArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *UpdateFlowInfoCommandArchive) GetCommandMode() UpdateFlowInfoCommandArchive_Mode {
	if x != nil && x.CommandMode != nil {
		return *x.CommandMode
	}
	return Default_UpdateFlowInfoCommandArchive_CommandMode
}

func (x *UpdateFlowInfoCommandArchive) GetFlowInfoUuidPath() *UUIDPath {
	if x != nil {
		return x.FlowInfoUuidPath
	}
	return nil
}

func (x *UpdateFlowInfoCommandArchive) GetTextBoxIdPathToAddOrRemove() *UUIDPath {
	if x != nil {
		return x.TextBoxIdPathToAddOrRemove
	}
	return nil
}

func (x *UpdateFlowInfoCommandArchive) GetTextBoxIdPathsAtStart() []*UUIDPath {
	if x != nil {
		return x.TextBoxIdPathsAtStart
	}
	return nil
}

func (x *UpdateFlowInfoCommandArchive) GetSuggestedTextBoxIdPathsAtEnd() []*UUIDPath {
	if x != nil {
		return x.SuggestedTextBoxIdPathsAtEnd
	}
	return nil
}

func (x *UpdateFlowInfoCommandArchive) GetUndoTextBoxesToRestore() []*Reference {
	if x != nil {
		return x.UndoTextBoxesToRestore
	}
	return nil
}

func (x *UpdateFlowInfoCommandArchive) GetUndoAddedShapeInfo() *Reference {
	if x != nil {
		return x.UndoAddedShapeInfo
	}
	return nil
}

func (x *UpdateFlowInfoCommandArchive) GetUndoRemovedShapeInfo() *Reference {
	if x != nil {
		return x.UndoRemovedShapeInfo
	}
	return nil
}

type AddFlowInfoCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                                    *CommandArchive `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	FlowInfoToAdd                            *Reference      `protobuf:"bytes,2,opt,name=flow_info_to_add,json=flowInfoToAdd" json:"flow_info_to_add,omitempty"`
	FlowInfoArchive                          *Reference      `protobuf:"bytes,3,opt,name=flow_info_archive,json=flowInfoArchive" json:"flow_info_archive,omitempty"`
	UndoUserInterfaceIdentifierToRestore     *uint32         `protobuf:"varint,4,opt,name=undo_user_interface_identifier_to_restore,json=undoUserInterfaceIdentifierToRestore" json:"undo_user_interface_identifier_to_restore,omitempty"`
	UndoNextUserInterfaceIdentifierToRestore *uint32         `protobuf:"varint,5,opt,name=undo_next_user_interface_identifier_to_restore,json=undoNextUserInterfaceIdentifierToRestore" json:"undo_next_user_interface_identifier_to_restore,omitempty"`
	WorkingUndoObject                        *Reference      `protobuf:"bytes,6,opt,name=working_undo_object,json=workingUndoObject" json:"working_undo_object,omitempty"`
}

func (x *AddFlowInfoCommandArchive) Reset() {
	*x = AddFlowInfoCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPCommandArchives_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFlowInfoCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFlowInfoCommandArchive) ProtoMessage() {}

func (x *AddFlowInfoCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPCommandArchives_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFlowInfoCommandArchive.ProtoReflect.Descriptor instead.
func (*AddFlowInfoCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSWPCommandArchives_proto_rawDescGZIP(), []int{37}
}

func (x *AddFlowInfoCommandArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *AddFlowInfoCommandArchive) GetFlowInfoToAdd() *Reference {
	if x != nil {
		return x.FlowInfoToAdd
	}
	return nil
}

func (x *AddFlowInfoCommandArchive) GetFlowInfoArchive() *Reference {
	if x != nil {
		return x.FlowInfoArchive
	}
	return nil
}

func (x *AddFlowInfoCommandArchive) GetUndoUserInterfaceIdentifierToRestore() uint32 {
	if x != nil && x.UndoUserInterfaceIdentifierToRestore != nil {
		return *x.UndoUserInterfaceIdentifierToRestore
	}
	return 0
}

func (x *AddFlowInfoCommandArchive) GetUndoNextUserInterfaceIdentifierToRestore() uint32 {
	if x != nil && x.UndoNextUserInterfaceIdentifierToRestore != nil {
		return *x.UndoNextUserInterfaceIdentifierToRestore
	}
	return 0
}

func (x *AddFlowInfoCommandArchive) GetWorkingUndoObject() *Reference {
	if x != nil {
		return x.WorkingUndoObject
	}
	return nil
}

type RemoveFlowInfoCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                                    *CommandArchive `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	FlowInfoUuidPath                         *UUIDPath       `protobuf:"bytes,2,opt,name=flow_info_uuid_path,json=flowInfoUuidPath" json:"flow_info_uuid_path,omitempty"`
	UndoObject                               *Reference      `protobuf:"bytes,3,opt,name=undo_object,json=undoObject" json:"undo_object,omitempty"`
	UndoUserInterfaceIdentifierToRestore     *uint32         `protobuf:"varint,4,opt,name=undo_user_interface_identifier_to_restore,json=undoUserInterfaceIdentifierToRestore" json:"undo_user_interface_identifier_to_restore,omitempty"`
	UndoNextUserInterfaceIdentifierToRestore *uint32         `protobuf:"varint,5,opt,name=undo_next_user_interface_identifier_to_restore,json=undoNextUserInterfaceIdentifierToRestore" json:"undo_next_user_interface_identifier_to_restore,omitempty"`
}

func (x *RemoveFlowInfoCommandArchive) Reset() {
	*x = RemoveFlowInfoCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPCommandArchives_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveFlowInfoCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveFlowInfoCommandArchive) ProtoMessage() {}

func (x *RemoveFlowInfoCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPCommandArchives_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveFlowInfoCommandArchive.ProtoReflect.Descriptor instead.
func (*RemoveFlowInfoCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSWPCommandArchives_proto_rawDescGZIP(), []int{38}
}

func (x *RemoveFlowInfoCommandArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *RemoveFlowInfoCommandArchive) GetFlowInfoUuidPath() *UUIDPath {
	if x != nil {
		return x.FlowInfoUuidPath
	}
	return nil
}

func (x *RemoveFlowInfoCommandArchive) GetUndoObject() *Reference {
	if x != nil {
		return x.UndoObject
	}
	return nil
}

func (x *RemoveFlowInfoCommandArchive) GetUndoUserInterfaceIdentifierToRestore() uint32 {
	if x != nil && x.UndoUserInterfaceIdentifierToRestore != nil {
		return *x.UndoUserInterfaceIdentifierToRestore
	}
	return 0
}

func (x *RemoveFlowInfoCommandArchive) GetUndoNextUserInterfaceIdentifierToRestore() uint32 {
	if x != nil && x.UndoNextUserInterfaceIdentifierToRestore != nil {
		return *x.UndoNextUserInterfaceIdentifierToRestore
	}
	return 0
}

type TextCommentReplyCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super           *CommandArchive        `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	StorageUuidPath *UUIDPath              `protobuf:"bytes,2,opt,name=storage_uuid_path,json=storageUuidPath" json:"storage_uuid_path,omitempty"`
	AnnotationUuid  *string                `protobuf:"bytes,3,opt,name=annotation_uuid,json=annotationUuid" json:"annotation_uuid,omitempty"`
	ForwardComment  *Reference             `protobuf:"bytes,4,opt,name=forward_comment,json=forwardComment" json:"forward_comment,omitempty"`
	InverseComment  *Reference             `protobuf:"bytes,5,opt,name=inverse_comment,json=inverseComment" json:"inverse_comment,omitempty"`
	ForwardVariant  *CommentCommandVariant `protobuf:"varint,6,opt,name=forward_variant,json=forwardVariant,enum=TSD.CommentCommandVariant" json:"forward_variant,omitempty"`
	InverseVariant  *CommentCommandVariant `protobuf:"varint,7,opt,name=inverse_variant,json=inverseVariant,enum=TSD.CommentCommandVariant" json:"inverse_variant,omitempty"`
}

func (x *TextCommentReplyCommandArchive) Reset() {
	*x = TextCommentReplyCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPCommandArchives_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextCommentReplyCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextCommentReplyCommandArchive) ProtoMessage() {}

func (x *TextCommentReplyCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPCommandArchives_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextCommentReplyCommandArchive.ProtoReflect.Descriptor instead.
func (*TextCommentReplyCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSWPCommandArchives_proto_rawDescGZIP(), []int{39}
}

func (x *TextCommentReplyCommandArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *TextCommentReplyCommandArchive) GetStorageUuidPath() *UUIDPath {
	if x != nil {
		return x.StorageUuidPath
	}
	return nil
}

func (x *TextCommentReplyCommandArchive) GetAnnotationUuid() string {
	if x != nil && x.AnnotationUuid != nil {
		return *x.AnnotationUuid
	}
	return ""
}

func (x *TextCommentReplyCommandArchive) GetForwardComment() *Reference {
	if x != nil {
		return x.ForwardComment
	}
	return nil
}

func (x *TextCommentReplyCommandArchive) GetInverseComment() *Reference {
	if x != nil {
		return x.InverseComment
	}
	return nil
}

func (x *TextCommentReplyCommandArchive) GetForwardVariant() CommentCommandVariant {
	if x != nil && x.ForwardVariant != nil {
		return *x.ForwardVariant
	}
	return CommentCommandVariant_BaseComment
}

func (x *TextCommentReplyCommandArchive) GetInverseVariant() CommentCommandVariant {
	if x != nil && x.InverseVariant != nil {
		return *x.InverseVariant
	}
	return CommentCommandVariant_BaseComment
}

type ContainedObjectsCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                    *CommandArchive                                       `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	Target                   *Reference                                            `protobuf:"bytes,2,req,name=target" json:"target,omitempty"`
	Objects                  []*Reference                                          `protobuf:"bytes,3,rep,name=objects" json:"objects,omitempty"`
	UndoObjectForCommit      *Reference                                            `protobuf:"bytes,4,opt,name=undo_object_for_commit,json=undoObjectForCommit" json:"undo_object_for_commit,omitempty"`
	UndoObjectForMakeInverse *Reference                                            `protobuf:"bytes,5,opt,name=undo_object_for_make_inverse,json=undoObjectForMakeInverse" json:"undo_object_for_make_inverse,omitempty"`
	AddBehaviorArgs          *ContainedObjectsCommandArchive_AddBehaviorArgs       `protobuf:"bytes,6,opt,name=add_behavior_args,json=addBehaviorArgs" json:"add_behavior_args,omitempty"`
	RemoveBehaviorArgs       *ContainedObjectsCommandArchive_RemoveBehaviorArgs    `protobuf:"bytes,7,opt,name=remove_behavior_args,json=removeBehaviorArgs" json:"remove_behavior_args,omitempty"`
	RearrangeBehaviorArgs    *ContainedObjectsCommandArchive_RearrangeBehaviorArgs `protobuf:"bytes,8,opt,name=rearrange_behavior_args,json=rearrangeBehaviorArgs" json:"rearrange_behavior_args,omitempty"`
	ContainerName            *string                                               `protobuf:"bytes,9,opt,name=container_name,json=containerName" json:"container_name,omitempty"`
}

func (x *ContainedObjectsCommandArchive) Reset() {
	*x = ContainedObjectsCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPCommandArchives_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainedObjectsCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainedObjectsCommandArchive) ProtoMessage() {}

func (x *ContainedObjectsCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPCommandArchives_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainedObjectsCommandArchive.ProtoReflect.Descriptor instead.
func (*ContainedObjectsCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSWPCommandArchives_proto_rawDescGZIP(), []int{40}
}

func (x *ContainedObjectsCommandArchive) GetSuper() *CommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *ContainedObjectsCommandArchive) GetTarget() *Reference {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *ContainedObjectsCommandArchive) GetObjects() []*Reference {
	if x != nil {
		return x.Objects
	}
	return nil
}

func (x *ContainedObjectsCommandArchive) GetUndoObjectForCommit() *Reference {
	if x != nil {
		return x.UndoObjectForCommit
	}
	return nil
}

func (x *ContainedObjectsCommandArchive) GetUndoObjectForMakeInverse() *Reference {
	if x != nil {
		return x.UndoObjectForMakeInverse
	}
	return nil
}

func (x *ContainedObjectsCommandArchive) GetAddBehaviorArgs() *ContainedObjectsCommandArchive_AddBehaviorArgs {
	if x != nil {
		return x.AddBehaviorArgs
	}
	return nil
}

func (x *ContainedObjectsCommandArchive) GetRemoveBehaviorArgs() *ContainedObjectsCommandArchive_RemoveBehaviorArgs {
	if x != nil {
		return x.RemoveBehaviorArgs
	}
	return nil
}

func (x *ContainedObjectsCommandArchive) GetRearrangeBehaviorArgs() *ContainedObjectsCommandArchive_RearrangeBehaviorArgs {
	if x != nil {
		return x.RearrangeBehaviorArgs
	}
	return nil
}

func (x *ContainedObjectsCommandArchive) GetContainerName() string {
	if x != nil && x.ContainerName != nil {
		return *x.ContainerName
	}
	return ""
}

type EquationInfoGeometryCommandArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super *MediaInfoGeometryCommandArchive `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
}

func (x *EquationInfoGeometryCommandArchive) Reset() {
	*x = EquationInfoGeometryCommandArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPCommandArchives_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquationInfoGeometryCommandArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquationInfoGeometryCommandArchive) ProtoMessage() {}

func (x *EquationInfoGeometryCommandArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPCommandArchives_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquationInfoGeometryCommandArchive.ProtoReflect.Descriptor instead.
func (*EquationInfoGeometryCommandArchive) Descriptor() ([]byte, []int) {
	return file_TSWPCommandArchives_proto_rawDescGZIP(), []int{41}
}

func (x *EquationInfoGeometryCommandArchive) GetSuper() *MediaInfoGeometryCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

type TSWPCharacterStyleChangePropertyCommand_GArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super                          *StorageActionCommandArchive                     `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	RangeList                      []*Range                                         `protobuf:"bytes,2,rep,name=range_list,json=rangeList" json:"range_list,omitempty"`
	RangeListUndefined             *bool                                            `protobuf:"varint,3,opt,name=range_list_undefined,json=rangeListUndefined" json:"range_list_undefined,omitempty"`
	ChangeList                     []*TSWPSOSCharacterStylePropertyChangeSetArchive `protobuf:"bytes,4,rep,name=change_list,json=changeList" json:"change_list,omitempty"`
	ChangeListUndefined            *bool                                            `protobuf:"varint,5,opt,name=change_list_undefined,json=changeListUndefined" json:"change_list_undefined,omitempty"`
	DisableCharacterStylePromotion *bool                                            `protobuf:"varint,6,req,name=disable_character_style_promotion,json=disableCharacterStylePromotion" json:"disable_character_style_promotion,omitempty"`
}

func (x *TSWPCharacterStyleChangePropertyCommand_GArchive) Reset() {
	*x = TSWPCharacterStyleChangePropertyCommand_GArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPCommandArchives_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSWPCharacterStyleChangePropertyCommand_GArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSWPCharacterStyleChangePropertyCommand_GArchive) ProtoMessage() {}

func (x *TSWPCharacterStyleChangePropertyCommand_GArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPCommandArchives_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSWPCharacterStyleChangePropertyCommand_GArchive.ProtoReflect.Descriptor instead.
func (*TSWPCharacterStyleChangePropertyCommand_GArchive) Descriptor() ([]byte, []int) {
	return file_TSWPCommandArchives_proto_rawDescGZIP(), []int{42}
}

func (x *TSWPCharacterStyleChangePropertyCommand_GArchive) GetSuper() *StorageActionCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *TSWPCharacterStyleChangePropertyCommand_GArchive) GetRangeList() []*Range {
	if x != nil {
		return x.RangeList
	}
	return nil
}

func (x *TSWPCharacterStyleChangePropertyCommand_GArchive) GetRangeListUndefined() bool {
	if x != nil && x.RangeListUndefined != nil {
		return *x.RangeListUndefined
	}
	return false
}

func (x *TSWPCharacterStyleChangePropertyCommand_GArchive) GetChangeList() []*TSWPSOSCharacterStylePropertyChangeSetArchive {
	if x != nil {
		return x.ChangeList
	}
	return nil
}

func (x *TSWPCharacterStyleChangePropertyCommand_GArchive) GetChangeListUndefined() bool {
	if x != nil && x.ChangeListUndefined != nil {
		return *x.ChangeListUndefined
	}
	return false
}

func (x *TSWPCharacterStyleChangePropertyCommand_GArchive) GetDisableCharacterStylePromotion() bool {
	if x != nil && x.DisableCharacterStylePromotion != nil {
		return *x.DisableCharacterStylePromotion
	}
	return false
}

type TSWPParagraphStyleChangePropertyCommand_GArchive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Super               *StorageActionCommandArchive                     `protobuf:"bytes,1,req,name=super" json:"super,omitempty"`
	RangeList           []*Range                                         `protobuf:"bytes,2,rep,name=range_list,json=rangeList" json:"range_list,omitempty"`
	RangeListUndefined  *bool                                            `protobuf:"varint,3,opt,name=range_list_undefined,json=rangeListUndefined" json:"range_list_undefined,omitempty"`
	ChangeList          []*TSWPSOSParagraphStylePropertyChangeSetArchive `protobuf:"bytes,4,rep,name=change_list,json=changeList" json:"change_list,omitempty"`
	ChangeListUndefined *bool                                            `protobuf:"varint,5,opt,name=change_list_undefined,json=changeListUndefined" json:"change_list_undefined,omitempty"`
}

func (x *TSWPParagraphStyleChangePropertyCommand_GArchive) Reset() {
	*x = TSWPParagraphStyleChangePropertyCommand_GArchive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPCommandArchives_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSWPParagraphStyleChangePropertyCommand_GArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSWPParagraphStyleChangePropertyCommand_GArchive) ProtoMessage() {}

func (x *TSWPParagraphStyleChangePropertyCommand_GArchive) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPCommandArchives_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSWPParagraphStyleChangePropertyCommand_GArchive.ProtoReflect.Descriptor instead.
func (*TSWPParagraphStyleChangePropertyCommand_GArchive) Descriptor() ([]byte, []int) {
	return file_TSWPCommandArchives_proto_rawDescGZIP(), []int{43}
}

func (x *TSWPParagraphStyleChangePropertyCommand_GArchive) GetSuper() *StorageActionCommandArchive {
	if x != nil {
		return x.Super
	}
	return nil
}

func (x *TSWPParagraphStyleChangePropertyCommand_GArchive) GetRangeList() []*Range {
	if x != nil {
		return x.RangeList
	}
	return nil
}

func (x *TSWPParagraphStyleChangePropertyCommand_GArchive) GetRangeListUndefined() bool {
	if x != nil && x.RangeListUndefined != nil {
		return *x.RangeListUndefined
	}
	return false
}

func (x *TSWPParagraphStyleChangePropertyCommand_GArchive) GetChangeList() []*TSWPSOSParagraphStylePropertyChangeSetArchive {
	if x != nil {
		return x.ChangeList
	}
	return nil
}

func (x *TSWPParagraphStyleChangePropertyCommand_GArchive) GetChangeListUndefined() bool {
	if x != nil && x.ChangeListUndefined != nil {
		return *x.ChangeListUndefined
	}
	return false
}

type ContainedObjectsCommandArchive_AddBehaviorArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArgsList []*AddIdOperationArgs `protobuf:"bytes,1,rep,name=args_list,json=argsList" json:"args_list,omitempty"`
}

func (x *ContainedObjectsCommandArchive_AddBehaviorArgs) Reset() {
	*x = ContainedObjectsCommandArchive_AddBehaviorArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPCommandArchives_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainedObjectsCommandArchive_AddBehaviorArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainedObjectsCommandArchive_AddBehaviorArgs) ProtoMessage() {}

func (x *ContainedObjectsCommandArchive_AddBehaviorArgs) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPCommandArchives_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainedObjectsCommandArchive_AddBehaviorArgs.ProtoReflect.Descriptor instead.
func (*ContainedObjectsCommandArchive_AddBehaviorArgs) Descriptor() ([]byte, []int) {
	return file_TSWPCommandArchives_proto_rawDescGZIP(), []int{40, 0}
}

func (x *ContainedObjectsCommandArchive_AddBehaviorArgs) GetArgsList() []*AddIdOperationArgs {
	if x != nil {
		return x.ArgsList
	}
	return nil
}

type ContainedObjectsCommandArchive_RemoveBehaviorArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArgsList []*RemoveIdOperationArgs `protobuf:"bytes,1,rep,name=args_list,json=argsList" json:"args_list,omitempty"`
}

func (x *ContainedObjectsCommandArchive_RemoveBehaviorArgs) Reset() {
	*x = ContainedObjectsCommandArchive_RemoveBehaviorArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPCommandArchives_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainedObjectsCommandArchive_RemoveBehaviorArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainedObjectsCommandArchive_RemoveBehaviorArgs) ProtoMessage() {}

func (x *ContainedObjectsCommandArchive_RemoveBehaviorArgs) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPCommandArchives_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainedObjectsCommandArchive_RemoveBehaviorArgs.ProtoReflect.Descriptor instead.
func (*ContainedObjectsCommandArchive_RemoveBehaviorArgs) Descriptor() ([]byte, []int) {
	return file_TSWPCommandArchives_proto_rawDescGZIP(), []int{40, 1}
}

func (x *ContainedObjectsCommandArchive_RemoveBehaviorArgs) GetArgsList() []*RemoveIdOperationArgs {
	if x != nil {
		return x.ArgsList
	}
	return nil
}

type ContainedObjectsCommandArchive_RearrangeBehaviorArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArgsList []*RearrangeIdOperationArgs `protobuf:"bytes,1,rep,name=args_list,json=argsList" json:"args_list,omitempty"`
}

func (x *ContainedObjectsCommandArchive_RearrangeBehaviorArgs) Reset() {
	*x = ContainedObjectsCommandArchive_RearrangeBehaviorArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TSWPCommandArchives_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainedObjectsCommandArchive_RearrangeBehaviorArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainedObjectsCommandArchive_RearrangeBehaviorArgs) ProtoMessage() {}

func (x *ContainedObjectsCommandArchive_RearrangeBehaviorArgs) ProtoReflect() protoreflect.Message {
	mi := &file_TSWPCommandArchives_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainedObjectsCommandArchive_RearrangeBehaviorArgs.ProtoReflect.Descriptor instead.
func (*ContainedObjectsCommandArchive_RearrangeBehaviorArgs) Descriptor() ([]byte, []int) {
	return file_TSWPCommandArchives_proto_rawDescGZIP(), []int{40, 2}
}

func (x *ContainedObjectsCommandArchive_RearrangeBehaviorArgs) GetArgsList() []*RearrangeIdOperationArgs {
	if x != nil {
		return x.ArgsList
	}
	return nil
}

var File_TSWPCommandArchives_proto protoreflect.FileDescriptor

var file_TSWPCommandArchives_proto_rawDesc = []byte{
	0x0a, 0x19, 0x54, 0x53, 0x57, 0x50, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x54, 0x53, 0x57,
	0x50, 0x1a, 0x11, 0x54, 0x53, 0x50, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x54, 0x53, 0x53, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x54, 0x53, 0x44, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x54, 0x53, 0x44, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x54, 0x53, 0x4b, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x54, 0x53, 0x57, 0x50, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x54, 0x53, 0x57,
	0x50, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x73, 0x5f, 0x73, 0x6f, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x27, 0x0a, 0x13, 0x44, 0x75, 0x6d, 0x6d, 0x79, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x6f,
	0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x03, 0x66, 0x6f, 0x6f, 0x22, 0xfe, 0x07, 0x0a,
	0x12, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x28,
	0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x10, 0x75, 0x6e, 0x64, 0x6f,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x55, 0x6e, 0x64, 0x6f, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x75, 0x6e, 0x64, 0x6f, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x72, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x72, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12,
	0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x3d, 0x0a, 0x1b, 0x72, 0x65, 0x64, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x72, 0x65, 0x64, 0x6f, 0x52, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x39, 0x0a, 0x19, 0x72, 0x65, 0x64, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x72, 0x65, 0x64, 0x6f, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x12,
	0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x65, 0x78, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x41, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e,
	0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x3a, 0x0e, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0xfd, 0x03,
	0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x4b,
	0x69, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x65, 0x78, 0x74, 0x10, 0x01,
	0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x61, 0x73, 0x74, 0x65, 0x10, 0x02,
	0x12, 0x17, 0x0a, 0x13, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x4b, 0x69,
	0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x10, 0x04, 0x12, 0x1d, 0x0a,
	0x19, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d,
	0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x44, 0x72, 0x61, 0x67, 0x54, 0x65, 0x78, 0x74, 0x10, 0x06, 0x12,
	0x13, 0x0a, 0x0f, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x61, 0x73, 0x74, 0x65, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x10, 0x07, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x49, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x10, 0x08, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x49, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x43, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x10, 0x0a,
	0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x42,
	0x69, 0x62, 0x6c, 0x69, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x10, 0x0b, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x43, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x10,
	0x0c, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x54, 0x4f, 0x43, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x10, 0x0d, 0x12,
	0x1c, 0x0a, 0x18, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x10, 0x0e, 0x12, 0x1c, 0x0a,
	0x18, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x10, 0x0f, 0x12, 0x25, 0x0a, 0x21, 0x6b,
	0x4b, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x46, 0x69, 0x72, 0x73, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x10, 0x10, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x10, 0x11, 0x12, 0x15, 0x0a, 0x11, 0x6b,
	0x4b, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73,
	0x10, 0x12, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x42, 0x69, 0x64, 0x69, 0x10, 0x13, 0x22, 0xcf, 0x0d,
	0x0a, 0x1b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a,
	0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54,
	0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x55, 0x55, 0x49, 0x44, 0x50, 0x61, 0x74, 0x68, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x12, 0x40, 0x0a, 0x10, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x54, 0x53,
	0x57, 0x50, 0x2e, 0x55, 0x6e, 0x64, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0f, 0x75, 0x6e, 0x64, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x74, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x46, 0x6c, 0x61, 0x67,
	0x73, 0x12, 0x4a, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x26, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x3a, 0x0e, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x37, 0x0a,
	0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x6b,
	0x65, 0x79, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e,
	0x55, 0x55, 0x49, 0x44, 0x52, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x69, 0x73, 0x5f, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x69, 0x73, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x61, 0x6c, 0x65, 0x73, 0x63, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x6f, 0x61, 0x6c, 0x65,
	0x73, 0x63, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x61, 0x6c, 0x65,
	0x73, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x63, 0x6f, 0x61, 0x6c, 0x65, 0x73, 0x63, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x78, 0x74,
	0x12, 0x32, 0x0a, 0x15, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x6d, 0x69, 0x67, 0x72, 0x61,
	0x74, 0x65, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x13, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x73, 0x12, 0x5b, 0x0a, 0x1d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x53,
	0x4b, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x1a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x61, 0x6c, 0x65, 0x73, 0x63, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x63, 0x6f, 0x61, 0x6c, 0x65, 0x73, 0x63, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x22, 0x9a, 0x08, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x0e, 0x6b,
	0x4b, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x00, 0x12,
	0x14, 0x0a, 0x10, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x54,
	0x65, 0x78, 0x74, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x61,
	0x73, 0x74, 0x65, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x61,
	0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x10, 0x03, 0x12, 0x12,
	0x0a, 0x0e, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x6e,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x10,
	0x05, 0x12, 0x11, 0x0a, 0x0d, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x44, 0x72, 0x61, 0x67, 0x54, 0x65,
	0x78, 0x74, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x61, 0x73,
	0x74, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x10, 0x07, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x4b, 0x69,
	0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x49, 0x6e,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x10, 0x08, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x4b, 0x69, 0x6e, 0x64,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x43, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x10, 0x0a, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x42, 0x69, 0x62, 0x6c, 0x69, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x10, 0x0b, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x4b, 0x69, 0x6e, 0x64,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x10, 0x0c, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x49,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x4f, 0x43, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x10, 0x0d, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x49, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x10, 0x0e, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x10, 0x0f,
	0x12, 0x25, 0x0a, 0x21, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x46, 0x69, 0x72, 0x73, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x10, 0x10, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x4b, 0x69, 0x6e, 0x64,
	0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x10, 0x11,
	0x12, 0x15, 0x0a, 0x11, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x73, 0x10, 0x12, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x4b, 0x69, 0x6e, 0x64,
	0x53, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x42, 0x69, 0x64, 0x69,
	0x10, 0x13, 0x12, 0x13, 0x0a, 0x0f, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x54, 0x65, 0x78, 0x74, 0x10, 0x14, 0x12, 0x19, 0x0a, 0x15, 0x6b, 0x4b, 0x69, 0x6e, 0x64,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x10, 0x15, 0x12, 0x18, 0x0a, 0x14, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x6b, 0x10, 0x16, 0x12, 0x18, 0x0a, 0x14,
	0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x48, 0x79, 0x70, 0x65, 0x72,
	0x6c, 0x69, 0x6e, 0x6b, 0x10, 0x17, 0x12, 0x18, 0x0a, 0x14, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x6b, 0x10, 0x18,
	0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x48, 0x69,
	0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x78, 0x74, 0x10, 0x19, 0x12, 0x1e, 0x0a,
	0x1a, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x10, 0x1a, 0x12, 0x24, 0x0a,
	0x20, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x4d, 0x6f, 0x76, 0x65, 0x64, 0x41, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x65, 0x64, 0x44, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x10, 0x1b, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x4d, 0x6f, 0x76, 0x65,
	0x44, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65,
	0x64, 0x10, 0x1c, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x4d, 0x6f, 0x76, 0x65,
	0x4d, 0x6f, 0x76, 0x65, 0x44, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x1d, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x4b, 0x69, 0x6e, 0x64,
	0x4d, 0x6f, 0x76, 0x65, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x72, 0x61, 0x77, 0x61, 0x62,
	0x6c, 0x65, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x65, 0x64, 0x10, 0x1e, 0x12, 0x19, 0x0a, 0x15,
	0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x1f, 0x12, 0x11, 0x0a, 0x0d, 0x6b, 0x4b, 0x69, 0x6e, 0x64,
	0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x10, 0x20, 0x12, 0x17, 0x0a, 0x13, 0x6b, 0x4b,
	0x69, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x10, 0x21, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x50, 0x65, 0x6e, 0x63, 0x69, 0x6c, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x10, 0x22, 0x12, 0x13, 0x0a, 0x0f, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x75, 0x62, 0x79, 0x10, 0x23, 0x12, 0x13, 0x0a, 0x0f, 0x6b, 0x4b, 0x69, 0x6e,
	0x64, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x75, 0x62, 0x79, 0x10, 0x24, 0x12, 0x13, 0x0a,
	0x0f, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x75, 0x62, 0x79,
	0x10, 0x25, 0x12, 0x14, 0x0a, 0x10, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x54, 0x61, 0x74, 0x65, 0x43,
	0x68, 0x75, 0x59, 0x6f, 0x6b, 0x6f, 0x10, 0x26, 0x12, 0x15, 0x0a, 0x11, 0x6b, 0x4b, 0x69, 0x6e,
	0x64, 0x44, 0x72, 0x6f, 0x70, 0x43, 0x61, 0x70, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x10, 0x27, 0x22,
	0xb5, 0x01, 0x0a, 0x1c, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x07, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x10, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x55, 0x6e, 0x64, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x75, 0x6e, 0x64, 0x6f, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xbc, 0x01, 0x0a, 0x23, 0x52, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x73, 0x4f, 0x66, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12,
	0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x07, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x10, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x55, 0x6e, 0x64, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x75, 0x6e, 0x64, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xfa, 0x01, 0x0a, 0x1b, 0x49, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x12, 0x28, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x40, 0x0a, 0x10, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x54, 0x53,
	0x57, 0x50, 0x2e, 0x55, 0x6e, 0x64, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0f, 0x75, 0x6e, 0x64, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xeb, 0x01, 0x0a, 0x18, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x52, 0x6f,
	0x77, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x07, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x6f, 0x77, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x40, 0x0a, 0x10, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x54, 0x53, 0x57, 0x50,
	0x2e, 0x55, 0x6e, 0x64, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0f, 0x75, 0x6e, 0x64, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xfa, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x07,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x10,
	0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x55, 0x6e,
	0x64, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x75,
	0x6e, 0x64, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xeb,
	0x01, 0x0a, 0x18, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x6f, 0x77, 0x73, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x6f, 0x77, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x72, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x10, 0x75, 0x6e,
	0x64, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x55, 0x6e, 0x64, 0x6f,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x75, 0x6e, 0x64,
	0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9b, 0x02, 0x0a,
	0x18, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x72, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x72, 0x6f, 0x77,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x77, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x6f, 0x77,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x10, 0x75, 0x6e, 0x64, 0x6f,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x55, 0x6e, 0x64, 0x6f, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x75, 0x6e, 0x64, 0x6f, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xca, 0x02, 0x0a, 0x22, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x54,
	0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x07,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x34, 0x0a, 0x16, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x14, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x40, 0x0a, 0x10, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x55, 0x6e, 0x64, 0x6f, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x75, 0x6e, 0x64, 0x6f, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x54, 0x61, 0x67, 0x22, 0xd8, 0x02, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a,
	0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54,
	0x53, 0x57, 0x50, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x36, 0x0a,
	0x0f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x55, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x55, 0x0a, 0x0a, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x36, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x6d, 0x61, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x22, 0xc1, 0x02, 0x0a, 0x1b, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x75, 0x62, 0x79,
	0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x28, 0x0a,
	0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x07,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x14, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x75, 0x62, 0x79, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x75, 0x62, 0x79,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x40, 0x0a, 0x10, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x55, 0x6e, 0x64, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x75, 0x6e, 0x64, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf4, 0x01, 0x0a, 0x1c, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x52, 0x75, 0x62, 0x79, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x12, 0x2d, 0x0a, 0x0a, 0x72, 0x75, 0x62, 0x79, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x72, 0x75, 0x62, 0x79, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x75, 0x62, 0x79, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x75, 0x62, 0x79, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x40, 0x0a, 0x10, 0x75,
	0x6e, 0x64, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x55, 0x6e, 0x64,
	0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x75, 0x6e,
	0x64, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc4, 0x01,
	0x0a, 0x23, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x4f, 0x43, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x42, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x12, 0x38, 0x0a, 0x10, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x6f, 0x63, 0x5f, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x6f, 0x6c, 0x64, 0x54,
	0x6f, 0x63, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x38, 0x0a, 0x10, 0x6e, 0x65,
	0x77, 0x5f, 0x74, 0x6f, 0x63, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x6e, 0x65, 0x77, 0x54, 0x6f, 0x63, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x22, 0xa8, 0x01, 0x0a, 0x29, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54,
	0x4f, 0x43, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x46, 0x6f, 0x72, 0x54, 0x4f, 0x43,
	0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x12, 0x3f, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54,
	0x4f, 0x43, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x61, 0x73, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x12, 0x74, 0x6f, 0x63, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f,
	0x75, 0x75, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0f,
	0x74, 0x6f, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x50, 0x61, 0x74, 0x68, 0x22,
	0xb9, 0x01, 0x0a, 0x2d, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x4f, 0x43, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x54, 0x68,
	0x65, 0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x12, 0x3f, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x4f,
	0x43, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x12, 0x24, 0x0a, 0x05, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x05, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xf6, 0x03, 0x0a, 0x1e,
	0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x37,
	0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x54, 0x53, 0x57, 0x50, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x68, 0x5f, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x68, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x68,
	0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x68,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x76, 0x5f, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x76,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x5f,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x76, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x68, 0x74, 0x6d, 0x6c,
	0x5f, 0x77, 0x72, 0x61, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x48,
	0x74, 0x6d, 0x6c, 0x57, 0x72, 0x61, 0x70, 0x12, 0x2b, 0x0a, 0x12, 0x75, 0x6e, 0x64, 0x6f, 0x5f,
	0x68, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x75, 0x6e, 0x64, 0x6f, 0x48, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x68, 0x5f, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x75, 0x6e, 0x64,
	0x6f, 0x48, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x2b, 0x0a, 0x12, 0x75, 0x6e, 0x64, 0x6f,
	0x5f, 0x76, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x75, 0x6e, 0x64, 0x6f, 0x56, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x76, 0x5f,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x75, 0x6e,
	0x64, 0x6f, 0x56, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x29, 0x0a, 0x11, 0x75, 0x6e, 0x64,
	0x6f, 0x5f, 0x69, 0x73, 0x5f, 0x68, 0x74, 0x6d, 0x6c, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x75, 0x6e, 0x64, 0x6f, 0x49, 0x73, 0x48, 0x74, 0x6d, 0x6c,
	0x57, 0x72, 0x61, 0x70, 0x22, 0xc4, 0x01, 0x0a, 0x1c, 0x54, 0x65, 0x78, 0x74, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x54, 0x53, 0x53, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x54, 0x68, 0x65, 0x6d, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12,
	0x28, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x10, 0x75, 0x6e, 0x64,
	0x6f, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x55, 0x6e, 0x64, 0x6f, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x75, 0x6e, 0x64, 0x6f,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x82, 0x02, 0x0a, 0x19,
	0x4d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x73, 0x72, 0x63, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x64,
	0x73, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x64, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x40,
	0x0a, 0x10, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e,
	0x55, 0x6e, 0x64, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0f, 0x75, 0x6e, 0x64, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xff, 0x01, 0x0a, 0x16, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x6f, 0x77, 0x73, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x72, 0x63, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x64, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x40, 0x0a, 0x10, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x54, 0x53, 0x57,
	0x50, 0x2e, 0x55, 0x6e, 0x64, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0f, 0x75, 0x6e, 0x64, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x8d, 0x01, 0x0a, 0x22, 0x54, 0x53, 0x57, 0x50, 0x53, 0x68, 0x61, 0x70, 0x65,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x0a, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x75, 0x6e, 0x64, 0x6f, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x17, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x42, 0x61, 0x73, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29,
	0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x05, 0x74, 0x68, 0x65,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x05, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x12,
	0x24, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x22, 0x73, 0x0a, 0x19, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x42, 0x61,
	0x73, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x8e, 0x01, 0x0a, 0x19, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x42, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x21, 0x0a,
	0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x6f, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6f, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x19,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x42, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x35,
	0x0a, 0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x22, 0x7a, 0x0a, 0x19, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x42, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10,
	0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6f, 0x6c, 0x64, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xa5, 0x01, 0x0a, 0x1a, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x52, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x42, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x6c,
	0x64, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6f, 0x6c, 0x64, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x6e, 0x65, 0x77, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x6e,
	0x0a, 0x28, 0x54, 0x53, 0x57, 0x50, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x42, 0x0a, 0x05, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x54, 0x53, 0x53, 0x2e,
	0x54, 0x53, 0x53, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x22, 0xa7,
	0x01, 0x0a, 0x24, 0x54, 0x53, 0x57, 0x50, 0x53, 0x68, 0x61, 0x70, 0x65, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x53, 0x4f, 0x53, 0x2e, 0x53, 0x68,
	0x61, 0x70, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xb6, 0x01, 0x0a, 0x1b, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65,
	0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x39, 0x0a, 0x11, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x50, 0x61,
	0x74, 0x68, 0x52, 0x0f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x55, 0x75, 0x69, 0x64, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64,
	0x5f, 0x74, 0x6f, 0x5f, 0x6e, 0x6f, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x54, 0x6f, 0x4e, 0x6f, 0x6f,
	0x70, 0x22, 0xab, 0x01, 0x0a, 0x2f, 0x54, 0x53, 0x57, 0x50, 0x50, 0x65, 0x6e, 0x63, 0x69, 0x6c,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x39, 0x0a, 0x11, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x75, 0x75, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x50, 0x61, 0x74, 0x68, 0x52,
	0x0f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x55, 0x75, 0x69, 0x64, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x3d, 0x0a, 0x1b, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x65, 0x6e, 0x63, 0x69, 0x6c, 0x5f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x18, 0x74, 0x65, 0x78, 0x74, 0x50, 0x65, 0x6e, 0x63, 0x69,
	0x6c, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x22,
	0x9e, 0x01, 0x0a, 0x24, 0x54, 0x53, 0x57, 0x50, 0x53, 0x68, 0x61, 0x70, 0x65, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65,
	0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x53, 0x68,
	0x61, 0x70, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x11, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x75, 0x75, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x50, 0x61, 0x74, 0x68, 0x52,
	0x0f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x55, 0x75, 0x69, 0x64, 0x50, 0x61, 0x74, 0x68,
	0x22, 0xac, 0x01, 0x0a, 0x17, 0x53, 0x68, 0x61, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x05,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x54, 0x53,
	0x44, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x74, 0x65, 0x78, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22,
	0xa9, 0x03, 0x0a, 0x15, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x54, 0x53,
	0x57, 0x50, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x31, 0x0a, 0x0d, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x55, 0x55, 0x49, 0x44, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0b, 0x69, 0x64, 0x50, 0x61, 0x74,
	0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2f, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54, 0x53, 0x44,
	0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x09, 0x66, 0x69,
	0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x35, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x54, 0x53, 0x44,
	0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0b,
	0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xad, 0x02, 0x0a, 0x21,
	0x53, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x10,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49,
	0x44, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x75, 0x69,
	0x64, 0x50, 0x61, 0x74, 0x68, 0x12, 0x3b, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x54, 0x53, 0x57, 0x50,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x42, 0x0a, 0x0e, 0x6f, 0x6c, 0x64, 0x5f, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x0d, 0x6f, 0x6c,
	0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0x82, 0x06, 0x0a, 0x1c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53,
	0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x5a, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e,
	0x54, 0x53, 0x57, 0x50, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x49,
	0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x3a, 0x0e, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x61,
	0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x3c, 0x0a, 0x13, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x75, 0x75, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x50, 0x61, 0x74, 0x68, 0x52,
	0x10, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x54, 0x0a, 0x21, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x62, 0x6f, 0x78, 0x5f, 0x69, 0x64,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x6f, 0x72, 0x5f,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x54,
	0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x50, 0x61, 0x74, 0x68, 0x52, 0x1a, 0x74, 0x65, 0x78,
	0x74, 0x42, 0x6f, 0x78, 0x49, 0x64, 0x50, 0x61, 0x74, 0x68, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x4f,
	0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x48, 0x0a, 0x1a, 0x74, 0x65, 0x78, 0x74, 0x5f,
	0x62, 0x6f, 0x78, 0x5f, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x5f, 0x61, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x50, 0x61, 0x74, 0x68, 0x52, 0x15, 0x74, 0x65, 0x78, 0x74,
	0x42, 0x6f, 0x78, 0x49, 0x64, 0x50, 0x61, 0x74, 0x68, 0x73, 0x41, 0x74, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x57, 0x0a, 0x22, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x5f, 0x62, 0x6f, 0x78, 0x5f, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73,
	0x5f, 0x61, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x50, 0x61, 0x74, 0x68, 0x52, 0x1c, 0x73, 0x75,
	0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x42, 0x6f, 0x78, 0x49, 0x64,
	0x50, 0x61, 0x74, 0x68, 0x73, 0x41, 0x74, 0x45, 0x6e, 0x64, 0x12, 0x4a, 0x0a, 0x1a, 0x75, 0x6e,
	0x64, 0x6f, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x62, 0x6f, 0x78, 0x65, 0x73, 0x5f, 0x74, 0x6f,
	0x5f, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x16,
	0x75, 0x6e, 0x64, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x42, 0x6f, 0x78, 0x65, 0x73, 0x54, 0x6f, 0x52,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x41, 0x0a, 0x15, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x61,
	0x64, 0x64, 0x65, 0x64, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x12, 0x75, 0x6e, 0x64, 0x6f, 0x41, 0x64, 0x64, 0x65, 0x64,
	0x53, 0x68, 0x61, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x45, 0x0a, 0x17, 0x75, 0x6e, 0x64,
	0x6f, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x65, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x14, 0x75, 0x6e, 0x64, 0x6f,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x53, 0x68, 0x61, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x4e, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x6b, 0x4d, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x6b, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x6b,
	0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65, 0x10, 0x03,
	0x22, 0xb6, 0x03, 0x0a, 0x19, 0x41, 0x64, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29,
	0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x10, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x0d, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x54, 0x6f, 0x41,
	0x64, 0x64, 0x12, 0x3a, 0x0a, 0x11, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x66,
	0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x57,
	0x0a, 0x29, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x24, 0x75, 0x6e, 0x64, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x6f,
	0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x60, 0x0a, 0x2e, 0x75, 0x6e, 0x64, 0x6f, 0x5f,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x74,
	0x6f, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x28, 0x75, 0x6e, 0x64, 0x6f, 0x4e, 0x65, 0x78, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x54, 0x6f, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x3e, 0x0a, 0x13, 0x77, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x55,
	0x6e, 0x64, 0x6f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0xf3, 0x02, 0x0a, 0x1c, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x13, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x50, 0x61, 0x74,
	0x68, 0x52, 0x10, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x2f, 0x0a, 0x0b, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x75, 0x6e, 0x64, 0x6f, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x57, 0x0a, 0x29, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x24, 0x75, 0x6e, 0x64, 0x6f, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x54, 0x6f, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x60, 0x0a,
	0x2e, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x28, 0x75, 0x6e, 0x64, 0x6f, 0x4e, 0x65, 0x78, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x6f, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x22,
	0xab, 0x03, 0x0a, 0x1e, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x39, 0x0a,
	0x11, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x55,
	0x55, 0x49, 0x44, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x55, 0x75, 0x69, 0x64, 0x50, 0x61, 0x74, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x37, 0x0a, 0x0f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x0f, 0x69, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x0f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x54,
	0x53, 0x44, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x52, 0x0e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x54, 0x53, 0x44, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x52, 0x0e, 0x69,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x22, 0x87, 0x07,
	0x0a, 0x1e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x12, 0x29, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x06, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x12, 0x28, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x43, 0x0a,
	0x16, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x66, 0x6f, 0x72,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x54, 0x53, 0x50, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x13, 0x75,
	0x6e, 0x64, 0x6f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x12, 0x4e, 0x0a, 0x1c, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x6b, 0x65, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x18, 0x75, 0x6e, 0x64, 0x6f, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x46, 0x6f, 0x72, 0x4d, 0x61, 0x6b, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x12, 0x60, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x54, 0x53, 0x57, 0x50, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x41,
	0x72, 0x67, 0x73, 0x52, 0x0f, 0x61, 0x64, 0x64, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x41, 0x72, 0x67, 0x73, 0x12, 0x69, 0x0a, 0x14, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x62,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x41, 0x72, 0x67, 0x73, 0x52, 0x12, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x41, 0x72, 0x67, 0x73, 0x12,
	0x72, 0x0a, 0x17, 0x72, 0x65, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x62, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x41, 0x72, 0x67, 0x73, 0x52, 0x15, 0x72, 0x65,
	0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x41,
	0x72, 0x67, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x47, 0x0a, 0x0f, 0x41, 0x64,
	0x64, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x41, 0x72, 0x67, 0x73, 0x12, 0x34, 0x0a,
	0x09, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x41, 0x64, 0x64, 0x49, 0x64, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x67, 0x73, 0x52, 0x08, 0x61, 0x72, 0x67, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x1a, 0x4d, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x41, 0x72, 0x67, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x61, 0x72, 0x67,
	0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x54,
	0x53, 0x4b, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x67, 0x73, 0x52, 0x08, 0x61, 0x72, 0x67, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x1a, 0x53, 0x0a, 0x15, 0x52, 0x65, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x42,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x41, 0x72, 0x67, 0x73, 0x12, 0x3a, 0x0a, 0x09, 0x61,
	0x72, 0x67, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x54, 0x53, 0x4b, 0x2e, 0x52, 0x65, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x67, 0x73, 0x52, 0x08, 0x61,
	0x72, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x60, 0x0a, 0x22, 0x45, 0x71, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x3a, 0x0a,
	0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x54,
	0x53, 0x44, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x47, 0x65, 0x6f, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x22, 0xa0, 0x03, 0x0a, 0x30, 0x54, 0x53,
	0x57, 0x50, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x47, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x37,
	0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x54, 0x53, 0x57, 0x50, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x0a, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x53,
	0x50, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x12, 0x57, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x54, 0x53, 0x57, 0x50,
	0x53, 0x4f, 0x53, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x53, 0x4f, 0x53, 0x43, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a,
	0x15, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x75, 0x6e, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x12, 0x49, 0x0a, 0x21, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x02, 0x28, 0x08, 0x52, 0x1e, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd5, 0x02, 0x0a,
	0x30, 0x54, 0x53, 0x57, 0x50, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x47, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x12, 0x37, 0x0a, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x05, 0x73, 0x75, 0x70, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x0a, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x54, 0x53, 0x50, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x12, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x57, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x54,
	0x53, 0x57, 0x50, 0x53, 0x4f, 0x53, 0x2e, 0x54, 0x53, 0x57, 0x50, 0x53, 0x4f, 0x53, 0x50, 0x61,
	0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x74, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x32, 0x0a, 0x15, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x13, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x2a, 0x87, 0x02, 0x0a, 0x12, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x6b,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x67, 0x65, 0x72, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x50, 0x61,
	0x74, 0x68, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x6b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x6c, 0x6c, 0x10,
	0x05, 0x12, 0x1c, 0x0a, 0x18, 0x6b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x10, 0x06, 0x12,
	0x1d, 0x0a, 0x19, 0x6b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x10, 0x07, 0x42, 0x07,
	0x5a, 0x05, 0x2e, 0x2f, 0x6b, 0x70, 0x62,
}

var (
	file_TSWPCommandArchives_proto_rawDescOnce sync.Once
	file_TSWPCommandArchives_proto_rawDescData = file_TSWPCommandArchives_proto_rawDesc
)

func file_TSWPCommandArchives_proto_rawDescGZIP() []byte {
	file_TSWPCommandArchives_proto_rawDescOnce.Do(func() {
		file_TSWPCommandArchives_proto_rawDescData = protoimpl.X.CompressGZIP(file_TSWPCommandArchives_proto_rawDescData)
	})
	return file_TSWPCommandArchives_proto_rawDescData
}

var file_TSWPCommandArchives_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_TSWPCommandArchives_proto_msgTypes = make([]protoimpl.MessageInfo, 47)
var file_TSWPCommandArchives_proto_goTypes = []interface{}{
	(ObjectPropertyType)(0),                                      // 0: TSWP.ObjectPropertyType
	(TextCommandArchive_Kind)(0),                                 // 1: TSWP.TextCommandArchive.Kind
	(StorageActionCommandArchive_Kind)(0),                        // 2: TSWP.StorageActionCommandArchive.Kind
	(UpdateFlowInfoCommandArchive_Mode)(0),                       // 3: TSWP.UpdateFlowInfoCommandArchive.Mode
	(*DummyCommandArchive)(nil),                                  // 4: TSWP.DummyCommandArchive
	(*TextCommandArchive)(nil),                                   // 5: TSWP.TextCommandArchive
	(*StorageActionCommandArchive)(nil),                          // 6: TSWP.StorageActionCommandArchive
	(*SetColumnStyleCommandArchive)(nil),                         // 7: TSWP.SetColumnStyleCommandArchive
	(*ReplaceAllUsesOfStyleCommandArchive)(nil),                  // 8: TSWP.ReplaceAllUsesOfStyleCommandArchive
	(*InsertColumnsCommandArchive)(nil),                          // 9: TSWP.InsertColumnsCommandArchive
	(*InsertRowsCommandArchive)(nil),                             // 10: TSWP.InsertRowsCommandArchive
	(*RemoveColumnsCommandArchive)(nil),                          // 11: TSWP.RemoveColumnsCommandArchive
	(*RemoveRowsCommandArchive)(nil),                             // 12: TSWP.RemoveRowsCommandArchive
	(*MergeCellsCommandArchive)(nil),                             // 13: TSWP.MergeCellsCommandArchive
	(*ApplyPlaceholderTextCommandArchive)(nil),                   // 14: TSWP.ApplyPlaceholderTextCommandArchive
	(*UpdateDateTimeFieldCommandArchive)(nil),                    // 15: TSWP.UpdateDateTimeFieldCommandArchive
	(*ApplyRubyTextCommandArchive)(nil),                          // 16: TSWP.ApplyRubyTextCommandArchive
	(*ModifyRubyTextCommandArchive)(nil),                         // 17: TSWP.ModifyRubyTextCommandArchive
	(*ModifyTOCSettingsBaseCommandArchive)(nil),                  // 18: TSWP.ModifyTOCSettingsBaseCommandArchive
	(*ModifyTOCSettingsForTOCInfoCommandArchive)(nil),            // 19: TSWP.ModifyTOCSettingsForTOCInfoCommandArchive
	(*ModifyTOCSettingsPresetForThemeCommandArchive)(nil),        // 20: TSWP.ModifyTOCSettingsPresetForThemeCommandArchive
	(*AnchorAttachmentCommandArchive)(nil),                       // 21: TSWP.AnchorAttachmentCommandArchive
	(*TextApplyThemeCommandArchive)(nil),                         // 22: TSWP.TextApplyThemeCommandArchive
	(*MoveColumnsCommandArchive)(nil),                            // 23: TSWP.MoveColumnsCommandArchive
	(*MoveRowsCommandArchive)(nil),                               // 24: TSWP.MoveRowsCommandArchive
	(*TSWPShapeApplyPresetCommandArchive)(nil),                   // 25: TSWP.TSWPShapeApplyPresetCommandArchive
	(*StyleBaseCommandArchive)(nil),                              // 26: TSWP.StyleBaseCommandArchive
	(*StyleCreateCommandArchive)(nil),                            // 27: TSWP.StyleCreateCommandArchive
	(*StyleRenameCommandArchive)(nil),                            // 28: TSWP.StyleRenameCommandArchive
	(*StyleUpdateCommandArchive)(nil),                            // 29: TSWP.StyleUpdateCommandArchive
	(*StyleDeleteCommandArchive)(nil),                            // 30: TSWP.StyleDeleteCommandArchive
	(*StyleReorderCommandArchive)(nil),                           // 31: TSWP.StyleReorderCommandArchive
	(*TSWPStyleUpdatePropertyMapCommandArchive)(nil),             // 32: TSWP.TSWPStyleUpdatePropertyMapCommandArchive
	(*TSWPShapeStyleSetValueCommandArchive)(nil),                 // 33: TSWP.TSWPShapeStyleSetValueCommandArchive
	(*SelectionTransformerArchive)(nil),                          // 34: TSWP.SelectionTransformerArchive
	(*TSWPPencilAnnotationSelectionTransformerArchive)(nil),      // 35: TSWP.TSWPPencilAnnotationSelectionTransformerArchive
	(*TSWPShapeSelectionTransformerArchive)(nil),                 // 36: TSWP.TSWPShapeSelectionTransformerArchive
	(*ShapeContentDescription)(nil),                              // 37: TSWP.ShapeContentDescription
	(*ObjectPropertyArchive)(nil),                                // 38: TSWP.ObjectPropertyArchive
	(*SetObjectPropertiesCommandArchive)(nil),                    // 39: TSWP.SetObjectPropertiesCommandArchive
	(*UpdateFlowInfoCommandArchive)(nil),                         // 40: TSWP.UpdateFlowInfoCommandArchive
	(*AddFlowInfoCommandArchive)(nil),                            // 41: TSWP.AddFlowInfoCommandArchive
	(*RemoveFlowInfoCommandArchive)(nil),                         // 42: TSWP.RemoveFlowInfoCommandArchive
	(*TextCommentReplyCommandArchive)(nil),                       // 43: TSWP.TextCommentReplyCommandArchive
	(*ContainedObjectsCommandArchive)(nil),                       // 44: TSWP.ContainedObjectsCommandArchive
	(*EquationInfoGeometryCommandArchive)(nil),                   // 45: TSWP.EquationInfoGeometryCommandArchive
	(*TSWPCharacterStyleChangePropertyCommand_GArchive)(nil),     // 46: TSWP.TSWPCharacterStyleChangePropertyCommand_GArchive
	(*TSWPParagraphStyleChangePropertyCommand_GArchive)(nil),     // 47: TSWP.TSWPParagraphStyleChangePropertyCommand_GArchive
	(*ContainedObjectsCommandArchive_AddBehaviorArgs)(nil),       // 48: TSWP.ContainedObjectsCommandArchive.AddBehaviorArgs
	(*ContainedObjectsCommandArchive_RemoveBehaviorArgs)(nil),    // 49: TSWP.ContainedObjectsCommandArchive.RemoveBehaviorArgs
	(*ContainedObjectsCommandArchive_RearrangeBehaviorArgs)(nil), // 50: TSWP.ContainedObjectsCommandArchive.RearrangeBehaviorArgs
	(*CommandArchive)(nil),                                       // 51: TSK.CommandArchive
	(*Reference)(nil),                                            // 52: TSP.Reference
	(*UndoTransaction)(nil),                                      // 53: TSWP.UndoTransaction
	(*UUIDPath)(nil),                                             // 54: TSP.UUIDPath
	(*UUID)(nil),                                                 // 55: TSP.UUID
	(*DataReferenceRecord)(nil),                                  // 56: TSK.DataReferenceRecord
	(*Date)(nil),                                                 // 57: TSP.Date
	(DateTimeSmartFieldArchive_DateTimeFormatterStyle)(0),        // 58: TSWP.DateTimeSmartFieldArchive.DateTimeFormatterStyle
	(*ApplyThemeChildCommandArchive)(nil),                        // 59: TSS.ApplyThemeChildCommandArchive
	(*BaseApplyPresetCommandArchive)(nil),                        // 60: TSD.BaseApplyPresetCommandArchive
	(*TSSStyleUpdatePropertyMapCommandArchive)(nil),              // 61: TSS.TSSStyleUpdatePropertyMapCommandArchive
	(*BaseStyleSetValueCommandArchive)(nil),                      // 62: TSD.BaseStyleSetValueCommandArchive
	(*ShapeStylePropertyChangeSetArchive)(nil),                   // 63: TSWPSOS.ShapeStylePropertyChangeSetArchive
	(*ShapeSelectionTransformerArchive)(nil),                     // 64: TSD.ShapeSelectionTransformerArchive
	(*DrawableContentDescription)(nil),                           // 65: TSD.DrawableContentDescription
	(*FillArchive)(nil),                                          // 66: TSD.FillArchive
	(*Color)(nil),                                                // 67: TSP.Color
	(*ShadowArchive)(nil),                                        // 68: TSD.ShadowArchive
	(CommentCommandVariant)(0),                                   // 69: TSD.CommentCommandVariant
	(*MediaInfoGeometryCommandArchive)(nil),                      // 70: TSD.MediaInfoGeometryCommandArchive
	(*Range)(nil),                                                // 71: TSP.Range
	(*TSWPSOSCharacterStylePropertyChangeSetArchive)(nil),        // 72: TSWPSOS.TSWPSOSCharacterStylePropertyChangeSetArchive
	(*TSWPSOSParagraphStylePropertyChangeSetArchive)(nil),        // 73: TSWPSOS.TSWPSOSParagraphStylePropertyChangeSetArchive
	(*AddIdOperationArgs)(nil),                                   // 74: TSK.AddIdOperationArgs
	(*RemoveIdOperationArgs)(nil),                                // 75: TSK.RemoveIdOperationArgs
	(*RearrangeIdOperationArgs)(nil),                             // 76: TSK.RearrangeIdOperationArgs
}
var file_TSWPCommandArchives_proto_depIdxs = []int32{
	51,  // 0: TSWP.TextCommandArchive.super:type_name -> TSK.CommandArchive
	52,  // 1: TSWP.TextCommandArchive.storage:type_name -> TSP.Reference
	53,  // 2: TSWP.TextCommandArchive.undo_transaction:type_name -> TSWP.UndoTransaction
	1,   // 3: TSWP.TextCommandArchive.kind:type_name -> TSWP.TextCommandArchive.Kind
	51,  // 4: TSWP.StorageActionCommandArchive.super:type_name -> TSK.CommandArchive
	54,  // 5: TSWP.StorageActionCommandArchive.storage:type_name -> TSP.UUIDPath
	53,  // 6: TSWP.StorageActionCommandArchive.undo_transaction:type_name -> TSWP.UndoTransaction
	2,   // 7: TSWP.StorageActionCommandArchive.kind:type_name -> TSWP.StorageActionCommandArchive.Kind
	55,  // 8: TSWP.StorageActionCommandArchive.custom_format_keys:type_name -> TSP.UUID
	56,  // 9: TSWP.StorageActionCommandArchive.changed_data_reference_record:type_name -> TSK.DataReferenceRecord
	51,  // 10: TSWP.SetColumnStyleCommandArchive.super:type_name -> TSK.CommandArchive
	52,  // 11: TSWP.SetColumnStyleCommandArchive.storage:type_name -> TSP.Reference
	53,  // 12: TSWP.SetColumnStyleCommandArchive.undo_transaction:type_name -> TSWP.UndoTransaction
	51,  // 13: TSWP.ReplaceAllUsesOfStyleCommandArchive.super:type_name -> TSK.CommandArchive
	52,  // 14: TSWP.ReplaceAllUsesOfStyleCommandArchive.storage:type_name -> TSP.Reference
	53,  // 15: TSWP.ReplaceAllUsesOfStyleCommandArchive.undo_transaction:type_name -> TSWP.UndoTransaction
	51,  // 16: TSWP.InsertColumnsCommandArchive.super:type_name -> TSK.CommandArchive
	52,  // 17: TSWP.InsertColumnsCommandArchive.storage:type_name -> TSP.Reference
	53,  // 18: TSWP.InsertColumnsCommandArchive.undo_transaction:type_name -> TSWP.UndoTransaction
	51,  // 19: TSWP.InsertRowsCommandArchive.super:type_name -> TSK.CommandArchive
	52,  // 20: TSWP.InsertRowsCommandArchive.storage:type_name -> TSP.Reference
	53,  // 21: TSWP.InsertRowsCommandArchive.undo_transaction:type_name -> TSWP.UndoTransaction
	51,  // 22: TSWP.RemoveColumnsCommandArchive.super:type_name -> TSK.CommandArchive
	52,  // 23: TSWP.RemoveColumnsCommandArchive.storage:type_name -> TSP.Reference
	53,  // 24: TSWP.RemoveColumnsCommandArchive.undo_transaction:type_name -> TSWP.UndoTransaction
	51,  // 25: TSWP.RemoveRowsCommandArchive.super:type_name -> TSK.CommandArchive
	52,  // 26: TSWP.RemoveRowsCommandArchive.storage:type_name -> TSP.Reference
	53,  // 27: TSWP.RemoveRowsCommandArchive.undo_transaction:type_name -> TSWP.UndoTransaction
	51,  // 28: TSWP.MergeCellsCommandArchive.super:type_name -> TSK.CommandArchive
	52,  // 29: TSWP.MergeCellsCommandArchive.storage:type_name -> TSP.Reference
	53,  // 30: TSWP.MergeCellsCommandArchive.undo_transaction:type_name -> TSWP.UndoTransaction
	51,  // 31: TSWP.ApplyPlaceholderTextCommandArchive.super:type_name -> TSK.CommandArchive
	52,  // 32: TSWP.ApplyPlaceholderTextCommandArchive.storage:type_name -> TSP.Reference
	53,  // 33: TSWP.ApplyPlaceholderTextCommandArchive.undo_transaction:type_name -> TSWP.UndoTransaction
	5,   // 34: TSWP.UpdateDateTimeFieldCommandArchive.super:type_name -> TSWP.TextCommandArchive
	52,  // 35: TSWP.UpdateDateTimeFieldCommandArchive.date_time_field:type_name -> TSP.Reference
	57,  // 36: TSWP.UpdateDateTimeFieldCommandArchive.date:type_name -> TSP.Date
	58,  // 37: TSWP.UpdateDateTimeFieldCommandArchive.date_style:type_name -> TSWP.DateTimeSmartFieldArchive.DateTimeFormatterStyle
	58,  // 38: TSWP.UpdateDateTimeFieldCommandArchive.time_style:type_name -> TSWP.DateTimeSmartFieldArchive.DateTimeFormatterStyle
	51,  // 39: TSWP.ApplyRubyTextCommandArchive.super:type_name -> TSK.CommandArchive
	52,  // 40: TSWP.ApplyRubyTextCommandArchive.storage:type_name -> TSP.Reference
	53,  // 41: TSWP.ApplyRubyTextCommandArchive.undo_transaction:type_name -> TSWP.UndoTransaction
	51,  // 42: TSWP.ModifyRubyTextCommandArchive.super:type_name -> TSK.CommandArchive
	52,  // 43: TSWP.ModifyRubyTextCommandArchive.ruby_field:type_name -> TSP.Reference
	53,  // 44: TSWP.ModifyRubyTextCommandArchive.undo_transaction:type_name -> TSWP.UndoTransaction
	51,  // 45: TSWP.ModifyTOCSettingsBaseCommandArchive.super:type_name -> TSK.CommandArchive
	52,  // 46: TSWP.ModifyTOCSettingsBaseCommandArchive.old_toc_settings:type_name -> TSP.Reference
	52,  // 47: TSWP.ModifyTOCSettingsBaseCommandArchive.new_toc_settings:type_name -> TSP.Reference
	18,  // 48: TSWP.ModifyTOCSettingsForTOCInfoCommandArchive.super:type_name -> TSWP.ModifyTOCSettingsBaseCommandArchive
	54,  // 49: TSWP.ModifyTOCSettingsForTOCInfoCommandArchive.toc_info_uuid_path:type_name -> TSP.UUIDPath
	18,  // 50: TSWP.ModifyTOCSettingsPresetForThemeCommandArchive.super:type_name -> TSWP.ModifyTOCSettingsBaseCommandArchive
	52,  // 51: TSWP.ModifyTOCSettingsPresetForThemeCommandArchive.theme:type_name -> TSP.Reference
	6,   // 52: TSWP.AnchorAttachmentCommandArchive.super:type_name -> TSWP.StorageActionCommandArchive
	52,  // 53: TSWP.AnchorAttachmentCommandArchive.attachment:type_name -> TSP.Reference
	59,  // 54: TSWP.TextApplyThemeCommandArchive.super:type_name -> TSS.ApplyThemeChildCommandArchive
	52,  // 55: TSWP.TextApplyThemeCommandArchive.storage:type_name -> TSP.Reference
	53,  // 56: TSWP.TextApplyThemeCommandArchive.undo_transaction:type_name -> TSWP.UndoTransaction
	51,  // 57: TSWP.MoveColumnsCommandArchive.super:type_name -> TSK.CommandArchive
	52,  // 58: TSWP.MoveColumnsCommandArchive.storage:type_name -> TSP.Reference
	53,  // 59: TSWP.MoveColumnsCommandArchive.undo_transaction:type_name -> TSWP.UndoTransaction
	51,  // 60: TSWP.MoveRowsCommandArchive.super:type_name -> TSK.CommandArchive
	52,  // 61: TSWP.MoveRowsCommandArchive.storage:type_name -> TSP.Reference
	53,  // 62: TSWP.MoveRowsCommandArchive.undo_transaction:type_name -> TSWP.UndoTransaction
	60,  // 63: TSWP.TSWPShapeApplyPresetCommandArchive.super:type_name -> TSD.BaseApplyPresetCommandArchive
	52,  // 64: TSWP.TSWPShapeApplyPresetCommandArchive.undo_style:type_name -> TSP.Reference
	51,  // 65: TSWP.StyleBaseCommandArchive.super:type_name -> TSK.CommandArchive
	52,  // 66: TSWP.StyleBaseCommandArchive.theme:type_name -> TSP.Reference
	52,  // 67: TSWP.StyleBaseCommandArchive.style:type_name -> TSP.Reference
	26,  // 68: TSWP.StyleCreateCommandArchive.super:type_name -> TSWP.StyleBaseCommandArchive
	26,  // 69: TSWP.StyleRenameCommandArchive.super:type_name -> TSWP.StyleBaseCommandArchive
	26,  // 70: TSWP.StyleUpdateCommandArchive.super:type_name -> TSWP.StyleBaseCommandArchive
	52,  // 71: TSWP.StyleUpdateCommandArchive.original_style:type_name -> TSP.Reference
	52,  // 72: TSWP.StyleUpdateCommandArchive.updated_style:type_name -> TSP.Reference
	26,  // 73: TSWP.StyleDeleteCommandArchive.super:type_name -> TSWP.StyleBaseCommandArchive
	26,  // 74: TSWP.StyleReorderCommandArchive.super:type_name -> TSWP.StyleBaseCommandArchive
	61,  // 75: TSWP.TSWPStyleUpdatePropertyMapCommandArchive.super:type_name -> TSS.TSSStyleUpdatePropertyMapCommandArchive
	62,  // 76: TSWP.TSWPShapeStyleSetValueCommandArchive.super:type_name -> TSD.BaseStyleSetValueCommandArchive
	63,  // 77: TSWP.TSWPShapeStyleSetValueCommandArchive.change:type_name -> TSWPSOS.ShapeStylePropertyChangeSetArchive
	54,  // 78: TSWP.SelectionTransformerArchive.storage_uuid_path:type_name -> TSP.UUIDPath
	52,  // 79: TSWP.SelectionTransformerArchive.selection:type_name -> TSP.Reference
	54,  // 80: TSWP.TSWPPencilAnnotationSelectionTransformerArchive.storage_uuid_path:type_name -> TSP.UUIDPath
	64,  // 81: TSWP.TSWPShapeSelectionTransformerArchive.super:type_name -> TSD.ShapeSelectionTransformerArchive
	54,  // 82: TSWP.TSWPShapeSelectionTransformerArchive.storage_uuid_path:type_name -> TSP.UUIDPath
	65,  // 83: TSWP.ShapeContentDescription.super:type_name -> TSD.DrawableContentDescription
	0,   // 84: TSWP.ObjectPropertyArchive.type:type_name -> TSWP.ObjectPropertyType
	54,  // 85: TSWP.ObjectPropertyArchive.id_path_value:type_name -> TSP.UUIDPath
	66,  // 86: TSWP.ObjectPropertyArchive.fill_value:type_name -> TSD.FillArchive
	67,  // 87: TSWP.ObjectPropertyArchive.color_value:type_name -> TSP.Color
	68,  // 88: TSWP.ObjectPropertyArchive.shadow_value:type_name -> TSD.ShadowArchive
	51,  // 89: TSWP.SetObjectPropertiesCommandArchive.super:type_name -> TSK.CommandArchive
	54,  // 90: TSWP.SetObjectPropertiesCommandArchive.object_uuid_path:type_name -> TSP.UUIDPath
	38,  // 91: TSWP.SetObjectPropertiesCommandArchive.properties:type_name -> TSWP.ObjectPropertyArchive
	38,  // 92: TSWP.SetObjectPropertiesCommandArchive.old_properties:type_name -> TSWP.ObjectPropertyArchive
	51,  // 93: TSWP.UpdateFlowInfoCommandArchive.super:type_name -> TSK.CommandArchive
	3,   // 94: TSWP.UpdateFlowInfoCommandArchive.command_mode:type_name -> TSWP.UpdateFlowInfoCommandArchive.Mode
	54,  // 95: TSWP.UpdateFlowInfoCommandArchive.flow_info_uuid_path:type_name -> TSP.UUIDPath
	54,  // 96: TSWP.UpdateFlowInfoCommandArchive.text_box_id_path_to_add_or_remove:type_name -> TSP.UUIDPath
	54,  // 97: TSWP.UpdateFlowInfoCommandArchive.text_box_id_paths_at_start:type_name -> TSP.UUIDPath
	54,  // 98: TSWP.UpdateFlowInfoCommandArchive.suggested_text_box_id_paths_at_end:type_name -> TSP.UUIDPath
	52,  // 99: TSWP.UpdateFlowInfoCommandArchive.undo_text_boxes_to_restore:type_name -> TSP.Reference
	52,  // 100: TSWP.UpdateFlowInfoCommandArchive.undo_added_shape_info:type_name -> TSP.Reference
	52,  // 101: TSWP.UpdateFlowInfoCommandArchive.undo_removed_shape_info:type_name -> TSP.Reference
	51,  // 102: TSWP.AddFlowInfoCommandArchive.super:type_name -> TSK.CommandArchive
	52,  // 103: TSWP.AddFlowInfoCommandArchive.flow_info_to_add:type_name -> TSP.Reference
	52,  // 104: TSWP.AddFlowInfoCommandArchive.flow_info_archive:type_name -> TSP.Reference
	52,  // 105: TSWP.AddFlowInfoCommandArchive.working_undo_object:type_name -> TSP.Reference
	51,  // 106: TSWP.RemoveFlowInfoCommandArchive.super:type_name -> TSK.CommandArchive
	54,  // 107: TSWP.RemoveFlowInfoCommandArchive.flow_info_uuid_path:type_name -> TSP.UUIDPath
	52,  // 108: TSWP.RemoveFlowInfoCommandArchive.undo_object:type_name -> TSP.Reference
	51,  // 109: TSWP.TextCommentReplyCommandArchive.super:type_name -> TSK.CommandArchive
	54,  // 110: TSWP.TextCommentReplyCommandArchive.storage_uuid_path:type_name -> TSP.UUIDPath
	52,  // 111: TSWP.TextCommentReplyCommandArchive.forward_comment:type_name -> TSP.Reference
	52,  // 112: TSWP.TextCommentReplyCommandArchive.inverse_comment:type_name -> TSP.Reference
	69,  // 113: TSWP.TextCommentReplyCommandArchive.forward_variant:type_name -> TSD.CommentCommandVariant
	69,  // 114: TSWP.TextCommentReplyCommandArchive.inverse_variant:type_name -> TSD.CommentCommandVariant
	51,  // 115: TSWP.ContainedObjectsCommandArchive.super:type_name -> TSK.CommandArchive
	52,  // 116: TSWP.ContainedObjectsCommandArchive.target:type_name -> TSP.Reference
	52,  // 117: TSWP.ContainedObjectsCommandArchive.objects:type_name -> TSP.Reference
	52,  // 118: TSWP.ContainedObjectsCommandArchive.undo_object_for_commit:type_name -> TSP.Reference
	52,  // 119: TSWP.ContainedObjectsCommandArchive.undo_object_for_make_inverse:type_name -> TSP.Reference
	48,  // 120: TSWP.ContainedObjectsCommandArchive.add_behavior_args:type_name -> TSWP.ContainedObjectsCommandArchive.AddBehaviorArgs
	49,  // 121: TSWP.ContainedObjectsCommandArchive.remove_behavior_args:type_name -> TSWP.ContainedObjectsCommandArchive.RemoveBehaviorArgs
	50,  // 122: TSWP.ContainedObjectsCommandArchive.rearrange_behavior_args:type_name -> TSWP.ContainedObjectsCommandArchive.RearrangeBehaviorArgs
	70,  // 123: TSWP.EquationInfoGeometryCommandArchive.super:type_name -> TSD.MediaInfoGeometryCommandArchive
	6,   // 124: TSWP.TSWPCharacterStyleChangePropertyCommand_GArchive.super:type_name -> TSWP.StorageActionCommandArchive
	71,  // 125: TSWP.TSWPCharacterStyleChangePropertyCommand_GArchive.range_list:type_name -> TSP.Range
	72,  // 126: TSWP.TSWPCharacterStyleChangePropertyCommand_GArchive.change_list:type_name -> TSWPSOS.TSWPSOSCharacterStylePropertyChangeSetArchive
	6,   // 127: TSWP.TSWPParagraphStyleChangePropertyCommand_GArchive.super:type_name -> TSWP.StorageActionCommandArchive
	71,  // 128: TSWP.TSWPParagraphStyleChangePropertyCommand_GArchive.range_list:type_name -> TSP.Range
	73,  // 129: TSWP.TSWPParagraphStyleChangePropertyCommand_GArchive.change_list:type_name -> TSWPSOS.TSWPSOSParagraphStylePropertyChangeSetArchive
	74,  // 130: TSWP.ContainedObjectsCommandArchive.AddBehaviorArgs.args_list:type_name -> TSK.AddIdOperationArgs
	75,  // 131: TSWP.ContainedObjectsCommandArchive.RemoveBehaviorArgs.args_list:type_name -> TSK.RemoveIdOperationArgs
	76,  // 132: TSWP.ContainedObjectsCommandArchive.RearrangeBehaviorArgs.args_list:type_name -> TSK.RearrangeIdOperationArgs
	133, // [133:133] is the sub-list for method output_type
	133, // [133:133] is the sub-list for method input_type
	133, // [133:133] is the sub-list for extension type_name
	133, // [133:133] is the sub-list for extension extendee
	0,   // [0:133] is the sub-list for field type_name
}

func init() { file_TSWPCommandArchives_proto_init() }
func file_TSWPCommandArchives_proto_init() {
	if File_TSWPCommandArchives_proto != nil {
		return
	}
	file_TSPMessages_proto_init()
	file_TSSArchives_proto_init()
	file_TSDArchives_proto_init()
	file_TSDCommandArchives_proto_init()
	file_TSKArchives_proto_init()
	file_TSWPArchives_proto_init()
	file_TSWPArchives_sos_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_TSWPCommandArchives_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DummyCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPCommandArchives_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPCommandArchives_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageActionCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPCommandArchives_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetColumnStyleCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPCommandArchives_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplaceAllUsesOfStyleCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPCommandArchives_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertColumnsCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPCommandArchives_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertRowsCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPCommandArchives_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveColumnsCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPCommandArchives_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveRowsCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPCommandArchives_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergeCellsCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPCommandArchives_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyPlaceholderTextCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPCommandArchives_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDateTimeFieldCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPCommandArchives_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyRubyTextCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPCommandArchives_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyRubyTextCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPCommandArchives_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyTOCSettingsBaseCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPCommandArchives_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyTOCSettingsForTOCInfoCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPCommandArchives_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyTOCSettingsPresetForThemeCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPCommandArchives_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnchorAttachmentCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPCommandArchives_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextApplyThemeCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPCommandArchives_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveColumnsCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPCommandArchives_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveRowsCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPCommandArchives_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSWPShapeApplyPresetCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPCommandArchives_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StyleBaseCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPCommandArchives_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StyleCreateCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPCommandArchives_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StyleRenameCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPCommandArchives_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StyleUpdateCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPCommandArchives_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StyleDeleteCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPCommandArchives_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StyleReorderCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPCommandArchives_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSWPStyleUpdatePropertyMapCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPCommandArchives_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSWPShapeStyleSetValueCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPCommandArchives_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectionTransformerArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPCommandArchives_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSWPPencilAnnotationSelectionTransformerArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPCommandArchives_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSWPShapeSelectionTransformerArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPCommandArchives_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShapeContentDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPCommandArchives_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectPropertyArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPCommandArchives_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetObjectPropertiesCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPCommandArchives_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFlowInfoCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPCommandArchives_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFlowInfoCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPCommandArchives_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveFlowInfoCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPCommandArchives_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextCommentReplyCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPCommandArchives_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainedObjectsCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPCommandArchives_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquationInfoGeometryCommandArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPCommandArchives_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSWPCharacterStyleChangePropertyCommand_GArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPCommandArchives_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSWPParagraphStyleChangePropertyCommand_GArchive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPCommandArchives_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainedObjectsCommandArchive_AddBehaviorArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPCommandArchives_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainedObjectsCommandArchive_RemoveBehaviorArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TSWPCommandArchives_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainedObjectsCommandArchive_RearrangeBehaviorArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_TSWPCommandArchives_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   47,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_TSWPCommandArchives_proto_goTypes,
		DependencyIndexes: file_TSWPCommandArchives_proto_depIdxs,
		EnumInfos:         file_TSWPCommandArchives_proto_enumTypes,
		MessageInfos:      file_TSWPCommandArchives_proto_msgTypes,
	}.Build()
	File_TSWPCommandArchives_proto = out.File
	file_TSWPCommandArchives_proto_rawDesc = nil
	file_TSWPCommandArchives_proto_goTypes = nil
	file_TSWPCommandArchives_proto_depIdxs = nil
}
